/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 19 "include/linux/types.h"
typedef __u32 nlink_t;
#line 20 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 106 "include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 176 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 176 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 181 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 181 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 182 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 187
struct hlist_node;
#line 187 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 191 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 202 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 157 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 710 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/bug.h"
struct timespec;
#line 97
struct compat_timespec;
#line 98 "include/linux/bug.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 98 "include/linux/bug.h"
struct __anonstruct_nanosleep_10 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 98
struct pollfd;
#line 98 "include/linux/bug.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 98 "include/linux/bug.h"
union __anonunion_ldv_2106_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 98 "include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_2106_8 ldv_2106 ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 27
struct exec_domain;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2240_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2255_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2256_12 {
   struct __anonstruct_ldv_2240_13 ldv_2240 ;
   struct __anonstruct_ldv_2255_14 ldv_2255 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2256_12 ldv_2256 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 335
struct thread_struct;
#line 337
struct cpumask;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2859_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2859_19 ldv_2859 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 26 "include/linux/personality.h"
struct map_segment;
#line 26 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5167_24 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5173_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5174_23 {
   struct __anonstruct_ldv_5167_24 ldv_5167 ;
   struct __anonstruct_ldv_5173_25 ldv_5173 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5183_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5174_23 ldv_5174 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5183_26 ldv_5183 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 445
struct kmem_cache;
#line 446
struct perf_event;
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5911_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5911_29 ldv_5911 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5918_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5918_31 ldv_5918 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6134_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6135_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6134_33 ldv_6134 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6135_32 ldv_6135 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 11 "include/linux/wait.h"
struct __wait_queue;
#line 11 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 721 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 313 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 334
struct tvec_base;
#line 335 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 855 "include/linux/mmzone.h"
struct ctl_table;
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 389 "include/linux/gfp.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "include/linux/sysctl.h"
struct __anonstruct_ldv_12753_129 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "include/linux/sysctl.h"
union __anonunion_ldv_12755_128 {
   struct __anonstruct_ldv_12753_129 ldv_12753 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_12755_128 ldv_12755 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 37 "include/linux/kmod.h"
struct cred;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct sock;
#line 45
struct kobject;
#line 46
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 52 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13535_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13535_134 ldv_13535 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 72
struct exception_table_entry;
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 345 "include/linux/irq.h"
struct proc_dir_entry;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 85 "include/linux/list_nulls.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 64 "include/linux/miscdevice.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 568 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 578
struct dma_coherent_mem;
#line 578 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 703 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 1076 "include/linux/device.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 43 "include/linux/uio.h"
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112
struct address_space;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16313_137 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16323_141 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16325_140 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16323_141 ldv_16323 ;
   int units ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16327_139 {
   union __anonunion_ldv_16325_140 ldv_16325 ;
   atomic_t _count ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16328_138 {
   unsigned long counters ;
   struct __anonstruct_ldv_16327_139 ldv_16327 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16329_136 {
   union __anonunion_ldv_16313_137 ldv_16313 ;
   union __anonunion_ldv_16328_138 ldv_16328 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16336_143 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 113
struct slab;
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16342_144 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16343_142 {
   struct list_head lru ;
   struct __anonstruct_ldv_16336_143 ldv_16336 ;
   struct list_head list ;
   struct __anonstruct_ldv_16342_144 ldv_16342 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16348_145 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 113 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_16329_136 ldv_16329 ;
   union __anonunion_ldv_16343_142 ldv_16343 ;
   union __anonunion_ldv_16348_145 ldv_16348 ;
   unsigned long debug_flags ;
};
#line 170 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 218 "include/linux/mm_types.h"
struct __anonstruct_linear_147 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 218 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_linear_147 linear ;
   struct list_head nonlinear ;
};
#line 218
struct anon_vma;
#line 218
struct vm_operations_struct;
#line 218
struct mempolicy;
#line 218 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 278 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 284 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 297 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 310
struct linux_binfmt;
#line 310
struct mmu_notifier_mm;
#line 310 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1689 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1024 "include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 11 "include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 23 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_149 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_149 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_150 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_150 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_151 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_151 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_152 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_152 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_153 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_153 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_154 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_154 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_155 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_155 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_156 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_156 ifs_ifsu ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_157 {
   char ifrn_name[16U] ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_158 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_157 ifr_ifrn ;
   union __anonunion_ifr_ifru_158 ifr_ifru ;
};
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_20010_161 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_20012_160 {
   struct __anonstruct_ldv_20010_161 ldv_20010 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_20012_160 ldv_20012 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_162 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_162 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 419 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 217 "include/linux/capability.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
struct percpu_rw_semaphore {
   unsigned int *counters ;
   bool locked ;
   struct mutex mtx ;
};
#line 82 "include/linux/percpu-rwsem.h"
struct bio_set;
#line 83
struct bio;
#line 84
struct bio_integrity_payload;
#line 85
struct block_device;
#line 86
struct io_context;
#line 87
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 57
struct hd_geometry;
#line 58
struct kiocb;
#line 59
struct pipe_inode_info;
#line 60
struct poll_table_struct;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 64 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 240 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_21171_164 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_21171_164 ldv_21171 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 339 "include/linux/fs.h"
union __anonunion_arg_166 {
   char *buf ;
   void *data ;
};
#line 339 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_165 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_166 arg ;
   int error ;
};
#line 339 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_165 read_descriptor_t;
#line 342 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 401
struct backing_dev_info;
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 423
struct request_queue;
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
   struct percpu_rw_semaphore bd_block_size_semaphore ;
};
#line 498
struct posix_acl;
#line 499
struct inode_operations;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21606_167 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21626_168 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 499
struct file_lock;
#line 499
struct cdev;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21642_169 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 499 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_21606_167 ldv_21606 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_21626_168 ldv_21626 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_21642_169 ldv_21642 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 727 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 735 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 758 "include/linux/fs.h"
union __anonunion_f_u_170 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 758 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_170 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 901
struct files_struct;
#line 901 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 902 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 907 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 919
struct net;
#line 924
struct nlm_lockowner;
#line 925 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_172 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_171 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_172 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_171 fl_u ;
};
#line 1011 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1217 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1233
struct file_system_type;
#line 1233
struct super_operations;
#line 1233
struct xattr_handler;
#line 1233
struct mtd_info;
#line 1233 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1474 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1512
struct block_device_operations;
#line 1513 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1548 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1595 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1808 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_173 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_173 sigset_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_176 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_177 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_178 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_179 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_180 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_181 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_174 {
   int _pad[28U] ;
   struct __anonstruct__kill_175 _kill ;
   struct __anonstruct__timer_176 _timer ;
   struct __anonstruct__rt_177 _rt ;
   struct __anonstruct__sigchld_178 _sigchld ;
   struct __anonstruct__sigfault_179 _sigfault ;
   struct __anonstruct__sigpoll_180 _sigpoll ;
   struct __anonstruct__sigsys_181 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_174 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 460 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_24458_184 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_24467_185 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_186 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_187 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_24458_184 ldv_24458 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_24467_185 ldv_24467 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_186 type_data ;
   union __anonunion_payload_187 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 111 "include/linux/sched.h"
struct cfs_rq;
#line 112
struct task_group;
#line 347
struct kioctx;
#line 348 "include/linux/sched.h"
union __anonunion_ki_obj_188 {
   void *user ;
   struct task_struct *tsk ;
};
#line 348
struct eventfd_ctx;
#line 348 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_188 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 368 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 428 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 435 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 452 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 488
struct autogroup;
#line 489
struct tty_struct;
#line 489
struct taskstats;
#line 489
struct tty_audit_buf;
#line 489 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 664 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 724 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1024
struct uts_namespace;
#line 1025
struct rq;
#line 1026 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1092 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1097 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1158
struct rt_rq;
#line 1158 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1181
struct mem_cgroup;
#line 1181 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1544
struct css_set;
#line 1544
struct compat_robust_list_head;
#line 1544
struct ftrace_ret_stack;
#line 1544 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 220 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 224 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 74 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/archrandom.h"
enum ldv_22313 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/uapi/linux/net.h"
typedef enum ldv_22313 socket_state;
#line 70 "include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 93 "include/linux/net.h"
struct proto_ops;
#line 93 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 119 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 133 "include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 69 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 76 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 315 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct_ldv_28879_206 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28880_205 {
   __wsum csum ;
   struct __anonstruct_ldv_28879_206 ldv_28879 ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28918_207 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_28880_205 ldv_28880 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char pfmemalloc : 1 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_28918_207 ldv_28918 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 528
struct dst_entry;
#line 563
struct rtable;
#line 2658 "include/linux/skbuff.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 35 "include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 65 "include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 105 "include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 120 "include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 128 "include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 137 "include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 166 "include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 183 "include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 281 "include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 303 "include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 331 "include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 382 "include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 404 "include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 425 "include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 458 "include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 474 "include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 494 "include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 505 "include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 511 "include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 536 "include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 670 "include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 678 "include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 754 "include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 249
struct prot_inuse;
#line 250 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[92U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 74 "include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 75
struct ipv4_devconf;
#line 76
struct fib_rules_ops;
#line 77
struct fib_table;
#line 78
struct inet_peer_base;
#line 78
struct xt_table;
#line 78 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   kgid_t sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 77 "include/net/netns/ipv4.h"
struct neighbour;
#line 77 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 80
struct sctp_mib;
#line 81 "include/net/netns/ipv6.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 130 "include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 104 "include/linux/in.h"
union __anonunion_in6_u_210 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 104 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_210 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 326 "include/linux/netfilter.h"
struct nlattr;
#line 341
struct ebt_table;
#line 342 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 32 "include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 486 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t rt_genid ;
};
#line 115 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 34 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 330 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154 "include/linux/idr.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 53 "include/linux/xattr.h"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 98
struct cgroupfs_root;
#line 99
struct cgroup_subsys;
#line 100
struct cgroup;
#line 101
struct css_id;
#line 62 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 147 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct callback_head callback_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct simple_xattrs xattrs ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct simple_xattrs xattrs ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 391 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 440
struct cgroup_taskset;
#line 450 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 642 "include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 3031
struct mnt_namespace;
#line 3032
struct ipc_namespace;
#line 3033 "include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns ;
   struct net *net_ns ;
};
#line 40 "include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 77 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 137 "include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 423 "include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 26 "include/linux/if_link.h"
struct netpoll_info;
#line 27
struct phy_device;
#line 28
struct wireless_dev;
#line 29
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 111 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 193
struct neigh_parms;
#line 213 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 218 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 247 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 339
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 387 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 388 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 496
struct Qdisc;
#line 496 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 560 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 572 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 584 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 636 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 646 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 659 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 670 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 681 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 697 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1013
struct iw_handler_def;
#line 1013
struct iw_public_data;
#line 1013
struct vlan_info;
#line 1013
struct in_device;
#line 1013
struct dn_dev;
#line 1013
struct inet6_dev;
#line 1013
struct cpu_rmap;
#line 1013
struct pcpu_lstats;
#line 1013
struct pcpu_tstats;
#line 1013
struct pcpu_dstats;
#line 1013 "include/linux/netdevice.h"
union __anonunion_ldv_36122_219 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1013
struct garp_port;
#line 1013
struct rtnl_link_ops;
#line 1013 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_36122_219 ldv_36122 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 402 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 19 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct callback_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 89 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38967_224 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 406
struct dn_route;
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38992_225 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 406 "include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_38967_224 ldv_38967 ;
   struct dst_entry *path ;
   void *__pad0 ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_38992_225 ldv_38992 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_226 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_226 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_39207_227 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_39215_228 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_39222_229 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_39207_227 ldv_39207 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_39215_228 ldv_39215 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_39222_229 ldv_39222 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_230 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_230 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 840
struct request_sock_ops;
#line 841
struct timewait_sock_ops;
#line 842
struct inet_hashinfo;
#line 843
struct raw_hashinfo;
#line 844
struct udp_table;
#line 844 "include/net/sock.h"
union __anonunion_h_231 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 844 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_231 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 970 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_40583_232 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_40583_232 ldv_40583 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_233 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_233 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_234 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_234 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 371 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 97 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};
#line 151 "include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 158
struct disk_events;
#line 159
struct timer_rand_state;
#line 159
struct blk_integrity;
#line 159 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 71 "include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 39 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 65 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_44022_241 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_44026_242 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 77 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_44022_241 ldv_44022 ;
   union __anonunion_ldv_44026_242 ldv_44026 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 296 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 415 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 22 "include/linux/bsg.h"
struct elevator_queue;
#line 24
struct blk_trace;
#line 25
struct request;
#line 27
struct bsg_job;
#line 28
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};
#line 67
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_44473_243 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_elv_245 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_flush_246 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_44484_244 {
   struct __anonstruct_elv_245 elv ;
   struct __anonstruct_flush_246 flush ;
};
#line 79 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_44473_243 ldv_44473 ;
   union __anonunion_ldv_44484_244 ldv_44484 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 217 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 219 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 220 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 221 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 229 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 231 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 232 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 233 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 234 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 235
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 242 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 248 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 257 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 286
struct throtl_data;
#line 286 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 952 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1299 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1331 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1332 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1333 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1334 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1335 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1394 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 160 "include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 732 "include/net/ipv6.h"
union __anonunion_ldv_47140_253 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 732 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_47140_253 ldv_47140 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_47155_254 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_47160_256 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_47163_255 {
   struct __anonstruct_ldv_47160_256 ldv_47160 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_ldv_47155_254 ldv_47155 ;
   union __anonunion_ldv_47163_255 ldv_47163 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 316 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1716 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 725 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_49794_259 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_49794_259 ldv_49794 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 900 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 910 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   spinlock_t uuid_lock ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
   int disk_timeout ;
};
#line 39 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 81 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 153 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 950 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 958
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 964 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 970 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct list_head barrier_acked_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_stop_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   unsigned long last_reattach_jif ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   unsigned int peer_max_bio_size ;
   unsigned int local_max_bio_size ;
};
#line 1183
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 1852
enum drbd_force_detach_flags {
    DRBD_IO_ERROR = 0,
    DRBD_META_IO_ERROR = 1,
    DRBD_FORCE_DETACH = 2
} ;
#line 2505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1312 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   unsigned long start_time ;
};
#line 753 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    abort_disk_io = 22,
    completed_ok = 23,
    resend = 24,
    fail_frozen_disk_io = 25,
    restart_frozen_disk_io = 26,
    nothing = 27
} ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 37 "include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 746
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1191
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1560
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_260 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_260 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 64 "include/uapi/linux/net.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 3840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 32 "include/uapi/linux/types.h"
typedef __u16 __le16;
#line 34 "include/uapi/linux/types.h"
typedef __u32 __le32;
#line 36 "include/uapi/linux/types.h"
typedef __u64 __le64;
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 84 "include/linux/nsproxy.h"
struct scm_creds {
   u32 pid ;
   kuid_t uid ;
   kgid_t gid ;
};
#line 17 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct scm_creds creds ;
   __u32 portid ;
   __u32 dst_group ;
   struct sock *ssk ;
};
#line 2228 "include/net/sock.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/uapi/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 924 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 22 "include/linux/drbd_nl.h"
struct detach {
   unsigned char detach_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 77 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 111 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 139 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
   __u64 stop_sector ;
};
#line 148 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_disk_timeout = 89,
    T_detach_force = 41048,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_stop_sector = 24666,
    T_clear_bm = 41023
} ;
#line 115 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 279
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 283
  return (oldbit);
}
}
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 320
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (4*32+23)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n6641:\n\t.popsection": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 87 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 89
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 89
  return (tmp);
}
}
#line 92 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 94
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 94
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 71 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2953: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 2UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 4UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 8UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5527: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_5822: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6135.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_6135.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_6135.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6135.rlock, flags);
#line 341
  return;
}
}
#line 63 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 139
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 568
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 570
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 573
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 169
extern void mutex_unlock(struct mutex * ) ;
#line 77 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 323 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 326 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 328
  tmp = alloc_pages_current(gfp_mask, order);
#line 328
  return (tmp);
}
}
#line 359
extern void __free_pages(struct page * , unsigned int  ) ;
#line 64 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 67
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 67
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 67
  if (tmp != 0L) {
#line 67
    warn_slowpath_null("include/linux/kref.h", 67);
  } else {

  }
#line 67
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 69
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 69
  if (tmp___0 != 0) {
#line 70
    (*release)(kref);
#line 71
    return (1);
  } else {

  }
#line 73
  return (0);
}
}
#line 93 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 95
  tmp = kref_sub(kref, 1U, release);
#line 95
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 917 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 921
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 923
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 927
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 741 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 743
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2355 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 324 "include/linux/sched.h"
extern void schedule(void) ;
#line 2596
extern int _cond_resched(void) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 375 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 377
  tmp = kmalloc(size, flags | 32768U);
#line 377
  return (tmp);
}
}
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  pagefault_disable();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 75
  pagefault_enable();
#line 76
  return;
}
}
#line 34 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 216 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 244
extern void bio_endio(struct bio * , int  ) ;
#line 251
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 1033 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1214
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1310
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1311
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1454
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1455
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1456
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1457
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1458
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1460
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1462
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1464
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1468
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1470
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1471
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1472
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1473
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1474
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1475
int drbd_bm_write_all(struct drbd_conf *mdev ) ;
#line 1476
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1477
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1479
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1480
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1481
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1484
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1486
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1487
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1488
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1489
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1492
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1495
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1498
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1499
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1533
mempool_t *drbd_md_io_page_pool ;
#line 1539
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1541
rwlock_t global_state_lock ;
#line 1558
char *ppsize(char *buf , unsigned long long size ) ;
#line 1583
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) ;
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1829
  _raw_read_lock(& global_state_lock);
#line 1830
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1831
  _raw_read_unlock(& global_state_lock);
#line 1833
  return (rv);
}
}
#line 1860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1864
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1866
  if ((unsigned int )forcedetach == 0U) {
#line 1867
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1867
    if (tmp != 0) {
#line 1868
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1869
    if ((int )mdev->state.ldv_40583.disk > 4) {
#line 1870
      __ns.i = mdev->state.i;
#line 1870
      __ns.ldv_40583.disk = 4U;
#line 1870
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1871
    goto ldv_50835;
  } else {

  }
  case 2: ;
  case 1: 
#line 1876
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1877
  if ((unsigned int )forcedetach == 2U) {
#line 1878
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1879
  if ((int )mdev->state.ldv_40583.disk > 2) {
#line 1880
    __ns___0.i = mdev->state.i;
#line 1880
    __ns___0.ldv_40583.disk = 2U;
#line 1880
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1884
  goto ldv_50835;
  }
  ldv_50835: ;
#line 1887
  return;
}
}
#line 1897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1900
  if (error != 0) {
#line 1902
    tmp = spinlock_check(& mdev->req_lock);
#line 1902
    flags = _raw_spin_lock_irqsave(tmp);
#line 1903
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1904
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1906
  return;
}
}
#line 1932 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1934
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1937
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1940
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2197
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2197
  i = tmp;
#line 2203
  if (i < 0) {
#line 2203
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2203);
  } else {

  }
#line 2204
  if (i == 0) {
#line 2205
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2207
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2208
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2210
      drbd_go_diskless(mdev);
    } else {

    }
#line 2211
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2213
  return;
}
}
#line 2216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2221
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2222
    return (0);
  } else {

  }
#line 2224
  atomic_inc(& mdev->local_cnt);
#line 2225
  io_allowed = (unsigned int )mdev->state.ldv_40583.disk >= (unsigned int )mins;
#line 2226
  if (io_allowed == 0) {
#line 2227
    put_ldev(mdev);
  } else {

  }
#line 2228
  return (io_allowed);
}
}
#line 2492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2496
  tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2496
  if (tmp != 0) {
#line 2497
    return;
  } else {

  }
#line 2499
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2500
  if (r != 0) {
#line 2501
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 2502
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2504
  return;
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 125
  b = mdev->bitmap;
#line 126
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 126
  if (tmp == 0) {
#line 127
    return;
  } else {

  }
#line 128
  tmp___9 = get_current();
#line 128
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 128
    tmp___7 = get_current();
#line 128
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 128
      tmp___5 = get_current();
#line 128
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 128
        tmp___3 = get_current();
#line 128
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 128
        tmp___4 = (char *)"worker";
      }
#line 128
      tmp___6 = tmp___4;
    } else {
#line 128
      tmp___6 = (char *)"asender";
    }
#line 128
    tmp___8 = tmp___6;
  } else {
#line 128
    tmp___8 = (char *)"receiver";
  }
#line 128
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 134
  return;
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 140
  b = mdev->bitmap;
#line 143
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 144
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 145
    return;
  } else {

  }
#line 148
  tmp = mutex_trylock(& b->bm_change);
#line 148
  trylock_failed = tmp == 0;
#line 150
  if (trylock_failed != 0) {
#line 151
    tmp___9 = get_current();
#line 151
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 151
      tmp___7 = get_current();
#line 151
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 151
        tmp___5 = get_current();
#line 151
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 151
          tmp___3 = get_current();
#line 151
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 151
          tmp___4 = (char *)"worker";
        }
#line 151
        tmp___6 = tmp___4;
      } else {
#line 151
        tmp___6 = (char *)"asender";
      }
#line 151
      tmp___8 = tmp___6;
    } else {
#line 151
      tmp___8 = (char *)"receiver";
    }
#line 151
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 159
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 161
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 162
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 163
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 165
  b->bm_why = why;
#line 166
  b->bm_task = get_current();
#line 167
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 171
  b = mdev->bitmap;
#line 172
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 174
    return;
  } else {

  }
#line 177
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 180
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 181
  b->bm_why = 0;
#line 182
  b->bm_task = 0;
#line 183
  mutex_unlock(& b->bm_change);
#line 184
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 214
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 214
  if (tmp != 0L) {
#line 214
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (214), "i" (12UL));
    ldv_51106: ;
#line 214
    goto ldv_51106;
  } else {

  }
#line 215
  page->ldv_16348.private = idx;
#line 216
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 220
  return (page->ldv_16348.private & 16777215UL);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 228
  b = mdev->bitmap;
#line 229
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_16348.private);
#line 230
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 230
  if (tmp == 0) {
#line 230
    goto ldv_51116;
  } else {

  }
#line 230
  tmp___0 = get_current();
#line 230
  __wait.flags = 0U;
#line 230
  __wait.private = (void *)tmp___0;
#line 230
  __wait.func = & autoremove_wake_function;
#line 230
  __wait.task_list.next = & __wait.task_list;
#line 230
  __wait.task_list.prev = & __wait.task_list;
  ldv_51119: 
#line 230
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 230
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 230
  if (tmp___1 == 0) {
#line 230
    goto ldv_51118;
  } else {

  }
#line 230
  schedule();
#line 230
  goto ldv_51119;
  ldv_51118: 
#line 230
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_51116: ;
#line 233
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 235
  b = mdev->bitmap;
#line 236
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_16348.private);
#line 237
  clear_bit(31, (unsigned long volatile   *)addr);
#line 238
  __asm__  volatile   ("": : : "memory");
#line 239
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 240
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 247
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 248
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 249
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 253
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 254
  return;
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 258
  addr = (unsigned long const volatile   *)(& page->ldv_16348.private);
#line 259
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 264
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 265
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 269
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 270
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 274
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 275
  return;
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 279
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_16348.private));
#line 279
  return (tmp);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 286
  page_nr = (unsigned int )(long_nr >> 9);
#line 287
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 287
  if (tmp != 0L) {
#line 287
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (287), "i" (12UL));
    ldv_51153: ;
#line 287
    goto ldv_51153;
  } else {

  }
#line 288
  return (page_nr);
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 294
  page_nr = (unsigned int )(bitnr >> 15);
#line 295
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 295
  if (tmp != 0L) {
#line 295
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (295), "i" (12UL));
    ldv_51159: ;
#line 295
    goto ldv_51159;
  } else {

  }
#line 296
  return (page_nr);
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 301
  page = *(b->bm_pages + (unsigned long )idx);
#line 302
  tmp = kmap_atomic(page);
#line 302
  return ((unsigned long *)tmp);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 307
  tmp = __bm_map_pidx(b, idx);
#line 307
  return (tmp);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 312
  __kunmap_atomic((void *)p_addr);
#line 313
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 317
  return;
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 343
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 344
    return;
  } else {

  }
#line 346
  i = 0UL;
#line 346
  goto ldv_51182;
  ldv_51181: ;
#line 347
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 348
    printk("\tdrbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 351
    goto ldv_51180;
  } else {

  }
#line 353
  __free_pages(*(pages + i), 0U);
#line 354
  *(pages + i) = 0;
  ldv_51180: 
#line 346
  i = i + 1UL;
  ldv_51182: ;
#line 346
  if (i < number) {
#line 347
    goto ldv_51181;
  } else {

  }

#line 351
  return;
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 360
  if (v != 0) {
#line 361
    vfree((void const   *)ptr);
  } else {
#line 363
    kfree((void const   *)ptr);
  }
#line 364
  return;
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 371
  old_pages = b->bm_pages;
#line 373
  vmalloced = 0U;
#line 374
  have = b->bm_number_of_pages;
#line 376
  tmp = __builtin_expect(have == 0UL, 0L);
#line 376
  if (tmp != 0L) {
#line 376
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 376
    if (tmp___0 != 0L) {
#line 376
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (376), "i" (12UL));
      ldv_51199: ;
#line 376
      goto ldv_51199;
    } else {

    }
  } else {

  }
#line 377
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 377
  if (tmp___1 != 0L) {
#line 377
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 377
    if (tmp___2 != 0L) {
#line 377
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (377), "i" (12UL));
      ldv_51200: ;
#line 377
      goto ldv_51200;
    } else {

    }
  } else {

  }
#line 379
  if (have == want) {
#line 380
    return (old_pages);
  } else {

  }
#line 387
  bytes = (unsigned int )want * 8U;
#line 388
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 388
  new_pages = (struct page **)tmp___3;
#line 389
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 390
    tmp___4 = vzalloc((unsigned long )bytes);
#line 390
    new_pages = (struct page **)tmp___4;
#line 391
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 392
      return (0);
    } else {

    }
#line 393
    vmalloced = 1U;
  } else {

  }
#line 396
  if (want >= have) {
#line 397
    i = 0U;
#line 397
    goto ldv_51202;
    ldv_51201: 
#line 398
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 397
    i = i + 1U;
    ldv_51202: ;
#line 397
    if ((unsigned long )i < have) {
#line 398
      goto ldv_51201;
    } else {

    }

#line 399
    goto ldv_51205;
    ldv_51204: 
#line 400
    page = alloc_pages(131282U, 0U);
#line 401
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 402
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 403
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 404
      return (0);
    } else {

    }
#line 408
    bm_store_page_idx(page, (unsigned long )i);
#line 409
    *(new_pages + (unsigned long )i) = page;
#line 399
    i = i + 1U;
    ldv_51205: ;
#line 399
    if ((unsigned long )i < want) {
#line 400
      goto ldv_51204;
    } else {

    }

  } else {
#line 412
    i = 0U;
#line 412
    goto ldv_51208;
    ldv_51207: 
#line 413
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 412
    i = i + 1U;
    ldv_51208: ;
#line 412
    if ((unsigned long )i < want) {
#line 413
      goto ldv_51207;
    } else {

    }

  }
#line 419
  if (vmalloced != 0U) {
#line 420
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 422
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 424
  return (new_pages);
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 433
  b = mdev->bitmap;
#line 434
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 434
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 434
  if (tmp != 0L) {
#line 434
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       434);
  } else {

  }
#line 434
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 435
  tmp___0 = kzalloc(400UL, 208U);
#line 435
  b = (struct drbd_bitmap *)tmp___0;
#line 436
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 437
    return (-12);
  } else {

  }
#line 438
  spinlock_check(& b->bm_lock);
#line 438
  __raw_spin_lock_init(& b->bm_lock.ldv_6135.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 439
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 440
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 442
  mdev->bitmap = b;
#line 444
  return (0);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 449
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 449
  if (_b != 0) {
#line 449
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            449);
  } else {

  }
#line 449
  if (_b != 0) {
#line 449
    return (0UL);
  } else {

  }
#line 450
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 457
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 457
  if (_b != 0) {
#line 457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            457);
  } else {

  }
#line 457
  if (_b != 0) {
#line 457
    return;
  } else {

  }
#line 458
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 459
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 460
  kfree((void const   *)mdev->bitmap);
#line 461
  mdev->bitmap = 0;
#line 462
  return;
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 477
  cleared = 0;
#line 480
  tmp = (int )b->bm_bits & 32767;
#line 482
  mask = (1UL << (tmp & 63)) - 1UL;
#line 485
  mask = mask;
#line 487
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 488
  bm = p_addr + (unsigned long )(tmp / 64);
#line 489
  if (mask != 0UL) {
#line 494
    tmp___0 = hweight_long(*bm & ~ mask);
#line 494
    cleared = (int )tmp___0;
#line 495
    *bm = *bm & mask;
#line 496
    bm = bm + 1;
  } else {

  }
#line 505
  bm_unmap(p_addr);
#line 506
  return (cleared);
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 516
  tmp = (int )b->bm_bits & 32767;
#line 518
  mask = (1UL << (tmp & 63)) - 1UL;
#line 521
  mask = mask;
#line 523
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 524
  bm = p_addr + (unsigned long )(tmp / 64);
#line 525
  if (mask != 0UL) {
#line 530
    *bm = *bm | ~ mask;
#line 531
    bm = bm + 1;
  } else {

  }
#line 539
  bm_unmap(p_addr);
#line 540
  return;
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 547
  bits = 0UL;
#line 548
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 552
  idx = 0;
#line 552
  goto ldv_51260;
  ldv_51259: 
#line 553
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 554
  i = 0;
#line 554
  goto ldv_51256;
  ldv_51255: 
#line 555
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 555
  bits = tmp + bits;
#line 554
  i = i + 1;
  ldv_51256: ;
#line 554
  if ((unsigned int )i <= 511U) {
#line 555
    goto ldv_51255;
  } else {

  }
#line 556
  __bm_unmap(p_addr);
#line 557
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                557, 0);
#line 557
  _cond_resched();
#line 552
  idx = idx + 1;
  ldv_51260: ;
#line 552
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 553
    goto ldv_51259;
  } else {

  }
#line 560
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 561
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 562
  i = 0;
#line 562
  goto ldv_51263;
  ldv_51262: 
#line 563
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 563
  bits = tmp___0 + bits;
#line 562
  i = i + 1;
  ldv_51263: ;
#line 562
  if (i < last_word) {
#line 563
    goto ldv_51262;
  } else {

  }
#line 564
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 565
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 565
  bits = tmp___1 + bits;
#line 569
  __bm_unmap(p_addr);
#line 570
  return (bits);
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 580
  end = offset + len;
#line 582
  if (b->bm_words < end) {
#line 583
    printk("\tdrbd: bm_memset end > bm_words\n");
#line 584
    return;
  } else {

  }
#line 587
  goto ldv_51280;
  ldv_51279: 
#line 588
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 588
  __min2 = end;
#line 588
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 589
  idx = bm_word_to_page_idx(b, offset);
#line 590
  p_addr = bm_map_pidx(b, idx);
#line 591
  bm = p_addr + (offset & 511UL);
#line 592
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 593
    printk("\tdrbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 596
    memset((void *)bm, c, do_now * 8UL);
  }
#line 597
  bm_unmap(p_addr);
#line 598
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 599
  offset = offset + do_now;
  ldv_51280: ;
#line 587
  if (offset < end) {
#line 588
    goto ldv_51279;
  } else {

  }

#line 592
  return;
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 613
  b = mdev->bitmap;
#line 616
  opages = 0;
#line 617
  err = 0;
#line 620
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 620
  if (_b != 0) {
#line 620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            620);
  } else {

  }
#line 620
  if (_b != 0) {
#line 620
    return (-12);
  } else {

  }
#line 622
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 624
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 627
  if (b->bm_dev_capacity == capacity) {
#line 628
    goto out;
  } else {

  }
#line 630
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 632
  if (capacity == 0UL) {
#line 633
    spin_lock_irq(& b->bm_lock);
#line 634
    opages = b->bm_pages;
#line 635
    onpages = b->bm_number_of_pages;
#line 636
    owords = b->bm_words;
#line 637
    b->bm_pages = 0;
#line 638
    tmp___2 = 0UL;
#line 638
    b->bm_dev_capacity = tmp___2;
#line 638
    tmp___1 = tmp___2;
#line 638
    b->bm_words = tmp___1;
#line 638
    tmp___0 = tmp___1;
#line 638
    b->bm_bits = tmp___0;
#line 638
    tmp = tmp___0;
#line 638
    b->bm_set = tmp;
#line 638
    b->bm_number_of_pages = tmp;
#line 643
    spin_unlock_irq(& b->bm_lock);
#line 644
    bm_free_pages(opages, onpages);
#line 645
    bm_vk_free((void *)opages, opages_vmalloced);
#line 646
    goto out;
  } else {

  }
#line 648
  bits = (capacity + 7UL) >> 3;
#line 655
  words = (bits + 63UL) >> 6;
#line 657
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 657
  if (tmp___3 != 0) {
#line 658
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 659
    put_ldev(mdev);
#line 660
    if ((unsigned long long )bits > bits_on_disk) {
#line 661
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 662
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 663
      err = -28;
#line 664
      goto out;
    } else {

    }
  } else {

  }
#line 668
  want = (words * 8UL + 4095UL) >> 12;
#line 669
  have = b->bm_number_of_pages;
#line 670
  if (want == have) {
#line 671
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 671
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              671);
    } else {

    }
#line 672
    npages = b->bm_pages;
  } else {
#line 674
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 674
    if (tmp___4 != 0) {
#line 675
      npages = 0;
    } else {
#line 677
      npages = bm_realloc_pages(b, want);
    }
  }
#line 680
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 681
    err = -12;
#line 682
    goto out;
  } else {

  }
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  opages = b->bm_pages;
#line 687
  owords = b->bm_words;
#line 688
  obits = b->bm_bits;
#line 690
  growing = bits > obits;
#line 691
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 692
    bm_set_surplus(b);
  } else {

  }
#line 694
  b->bm_pages = npages;
#line 695
  b->bm_number_of_pages = want;
#line 696
  b->bm_bits = bits;
#line 697
  b->bm_words = words;
#line 698
  b->bm_dev_capacity = capacity;
#line 700
  if (growing != 0) {
#line 701
    if (set_new_bits != 0) {
#line 702
      bm_memset(b, owords, 255, words - owords);
#line 703
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 705
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 709
  if (want < have) {
#line 711
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 714
  bm_clear_surplus(b);
#line 716
  spin_unlock_irq(& b->bm_lock);
#line 717
  if ((unsigned long )opages != (unsigned long )npages) {
#line 718
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 719
  if (growing == 0) {
#line 720
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 721
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 724
  drbd_bm_unlock(mdev);
#line 725
  return (err);
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 738
  b = mdev->bitmap;
#line 742
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 742
  if (_b != 0) {
#line 742
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            742);
  } else {

  }
#line 742
  if (_b != 0) {
#line 742
    return (0UL);
  } else {

  }
#line 743
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 743
  if (_b___0 != 0) {
#line 743
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            743);
  } else {

  }
#line 743
  if (_b___0 != 0) {
#line 743
    return (0UL);
  } else {

  }
#line 745
  tmp = spinlock_check(& b->bm_lock);
#line 745
  flags = _raw_spin_lock_irqsave(tmp);
#line 746
  s = b->bm_set;
#line 747
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 749
  return (s);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 756
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 756
  if (tmp == 0) {
#line 757
    return (0UL);
  } else {

  }
#line 758
  s = _drbd_bm_total_weight(mdev);
#line 759
  put_ldev(mdev);
#line 760
  return (s);
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 765
  b = mdev->bitmap;
#line 766
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 766
  if (_b != 0) {
#line 766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            766);
  } else {

  }
#line 766
  if (_b != 0) {
#line 766
    return (0UL);
  } else {

  }
#line 767
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 767
  if (_b___0 != 0) {
#line 767
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            767);
  } else {

  }
#line 767
  if (_b___0 != 0) {
#line 767
    return (0UL);
  } else {

  }
#line 769
  return (b->bm_words);
}
}
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 774
  b = mdev->bitmap;
#line 775
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 775
  if (_b != 0) {
#line 775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            775);
  } else {

  }
#line 775
  if (_b != 0) {
#line 775
    return (0UL);
  } else {

  }
#line 777
  return (b->bm_bits);
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 788
  b = mdev->bitmap;
#line 794
  end = offset + number;
#line 796
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 796
  if (_b != 0) {
#line 796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            796);
  } else {

  }
#line 796
  if (_b != 0) {
#line 796
    return;
  } else {

  }
#line 797
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 797
  if (_b___0 != 0) {
#line 797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            797);
  } else {

  }
#line 797
  if (_b___0 != 0) {
#line 797
    return;
  } else {

  }
#line 798
  if (number == 0UL) {
#line 799
    return;
  } else {

  }
#line 800
  __ret_warn_on = b->bm_words <= offset;
#line 800
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 800
  if (tmp != 0L) {
#line 800
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       800);
  } else {

  }
#line 800
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 801
  __ret_warn_on___0 = b->bm_words < end;
#line 801
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 801
  if (tmp___0 != 0L) {
#line 801
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       801);
  } else {

  }
#line 801
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 803
  spin_lock_irq(& b->bm_lock);
#line 804
  goto ldv_51369;
  ldv_51368: 
#line 805
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 805
  __min2 = end;
#line 805
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 806
  idx = bm_word_to_page_idx(b, offset);
#line 807
  p_addr = bm_map_pidx(b, idx);
#line 808
  bm = p_addr + (offset & 511UL);
#line 809
  offset = offset + do_now;
#line 810
  goto ldv_51366;
  ldv_51365: 
#line 811
  bits = hweight_long(*bm);
#line 812
  tmp___1 = buffer;
#line 812
  buffer = buffer + 1;
#line 812
  word = *bm | *tmp___1;
#line 813
  tmp___2 = bm;
#line 813
  bm = bm + 1;
#line 813
  *tmp___2 = word;
#line 814
  tmp___3 = hweight_long(word);
#line 814
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_51366: 
#line 810
  tmp___4 = do_now;
#line 810
  do_now = do_now - (size_t )1;
#line 810
  if (tmp___4 != 0UL) {
#line 811
    goto ldv_51365;
  } else {

  }
#line 816
  bm_unmap(p_addr);
#line 817
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_51369: ;
#line 804
  if (offset < end) {
#line 805
    goto ldv_51368;
  } else {

  }

#line 824
  if (b->bm_words == end) {
#line 825
    tmp___5 = bm_clear_surplus(b);
#line 825
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 826
  spin_unlock_irq(& b->bm_lock);
#line 827
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 835
  b = mdev->bitmap;
#line 839
  end = offset + number;
#line 841
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 841
  if (_b != 0) {
#line 841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            841);
  } else {

  }
#line 841
  if (_b != 0) {
#line 841
    return;
  } else {

  }
#line 842
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 842
  if (_b___0 != 0) {
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            842);
  } else {

  }
#line 842
  if (_b___0 != 0) {
#line 842
    return;
  } else {

  }
#line 844
  spin_lock_irq(& b->bm_lock);
#line 845
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 848
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 853
    goto ldv_51394;
    ldv_51393: 
#line 854
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 854
    __min2 = end;
#line 854
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 855
    tmp = bm_word_to_page_idx(b, offset);
#line 855
    p_addr = bm_map_pidx(b, tmp);
#line 856
    bm = p_addr + (offset & 511UL);
#line 857
    offset = offset + do_now;
#line 858
    goto ldv_51391;
    ldv_51390: 
#line 859
    tmp___0 = buffer;
#line 859
    buffer = buffer + 1;
#line 859
    tmp___1 = bm;
#line 859
    bm = bm + 1;
#line 859
    *tmp___0 = *tmp___1;
    ldv_51391: 
#line 858
    tmp___2 = do_now;
#line 858
    do_now = do_now - (size_t )1;
#line 858
    if (tmp___2 != 0UL) {
#line 859
      goto ldv_51390;
    } else {

    }
#line 860
    bm_unmap(p_addr);
    ldv_51394: ;
#line 853
    if (offset < end) {
#line 854
      goto ldv_51393;
    } else {

    }

  }
#line 863
  spin_unlock_irq(& b->bm_lock);
#line 864
  return;
}
}
#line 867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 869
  b = mdev->bitmap;
#line 870
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 870
  if (_b != 0) {
#line 870
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            870);
  } else {

  }
#line 870
  if (_b != 0) {
#line 870
    return;
  } else {

  }
#line 871
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 871
  if (_b___0 != 0) {
#line 871
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            871);
  } else {

  }
#line 871
  if (_b___0 != 0) {
#line 871
    return;
  } else {

  }
#line 873
  spin_lock_irq(& b->bm_lock);
#line 874
  bm_memset(b, 0UL, 255, b->bm_words);
#line 875
  bm_clear_surplus(b);
#line 876
  b->bm_set = b->bm_bits;
#line 877
  spin_unlock_irq(& b->bm_lock);
#line 878
  return;
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 883
  b = mdev->bitmap;
#line 884
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 884
  if (_b != 0) {
#line 884
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            884);
  } else {

  }
#line 884
  if (_b != 0) {
#line 884
    return;
  } else {

  }
#line 885
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 885
  if (_b___0 != 0) {
#line 885
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            885);
  } else {

  }
#line 885
  if (_b___0 != 0) {
#line 885
    return;
  } else {

  }
#line 887
  spin_lock_irq(& b->bm_lock);
#line 888
  bm_memset(b, 0UL, 0, b->bm_words);
#line 889
  b->bm_set = 0UL;
#line 890
  spin_unlock_irq(& b->bm_lock);
#line 891
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 906
  __mptr = (struct kref  const  *)kref;
#line 906
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 908
  put_ldev(ctx->mdev);
#line 909
  kfree((void const   *)ctx);
#line 910
  return;
}
}
#line 913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 915
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 916
  mdev = ctx->mdev;
#line 917
  b = mdev->bitmap;
#line 918
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 918
  idx = (unsigned int )tmp;
#line 919
  uptodate = (int )bio->bi_flags & 1;
#line 926
  if (error == 0 && uptodate == 0) {
#line 927
    error = -5;
  } else {

  }
#line 929
  if ((ctx->flags & 1U) == 0U) {
#line 929
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 929
    if (tmp___0 == 0) {
#line 931
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 933
  if (error != 0) {
#line 936
    ctx->error = error;
#line 937
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 940
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 940
    if (tmp___1 != 0) {
#line 941
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 944
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 945
    descriptor.modname = "drbd";
#line 945
    descriptor.function = "bm_async_io_complete";
#line 945
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 945
    descriptor.format = "bitmap page idx %u completed\n";
#line 945
    descriptor.lineno = 945U;
#line 945
    descriptor.flags = 0U;
#line 945
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 945
    if (tmp___2 != 0L) {
#line 945
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 948
  bm_page_unlock_io(mdev, (int )idx);
#line 950
  if ((int )ctx->flags & 1) {
#line 951
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 953
  bio_put(bio);
#line 955
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 955
  if (tmp___3 != 0) {
#line 956
    ctx->done = 1U;
#line 957
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 958
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 960
  return;
}
}
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 964
  tmp = bio_alloc_drbd(16U);
#line 964
  bio = tmp;
#line 965
  mdev = ctx->mdev;
#line 966
  b = mdev->bitmap;
#line 970
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 972
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 977
  __min1 = 4096U;
#line 977
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 977
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 977
  len = __min1 < __min2 ? __min1 : __min2;
#line 981
  bm_page_lock_io(mdev, page_nr);
#line 984
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 986
  if ((int )ctx->flags & 1) {
#line 988
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 988
    page = (struct page *)tmp___1;
#line 989
    dest = kmap_atomic(page);
#line 990
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 991
    __len = 4096UL;
#line 991
    if (__len > 63UL) {
#line 991
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 991
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 992
    __kunmap_atomic(src);
#line 993
    __kunmap_atomic(dest);
#line 994
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 996
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 998
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 999
  bio->bi_sector = on_disk_sector;
#line 1002
  bio_add_page(bio, page, len, 0U);
#line 1003
  bio->bi_private = (void *)ctx;
#line 1004
  bio->bi_end_io = & bm_async_io_complete;
#line 1006
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1006
  if (tmp___2 != 0) {
#line 1007
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1008
    bio_endio(bio, -5);
  } else {
#line 1010
    submit_bio(rw, bio);
#line 1013
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1015
  return;
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char *tmp___8 ;

  {
#line 1023
  b = mdev->bitmap;
#line 1024
  count = 0;
#line 1027
  err = 0;
#line 1038
  tmp = kmalloc(32UL, 16U);
#line 1038
  ctx = (struct bm_aio_ctx *)tmp;
#line 1039
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1040
    return (-12);
  } else {

  }
#line 1042
  __constr_expr_0.mdev = mdev;
#line 1042
  __constr_expr_0.in_flight.counter = 1;
#line 1042
  __constr_expr_0.done = 0U;
#line 1042
  __constr_expr_0.flags = flags;
#line 1042
  __constr_expr_0.error = 0;
#line 1042
  __constr_expr_0.kref.refcount.counter = 2;
#line 1042
  *ctx = __constr_expr_0;
#line 1051
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1051
  if (tmp___0 == 0) {
#line 1052
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1053
    kfree((void const   *)ctx);
#line 1054
    return (-19);
  } else {

  }
#line 1057
  if (ctx->flags == 0U) {
#line 1058
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1058
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1058
    if (tmp___1 != 0L) {
#line 1058
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1058);
    } else {

    }
#line 1058
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1060
  num_pages = (int )b->bm_number_of_pages;
#line 1062
  now = jiffies;
#line 1065
  i = 0;
#line 1065
  goto ldv_51481;
  ldv_51480: ;
#line 1067
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1068
    goto ldv_51474;
  } else {

  }
#line 1069
  if (rw & 1) {
#line 1070
    if ((flags & 2U) == 0U) {
#line 1070
      tmp___3 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1070
      if (tmp___3 != 0) {
#line 1072
        descriptor.modname = "drbd";
#line 1072
        descriptor.function = "bm_rw";
#line 1072
        descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1072
        descriptor.format = "skipped bm write for idx %u\n";
#line 1072
        descriptor.lineno = 1072U;
#line 1072
        descriptor.flags = 0U;
#line 1072
        tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1072
        if (tmp___2 != 0L) {
#line 1072
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm write for idx %u\n", i);
        } else {

        }
#line 1073
        goto ldv_51477;
      } else {

      }
    } else {

    }
#line 1077
    if (lazy_writeout_upper_idx != 0U) {
#line 1077
      tmp___5 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1077
      if (tmp___5 == 0) {
#line 1079
        descriptor___0.modname = "drbd";
#line 1079
        descriptor___0.function = "bm_rw";
#line 1079
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1079
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1079
        descriptor___0.lineno = 1079U;
#line 1079
        descriptor___0.flags = 0U;
#line 1079
        tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1079
        if (tmp___4 != 0L) {
#line 1079
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1080
        goto ldv_51477;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1083
  atomic_inc(& ctx->in_flight);
#line 1084
  bm_page_io_async(ctx, i, rw);
#line 1085
  count = count + 1;
#line 1086
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1086, 0);
#line 1086
  _cond_resched();
  ldv_51477: 
#line 1065
  i = i + 1;
  ldv_51481: ;
#line 1065
  if (i < num_pages) {
#line 1066
    goto ldv_51480;
  } else {

  }
  ldv_51474: 
#line 1097
  tmp___6 = atomic_dec_and_test(& ctx->in_flight);
#line 1097
  if (tmp___6 == 0) {
#line 1098
    wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1100
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1102
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1106
  if (ctx->error != 0) {
#line 1107
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1108
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "bm_rw");
#line 1109
    err = -5;
  } else {

  }
#line 1112
  tmp___7 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1112
  if (tmp___7 != 0) {
#line 1113
    err = -5;
  } else {

  }
#line 1115
  now = jiffies;
#line 1116
  if (rw == 1) {
#line 1117
    drbd_md_flush(mdev);
  } else {
#line 1119
    b->bm_set = bm_count_bits(b);
#line 1120
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1123
  now = b->bm_set;
#line 1125
  tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1125
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___8, now);
#line 1128
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1129
  return (err);
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1138
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1138
  return (tmp);
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1149
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1149
  return (tmp);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1160
  tmp = bm_rw(mdev, 1, 2U, 0U);
#line 1160
  return (tmp);
}
}
#line 1168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1170
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1170
  return (tmp);
}
}
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1186
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1186
  return (tmp);
}
}
#line 1202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1207
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1207
  if (tmp___0 != 0) {
#line 1208
    descriptor.modname = "drbd";
#line 1208
    descriptor.function = "drbd_bm_write_page";
#line 1208
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1208
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1208
    descriptor.lineno = 1208U;
#line 1208
    descriptor.flags = 0U;
#line 1208
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1208
    if (tmp != 0L) {
#line 1208
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1209
    return (0);
  } else {

  }
#line 1212
  tmp___1 = kmalloc(32UL, 16U);
#line 1212
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1213
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1214
    return (-12);
  } else {

  }
#line 1216
  __constr_expr_0.mdev = mdev;
#line 1216
  __constr_expr_0.in_flight.counter = 1;
#line 1216
  __constr_expr_0.done = 0U;
#line 1216
  __constr_expr_0.flags = 1U;
#line 1216
  __constr_expr_0.error = 0;
#line 1216
  __constr_expr_0.kref.refcount.counter = 2;
#line 1216
  *ctx = __constr_expr_0;
#line 1225
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1225
  if (tmp___2 == 0) {
#line 1226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1227
    kfree((void const   *)ctx);
#line 1228
    return (-19);
  } else {

  }
#line 1231
  bm_page_io_async(ctx, (int )idx, 1041);
#line 1232
  wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
#line 1234
  if (ctx->error != 0) {
#line 1235
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "drbd_bm_write_page");
  } else {

  }
#line 1239
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1240
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1240
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1241
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1242
  return (err);
}
}
#line 1253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1256
  b = mdev->bitmap;
#line 1262
  if (b->bm_bits < bm_fo) {
#line 1263
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1264
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1266
    goto ldv_51519;
    ldv_51518: 
#line 1268
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1269
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1269
    p_addr = __bm_map_pidx(b, tmp);
#line 1271
    if ((int )find_zero_bit != 0) {
#line 1272
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1272
      i = (unsigned int )tmp___0;
    } else {
#line 1275
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1275
      i = (unsigned int )tmp___1;
    }
#line 1278
    __bm_unmap(p_addr);
#line 1279
    if (i <= 32767U) {
#line 1280
      bm_fo = (unsigned long )i + bit_offset;
#line 1281
      if (b->bm_bits <= bm_fo) {
#line 1282
        goto ldv_51516;
      } else {

      }
#line 1283
      goto found;
    } else {

    }
#line 1285
    bm_fo = bit_offset + 32768UL;
    ldv_51519: ;
#line 1266
    if (b->bm_bits > bm_fo) {
#line 1267
      goto ldv_51518;
    } else {

    }
    ldv_51516: 
#line 1287
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1290
  return (bm_fo);
}
}
#line 1293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1296
  b = mdev->bitmap;
#line 1297
  i = 0xffffffffffffffffUL;
#line 1299
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1299
  if (_b != 0) {
#line 1299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1299);
  } else {

  }
#line 1299
  if (_b != 0) {
#line 1299
    return (i);
  } else {

  }
#line 1300
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1300
  if (_b___0 != 0) {
#line 1300
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1300);
  } else {

  }
#line 1300
  if (_b___0 != 0) {
#line 1300
    return (i);
  } else {

  }
#line 1302
  spin_lock_irq(& b->bm_lock);
#line 1303
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1304
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1306
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1308
  spin_unlock_irq(& b->bm_lock);
#line 1309
  return (i);
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1314
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1314
  return (tmp);
}
}
#line 1327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1330
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1330
  return (tmp);
}
}
#line 1333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1336
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1336
  return (tmp);
}
}
#line 1345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1348
  b = mdev->bitmap;
#line 1349
  p_addr = 0;
#line 1351
  last_page_nr = 4294967295U;
#line 1352
  c = 0;
#line 1353
  changed_total = 0;
#line 1355
  if (b->bm_bits <= e) {
#line 1356
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1358
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1360
  bitnr = s;
#line 1360
  goto ldv_51558;
  ldv_51557: 
#line 1361
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1361
  page_nr = tmp;
#line 1362
  if (page_nr != last_page_nr) {
#line 1363
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1364
      __bm_unmap(p_addr);
    } else {

    }
#line 1365
    if (c < 0) {
#line 1366
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1367
    if (c > 0) {
#line 1368
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1369
    changed_total = changed_total + c;
#line 1370
    c = 0;
#line 1371
    p_addr = __bm_map_pidx(b, page_nr);
#line 1372
    last_page_nr = page_nr;
  } else {

  }
#line 1374
  if (val != 0) {
#line 1375
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1375
    c = (tmp___0 == 0) + c;
  } else {
#line 1377
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1377
    c = c - (tmp___1 != 0);
  }
#line 1360
  bitnr = bitnr + 1UL;
  ldv_51558: ;
#line 1360
  if (bitnr <= e) {
#line 1361
    goto ldv_51557;
  } else {

  }

#line 1379
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1380
    __bm_unmap(p_addr);
  } else {

  }
#line 1381
  if (c < 0) {
#line 1382
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1383
  if (c > 0) {
#line 1384
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1385
  changed_total = changed_total + c;
#line 1386
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1387
  return (changed_total);
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1398
  b = mdev->bitmap;
#line 1399
  c = 0;
#line 1401
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1401
  if (_b != 0) {
#line 1401
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1401);
  } else {

  }
#line 1401
  if (_b != 0) {
#line 1401
    return (1);
  } else {

  }
#line 1402
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1402
  if (_b___0 != 0) {
#line 1402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1402);
  } else {

  }
#line 1402
  if (_b___0 != 0) {
#line 1402
    return (0);
  } else {

  }
#line 1404
  tmp = spinlock_check(& b->bm_lock);
#line 1404
  flags = _raw_spin_lock_irqsave(tmp);
#line 1405
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1406
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1408
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1410
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1411
  return (c);
}
}
#line 1415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1417
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1417
  return (tmp);
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1423
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1423
  return (- tmp);
}
}
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1433
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1433
  paddr = (unsigned long *)tmp;
#line 1434
  i = first_word;
#line 1434
  goto ldv_51597;
  ldv_51596: 
#line 1435
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1435
  bits = (int )tmp___0;
#line 1436
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1437
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1434
  i = i + 1;
  ldv_51597: ;
#line 1434
  if (i < last_word) {
#line 1435
    goto ldv_51596;
  } else {

  }
#line 1439
  __kunmap_atomic((void *)paddr);
#line 1440
  return;
}
}
#line 1447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1457
  b = mdev->bitmap;
#line 1458
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1459
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1466
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1468
    spin_lock_irq(& b->bm_lock);
#line 1469
    __bm_change_bits_to(mdev, s, e, 1);
#line 1470
    spin_unlock_irq(& b->bm_lock);
#line 1471
    return;
  } else {

  }
#line 1476
  spin_lock_irq(& b->bm_lock);
#line 1479
  if (sl != 0UL) {
#line 1480
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1482
  first_page = (int )(sl >> 15);
#line 1483
  last_page = (int )(el >> 15);
#line 1487
  first_word = (int )(sl >> 6) & 511;
#line 1488
  last_word = 512;
#line 1491
  page_nr = first_page;
#line 1491
  goto ldv_51614;
  ldv_51613: 
#line 1492
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1493
  spin_unlock_irq(& b->bm_lock);
#line 1494
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1494, 0);
#line 1494
  _cond_resched();
#line 1495
  first_word = 0;
#line 1496
  spin_lock_irq(& b->bm_lock);
#line 1491
  page_nr = page_nr + 1;
  ldv_51614: ;
#line 1491
  if (page_nr < last_page) {
#line 1492
    goto ldv_51613;
  } else {

  }
#line 1499
  last_word = (int )(el >> 6) & 511;
#line 1507
  if (last_word != 0) {
#line 1508
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1515
  if (el <= (unsigned long )e) {
#line 1516
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1517
  spin_unlock_irq(& b->bm_lock);
#line 1518
  return;
}
}
#line 1527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1530
  b = mdev->bitmap;
#line 1534
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1534
  if (_b != 0) {
#line 1534
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1534);
  } else {

  }
#line 1534
  if (_b != 0) {
#line 1534
    return (0);
  } else {

  }
#line 1535
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1535
  if (_b___0 != 0) {
#line 1535
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1535);
  } else {

  }
#line 1535
  if (_b___0 != 0) {
#line 1535
    return (0);
  } else {

  }
#line 1537
  tmp = spinlock_check(& b->bm_lock);
#line 1537
  flags = _raw_spin_lock_irqsave(tmp);
#line 1538
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1539
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1540
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1541
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1541
    p_addr = bm_map_pidx(b, tmp___0);
#line 1542
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1542
    i = tmp___1 != 0;
#line 1543
    bm_unmap(p_addr);
  } else
#line 1544
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1545
    i = -1;
  } else {
#line 1547
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1548
    i = 0;
  }
#line 1551
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1552
  return (i);
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1559
  b = mdev->bitmap;
#line 1560
  p_addr = 0;
#line 1562
  page_nr = 4294967295U;
#line 1563
  c = 0;
#line 1569
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1569
  if (_b != 0) {
#line 1569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1569);
  } else {

  }
#line 1569
  if (_b != 0) {
#line 1569
    return (1);
  } else {

  }
#line 1570
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1570
  if (_b___0 != 0) {
#line 1570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1570);
  } else {

  }
#line 1570
  if (_b___0 != 0) {
#line 1570
    return (1);
  } else {

  }
#line 1572
  tmp = spinlock_check(& b->bm_lock);
#line 1572
  flags = _raw_spin_lock_irqsave(tmp);
#line 1573
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1574
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1575
  bitnr = s;
#line 1575
  goto ldv_51655;
  ldv_51654: 
#line 1576
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1576
  idx = tmp___0;
#line 1577
  if (page_nr != idx) {
#line 1578
    page_nr = idx;
#line 1579
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1580
      bm_unmap(p_addr);
    } else {

    }
#line 1581
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1583
  _b___1 = b->bm_bits <= bitnr;
#line 1583
  if (_b___1 != 0) {
#line 1583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1583);
  } else {

  }
#line 1583
  if (_b___1 != 0) {
#line 1584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1586
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1586
    c = (tmp___1 != 0) + c;
  }
#line 1575
  bitnr = bitnr + 1UL;
  ldv_51655: ;
#line 1575
  if (bitnr <= (unsigned long )e) {
#line 1576
    goto ldv_51654;
  } else {

  }

#line 1589
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1590
    bm_unmap(p_addr);
  } else {

  }
#line 1591
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1592
  return (c);
}
}
#line 1610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1612
  b = mdev->bitmap;
#line 1617
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1617
  if (_b != 0) {
#line 1617
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1617);
  } else {

  }
#line 1617
  if (_b != 0) {
#line 1617
    return (0);
  } else {

  }
#line 1618
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1618
  if (_b___0 != 0) {
#line 1618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1618);
  } else {

  }
#line 1618
  if (_b___0 != 0) {
#line 1618
    return (0);
  } else {

  }
#line 1620
  tmp = spinlock_check(& b->bm_lock);
#line 1620
  flags = _raw_spin_lock_irqsave(tmp);
#line 1621
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1622
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1624
  s = (int )(enr << 6);
#line 1625
  _min1 = (enr + 1UL) << 6;
#line 1625
  _min2 = b->bm_words;
#line 1625
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1626
  count = 0;
#line 1627
  if ((size_t )s < b->bm_words) {
#line 1628
    n = e - s;
#line 1629
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1629
    p_addr = bm_map_pidx(b, tmp___0);
#line 1630
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1631
    goto ldv_51681;
    ldv_51680: 
#line 1632
    tmp___1 = bm;
#line 1632
    bm = bm + 1;
#line 1632
    tmp___2 = hweight_long(*tmp___1);
#line 1632
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_51681: 
#line 1631
    tmp___3 = n;
#line 1631
    n = n - 1;
#line 1631
    if (tmp___3 != 0) {
#line 1632
      goto ldv_51680;
    } else {

    }
#line 1633
    bm_unmap(p_addr);
  } else {
#line 1635
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1637
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1638
  return (count);
}
}
#line 1643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1645
  b = mdev->bitmap;
#line 1650
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1650
  if (_b != 0) {
#line 1650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1650);
  } else {

  }
#line 1650
  if (_b != 0) {
#line 1650
    return (0UL);
  } else {

  }
#line 1651
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1651
  if (_b___0 != 0) {
#line 1651
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1651);
  } else {

  }
#line 1651
  if (_b___0 != 0) {
#line 1651
    return (0UL);
  } else {

  }
#line 1653
  spin_lock_irq(& b->bm_lock);
#line 1654
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1655
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1656
  weight = b->bm_set;
#line 1658
  s = al_enr * 16UL;
#line 1659
  __min1 = s + 16UL;
#line 1659
  __min2 = b->bm_words;
#line 1659
  e = __min1 < __min2 ? __min1 : __min2;
#line 1661
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1661
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1662);
  } else {

  }
#line 1663
  count = 0;
#line 1664
  if (b->bm_words > s) {
#line 1665
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1665
    i = do_now;
#line 1666
    tmp = bm_word_to_page_idx(b, s);
#line 1666
    p_addr = bm_map_pidx(b, tmp);
#line 1667
    bm = p_addr + (s & 511UL);
#line 1668
    goto ldv_51705;
    ldv_51704: 
#line 1669
    tmp___0 = hweight_long(*bm);
#line 1669
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1670
    *bm = 0xffffffffffffffffUL;
#line 1671
    bm = bm + 1;
    ldv_51705: 
#line 1668
    tmp___1 = i;
#line 1668
    i = i - 1;
#line 1668
    if (tmp___1 != 0) {
#line 1669
      goto ldv_51704;
    } else {

    }
#line 1673
    bm_unmap(p_addr);
#line 1674
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1675
    if (b->bm_words == e) {
#line 1676
      tmp___2 = bm_clear_surplus(b);
#line 1676
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1678
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1680
  weight = b->bm_set - weight;
#line 1681
  spin_unlock_irq(& b->bm_lock);
#line 1682
  return (weight);
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 468 "include/linux/module.h"
bool ldv_try_module_get_1(struct module *ldv_func_arg1 ) ;
#line 474
void ldv_module_put_2(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 84 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 85
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 92
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 125
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 126
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 292 "include/linux/backing-dev.h"
__inline static int bdi_rw_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 294
  tmp = bdi_congested(bdi, 12);
#line 294
  return (tmp);
}
}
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1145 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1149
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1151
  return (mdev);
}
}
#line 1546
int proc_details ;
#line 1693 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1694
struct file_operations  const  drbd_proc_fops ;
#line 2235 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2246
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2247
    *bits_left = mdev->ov_left;
  } else {
#line 2249
    tmp = drbd_bm_total_weight(mdev);
#line 2249
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2252
  if (*bits_left > mdev->rs_total) {
#line 2258
    __asm__  volatile   ("": : : "memory");
#line 2259
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_40583.conn);
#line 2259
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2262
    *per_mil_done = 0U;
  } else {
#line 2273
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2274
    left = *bits_left >> (int )shift;
#line 2275
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2276
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2277
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2279
  return;
}
}
#line 2365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2367
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 45
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 49
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 60
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 60
  if (tmp___0 != 0L) {
#line 62
    seq_printf(seq, "%ld,", v / 1000000L);
#line 63
    v = v % 1000000L;
#line 64
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 65
    tmp = __builtin_expect(v > 999L, 1L);
#line 65
    if (tmp != 0L) {
#line 66
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 68
      seq_printf(seq, "%ld", v);
    }
  }
#line 69
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;
  unsigned long long stop_sector ;

  {
#line 82
  stalled = 0;
#line 84
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 86
  x = (int )(res / 50U);
#line 87
  y = 20 - x;
#line 88
  seq_printf(seq, "\t[");
#line 89
  i = 1;
#line 89
  goto ldv_51172;
  ldv_51171: 
#line 90
  seq_printf(seq, "=");
#line 89
  i = i + 1;
  ldv_51172: ;
#line 89
  if (i < x) {
#line 90
    goto ldv_51171;
  } else {

  }
#line 91
  seq_printf(seq, ">");
#line 92
  i = 0;
#line 92
  goto ldv_51175;
  ldv_51174: 
#line 93
  seq_printf(seq, ".");
#line 92
  i = i + 1;
  ldv_51175: ;
#line 92
  if (i < y) {
#line 93
    goto ldv_51174;
  } else {

  }
#line 94
  seq_printf(seq, "] ");
#line 96
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 97
    seq_printf(seq, "verified:");
  } else {
#line 99
    seq_printf(seq, "sync\'ed:");
  }
#line 100
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 103
  if (mdev->rs_total > 1048576UL) {
#line 104
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 108
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 125
  i = (mdev->rs_last_mark + 2) % 8;
#line 126
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 127
  if (dt > 6000UL) {
#line 128
    stalled = 1;
  } else {

  }
#line 130
  if (dt == 0UL) {
#line 131
    dt = dt + 1UL;
  } else {

  }
#line 132
  db = mdev->rs_mark_left[i] - rs_left;
#line 133
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 135
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 138
  dbdt = db / dt << 2;
#line 139
  seq_printf(seq, " speed: ");
#line 140
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 141
  seq_printf(seq, " (");
#line 143
  if (proc_details > 0) {
#line 145
    i = (mdev->rs_last_mark + 7) % 8;
#line 146
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 147
    if (dt == 0UL) {
#line 148
      dt = dt + 1UL;
    } else {

    }
#line 149
    db = mdev->rs_mark_left[i] - rs_left;
#line 150
    dbdt = db / dt << 2;
#line 151
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 152
    seq_printf(seq, " -- ");
  } else {

  }
#line 158
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 159
  if (dt == 0UL) {
#line 160
    dt = 1UL;
  } else {

  }
#line 161
  db = mdev->rs_total - rs_left;
#line 162
  dbdt = db / dt << 2;
#line 163
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 164
  seq_printf(seq, ")");
#line 166
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 168
    seq_printf(seq, " want: ");
#line 169
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 171
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 173
  if (proc_details > 0) {
#line 176
    tmp = drbd_bm_bits(mdev);
#line 176
    bm_bits = tmp;
#line 178
    stop_sector = 0ULL;
#line 179
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 181
      bit_pos = bm_bits - mdev->ov_left;
#line 182
      if (mdev->agreed_pro_version > 96) {
#line 183
        stop_sector = (unsigned long long )mdev->ov_stop_sector;
      } else {

      }
    } else {
#line 185
      bit_pos = mdev->bm_resync_fo;
    }
#line 188
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
#line 193
    if (stop_sector != 0ULL && stop_sector != 0xffffffffffffffffULL) {
#line 194
      seq_printf(seq, " stop sector: %llu", stop_sector);
    } else {

    }
#line 195
    seq_printf(seq, "\n");
  } else {

  }
#line 197
  return;
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 201
  __mptr = (struct lc_element  const  *)e;
#line 201
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 206
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 211
  hole = 0;
#line 215
  write_ordering_chars[0] = 110;
#line 215
  write_ordering_chars[1] = 100;
#line 215
  write_ordering_chars[2] = 102;
#line 221
  tmp = drbd_buildtag();
#line 221
  seq_printf(seq, "version: 8.3.13 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 97, tmp);
#line 244
  i = 0;
#line 244
  goto ldv_51198;
  ldv_51197: 
#line 245
  mdev = minor_to_mdev((unsigned int )i);
#line 246
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 247
    hole = 1;
#line 248
    goto ldv_51196;
  } else {

  }
#line 250
  if (hole != 0) {
#line 251
    hole = 0;
#line 252
    seq_printf(seq, "\n");
  } else {

  }
#line 255
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_40583.conn);
#line 257
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 260
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 263
    bdi_rw_congested(& (mdev->rq_queue)->backing_dev_info);
#line 265
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 265
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 265
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 265
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 265
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 265
    tmp___5 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 265
    tmp___6 = is_susp(mdev->state);
#line 265
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.pdsk);
#line 265
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.disk);
#line 265
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_40583.peer);
#line 265
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_40583.role);
#line 265
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 296
    tmp___11 = drbd_bm_total_weight(mdev);
#line 296
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 300
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 304
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 306
  if (proc_details > 0) {
#line 306
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 306
    if (tmp___12 != 0) {
#line 307
      lc_seq_printf_stats(seq, mdev->resync);
#line 308
      lc_seq_printf_stats(seq, mdev->act_log);
#line 309
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 312
  if (proc_details > 1) {
#line 313
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 314
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_51196: 
#line 244
  i = i + 1;
  ldv_51198: ;
#line 244
  if ((unsigned int )i < minor_count) {
#line 245
    goto ldv_51197;
  } else {

  }

#line 320
  return (0);
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 325
  tmp___1 = ldv_try_module_get_1(& __this_module);
#line 325
  if ((int )tmp___1) {
#line 326
    tmp = PDE((struct inode  const  *)inode);
#line 326
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 326
    return (tmp___0);
  } else {

  }
#line 327
  return (-19);
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 332
  ldv_module_put_2(& __this_module);
#line 333
  tmp = single_release(inode, file);
#line 333
  return (tmp);
}
}
#line 354
void ldv_check_final_state(void) ;
#line 357
extern void ldv_check_return_value(int  ) ;
#line 363
extern void ldv_initialize(void) ;
#line 366
extern void ldv_handler_precall(void) ;
#line 369
extern int nondet_int(void) ;
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 409
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 399
  LDV_IN_INTERRUPT = 1;
#line 408
  ldv_initialize();
#line 412
  goto ldv_51234;
  ldv_51233: 
#line 416
  tmp = nondet_int();
#line 416
  switch (tmp) {
  case 0: ;
#line 421
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 426
    ldv_handler_precall();
#line 427
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 428
    ldv_check_return_value(res_drbd_proc_open_4);
#line 429
    if (res_drbd_proc_open_4 != 0) {
#line 430
      goto ldv_module_exit;
    } else {

    }
#line 431
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 437
  goto ldv_51230;
  case 1: ;
#line 441
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 446
    ldv_handler_precall();
#line 447
    drbd_proc_release(var_group1, var_group2);
#line 448
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 454
  goto ldv_51230;
  default: ;
#line 455
  goto ldv_51230;
  }
  ldv_51230: ;
  ldv_51234: 
#line 412
  tmp___0 = nondet_int();
#line 412
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 414
    goto ldv_51233;
  } else {

  }

  ldv_module_exit: ;
#line 464
  ldv_check_final_state();
#line 467
  return;
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
bool ldv_try_module_get_1(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
#line 476
  tmp = ldv_try_module_get(ldv_func_arg1);
#line 476
  return (tmp != 0);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_module_put_2(struct module *ldv_func_arg1 ) 
{ 


  {
#line 484
  ldv_module_put(ldv_func_arg1);
#line 485
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 323 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5562: ;
#line 216
  return (__ret);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_6135.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_6135.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 176 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 240
extern void add_timer(struct timer_list * ) ;
#line 343 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 343
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 343
  return (tmp);
}
}
#line 357 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 359
  tmp = PageTail((struct page  const  *)page);
#line 359
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 359
  if (tmp___0 != 0L) {
#line 360
    return (page->ldv_16348.first_page);
  } else {

  }
#line 361
  return (page);
}
}
#line 379 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 381
  tmp = compound_head(page);
#line 381
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_16329.ldv_16328.ldv_16327._count));
#line 381
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18982: ;
#line 65
    goto ldv_18982;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_18983: ;
#line 67
    goto ldv_18983;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_18984: ;
#line 68
    goto ldv_18984;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 207
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_5911.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 648 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 667
  return ((loff_t )inode->i_size);
}
}
#line 321 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2158
extern void flush_signals(struct task_struct * ) ;
#line 2192
extern void force_sig(int  , struct task_struct * ) ;
#line 1475 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 219 "include/linux/bio.h"
extern struct bio *bio_clone_bioset(struct bio * , gfp_t  , struct bio_set * ) ;
#line 221
extern struct bio_set *fs_bio_set ;
#line 228 "include/linux/bio.h"
__inline static struct bio *bio_clone(struct bio *bio , gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;

  {
#line 230
  tmp = bio_clone_bioset(bio, gfp_mask, fs_bio_set);
#line 230
  return (tmp);
}
}
#line 717 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1083 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1085
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1156
  return (mdev->minor);
}
}
#line 1167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1169
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1172
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1172
  if (tmp != 0L) {
#line 1173
    mutex_unlock(& mdev->data.mutex);
#line 1174
    return (0);
  } else {

  }
#line 1176
  return (1);
}
}
#line 1179 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1181
  mutex_unlock(& mdev->data.mutex);
#line 1182
  return;
}
}
#line 1208
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1220
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1222
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1239
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1243
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1248
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1256
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1262
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1264
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1265
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1267
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1268
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1270
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1274
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1280
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1281
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1283
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1285
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1286
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1288
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1525
wait_queue_head_t drbd_pp_wait ;
#line 1541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1569
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1572
int drbd_worker(struct drbd_thread *thi ) ;
#line 1573
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1574
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1575
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1576
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1577
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1580
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1585
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1586
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1590
  if (mdev->ov_last_oos_size != 0UL) {
#line 1591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1595
  mdev->ov_last_oos_size = 0UL;
#line 1596
  return;
}
}
#line 1599
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1600
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1603
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1604
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1605
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1606
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1607
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1608
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1609
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1610
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1612
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1613
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1614
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1615
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1616
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1618
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1619
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1620
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1622
void resync_timer_fn(unsigned long data ) ;
#line 1623
void start_resync_timer_fn(unsigned long data ) ;
#line 1626
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1627
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1630
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1635
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1650 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1654
  if (level == 1) {
#line 1655
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1657
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1659
  return (err);
}
}
#line 1662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1664
  val = 1;
#line 1665
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1667
  return;
}
}
#line 1669 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1671
  val = 0;
#line 1672
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1674
  return;
}
}
#line 1699
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1700
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1701
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1703
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1705
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1706
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1709
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1710
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1714
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1791 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1793
  return ((struct page *)page->ldv_16348.private);
}
}
#line 1801 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1803
  page = e->pages;
#line 1804
  goto ldv_50824;
  ldv_50823: 
#line 1805
  tmp = page_count(page);
#line 1805
  if (tmp > 1) {
#line 1806
    return (1);
  } else {

  }
#line 1804
  page = page_chain_next(page);
  ldv_50824: ;
#line 1804
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1804
    tmp___0 = page_chain_next(page);
#line 1804
    __builtin_prefetch((void const   *)tmp___0);
#line 1804
    if (1 != 0) {
#line 1805
      goto ldv_50823;
    } else {
#line 1807
      goto ldv_50825;
    }
  } else {

  }
  ldv_50825: ;
#line 1808
  return (0);
}
}
#line 1811 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1813
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1813
  if (tmp == 0) {
#line 1813
    goto ldv_50829;
  } else {

  }
#line 1813
  tmp___0 = get_current();
#line 1813
  __wait.flags = 0U;
#line 1813
  __wait.private = (void *)tmp___0;
#line 1813
  __wait.func = & autoremove_wake_function;
#line 1813
  __wait.task_list.next = & __wait.task_list;
#line 1813
  __wait.task_list.prev = & __wait.task_list;
  ldv_50832: 
#line 1813
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1813
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1813
  if (tmp___1 == 0) {
#line 1813
    goto ldv_50831;
  } else {

  }
#line 1813
  schedule();
#line 1813
  goto ldv_50832;
  ldv_50831: 
#line 1813
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50829: ;
#line 1816
  return;
}
}
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1819
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1820
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1821
  return;
}
}
#line 1860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1864
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1866
  if ((unsigned int )forcedetach == 0U) {
#line 1867
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1867
    if (tmp != 0) {
#line 1868
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1869
    if ((int )mdev->state.ldv_40583.disk > 4) {
#line 1870
      __ns.i = mdev->state.i;
#line 1870
      __ns.ldv_40583.disk = 4U;
#line 1870
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1871
    goto ldv_50861;
  } else {

  }
  case 2: ;
  case 1: 
#line 1876
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1877
  if ((unsigned int )forcedetach == 2U) {
#line 1878
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1879
  if ((int )mdev->state.ldv_40583.disk > 2) {
#line 1880
    __ns___0.i = mdev->state.i;
#line 1880
    __ns___0.ldv_40583.disk = 2U;
#line 1880
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1884
  goto ldv_50861;
  }
  ldv_50861: ;
#line 1887
  return;
}
}
#line 1945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1948
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1948
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1948
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1948
    tmp___0 = 0UL;
  }
#line 1948
  return (tmp___0);
}
}
#line 2027 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2030
  tmp = spinlock_check(& q->q_lock);
#line 2030
  flags = _raw_spin_lock_irqsave(tmp);
#line 2031
  list_add_tail(& w->list, & q->q);
#line 2032
  up(& q->s);
#line 2034
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2035
  return;
}
}
#line 2037 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2039
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 2039
  if (tmp != 0) {
#line 2040
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2041
  return;
}
}
#line 2043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2045
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2046
  wake_asender(mdev);
#line 2047
  return;
}
}
#line 2049 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2053
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2053
  return (tmp);
}
}
#line 2068 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2070
  _drbd_thread_stop(thi, 0, 1);
#line 2071
  return;
}
}
#line 2128 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2130
  atomic_inc(& mdev->rs_pending_cnt);
#line 2131
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 273 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 276
  bio = bio_clone(bio_src, 16U);
#line 278
  req->private_bio = bio;
#line 280
  bio->bi_private = (void *)req;
#line 281
  bio->bi_end_io = & drbd_endio_pri;
#line 282
  bio->bi_next = 0;
#line 283
  return;
}
}
#line 326
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 328
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 337
  mdev = req->mdev;
#line 342
  rv = __req_mod(req, what, & m);
#line 343
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 344
    complete_master_bio(mdev, & m);
  } else {

  }
#line 346
  return (rv);
}
}
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 357
  mdev = req->mdev;
#line 361
  tmp = spinlock_check(& mdev->req_lock);
#line 361
  flags = _raw_spin_lock_irqsave(tmp);
#line 362
  rv = __req_mod(req, what, & m);
#line 363
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 365
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 366
    complete_master_bio(mdev, & m);
  } else {

  }
#line 368
  return (rv);
}
}
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 49
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 82
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 83
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 83
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffff060UL;
#line 85
  md_io->error = error;
#line 98
  drbd_md_put_buffer(mdev);
#line 99
  md_io->done = 1U;
#line 100
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 101
  bio_put(bio);
#line 102
  put_ldev(mdev);
#line 103
  return;
}
}
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 110
  flags = 0UL;
#line 111
  mdev = e->mdev;
#line 113
  if (e->ldv_49794.block_id == 0ULL) {
#line 113
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            113);
  } else {

  }
#line 115
  tmp = spinlock_check(& mdev->req_lock);
#line 115
  flags = _raw_spin_lock_irqsave(tmp);
#line 116
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 117
  list_del(& e->w.list);
#line 118
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 118
  if (tmp___0 != 0) {
#line 119
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 120
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 120
  if (tmp___1 != 0) {
#line 121
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_read_sec_final");
  } else {

  }
#line 122
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 124
  drbd_queue_work(& mdev->data.work, & e->w);
#line 125
  put_ldev(mdev);
#line 126
  return;
}
}
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 132
  flags = 0UL;
#line 133
  mdev = e->mdev;
#line 139
  if (e->ldv_49794.block_id == 0ULL) {
#line 139
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            139);
  } else {

  }
#line 145
  e_sector = e->sector;
#line 146
  do_al_complete_io = (int )e->flags & 1;
#line 147
  is_syncer_req = e->ldv_49794.block_id == 0xffffffffffffffffULL;
#line 149
  tmp = spinlock_check(& mdev->req_lock);
#line 149
  flags = _raw_spin_lock_irqsave(tmp);
#line 150
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 151
  list_del(& e->w.list);
#line 152
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 159
  if (is_syncer_req != 0) {
#line 159
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 159
    do_wake = tmp___0;
  } else {
#line 159
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 159
    do_wake = tmp___1;
  }
#line 163
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 163
  if (tmp___2 != 0) {
#line 164
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_write_sec_final");
  } else {

  }
#line 165
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 167
  if (is_syncer_req != 0) {
#line 168
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 170
  if (do_wake != 0) {
#line 171
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 173
  if (do_al_complete_io != 0) {
#line 174
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 176
  wake_asender(mdev);
#line 177
  put_ldev(mdev);
#line 178
  return;
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 185
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 186
  mdev = e->mdev;
#line 187
  uptodate = (int )bio->bi_flags & 1;
#line 188
  is_write = (int )bio->bi_rw & 1;
#line 190
  if (error != 0) {
#line 190
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 190
    if (tmp != 0) {
#line 191
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 194
  if (error == 0 && uptodate == 0) {
#line 195
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 195
    if (tmp___0 != 0) {
#line 196
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 202
    error = -5;
  } else {

  }
#line 205
  if (error != 0) {
#line 206
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 208
  bio_put(bio);
#line 209
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 209
  if (tmp___1 != 0) {
#line 210
    if (is_write != 0) {
#line 211
      drbd_endio_write_sec_final(e);
    } else {
#line 213
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 214
  return;
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 222
  req = (struct drbd_request *)bio->bi_private;
#line 223
  mdev = req->mdev;
#line 226
  uptodate = (int )bio->bi_flags & 1;
#line 228
  if (error == 0 && uptodate == 0) {
#line 229
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 234
    error = -5;
  } else {

  }
#line 238
  tmp = __builtin_expect(error != 0, 0L);
#line 238
  if (tmp != 0L) {
#line 239
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 8193UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 245
    what = completed_ok;
  }
#line 247
  bio_put(req->private_bio);
#line 248
  tmp___0 = ERR_PTR((long )error);
#line 248
  req->private_bio = (struct bio *)tmp___0;
#line 251
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 251
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 252
  __req_mod(req, what, & m);
#line 253
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 254
  put_ldev(mdev);
#line 256
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 257
    complete_master_bio(mdev, & m);
  } else {

  }
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 262
  __mptr = (struct drbd_work  const  *)w;
#line 262
  req = (struct drbd_request *)__mptr;
#line 268
  spin_lock_irq(& mdev->req_lock);
#line 269
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 270
    _req_mod(req, read_retry_remote_canceled);
#line 271
    spin_unlock_irq(& mdev->req_lock);
#line 272
    return (1);
  } else {

  }
#line 274
  spin_unlock_irq(& mdev->req_lock);
#line 276
  tmp = w_send_read_req(mdev, w, 0);
#line 276
  return (tmp);
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 283
  page = e->pages;
#line 287
  desc.tfm = tfm;
#line 288
  desc.flags = 0U;
#line 290
  sg_init_table(& sg, 1U);
#line 291
  crypto_hash_init(& desc);
#line 293
  goto ldv_51344;
  ldv_51343: 
#line 295
  sg_set_page(& sg, page, 4096U, 0U);
#line 296
  crypto_hash_update(& desc, & sg, sg.length);
#line 297
  page = tmp;
  ldv_51344: 
#line 293
  tmp = page_chain_next(page);
#line 293
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 294
    goto ldv_51343;
  } else {

  }
#line 300
  len = e->size & 4095U;
#line 301
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 302
  crypto_hash_update(& desc, & sg, sg.length);
#line 303
  crypto_hash_final(& desc, (u8 *)digest);
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 313
  desc.tfm = tfm;
#line 314
  desc.flags = 0U;
#line 316
  sg_init_table(& sg, 1U);
#line 317
  crypto_hash_init(& desc);
#line 319
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 319
  i = (int )bio->bi_idx;
#line 319
  goto ldv_51357;
  ldv_51356: 
#line 320
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 321
  crypto_hash_update(& desc, & sg, sg.length);
#line 319
  bvec = bvec + 1;
#line 319
  i = i + 1;
  ldv_51357: ;
#line 319
  if ((int )bio->bi_vcnt > i) {
#line 320
    goto ldv_51356;
  } else {

  }
#line 323
  crypto_hash_final(& desc, (u8 *)digest);
#line 324
  return;
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 329
  __mptr = (struct drbd_work  const  *)w;
#line 329
  e = (struct drbd_epoch_entry *)__mptr;
#line 332
  ok = 1;
#line 334
  if (e->ldv_49794.block_id != 2205466966ULL) {
#line 334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            334);
  } else {

  }
#line 336
  tmp = __builtin_expect(cancel != 0, 0L);
#line 336
  if (tmp != 0L) {
#line 337
    goto out;
  } else {

  }
#line 339
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 339
  if (tmp___0 != 0L) {
#line 340
    goto out;
  } else {

  }
#line 342
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 342
  digest_size = (int )tmp___1;
#line 343
  digest = kmalloc((size_t )digest_size, 16U);
#line 344
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 345
    sector = e->sector;
#line 346
    size = e->size;
#line 347
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 353
    drbd_free_some_ee(mdev, e, 0);
#line 354
    e = 0;
#line 355
    inc_rs_pending(mdev);
#line 356
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 359
    kfree((void const   *)digest);
  } else {
#line 361
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 362
    ok = 0;
  }
  out: ;
#line 366
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 367
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 369
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 369
  if (tmp___2 != 0L) {
#line 370
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 371
  return (ok);
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 380
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 380
  if (tmp == 0) {
#line 381
    return (-5);
  } else {

  }
#line 383
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 383
  if (tmp___0 != 0) {
#line 384
    goto defer;
  } else {

  }
#line 388
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 389
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 390
    goto defer;
  } else {

  }
#line 392
  e->w.cb = & w_e_send_csum;
#line 393
  spin_lock_irq(& mdev->req_lock);
#line 394
  list_add(& e->w.list, & mdev->read_ee);
#line 395
  spin_unlock_irq(& mdev->req_lock);
#line 397
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 398
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 398
  if (tmp___1 == 0) {
#line 399
    return (0);
  } else {

  }
#line 405
  spin_lock_irq(& mdev->req_lock);
#line 406
  list_del(& e->w.list);
#line 407
  spin_unlock_irq(& mdev->req_lock);
#line 409
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 411
  put_ldev(mdev);
#line 412
  return (-11);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 417
  switch ((int )mdev->state.ldv_40583.conn) {
  case 18: 
#line 419
  w_make_ov_request(mdev, w, cancel);
#line 420
  goto ldv_51386;
  case 17: 
#line 422
  w_make_resync_request(mdev, w, cancel);
#line 423
  goto ldv_51386;
  }
  ldv_51386: ;
#line 426
  return (1);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 431
  mdev = (struct drbd_conf *)data;
#line 433
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 433
  if (tmp != 0) {
#line 434
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 435
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 441
  i = 0;
#line 441
  goto ldv_51398;
  ldv_51397: 
#line 442
  *(fb->values + (unsigned long )i) = value;
#line 441
  i = i + 1;
  ldv_51398: ;
#line 441
  if ((unsigned int )i < fb->size) {
#line 442
    goto ldv_51397;
  } else {

  }

#line 446
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 449
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 450
  tmp = fb->head_index;
#line 450
  fb->head_index = fb->head_index + 1U;
#line 450
  *(fb->values + (unsigned long )tmp) = value;
#line 452
  if (fb->head_index >= fb->size) {
#line 453
    fb->head_index = 0U;
  } else {

  }
#line 455
  return (ov);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 462
  i = 0;
#line 462
  goto ldv_51411;
  ldv_51410: 
#line 463
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 462
  i = i + 1;
  ldv_51411: ;
#line 462
  if ((unsigned int )i < fb->size) {
#line 463
    goto ldv_51410;
  } else {

  }

#line 467
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 477
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 477
  sect_in = (unsigned int )tmp;
#line 478
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 480
  spin_lock(& mdev->peer_seq_lock);
#line 482
  steps = (int )mdev->rs_plan_s.size;
#line 484
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 485
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 487
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 491
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 494
  cps = correction / steps;
#line 495
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 496
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 499
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 500
  spin_unlock(& mdev->peer_seq_lock);
#line 501
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 503
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 504
  if (req_sect < 0) {
#line 505
    req_sect = 0;
  } else {

  }
#line 507
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 508
  if (req_sect > max_sect) {
#line 509
    req_sect = max_sect;
  } else {

  }
#line 517
  return (req_sect);
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 523
  if (mdev->rs_plan_s.size != 0U) {
#line 524
    tmp = drbd_rs_controller(mdev);
#line 524
    number = tmp >> 3;
#line 525
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 527
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 528
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 533
  return (number);
}
}
#line 536 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 541
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 541
  capacity = tmp;
#line 545
  i = 0;
#line 547
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 547
  if (tmp___0 != 0L) {
#line 548
    return (1);
  } else {

  }
#line 550
  if (mdev->rs_total == 0UL) {
#line 552
    drbd_resync_finished(mdev);
#line 553
    return (1);
  } else {

  }
#line 556
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 556
  if (tmp___1 == 0) {
#line 561
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 562
    return (1);
  } else {

  }
#line 565
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 565
  max_bio_size = (int )(tmp___2 << 9);
#line 566
  number = drbd_rs_number_requests(mdev);
#line 567
  if (number == 0) {
#line 568
    goto requeue;
  } else {

  }
#line 570
  i = 0;
#line 570
  goto ldv_51459;
  ldv_51458: 
#line 572
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 573
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 574
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 575
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 577
    queued = 1;
#line 578
    sndbuf = 0;
  }
#line 580
  mutex_unlock(& mdev->data.mutex);
#line 581
  if (sndbuf / 2 < queued) {
#line 582
    goto requeue;
  } else {

  }
  next_sector: 
#line 585
  size = 4096;
#line 586
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 588
  if (bit == 0xffffffffffffffffUL) {
#line 589
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 590
    put_ldev(mdev);
#line 591
    return (1);
  } else {

  }
#line 594
  sector = bit << 3;
#line 596
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 596
  if (tmp___3 != 0) {
#line 598
    mdev->bm_resync_fo = bit;
#line 599
    goto requeue;
  } else {
#line 596
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 596
    if (tmp___4 != 0) {
#line 598
      mdev->bm_resync_fo = bit;
#line 599
      goto requeue;
    } else {

    }
  }
#line 601
  mdev->bm_resync_fo = bit + 1UL;
#line 603
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 603
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 603
  if (tmp___6 != 0L) {
#line 604
    drbd_rs_complete_io(mdev, sector);
#line 605
    goto next_sector;
  } else {

  }
#line 615
  align = 1;
#line 616
  rollback_i = i;
  ldv_51447: ;
#line 618
  if (size + 4096 > max_bio_size) {
#line 619
    goto ldv_51446;
  } else {

  }
#line 622
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 623
    goto ldv_51446;
  } else {

  }
#line 626
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 627
    goto ldv_51446;
  } else {

  }
#line 633
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 633
  if (tmp___7 != 1) {
#line 634
    goto ldv_51446;
  } else {

  }
#line 635
  bit = bit + 1UL;
#line 636
  size = size + 4096;
#line 637
  if (4096 << align <= size) {
#line 638
    align = align + 1;
  } else {

  }
#line 639
  i = i + 1;
#line 640
  goto ldv_51447;
  ldv_51446: ;
#line 643
  if (size > 4096) {
#line 644
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 648
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 649
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 650
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 651
    tmp___8 = read_for_csum(mdev, sector, size);
#line 651
    switch (tmp___8) {
    case -5: 
#line 653
    put_ldev(mdev);
#line 654
    return (0);
    case -11: 
#line 656
    drbd_rs_complete_io(mdev, sector);
#line 657
    mdev->bm_resync_fo = sector >> 3;
#line 658
    i = rollback_i;
#line 659
    goto requeue;
    case 0: ;
#line 662
    goto ldv_51451;
    default: 
#line 664
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (664), "i" (12UL));
    ldv_51453: ;
#line 664
    goto ldv_51453;
    }
    ldv_51451: ;
  } else {
#line 667
    inc_rs_pending(mdev);
#line 668
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 668
    if (tmp___11 == 0) {
#line 670
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 671
      atomic_dec(& mdev->rs_pending_cnt);
#line 671
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 671
      if (tmp___10 < 0) {
#line 671
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 671
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 671, tmp___9);
      } else {

      }
#line 672
      put_ldev(mdev);
#line 673
      return (0);
    } else {

    }
  }
#line 570
  i = i + 1;
  ldv_51459: ;
#line 570
  if (i < number) {
#line 571
    goto ldv_51458;
  } else {

  }
#line 678
  tmp___12 = drbd_bm_bits(mdev);
#line 678
  if (mdev->bm_resync_fo >= tmp___12) {
#line 685
    put_ldev(mdev);
#line 686
    return (1);
  } else {

  }
  requeue: 
#line 690
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 691
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 692
  put_ldev(mdev);
#line 693
  return (1);
}
}
#line 696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  bool stop_sector_reached ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 700
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 700
  capacity = tmp;
#line 701
  stop_sector_reached = 0;
#line 703
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 703
  if (tmp___0 != 0L) {
#line 704
    return (1);
  } else {

  }
#line 706
  number = drbd_rs_number_requests(mdev);
#line 708
  sector = mdev->ov_position;
#line 709
  i = 0;
#line 709
  goto ldv_51479;
  ldv_51478: ;
#line 710
  if (sector >= capacity) {
#line 711
    return (1);
  } else {

  }
#line 716
  stop_sector_reached = (bool )((i > 0 && mdev->agreed_pro_version > 96) && mdev->ov_stop_sector <= sector);
#line 719
  if ((int )stop_sector_reached) {
#line 720
    goto ldv_51472;
  } else {

  }
#line 722
  size = 4096;
#line 724
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 724
  if (tmp___1 != 0) {
#line 726
    mdev->ov_position = sector;
#line 727
    goto requeue;
  } else {
#line 724
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 724
    if (tmp___2 != 0) {
#line 726
      mdev->ov_position = sector;
#line 727
      goto requeue;
    } else {

    }
  }
#line 730
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 731
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 733
  inc_rs_pending(mdev);
#line 734
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 734
  if (tmp___5 == 0) {
#line 735
    atomic_dec(& mdev->rs_pending_cnt);
#line 735
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 735
    if (tmp___4 < 0) {
#line 735
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 735
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 735, tmp___3);
    } else {

    }
#line 736
    return (0);
  } else {

  }
#line 738
  sector = sector + 8UL;
#line 709
  i = i + 1;
  ldv_51479: ;
#line 709
  if (i < number) {
#line 710
    goto ldv_51478;
  } else {

  }
  ldv_51472: 
#line 740
  mdev->ov_position = sector;
  requeue: 
#line 743
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 744
  if (i == 0 || ! stop_sector_reached) {
#line 745
    mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
  } else {

  }
#line 746
  return (1);
}
}
#line 750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 752
  mdev = (struct drbd_conf *)data;
#line 754
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 755
  return;
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 759
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 759
  if (tmp != 0) {
#line 760
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 761
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 762
    add_timer(& mdev->start_resync_timer);
#line 763
    return (1);
  } else {
#line 759
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 759
    if (tmp___0 != 0) {
#line 760
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 761
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 762
      add_timer(& mdev->start_resync_timer);
#line 763
      return (1);
    } else {

    }
  }
#line 766
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 767
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 768
  return (1);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 773
  kfree((void const   *)w);
#line 774
  ov_oos_print(mdev);
#line 775
  drbd_resync_finished(mdev);
#line 777
  return (1);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 782
  kfree((void const   *)w);
#line 784
  drbd_resync_finished(mdev);
#line 786
  return (1);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 791
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 792
  request_ping(mdev);
#line 793
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 793
  if (tmp != 0 || (int )mdev->state.ldv_40583.conn <= 9) {
#line 793
    goto ldv_51502;
  } else {

  }
#line 793
  tmp___0 = get_current();
#line 793
  __wait.flags = 0U;
#line 793
  __wait.private = (void *)tmp___0;
#line 793
  __wait.func = & autoremove_wake_function;
#line 793
  __wait.task_list.next = & __wait.task_list;
#line 793
  __wait.task_list.prev = & __wait.task_list;
  ldv_51505: 
#line 793
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 793
  tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 793
  if (tmp___1 != 0 || (int )mdev->state.ldv_40583.conn <= 9) {
#line 793
    goto ldv_51504;
  } else {

  }
#line 793
  schedule();
#line 793
  goto ldv_51505;
  ldv_51504: 
#line 793
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51502: ;
#line 796
  return;
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 803
  khelper_cmd = 0;
#line 804
  verify_done = 0;
#line 809
  tmp___0 = drbd_rs_del_all(mdev);
#line 809
  if (tmp___0 != 0) {
#line 815
    schedule_timeout_interruptible(25L);
#line 816
    tmp = kmalloc(24UL, 32U);
#line 816
    w = (struct drbd_work *)tmp;
#line 817
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 818
      w->cb = & w_resync_finished;
#line 819
      drbd_queue_work(& mdev->data.work, w);
#line 820
      return (1);
    } else {

    }
#line 822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 825
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 826
  if (dt == 0UL) {
#line 827
    dt = 1UL;
  } else {

  }
#line 829
  db = mdev->rs_total;
#line 831
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 832
    db = db - mdev->ov_left;
  } else {

  }
#line 834
  dbdt = db / dt << 2;
#line 835
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 837
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 837
  if (tmp___1 == 0) {
#line 838
    goto out;
  } else {

  }
#line 840
  ping_peer(mdev);
#line 842
  spin_lock_irq(& mdev->req_lock);
#line 843
  os = mdev->state;
#line 845
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 849
  if ((int )os.ldv_40583.conn <= 10) {
#line 850
    goto out_unlock;
  } else {

  }
#line 852
  ns = os;
#line 853
  ns.ldv_40583.conn = 10U;
#line 855
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify" : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 859
  n_oos = drbd_bm_total_weight(mdev);
#line 861
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 862
    if (n_oos != 0UL) {
#line 863
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 865
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 868
      if (mdev->rs_failed != n_oos) {
#line 868
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                868);
      } else {

      }
#line 870
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 871
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 873
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 874
        s = mdev->rs_same_csum;
#line 875
        t = mdev->rs_total;
#line 876
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 879
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 888
  if (mdev->rs_failed != 0UL) {
#line 889
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 891
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 892
      ns.ldv_40583.disk = 4U;
#line 893
      ns.ldv_40583.pdsk = 8U;
    } else {
#line 895
      ns.ldv_40583.disk = 8U;
#line 896
      ns.ldv_40583.pdsk = 4U;
    }
  } else {
#line 899
    ns.ldv_40583.disk = 8U;
#line 900
    ns.ldv_40583.pdsk = 8U;
#line 902
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 903
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 905
        i = 1;
#line 905
        goto ldv_51525;
        ldv_51524: 
#line 906
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 905
        i = i + 1;
        ldv_51525: ;
#line 905
        if (i <= 3) {
#line 906
          goto ldv_51524;
        } else {

        }
#line 907
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 908
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 910
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 914
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 917
      drbd_uuid_set_bm(mdev, 0ULL);
#line 918
      drbd_print_uuids(mdev, "updated UUIDs");
#line 919
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 923
        i___0 = 0;
#line 923
        goto ldv_51529;
        ldv_51528: 
#line 924
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 923
        i___0 = i___0 + 1;
        ldv_51529: ;
#line 923
        if (i___0 <= 3) {
#line 924
          goto ldv_51528;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 929
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 931
  spin_unlock_irq(& mdev->req_lock);
#line 932
  put_ldev(mdev);
  out: 
#line 934
  mdev->rs_total = 0UL;
#line 935
  mdev->rs_failed = 0UL;
#line 936
  mdev->rs_paused = 0UL;
#line 939
  if (verify_done != 0 && mdev->ov_left == 0UL) {
#line 940
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 942
  drbd_md_sync(mdev);
#line 944
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 945
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 947
  return (1);
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 953
  tmp = drbd_ee_has_active_page(e);
#line 953
  if (tmp != 0) {
#line 955
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 956
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 957
    atomic_sub(i, & mdev->pp_in_use);
#line 958
    spin_lock_irq(& mdev->req_lock);
#line 959
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 960
    spin_unlock_irq(& mdev->req_lock);
#line 961
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 963
    drbd_free_some_ee(mdev, e, 0);
  }
#line 964
  return;
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 974
  __mptr = (struct drbd_work  const  *)w;
#line 974
  e = (struct drbd_epoch_entry *)__mptr;
#line 977
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 977
  if (tmp___1 != 0L) {
#line 978
    drbd_free_some_ee(mdev, e, 0);
#line 979
    atomic_dec(& mdev->unacked_cnt);
#line 979
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 979
    if (tmp___0 < 0) {
#line 979
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 979
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 979, tmp);
    } else {

    }
#line 980
    return (1);
  } else {

  }
#line 983
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 983
  if (tmp___3 != 0L) {
#line 984
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 986
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 986
    if (tmp___2 != 0) {
#line 987
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 990
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 993
  atomic_dec(& mdev->unacked_cnt);
#line 993
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 993
  if (tmp___5 < 0) {
#line 993
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 993, tmp___4);
  } else {

  }
#line 995
  move_to_net_ee_or_free(mdev, e);
#line 997
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 997
  if (tmp___6 != 0L) {
#line 998
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 999
  return (ok);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1010
  __mptr = (struct drbd_work  const  *)w;
#line 1010
  e = (struct drbd_epoch_entry *)__mptr;
#line 1013
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1013
  if (tmp___1 != 0L) {
#line 1014
    drbd_free_some_ee(mdev, e, 0);
#line 1015
    atomic_dec(& mdev->unacked_cnt);
#line 1015
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1015
    if (tmp___0 < 0) {
#line 1015
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1015
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1015, tmp);
    } else {

    }
#line 1016
    return (1);
  } else {

  }
#line 1019
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1019
  if (tmp___2 != 0) {
#line 1020
    drbd_rs_complete_io(mdev, e->sector);
#line 1021
    put_ldev(mdev);
  } else {

  }
#line 1024
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1025
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1026
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1026
    if (tmp___6 != 0L) {
#line 1027
      tmp___4 = __builtin_expect((int )mdev->state.ldv_40583.pdsk > 3, 1L);
#line 1027
      if (tmp___4 != 0L) {
#line 1028
        inc_rs_pending(mdev);
#line 1029
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1031
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1031
        if (tmp___3 != 0) {
#line 1032
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1034
        ok = 1;
      }
    } else {
#line 1037
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1037
      if (tmp___5 != 0) {
#line 1038
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1041
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1044
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1047
  atomic_dec(& mdev->unacked_cnt);
#line 1047
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1047
  if (tmp___8 < 0) {
#line 1047
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1047
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1047, tmp___7);
  } else {

  }
#line 1049
  move_to_net_ee_or_free(mdev, e);
#line 1051
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1051
  if (tmp___9 != 0L) {
#line 1052
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1053
  return (ok);
}
}
#line 1056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1058
  __mptr = (struct drbd_work  const  *)w;
#line 1058
  e = (struct drbd_epoch_entry *)__mptr;
#line 1061
  digest = 0;
#line 1062
  eq = 0;
#line 1064
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1064
  if (tmp___1 != 0L) {
#line 1065
    drbd_free_some_ee(mdev, e, 0);
#line 1066
    atomic_dec(& mdev->unacked_cnt);
#line 1066
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1066
    if (tmp___0 < 0) {
#line 1066
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1066
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1066, tmp);
    } else {

    }
#line 1067
    return (1);
  } else {

  }
#line 1070
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1070
  if (tmp___2 != 0) {
#line 1071
    drbd_rs_complete_io(mdev, e->sector);
#line 1072
    put_ldev(mdev);
  } else {

  }
#line 1075
  di = e->ldv_49794.digest;
#line 1077
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1077
  if (tmp___6 != 0L) {
#line 1081
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1082
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1082
      digest_size = (int )tmp___3;
#line 1083
      if (di->digest_size != digest_size) {
#line 1083
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1083);
      } else {

      }
#line 1084
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1086
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1087
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1088
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1088
      eq = tmp___4 == 0;
#line 1089
      kfree((void const   *)digest);
    } else {

    }
#line 1092
    if (eq != 0) {
#line 1093
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1093U);
#line 1095
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1096
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1098
      inc_rs_pending(mdev);
#line 1099
      e->ldv_49794.block_id = 0xffffffffffffffffULL;
#line 1100
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1101
      kfree((void const   *)di);
#line 1102
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1105
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1106
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1106
    if (tmp___5 != 0) {
#line 1107
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1110
  atomic_dec(& mdev->unacked_cnt);
#line 1110
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1110
  if (tmp___8 < 0) {
#line 1110
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1110
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1110, tmp___7);
  } else {

  }
#line 1111
  move_to_net_ee_or_free(mdev, e);
#line 1113
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1113
  if (tmp___9 != 0L) {
#line 1114
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1115
  return (ok);
}
}
#line 1119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1121
  __mptr = (struct drbd_work  const  *)w;
#line 1121
  e = (struct drbd_epoch_entry *)__mptr;
#line 1122
  sector = e->sector;
#line 1123
  size = e->size;
#line 1126
  ok = 1;
#line 1128
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1128
  if (tmp != 0L) {
#line 1129
    goto out;
  } else {

  }
#line 1131
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1131
  digest_size = (int )tmp___0;
#line 1132
  digest = kmalloc((size_t )digest_size, 16U);
#line 1133
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1134
    ok = 0;
#line 1135
    goto out;
  } else {

  }
#line 1138
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1138
  if (tmp___1 != 0L) {
#line 1139
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1141
    memset(digest, 0, (size_t )digest_size);
  }
#line 1148
  drbd_free_some_ee(mdev, e, 0);
#line 1149
  e = 0;
#line 1150
  inc_rs_pending(mdev);
#line 1151
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1154
  if (ok == 0) {
#line 1155
    atomic_dec(& mdev->rs_pending_cnt);
#line 1155
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1155
    if (tmp___3 < 0) {
#line 1155
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1155
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1155, tmp___2);
    } else {

    }
  } else {

  }
#line 1156
  kfree((void const   *)digest);
  out: ;
#line 1159
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1160
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1161
  atomic_dec(& mdev->unacked_cnt);
#line 1161
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1161
  if (tmp___5 < 0) {
#line 1161
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1161, tmp___4);
  } else {

  }
#line 1162
  return (ok);
}
}
#line 1165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1167
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1168
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1170
    mdev->ov_last_oos_start = sector;
#line 1171
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1173
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1173U);
#line 1174
  return;
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  bool stop_sector_reached ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1178
  __mptr = (struct drbd_work  const  *)w;
#line 1178
  e = (struct drbd_epoch_entry *)__mptr;
#line 1181
  sector = e->sector;
#line 1182
  size = e->size;
#line 1184
  eq = 0;
#line 1185
  stop_sector_reached = 0;
#line 1187
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1187
  if (tmp___1 != 0L) {
#line 1188
    drbd_free_some_ee(mdev, e, 0);
#line 1189
    atomic_dec(& mdev->unacked_cnt);
#line 1189
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1189
    if (tmp___0 < 0) {
#line 1189
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1189
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1189, tmp);
    } else {

    }
#line 1190
    return (1);
  } else {

  }
#line 1195
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1195
  if (tmp___2 != 0) {
#line 1196
    drbd_rs_complete_io(mdev, e->sector);
#line 1197
    put_ldev(mdev);
  } else {

  }
#line 1200
  di = e->ldv_49794.digest;
#line 1202
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1202
  if (tmp___5 != 0L) {
#line 1203
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1203
    digest_size = (int )tmp___3;
#line 1204
    digest = kmalloc((size_t )digest_size, 16U);
#line 1205
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1206
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1208
      if (di->digest_size != digest_size) {
#line 1208
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1208);
      } else {

      }
#line 1209
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1209
      eq = tmp___4 == 0;
#line 1210
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1219
  drbd_free_some_ee(mdev, e, 0);
#line 1220
  if (eq == 0) {
#line 1221
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1223
    ov_oos_print(mdev);
  }
#line 1225
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1228
  atomic_dec(& mdev->unacked_cnt);
#line 1228
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1228
  if (tmp___7 < 0) {
#line 1228
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1228, tmp___6);
  } else {

  }
#line 1230
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1233
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1234
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1236
  stop_sector_reached = (bool )(mdev->agreed_pro_version > 96 && (sector_t )(size >> 9) + sector >= mdev->ov_stop_sector);
#line 1239
  if (mdev->ov_left == 0UL || (int )stop_sector_reached) {
#line 1240
    ov_oos_print(mdev);
#line 1241
    drbd_resync_finished(mdev);
  } else {

  }
#line 1244
  return (ok);
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1249
  __mptr = (struct drbd_work  const  *)w;
#line 1249
  b = (struct drbd_wq_barrier *)__mptr;
#line 1250
  complete(& b->done);
#line 1251
  return (1);
}
}
#line 1254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1256
  __mptr = (struct drbd_work  const  *)w;
#line 1256
  b = (struct drbd_tl_epoch *)__mptr;
#line 1257
  p = & mdev->data.sbuf.barrier;
#line 1258
  ok = 1;
#line 1265
  spin_lock_irq(& mdev->req_lock);
#line 1266
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_40583.conn <= 9) {
#line 1267
    cancel = 1;
  } else {

  }
#line 1268
  spin_unlock_irq(& mdev->req_lock);
#line 1269
  if (cancel != 0) {
#line 1270
    return (1);
  } else {

  }
#line 1272
  tmp = drbd_get_data_sock(mdev);
#line 1272
  if (tmp == 0) {
#line 1273
    return (0);
  } else {

  }
#line 1274
  p->barrier = b->br_number;
#line 1278
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1280
  drbd_put_data_sock(mdev);
#line 1282
  return (ok);
}
}
#line 1285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1287
  if (cancel != 0) {
#line 1288
    return (1);
  } else {

  }
#line 1289
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1289
  return (tmp);
}
}
#line 1292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1294
  __mptr = (struct drbd_work  const  *)w;
#line 1294
  req = (struct drbd_request *)__mptr;
#line 1297
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1297
  if (tmp != 0L) {
#line 1298
    req_mod(req, send_canceled);
#line 1299
    return (1);
  } else {

  }
#line 1302
  ok = drbd_send_oos(mdev, req);
#line 1303
  req_mod(req, oos_handed_to_network);
#line 1305
  return (ok);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1316
  __mptr = (struct drbd_work  const  *)w;
#line 1316
  req = (struct drbd_request *)__mptr;
#line 1319
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1319
  if (tmp != 0L) {
#line 1320
    req_mod(req, send_canceled);
#line 1321
    return (1);
  } else {

  }
#line 1324
  ok = drbd_send_dblock(mdev, req);
#line 1325
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1327
  return (ok);
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1338
  __mptr = (struct drbd_work  const  *)w;
#line 1338
  req = (struct drbd_request *)__mptr;
#line 1341
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1341
  if (tmp != 0L) {
#line 1342
    req_mod(req, send_canceled);
#line 1343
    return (1);
  } else {

  }
#line 1346
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1349
  if (ok == 0) {
#line 1352
    if ((int )mdev->state.ldv_40583.conn > 9) {
#line 1353
      val.i = 0U;
#line 1353
      val.ldv_40583.conn = 5U;
#line 1353
      mask.i = 0U;
#line 1353
      mask.ldv_40583.conn = 31U;
#line 1353
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1355
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1357
  return (ok);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1362
  __mptr = (struct drbd_work  const  *)w;
#line 1362
  req = (struct drbd_request *)__mptr;
#line 1364
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 4096UL) != 0UL) {
#line 1365
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1371
  drbd_req_make_private_bio(req, req->master_bio);
#line 1372
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1373
  generic_make_request(req->private_bio);
#line 1375
  return (1);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1380
  odev = mdev;
  ldv_51706: ;
#line 1383
  if (odev->sync_conf.after == -1) {
#line 1384
    return (1);
  } else {

  }
#line 1385
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1386
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1386
  if (_b != 0) {
#line 1386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1386);
  } else {

  }
#line 1386
  if (_b != 0) {
#line 1386
    return (1);
  } else {

  }
#line 1387
  if (((((int )odev->state.ldv_40583.conn > 15 && (int )odev->state.ldv_40583.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1391
    return (0);
  } else {

  }
#line 1392
  goto ldv_51706;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1404
  rv = 0;
#line 1406
  i = 0;
#line 1406
  goto ldv_51717;
  ldv_51716: 
#line 1407
  odev = minor_to_mdev((unsigned int )i);
#line 1408
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1409
    goto ldv_51713;
  } else {

  }
#line 1410
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1411
    goto ldv_51713;
  } else {

  }
#line 1412
  tmp___0 = _drbd_may_sync_now(odev);
#line 1412
  if (tmp___0 == 0) {
#line 1413
    __ns.i = odev->state.i;
#line 1413
    __ns.ldv_40583.aftr_isp = 1U;
#line 1413
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1413
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_51713: 
#line 1406
  i = i + 1;
  ldv_51717: ;
#line 1406
  if ((unsigned int )i < minor_count) {
#line 1407
    goto ldv_51716;
  } else {

  }

#line 1417
  return (rv);
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1429
  rv = 0;
#line 1431
  i = 0;
#line 1431
  goto ldv_51729;
  ldv_51728: 
#line 1432
  odev = minor_to_mdev((unsigned int )i);
#line 1433
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1434
    goto ldv_51725;
  } else {

  }
#line 1435
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1436
    goto ldv_51725;
  } else {

  }
#line 1437
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1438
    tmp___0 = _drbd_may_sync_now(odev);
#line 1438
    if (tmp___0 != 0) {
#line 1439
      __ns.i = odev->state.i;
#line 1439
      __ns.ldv_40583.aftr_isp = 0U;
#line 1439
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1439
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_51725: 
#line 1431
  i = i + 1;
  ldv_51729: ;
#line 1431
  if ((unsigned int )i < minor_count) {
#line 1432
    goto ldv_51728;
  } else {

  }

#line 1444
  return (rv);
}
}
#line 1447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1449
  _raw_write_lock_irq(& global_state_lock);
#line 1450
  _drbd_resume_next(mdev);
#line 1451
  _raw_write_unlock_irq(& global_state_lock);
#line 1452
  return;
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1456
  _raw_write_lock_irq(& global_state_lock);
#line 1457
  _drbd_pause_after(mdev);
#line 1458
  _raw_write_unlock_irq(& global_state_lock);
#line 1459
  return;
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1465
  if (o_minor == -1) {
#line 1466
    return (101);
  } else {

  }
#line 1467
  if (o_minor < -1) {
#line 1468
    return (132);
  } else {
#line 1467
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1467
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1468
      return (132);
    } else {

    }
  }
#line 1471
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_51742: ;
#line 1473
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1474
    return (133);
  } else {

  }
#line 1477
  if (odev->sync_conf.after == -1) {
#line 1478
    return (101);
  } else {

  }
#line 1481
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1482
  goto ldv_51742;
}
}
#line 1485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1490
  _raw_write_lock_irq(& global_state_lock);
#line 1491
  retcode = sync_after_error(mdev, na);
#line 1492
  if (retcode == 101) {
#line 1493
    mdev->sync_conf.after = na;
    ldv_51749: 
#line 1495
    changes = _drbd_pause_after(mdev);
#line 1496
    tmp = _drbd_resume_next(mdev);
#line 1496
    changes = tmp | changes;
#line 1497
    if (changes != 0) {
#line 1498
      goto ldv_51749;
    } else {

    }

  } else {

  }
#line 1499
  _raw_write_unlock_irq(& global_state_lock);
#line 1500
  return (retcode);
}
}
#line 1503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1505
  atomic_set(& mdev->rs_sect_in, 0);
#line 1506
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1507
  mdev->rs_in_flight = 0;
#line 1508
  mdev->rs_planed = 0;
#line 1509
  spin_lock(& mdev->peer_seq_lock);
#line 1510
  fifo_set(& mdev->rs_plan_s, 0);
#line 1511
  spin_unlock(& mdev->peer_seq_lock);
#line 1512
  return;
}
}
#line 1522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1527
  if ((int )mdev->state.ldv_40583.conn > 15 && (int )mdev->state.ldv_40583.conn <= 21) {
#line 1528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1529
    return;
  } else {

  }
#line 1532
  if ((unsigned int )side == 17U) {
#line 1536
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1537
    r = (r >> 8) & 255;
#line 1538
    if (r > 0) {
#line 1539
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1541
      val.i = 0U;
#line 1541
      val.ldv_40583.conn = 1U;
#line 1541
      mask.i = 0U;
#line 1541
      mask.ldv_40583.conn = 31U;
#line 1541
      drbd_force_state(mdev, mask, val);
#line 1542
      return;
    } else {

    }
  } else {
#line 1545
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1546
    r = (r >> 8) & 255;
#line 1547
    if (r > 0) {
#line 1548
      if (r == 3) {
#line 1549
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1552
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1554
        val___0.i = 0U;
#line 1554
        val___0.ldv_40583.conn = 1U;
#line 1554
        mask___0.i = 0U;
#line 1554
        mask___0.ldv_40583.conn = 31U;
#line 1554
        drbd_force_state(mdev, mask___0, val___0);
#line 1555
        return;
      }
    } else {

    }
  }
#line 1560
  drbd_state_lock(mdev);
#line 1561
  _raw_write_lock_irq(& global_state_lock);
#line 1562
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1562
  if (tmp == 0) {
#line 1563
    _raw_write_unlock_irq(& global_state_lock);
#line 1564
    drbd_state_unlock(mdev);
#line 1565
    return;
  } else {

  }
#line 1568
  ns.i = mdev->state.i;
#line 1570
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1570
  ns.ldv_40583.aftr_isp = tmp___0 == 0;
#line 1572
  ns.ldv_40583.conn = (unsigned char )side;
#line 1574
  if ((unsigned int )side == 17U) {
#line 1575
    ns.ldv_40583.disk = 4U;
  } else {
#line 1577
    ns.ldv_40583.pdsk = 4U;
  }
#line 1579
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1579
  r = (int )tmp___1;
#line 1580
  ns = mdev->state;
#line 1582
  if ((int )ns.ldv_40583.conn <= 9) {
#line 1583
    r = 0;
  } else {

  }
#line 1585
  if (r == 1) {
#line 1586
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1586
    tw = tmp___2;
#line 1587
    now = jiffies;
#line 1590
    mdev->rs_failed = 0UL;
#line 1591
    mdev->rs_paused = 0UL;
#line 1592
    mdev->rs_same_csum = 0UL;
#line 1593
    mdev->rs_last_events = 0;
#line 1594
    mdev->rs_last_sect_ev = 0;
#line 1595
    mdev->rs_total = tw;
#line 1596
    mdev->rs_start = now;
#line 1597
    i = 0;
#line 1597
    goto ldv_51772;
    ldv_51771: 
#line 1598
    mdev->rs_mark_left[i] = tw;
#line 1599
    mdev->rs_mark_time[i] = now;
#line 1597
    i = i + 1;
    ldv_51772: ;
#line 1597
    if (i <= 7) {
#line 1598
      goto ldv_51771;
    } else {

    }
#line 1601
    _drbd_pause_after(mdev);
  } else {

  }
#line 1603
  _raw_write_unlock_irq(& global_state_lock);
#line 1605
  if (r == 1) {
#line 1606
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_40583.conn);
#line 1606
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1610
    if ((unsigned int )side == 17U) {
#line 1611
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1620
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1621
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1623
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1634
      if ((unsigned int )side == 16U) {
#line 1635
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1638
      drbd_resync_finished(mdev);
    } else {

    }
#line 1641
    drbd_rs_controller_reset(mdev);
#line 1646
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1647
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1649
    drbd_md_sync(mdev);
  } else {

  }
#line 1651
  put_ldev(mdev);
#line 1652
  drbd_state_unlock(mdev);
#line 1653
  return;
}
}
#line 1655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1657
  mdev = thi->mdev;
#line 1658
  w = 0;
#line 1659
  work_list.next = & work_list;
#line 1659
  work_list.prev = & work_list;
#line 1660
  intr = 0;
#line 1662
  tmp = mdev_to_minor(mdev);
#line 1662
  tmp___0 = get_current();
#line 1662
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1664
  goto ldv_51785;
  ldv_51795: 
#line 1665
  drbd_thread_current_set_cpu(mdev);
#line 1667
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1667
  if (tmp___1 != 0) {
#line 1668
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1669
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1670
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1671
    mutex_unlock(& mdev->data.mutex);
#line 1673
    intr = down_interruptible(& mdev->data.work.s);
#line 1675
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1676
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1677
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1678
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1681
  if (intr != 0) {
#line 1682
    if (intr != -4) {
#line 1682
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1682);
    } else {

    }
#line 1683
    tmp___2 = get_current();
#line 1683
    flush_signals(tmp___2);
#line 1684
    tmp___3 = get_t_state(thi);
#line 1684
    _b = (unsigned int )tmp___3 == 1U;
#line 1684
    if (_b != 0) {
#line 1684
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1684);
    } else {

    }
#line 1684
    if (_b != 0) {
#line 1685
      goto ldv_51785;
    } else {

    }
#line 1686
    goto ldv_51786;
  } else {

  }
#line 1689
  tmp___4 = get_t_state(thi);
#line 1689
  if ((unsigned int )tmp___4 != 1U) {
#line 1690
    goto ldv_51786;
  } else {

  }
#line 1695
  w = 0;
#line 1696
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1697
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1697
  _b___0 = tmp___5 != 0;
#line 1697
  if (_b___0 != 0) {
#line 1697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1697);
  } else {

  }
#line 1697
  if (_b___0 != 0) {
#line 1709
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1710
    goto ldv_51785;
  } else {

  }
#line 1712
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1712
  w = (struct drbd_work *)__mptr;
#line 1713
  list_del_init(& w->list);
#line 1714
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1716
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_40583.conn <= 9);
#line 1716
  if (tmp___6 == 0) {
#line 1718
    if ((int )mdev->state.ldv_40583.conn > 9) {
#line 1720
      val.i = 0U;
#line 1720
      val.ldv_40583.conn = 5U;
#line 1720
      mask.i = 0U;
#line 1720
      mask.ldv_40583.conn = 31U;
#line 1720
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_51785: 
#line 1664
  tmp___7 = get_t_state(thi);
#line 1664
  if ((unsigned int )tmp___7 == 1U) {
#line 1665
    goto ldv_51795;
  } else {

  }
  ldv_51786: 
#line 1723
  tmp___8 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1723
  if (tmp___8 == 0) {
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1723);
  } else {

  }
#line 1724
  tmp___9 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 1724
  if (tmp___9 == 0) {
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1724);
  } else {

  }
#line 1726
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1727
  i = 0;
#line 1728
  goto ldv_51802;
  ldv_51801: 
#line 1729
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1730
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1732
  goto ldv_51799;
  ldv_51798: 
#line 1733
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1733
  w = (struct drbd_work *)__mptr___0;
#line 1734
  list_del_init(& w->list);
#line 1735
  (*(w->cb))(mdev, w, 1);
#line 1736
  i = i + 1;
  ldv_51799: 
#line 1732
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1732
  if (tmp___10 == 0) {
#line 1733
    goto ldv_51798;
  } else {

  }
#line 1739
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_51802: 
#line 1728
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1728
  if (tmp___11 == 0) {
#line 1729
    goto ldv_51801;
  } else {

  }
#line 1741
  sema_init(& mdev->data.work.s, 0);
#line 1747
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1749
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1749);
  } else {

  }
#line 1752
  drbd_thread_stop(& mdev->receiver);
#line 1753
  drbd_mdev_cleanup(mdev);
#line 1755
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1757
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1758
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1759
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1761
  return (0);
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 642 "include/linux/list.h"
__inline static void hlist_add_fake(struct hlist_node *n ) 
{ 


  {
#line 644
  n->pprev = & n->next;
#line 645
  return;
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/uapi/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 177 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 136 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 245 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 345 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 360
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 464 "include/linux/module.h"
void ldv___module_get_3(struct module *ldv_func_arg1 ) ;
#line 4 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_module_get(struct module *module ) ;
#line 453 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18986: ;
#line 65
    goto ldv_18986;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_18987: ;
#line 67
    goto ldv_18987;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_18988: ;
#line 68
    goto ldv_18988;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page___0(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 263 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 320
extern long schedule_timeout(long  ) ;
#line 323
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2533 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2535
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2535
  return (tmp);
}
}
#line 2559 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2561
  tmp = test_tsk_thread_flag(p, 2);
#line 2561
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2561
  return ((int )tmp___0);
}
}
#line 17 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 28
extern u32 random32(void) ;
#line 205 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 207
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 209
extern void sock_release(struct socket * ) ;
#line 212
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 520 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 522
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 439 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 441
  disk->part0.nr_sects = size;
#line 442
  return;
}
}
#line 56 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
#line 59
  return (tmp);
}
}
#line 62 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 223 "include/linux/bio.h"
__inline static struct bio *bio_alloc(gfp_t gfp_mask , unsigned int nr_iovecs ) 
{ 
  struct bio *tmp ;

  {
#line 225
  tmp = bio_alloc_bioset(gfp_mask, (int )nr_iovecs, fs_bio_set);
#line 225
  return (tmp);
}
}
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1204
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1210
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1219
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1229
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1231
void tl_clear(struct drbd_conf *mdev ) ;
#line 1233
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1236
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1237
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1240
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1242
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1251
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1253
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1254
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1258
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1260
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1276
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1278
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1287
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1289
void drbd_uuid_move_history(struct drbd_conf *mdev ) ;
#line 1290
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1305
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1308
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1309
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1507
mempool_t *drbd_ee_mempool ;
#line 1522
struct page *drbd_pp_pool ;
#line 1523
spinlock_t drbd_pp_lock ;
#line 1524
int drbd_pp_vacant ;
#line 1559
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1561
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1562
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1563
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1564
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1568
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1629
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1639
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1641
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1645
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1646
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1676 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1678
  val = 1;
#line 1679
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1681
  return;
}
}
#line 1683 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1685
  val = 2;
#line 1686
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1688
  return;
}
}
#line 1690
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1702
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1704
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1728
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1801 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1803
  page = e->pages;
#line 1804
  goto ldv_51290;
  ldv_51289: 
#line 1805
  tmp = page_count(page);
#line 1805
  if (tmp > 1) {
#line 1806
    return (1);
  } else {

  }
#line 1804
  page = page_chain_next(page);
  ldv_51290: ;
#line 1804
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1804
    tmp___0 = page_chain_next(page);
#line 1804
    __builtin_prefetch((void const   *)tmp___0);
#line 1804
    if (1 != 0) {
#line 1805
      goto ldv_51289;
    } else {
#line 1807
      goto ldv_51291;
    }
  } else {

  }
  ldv_51291: ;
#line 1808
  return (0);
}
}
#line 1846 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1850
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1850
  return ((int )tmp);
}
}
#line 1916 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1918
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1921
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1924
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1962
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1966
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1966
  if (tmp___1 != 0UL) {
#line 1966
    __min1 = 2251799813685248UL;
#line 1966
    tmp___0 = drbd_md_first_sector(bdev);
#line 1966
    __min2 = tmp___0;
#line 1966
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1966
    s = 0UL;
  }
#line 1969
  goto ldv_51368;
  case -2: 
#line 1971
  __min1___0 = 2251799813685248UL;
#line 1971
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1971
  __min2___0 = tmp___2;
#line 1971
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1974
  __min1___1 = s;
#line 1974
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1974
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1977
  goto ldv_51368;
  default: 
#line 1979
  __min1___2 = 8587575296UL;
#line 1979
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1979
  __min2___2 = tmp___3;
#line 1979
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51368: ;
#line 1982
  return (s);
}
}
#line 2016 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2019
  tmp = spinlock_check(& q->q_lock);
#line 2019
  flags = _raw_spin_lock_irqsave(tmp);
#line 2020
  list_add(& w->list, & q->q);
#line 2021
  up(& q->s);
#line 2023
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2024
  return;
}
}
#line 2056 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2059
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2059
  return (tmp);
}
}
#line 2062 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2065
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2065
  return (tmp);
}
}
#line 2147 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2149
  atomic_inc(& mdev->unacked_cnt);
#line 2150
  return;
}
}
#line 2163 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2165
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2165
  if (tmp != 0) {
#line 2166
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2167
  return;
}
}
#line 2175 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2179
  atomic_inc(& mdev->net_cnt);
#line 2180
  have_net_conf = (int )mdev->state.ldv_40583.conn > 1;
#line 2181
  if (have_net_conf == 0) {
#line 2182
    put_net_conf(mdev);
  } else {

  }
#line 2183
  return (have_net_conf);
}
}
#line 2441 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2443
  changed = mdev->ed_uuid != val;
#line 2444
  mdev->ed_uuid = val;
#line 2445
  return (changed);
}
}
#line 2448 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2455
  return ((int )a - (int )b);
}
}
#line 2464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2467
  spin_lock(& mdev->peer_seq_lock);
#line 2468
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2468
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2469
  mdev->peer_seq = m;
#line 2470
  spin_unlock(& mdev->peer_seq_lock);
#line 2471
  if (m == new_seq) {
#line 2472
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2473
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("\vdrbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_51644: ;
#line 234
    goto ldv_51644;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_51649: ;
#line 243
    goto ldv_51649;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 260
  tmp = ar_hash_slot(mdev, sector);
#line 260
  slot = tmp;
#line 264
  n = slot->first;
#line 264
  goto ldv_51666;
  ldv_51665: ;
#line 265
  if ((unsigned long )req == (unsigned long )id) {
#line 266
    if (req->sector != sector) {
#line 266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              266);
    } else {

    }
#line 267
    return (req);
  } else {

  }
#line 264
  n = n->next;
  ldv_51666: ;
#line 264
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 264
    __mptr = (struct hlist_node  const  *)n;
#line 264
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 264
    if (1 != 0) {
#line 265
      goto ldv_51665;
    } else {
#line 267
      goto ldv_51667;
    }
  } else {

  }
  ldv_51667: ;
#line 270
  return (0);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 313
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_51734: ;
#line 162
  goto ldv_51734;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 66
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 68
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 69
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 88
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 88
  if (tmp___0 != 0L) {
#line 88
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (88), "i" (12UL));
    ldv_51814: ;
#line 88
    goto ldv_51814;
  } else {

  }
#line 89
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 89
  if (tmp___1 != 0L) {
#line 89
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (89), "i" (12UL));
    ldv_51815: ;
#line 89
    goto ldv_51815;
  } else {

  }
#line 91
  page = *head;
#line 93
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 94
    return (0);
  } else {

  }
#line 96
  goto ldv_51818;
  ldv_51817: 
#line 97
  tmp = page_chain_next(page);
#line 98
  n = n - 1;
#line 98
  if (n == 0) {
#line 99
    goto ldv_51816;
  } else {

  }
#line 100
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 102
    return (0);
  } else {

  }
#line 103
  page = tmp;
  ldv_51818: ;
#line 96
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 97
    goto ldv_51817;
  } else {

  }
  ldv_51816: 
#line 107
  page->ldv_16348.private = 0UL;
#line 109
  page = *head;
#line 110
  *head = tmp;
#line 111
  return (page);
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 120
  i = 1;
#line 121
  goto ldv_51826;
  ldv_51825: 
#line 122
  i = i + 1;
#line 122
  page = tmp;
  ldv_51826: 
#line 121
  tmp = page_chain_next(page);
#line 121
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 122
    goto ldv_51825;
  } else {

  }

#line 123
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 124
    *len = i;
  } else {

  }
#line 125
  return (page);
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 131
  i = 0;
#line 132
  goto ldv_51835;
  ldv_51834: 
#line 133
  put_page(page);
#line 134
  i = i + 1;
#line 132
  page = tmp;
  ldv_51835: ;
#line 132
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 132
    tmp = page_chain_next(page);
#line 132
    if (1 != 0) {
#line 133
      goto ldv_51834;
    } else {
#line 135
      goto ldv_51836;
    }
  } else {

  }
  ldv_51836: ;
#line 136
  return (i);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 144
  tmp = page_chain_tail(chain_first, 0);
#line 145
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 145
  if (tmp___0 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_51843: ;
#line 145
    goto ldv_51843;
  } else {

  }
#line 149
  chain_last->ldv_16348.private = (unsigned long )*head;
#line 150
  *head = chain_first;
#line 151
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 155
  page = 0;
#line 156
  tmp = 0;
#line 157
  i = 0;
#line 161
  if (drbd_pp_vacant >= number) {
#line 162
    spin_lock(& drbd_pp_lock);
#line 163
    page = page_chain_del(& drbd_pp_pool, number);
#line 164
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 165
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 166
    spin_unlock(& drbd_pp_lock);
#line 167
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 168
      return (page);
    } else {

    }
  } else {

  }
#line 174
  i = 0;
#line 174
  goto ldv_51853;
  ldv_51852: 
#line 175
  tmp = alloc_pages(514U, 0U);
#line 176
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 177
    goto ldv_51851;
  } else {

  }
#line 178
  tmp->ldv_16348.private = (unsigned long )page;
#line 179
  page = tmp;
#line 174
  i = i + 1;
  ldv_51853: ;
#line 174
  if (i < number) {
#line 175
    goto ldv_51852;
  } else {

  }
  ldv_51851: ;
#line 182
  if (i == number) {
#line 183
    return (page);
  } else {

  }
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 189
    tmp = page_chain_tail(page, 0);
#line 190
    spin_lock(& drbd_pp_lock);
#line 191
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 192
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 193
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 195
  return (0);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 208
  le = mdev->net_ee.next;
#line 208
  tle = le->next;
#line 208
  goto ldv_51865;
  ldv_51864: 
#line 209
  __mptr = (struct list_head  const  *)le;
#line 209
  e = (struct drbd_epoch_entry *)__mptr;
#line 210
  tmp = drbd_ee_has_active_page___0(e);
#line 210
  if (tmp != 0) {
#line 211
    goto ldv_51863;
  } else {

  }
#line 212
  list_move(le, to_be_freed);
#line 208
  le = tle;
#line 208
  tle = le->next;
  ldv_51865: ;
#line 208
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 209
    goto ldv_51864;
  } else {

  }
  ldv_51863: ;
#line 213
  return;
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 218
  reclaimed.next = & reclaimed;
#line 218
  reclaimed.prev = & reclaimed;
#line 221
  spin_lock_irq(& mdev->req_lock);
#line 222
  reclaim_net_ee(mdev, & reclaimed);
#line 223
  spin_unlock_irq(& mdev->req_lock);
#line 225
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 225
  e = (struct drbd_epoch_entry *)__mptr;
#line 225
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 225
  goto ldv_51879;
  ldv_51878: 
#line 226
  drbd_free_some_ee(mdev, e, 1);
#line 225
  e = t;
#line 225
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51879: ;
#line 225
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 226
    goto ldv_51878;
  } else {

  }

#line 230
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 243
  page = 0;
#line 244
  tmp = get_current();
#line 244
  wait.flags = 0U;
#line 244
  wait.private = (void *)tmp;
#line 244
  wait.func = & autoremove_wake_function;
#line 244
  wait.task_list.next = & wait.task_list;
#line 244
  wait.task_list.prev = & wait.task_list;
#line 248
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 248
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 249
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 251
  goto ldv_51890;
  ldv_51889: 
#line 252
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 254
  drbd_kick_lo_and_reclaim_net(mdev);
#line 256
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 256
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 257
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 258
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 259
      goto ldv_51888;
    } else {

    }
  } else {

  }
#line 262
  if (! retry) {
#line 263
    goto ldv_51888;
  } else {

  }
#line 265
  tmp___2 = get_current();
#line 265
  tmp___3 = signal_pending(tmp___2);
#line 265
  if (tmp___3 != 0) {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 267
    goto ldv_51888;
  } else {

  }
#line 270
  schedule();
  ldv_51890: ;
#line 251
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 252
    goto ldv_51889;
  } else {

  }
  ldv_51888: 
#line 272
  finish_wait(& drbd_pp_wait, & wait);
#line 274
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 275
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 276
  return (page);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 285
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 288
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 289
    return;
  } else {

  }
#line 291
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 292
    i = page_chain_free(page);
  } else {
#line 295
    tmp = page_chain_tail(page, & i);
#line 296
    spin_lock(& drbd_pp_lock);
#line 297
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 298
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 299
    spin_unlock(& drbd_pp_lock);
  }
#line 301
  i = atomic_sub_return(i, a);
#line 302
  if (i < 0) {
#line 303
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 305
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 306
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 330
  page = 0;
#line 331
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 333
  tmp = drbd_insert_fault(mdev, 8U);
#line 333
  if (tmp != 0) {
#line 334
    return (0);
  } else {

  }
#line 336
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 336
  e = (struct drbd_epoch_entry *)tmp___0;
#line 337
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 338
    if ((gfp_mask & 512U) == 0U) {
#line 339
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 340
    return (0);
  } else {

  }
#line 343
  if (data_size != 0U) {
#line 344
    page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 345
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 346
      goto fail;
    } else {

    }
  } else {

  }
#line 349
  INIT_HLIST_NODE(& e->collision);
#line 350
  e->epoch = 0;
#line 351
  e->mdev = mdev;
#line 352
  e->pages = page;
#line 353
  atomic_set(& e->pending_bios, 0);
#line 354
  e->size = data_size;
#line 355
  e->flags = 0UL;
#line 356
  e->sector = sector;
#line 357
  e->ldv_49794.block_id = id;
#line 359
  return (e);
  fail: 
#line 362
  mempool_free((void *)e, drbd_ee_mempool);
#line 363
  return (0);
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 368
  if ((e->flags & 16UL) != 0UL) {
#line 369
    kfree((void const   *)e->ldv_49794.digest);
  } else {

  }
#line 370
  drbd_pp_free(mdev, e->pages, is_net);
#line 371
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 371
  if (tmp != 0) {
#line 371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            371);
  } else {

  }
#line 372
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 372
  if (tmp___0 == 0) {
#line 372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            372);
  } else {

  }
#line 373
  mempool_free((void *)e, drbd_ee_mempool);
#line 374
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 378
  work_list.next = & work_list;
#line 378
  work_list.prev = & work_list;
#line 380
  count = 0;
#line 381
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 383
  spin_lock_irq(& mdev->req_lock);
#line 384
  list_splice_init(list, & work_list);
#line 385
  spin_unlock_irq(& mdev->req_lock);
#line 387
  __mptr = (struct list_head  const  *)work_list.next;
#line 387
  e = (struct drbd_epoch_entry *)__mptr;
#line 387
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 387
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 387
  goto ldv_51931;
  ldv_51930: 
#line 388
  drbd_free_some_ee(mdev, e, is_net);
#line 389
  count = count + 1;
#line 387
  e = t;
#line 387
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 387
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51931: ;
#line 387
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 388
    goto ldv_51930;
  } else {

  }

#line 391
  return (count);
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 406
  work_list.next = & work_list;
#line 406
  work_list.prev = & work_list;
#line 407
  reclaimed.next = & reclaimed;
#line 407
  reclaimed.prev = & reclaimed;
#line 409
  ok = (int )mdev->state.ldv_40583.conn > 8;
#line 411
  spin_lock_irq(& mdev->req_lock);
#line 412
  reclaim_net_ee(mdev, & reclaimed);
#line 413
  list_splice_init(& mdev->done_ee, & work_list);
#line 414
  spin_unlock_irq(& mdev->req_lock);
#line 416
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 416
  e = (struct drbd_epoch_entry *)__mptr;
#line 416
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 416
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 416
  goto ldv_51948;
  ldv_51947: 
#line 417
  drbd_free_some_ee(mdev, e, 1);
#line 416
  e = t;
#line 416
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 416
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51948: ;
#line 416
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 417
    goto ldv_51947;
  } else {

  }
#line 423
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 423
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 423
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 423
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 423
  goto ldv_51957;
  ldv_51956: 
#line 425
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 425
  ok = tmp != 0 && ok != 0;
#line 426
  drbd_free_some_ee(mdev, e, 0);
#line 423
  e = t;
#line 423
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 423
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_51957: ;
#line 423
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 424
    goto ldv_51956;
  } else {

  }
#line 428
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 430
  return (ok);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 435
  tmp = get_current();
#line 435
  wait.flags = 0U;
#line 435
  wait.private = (void *)tmp;
#line 435
  wait.func = & autoremove_wake_function;
#line 435
  wait.task_list.next = & wait.task_list;
#line 435
  wait.task_list.prev = & wait.task_list;
#line 439
  goto ldv_51965;
  ldv_51964: 
#line 440
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 441
  spin_unlock_irq(& mdev->req_lock);
#line 442
  io_schedule();
#line 443
  finish_wait(& mdev->ee_wait, & wait);
#line 444
  spin_lock_irq(& mdev->req_lock);
  ldv_51965: 
#line 439
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 439
  if (tmp___0 == 0) {
#line 440
    goto ldv_51964;
  } else {

  }

#line 444
  return;
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 450
  spin_lock_irq(& mdev->req_lock);
#line 451
  _drbd_wait_ee_list_empty(mdev, head);
#line 452
  spin_unlock_irq(& mdev->req_lock);
#line 453
  return;
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 460
  sk = sock->sk;
#line 461
  err = 0;
#line 463
  *what = "listen";
#line 464
  err = (*((sock->ops)->listen))(sock, 5);
#line 465
  if (err < 0) {
#line 466
    goto out;
  } else {

  }
#line 468
  *what = "sock_create_lite";
#line 469
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 471
  if (err < 0) {
#line 472
    goto out;
  } else {

  }
#line 474
  *what = "accept";
#line 475
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 476
  if (err < 0) {
#line 477
    sock_release(*newsock);
#line 478
    *newsock = 0;
#line 479
    goto out;
  } else {

  }
#line 481
  (*newsock)->ops = sock->ops;
#line 482
  ldv___module_get_3(((*newsock)->ops)->owner);
  out: ;
#line 485
  return (err);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 492
  iov.iov_base = buf;
#line 492
  iov.iov_len = size;
#line 496
  msg.msg_name = 0;
#line 496
  msg.msg_namelen = 0;
#line 496
  msg.msg_iov = (struct iovec *)(& iov);
#line 496
  msg.msg_iovlen = 1UL;
#line 496
  msg.msg_control = 0;
#line 496
  msg.msg_controllen = 0UL;
#line 496
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 503
  tmp = current_thread_info();
#line 503
  oldfs = tmp->addr_limit;
#line 504
  tmp___0 = current_thread_info();
#line 504
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 504
  tmp___0->addr_limit = __constr_expr_0;
#line 505
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 506
  tmp___1 = current_thread_info();
#line 506
  tmp___1->addr_limit = oldfs;
#line 508
  return (rv);
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 514
  iov.iov_base = buf;
#line 514
  iov.iov_len = size;
#line 518
  msg.msg_name = 0;
#line 518
  msg.msg_namelen = 0;
#line 518
  msg.msg_iov = (struct iovec *)(& iov);
#line 518
  msg.msg_iovlen = 1UL;
#line 518
  msg.msg_control = 0;
#line 518
  msg.msg_controllen = 0UL;
#line 518
  msg.msg_flags = 16640U;
#line 525
  tmp = current_thread_info();
#line 525
  oldfs = tmp->addr_limit;
#line 526
  tmp___0 = current_thread_info();
#line 526
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 526
  tmp___0->addr_limit = __constr_expr_0;
  ldv_52003: 
#line 529
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 530
  if ((size_t )rv == size) {
#line 531
    goto ldv_52002;
  } else {

  }
#line 538
  if (rv < 0) {
#line 539
    if (rv == -104) {
#line 540
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 541
    if (rv != -512) {
#line 542
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 543
    goto ldv_52002;
  } else
#line 544
  if (rv == 0) {
#line 545
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 546
    goto ldv_52002;
  } else {
#line 552
    goto ldv_52002;
  }
#line 554
  goto ldv_52003;
  ldv_52002: 
#line 556
  tmp___1 = current_thread_info();
#line 556
  tmp___1->addr_limit = oldfs;
#line 558
  if ((size_t )rv != size) {
#line 559
    val.i = 0U;
#line 559
    val.ldv_40583.conn = 4U;
#line 559
    mask.i = 0U;
#line 559
    mask.ldv_40583.conn = 31U;
#line 559
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 561
  return (rv);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 573
  if (snd != 0U) {
#line 574
    (sock->sk)->sk_sndbuf = (int )snd;
#line 575
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 577
  if (rcv != 0U) {
#line 578
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 579
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 581
  return;
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 589
  disconnect_on_error = 1;
#line 591
  tmp = get_net_conf(mdev);
#line 591
  if (tmp == 0) {
#line 592
    return (0);
  } else {

  }
#line 594
  what = "sock_create_kern";
#line 595
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 597
  if (err < 0) {
#line 598
    sock = 0;
#line 599
    goto out;
  } else {

  }
#line 602
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 602
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 602
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 604
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 614
  __min1 = (mdev->net_conf)->my_addr_len;
#line 614
  __min2 = 28;
#line 614
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 614
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 616
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 617
    src_in6.sin6_port = 0U;
  } else {
#line 619
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 621
  what = "bind before connect";
#line 622
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 625
  if (err < 0) {
#line 626
    goto out;
  } else {

  }
#line 630
  disconnect_on_error = 0;
#line 631
  what = "connect";
#line 632
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 637
  if (err < 0) {
#line 638
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 639
      sock_release(sock);
#line 640
      sock = 0;
    } else {

    }
#line 642
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 649
    disconnect_on_error = 0;
#line 650
    goto ldv_52040;
    default: 
#line 652
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_52040: ;
#line 654
    if (disconnect_on_error != 0) {
#line 655
      val.i = 0U;
#line 655
      val.ldv_40583.conn = 1U;
#line 655
      mask.i = 0U;
#line 655
      mask.ldv_40583.conn = 31U;
#line 655
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 657
  put_net_conf(mdev);
#line 658
  return (sock);
}
}
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 664
  s_estab = 0;
#line 667
  tmp = get_net_conf(mdev);
#line 667
  if (tmp == 0) {
#line 668
    return (0);
  } else {

  }
#line 670
  what = "sock_create_kern";
#line 671
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 673
  if (err != 0) {
#line 674
    s_listen = 0;
#line 675
    goto out;
  } else {

  }
#line 678
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 679
  tmp___0 = random32();
#line 679
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 681
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 682
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 683
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 684
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 687
  what = "bind before listen";
#line 688
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 691
  if (err < 0) {
#line 692
    goto out;
  } else {

  }
#line 694
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 697
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 698
    sock_release(s_listen);
  } else {

  }
#line 699
  if (err < 0) {
#line 700
    if ((err != -11 && err != -4) && err != -512) {
#line 701
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 702
      val.i = 0U;
#line 702
      val.ldv_40583.conn = 1U;
#line 702
      mask.i = 0U;
#line 702
      mask.ldv_40583.conn = 31U;
#line 702
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 705
  put_net_conf(mdev);
#line 707
  return (s_estab);
}
}
#line 710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 713
  h = & mdev->data.sbuf.header.h80;
#line 715
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 715
  return (tmp);
}
}
#line 718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 720
  h = & mdev->data.rbuf.header.h80;
#line 723
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 725
  if (rr == 8 && h->magic == 1728214147U) {
#line 726
    tmp = __fswab16((int )h->command);
#line 726
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 728
  return (65535);
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 741
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 742
    return (0);
  } else {

  }
#line 744
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 746
  if (rr > 0 || rr == -11) {
#line 747
    return (1);
  } else {
#line 749
    sock_release(*sock);
#line 750
    *sock = 0;
#line 751
    return (0);
  }
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state __ns ;

  {
#line 769
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            769);
  } else {

  }
#line 771
  val.i = 0U;
#line 771
  val.ldv_40583.conn = 8U;
#line 771
  mask.i = 0U;
#line 771
  mask.ldv_40583.conn = 31U;
#line 771
  tmp = drbd_request_state(mdev, mask, val);
#line 771
  if (tmp <= 0) {
#line 772
    return (-2);
  } else {

  }
#line 774
  sock = 0;
#line 775
  msock = 0;
  ldv_52100: 
#line 778
  try = 0;
  ldv_52092: 
#line 780
  s = drbd_try_connect(mdev);
#line 781
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 782
    goto ldv_52091;
  } else {
#line 781
    try = try + 1;
#line 781
    if (try > 2) {
#line 782
      goto ldv_52091;
    } else {

    }
  }
#line 784
  schedule_timeout_interruptible(25L);
#line 785
  goto ldv_52092;
  ldv_52091: ;
#line 787
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 788
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 789
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 790
      sock = s;
#line 791
      s = 0;
    } else
#line 792
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 793
      clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 794
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 795
      msock = s;
#line 796
      s = 0;
    } else {
#line 798
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 799
      goto out_release_sockets;
    }
  } else {

  }
#line 803
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 804
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 805
    ok = drbd_socket_okay(mdev, & sock);
#line 806
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 806
    ok = tmp___0 != 0 && ok != 0;
#line 807
    if (ok != 0) {
#line 808
      goto ldv_52094;
    } else {

    }
  } else {

  }
  retry: 
#line 812
  s = drbd_wait_for_connect(mdev);
#line 813
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 814
    tmp___1 = drbd_recv_fp(mdev, s);
#line 814
    try = (int )tmp___1;
#line 815
    drbd_socket_okay(mdev, & sock);
#line 816
    drbd_socket_okay(mdev, & msock);
#line 817
    switch (try) {
    case 65522: ;
#line 819
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 820
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 821
      sock_release(sock);
    } else {

    }
#line 823
    sock = s;
#line 824
    goto ldv_52097;
    case 65521: ;
#line 826
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 827
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 828
      sock_release(msock);
    } else {

    }
#line 830
    msock = s;
#line 831
    set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 832
    goto ldv_52097;
    default: 
#line 834
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 835
    sock_release(s);
#line 836
    tmp___2 = random32();
#line 836
    if ((int )tmp___2 & 1) {
#line 837
      goto retry;
    } else {

    }
    }
    ldv_52097: ;
  } else {

  }
#line 841
  if ((int )mdev->state.ldv_40583.conn <= 1) {
#line 842
    goto out_release_sockets;
  } else {

  }
#line 843
  tmp___5 = get_current();
#line 843
  tmp___6 = signal_pending(tmp___5);
#line 843
  if (tmp___6 != 0) {
#line 844
    tmp___3 = get_current();
#line 844
    flush_signals(tmp___3);
#line 845
    __asm__  volatile   ("": : : "memory");
#line 846
    tmp___4 = get_t_state(& mdev->receiver);
#line 846
    if ((unsigned int )tmp___4 == 2U) {
#line 847
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 850
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 851
    ok = drbd_socket_okay(mdev, & sock);
#line 852
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 852
    ok = tmp___7 != 0 && ok != 0;
#line 853
    if (ok != 0) {
#line 854
      goto ldv_52094;
    } else {

    }
  } else {

  }
#line 856
  goto ldv_52100;
  ldv_52094: 
#line 858
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 859
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 861
  (sock->sk)->sk_allocation = 16U;
#line 862
  (msock->sk)->sk_allocation = 16U;
#line 864
  (sock->sk)->sk_priority = 4U;
#line 865
  (msock->sk)->sk_priority = 6U;
#line 872
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 872
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 872
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 875
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 876
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 880
  drbd_tcp_nodelay(sock);
#line 881
  drbd_tcp_nodelay(msock);
#line 883
  mdev->data.socket = sock;
#line 884
  mdev->meta.socket = msock;
#line 885
  mdev->last_received = jiffies;
#line 887
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 887
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            887);
  } else {

  }
#line 889
  h = drbd_do_handshake(mdev);
#line 890
  if (h <= 0) {
#line 891
    return (h);
  } else {

  }
#line 893
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 895
    tmp___9 = drbd_do_auth(mdev);
#line 895
    switch (tmp___9) {
    case -1: 
#line 897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 898
    return (-1);
    case 0: 
#line 900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 901
    return (0);
    }
  } else {

  }
#line 905
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 906
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 908
  atomic_set(& mdev->packet_seq, 0);
#line 909
  mdev->peer_seq = 0U;
#line 911
  tmp___10 = drbd_send_protocol(mdev);
#line 911
  if (tmp___10 == -1) {
#line 912
    return (-1);
  } else {

  }
#line 913
  set_bit(29U, (unsigned long volatile   *)(& mdev->flags));
#line 914
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 915
  drbd_send_sizes(mdev, 0, 0);
#line 916
  drbd_send_uuids(mdev);
#line 917
  drbd_send_current_state(mdev);
#line 918
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 919
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 921
  spin_lock_irq(& mdev->req_lock);
#line 922
  __ns.i = mdev->state.i;
#line 922
  __ns.ldv_40583.conn = 9U;
#line 922
  rv = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 923
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 144U) {
#line 924
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 925
  spin_unlock_irq(& mdev->req_lock);
#line 927
  if ((int )rv <= 0) {
#line 928
    return (0);
  } else {

  }
#line 930
  drbd_thread_start(& mdev->asender);
#line 931
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 933
  return (1);
  out_release_sockets: ;
#line 936
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 937
    sock_release(sock);
  } else {

  }
#line 938
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 939
    sock_release(msock);
  } else {

  }
#line 940
  return (-1);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 945
  h = & mdev->data.rbuf.header;
#line 948
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 949
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 949
  if (tmp___1 != 0L) {
#line 950
    tmp = get_current();
#line 950
    tmp___0 = signal_pending(tmp);
#line 950
    if (tmp___0 == 0) {
#line 951
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 952
    return (0);
  } else {

  }
#line 955
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 955
  if (tmp___9 != 0L) {
#line 956
    tmp___2 = __fswab16((int )h->h80.command);
#line 956
    *cmd = (enum drbd_packets )tmp___2;
#line 957
    tmp___3 = __fswab16((int )h->h80.length);
#line 957
    *packet_size = (unsigned int )tmp___3;
  } else
#line 958
  if ((unsigned int )h->h95.magic == 23171U) {
#line 959
    tmp___4 = __fswab16((int )h->h95.command);
#line 959
    *cmd = (enum drbd_packets )tmp___4;
#line 960
    tmp___5 = __fswab32(h->h95.length);
#line 960
    *packet_size = tmp___5;
  } else {
#line 962
    tmp___6 = __fswab16((int )h->h80.length);
#line 962
    tmp___7 = __fswab16((int )h->h80.command);
#line 962
    tmp___8 = __fswab32(h->h80.magic);
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 966
    return (0);
  }
#line 968
  mdev->last_received = jiffies;
#line 970
  return (1);
}
}
#line 973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 977
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 977
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 977
    if (tmp != 0) {
#line 978
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 980
      if (rv != 0) {
#line 981
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                  rv);
#line 985
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 987
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 989
  return;
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1003
  rv = FE_STILL_LIVE;
#line 1005
  spin_lock(& mdev->epoch_lock);
  ldv_52135: 
#line 1007
  next_epoch = 0;
#line 1009
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1011
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1013
  atomic_dec(& epoch->active);
#line 1014
  goto ldv_52125;
  case 1U: 
#line 1016
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1017
  goto ldv_52125;
  case 2U: ;
#line 1020
  goto ldv_52125;
  }
  ldv_52125: ;
#line 1023
  if (epoch_size != 0) {
#line 1023
    tmp___2 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1023
    if (tmp___2 == 0) {
#line 1023
      tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1023
      if (tmp___3 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1026
        if (((unsigned int )ev & 32U) == 0U) {
#line 1027
          spin_unlock(& mdev->epoch_lock);
#line 1028
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1029
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1031
        tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1031
        if (tmp___1 != 0) {
#line 1032
          atomic_dec(& mdev->unacked_cnt);
#line 1032
          tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1032
          if (tmp___0 < 0) {
#line 1032
            tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1032
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                    "drbd_may_finish_epoch", 1032, tmp);
          } else {

          }
        } else {

        }
#line 1034
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1035
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1035
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1036
          list_del(& epoch->list);
#line 1037
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1038
          mdev->epochs = mdev->epochs - 1U;
#line 1039
          kfree((void const   *)epoch);
#line 1041
          if ((unsigned int )rv == 0U) {
#line 1042
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1044
          epoch->flags = 0UL;
#line 1045
          atomic_set(& epoch->epoch_size, 0);
#line 1047
          if ((unsigned int )rv == 0U) {
#line 1048
            rv = FE_RECYCLED;
          } else {

          }
#line 1049
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1053
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1054
    goto ldv_52134;
  } else {

  }
#line 1056
  epoch = next_epoch;
#line 1057
  goto ldv_52135;
  ldv_52134: 
#line 1059
  spin_unlock(& mdev->epoch_lock);
#line 1061
  return (rv);
}
}
#line 1069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1072
  write_ordering_str[0] = (char *)"none";
#line 1072
  write_ordering_str[1] = (char *)"drain";
#line 1072
  write_ordering_str[2] = (char *)"flush";
#line 1078
  pwo = mdev->write_ordering;
#line 1079
  _min1 = pwo;
#line 1079
  _min2 = wo;
#line 1079
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1080
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 444UL) != 0U) {
#line 1081
    wo = WO_drain_io;
  } else {

  }
#line 1082
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 452UL) != 0U) {
#line 1083
    wo = WO_none;
  } else {

  }
#line 1084
  mdev->write_ordering = wo;
#line 1085
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1086
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1087
  return;
}
}
#line 1106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1109
  bios = 0;
#line 1111
  page = e->pages;
#line 1112
  sector = e->sector;
#line 1113
  ds = e->size;
#line 1114
  n_bios = 0U;
#line 1115
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1116
  err = -12;
  next_bio: 
#line 1127
  bio = bio_alloc(16U, nr_pages);
#line 1128
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1129
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1130
    goto fail;
  } else {

  }
#line 1133
  bio->bi_sector = sector;
#line 1134
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1135
  bio->bi_rw = (unsigned long )rw;
#line 1136
  bio->bi_private = (void *)e;
#line 1137
  bio->bi_end_io = & drbd_endio_sec;
#line 1139
  bio->bi_next = bios;
#line 1140
  bios = bio;
#line 1141
  n_bios = n_bios + 1U;
#line 1143
  goto ldv_52167;
  ldv_52166: 
#line 1144
  __min1 = ds;
#line 1144
  __min2 = 4096U;
#line 1144
  len = __min1 < __min2 ? __min1 : __min2;
#line 1145
  tmp = bio_add_page(bio, page, len, 0U);
#line 1145
  if (tmp == 0) {
#line 1149
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1150
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1154
      err = -28;
#line 1155
      goto fail;
    } else {

    }
#line 1157
    goto next_bio;
  } else {

  }
#line 1159
  ds = ds - len;
#line 1160
  sector = (sector_t )(len >> 9) + sector;
#line 1161
  nr_pages = nr_pages - 1U;
#line 1143
  page = page_chain_next(page);
  ldv_52167: ;
#line 1143
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1143
    tmp___0 = page_chain_next(page);
#line 1143
    __builtin_prefetch((void const   *)tmp___0);
#line 1143
    if (1 != 0) {
#line 1144
      goto ldv_52166;
    } else {
#line 1146
      goto ldv_52168;
    }
  } else {

  }
  ldv_52168: ;
#line 1163
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1163);
  } else {

  }
#line 1164
  if (ds != 0U) {
#line 1164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1164);
  } else {

  }
#line 1166
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_52169: 
#line 1168
  bio = bios;
#line 1169
  bios = bios->bi_next;
#line 1170
  bio->bi_next = 0;
#line 1172
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1173
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1174
    goto ldv_52169;
  } else {

  }

#line 1174
  return (0);
  fail: ;
#line 1177
  goto ldv_52172;
  ldv_52171: 
#line 1178
  bio = bios;
#line 1179
  bios = bios->bi_next;
#line 1180
  bio_put(bio);
  ldv_52172: ;
#line 1177
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1178
    goto ldv_52171;
  } else {

  }

#line 1182
  return (err);
}
}
#line 1185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1188
  p = & mdev->data.rbuf.barrier;
#line 1191
  inc_unacked(mdev);
#line 1193
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1194
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1194
  rv = (int )tmp;
#line 1201
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1203
  if (rv == 2) {
#line 1204
    return (1);
  } else {

  }
#line 1208
  tmp___0 = kmalloc(40UL, 16U);
#line 1208
  epoch = (struct drbd_epoch *)tmp___0;
#line 1209
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1210
    goto ldv_52183;
  } else {
#line 1212
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1217
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1218
  drbd_flush(mdev);
#line 1220
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1220
  if (tmp___2 != 0) {
#line 1221
    tmp___1 = kmalloc(40UL, 16U);
#line 1221
    epoch = (struct drbd_epoch *)tmp___1;
#line 1222
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1223
      goto ldv_52183;
    } else {

    }
  } else {

  }
#line 1226
  epoch = mdev->current_epoch;
#line 1227
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1227
  if (tmp___3 == 0) {
#line 1227
    goto ldv_52186;
  } else {

  }
#line 1227
  tmp___4 = get_current();
#line 1227
  __wait.flags = 0U;
#line 1227
  __wait.private = (void *)tmp___4;
#line 1227
  __wait.func = & autoremove_wake_function;
#line 1227
  __wait.task_list.next = & __wait.task_list;
#line 1227
  __wait.task_list.prev = & __wait.task_list;
  ldv_52189: 
#line 1227
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1227
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1227
  if (tmp___5 == 0) {
#line 1227
    goto ldv_52188;
  } else {

  }
#line 1227
  schedule();
#line 1227
  goto ldv_52189;
  ldv_52188: 
#line 1227
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_52186: 
#line 1229
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1229
  if (tmp___6 != 0) {
#line 1229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1229);
  } else {

  }
#line 1230
  if (epoch->flags != 0UL) {
#line 1230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1230);
  } else {

  }
#line 1232
  return (1);
  default: 
#line 1234
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1235
  return (0);
  }
  ldv_52183: 
#line 1238
  epoch->flags = 0UL;
#line 1239
  atomic_set(& epoch->epoch_size, 0);
#line 1240
  atomic_set(& epoch->active, 0);
#line 1242
  spin_lock(& mdev->epoch_lock);
#line 1243
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1243
  if (tmp___7 != 0) {
#line 1244
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1245
    mdev->current_epoch = epoch;
#line 1246
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1249
    kfree((void const   *)epoch);
  }
#line 1251
  spin_unlock(& mdev->epoch_lock);
#line 1253
  return (1);
}
}
#line 1259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1261
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1261
  capacity = tmp;
#line 1265
  dig_in = mdev->int_dig_in;
#line 1266
  dig_vv = mdev->int_dig_vv;
#line 1269
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1269
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1269
    dgs = (int )tmp___0;
  } else {
#line 1269
    dgs = 0;
  }
#line 1272
  if (dgs != 0) {
#line 1273
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1274
    if (rr != dgs) {
#line 1275
      tmp___1 = get_current();
#line 1275
      tmp___2 = signal_pending(tmp___1);
#line 1275
      if (tmp___2 == 0) {
#line 1276
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1279
      return (0);
    } else {

    }
  } else {

  }
#line 1283
  data_size = data_size - dgs;
#line 1285
  _b = (data_size & 511) != 0;
#line 1285
  if (_b != 0) {
#line 1285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1285);
  } else {

  }
#line 1285
  if (_b != 0) {
#line 1285
    return (0);
  } else {

  }
#line 1286
  _b___0 = (unsigned int )data_size > 131072U;
#line 1286
  if (_b___0 != 0) {
#line 1286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1286);
  } else {

  }
#line 1286
  if (_b___0 != 0) {
#line 1286
    return (0);
  } else {

  }
#line 1290
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1291
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1295
    return (0);
  } else {

  }
#line 1301
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1302
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1303
    return (0);
  } else {

  }
#line 1305
  if (data_size == 0) {
#line 1306
    return (e);
  } else {

  }
#line 1308
  ds = data_size;
#line 1309
  page = e->pages;
#line 1310
  goto ldv_52217;
  ldv_52216: 
#line 1311
  __min1 = ds;
#line 1311
  __min2 = 4096;
#line 1311
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1312
  tmp___3 = kmap(page);
#line 1312
  data = (unsigned long *)tmp___3;
#line 1313
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1314
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1314
  if (tmp___4 != 0) {
#line 1315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1316
    *data = ~ *data;
  } else {

  }
#line 1318
  kunmap(page);
#line 1319
  if ((unsigned int )rr != len) {
#line 1320
    drbd_free_some_ee(mdev, e, 0);
#line 1321
    tmp___5 = get_current();
#line 1321
    tmp___6 = signal_pending(tmp___5);
#line 1321
    if (tmp___6 == 0) {
#line 1322
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1324
    return (0);
  } else {

  }
#line 1326
  ds = ds - rr;
#line 1310
  page = page_chain_next(page);
  ldv_52217: ;
#line 1310
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1310
    tmp___7 = page_chain_next(page);
#line 1310
    __builtin_prefetch((void const   *)tmp___7);
#line 1310
    if (1 != 0) {
#line 1311
      goto ldv_52216;
    } else {
#line 1313
      goto ldv_52218;
    }
  } else {

  }
  ldv_52218: ;
#line 1329
  if (dgs != 0) {
#line 1330
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1331
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1331
    if (tmp___8 != 0) {
#line 1332
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1334
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1336
      drbd_free_some_ee(mdev, e, 0);
#line 1337
      return (0);
    } else {

    }
  } else {

  }
#line 1340
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1341
  return (e);
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1350
  rv = 1;
#line 1353
  if (data_size == 0) {
#line 1354
    return (1);
  } else {

  }
#line 1356
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1358
  data = kmap(page);
#line 1359
  goto ldv_52238;
  ldv_52237: 
#line 1360
  __min1 = data_size;
#line 1360
  __min2 = 4096;
#line 1360
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1361
  __min1___1 = data_size;
#line 1361
  __min2___1 = 4096;
#line 1361
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1362
    rv = 0;
#line 1363
    tmp = get_current();
#line 1363
    tmp___0 = signal_pending(tmp);
#line 1363
    if (tmp___0 == 0) {
#line 1366
      __min1___0 = data_size;
#line 1366
      __min2___0 = 4096;
#line 1366
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1367
    goto ldv_52236;
  } else {

  }
#line 1369
  data_size = data_size - rr;
  ldv_52238: ;
#line 1359
  if (data_size != 0) {
#line 1360
    goto ldv_52237;
  } else {

  }
  ldv_52236: 
#line 1371
  kunmap(page);
#line 1372
  drbd_pp_free(mdev, page, 0);
#line 1373
  return (rv);
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1382
  dig_in = mdev->int_dig_in;
#line 1383
  dig_vv = mdev->int_dig_vv;
#line 1385
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1385
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1385
    dgs = (int )tmp;
  } else {
#line 1385
    dgs = 0;
  }
#line 1388
  if (dgs != 0) {
#line 1389
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1390
    if (rr != dgs) {
#line 1391
      tmp___0 = get_current();
#line 1391
      tmp___1 = signal_pending(tmp___0);
#line 1391
      if (tmp___1 == 0) {
#line 1392
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1395
      return (0);
    } else {

    }
  } else {

  }
#line 1399
  data_size = data_size - dgs;
#line 1403
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1405
  bio = req->master_bio;
#line 1406
  if (bio->bi_sector != sector) {
#line 1406
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1406);
  } else {

  }
#line 1408
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1408
  i = (int )bio->bi_idx;
#line 1408
  goto ldv_52257;
  ldv_52256: 
#line 1409
  __min1 = data_size;
#line 1409
  __min2 = (int )bvec->bv_len;
#line 1409
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1410
  tmp___2 = kmap(bvec->bv_page);
#line 1410
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1413
  kunmap(bvec->bv_page);
#line 1414
  if (rr != expect) {
#line 1415
    tmp___3 = get_current();
#line 1415
    tmp___4 = signal_pending(tmp___3);
#line 1415
    if (tmp___4 == 0) {
#line 1416
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1419
    return (0);
  } else {

  }
#line 1421
  data_size = data_size - rr;
#line 1408
  bvec = bvec + 1;
#line 1408
  i = i + 1;
  ldv_52257: ;
#line 1408
  if ((int )bio->bi_vcnt > i) {
#line 1409
    goto ldv_52256;
  } else {

  }

#line 1424
  if (dgs != 0) {
#line 1425
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1426
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1426
    if (tmp___5 != 0) {
#line 1427
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1428
      return (0);
    } else {

    }
  } else {

  }
#line 1432
  if (data_size != 0) {
#line 1432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1432);
  } else {

  }
#line 1433
  return (1);
}
}
#line 1438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1440
  e = (struct drbd_epoch_entry *)w;
#line 1441
  sector = e->sector;
#line 1444
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1444
  if (tmp == 0) {
#line 1444
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1444);
  } else {

  }
#line 1446
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1446
  if (tmp___0 != 0L) {
#line 1447
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1447U);
#line 1448
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1451
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1453
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1455
  atomic_dec(& mdev->unacked_cnt);
#line 1455
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1455
  if (tmp___2 < 0) {
#line 1455
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1455
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1455, tmp___1);
  } else {

  }
#line 1457
  return (ok);
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1464
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1465
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1466
    goto fail;
  } else {

  }
#line 1468
  atomic_dec(& mdev->rs_pending_cnt);
#line 1468
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1468
  if (tmp___0 < 0) {
#line 1468
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1468, tmp);
  } else {

  }
#line 1470
  inc_unacked(mdev);
#line 1474
  e->w.cb = & e_end_resync_block;
#line 1476
  spin_lock_irq(& mdev->req_lock);
#line 1477
  list_add(& e->w.list, & mdev->sync_ee);
#line 1478
  spin_unlock_irq(& mdev->req_lock);
#line 1480
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1481
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1481
  if (tmp___1 == 0) {
#line 1482
    return (1);
  } else {

  }
#line 1485
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1486
  spin_lock_irq(& mdev->req_lock);
#line 1487
  list_del(& e->w.list);
#line 1488
  spin_unlock_irq(& mdev->req_lock);
#line 1490
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1492
  put_ldev(mdev);
#line 1493
  return (0);
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1501
  p = & mdev->data.rbuf.data;
#line 1503
  tmp = __fswab64(p->sector);
#line 1503
  sector = (sector_t )tmp;
#line 1505
  spin_lock_irq(& mdev->req_lock);
#line 1506
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1507
  spin_unlock_irq(& mdev->req_lock);
#line 1508
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1508
  if (tmp___0 != 0L) {
#line 1509
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1510
    return (0);
  } else {

  }
#line 1516
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1518
  if (ok != 0) {
#line 1519
    req_mod(req, data_received);
  } else {

  }
#line 1524
  return (ok);
}
}
#line 1527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1531
  p = & mdev->data.rbuf.data;
#line 1533
  tmp = __fswab64(p->sector);
#line 1533
  sector = (sector_t )tmp;
#line 1534
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1534
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1534);
  } else {

  }
#line 1536
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1536
  if (tmp___1 != 0) {
#line 1540
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1542
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1542
    if (tmp___0 != 0) {
#line 1543
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1545
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1547
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1550
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1552
  return (ok);
}
}
#line 1558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1560
  e = (struct drbd_epoch_entry *)w;
#line 1561
  sector = e->sector;
#line 1562
  ok = 1;
#line 1564
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1565
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1565
    if (tmp___0 != 0L) {
#line 1566
      pcmd = ((int )mdev->state.ldv_40583.conn > 15 && (int )mdev->state.ldv_40583.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1570
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1570
      ok = tmp & ok;
#line 1571
      if (pcmd == 23) {
#line 1572
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1572U);
      } else {

      }
    } else {
#line 1574
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1578
    atomic_dec(& mdev->unacked_cnt);
#line 1578
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1578
    if (tmp___2 < 0) {
#line 1578
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1578
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1578, tmp___1);
    } else {

    }
  } else {

  }
#line 1582
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1583
    spin_lock_irq(& mdev->req_lock);
#line 1584
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1584
    if (tmp___3 != 0) {
#line 1584
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1584);
    } else {

    }
#line 1585
    hlist_del_init(& e->collision);
#line 1586
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1588
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1588
    if (tmp___4 == 0) {
#line 1588
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1588);
    } else {

    }
  }
#line 1591
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1593
  return (ok);
}
}
#line 1596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1598
  e = (struct drbd_epoch_entry *)w;
#line 1599
  ok = 1;
#line 1601
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1601
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1601);
  } else {

  }
#line 1602
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1604
  spin_lock_irq(& mdev->req_lock);
#line 1605
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1605
  if (tmp != 0) {
#line 1605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1605);
  } else {

  }
#line 1606
  hlist_del_init(& e->collision);
#line 1607
  spin_unlock_irq(& mdev->req_lock);
#line 1609
  atomic_dec(& mdev->unacked_cnt);
#line 1609
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1609
  if (tmp___1 < 0) {
#line 1609
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1609, tmp___0);
  } else {

  }
#line 1611
  return (ok);
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_epoch_entry *data_e ) 
{ 
  struct drbd_epoch_entry *rs_e ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1618
  rv = 0;
#line 1620
  spin_lock_irq(& mdev->req_lock);
#line 1621
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1621
  rs_e = (struct drbd_epoch_entry *)__mptr;
#line 1621
  goto ldv_52336;
  ldv_52335: 
#line 1622
  tmp = overlaps(data_e->sector, (int )data_e->size, rs_e->sector, (int )rs_e->size);
#line 1622
  if (tmp != 0) {
#line 1623
    rv = 1;
#line 1624
    goto ldv_52334;
  } else {

  }
#line 1621
  __mptr___0 = (struct list_head  const  *)rs_e->w.list.next;
#line 1621
  rs_e = (struct drbd_epoch_entry *)__mptr___0;
  ldv_52336: ;
#line 1621
  if ((unsigned long )(& rs_e->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1622
    goto ldv_52335;
  } else {

  }
  ldv_52334: 
#line 1627
  spin_unlock_irq(& mdev->req_lock);
#line 1629
  return (rv);
}
}
#line 1653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1655
  tmp = get_current();
#line 1655
  wait.flags = 0U;
#line 1655
  wait.private = (void *)tmp;
#line 1655
  wait.func = & autoremove_wake_function;
#line 1655
  wait.task_list.next = & wait.task_list;
#line 1655
  wait.task_list.prev = & wait.task_list;
#line 1658
  ret = 0;
#line 1659
  spin_lock(& mdev->peer_seq_lock);
  ldv_52346: 
#line 1661
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1662
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1662
  if (tmp___0 <= 0) {
#line 1663
    goto ldv_52345;
  } else {

  }
#line 1664
  tmp___1 = get_current();
#line 1664
  tmp___2 = signal_pending(tmp___1);
#line 1664
  if (tmp___2 != 0) {
#line 1665
    ret = -512;
#line 1666
    goto ldv_52345;
  } else {

  }
#line 1668
  p_seq = mdev->peer_seq;
#line 1669
  spin_unlock(& mdev->peer_seq_lock);
#line 1670
  timeout = schedule_timeout(7500L);
#line 1671
  spin_lock(& mdev->peer_seq_lock);
#line 1672
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1673
    ret = -110;
#line 1674
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1675
    goto ldv_52345;
  } else {

  }
#line 1677
  goto ldv_52346;
  ldv_52345: 
#line 1678
  finish_wait(& mdev->seq_wait, & wait);
#line 1679
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1680
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1681
  spin_unlock(& mdev->peer_seq_lock);
#line 1682
  return (ret);
}
}
#line 1688 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1690
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 2048 : 0)) | ((dpf & 32U) != 0U ? 4096 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  bool tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  bool tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 1701
  p = & mdev->data.rbuf.data;
#line 1702
  rw = 1;
#line 1705
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1705
  if (tmp___1 == 0) {
#line 1706
    spin_lock(& mdev->peer_seq_lock);
#line 1707
    tmp = __fswab32(p->seq_num);
#line 1707
    if (mdev->peer_seq + 1U == tmp) {
#line 1708
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1709
    spin_unlock(& mdev->peer_seq_lock);
#line 1711
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1712
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1713
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1713
    return (tmp___0);
  } else {

  }
#line 1721
  tmp___2 = __fswab64(p->sector);
#line 1721
  sector = (sector_t )tmp___2;
#line 1722
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1723
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1724
    put_ldev(mdev);
#line 1725
    return (0);
  } else {

  }
#line 1728
  e->w.cb = & e_end_block;
#line 1730
  tmp___3 = __fswab32(p->dp_flags);
#line 1730
  dp_flags = tmp___3;
#line 1731
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1731
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1732
  if ((unsigned long )e->pages == (unsigned long )((struct page *)0)) {
#line 1733
    if (e->size != 0U) {
#line 1733
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1733);
    } else {

    }
#line 1734
    if ((dp_flags & 32U) == 0U) {
#line 1734
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( dp_flags & DP_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1734);
    } else {

    }
  } else {

  }
#line 1737
  if ((dp_flags & 4U) != 0U) {
#line 1738
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1740
  spin_lock(& mdev->epoch_lock);
#line 1741
  e->epoch = mdev->current_epoch;
#line 1742
  atomic_inc(& (e->epoch)->epoch_size);
#line 1743
  atomic_inc(& (e->epoch)->active);
#line 1744
  spin_unlock(& mdev->epoch_lock);
#line 1747
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1748
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1752
    size = (int const   )e->size;
#line 1753
    tmp___5 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 1753
    discard = tmp___5;
#line 1754
    tmp___6 = get_current();
#line 1754
    wait.flags = 0U;
#line 1754
    wait.private = (void *)tmp___6;
#line 1754
    wait.func = & autoremove_wake_function;
#line 1754
    wait.task_list.next = & wait.task_list;
#line 1754
    wait.task_list.prev = & wait.task_list;
#line 1760
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1760
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1760);
    } else {

    }
#line 1761
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1761
    if (tmp___7 != 0L) {
#line 1761
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1761), "i" (12UL));
      ldv_52368: ;
#line 1761
      goto ldv_52368;
    } else {

    }
#line 1762
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1762
    if (tmp___8 != 0L) {
#line 1762
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1762), "i" (12UL));
      ldv_52369: ;
#line 1762
      goto ldv_52369;
    } else {

    }
#line 1798
    tmp___9 = __fswab32(p->seq_num);
#line 1798
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1798
    if (tmp___10 != 0) {
#line 1799
      goto out_interrupted;
    } else {

    }
#line 1801
    spin_lock_irq(& mdev->req_lock);
#line 1803
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1803
    hlist_add_head(& e->collision, tmp___11);
#line 1806
    slot = tl_hash_slot(mdev, sector);
#line 1807
    first = 1;
    ldv_52380: 
#line 1809
    have_unacked = 0;
#line 1810
    have_conflict = 0;
#line 1811
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1813
    n = slot->first;
#line 1813
    goto ldv_52377;
    ldv_52376: 
#line 1814
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1814
    if (tmp___14 != 0) {
#line 1817
      if (first != 0) {
#line 1818
        tmp___12 = get_current();
#line 1818
        tmp___13 = get_current();
#line 1818
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1823
      if ((i->rq_state & 16UL) != 0UL) {
#line 1824
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1825
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1813
    n = n->next;
    ldv_52377: ;
#line 1813
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1813
      __mptr = (struct hlist_node  const  *)n;
#line 1813
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1813
      if (1 != 0) {
#line 1814
        goto ldv_52376;
      } else {
#line 1816
        goto ldv_52378;
      }
    } else {

    }
    ldv_52378: ;
#line 1829
    if (have_conflict == 0) {
#line 1830
      goto ldv_52379;
    } else {

    }
#line 1833
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1834
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1836
      inc_unacked(mdev);
#line 1837
      e->w.cb = & e_send_discard_ack;
#line 1838
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1840
      spin_unlock_irq(& mdev->req_lock);
#line 1845
      put_ldev(mdev);
#line 1846
      wake_asender(mdev);
#line 1847
      finish_wait(& mdev->misc_wait, & wait);
#line 1848
      return (1);
    } else {

    }
#line 1851
    tmp___15 = get_current();
#line 1851
    tmp___16 = signal_pending(tmp___15);
#line 1851
    if (tmp___16 != 0) {
#line 1852
      hlist_del_init(& e->collision);
#line 1854
      spin_unlock_irq(& mdev->req_lock);
#line 1856
      finish_wait(& mdev->misc_wait, & wait);
#line 1857
      goto out_interrupted;
    } else {

    }
#line 1860
    spin_unlock_irq(& mdev->req_lock);
#line 1861
    if (first != 0) {
#line 1862
      first = 0;
#line 1863
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1865
    if (discard != 0) {
#line 1868
      if (have_unacked != 0) {
#line 1868
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1868);
      } else {

      }
    } else {

    }
#line 1870
    schedule();
#line 1871
    spin_lock_irq(& mdev->req_lock);
#line 1872
    goto ldv_52380;
    ldv_52379: 
#line 1873
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1876
  list_add(& e->w.list, & mdev->active_ee);
#line 1877
  spin_unlock_irq(& mdev->req_lock);
#line 1879
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) {
#line 1880
    tmp___17 = overlapping_resync_write(mdev, e);
#line 1880
    if (tmp___17) {
#line 1880
      tmp___18 = 0;
    } else {
#line 1880
      tmp___18 = 1;
    }
#line 1880
    if (tmp___18) {
#line 1880
      goto ldv_52381;
    } else {

    }
#line 1880
    tmp___19 = get_current();
#line 1880
    __wait.flags = 0U;
#line 1880
    __wait.private = (void *)tmp___19;
#line 1880
    __wait.func = & autoremove_wake_function;
#line 1880
    __wait.task_list.next = & __wait.task_list;
#line 1880
    __wait.task_list.prev = & __wait.task_list;
    ldv_52384: 
#line 1880
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1880
    tmp___20 = overlapping_resync_write(mdev, e);
#line 1880
    if (tmp___20) {
#line 1880
      tmp___21 = 0;
    } else {
#line 1880
      tmp___21 = 1;
    }
#line 1880
    if (tmp___21) {
#line 1880
      goto ldv_52383;
    } else {

    }
#line 1880
    schedule();
#line 1880
    goto ldv_52384;
    ldv_52383: 
#line 1880
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_52381: ;
  } else {

  }
#line 1882
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1884
  inc_unacked(mdev);
#line 1887
  goto ldv_52386;
  case 2: 
#line 1891
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1892
  goto ldv_52386;
  case 1: ;
#line 1895
  goto ldv_52386;
  }
  ldv_52386: ;
#line 1898
  if ((int )mdev->state.ldv_40583.pdsk <= 3) {
#line 1900
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1900U);
#line 1901
    e->flags = e->flags | 1UL;
#line 1902
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1903
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1906
  tmp___22 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1906
  if (tmp___22 == 0) {
#line 1907
    return (1);
  } else {

  }
#line 1910
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1911
  spin_lock_irq(& mdev->req_lock);
#line 1912
  list_del(& e->w.list);
#line 1913
  hlist_del_init(& e->collision);
#line 1914
  spin_unlock_irq(& mdev->req_lock);
#line 1915
  if ((int )e->flags & 1) {
#line 1916
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1919
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1920
  put_ldev(mdev);
#line 1921
  drbd_free_some_ee(mdev, e, 0);
#line 1922
  return (0);
}
}
#line 1936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1938
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1942
  throttle = 0;
#line 1945
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1946
    return (0);
  } else {

  }
#line 1948
  spin_lock_irq(& mdev->al_lock);
#line 1949
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1950
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1951
    __mptr = (struct lc_element  const  *)tmp;
#line 1951
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1952
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1952
    if (tmp___0 != 0) {
#line 1953
      spin_unlock_irq(& mdev->al_lock);
#line 1954
      return (0);
    } else {

    }
  } else {

  }
#line 1958
  spin_unlock_irq(& mdev->al_lock);
#line 1960
  res = 0UL;
#line 1960
  _cpu = 4294967295U;
#line 1960
  goto ldv_52410;
  ldv_52409: 
#line 1960
  __vpp_verify = 0;
#line 1960
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1960
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_52410: 
#line 1960
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1960
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1961
    goto ldv_52409;
  } else {

  }
#line 1961
  res___0 = 0UL;
#line 1961
  _cpu___0 = 4294967295U;
#line 1961
  goto ldv_52420;
  ldv_52419: 
#line 1961
  __vpp_verify___0 = 0;
#line 1961
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1961
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_52420: 
#line 1961
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1961
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1962
    goto ldv_52419;
  } else {

  }
#line 1961
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1961
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 1964
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1968
    mdev->rs_last_events = curr_events;
#line 1972
    i = (mdev->rs_last_mark + 7) % 8;
#line 1974
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 1975
      rs_left = mdev->ov_left;
    } else {
#line 1977
      tmp___2 = drbd_bm_total_weight(mdev);
#line 1977
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 1979
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1980
    if (dt == 0UL) {
#line 1981
      dt = dt + 1UL;
    } else {

    }
#line 1982
    db = mdev->rs_mark_left[i] - rs_left;
#line 1983
    dbdt = db / dt << 2;
#line 1985
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1986
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1988
  return (throttle);
}
}
#line 1992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 1995
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1995
  capacity = tmp;
#line 1997
  di = 0;
#line 2000
  p = & mdev->data.rbuf.block_req;
#line 2002
  tmp___0 = __fswab64(p->sector);
#line 2002
  sector = (sector_t )tmp___0;
#line 2003
  tmp___1 = __fswab32(p->blksize);
#line 2003
  size = (int )tmp___1;
#line 2005
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2006
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2006, (unsigned long long )sector, size);
#line 2008
    return (0);
  } else {

  }
#line 2010
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2011
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2011, (unsigned long long )sector, size);
#line 2013
    return (0);
  } else {

  }
#line 2016
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2016
  if (tmp___7 == 0) {
#line 2017
    verb = 1;
#line 2018
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2020
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2021
    goto ldv_52439;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2025
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2026
    goto ldv_52439;
    case 31U: 
#line 2028
    verb = 0;
#line 2029
    atomic_dec(& mdev->rs_pending_cnt);
#line 2029
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2029
    if (tmp___3 < 0) {
#line 2029
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2029
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2029, tmp___2);
    } else {

    }
#line 2030
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2031
    goto ldv_52439;
    default: 
#line 2033
    tmp___4 = cmdname(cmd);
#line 2033
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_52439: ;
#line 2036
    if (verb != 0) {
#line 2036
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2036
      if (tmp___5 != 0) {
#line 2037
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2041
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2041
    return (tmp___6);
  } else {

  }
#line 2047
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2048
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2049
    put_ldev(mdev);
#line 2050
    return (0);
  } else {

  }
#line 2053
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2055
  e->w.cb = & w_e_end_data_req;
#line 2056
  fault_type = 5U;
#line 2058
  goto submit;
  case 9U: 
#line 2061
  e->w.cb = & w_e_end_rsdata_req;
#line 2062
  fault_type = 3U;
#line 2064
  mdev->bm_resync_fo = sector >> 3;
#line 2065
  goto ldv_52452;
  case 31U: ;
  case 33U: 
#line 2069
  fault_type = 3U;
#line 2070
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2070
  di = (struct digest_info *)tmp___8;
#line 2071
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2072
    goto out_free_e;
  } else {

  }
#line 2074
  di->digest_size = (int )digest_size;
#line 2075
  di->digest = (void *)di + 16U;
#line 2077
  e->ldv_49794.digest = di;
#line 2078
  e->flags = e->flags | 16UL;
#line 2080
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2080
  if ((unsigned int )tmp___9 != digest_size) {
#line 2081
    goto out_free_e;
  } else {

  }
#line 2083
  if ((unsigned int )cmd == 33U) {
#line 2084
    if (mdev->agreed_pro_version <= 88) {
#line 2084
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2084);
    } else {

    }
#line 2085
    e->w.cb = & w_e_end_csum_rs_req;
#line 2087
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2088
  if ((unsigned int )cmd == 31U) {
#line 2090
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2091
    e->w.cb = & w_e_end_ov_reply;
#line 2092
    atomic_dec(& mdev->rs_pending_cnt);
#line 2092
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2092
    if (tmp___11 < 0) {
#line 2092
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2092
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2092, tmp___10);
    } else {

    }
#line 2095
    goto submit_for_resync;
  } else {

  }
#line 2097
  goto ldv_52452;
  case 30U: ;
#line 2100
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2102
    now = jiffies;
#line 2104
    mdev->ov_start_sector = sector;
#line 2105
    mdev->ov_position = sector;
#line 2106
    tmp___12 = drbd_bm_bits(mdev);
#line 2106
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2107
    mdev->rs_total = mdev->ov_left;
#line 2108
    i = 0;
#line 2108
    goto ldv_52464;
    ldv_52463: 
#line 2109
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2110
    mdev->rs_mark_time[i] = now;
#line 2108
    i = i + 1;
    ldv_52464: ;
#line 2108
    if (i <= 7) {
#line 2109
      goto ldv_52463;
    } else {

    }
#line 2112
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2115
  e->w.cb = & w_e_end_ov_req;
#line 2116
  fault_type = 3U;
#line 2117
  goto ldv_52452;
  default: 
#line 2120
  tmp___13 = cmdname(cmd);
#line 2120
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2122
  fault_type = 10U;
#line 2123
  goto out_free_e;
  }
  ldv_52452: ;
#line 2148
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2148
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2148
    if (tmp___14 != 0) {
#line 2149
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2150
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2150
  if (tmp___15 != 0) {
#line 2151
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2154
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2157
  inc_unacked(mdev);
#line 2158
  spin_lock_irq(& mdev->req_lock);
#line 2159
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2160
  spin_unlock_irq(& mdev->req_lock);
#line 2162
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2162
  if (tmp___16 == 0) {
#line 2163
    return (1);
  } else {

  }
#line 2166
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2167
  spin_lock_irq(& mdev->req_lock);
#line 2168
  list_del(& e->w.list);
#line 2169
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2173
  put_ldev(mdev);
#line 2174
  drbd_free_some_ee(mdev, e, 0);
#line 2175
  return (0);
}
}
#line 2178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2180
  rv = -100;
#line 2183
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2184
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2186
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2187
  ch_self = mdev->comm_bm_set;
#line 2189
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2193
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2194
  goto ldv_52478;
  case 0: ;
#line 2196
  goto ldv_52478;
  case 1: ;
#line 2198
  if (self == 0 && peer == 1) {
#line 2199
    rv = -1;
#line 2200
    goto ldv_52478;
  } else {

  }
#line 2202
  if (self == 1 && peer == 0) {
#line 2203
    rv = 1;
#line 2204
    goto ldv_52478;
  } else {

  }
  case 2: ;
#line 2208
  if (self == 0 && peer == 1) {
#line 2209
    rv = 1;
#line 2210
    goto ldv_52478;
  } else {

  }
#line 2212
  if (self == 1 && peer == 0) {
#line 2213
    rv = -1;
#line 2214
    goto ldv_52478;
  } else {

  }
#line 2217
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2220
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2221
    tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2221
    rv = tmp != 0 ? -1 : 1;
#line 2223
    goto ldv_52478;
  } else {
#line 2225
    if (ch_peer == 0UL) {
#line 2225
      rv = 1;
#line 2225
      goto ldv_52478;
    } else {

    }
#line 2226
    if (ch_self == 0UL) {
#line 2226
      rv = -1;
#line 2226
      goto ldv_52478;
    } else {

    }
  }
#line 2228
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2229
    goto ldv_52478;
  } else {

  }
  case 4: ;
#line 2231
  if (ch_self < ch_peer) {
#line 2232
    rv = -1;
  } else
#line 2233
  if (ch_self > ch_peer) {
#line 2234
    rv = 1;
  } else {
#line 2237
    tmp___0 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2237
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2239
  goto ldv_52478;
  case 5: 
#line 2241
  rv = -1;
#line 2242
  goto ldv_52478;
  case 6: 
#line 2244
  rv = 1;
  }
  ldv_52478: ;
#line 2247
  return (rv);
}
}
#line 2250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2252
  rv = -100;
#line 2254
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2260
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2261
  goto ldv_52496;
  case 0: ;
#line 2263
  goto ldv_52496;
  case 7: 
#line 2265
  hg = drbd_asb_recover_0p(mdev);
#line 2266
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2267
    rv = hg;
  } else {

  }
#line 2268
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2269
    rv = hg;
  } else {

  }
#line 2270
  goto ldv_52496;
  case 10: 
#line 2272
  rv = drbd_asb_recover_0p(mdev);
#line 2273
  goto ldv_52496;
  case 8: ;
#line 2275
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2277
  hg = drbd_asb_recover_0p(mdev);
#line 2278
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2281
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2285
    val.i = 0U;
#line 2285
    val.ldv_40583.role = 2U;
#line 2285
    mask.i = 0U;
#line 2285
    mask.ldv_40583.role = 3U;
#line 2285
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2286
    if ((int )rv2 != 1) {
#line 2287
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2289
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2290
      rv = hg;
    }
  } else {
#line 2293
    rv = hg;
  }
  }
  ldv_52496: ;
#line 2296
  return (rv);
}
}
#line 2299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2301
  rv = -100;
#line 2303
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2311
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2312
  goto ldv_52519;
  case 10: 
#line 2314
  rv = drbd_asb_recover_0p(mdev);
#line 2315
  goto ldv_52519;
  case 0: ;
#line 2317
  goto ldv_52519;
  case 9: 
#line 2319
  hg = drbd_asb_recover_0p(mdev);
#line 2320
  if (hg == -1) {
#line 2326
    val.i = 0U;
#line 2326
    val.ldv_40583.role = 2U;
#line 2326
    mask.i = 0U;
#line 2326
    mask.ldv_40583.role = 3U;
#line 2326
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2327
    if ((int )rv2 != 1) {
#line 2328
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2330
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2331
      rv = hg;
    }
  } else {
#line 2334
    rv = hg;
  }
  }
  ldv_52519: ;
#line 2337
  return (rv);
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2343
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2344
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2345
    return;
  } else {

  }
#line 2347
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2348
  return;
}
}
#line 2369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2374
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2375
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2377
  *rule_nr = 10;
#line 2378
  if (self == 4ULL && peer == 4ULL) {
#line 2379
    return (0);
  } else {

  }
#line 2381
  *rule_nr = 20;
#line 2382
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2384
    return (-2);
  } else {

  }
#line 2386
  *rule_nr = 30;
#line 2387
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2389
    return (2);
  } else {

  }
#line 2391
  if (self == peer) {
#line 2394
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2396
      if (mdev->agreed_pro_version <= 90) {
#line 2397
        return (-1091);
      } else {

      }
#line 2399
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2401
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2402
        drbd_uuid_move_history(mdev);
#line 2403
        (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 2404
        (mdev->ldev)->md.uuid[1] = 0ULL;
#line 2406
        if ((int )mdev->state.ldv_40583.disk > 2) {
#line 2406
          tmp = drbd_bm_total_weight(mdev);
#line 2406
          tmp___0 = (u64 )tmp;
        } else {
#line 2406
          tmp___0 = 0ULL;
        }
#line 2406
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2408
        *rule_nr = 34;
      } else {
#line 2410
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2411
        *rule_nr = 36;
      }
#line 2414
      return (1);
    } else {

    }
#line 2417
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2419
      if (mdev->agreed_pro_version <= 90) {
#line 2420
        return (-1091);
      } else {

      }
#line 2422
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2424
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2426
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2427
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2428
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2430
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2431
        *rule_nr = 35;
      } else {
#line 2433
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2434
        *rule_nr = 37;
      }
#line 2437
      return (-1);
    } else {

    }
#line 2441
    tmp___1 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2441
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2445
    *rule_nr = 40;
#line 2447
    switch (rct) {
    case 0: ;
#line 2448
    return (0);
    case 1: ;
#line 2449
    return (1);
    case 2: ;
#line 2450
    return (-1);
    case 3: 
#line 2452
    dc = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2453
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2457
  *rule_nr = 50;
#line 2458
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2459
  if (self == peer) {
#line 2460
    return (-1);
  } else {

  }
#line 2462
  *rule_nr = 51;
#line 2463
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2464
  if (self == peer) {
#line 2465
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2472
      if (mdev->agreed_pro_version <= 90) {
#line 2473
        return (-1091);
      } else {

      }
#line 2475
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2476
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2478
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2479
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2481
      return (-1);
    } else {

    }
  } else {

  }
#line 2485
  *rule_nr = 60;
#line 2486
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2487
  i = 2;
#line 2487
  goto ldv_52550;
  ldv_52549: 
#line 2488
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2489
  if (self == peer) {
#line 2490
    return (-2);
  } else {

  }
#line 2487
  i = i + 1;
  ldv_52550: ;
#line 2487
  if (i <= 3) {
#line 2488
    goto ldv_52549;
  } else {

  }
#line 2493
  *rule_nr = 70;
#line 2494
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2495
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2496
  if (self == peer) {
#line 2497
    return (1);
  } else {

  }
#line 2499
  *rule_nr = 71;
#line 2500
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2501
  if (self == peer) {
#line 2502
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2509
      if (mdev->agreed_pro_version <= 90) {
#line 2510
        return (-1091);
      } else {

      }
#line 2512
      __drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2513
      __drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2515
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2516
      if ((int )mdev->state.ldv_40583.disk > 2) {
#line 2516
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2516
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2516
        tmp___3 = 0ULL;
      }
#line 2516
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2519
      return (1);
    } else {

    }
  } else {

  }
#line 2524
  *rule_nr = 80;
#line 2525
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2526
  i = 2;
#line 2526
  goto ldv_52553;
  ldv_52552: 
#line 2527
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2528
  if (self == peer) {
#line 2529
    return (2);
  } else {

  }
#line 2526
  i = i + 1;
  ldv_52553: ;
#line 2526
  if (i <= 3) {
#line 2527
    goto ldv_52552;
  } else {

  }
#line 2532
  *rule_nr = 90;
#line 2533
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2534
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2535
  if (self == peer && self != 0ULL) {
#line 2536
    return (100);
  } else {

  }
#line 2538
  *rule_nr = 100;
#line 2539
  i = 2;
#line 2539
  goto ldv_52559;
  ldv_52558: 
#line 2540
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2541
  j = 2;
#line 2541
  goto ldv_52556;
  ldv_52555: 
#line 2542
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2543
  if (self == peer) {
#line 2544
    return (-100);
  } else {

  }
#line 2541
  j = j + 1;
  ldv_52556: ;
#line 2541
  if (j <= 3) {
#line 2542
    goto ldv_52555;
  } else {

  }
#line 2539
  i = i + 1;
  ldv_52559: ;
#line 2539
  if (i <= 3) {
#line 2540
    goto ldv_52558;
  } else {

  }

#line 2548
  return (-1000);
}
}
#line 2554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2558
  rv = C_MASK;
#line 2561
  mydisk = (enum drbd_disk_state )mdev->state.ldv_40583.disk;
#line 2562
  if ((unsigned int )mydisk == 3U) {
#line 2563
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_40583.disk;
  } else {

  }
#line 2565
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2567
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2568
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2569
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2572
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2573
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2575
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2577
  if (hg == -1000) {
#line 2578
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2579
    return (C_MASK);
  } else {

  }
#line 2581
  if (hg < -1000) {
#line 2582
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2583
    return (C_MASK);
  } else {

  }
#line 2586
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2588
    if (hg == -100) {
#line 2588
      tmp = 1;
    } else {
#line 2588
      __x___0 = hg;
#line 2588
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2588
      if (ret == 2L) {
#line 2588
        tmp = 1;
      } else {
#line 2588
        tmp = 0;
      }
    }
#line 2588
    f = tmp;
#line 2589
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2590
    if (f != 0) {
#line 2591
      hg = hg * 2;
    } else {

    }
#line 2592
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2596
  __x___2 = hg;
#line 2596
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2596
  if (ret___0 == 100L) {
#line 2597
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2599
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2600
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2602
    forced = hg == -100;
#line 2604
    switch (pcount) {
    case 0: 
#line 2606
    hg = drbd_asb_recover_0p(mdev);
#line 2607
    goto ldv_52582;
    case 1: 
#line 2609
    hg = drbd_asb_recover_1p(mdev);
#line 2610
    goto ldv_52582;
    case 2: 
#line 2612
    hg = drbd_asb_recover_2p(mdev);
#line 2613
    goto ldv_52582;
    }
    ldv_52582: 
#line 2615
    __x___4 = hg;
#line 2615
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2615
    if (ret___1 <= 99L) {
#line 2616
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2619
      if (forced != 0) {
#line 2620
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2622
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2627
  if (hg == -100) {
#line 2628
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2629
      hg = -1;
    } else {

    }
#line 2630
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2631
      hg = 1;
    } else {

    }
#line 2633
    __x___6 = hg;
#line 2633
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2633
    if (ret___2 <= 99L) {
#line 2634
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2639
  if (hg == -100) {
#line 2644
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2645
    drbd_khelper(mdev, (char *)"split-brain");
#line 2646
    return (C_MASK);
  } else {

  }
#line 2649
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2651
    return (C_MASK);
  } else {

  }
#line 2654
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_40583.disk > 6) {
#line 2656
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2658
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2661
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2662
    return (C_MASK);
    case 10: 
#line 2664
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2669
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2669
    goto _L;
  } else {
#line 2669
    tmp___1 = constant_test_bit(24U, (unsigned long const volatile   *)(& mdev->flags));
#line 2669
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2670
      if (hg == 0) {
#line 2671
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2673
        __x___8 = hg;
#line 2673
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2673
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2673
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2676
      return (C_MASK);
    } else {

    }
  }
#line 2679
  __x___10 = hg;
#line 2679
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2679
  if (ret___4 > 1L) {
#line 2680
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2681
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 2681
    if (tmp___2 != 0) {
#line 2683
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2686
  if (hg > 0) {
#line 2687
    rv = C_WF_BITMAP_S;
  } else
#line 2688
  if (hg < 0) {
#line 2689
    rv = C_WF_BITMAP_T;
  } else {
#line 2691
    rv = C_CONNECTED;
#line 2692
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2692
    if (tmp___4 != 0UL) {
#line 2693
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2693
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2698
  return (rv);
}
}
#line 2702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2705
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2707
    return (0);
  } else {

  }
#line 2710
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2712
    return (1);
  } else {

  }
#line 2715
  if ((unsigned int )peer == (unsigned int )self) {
#line 2716
    return (0);
  } else {

  }
#line 2719
  return (1);
}
}
#line 2722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2724
  p = & mdev->data.rbuf.protocol;
#line 2727
  p_integrity_alg[0] = '\000';
#line 2727
  tmp = 1U;
#line 2727
  while (1) {
#line 2727
    if (tmp >= 64U) {
#line 2727
      break;
    } else {

    }
#line 2727
    p_integrity_alg[tmp] = (char)0;
#line 2727
    tmp = tmp + 1U;
  }
#line 2729
  tmp___0 = __fswab32(p->protocol);
#line 2729
  p_proto = (int )tmp___0;
#line 2730
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2730
  p_after_sb_0p = (int )tmp___1;
#line 2731
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2731
  p_after_sb_1p = (int )tmp___2;
#line 2732
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2732
  p_after_sb_2p = (int )tmp___3;
#line 2733
  tmp___4 = __fswab32(p->two_primaries);
#line 2733
  p_two_primaries = (int )tmp___4;
#line 2734
  tmp___5 = __fswab32(p->conn_flags);
#line 2734
  cf = (int )tmp___5;
#line 2735
  p_want_lose = cf & 1;
#line 2737
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2739
  if ((cf & 2) != 0) {
#line 2740
    set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2742
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2743
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2744
    goto disconnect;
  } else {

  }
#line 2747
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2747
  if (tmp___6 != 0) {
#line 2748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2749
    goto disconnect;
  } else {

  }
#line 2752
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2752
  if (tmp___7 != 0) {
#line 2753
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2754
    goto disconnect;
  } else {

  }
#line 2757
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2757
  if (tmp___8 != 0) {
#line 2758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2759
    goto disconnect;
  } else {

  }
#line 2762
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2763
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2764
    goto disconnect;
  } else {

  }
#line 2767
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2769
    goto disconnect;
  } else {

  }
#line 2772
  if (mdev->agreed_pro_version > 86) {
#line 2773
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2775
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2775
    if ((unsigned int )tmp___9 != data_size) {
#line 2776
      return (0);
    } else {

    }
#line 2778
    p_integrity_alg[63] = 0;
#line 2779
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2779
    if (tmp___10 != 0) {
#line 2780
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2781
      goto disconnect;
    } else {

    }
#line 2783
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2787
  return (1);
  disconnect: 
#line 2790
  val.i = 0U;
#line 2790
  val.ldv_40583.conn = 1U;
#line 2790
  mask.i = 0U;
#line 2790
  mask.ldv_40583.conn = 31U;
#line 2790
  drbd_force_state(mdev, mask, val);
#line 2791
  return (0);
}
}
#line 2799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2804
  if ((int )((signed char )*alg) == 0) {
#line 2805
    return (0);
  } else {

  }
#line 2807
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2808
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2808
  if (tmp___0 != 0L) {
#line 2809
    tmp = PTR_ERR((void const   *)tfm);
#line 2809
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2811
    return (tfm);
  } else {

  }
#line 2813
  tmp___2 = crypto_hash_tfm(tfm);
#line 2813
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2813
  if (tmp___3 == 0) {
#line 2814
    crypto_free_hash(tfm);
#line 2815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2816
    tmp___1 = ERR_PTR(-22L);
#line 2816
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2818
  return (tfm);
}
}
#line 2821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2823
  ok = 1;
#line 2824
  p = & mdev->data.rbuf.rs_param_95;
#line 2826
  verify_tfm = 0;
#line 2827
  csums_tfm = 0;
#line 2828
  apv = mdev->agreed_pro_version;
#line 2829
  rs_plan_s = 0;
#line 2830
  fifo_size = 0;
#line 2832
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2838
  if (packet_size > exp_max_sz) {
#line 2839
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2841
    return (0);
  } else {

  }
#line 2844
  if (apv <= 88) {
#line 2845
    header_size = 4U;
#line 2846
    data_size = packet_size - header_size;
  } else
#line 2847
  if (apv <= 94) {
#line 2848
    header_size = 132U;
#line 2849
    data_size = packet_size - header_size;
#line 2850
    if (data_size != 0U) {
#line 2850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2850);
    } else {

    }
  } else {
#line 2852
    header_size = 148U;
#line 2853
    data_size = packet_size - header_size;
#line 2854
    if (data_size != 0U) {
#line 2854
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2854);
    } else {

    }
  }
#line 2858
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2860
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2860
  if ((unsigned int )tmp != header_size) {
#line 2861
    return (0);
  } else {

  }
#line 2863
  tmp___0 = __fswab32(p->rate);
#line 2863
  mdev->sync_conf.rate = (int )tmp___0;
#line 2865
  if (apv > 87) {
#line 2866
    if (apv == 88) {
#line 2867
      if (data_size > 64U || data_size == 0U) {
#line 2868
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 2871
        return (0);
      } else {

      }
#line 2874
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2874
      if ((unsigned int )tmp___1 != data_size) {
#line 2875
        return (0);
      } else {

      }
#line 2879
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2879
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2879);
      } else {

      }
#line 2880
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2885
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2885
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2885);
      } else {

      }
#line 2886
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2886
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2886);
      } else {

      }
#line 2887
      p->verify_alg[63] = 0;
#line 2888
      p->csums_alg[63] = 0;
    }
#line 2891
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2891
    if (tmp___3 != 0) {
#line 2892
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2893
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2895
        goto disconnect;
      } else {

      }
#line 2897
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2899
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2899
      if (tmp___2 != 0L) {
#line 2900
        verify_tfm = 0;
#line 2901
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2905
    if (apv > 88) {
#line 2905
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2905
      if (tmp___5 != 0) {
#line 2906
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2907
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2909
          goto disconnect;
        } else {

        }
#line 2911
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2913
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2913
        if (tmp___4 != 0L) {
#line 2914
          csums_tfm = 0;
#line 2915
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2919
    if (apv > 94) {
#line 2920
      tmp___6 = __fswab32(p->rate);
#line 2920
      mdev->sync_conf.rate = (int )tmp___6;
#line 2921
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2921
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2922
      tmp___8 = __fswab32(p->c_delay_target);
#line 2922
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2923
      tmp___9 = __fswab32(p->c_fill_target);
#line 2923
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2924
      tmp___10 = __fswab32(p->c_max_rate);
#line 2924
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2926
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2927
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2928
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2928
        rs_plan_s = (int *)tmp___11;
#line 2929
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2930
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2931
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2936
    spin_lock(& mdev->peer_seq_lock);
#line 2938
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2939
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2940
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2940
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2941
      crypto_free_hash(mdev->verify_tfm);
#line 2942
      mdev->verify_tfm = verify_tfm;
#line 2943
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2945
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2946
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2947
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2947
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2948
      crypto_free_hash(mdev->csums_tfm);
#line 2949
      mdev->csums_tfm = csums_tfm;
#line 2950
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2952
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2953
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2954
      mdev->rs_plan_s.values = rs_plan_s;
#line 2955
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2956
      mdev->rs_planed = 0;
    } else {

    }
#line 2958
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2961
  return (ok);
  disconnect: 
#line 2965
  crypto_free_hash(csums_tfm);
#line 2967
  crypto_free_hash(verify_tfm);
#line 2968
  val.i = 0U;
#line 2968
  val.ldv_40583.conn = 1U;
#line 2968
  mask.i = 0U;
#line 2968
  mask.ldv_40583.conn = 31U;
#line 2968
  drbd_force_state(mdev, mask, val);
#line 2969
  return (0);
}
}
#line 2973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2977
  if (a == 0UL || b == 0UL) {
#line 2978
    return;
  } else {

  }
#line 2979
  d = a > b ? a - b : b - a;
#line 2980
  if (a >> 3 < d || b >> 3 < d) {
#line 2981
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2983
  return;
}
}
#line 2985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 2987
  p = & mdev->data.rbuf.sizes;
#line 2988
  dd = 0;
#line 2990
  ldsc = 0;
#line 2993
  tmp = __fswab64(p->d_size);
#line 2993
  p_size = (sector_t )tmp;
#line 2994
  tmp___0 = __fswab64(p->u_size);
#line 2994
  p_usize = (sector_t )tmp___0;
#line 2996
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2998
    val.i = 0U;
#line 2998
    val.ldv_40583.conn = 1U;
#line 2998
    mask.i = 0U;
#line 2998
    mask.ldv_40583.conn = 31U;
#line 2998
    drbd_force_state(mdev, mask, val);
#line 2999
    return (0);
  } else {

  }
#line 3004
  mdev->p_size = p_size;
#line 3006
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3006
  if (tmp___6 != 0) {
#line 3007
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3007
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3009
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3014
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3015
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3015
      __y = p_usize;
#line 3015
      if (__x != 0UL) {
#line 3015
        if (__y != 0UL) {
#line 3015
          _min1 = __x;
#line 3015
          _min2 = __y;
#line 3015
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3015
          tmp___2 = __x;
        }
#line 3015
        tmp___3 = tmp___2;
      } else {
#line 3015
        tmp___3 = __y;
      }
#line 3015
      p_usize = tmp___3;
    } else {

    }
#line 3018
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3020
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3021
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3022
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3028
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3028
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3028
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_40583.disk > 4) && (int )mdev->state.ldv_40583.conn <= 9) {
#line 3032
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3033
      val___0.i = 0U;
#line 3033
      val___0.ldv_40583.conn = 1U;
#line 3033
      mask___0.i = 0U;
#line 3033
      mask___0.ldv_40583.conn = 31U;
#line 3033
      drbd_force_state(mdev, mask___0, val___0);
#line 3034
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3035
      put_ldev(mdev);
#line 3036
      return (0);
    } else {

    }
#line 3038
    put_ldev(mdev);
  } else {

  }
#line 3041
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3041
  ddsf = (enum dds_flags )tmp___7;
#line 3042
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3042
  if (tmp___8 != 0) {
#line 3043
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3044
    put_ldev(mdev);
#line 3045
    if ((int )dd == -1) {
#line 3046
      return (0);
    } else {

    }
#line 3047
    drbd_md_sync(mdev);
  } else {
#line 3050
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3053
  tmp___9 = __fswab32(p->max_bio_size);
#line 3053
  mdev->peer_max_bio_size = tmp___9;
#line 3054
  drbd_reconsider_max_bio_size(mdev);
#line 3056
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3056
  if (tmp___11 != 0) {
#line 3057
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3057
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3058
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3059
      ldsc = 1;
    } else {

    }
#line 3062
    put_ldev(mdev);
  } else {

  }
#line 3065
  if ((int )mdev->state.ldv_40583.conn > 9) {
#line 3066
    tmp___12 = __fswab64(p->c_size);
#line 3066
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3066
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3070
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3072
    tmp___14 = test_and_clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 3072
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3074
      if ((int )mdev->state.ldv_40583.pdsk > 3 && (int )mdev->state.ldv_40583.disk > 3) {
#line 3076
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3077
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3079
          resync_after_online_grow(mdev);
        }
      } else {
#line 3081
        set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3085
  return (1);
}
}
#line 3088 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3090
  p = & mdev->data.rbuf.uuids;
#line 3092
  updated_uuids = 0;
#line 3094
  tmp = kmalloc(48UL, 16U);
#line 3094
  p_uuid = (u64 *)tmp;
#line 3096
  i = 0;
#line 3096
  goto ldv_52697;
  ldv_52696: 
#line 3097
  tmp___0 = __fswab64(p->uuid[i]);
#line 3097
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3096
  i = i + 1;
  ldv_52697: ;
#line 3096
  if (i <= 5) {
#line 3097
    goto ldv_52696;
  } else {

  }
#line 3099
  kfree((void const   *)mdev->p_uuid);
#line 3100
  mdev->p_uuid = p_uuid;
#line 3102
  if ((((int )mdev->state.ldv_40583.conn <= 9 && (int )mdev->state.ldv_40583.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3106
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3108
    val.i = 0U;
#line 3108
    val.ldv_40583.conn = 1U;
#line 3108
    mask.i = 0U;
#line 3108
    mask.ldv_40583.conn = 31U;
#line 3108
    drbd_force_state(mdev, mask, val);
#line 3109
    return (0);
  } else {

  }
#line 3112
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3112
  if (tmp___1 != 0) {
#line 3113
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3118
    if (skip_initial_sync != 0) {
#line 3119
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3120
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3123
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3124
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3125
      __ns.i = mdev->state.i;
#line 3125
      __ns.ldv_40583.disk = 8U;
#line 3125
      __ns.ldv_40583.pdsk = 8U;
#line 3125
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3127
      drbd_md_sync(mdev);
#line 3128
      updated_uuids = 1;
    } else {

    }
#line 3130
    put_ldev(mdev);
  } else
#line 3131
  if ((int )mdev->state.ldv_40583.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3135
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3142
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3142
  if (tmp___2 == 0) {
#line 3142
    goto ldv_52706;
  } else {

  }
#line 3142
  tmp___3 = get_current();
#line 3142
  __wait.flags = 0U;
#line 3142
  __wait.private = (void *)tmp___3;
#line 3142
  __wait.func = & autoremove_wake_function;
#line 3142
  __wait.task_list.next = & __wait.task_list;
#line 3142
  __wait.task_list.prev = & __wait.task_list;
  ldv_52709: 
#line 3142
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3142
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3142
  if (tmp___4 == 0) {
#line 3142
    goto ldv_52708;
  } else {

  }
#line 3142
  schedule();
#line 3142
  goto ldv_52709;
  ldv_52708: 
#line 3142
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52706: ;
#line 3143
  if ((int )mdev->state.ldv_40583.conn > 9 && (int )mdev->state.ldv_40583.disk <= 3) {
#line 3144
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3144
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3146
  if (updated_uuids != 0) {
#line 3147
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3149
  return (1);
}
}
#line 3156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3160
  c_tab[0] = 0;
#line 3160
  c_tab[1] = C_TEAR_DOWN;
#line 3160
  c_tab[2] = 0;
#line 3160
  c_tab[3] = 0;
#line 3160
  c_tab[4] = 0;
#line 3160
  c_tab[5] = 0;
#line 3160
  c_tab[6] = 0;
#line 3160
  c_tab[7] = 0;
#line 3160
  c_tab[8] = 0;
#line 3160
  c_tab[9] = 0;
#line 3160
  c_tab[10] = C_CONNECTED;
#line 3160
  c_tab[11] = C_STARTING_SYNC_T;
#line 3160
  c_tab[12] = C_STARTING_SYNC_S;
#line 3160
  c_tab[13] = 0;
#line 3160
  c_tab[14] = 0;
#line 3160
  c_tab[15] = 0;
#line 3160
  c_tab[16] = 0;
#line 3160
  c_tab[17] = 0;
#line 3160
  c_tab[18] = C_VERIFY_T;
#line 3160
  c_tab[19] = 0;
#line 3160
  c_tab[20] = 0;
#line 3160
  c_tab[21] = 0;
#line 3160
  c_tab[22] = 0;
#line 3160
  c_tab[23] = 0;
#line 3160
  c_tab[24] = 0;
#line 3160
  c_tab[25] = 0;
#line 3160
  c_tab[26] = 0;
#line 3160
  c_tab[27] = 0;
#line 3160
  c_tab[28] = 0;
#line 3160
  c_tab[29] = 0;
#line 3160
  c_tab[30] = 0;
#line 3160
  c_tab[31] = C_MASK;
#line 3170
  ms.i = ps.i;
#line 3172
  ms.ldv_40583.conn = (unsigned char )c_tab[(int )ps.ldv_40583.conn];
#line 3173
  ms.ldv_40583.peer = ps.ldv_40583.role;
#line 3174
  ms.ldv_40583.role = ps.ldv_40583.peer;
#line 3175
  ms.ldv_40583.pdsk = ps.ldv_40583.disk;
#line 3176
  ms.ldv_40583.disk = ps.ldv_40583.pdsk;
#line 3177
  ms.ldv_40583.peer_isp = (unsigned char )((int )ps.ldv_40583.aftr_isp | (int )ps.ldv_40583.user_isp);
#line 3179
  return (ms);
}
}
#line 3182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3184
  p = & mdev->data.rbuf.req_state;
#line 3188
  tmp = __fswab32(p->mask);
#line 3188
  mask.i = tmp;
#line 3189
  tmp___0 = __fswab32(p->val);
#line 3189
  val.i = tmp___0;
#line 3191
  tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 3191
  if (tmp___1 != 0) {
#line 3191
    tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3191
    if (tmp___2 != 0) {
#line 3193
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3194
      return (1);
    } else {

    }
  } else {

  }
#line 3197
  mask = convert_state(mask);
#line 3198
  val = convert_state(val);
#line 3200
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3202
  drbd_send_sr_reply(mdev, rv);
#line 3203
  drbd_md_sync(mdev);
#line 3205
  return (1);
}
}
#line 3208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3210
  p = & mdev->data.rbuf.state;
#line 3216
  tmp = __fswab32(p->state);
#line 3216
  peer_state.i = tmp;
#line 3218
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_40583.disk;
#line 3219
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3220
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3221
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3221
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3224
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3226
  ns = mdev->state;
#line 3226
  os = ns;
#line 3227
  spin_unlock_irq(& mdev->req_lock);
#line 3232
  if ((int )os.ldv_40583.conn <= 7) {
#line 3233
    return (0);
  } else {

  }
#line 3241
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_40583.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3250
    if ((int )peer_state.ldv_40583.conn > 10 && (int )peer_state.ldv_40583.conn <= 15) {
#line 3252
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3257
    if ((int )os.ldv_40583.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3259
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3259
      if (tmp___1 <= mdev->rs_failed) {
#line 3260
        drbd_resync_finished(mdev);
      } else {

      }
#line 3261
      return (1);
    } else {

    }
  } else {

  }
#line 3266
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) == 304U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) && (unsigned int )real_peer_disk == 8U) {
#line 3268
    ov_oos_print(mdev);
#line 3269
    drbd_resync_finished(mdev);
#line 3270
    return (1);
  } else {

  }
#line 3278
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_40583.conn > 16) {
#line 3280
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3282
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3283
    ns.ldv_40583.conn = 10U;
  } else {

  }
#line 3285
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3286
    ns.ldv_40583.conn = 23U;
  } else {

  }
#line 3288
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_40583.disk > 2) {
#line 3288
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3288
    if (tmp___5 != 0) {
#line 3293
      cr = (int )os.ldv_40583.conn <= 9;
#line 3296
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3301
      tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 3301
      cr = tmp___2 | cr;
#line 3304
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_40583.conn > 10 && (int )peer_state.ldv_40583.conn <= 14)) | cr;
#line 3308
      if (cr != 0) {
#line 3309
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_40583.role,
                                      real_peer_disk);
#line 3309
        ns.ldv_40583.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3311
      put_ldev(mdev);
#line 3312
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3313
        ns.ldv_40583.conn = 10U;
#line 3314
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3315
          val.i = 0U;
#line 3315
          val.ldv_40583.disk = 2U;
#line 3315
          mask.i = 0U;
#line 3315
          mask.ldv_40583.disk = 15U;
#line 3315
          drbd_force_state(mdev, mask, val);
        } else
#line 3316
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3317
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3318
          peer_state.ldv_40583.disk = 0U;
#line 3319
          real_peer_disk = D_DISKLESS;
        } else {
#line 3321
          tmp___4 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3321
          if (tmp___4 != 0) {
#line 3322
            return (0);
          } else {

          }
#line 3323
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3323
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3323);
          } else {

          }
#line 3324
          val___0.i = 0U;
#line 3324
          val___0.ldv_40583.conn = 1U;
#line 3324
          mask___0.i = 0U;
#line 3324
          mask___0.ldv_40583.conn = 31U;
#line 3324
          drbd_force_state(mdev, mask___0, val___0);
#line 3325
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3330
  spin_lock_irq(& mdev->req_lock);
#line 3331
  if (mdev->state.i != os.i) {
#line 3332
    goto retry;
  } else {

  }
#line 3333
  clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 3334
  ns.ldv_40583.peer = peer_state.ldv_40583.role;
#line 3335
  ns.ldv_40583.pdsk = (unsigned char )real_peer_disk;
#line 3336
  ns.ldv_40583.peer_isp = (unsigned char )((int )peer_state.ldv_40583.aftr_isp | (int )peer_state.ldv_40583.user_isp);
#line 3337
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3338
    ns.ldv_40583.disk = mdev->new_state_tmp.ldv_40583.disk;
  } else {

  }
#line 3339
  cs_flags = (enum chg_state_flags )(((int )os.ldv_40583.conn > 9 || (int )ns.ldv_40583.conn <= 9) + 2);
#line 3340
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3340
    tmp___6 = is_susp(ns);
#line 3340
    if (tmp___6 != 0) {
#line 3340
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3340
        if ((int )os.ldv_40583.conn <= 9) {
#line 3340
          tmp___7 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 3340
          if (tmp___7 != 0) {
#line 3344
            spin_unlock_irq(& mdev->req_lock);
#line 3345
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3346
            tl_clear(mdev);
#line 3347
            drbd_uuid_new_current(mdev);
#line 3348
            clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 3349
            val___1.i = 0U;
#line 3349
            val___1.ldv_40583.conn = 6U;
#line 3349
            val___1.ldv_40583.susp = 0U;
#line 3349
            mask___1.i = 0U;
#line 3349
            mask___1.ldv_40583.conn = 31U;
#line 3349
            mask___1.ldv_40583.susp = 1U;
#line 3349
            drbd_force_state(mdev, mask___1, val___1);
#line 3350
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3352
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3352
  rv = (int )tmp___8;
#line 3353
  ns = mdev->state;
#line 3354
  spin_unlock_irq(& mdev->req_lock);
#line 3356
  if (rv <= 0) {
#line 3357
    val___2.i = 0U;
#line 3357
    val___2.ldv_40583.conn = 1U;
#line 3357
    mask___2.i = 0U;
#line 3357
    mask___2.ldv_40583.conn = 31U;
#line 3357
    drbd_force_state(mdev, mask___2, val___2);
#line 3358
    return (0);
  } else {

  }
#line 3361
  if ((int )os.ldv_40583.conn > 9) {
#line 3362
    if (((int )ns.ldv_40583.conn > 10 && (int )peer_state.ldv_40583.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3367
      drbd_send_uuids(mdev);
#line 3368
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3372
  (mdev->net_conf)->want_lose = 0U;
#line 3374
  drbd_md_sync(mdev);
#line 3376
  return (1);
}
}
#line 3379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3381
  p = & mdev->data.rbuf.rs_uuid;
#line 3383
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_40583.conn <= 9) || (int )mdev->state.ldv_40583.disk <= 2) {
#line 3383
    goto ldv_52760;
  } else {

  }
#line 3383
  tmp = get_current();
#line 3383
  __wait.flags = 0U;
#line 3383
  __wait.private = (void *)tmp;
#line 3383
  __wait.func = & autoremove_wake_function;
#line 3383
  __wait.task_list.next = & __wait.task_list;
#line 3383
  __wait.task_list.prev = & __wait.task_list;
  ldv_52763: 
#line 3383
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3383
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_40583.conn <= 9) || (int )mdev->state.ldv_40583.disk <= 2) {
#line 3383
    goto ldv_52762;
  } else {

  }
#line 3383
  schedule();
#line 3383
  goto ldv_52763;
  ldv_52762: 
#line 3383
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52760: 
#line 3393
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3393
  if (tmp___1 != 0) {
#line 3394
    tmp___0 = __fswab64(p->uuid);
#line 3394
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3395
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3397
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3398
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3400
    put_ldev(mdev);
  } else {
#line 3402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3404
  return (1);
}
}
#line 3414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3417
  __min1 = 511UL;
#line 3417
  __min2 = c->bm_words - c->word_offset;
#line 3417
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3418
  want = num_words * 8U;
#line 3421
  if (want != data_size) {
#line 3422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3423
    return (-5);
  } else {

  }
#line 3425
  if (want == 0U) {
#line 3426
    return (0);
  } else {

  }
#line 3427
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3428
  if ((unsigned int )err != want) {
#line 3429
    if (err >= 0) {
#line 3430
      err = -5;
    } else {

    }
#line 3431
    return (err);
  } else {

  }
#line 3434
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3436
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3437
  c->bit_offset = c->word_offset * 64UL;
#line 3438
  if (c->bit_offset > c->bm_bits) {
#line 3439
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3441
  return (1);
}
}
#line 3451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3459
  s = c->bit_offset;
#line 3461
  tmp___0 = __fswab16((int )p->head.length);
#line 3461
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3462
  tmp___1 = DCBP_get_start(p);
#line 3462
  toggle = tmp___1;
#line 3466
  tmp___2 = DCBP_get_pad_bits(p);
#line 3466
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3468
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3469
  if (bits < 0) {
#line 3470
    return (-5);
  } else {

  }
#line 3472
  have = bits;
#line 3472
  goto ldv_52793;
  ldv_52792: 
#line 3473
  bits = vli_decode_bits(& rl, look_ahead);
#line 3474
  if (bits <= 0) {
#line 3475
    return (-5);
  } else {

  }
#line 3477
  if (toggle != 0) {
#line 3478
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3479
    if (c->bm_bits <= e) {
#line 3480
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3481
      return (-5);
    } else {

    }
#line 3483
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3486
  if (have < bits) {
#line 3487
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3491
    return (-5);
  } else {

  }
#line 3493
  look_ahead = look_ahead >> bits;
#line 3494
  have = have - bits;
#line 3496
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3497
  if (bits < 0) {
#line 3498
    return (-5);
  } else {

  }
#line 3499
  look_ahead = (tmp << have) | look_ahead;
#line 3500
  have = have + bits;
#line 3472
  s = (unsigned long )((unsigned long long )s + rl);
#line 3472
  toggle = toggle == 0;
  ldv_52793: ;
#line 3472
  if (have > 0) {
#line 3473
    goto ldv_52792;
  } else {

  }
#line 3503
  c->bit_offset = s;
#line 3504
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3506
  return (c->bm_bits != s);
}
}
#line 3516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3520
  tmp___0 = DCBP_get_code(p);
#line 3520
  if ((unsigned int )tmp___0 == 2U) {
#line 3521
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3521
    return (tmp);
  } else {

  }
#line 3527
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3528
  val.i = 0U;
#line 3528
  val.ldv_40583.conn = 6U;
#line 3528
  mask.i = 0U;
#line 3528
  mask.ldv_40583.conn = 31U;
#line 3528
  drbd_force_state(mdev, mask, val);
#line 3529
  return (-5);
}
}
#line 3532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3536
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3539
  total = c->bytes[0] + c->bytes[1];
#line 3543
  if (total == 0U) {
#line 3544
    return;
  } else {

  }
#line 3547
  if (total >= plain) {
#line 3548
    return;
  } else {

  }
#line 3551
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3554
  if (r > 1000U) {
#line 3555
    r = 1000U;
  } else {

  }
#line 3557
  r = 1000U - r;
#line 3558
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3559
  return;
}
}
#line 3574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3579
  ok = 0;
#line 3580
  h = & mdev->data.rbuf.header.h80;
#line 3582
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 3588
  tmp = __get_free_pages(16U, 0U);
#line 3588
  buffer = (void *)tmp;
#line 3589
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3590
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3591
    goto out;
  } else {

  }
#line 3594
  tmp___0 = drbd_bm_bits(mdev);
#line 3594
  tmp___1 = drbd_bm_words(mdev);
#line 3594
  __constr_expr_0.bm_bits = tmp___0;
#line 3594
  __constr_expr_0.bm_words = tmp___1;
#line 3594
  __constr_expr_0.bit_offset = 0UL;
#line 3594
  __constr_expr_0.word_offset = 0UL;
#line 3594
  __constr_expr_0.packets[0] = 0U;
#line 3594
  __constr_expr_0.packets[1] = 0U;
#line 3594
  __constr_expr_0.bytes[0] = 0U;
#line 3594
  __constr_expr_0.bytes[1] = 0U;
#line 3594
  c = __constr_expr_0;
  ldv_52830: ;
#line 3600
  if ((unsigned int )cmd == 4U) {
#line 3601
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3602
  if ((unsigned int )cmd == 36U) {
#line 3607
    if (data_size > 4088U) {
#line 3608
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3609
      goto out;
    } else {

    }
#line 3612
    p = (struct p_compressed_bm *)buffer;
#line 3613
    __len = 8UL;
#line 3613
    if (__len > 63UL) {
#line 3613
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3613
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3614
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3614
    if ((unsigned int )tmp___2 != data_size) {
#line 3615
      goto out;
    } else {

    }
#line 3616
    if (data_size <= 1U) {
#line 3617
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3618
      goto out;
    } else {

    }
#line 3620
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3622
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3623
    goto out;
  }
#line 3626
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3627
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3629
  if (err <= 0) {
#line 3630
    if (err < 0) {
#line 3631
      goto out;
    } else {

    }
#line 3632
    goto ldv_52829;
  } else {

  }
#line 3634
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3634
  if (tmp___3 == 0) {
#line 3635
    goto out;
  } else {

  }
#line 3636
  goto ldv_52830;
  ldv_52829: 
#line 3638
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3640
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3643
    tmp___4 = drbd_send_bitmap(mdev);
#line 3643
    ok = tmp___4 == 0;
#line 3644
    if (ok == 0) {
#line 3645
      goto out;
    } else {

    }
#line 3647
    val.i = 0U;
#line 3647
    val.ldv_40583.conn = 15U;
#line 3647
    mask.i = 0U;
#line 3647
    mask.ldv_40583.conn = 31U;
#line 3647
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3648
    if ((int )rv != 1) {
#line 3648
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3648);
    } else {

    }
  } else
#line 3649
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3652
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_40583.conn);
#line 3652
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3656
  ok = 1;
  out: 
#line 3658
  drbd_bm_unlock(mdev);
#line 3659
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3660
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3661
  free_pages((unsigned long )buffer, 0U);
#line 3662
  return (ok);
}
}
#line 3665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3671
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3674
  size = (int )data_size;
#line 3675
  goto ldv_52853;
  ldv_52852: 
#line 3676
  __min1 = size;
#line 3676
  __min2 = 128;
#line 3676
  want = __min1 < __min2 ? __min1 : __min2;
#line 3677
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3678
  _b = r <= 0;
#line 3678
  if (_b != 0) {
#line 3678
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3678);
  } else {

  }
#line 3678
  if (_b != 0) {
#line 3678
    goto ldv_52851;
  } else {

  }
#line 3679
  size = size - r;
  ldv_52853: ;
#line 3675
  if (size > 0) {
#line 3676
    goto ldv_52852;
  } else {

  }
  ldv_52851: ;
#line 3681
  return (size == 0);
}
}
#line 3684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3688
  drbd_tcp_quickack(mdev->data.socket);
#line 3690
  return (1);
}
}
#line 3693 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3695
  p = & mdev->data.rbuf.block_desc;
#line 3697
  switch ((int )mdev->state.ldv_40583.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3701
  goto ldv_52868;
  default: 
#line 3703
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_40583.conn);
#line 3703
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_52868: 
#line 3707
  tmp___0 = __fswab32(p->blksize);
#line 3707
  tmp___1 = __fswab64(p->sector);
#line 3707
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3707U);
#line 3709
  return (1);
}
}
#line 3720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3720
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3757
  header = & mdev->data.rbuf.header;
#line 3763
  goto ldv_52889;
  ldv_52888: 
#line 3764
  drbd_thread_current_set_cpu(mdev);
#line 3765
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3765
  if (tmp == 0) {
#line 3766
    goto err_out;
  } else {

  }
#line 3768
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3768
  if (tmp___0 != 0L) {
#line 3769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3770
    goto err_out;
  } else {
#line 3768
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3768
    if (tmp___1 != 0L) {
#line 3769
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3770
      goto err_out;
    } else {

    }
  }
#line 3773
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3774
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3775
    tmp___2 = cmdname(cmd);
#line 3775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3776
    goto err_out;
  } else {

  }
#line 3779
  if (shs != 0UL) {
#line 3780
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3781
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3781
    if (tmp___5 != 0L) {
#line 3782
      tmp___3 = get_current();
#line 3782
      tmp___4 = signal_pending(tmp___3);
#line 3782
      if (tmp___4 == 0) {
#line 3783
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3784
      goto err_out;
    } else {

    }
  } else {

  }
#line 3788
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3790
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3790
  if (tmp___7 != 0L) {
#line 3791
    tmp___6 = cmdname(cmd);
#line 3791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3793
    goto err_out;
  } else {

  }
  ldv_52889: 
#line 3763
  tmp___8 = get_t_state(& mdev->receiver);
#line 3763
  if ((unsigned int )tmp___8 == 1U) {
#line 3764
    goto ldv_52888;
  } else {

  }

#line 3797
  if (0) {
    err_out: 
#line 3799
    val.i = 0U;
#line 3799
    val.ldv_40583.conn = 6U;
#line 3799
    mask.i = 0U;
#line 3799
    mask.ldv_40583.conn = 31U;
#line 3799
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3803
  drbd_md_sync(mdev);
#line 3804
  return;
}
}
#line 3806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3810
  barr.w.cb = & w_prev_work_done;
#line 3811
  init_completion(& barr.done);
#line 3812
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3813
  wait_for_completion(& barr.done);
#line 3814
  return;
}
}
#line 3816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;
  struct drbd_request *req ;
  struct hlist_node *pos ;
  struct hlist_node *n ;
  struct hlist_node  const  *__mptr ;

  {
#line 3820
  spin_lock_irq(& mdev->req_lock);
#line 3822
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3823
    spin_unlock_irq(& mdev->req_lock);
#line 3824
    return;
  } else {

  }
#line 3827
  h = mdev->ee_hash;
#line 3827
  goto ldv_52904;
  ldv_52903: ;
#line 3828
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3829
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3827
  h = h + 1;
  ldv_52904: ;
#line 3827
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3828
    goto ldv_52903;
  } else {

  }
#line 3831
  kfree((void const   *)mdev->ee_hash);
#line 3832
  mdev->ee_hash = 0;
#line 3833
  mdev->ee_hash_s = 0U;
#line 3838
  h = mdev->tl_hash;
#line 3838
  goto ldv_52917;
  ldv_52916: 
#line 3841
  pos = h->first;
#line 3841
  goto ldv_52914;
  ldv_52913: 
#line 3842
  hlist_del_init(& req->collision);
#line 3843
  hlist_add_fake(& req->collision);
#line 3841
  pos = n;
  ldv_52914: ;
#line 3841
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3841
    n = pos->next;
#line 3841
    if (1 != 0) {
#line 3841
      __mptr = (struct hlist_node  const  *)pos;
#line 3841
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3841
      if (1 != 0) {
#line 3842
        goto ldv_52913;
      } else {
#line 3844
        goto ldv_52915;
      }
    } else {
#line 3844
      goto ldv_52915;
    }
  } else {

  }
  ldv_52915: 
#line 3838
  h = h + 1;
  ldv_52917: ;
#line 3838
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3839
    goto ldv_52916;
  } else {

  }
#line 3847
  kfree((void const   *)mdev->tl_hash);
#line 3848
  mdev->tl_hash = 0;
#line 3849
  mdev->tl_hash_s = 0U;
#line 3850
  spin_unlock_irq(& mdev->req_lock);
#line 3851
  return;
}
}
#line 3853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3857
  rv = 0;
#line 3860
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3861
    return;
  } else {

  }
#line 3868
  val.i = 0U;
#line 3868
  val.ldv_40583.conn = 5U;
#line 3868
  mask.i = 0U;
#line 3868
  mask.ldv_40583.conn = 31U;
#line 3868
  drbd_force_state(mdev, mask, val);
#line 3871
  drbd_thread_stop(& mdev->asender);
#line 3872
  drbd_free_sock(mdev);
#line 3875
  spin_lock_irq(& mdev->req_lock);
#line 3876
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3877
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3878
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3879
  spin_unlock_irq(& mdev->req_lock);
#line 3891
  drbd_rs_cancel_all(mdev);
#line 3892
  mdev->rs_total = 0UL;
#line 3893
  mdev->rs_failed = 0UL;
#line 3894
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3895
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3898
  del_timer_sync(& mdev->resync_timer);
#line 3899
  resync_timer_fn((unsigned long )mdev);
#line 3904
  drbd_flush_workqueue(mdev);
#line 3908
  drbd_process_done_ee(mdev);
#line 3910
  kfree((void const   *)mdev->p_uuid);
#line 3911
  mdev->p_uuid = 0;
#line 3913
  tmp = is_susp(mdev->state);
#line 3913
  if (tmp == 0) {
#line 3914
    tl_clear(mdev);
  } else {

  }
#line 3916
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3918
  drbd_md_sync(mdev);
#line 3920
  fp = FP_DONT_CARE;
#line 3921
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3921
  if (tmp___0 != 0) {
#line 3922
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3923
    put_ldev(mdev);
  } else {

  }
#line 3926
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_40583.pdsk > 5) {
#line 3927
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3929
  spin_lock_irq(& mdev->req_lock);
#line 3930
  os = mdev->state;
#line 3931
  if ((int )os.ldv_40583.conn > 1) {
#line 3933
    ns = os;
#line 3934
    ns.ldv_40583.conn = 2U;
#line 3935
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3935
    rv = (int )tmp___1;
  } else {

  }
#line 3937
  spin_unlock_irq(& mdev->req_lock);
#line 3939
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3940
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3940
    if (tmp___2 == 0) {
#line 3940
      goto ldv_52931;
    } else {

    }
#line 3940
    tmp___3 = get_current();
#line 3940
    __wait.flags = 0U;
#line 3940
    __wait.private = (void *)tmp___3;
#line 3940
    __wait.func = & autoremove_wake_function;
#line 3940
    __wait.task_list.next = & __wait.task_list;
#line 3940
    __wait.task_list.prev = & __wait.task_list;
    ldv_52934: 
#line 3940
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3940
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3940
    if (tmp___4 == 0) {
#line 3940
      goto ldv_52933;
    } else {

    }
#line 3940
    schedule();
#line 3940
    goto ldv_52934;
    ldv_52933: 
#line 3940
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_52931: 
#line 3942
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3943
    mdev->cram_hmac_tfm = 0;
#line 3945
    kfree((void const   *)mdev->net_conf);
#line 3946
    mdev->net_conf = 0;
#line 3947
    val___0.i = 0U;
#line 3947
    val___0.ldv_40583.conn = 0U;
#line 3947
    mask___0.i = 0U;
#line 3947
    mask___0.ldv_40583.conn = 31U;
#line 3947
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3952
  tmp___5 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3952
  if (tmp___5 == 0) {
#line 3952
    goto ldv_52939;
  } else {

  }
#line 3952
  tmp___6 = get_current();
#line 3952
  __wait___0.flags = 0U;
#line 3952
  __wait___0.private = (void *)tmp___6;
#line 3952
  __wait___0.func = & autoremove_wake_function;
#line 3952
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3952
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52942: 
#line 3952
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3952
  tmp___7 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3952
  if (tmp___7 == 0) {
#line 3952
    goto ldv_52941;
  } else {

  }
#line 3952
  schedule();
#line 3952
  goto ldv_52942;
  ldv_52941: 
#line 3952
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_52939: 
#line 3961
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3961
  i = (unsigned int )tmp___8;
#line 3962
  if (i != 0U) {
#line 3963
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3964
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3964
  i = (unsigned int )tmp___9;
#line 3965
  if (i != 0U) {
#line 3966
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3967
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3967
  i = (unsigned int )tmp___10;
#line 3968
  if (i != 0U) {
#line 3969
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3971
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3971
  if (tmp___11 == 0) {
#line 3971
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3971);
  } else {

  }
#line 3972
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3972
  if (tmp___12 == 0) {
#line 3972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3972);
  } else {

  }
#line 3973
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3973
  if (tmp___13 == 0) {
#line 3973
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3973);
  } else {

  }
#line 3974
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3974
  if (tmp___14 == 0) {
#line 3974
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3974);
  } else {

  }
#line 3977
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3978
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3978
  if (tmp___15 == 0) {
#line 3978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3978);
  } else {

  }
#line 3979
  return;
}
}
#line 3990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3993
  p = & mdev->data.sbuf.handshake;
#line 3996
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3996
  if (tmp != 0) {
#line 3997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3998
    return (0);
  } else {

  }
#line 4001
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4002
    mutex_unlock(& mdev->data.mutex);
#line 4003
    return (0);
  } else {

  }
#line 4006
  memset((void *)p, 0, 80UL);
#line 4007
  p->protocol_min = 1442840576U;
#line 4008
  p->protocol_max = 1627389952U;
#line 4009
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4011
  mutex_unlock(& mdev->data.mutex);
#line 4012
  return (ok);
}
}
#line 4022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4025
  p = & mdev->data.rbuf.handshake;
#line 4026
  expect = 72;
#line 4031
  rv = drbd_send_handshake(mdev);
#line 4032
  if (rv == 0) {
#line 4033
    return (0);
  } else {

  }
#line 4035
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4036
  if (rv == 0) {
#line 4037
    return (0);
  } else {

  }
#line 4039
  if ((unsigned int )cmd != 65534U) {
#line 4040
    tmp = cmdname(cmd);
#line 4040
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4042
    return (-1);
  } else {

  }
#line 4045
  if ((unsigned int )expect != length) {
#line 4046
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4048
    return (-1);
  } else {

  }
#line 4051
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4053
  if (rv != expect) {
#line 4054
    tmp___0 = get_current();
#line 4054
    tmp___1 = signal_pending(tmp___0);
#line 4054
    if (tmp___1 == 0) {
#line 4055
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4056
    return (0);
  } else {

  }
#line 4059
  tmp___2 = __fswab32(p->protocol_min);
#line 4059
  p->protocol_min = tmp___2;
#line 4060
  tmp___3 = __fswab32(p->protocol_max);
#line 4060
  p->protocol_max = tmp___3;
#line 4061
  if (p->protocol_max == 0U) {
#line 4062
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4064
  if (p->protocol_min > 97U || p->protocol_max <= 85U) {
#line 4066
    goto incompat;
  } else {

  }
#line 4068
  __min1 = 97;
#line 4068
  __min2 = (int )p->protocol_max;
#line 4068
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4070
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4073
  return (1);
  incompat: 
#line 4076
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 97, p->protocol_min, p->protocol_max);
#line 4080
  return (-1);
}
}
#line 4099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4103
  response = 0;
#line 4104
  right_response = 0;
#line 4105
  peers_ch = 0;
#line 4106
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4106
  key_len = (unsigned int )tmp;
#line 4113
  desc.tfm = mdev->cram_hmac_tfm;
#line 4114
  desc.flags = 0U;
#line 4116
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4118
  if (rv != 0) {
#line 4119
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4120
    rv = -1;
#line 4121
    goto fail;
  } else {

  }
#line 4124
  get_random_bytes((void *)(& my_challenge), 64);
#line 4126
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4127
  if (rv == 0) {
#line 4128
    goto fail;
  } else {

  }
#line 4130
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4131
  if (rv == 0) {
#line 4132
    goto fail;
  } else {

  }
#line 4134
  if ((unsigned int )cmd != 16U) {
#line 4135
    tmp___0 = cmdname(cmd);
#line 4135
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4137
    rv = 0;
#line 4138
    goto fail;
  } else {

  }
#line 4141
  if (length > 128U) {
#line 4142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4143
    rv = -1;
#line 4144
    goto fail;
  } else {

  }
#line 4147
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4147
  peers_ch = (char *)tmp___1;
#line 4148
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4150
    rv = -1;
#line 4151
    goto fail;
  } else {

  }
#line 4154
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4156
  if ((unsigned int )rv != length) {
#line 4157
    tmp___2 = get_current();
#line 4157
    tmp___3 = signal_pending(tmp___2);
#line 4157
    if (tmp___3 == 0) {
#line 4158
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4159
    rv = 0;
#line 4160
    goto fail;
  } else {

  }
#line 4163
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4164
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4164
  response = (char *)tmp___4;
#line 4165
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4167
    rv = -1;
#line 4168
    goto fail;
  } else {

  }
#line 4171
  sg_init_table(& sg, 1U);
#line 4172
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4174
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4175
  if (rv != 0) {
#line 4176
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4177
    rv = -1;
#line 4178
    goto fail;
  } else {

  }
#line 4181
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4182
  if (rv == 0) {
#line 4183
    goto fail;
  } else {

  }
#line 4185
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4186
  if (rv == 0) {
#line 4187
    goto fail;
  } else {

  }
#line 4189
  if ((unsigned int )cmd != 17U) {
#line 4190
    tmp___5 = cmdname(cmd);
#line 4190
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4192
    rv = 0;
#line 4193
    goto fail;
  } else {

  }
#line 4196
  if (length != resp_size) {
#line 4197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4198
    rv = 0;
#line 4199
    goto fail;
  } else {

  }
#line 4202
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4204
  if ((unsigned int )rv != resp_size) {
#line 4205
    tmp___6 = get_current();
#line 4205
    tmp___7 = signal_pending(tmp___6);
#line 4205
    if (tmp___7 == 0) {
#line 4206
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4207
    rv = 0;
#line 4208
    goto fail;
  } else {

  }
#line 4211
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4211
  right_response = (char *)tmp___8;
#line 4212
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4213
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4214
    rv = -1;
#line 4215
    goto fail;
  } else {

  }
#line 4218
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4220
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4221
  if (rv != 0) {
#line 4222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4223
    rv = -1;
#line 4224
    goto fail;
  } else {

  }
#line 4227
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4227
  rv = tmp___9 == 0;
#line 4229
  if (rv != 0) {
#line 4230
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4233
    rv = -1;
  }
  fail: 
#line 4236
  kfree((void const   *)peers_ch);
#line 4237
  kfree((void const   *)response);
#line 4238
  kfree((void const   *)right_response);
#line 4240
  return (rv);
}
}
#line 4244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4246
  mdev = thi->mdev;
#line 4247
  tmp = mdev_to_minor(mdev);
#line 4247
  minor = tmp;
#line 4250
  tmp___0 = get_current();
#line 4250
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4252
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_52985: 
#line 4255
  h = drbd_connect(mdev);
#line 4256
  if (h == 0) {
#line 4257
    drbd_disconnect(mdev);
#line 4258
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4260
  if (h == -1) {
#line 4261
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4262
    val.i = 0U;
#line 4262
    val.ldv_40583.conn = 1U;
#line 4262
    mask.i = 0U;
#line 4262
    mask.ldv_40583.conn = 31U;
#line 4262
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4264
  if (h == 0) {
#line 4265
    goto ldv_52985;
  } else {

  }

#line 4266
  if (h > 0) {
#line 4267
    tmp___1 = get_net_conf(mdev);
#line 4267
    if (tmp___1 != 0) {
#line 4268
      drbdd(mdev);
#line 4269
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4273
  drbd_disconnect(mdev);
#line 4275
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4276
  return (0);
}
}
#line 4281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4283
  p = (struct p_req_state_reply *)h;
#line 4285
  tmp = __fswab32(p->retcode);
#line 4285
  retcode = (int )tmp;
#line 4287
  if (retcode > 0) {
#line 4288
    set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4290
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
#line 4291
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4291
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4294
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4296
  return (1);
}
}
#line 4299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4301
  tmp = drbd_send_ping_ack(mdev);
#line 4301
  return (tmp);
}
}
#line 4305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4308
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4309
  tmp = test_and_set_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 4309
  if (tmp == 0) {
#line 4310
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4312
  return (1);
}
}
#line 4315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4317
  p = (struct p_block_ack *)h;
#line 4318
  tmp = __fswab64(p->sector);
#line 4318
  sector = (sector_t )tmp;
#line 4319
  tmp___0 = __fswab32(p->blksize);
#line 4319
  blksize = (int )tmp___0;
#line 4321
  if (mdev->agreed_pro_version <= 88) {
#line 4321
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4321);
  } else {

  }
#line 4323
  tmp___1 = __fswab32(p->seq_num);
#line 4323
  update_peer_seq(mdev, tmp___1);
#line 4325
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4325
  if (tmp___2 != 0) {
#line 4326
    drbd_rs_complete_io(mdev, sector);
#line 4327
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4327U);
#line 4329
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4330
    put_ldev(mdev);
  } else {

  }
#line 4332
  atomic_dec(& mdev->rs_pending_cnt);
#line 4332
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4332
  if (tmp___4 < 0) {
#line 4332
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4332, tmp___3);
  } else {

  }
#line 4333
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4335
  return (1);
}
}
#line 4340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4343
  tmp = tl_hash_slot(mdev, sector);
#line 4343
  slot = tmp;
#line 4347
  n = slot->first;
#line 4347
  goto ldv_53025;
  ldv_53024: ;
#line 4348
  if ((unsigned long )req == (unsigned long )id) {
#line 4349
    if (req->sector != sector) {
#line 4350
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4354
      goto ldv_53023;
    } else {

    }
#line 4356
    return (req);
  } else {

  }
#line 4347
  n = n->next;
  ldv_53025: ;
#line 4347
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4347
    __mptr = (struct hlist_node  const  *)n;
#line 4347
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4347
    if (1 != 0) {
#line 4348
      goto ldv_53024;
    } else {
#line 4350
      goto ldv_53023;
    }
  } else {

  }
  ldv_53023: ;
#line 4359
  return (0);
}
}
#line 4365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4372
  spin_lock_irq(& mdev->req_lock);
#line 4373
  req = (*validator)(mdev, id, sector);
#line 4374
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4374
  if (tmp != 0L) {
#line 4375
    spin_unlock_irq(& mdev->req_lock);
#line 4377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4379
    return (0);
  } else {

  }
#line 4381
  __req_mod(req, what, & m);
#line 4382
  spin_unlock_irq(& mdev->req_lock);
#line 4384
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4385
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4386
  return (1);
}
}
#line 4389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4391
  p = (struct p_block_ack *)h;
#line 4392
  tmp = __fswab64(p->sector);
#line 4392
  sector = (sector_t )tmp;
#line 4393
  tmp___0 = __fswab32(p->blksize);
#line 4393
  blksize = (int )tmp___0;
#line 4396
  tmp___1 = __fswab32(p->seq_num);
#line 4396
  update_peer_seq(mdev, tmp___1);
#line 4398
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4399
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4399U);
#line 4400
    atomic_dec(& mdev->rs_pending_cnt);
#line 4400
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4400
    if (tmp___3 < 0) {
#line 4400
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4400
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4400, tmp___2);
    } else {

    }
#line 4401
    return (1);
  } else {

  }
#line 4403
  tmp___4 = __fswab16((int )h->command);
#line 4403
  switch ((int )tmp___4) {
  case 23: ;
#line 4405
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4405
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4405);
  } else {

  }
#line 4406
  what = write_acked_by_peer_and_sis;
#line 4407
  goto ldv_53053;
  case 22: ;
#line 4409
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4409);
  } else {

  }
#line 4410
  what = write_acked_by_peer;
#line 4411
  goto ldv_53053;
  case 21: ;
#line 4413
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4413
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4413);
  } else {

  }
#line 4414
  what = recv_acked_by_peer;
#line 4415
  goto ldv_53053;
  case 24: ;
#line 4417
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4417
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4417);
  } else {

  }
#line 4418
  what = conflict_discarded_by_peer;
#line 4419
  goto ldv_53053;
  default: 
#line 4421
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4421);
#line 4422
  return (0);
  }
  ldv_53053: 
#line 4425
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4425
  return (tmp___5);
}
}
#line 4429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4431
  p = (struct p_block_ack *)h;
#line 4432
  tmp = __fswab64(p->sector);
#line 4432
  sector = (sector_t )tmp;
#line 4433
  tmp___0 = __fswab32(p->blksize);
#line 4433
  size = (int )tmp___0;
#line 4437
  tmp___1 = __fswab32(p->seq_num);
#line 4437
  update_peer_seq(mdev, tmp___1);
#line 4439
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4440
    atomic_dec(& mdev->rs_pending_cnt);
#line 4440
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4440
    if (tmp___3 < 0) {
#line 4440
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4440
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4440, tmp___2);
    } else {

    }
#line 4441
    drbd_rs_failed_io(mdev, sector, size);
#line 4442
    return (1);
  } else {

  }
#line 4445
  spin_lock_irq(& mdev->req_lock);
#line 4446
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4447
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4448
    spin_unlock_irq(& mdev->req_lock);
#line 4449
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4457
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4457U);
#line 4458
      return (1);
    } else {
#line 4460
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4462
      return (0);
    }
  } else {

  }
#line 4465
  __req_mod(req, neg_acked, & m);
#line 4466
  spin_unlock_irq(& mdev->req_lock);
#line 4468
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4469
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4470
  return (1);
}
}
#line 4473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4475
  p = (struct p_block_ack *)h;
#line 4476
  tmp = __fswab64(p->sector);
#line 4476
  sector = (sector_t )tmp;
#line 4478
  tmp___0 = __fswab32(p->seq_num);
#line 4478
  update_peer_seq(mdev, tmp___0);
#line 4479
  tmp___1 = __fswab32(p->blksize);
#line 4479
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4482
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4482
  return (tmp___2);
}
}
#line 4486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4490
  p = (struct p_block_ack *)h;
#line 4492
  tmp = __fswab64(p->sector);
#line 4492
  sector = (sector_t )tmp;
#line 4493
  tmp___0 = __fswab32(p->blksize);
#line 4493
  size = (int )tmp___0;
#line 4495
  tmp___1 = __fswab32(p->seq_num);
#line 4495
  update_peer_seq(mdev, tmp___1);
#line 4497
  atomic_dec(& mdev->rs_pending_cnt);
#line 4497
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4497
  if (tmp___3 < 0) {
#line 4497
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4497, tmp___2);
  } else {

  }
#line 4499
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4499
  if (tmp___5 != 0) {
#line 4500
    drbd_rs_complete_io(mdev, sector);
#line 4501
    tmp___4 = __fswab16((int )h->command);
#line 4501
    switch ((int )tmp___4) {
    case 27: 
#line 4503
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4505
    goto ldv_53091;
    default: 
#line 4507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4507);
#line 4508
    put_ldev(mdev);
#line 4509
    return (0);
    }
    ldv_53091: 
#line 4511
    put_ldev(mdev);
  } else {

  }
#line 4514
  return (1);
}
}
#line 4517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4519
  p = (struct p_barrier_ack *)h;
#line 4521
  tmp = __fswab32(p->set_size);
#line 4521
  tl_release(mdev, p->barrier, tmp);
#line 4523
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4523
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4523
    if (tmp___0 == 0) {
#line 4523
      tmp___1 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 4523
      if (tmp___1 == 0) {
#line 4526
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4527
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4530
  return (1);
}
}
#line 4533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4535
  p = (struct p_block_ack *)h;
#line 4540
  tmp = __fswab64(p->sector);
#line 4540
  sector = (sector_t )tmp;
#line 4541
  tmp___0 = __fswab32(p->blksize);
#line 4541
  size = (int )tmp___0;
#line 4543
  tmp___1 = __fswab32(p->seq_num);
#line 4543
  update_peer_seq(mdev, tmp___1);
#line 4545
  tmp___2 = __fswab64(p->block_id);
#line 4545
  if (tmp___2 == 4712ULL) {
#line 4546
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4548
    ov_oos_print(mdev);
  }
#line 4550
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4550
  if (tmp___3 == 0) {
#line 4551
    return (1);
  } else {

  }
#line 4553
  drbd_rs_complete_io(mdev, sector);
#line 4554
  atomic_dec(& mdev->rs_pending_cnt);
#line 4554
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4554
  if (tmp___5 < 0) {
#line 4554
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4554
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4554, tmp___4);
  } else {

  }
#line 4556
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4559
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4560
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4562
  if (mdev->ov_left == 0UL) {
#line 4563
    tmp___6 = kmalloc(24UL, 16U);
#line 4563
    w = (struct drbd_work *)tmp___6;
#line 4564
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4565
      w->cb = & w_ov_finished;
#line 4566
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4568
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4569
      ov_oos_print(mdev);
#line 4570
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4573
  put_ldev(mdev);
#line 4574
  return (1);
}
}
#line 4577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4579
  return (1);
}
}
#line 4587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4589
  asender_tbl[0].pkt_size = 0UL;
#line 4589
  asender_tbl[0].process = 0;
#line 4589
  asender_tbl[1].pkt_size = 0UL;
#line 4589
  asender_tbl[1].process = 0;
#line 4589
  asender_tbl[2].pkt_size = 0UL;
#line 4589
  asender_tbl[2].process = 0;
#line 4589
  asender_tbl[3].pkt_size = 0UL;
#line 4589
  asender_tbl[3].process = 0;
#line 4589
  asender_tbl[4].pkt_size = 0UL;
#line 4589
  asender_tbl[4].process = 0;
#line 4589
  asender_tbl[5].pkt_size = 0UL;
#line 4589
  asender_tbl[5].process = 0;
#line 4589
  asender_tbl[6].pkt_size = 0UL;
#line 4589
  asender_tbl[6].process = 0;
#line 4589
  asender_tbl[7].pkt_size = 0UL;
#line 4589
  asender_tbl[7].process = 0;
#line 4589
  asender_tbl[8].pkt_size = 0UL;
#line 4589
  asender_tbl[8].process = 0;
#line 4589
  asender_tbl[9].pkt_size = 0UL;
#line 4589
  asender_tbl[9].process = 0;
#line 4589
  asender_tbl[10].pkt_size = 0UL;
#line 4589
  asender_tbl[10].process = 0;
#line 4589
  asender_tbl[11].pkt_size = 0UL;
#line 4589
  asender_tbl[11].process = 0;
#line 4589
  asender_tbl[12].pkt_size = 0UL;
#line 4589
  asender_tbl[12].process = 0;
#line 4589
  asender_tbl[13].pkt_size = 0UL;
#line 4589
  asender_tbl[13].process = 0;
#line 4589
  asender_tbl[14].pkt_size = 0UL;
#line 4589
  asender_tbl[14].process = 0;
#line 4589
  asender_tbl[15].pkt_size = 0UL;
#line 4589
  asender_tbl[15].process = 0;
#line 4589
  asender_tbl[16].pkt_size = 0UL;
#line 4589
  asender_tbl[16].process = 0;
#line 4589
  asender_tbl[17].pkt_size = 0UL;
#line 4589
  asender_tbl[17].process = 0;
#line 4589
  asender_tbl[18].pkt_size = 0UL;
#line 4589
  asender_tbl[18].process = 0;
#line 4589
  asender_tbl[19].pkt_size = 8UL;
#line 4589
  asender_tbl[19].process = & got_Ping;
#line 4589
  asender_tbl[20].pkt_size = 8UL;
#line 4589
  asender_tbl[20].process = & got_PingAck;
#line 4589
  asender_tbl[21].pkt_size = 32UL;
#line 4589
  asender_tbl[21].process = & got_BlockAck;
#line 4589
  asender_tbl[22].pkt_size = 32UL;
#line 4589
  asender_tbl[22].process = & got_BlockAck;
#line 4589
  asender_tbl[23].pkt_size = 32UL;
#line 4589
  asender_tbl[23].process = & got_BlockAck;
#line 4589
  asender_tbl[24].pkt_size = 32UL;
#line 4589
  asender_tbl[24].process = & got_BlockAck;
#line 4589
  asender_tbl[25].pkt_size = 32UL;
#line 4589
  asender_tbl[25].process = & got_NegAck;
#line 4589
  asender_tbl[26].pkt_size = 32UL;
#line 4589
  asender_tbl[26].process = & got_NegDReply;
#line 4589
  asender_tbl[27].pkt_size = 32UL;
#line 4589
  asender_tbl[27].process = & got_NegRSDReply;
#line 4589
  asender_tbl[28].pkt_size = 16UL;
#line 4589
  asender_tbl[28].process = & got_BarrierAck;
#line 4589
  asender_tbl[29].pkt_size = 12UL;
#line 4589
  asender_tbl[29].process = & got_RqSReply;
#line 4589
  asender_tbl[30].pkt_size = 0UL;
#line 4589
  asender_tbl[30].process = 0;
#line 4589
  asender_tbl[31].pkt_size = 0UL;
#line 4589
  asender_tbl[31].process = 0;
#line 4589
  asender_tbl[32].pkt_size = 32UL;
#line 4589
  asender_tbl[32].process = & got_OVResult;
#line 4589
  asender_tbl[33].pkt_size = 0UL;
#line 4589
  asender_tbl[33].process = 0;
#line 4589
  asender_tbl[34].pkt_size = 32UL;
#line 4589
  asender_tbl[34].process = & got_IsInSync;
#line 4589
  asender_tbl[35].pkt_size = 0UL;
#line 4589
  asender_tbl[35].process = 0;
#line 4589
  asender_tbl[36].pkt_size = 0UL;
#line 4589
  asender_tbl[36].process = 0;
#line 4589
  asender_tbl[37].pkt_size = 0UL;
#line 4589
  asender_tbl[37].process = 0;
#line 4589
  asender_tbl[38].pkt_size = 0UL;
#line 4589
  asender_tbl[38].process = 0;
#line 4589
  asender_tbl[39].pkt_size = 16UL;
#line 4589
  asender_tbl[39].process = & got_skip;
#line 4589
  asender_tbl[40].pkt_size = 0UL;
#line 4589
  asender_tbl[40].process = 0;
#line 4589
  asender_tbl[41].pkt_size = 32UL;
#line 4589
  asender_tbl[41].process = & got_NegRSDReply;
#line 4589
  asender_tbl[42].pkt_size = 0UL;
#line 4589
  asender_tbl[42].process = 0;
#line 4610
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4611
    return (0);
  } else {

  }
#line 4612
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4617
  mdev = thi->mdev;
#line 4618
  h = & mdev->meta.rbuf.header.h80;
#line 4619
  cmd = 0;
#line 4622
  buf = (void *)h;
#line 4623
  received = 0;
#line 4624
  expect = 8;
#line 4626
  ping_timeout_active = 0;
#line 4628
  tmp = mdev_to_minor(mdev);
#line 4628
  tmp___0 = get_current();
#line 4628
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4630
  tmp___1 = get_current();
#line 4630
  tmp___1->policy = 2U;
#line 4631
  tmp___2 = get_current();
#line 4631
  tmp___2->rt_priority = 2U;
#line 4633
  goto ldv_53142;
  ldv_53152: 
#line 4634
  drbd_thread_current_set_cpu(mdev);
#line 4635
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4635
  if (tmp___4 != 0) {
#line 4636
    tmp___3 = drbd_send_ping(mdev);
#line 4636
    _b = tmp___3 == 0;
#line 4636
    if (_b != 0) {
#line 4636
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4636);
    } else {

    }
#line 4636
    if (_b != 0) {
#line 4636
      goto reconnect;
    } else {

    }
#line 4637
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4639
    ping_timeout_active = 1;
  } else {

  }
#line 4644
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4644
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4644
    if (tmp___5 > 3) {
#line 4646
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_53141: 
#line 4648
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4649
  tmp___6 = get_current();
#line 4649
  flush_signals(tmp___6);
#line 4650
  tmp___7 = drbd_process_done_ee(mdev);
#line 4650
  if (tmp___7 == 0) {
#line 4651
    goto reconnect;
  } else {

  }
#line 4653
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4654
  spin_lock_irq(& mdev->req_lock);
#line 4655
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4656
  spin_unlock_irq(& mdev->req_lock);
#line 4660
  if (empty != 0) {
#line 4661
    goto ldv_53140;
  } else {

  }
#line 4662
  goto ldv_53141;
  ldv_53140: ;
#line 4664
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4665
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4668
  tmp___8 = get_current();
#line 4668
  tmp___9 = signal_pending(tmp___8);
#line 4668
  if (tmp___9 != 0) {
#line 4669
    goto ldv_53142;
  } else {

  }
#line 4671
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4673
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4675
  tmp___10 = get_current();
#line 4675
  flush_signals(tmp___10);
#line 4687
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4687
  if (tmp___11 != 0L) {
#line 4688
    received = received + rv;
#line 4689
    buf = buf + (unsigned long )rv;
  } else
#line 4690
  if (rv == 0) {
#line 4691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4692
    goto reconnect;
  } else
#line 4693
  if (rv == -11) {
#line 4696
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4698
      goto ldv_53142;
    } else {

    }
#line 4699
    if (ping_timeout_active != 0) {
#line 4700
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4701
      goto reconnect;
    } else {

    }
#line 4703
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4704
    goto ldv_53142;
  } else
#line 4705
  if (rv == -4) {
#line 4706
    goto ldv_53142;
  } else {
#line 4708
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4709
    goto reconnect;
  }
#line 4712
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4713
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4713
    if (tmp___15 != 0L) {
#line 4714
      tmp___12 = __fswab16((int )h->length);
#line 4714
      tmp___13 = __fswab16((int )h->command);
#line 4714
      tmp___14 = __fswab32(h->magic);
#line 4714
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4718
      goto reconnect;
    } else {

    }
#line 4720
    tmp___16 = __fswab16((int )h->command);
#line 4720
    cmd = get_asender_cmd((int )tmp___16);
#line 4721
    tmp___17 = __fswab16((int )h->length);
#line 4721
    len = (int )tmp___17;
#line 4722
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4722
    if (tmp___21 != 0L) {
#line 4723
      tmp___18 = __fswab16((int )h->length);
#line 4723
      tmp___19 = __fswab16((int )h->command);
#line 4723
      tmp___20 = __fswab32(h->magic);
#line 4723
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4727
      goto disconnect;
    } else {

    }
#line 4729
    expect = (int )cmd->pkt_size;
#line 4730
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4730
    if (_b___0 != 0) {
#line 4730
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4730);
    } else {

    }
#line 4730
    if (_b___0 != 0) {
#line 4731
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4733
  if (received == expect) {
#line 4734
    mdev->last_received = jiffies;
#line 4735
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4735
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4735);
    } else {

    }
#line 4736
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4736
    if (tmp___22 == 0) {
#line 4737
      goto reconnect;
    } else {

    }
#line 4741
    tmp___23 = get_asender_cmd(20);
#line 4741
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4742
      ping_timeout_active = 0;
    } else {

    }
#line 4744
    buf = (void *)h;
#line 4745
    received = 0;
#line 4746
    expect = 8;
#line 4747
    cmd = 0;
  } else {

  }
  ldv_53142: 
#line 4633
  tmp___24 = get_t_state(thi);
#line 4633
  if ((unsigned int )tmp___24 == 1U) {
#line 4634
    goto ldv_53152;
  } else {

  }

#line 4751
  if (0) {
    reconnect: 
#line 4753
    val.i = 0U;
#line 4753
    val.ldv_40583.conn = 5U;
#line 4753
    mask.i = 0U;
#line 4753
    mask.ldv_40583.conn = 31U;
#line 4753
    drbd_force_state(mdev, mask, val);
#line 4754
    drbd_md_sync(mdev);
  } else {

  }
#line 4756
  if (0) {
    disconnect: 
#line 4758
    val___0.i = 0U;
#line 4758
    val___0.ldv_40583.conn = 1U;
#line 4758
    mask___0.i = 0U;
#line 4758
    mask___0.ldv_40583.conn = 31U;
#line 4758
    drbd_force_state(mdev, mask___0, val___0);
#line 4759
    drbd_md_sync(mdev);
  } else {

  }
#line 4761
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4763
  if ((int )mdev->state.ldv_40583.conn > 9) {
#line 4763
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4763);
  } else {

  }
#line 4764
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4766
  return (0);
}
}
#line 4806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4818
  LDV_IN_INTERRUPT = 1;
#line 4827
  ldv_initialize();
#line 4829
  goto ldv_53181;
  ldv_53180: 
#line 4832
  tmp = nondet_int();
#line 4832
  switch (tmp) {
  default: ;
#line 4834
  goto ldv_53179;
  }
  ldv_53179: ;
  ldv_53181: 
#line 4829
  tmp___0 = nondet_int();
#line 4829
  if (tmp___0 != 0) {
#line 4830
    goto ldv_53180;
  } else {

  }


#line 4843
  ldv_check_final_state();
#line 4846
  return;
}
}
#line 4850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv___module_get_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4855
  ldv_module_get(ldv_func_arg1);
#line 4856
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 273 "include/linux/rcupdate.h"
extern int rcu_is_cpu_idle(void) ;
#line 287 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 289
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 291
  return;
}
}
#line 292 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 294
  lock_release(map, 1, (unsigned long )((void *)0));
#line 296
  return;
}
}
#line 297
extern struct lockdep_map rcu_lock_map ;
#line 300
extern int debug_lockdep_rcu_enabled(void) ;
#line 732 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 734
  pagefault_disable();
#line 736
  rcu_lock_acquire(& rcu_lock_map);
#line 737
  tmp = debug_lockdep_rcu_enabled();
#line 737
  if (tmp != 0 && ! __warned) {
#line 737
    tmp___0 = rcu_is_cpu_idle();
#line 737
    if (tmp___0 != 0) {
#line 737
      __warned = 1;
#line 737
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 738, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 740
  return;
}
}
#line 756 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  tmp = debug_lockdep_rcu_enabled();
#line 758
  if (tmp != 0 && ! __warned) {
#line 758
    tmp___0 = rcu_is_cpu_idle();
#line 758
    if (tmp___0 != 0) {
#line 758
      __warned = 1;
#line 758
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 759, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 760
  rcu_lock_release(& rcu_lock_map);
#line 762
  pagefault_enable();
#line 763
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 201 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 203
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 203
  if (tmp != 0L) {
#line 204
    if (part->partno != 0) {
#line 205
      __mptr = (struct device  const  *)part->__dev.parent;
#line 205
      return ((struct gendisk *)__mptr + 0xffffffffffffff90UL);
    } else {
#line 207
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 207
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff90UL);
    }
  } else {

  }
#line 209
  return (0);
}
}
#line 373 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 375
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 376
  if (part->partno != 0) {
#line 377
    tmp = part_to_disk(part);
#line 377
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 378
  return;
}
}
#line 380 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 382
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 383
  if (part->partno != 0) {
#line 384
    tmp = part_to_disk(part);
#line 384
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 385
  return;
}
}
#line 406
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 209 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 210
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1232
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1506
mempool_t *drbd_request_mempool ;
#line 1549
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1551
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 2105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2107
  atomic_inc(& mdev->ap_pending_cnt);
#line 2108
  return;
}
}
#line 2285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2287
  mxb = 1000000;
#line 2288
  tmp = get_net_conf(mdev);
#line 2288
  if (tmp != 0) {
#line 2289
    mxb = (mdev->net_conf)->max_buffers;
#line 2290
    put_net_conf(mdev);
  } else {

  }
#line 2292
  return (mxb);
}
}
#line 2295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2297
  s = mdev->state;
#line 2302
  switch ((unsigned int )s.ldv_40583.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2327
  goto ldv_51007;
  case 13U: ;
#line 2331
  if (mdev->agreed_pro_version <= 95) {
#line 2332
    return (0);
  } else {

  }
#line 2333
  goto ldv_51007;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2340
  return (0);
  }
  ldv_51007: ;
#line 2343
  switch ((unsigned int )s.ldv_40583.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2351
  goto ldv_51018;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2359
  return (0);
  }
  ldv_51018: ;
#line 2362
  return (1);
}
}
#line 2370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2372
  tmp = drbd_get_max_buffers(mdev);
#line 2372
  mxb = tmp;
#line 2374
  tmp___0 = is_susp(mdev->state);
#line 2374
  if (tmp___0 != 0) {
#line 2375
    return (0);
  } else {

  }
#line 2376
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2376
  if (tmp___1 != 0) {
#line 2377
    return (0);
  } else {

  }
#line 2384
  tmp___2 = drbd_state_is_stable(mdev);
#line 2384
  if (tmp___2 == 0) {
#line 2385
    return (0);
  } else {

  }
#line 2389
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2389
  if (tmp___3 > mxb) {
#line 2390
    return (0);
  } else {

  }
#line 2391
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2391
  if (tmp___4 != 0) {
#line 2392
    return (0);
  } else {

  }
#line 2393
  return (1);
}
}
#line 2396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2398
  rv = 0;
#line 2400
  spin_lock_irq(& mdev->req_lock);
#line 2401
  rv = may_inc_ap_bio(mdev);
#line 2402
  if ((int )rv) {
#line 2403
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2404
  spin_unlock_irq(& mdev->req_lock);
#line 2406
  return (rv);
}
}
#line 2409 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2419
  tmp = inc_ap_bio_cond(mdev, count);
#line 2419
  if ((int )tmp) {
#line 2419
    goto ldv_51039;
  } else {

  }
#line 2419
  tmp___0 = get_current();
#line 2419
  __wait.flags = 0U;
#line 2419
  __wait.private = (void *)tmp___0;
#line 2419
  __wait.func = & autoremove_wake_function;
#line 2419
  __wait.task_list.next = & __wait.task_list;
#line 2419
  __wait.task_list.prev = & __wait.task_list;
  ldv_51042: 
#line 2419
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2419
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2419
  if ((int )tmp___1) {
#line 2419
    goto ldv_51041;
  } else {

  }
#line 2419
  schedule();
#line 2419
  goto ldv_51042;
  ldv_51041: 
#line 2419
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51039: ;
#line 2422
  return;
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2424
  tmp = drbd_get_max_buffers(mdev);
#line 2424
  mxb = tmp;
#line 2425
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2425
  ap_bio = tmp___0;
#line 2427
  if (ap_bio < 0) {
#line 2427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2427);
  } else {

  }
#line 2429
  if (ap_bio == 0) {
#line 2429
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2429
    if (tmp___2 != 0) {
#line 2430
      tmp___1 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 2430
      if (tmp___1 == 0) {
#line 2431
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2437
  if (ap_bio < mxb) {
#line 2438
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2439
  return;
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_51152: ;
#line 234
    goto ldv_51152;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_51157: ;
#line 243
    goto ldv_51157;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 288
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 288
  req = (struct drbd_request *)tmp;
#line 290
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 290
  if (tmp___0 != 0L) {
#line 291
    drbd_req_make_private_bio(req, bio_src);
#line 293
    req->rq_state = (int )bio_src->bi_rw & 1 ? 2048UL : 0UL;
#line 294
    req->mdev = mdev;
#line 295
    req->master_bio = bio_src;
#line 296
    req->epoch = 0U;
#line 297
    req->sector = bio_src->bi_sector;
#line 298
    req->size = bio_src->bi_size;
#line 299
    INIT_HLIST_NODE(& req->collision);
#line 300
    INIT_LIST_HEAD(& req->tl_requests);
#line 301
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 303
  return (req);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 308
  mempool_free((void *)req, drbd_request_mempool);
#line 309
  return;
}
}
#line 324
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 330
void request_timer_fn(unsigned long data ) ;
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 373
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_40583.pdsk > 3 && (int )s.ldv_40583.conn > 13) && (int )s.ldv_40583.conn <= 21)));
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 383
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  tmp = current_thread_info();
#line 46
  tmp->preempt_count = tmp->preempt_count + 1;
#line 46
  __asm__  volatile   ("": : : "memory");
#line 46
  __vpp_verify = 0;
#line 46
  switch (4UL) {
  case 1UL: ;
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_51249;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_51249;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_51249;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_51249;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_51249: 
#line 46
  pscr_ret__ = pfo_ret__;
#line 46
  goto ldv_51255;
  case 2UL: ;
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 46
  goto ldv_51259;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 46
  goto ldv_51259;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 46
  goto ldv_51259;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 46
  goto ldv_51259;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_51259: 
#line 46
  pscr_ret__ = pfo_ret_____0;
#line 46
  goto ldv_51255;
  case 4UL: ;
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 46
  goto ldv_51268;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 46
  goto ldv_51268;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 46
  goto ldv_51268;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 46
  goto ldv_51268;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_51268: 
#line 46
  pscr_ret__ = pfo_ret_____1;
#line 46
  goto ldv_51255;
  case 8UL: ;
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 46
  goto ldv_51277;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 46
  goto ldv_51277;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 46
  goto ldv_51277;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 46
  goto ldv_51277;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_51277: 
#line 46
  pscr_ret__ = pfo_ret_____2;
#line 46
  goto ldv_51255;
  default: 
#line 46
  __bad_size_call_parameter();
#line 46
  goto ldv_51255;
  }
  ldv_51255: 
#line 46
  cpu = pscr_ret__;
#line 47
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 48
  __vpp_verify___0 = 0;
#line 48
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___1 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 49
  __vpp_verify___2 = 0;
#line 49
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 49
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 49
  if ((mdev->vdisk)->part0.partno != 0) {
#line 49
    __vpp_verify___3 = 0;
#line 49
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 49
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 49
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 50
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 51
  __asm__  volatile   ("": : : "memory");
#line 51
  tmp___2 = current_thread_info();
#line 51
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 51
  __asm__  volatile   ("": : : "memory");
#line 51
  rcu_read_unlock();
#line 52
  return;
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 57
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 58
  duration = (unsigned long )jiffies - req->start_time;
#line 60
  rcu_read_lock();
#line 60
  tmp = current_thread_info();
#line 60
  tmp->preempt_count = tmp->preempt_count + 1;
#line 60
  __asm__  volatile   ("": : : "memory");
#line 60
  __vpp_verify = 0;
#line 60
  switch (4UL) {
  case 1UL: ;
#line 60
  switch (4UL) {
  case 1UL: 
#line 60
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 60
  goto ldv_51315;
  case 2UL: 
#line 60
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 60
  goto ldv_51315;
  case 4UL: 
#line 60
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 60
  goto ldv_51315;
  case 8UL: 
#line 60
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 60
  goto ldv_51315;
  default: 
#line 60
  __bad_percpu_size();
  }
  ldv_51315: 
#line 60
  pscr_ret__ = pfo_ret__;
#line 60
  goto ldv_51321;
  case 2UL: ;
#line 60
  switch (4UL) {
  case 1UL: 
#line 60
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 60
  goto ldv_51325;
  case 2UL: 
#line 60
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 60
  goto ldv_51325;
  case 4UL: 
#line 60
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 60
  goto ldv_51325;
  case 8UL: 
#line 60
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 60
  goto ldv_51325;
  default: 
#line 60
  __bad_percpu_size();
  }
  ldv_51325: 
#line 60
  pscr_ret__ = pfo_ret_____0;
#line 60
  goto ldv_51321;
  case 4UL: ;
#line 60
  switch (4UL) {
  case 1UL: 
#line 60
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 60
  goto ldv_51334;
  case 2UL: 
#line 60
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 60
  goto ldv_51334;
  case 4UL: 
#line 60
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 60
  goto ldv_51334;
  case 8UL: 
#line 60
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 60
  goto ldv_51334;
  default: 
#line 60
  __bad_percpu_size();
  }
  ldv_51334: 
#line 60
  pscr_ret__ = pfo_ret_____1;
#line 60
  goto ldv_51321;
  case 8UL: ;
#line 60
  switch (4UL) {
  case 1UL: 
#line 60
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 60
  goto ldv_51343;
  case 2UL: 
#line 60
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 60
  goto ldv_51343;
  case 4UL: 
#line 60
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 60
  goto ldv_51343;
  case 8UL: 
#line 60
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 60
  goto ldv_51343;
  default: 
#line 60
  __bad_percpu_size();
  }
  ldv_51343: 
#line 60
  pscr_ret__ = pfo_ret_____2;
#line 60
  goto ldv_51321;
  default: 
#line 60
  __bad_size_call_parameter();
#line 60
  goto ldv_51321;
  }
  ldv_51321: 
#line 60
  cpu = pscr_ret__;
#line 61
  __vpp_verify___0 = 0;
#line 61
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 61
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 61
  if ((mdev->vdisk)->part0.partno != 0) {
#line 61
    __vpp_verify___1 = 0;
#line 61
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 61
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 61
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 62
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 63
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 64
  __asm__  volatile   ("": : : "memory");
#line 64
  tmp___1 = current_thread_info();
#line 64
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 64
  __asm__  volatile   ("": : : "memory");
#line 64
  rcu_read_unlock();
#line 65
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 69
  s = req->rq_state;
#line 77
  list_del(& req->tl_requests);
#line 82
  if ((int )rw == 1) {
#line 87
    if ((s & 256UL) == 0UL || (s & 4UL) == 0UL) {
#line 88
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             88U);
    } else {

    }
#line 90
    if (((s & 256UL) != 0UL && (s & 4UL) != 0UL) && (s & 512UL) != 0UL) {
#line 91
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         91U);
    } else {

    }
#line 103
    if ((s & 15UL) != 0UL) {
#line 104
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 104
      if (tmp___0 != 0) {
#line 105
        if ((s & 4096UL) != 0UL) {
#line 106
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 107
        put_ldev(mdev);
      } else {
#line 108
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 108
        if (tmp != 0) {
#line 109
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 116
  drbd_req_free(req);
#line 117
  return;
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 128
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 128
  if (tmp != 0) {
#line 129
    return;
  } else {

  }
#line 131
  b = mdev->newest_tle;
#line 132
  b->w.cb = & w_send_barrier;
#line 137
  inc_ap_pending(mdev);
#line 138
  drbd_queue_work(& mdev->data.work, & b->w);
#line 139
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 140
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 145
  s = req->rq_state;
#line 157
  if (((int )mdev->state.ldv_40583.conn > 9 && (s & 64UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 160
    queue_barrier(mdev);
  } else {

  }
#line 165
  if ((s & 128UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 166
    sector = req->sector;
#line 167
    size = (int const   )req->size;
#line 173
    slot = tl_hash_slot___0(mdev, sector);
#line 174
    n = slot->first;
#line 174
    goto ldv_51387;
    ldv_51386: 
#line 175
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 175
    if (tmp != 0) {
#line 176
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 174
    n = n->next;
    ldv_51387: ;
#line 174
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 174
      __mptr = (struct hlist_node  const  *)n;
#line 174
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 174
      if (1 != 0) {
#line 175
        goto ldv_51386;
      } else {
#line 177
        goto ldv_51388;
      }
    } else {

    }
    ldv_51388: 
#line 197
    slot = ee_hash_slot___0(mdev, req->sector);
#line 198
    n = slot->first;
#line 198
    goto ldv_51394;
    ldv_51393: 
#line 199
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 199
    if (tmp___0 != 0) {
#line 200
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 201
      goto ldv_51392;
    } else {

    }
#line 198
    n = n->next;
    ldv_51394: ;
#line 198
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 198
      __mptr___0 = (struct hlist_node  const  *)n;
#line 198
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 198
      if (1 != 0) {
#line 199
        goto ldv_51393;
      } else {
#line 201
        goto ldv_51392;
      }
    } else {

    }
    ldv_51392: ;
  } else {

  }
#line 204
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 211
  bio_endio(m->bio, m->error);
#line 212
  dec_ap_bio(mdev);
#line 213
  return;
}
}
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 223
  s = req->rq_state;
#line 224
  mdev = req->mdev;
#line 225
  rw = (req->rq_state & 2048UL) != 0UL;
#line 236
  if ((s & 32UL) != 0UL) {
#line 237
    return;
  } else {

  }
#line 238
  if ((s & 16UL) != 0UL) {
#line 239
    return;
  } else {

  }
#line 240
  if ((int )s & 1 && (s & 8UL) == 0UL) {
#line 241
    return;
  } else {

  }
#line 243
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 265
    ok = (s & 4UL) != 0UL || (s & 256UL) != 0UL;
#line 266
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 266
    error = (int )tmp;
#line 270
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 270
    if (tmp___0 == 0) {
#line 271
      hlist_del(& req->collision);
    } else
#line 273
    if ((s & 880UL) != 0UL) {
#line 273
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              273);
    } else {

    }
#line 276
    if (rw == 1) {
#line 277
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 280
    _drbd_end_io_acct(mdev, req);
#line 282
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 283
    m->bio = req->master_bio;
#line 284
    req->master_bio = 0;
  } else {

  }
#line 287
  if ((int )s & 1) {
#line 288
    return;
  } else {

  }
#line 290
  if ((s & 1008UL) == 0UL || (s & 128UL) != 0UL) {
#line 295
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 296
  return;
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 303
  mdev = req->mdev;
#line 305
  tmp = is_susp(mdev->state);
#line 305
  if (tmp == 0) {
#line 306
    _req_may_be_done(req, m);
  } else {

  }
#line 307
  return;
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 334
  mdev = req->mdev;
#line 335
  sector = req->sector;
#line 336
  size = (int const   )req->size;
#line 342
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 342
  if (tmp == 0) {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            342);
  } else {

  }
#line 344
  tmp___0 = get_net_conf(mdev);
#line 344
  if (tmp___0 == 0) {
#line 345
    return (0);
  } else {

  }
#line 348
  _b = mdev->tl_hash_s == 0U;
#line 348
  if (_b != 0) {
#line 348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            348);
  } else {

  }
#line 348
  if (_b != 0) {
#line 349
    goto out_no_conflict;
  } else {

  }
#line 350
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 350
  if (tmp___1 != 0L) {
#line 350
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (350), "i" (12UL));
    ldv_51427: ;
#line 350
    goto ldv_51427;
  } else {

  }
#line 353
  slot = tl_hash_slot___0(mdev, sector);
#line 354
  n = slot->first;
#line 354
  goto ldv_51433;
  ldv_51432: 
#line 355
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 355
  if (tmp___4 != 0) {
#line 356
    tmp___2 = get_current();
#line 356
    tmp___3 = get_current();
#line 356
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 362
    goto out_conflict;
  } else {

  }
#line 354
  n = n->next;
  ldv_51433: ;
#line 354
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 354
    __mptr = (struct hlist_node  const  *)n;
#line 354
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 354
    if (1 != 0) {
#line 355
      goto ldv_51432;
    } else {
#line 357
      goto ldv_51434;
    }
  } else {

  }
  ldv_51434: ;
#line 366
  if (mdev->ee_hash_s != 0U) {
#line 368
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 368
    if (tmp___5 != 0L) {
#line 368
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (368), "i" (12UL));
      ldv_51435: ;
#line 368
      goto ldv_51435;
    } else {

    }
#line 371
    slot = ee_hash_slot___0(mdev, sector);
#line 372
    n = slot->first;
#line 372
    goto ldv_51440;
    ldv_51439: 
#line 373
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 373
    if (tmp___8 != 0) {
#line 374
      tmp___6 = get_current();
#line 374
      tmp___7 = get_current();
#line 374
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 380
      goto out_conflict;
    } else {

    }
#line 372
    n = n->next;
    ldv_51440: ;
#line 372
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 372
      __mptr___0 = (struct hlist_node  const  *)n;
#line 372
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 372
      if (1 != 0) {
#line 373
        goto ldv_51439;
      } else {
#line 375
        goto ldv_51441;
      }
    } else {

    }
    ldv_51441: ;
  } else {

  }
  out_no_conflict: 
#line 389
  put_net_conf(mdev);
#line 390
  return (0);
  out_conflict: 
#line 393
  put_net_conf(mdev);
#line 394
  return (1);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 412
  mdev = req->mdev;
#line 413
  rv = 0;
#line 414
  m->bio = 0;
#line 416
  switch ((unsigned int )what) {
  default: 
#line 418
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          418);
#line 419
  goto ldv_51450;
  case 1U: ;
#line 430
  if ((req->rq_state & 1008UL) != 0UL) {
#line 430
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            430);
  } else {

  }
#line 431
  req->rq_state = req->rq_state | 16UL;
#line 432
  inc_ap_pending(mdev);
#line 433
  goto ldv_51450;
  case 2U: ;
#line 437
  if ((req->rq_state & 15UL) != 0UL) {
#line 437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            437);
  } else {

  }
#line 438
  req->rq_state = req->rq_state | 1UL;
#line 439
  goto ldv_51450;
  case 23U: ;
#line 442
  if ((req->rq_state & 2048UL) != 0UL) {
#line 443
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 445
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 447
  req->rq_state = req->rq_state | 6UL;
#line 448
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 450
  _req_may_be_done_not_susp(req, m);
#line 451
  goto ldv_51450;
  case 22U: 
#line 454
  req->rq_state = req->rq_state | 8UL;
#line 455
  if ((req->rq_state & 2048UL) != 0UL) {
#line 456
    _req_may_be_done_not_susp(req, m);
  } else {
#line 458
    goto goto_queue_for_net_read;
  }
#line 459
  goto ldv_51450;
  case 21U: 
#line 462
  req->rq_state = req->rq_state | 2UL;
#line 463
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 465
  __drbd_chk_io_error_(mdev, DRBD_IO_ERROR, "__req_mod");
#line 466
  _req_may_be_done_not_susp(req, m);
#line 467
  goto ldv_51450;
  case 20U: 
#line 471
  req->rq_state = req->rq_state | 2UL;
#line 472
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 473
  _req_may_be_done_not_susp(req, m);
#line 474
  goto ldv_51450;
  case 19U: 
#line 477
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         477U);
#line 479
  req->rq_state = req->rq_state | 2UL;
#line 480
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 482
  if ((req->rq_state & 8UL) != 0UL) {
#line 483
    _req_may_be_done(req, m);
#line 484
    goto ldv_51450;
  } else {

  }
#line 487
  __drbd_chk_io_error_(mdev, DRBD_IO_ERROR, "__req_mod");
  goto_queue_for_net_read: ;
#line 491
  if ((req->rq_state & 1008UL) != 0UL) {
#line 491
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            491);
  } else {

  }
#line 495
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 496
    _req_may_be_done_not_susp(req, m);
#line 497
    goto ldv_51450;
  } else {

  }
#line 501
  req->rq_state = req->rq_state | 16UL;
#line 502
  inc_ap_pending(mdev);
  case 4U: 
#line 515
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 515
  hlist_add_head(& req->collision, tmp);
#line 517
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 519
  if ((req->rq_state & 16UL) == 0UL) {
#line 519
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            519);
  } else {

  }
#line 520
  req->rq_state = req->rq_state | 32UL;
#line 521
  req->w.cb = (req->rq_state & 15UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 524
  drbd_queue_work(& mdev->data.work, & req->w);
#line 525
  goto ldv_51450;
  case 3U: 
#line 531
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 531
  hlist_add_head(& req->collision, tmp___0);
#line 551
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 555
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 555
  if (tmp___1 != 0) {
#line 555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            555);
  } else {

  }
#line 557
  req->epoch = (mdev->newest_tle)->br_number;
#line 560
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 563
  if ((req->rq_state & 16UL) == 0UL) {
#line 563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            563);
  } else {

  }
#line 564
  req->rq_state = req->rq_state | 32UL;
#line 565
  req->w.cb = & w_send_dblock;
#line 566
  drbd_queue_work(& mdev->data.work, & req->w);
#line 569
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 570
    queue_barrier(mdev);
  } else {

  }
#line 572
  goto ldv_51450;
  case 5U: 
#line 575
  req->rq_state = req->rq_state | 32UL;
#line 576
  req->w.cb = & w_send_oos;
#line 577
  drbd_queue_work(& mdev->data.work, & req->w);
#line 578
  goto ldv_51450;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 585
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 588
  _req_may_be_done_not_susp(req, m);
#line 589
  goto ldv_51450;
  case 8U: ;
#line 593
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 594
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 596
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 600
    if ((req->rq_state & 16UL) != 0UL) {
#line 601
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 601
      if (tmp___2 != 0) {
#line 601
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 601
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 601
      if (tmp___4 < 0) {
#line 601
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 601
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 601, tmp___3);
      } else {

      }
#line 602
      req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 603
      req->rq_state = req->rq_state | 256UL;
    } else {

    }
  } else {

  }
#line 609
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 610
  req->rq_state = req->rq_state | 64UL;
#line 611
  _req_may_be_done_not_susp(req, m);
#line 612
  goto ldv_51450;
  case 9U: 
#line 617
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 618
  req->rq_state = req->rq_state | 128UL;
#line 619
  _req_may_be_done_not_susp(req, m);
#line 620
  goto ldv_51450;
  case 10U: ;
#line 625
  if ((req->rq_state & 16UL) != 0UL) {
#line 626
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 626
    if (tmp___5 != 0) {
#line 626
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 626
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 626
    if (tmp___7 < 0) {
#line 626
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 626
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 626, tmp___6);
    } else {

    }
  } else {

  }
#line 627
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 628
  req->rq_state = req->rq_state | 128UL;
#line 629
  if ((req->rq_state & 64UL) != 0UL && (req->rq_state & 2048UL) != 0UL) {
#line 630
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 634
  if ((req->rq_state & 32UL) == 0UL) {
#line 635
    _req_may_be_done(req, m);
  } else {

  }
#line 636
  goto ldv_51450;
  case 15U: ;
#line 642
  if ((unsigned int )what == 15U) {
#line 643
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 646
  req->rq_state = req->rq_state | 128UL;
  case 14U: ;
  case 13U: ;
#line 650
  if ((unsigned int )what == 14U) {
#line 651
    req->rq_state = req->rq_state | 512UL;
  } else {

  }
  case 12U: 
#line 661
  req->rq_state = req->rq_state | 256UL;
#line 662
  if ((req->rq_state & 16UL) == 0UL) {
#line 662
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            662);
  } else {

  }
#line 663
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 663
  if (tmp___8 != 0) {
#line 663
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 663
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 663
  if (tmp___10 < 0) {
#line 663
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 663
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 663, tmp___9);
  } else {

  }
#line 664
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 665
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 666
  _req_may_be_done_not_susp(req, m);
#line 667
  goto ldv_51450;
  case 16U: ;
#line 671
  if ((req->rq_state & 16UL) != 0UL) {
#line 672
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 672
    if (tmp___11 != 0) {
#line 672
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 672
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 672
    if (tmp___13 < 0) {
#line 672
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 672
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 672, tmp___12);
    } else {

    }
#line 673
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 675
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 677
  req->rq_state = req->rq_state | 128UL;
#line 678
  _req_may_be_done_not_susp(req, m);
#line 680
  goto ldv_51450;
  case 25U: ;
#line 683
  if ((req->rq_state & 2UL) == 0UL) {
#line 684
    goto ldv_51450;
  } else {

  }
#line 686
  _req_may_be_done(req, m);
#line 687
  goto ldv_51450;
  case 26U: ;
#line 690
  if ((req->rq_state & 2UL) == 0UL) {
#line 691
    goto ldv_51450;
  } else {

  }
#line 693
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 695
  rv = 2;
#line 696
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 697
    rv = 1;
  } else {

  }
#line 699
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 700
  req->w.cb = & w_restart_disk_io;
#line 701
  drbd_queue_work(& mdev->data.work, & req->w);
#line 702
  goto ldv_51450;
  case 24U: ;
#line 706
  if ((req->rq_state & 2048UL) == 0UL && (unsigned long )req->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                struct drbd_work * ,
                                                                                                int  ))0)) {
#line 707
    _req_may_be_done(req, m);
#line 708
    goto ldv_51450;
  } else {

  }
#line 715
  if ((req->rq_state & 256UL) == 0UL) {
#line 716
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 717
      drbd_queue_work(& mdev->data.work, & req->w);
#line 718
      rv = (req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 720
    goto ldv_51450;
  } else {

  }
  case 17U: ;
#line 725
  if ((req->rq_state & 2048UL) == 0UL) {
#line 726
    goto ldv_51450;
  } else {

  }
#line 728
  if ((req->rq_state & 16UL) != 0UL) {
#line 732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 733
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 735
  if ((req->rq_state & 1008UL) != 0UL) {
#line 736
    req->rq_state = req->rq_state | 128UL;
#line 737
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 738
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 740
  _req_may_be_done(req, m);
#line 741
  goto ldv_51450;
  case 18U: ;
#line 744
  if ((req->rq_state & 16UL) == 0UL) {
#line 744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            744);
  } else {

  }
#line 745
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 745
  if (tmp___14 != 0) {
#line 745
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 745
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 745
  if (tmp___16 < 0) {
#line 745
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 745, tmp___15);
  } else {

  }
#line 746
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 747
  req->rq_state = req->rq_state | 384UL;
#line 748
  _req_may_be_done_not_susp(req, m);
#line 749
  goto ldv_51450;
  }
  ldv_51450: ;
#line 752
  return (rv);
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 767
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 768
    return (1);
  } else {

  }
#line 769
  if ((int )mdev->state.ldv_40583.disk > 4) {
#line 770
    return (0);
  } else {

  }
#line 771
  if ((int )mdev->state.ldv_40583.disk <= 3) {
#line 772
    return (0);
  } else {

  }
#line 774
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 775
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 777
  if (sector >= nr_sectors) {
#line 777
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            777);
  } else {

  }
#line 778
  if (esector >= nr_sectors) {
#line 778
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            778);
  } else {

  }
#line 780
  sbnr = sector >> 3;
#line 781
  ebnr = esector >> 3;
#line 783
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 783
  return (tmp == 0);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  int congested ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 788
  congested = 0;
#line 795
  tmp = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 795
  if (tmp == 0) {
#line 796
    return;
  } else {

  }
#line 798
  if ((mdev->net_conf)->cong_fill != 0) {
#line 798
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 798
    if (tmp___0 >= (mdev->net_conf)->cong_fill) {
#line 800
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 801
      congested = 1;
    } else {

    }
  } else {

  }
#line 804
  if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 805
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 806
    congested = 1;
  } else {

  }
#line 809
  if (congested != 0) {
#line 810
    queue_barrier(mdev);
#line 812
    if ((mdev->net_conf)->on_congestion == 1) {
#line 813
      __ns.i = mdev->state.i;
#line 813
      __ns.ldv_40583.conn = 22U;
#line 813
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 815
      __ns___0.i = mdev->state.i;
#line 815
      __ns___0.ldv_40583.conn = 1U;
#line 815
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 817
  put_ldev(mdev);
#line 818
  return;
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  union drbd_state s ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  bool tmp___11 ;
  bool tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  long tmp___18 ;
  int tmp___19 ;
  long tmp___20 ;
  bool tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;

  {
#line 822
  rw = (int const   )bio->bi_rw & (int const   )8193;
#line 823
  size = (int const   )bio->bi_size;
#line 824
  sector = bio->bi_sector;
#line 825
  b = 0;
#line 827
  send_oos = 0;
#line 828
  err = -5;
#line 829
  ret = 0;
#line 833
  req = drbd_req_new(mdev, bio);
#line 834
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 835
    dec_ap_bio(mdev);
#line 838
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 839
    bio_endio(bio, -12);
#line 840
    return (0);
  } else {

  }
#line 842
  req->start_time = start_time;
#line 844
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 845
  if (local == 0) {
#line 846
    bio_put(req->private_bio);
#line 847
    req->private_bio = 0;
  } else {

  }
#line 849
  if (rw == 1) {
#line 853
    tmp = __builtin_expect(size == 0, 0L);
#line 853
    if (tmp != 0L) {
#line 855
      if ((bio->bi_rw & 4096UL) == 0UL) {
#line 855
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_rw & REQ_FLUSH ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                855);
      } else {

      }
#line 856
      remote = 0;
    } else {
#line 858
      remote = 1;
    }
  } else {
#line 861
    if (local != 0) {
#line 862
      tmp___0 = drbd_may_do_local_read(mdev, sector, size);
#line 862
      if (tmp___0 == 0) {
#line 868
        local = 0;
#line 869
        bio_put(req->private_bio);
#line 870
        req->private_bio = 0;
#line 871
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 874
    remote = local == 0 && (int )mdev->state.ldv_40583.pdsk > 7;
  }
#line 885
  if ((rw == 8192 && (int )mdev->state.ldv_40583.disk > 3) && local == 0) {
#line 886
    err = -11;
#line 887
    goto fail_and_free_req;
  } else {

  }
#line 897
  if ((rw == 1 && local != 0) && size != 0) {
#line 897
    tmp___1 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 897
    if (tmp___1 == 0) {
#line 899
      req->rq_state = req->rq_state | 4096UL;
#line 900
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 903
  s = mdev->state;
#line 904
  if (remote != 0) {
#line 904
    tmp___2 = drbd_should_do_remote(s);
#line 904
    if ((int )tmp___2) {
#line 904
      tmp___3 = 1;
    } else {
#line 904
      tmp___3 = 0;
    }
  } else {
#line 904
    tmp___3 = 0;
  }
#line 904
  remote = tmp___3;
#line 905
  if (rw == 1) {
#line 905
    tmp___4 = drbd_should_send_oos(s);
#line 905
    if ((int )tmp___4) {
#line 905
      tmp___5 = 1;
    } else {
#line 905
      tmp___5 = 0;
    }
  } else {
#line 905
    tmp___5 = 0;
  }
#line 905
  send_oos = tmp___5;
#line 906
  if (remote != 0 && send_oos != 0) {
#line 906
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            906);
  } else {

  }
#line 908
  if (local == 0 && remote == 0) {
#line 908
    tmp___7 = is_susp(mdev->state);
#line 908
    if (tmp___7 == 0) {
#line 909
      tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 909
      if (tmp___6 != 0) {
#line 910
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 911
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 920
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 920
    tmp___9 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 920
    if (tmp___9 != 0) {
      allocate_barrier: 
#line 924
      tmp___8 = kmalloc(56UL, 16U);
#line 924
      b = (struct drbd_tl_epoch *)tmp___8;
#line 925
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 926
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 927
        err = -12;
#line 928
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 933
  spin_lock_irq(& mdev->req_lock);
#line 935
  tmp___10 = is_susp(mdev->state);
#line 935
  if (tmp___10 != 0) {
#line 940
    ret = 1;
#line 941
    spin_unlock_irq(& mdev->req_lock);
#line 942
    goto fail_free_complete;
  } else {

  }
#line 945
  if (remote != 0 || send_oos != 0) {
#line 946
    tmp___11 = drbd_should_do_remote(mdev->state);
#line 946
    remote = (int )tmp___11;
#line 947
    if (rw == 1) {
#line 947
      tmp___12 = drbd_should_send_oos(mdev->state);
#line 947
      if ((int )tmp___12) {
#line 947
        tmp___13 = 1;
      } else {
#line 947
        tmp___13 = 0;
      }
    } else {
#line 947
      tmp___13 = 0;
    }
#line 947
    send_oos = tmp___13;
#line 948
    if (remote != 0 && send_oos != 0) {
#line 948
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              948);
    } else {

    }
#line 950
    if (remote == 0 && send_oos == 0) {
#line 951
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 952
    if (local == 0 && remote == 0) {
#line 953
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 954
      spin_unlock_irq(& mdev->req_lock);
#line 955
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 959
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 960
    mdev->unused_spare_tle = b;
#line 961
    b = 0;
  } else {

  }
#line 963
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 963
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 963
    if (tmp___14 != 0) {
#line 968
      spin_unlock_irq(& mdev->req_lock);
#line 969
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 974
  _drbd_start_io_acct(mdev, req, bio);
#line 986
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 986
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 986
    if (tmp___16 != 0) {
#line 988
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 989
      mdev->unused_spare_tle = 0;
    } else {
#line 986
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 991
  if (remote != 0 && rw == 1) {
#line 991
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 991
    if (tmp___15 != 0) {
#line 991
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              992);
    } else {

    }
  } else {

  }
#line 1010
  if (remote != 0) {
#line 1011
    _req_mod(req, to_be_send);
  } else {

  }
#line 1012
  if (local != 0) {
#line 1013
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1018
  if (rw == 1) {
#line 1018
    tmp___17 = _req_conflicts(req);
#line 1018
    if (tmp___17 != 0) {
#line 1019
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1023
  tmp___18 = __builtin_expect(size != 0, 1L);
#line 1023
  if (tmp___18 != 0L) {
#line 1024
    list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
  } else {

  }
#line 1028
  if (remote != 0) {
#line 1033
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1037
  if (send_oos != 0) {
#line 1037
    tmp___19 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                                      1037U);
#line 1037
    if (tmp___19 != 0) {
#line 1038
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1040
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1042
    maybe_pull_ahead(mdev);
  } else {

  }
#line 1047
  tmp___20 = __builtin_expect((bio->bi_rw & 4096UL) != 0UL, 0L);
#line 1047
  if (tmp___20 != 0L && (mdev->newest_tle)->n_writes != 0) {
#line 1047
    tmp___21 = drbd_should_do_remote(mdev->state);
#line 1047
    if ((int )tmp___21) {
#line 1050
      queue_barrier(mdev);
    } else {

    }
  } else {

  }
#line 1052
  spin_unlock_irq(& mdev->req_lock);
#line 1053
  kfree((void const   *)b);
#line 1055
  if (local != 0) {
#line 1056
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1063
    tmp___23 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1063
    if (tmp___23 != 0) {
#line 1064
      tmp___22 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1064
      if (tmp___22 != 0) {
#line 1067
        bio_endio(req->private_bio, -5);
      } else {
#line 1069
        generic_make_request(req->private_bio);
      }
#line 1070
      put_ldev(mdev);
    } else {
#line 1072
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1075
  return (0);
  fail_conflicting: 
#line 1084
  _drbd_end_io_acct(mdev, req);
#line 1085
  spin_unlock_irq(& mdev->req_lock);
#line 1086
  if (remote != 0) {
#line 1087
    tmp___24 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1087
    if (tmp___24 != 0) {
#line 1087
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1087
    tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1087
    if (tmp___26 < 0) {
#line 1087
      tmp___25 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1087
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1087, tmp___25);
    } else {

    }
  } else {

  }
#line 1090
  err = 0;
  fail_free_complete: ;
#line 1093
  if ((req->rq_state & 4096UL) != 0UL) {
#line 1094
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1096
  if (local != 0) {
#line 1097
    bio_put(req->private_bio);
#line 1098
    req->private_bio = 0;
#line 1099
    put_ldev(mdev);
  } else {

  }
#line 1101
  if (ret == 0) {
#line 1102
    bio_endio(bio, err);
  } else {

  }
#line 1104
  drbd_req_free(req);
#line 1105
  dec_ap_bio(mdev);
#line 1106
  kfree((void const   *)b);
#line 1108
  return (ret);
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1118
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1120
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1120
    if (tmp___1 != 0) {
#line 1121
      tmp = get_current();
#line 1121
      tmp___0 = get_current();
#line 1121
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1127
    return (1);
  } else {

  }
#line 1130
  return (0);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1136
  mdev = (struct drbd_conf *)q->queuedata;
#line 1139
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1139
  if (tmp != 0) {
#line 1140
    bio_endio(bio, -1);
#line 1141
    return;
  } else {

  }
#line 1144
  start_time = jiffies;
#line 1149
  if ((bio->bi_size & 511U) != 0U) {
#line 1149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1149);
  } else {

  }
#line 1153
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1154
  e_enr = bio->bi_size != 0U ? (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8) : s_enr;
#line 1156
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1156
  if (tmp___1 != 0L) {
    ldv_51548: 
#line 1158
    inc_ap_bio(mdev, 1);
#line 1159
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1159
    if (tmp___0 != 0) {
#line 1160
      goto ldv_51548;
    } else {

    }

#line 1160
    return;
  } else {

  }
#line 1165
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1171
    bio_endio(bio, -22);
  } else {
#line 1183
    sect = bio->bi_sector;
#line 1184
    sps = 256;
#line 1185
    mask = sps + -1;
#line 1186
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1187
    bp = bio_split(bio, (int )first_sectors);
#line 1194
    inc_ap_bio(mdev, 3);
#line 1196
    if (s_enr + 1U != e_enr) {
#line 1196
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1196);
    } else {

    }
#line 1198
    goto ldv_51556;
    ldv_51555: 
#line 1199
    inc_ap_bio(mdev, 1);
    ldv_51556: 
#line 1198
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1198
    if (tmp___2 != 0) {
#line 1199
      goto ldv_51555;
    } else {

    }

#line 1201
    goto ldv_51559;
    ldv_51558: 
#line 1202
    inc_ap_bio(mdev, 1);
    ldv_51559: 
#line 1201
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1201
    if (tmp___3 != 0) {
#line 1202
      goto ldv_51558;
    } else {

    }
#line 1204
    dec_ap_bio(mdev);
#line 1206
    bio_pair_release(bp);
  }
#line 1208
  return;
}
}
#line 1223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1225
  mdev = (struct drbd_conf *)q->queuedata;
#line 1226
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1228
  bio_size = bvm->bi_size;
#line 1231
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1233
  if (limit < 0) {
#line 1234
    limit = 0;
  } else {

  }
#line 1235
  if (bio_size == 0U) {
#line 1236
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1237
      limit = (int )bvec->bv_len;
    } else
#line 1238
    if (limit != 0) {
#line 1238
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1238
      if (tmp != 0) {
#line 1239
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1241
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1242
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1243
          _min1 = limit;
#line 1243
          _min2 = backing_limit;
#line 1243
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1245
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1247
  return (limit);
}
}
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  int tmp ;
  int tmp___0 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1252
  mdev = (struct drbd_conf *)data;
#line 1255
  ent = 0UL;
#line 1255
  dt = 0UL;
#line 1258
  tmp = get_net_conf(mdev);
#line 1258
  if (tmp != 0) {
#line 1259
    if ((int )mdev->state.ldv_40583.conn > 8) {
#line 1260
      ent = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
    } else {

    }
#line 1262
    put_net_conf(mdev);
  } else {

  }
#line 1264
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1264
  if (tmp___0 != 0) {
#line 1265
    dt = (unsigned long )(((mdev->ldev)->dc.disk_timeout * 250) / 10);
#line 1266
    put_ldev(mdev);
  } else {

  }
#line 1268
  __x = dt;
#line 1268
  __y = ent;
#line 1268
  if (__x != 0UL) {
#line 1268
    if (__y != 0UL) {
#line 1268
      _min1 = __x;
#line 1268
      _min2 = __y;
#line 1268
      tmp___1 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1268
      tmp___1 = __x;
    }
#line 1268
    tmp___2 = tmp___1;
  } else {
#line 1268
    tmp___2 = __y;
  }
#line 1268
  et = tmp___2;
#line 1270
  if (et == 0UL) {
#line 1271
    return;
  } else {

  }
#line 1273
  now = jiffies;
#line 1275
  spin_lock_irq(& mdev->req_lock);
#line 1276
  le = & (mdev->oldest_tle)->requests;
#line 1277
  tmp___3 = list_empty((struct list_head  const  *)le);
#line 1277
  if (tmp___3 != 0) {
#line 1278
    spin_unlock_irq(& mdev->req_lock);
#line 1279
    mod_timer(& mdev->request_timer, now + et);
#line 1280
    return;
  } else {

  }
#line 1283
  le = le->prev;
#line 1284
  __mptr = (struct list_head  const  *)le;
#line 1284
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1304
  if (((ent != 0UL && (req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1305
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1306
    __ns.i = mdev->state.i;
#line 1306
    __ns.ldv_40583.conn = 3U;
#line 1306
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1310
  if (((dt != 0UL && (int )req->rq_state & 1) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1311
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1312
    __drbd_chk_io_error_(mdev, DRBD_FORCE_DETACH, "request_timer_fn");
  } else {

  }
#line 1314
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1315
  spin_unlock_irq(& mdev->req_lock);
#line 1316
  mod_timer(& mdev->request_timer, nt);
#line 1317
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5547: ;
#line 211
  return (__ret);
}
}
#line 787 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 789
  return ((bdev->bd_disk)->queue);
}
}
#line 1098 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1100
  retval = 512;
#line 1102
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1103
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1105
  return ((unsigned short )retval);
}
}
#line 1108 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1110
  tmp = bdev_get_queue(bdev);
#line 1110
  tmp___0 = queue_logical_block_size(tmp);
#line 1110
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1579 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1581
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1708
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1718
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1719
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1727
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 79
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 79
  if (r == 0 || (int )mdev->state.ldv_40583.disk <= 2) {
#line 79
    goto ldv_51135;
  } else {

  }
#line 79
  tmp = get_current();
#line 79
  __wait.flags = 0U;
#line 79
  __wait.private = (void *)tmp;
#line 79
  __wait.func = & autoremove_wake_function;
#line 79
  __wait.task_list.next = & __wait.task_list;
#line 79
  __wait.task_list.prev = & __wait.task_list;
  ldv_51138: 
#line 79
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 79
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 79
  if (r == 0 || (int )mdev->state.ldv_40583.disk <= 2) {
#line 79
    goto ldv_51137;
  } else {

  }
#line 79
  schedule();
#line 79
  goto ldv_51138;
  ldv_51137: 
#line 79
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51135: ;
#line 83
  if (r == 0) {
#line 83
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 83
    tmp___1 = tmp___0;
  } else {
#line 83
    tmp___1 = 0;
  }
#line 83
  return (tmp___1);
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 88
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 88
  if (tmp != 0) {
#line 89
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 90
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static bool md_io_allowed(struct drbd_conf *mdev ) 
{ 
  enum drbd_disk_state ds ;

  {
#line 94
  ds = (enum drbd_disk_state )mdev->state.ldv_40583.disk;
#line 95
  return ((bool )((unsigned int )ds > 2U || (unsigned int )ds == 1U));
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) 
{ 
  long dt ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
#line 101
  dt = (long )((bdev->dc.disk_timeout * 250) / 10);
#line 102
  if (dt == 0L) {
#line 103
    dt = 9223372036854775807L;
  } else {

  }
#line 105
  __ret = dt;
#line 105
  if (*done == 0U) {
#line 105
    tmp___2 = md_io_allowed(mdev);
#line 105
    if ((int )tmp___2) {
#line 105
      tmp = get_current();
#line 105
      __wait.flags = 0U;
#line 105
      __wait.private = (void *)tmp;
#line 105
      __wait.func = & autoremove_wake_function;
#line 105
      __wait.task_list.next = & __wait.task_list;
#line 105
      __wait.task_list.prev = & __wait.task_list;
      ldv_51155: 
#line 105
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 105
      if (*done != 0U) {
#line 105
        goto ldv_51154;
      } else {
#line 105
        tmp___0 = md_io_allowed(mdev);
#line 105
        if (tmp___0) {
#line 105
          tmp___1 = 0;
        } else {
#line 105
          tmp___1 = 1;
        }
#line 105
        if (tmp___1) {
#line 105
          goto ldv_51154;
        } else {

        }
      }
#line 105
      __ret = schedule_timeout(__ret);
#line 105
      if (__ret == 0L) {
#line 105
        goto ldv_51154;
      } else {

      }
#line 105
      goto ldv_51155;
      ldv_51154: 
#line 105
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 105
  dt = __ret;
#line 106
  if (dt == 0L) {
#line 107
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
  } else {

  }
#line 108
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 118
  mdev->md_io.done = 0U;
#line 119
  mdev->md_io.error = -19;
#line 121
  if (rw & 1) {
#line 121
    tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 121
    if (tmp == 0) {
#line 122
      rw = rw | 6144;
    } else {

    }
  } else {

  }
#line 123
  rw = rw | 16;
#line 125
  bio = bio_alloc_drbd(16U);
#line 126
  bio->bi_bdev = bdev->md_bdev;
#line 127
  bio->bi_sector = sector;
#line 128
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 128
  ok = tmp___0 == size;
#line 129
  if (ok == 0) {
#line 130
    goto out;
  } else {

  }
#line 131
  bio->bi_private = (void *)(& mdev->md_io);
#line 132
  bio->bi_end_io = & drbd_md_io_complete;
#line 133
  bio->bi_rw = (unsigned long )rw;
#line 135
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 135
  if (tmp___1 == 0) {
#line 136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 137
    ok = 0;
#line 138
    goto out;
  } else {

  }
#line 141
  atomic_inc(& bio->bi_cnt);
#line 142
  atomic_inc(& mdev->md_io_in_use);
#line 143
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 143
  if (tmp___2 != 0) {
#line 144
    bio_endio(bio, -5);
  } else {
#line 146
    submit_bio(rw, bio);
  }
#line 147
  wait_until_done_or_disk_failure(mdev, bdev, & mdev->md_io.done);
#line 148
  ok = (int )bio->bi_flags & 1 && mdev->md_io.error == 0;
  out: 
#line 151
  bio_put(bio);
#line 152
  return (ok);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 159
  offset = 0;
#line 160
  iop = mdev->md_io_page;
#line 162
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 162
  if (tmp != 1) {
#line 162
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            162);
  } else {

  }
#line 164
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 164
  if (tmp___0 != 0L) {
#line 164
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (164), "i" (12UL));
    ldv_51179: ;
#line 164
    goto ldv_51179;
  } else {

  }
#line 166
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 166
  logical_block_size = (int )tmp___1;
#line 167
  if (logical_block_size == 0) {
#line 168
    logical_block_size = 512;
  } else {

  }
#line 171
  if (logical_block_size != 512) {
#line 172
    mask = logical_block_size / 512 + -1;
#line 173
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 173
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              173);
    } else {

    }
#line 174
    if ((mask + 1) * 512 != logical_block_size) {
#line 174
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              174);
    } else {

    }
#line 175
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 176
    sector = (sector_t )(~ mask) & sector;
#line 177
    iop = mdev->md_io_tmpp;
#line 179
    if (rw & 1) {
#line 182
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 182
      p = tmp___2;
#line 183
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 183
      hp = tmp___3;
#line 185
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 188
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 188
      if (tmp___4 != 0L) {
#line 189
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 192
        return (0);
      } else {

      }
#line 195
      __len = 512UL;
#line 195
      if (__len > 63UL) {
#line 195
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 195
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 199
  tmp___7 = drbd_md_first_sector(bdev);
#line 199
  if (tmp___7 > sector) {
#line 201
    tmp___5 = get_current();
#line 201
    tmp___6 = get_current();
#line 201
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 199
    tmp___8 = drbd_md_last_sector(bdev);
#line 199
    if (tmp___8 < sector) {
#line 201
      tmp___5 = get_current();
#line 201
      tmp___6 = get_current();
#line 201
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 205
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 206
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 206
  if (tmp___9 != 0L) {
#line 207
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 209
    return (0);
  } else {

  }
#line 212
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 213
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 213
    p___0 = tmp___10;
#line 214
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 214
    hp___0 = tmp___11;
#line 216
    __len___0 = 512UL;
#line 216
    if (__len___0 > 63UL) {
#line 216
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 216
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 219
  return (ok);
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 226
  al_flags = 0UL;
#line 229
  spin_lock_irq(& mdev->al_lock);
#line 230
  tmp = lc_find(mdev->resync, enr / 4U);
#line 231
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 231
  if (tmp___2 != 0L) {
#line 232
    __mptr = (struct lc_element  const  *)tmp;
#line 232
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 233
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 233
    if (tmp___1 != 0) {
#line 234
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 234
      wake = tmp___0 == 0;
#line 235
      spin_unlock_irq(& mdev->al_lock);
#line 236
      if (wake != 0) {
#line 237
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 238
      return (0);
    } else {

    }
  } else {

  }
#line 241
  al_ext = lc_get(mdev->act_log, enr);
#line 242
  al_flags = (mdev->act_log)->flags;
#line 243
  spin_unlock_irq(& mdev->al_lock);
#line 254
  return (al_ext);
}
}
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 259
  enr = (unsigned int )(sector >> 13);
#line 263
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 263
  if (tmp <= 0) {
#line 263
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            263);
  } else {

  }
#line 265
  al_ext = _al_get(mdev, enr);
#line 265
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 265
    goto ldv_51209;
  } else {

  }
#line 265
  tmp___0 = get_current();
#line 265
  __wait.flags = 0U;
#line 265
  __wait.private = (void *)tmp___0;
#line 265
  __wait.func = & autoremove_wake_function;
#line 265
  __wait.task_list.next = & __wait.task_list;
#line 265
  __wait.task_list.prev = & __wait.task_list;
  ldv_51212: 
#line 265
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 265
  al_ext = _al_get(mdev, enr);
#line 265
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 265
    goto ldv_51211;
  } else {

  }
#line 265
  schedule();
#line 265
  goto ldv_51212;
  ldv_51211: 
#line 265
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51209: ;
#line 267
  if (al_ext->lc_number != enr) {
#line 274
    init_completion(& al_work.event);
#line 275
    al_work.al_ext = al_ext;
#line 276
    al_work.enr = enr;
#line 277
    al_work.old_enr = al_ext->lc_number;
#line 278
    al_work.w.cb = & w_al_write_transaction;
#line 279
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 280
    wait_for_completion(& al_work.event);
#line 282
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 284
    spin_lock_irq(& mdev->al_lock);
#line 285
    lc_changed(mdev->act_log, al_ext);
#line 286
    spin_unlock_irq(& mdev->al_lock);
#line 287
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 289
  return;
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 293
  enr = (unsigned int )(sector >> 13);
#line 297
  tmp = spinlock_check(& mdev->al_lock);
#line 297
  flags = _raw_spin_lock_irqsave(tmp);
#line 299
  extent = lc_find(mdev->act_log, enr);
#line 301
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 302
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 303
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 304
    return;
  } else {

  }
#line 307
  tmp___0 = lc_put(mdev->act_log, extent);
#line 307
  if (tmp___0 == 0U) {
#line 308
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 310
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 311
  return;
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 324
  return (al_enr >> 5);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 333
  return (rs_enr >> 3);
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 343
  __mptr = (struct drbd_work  const  *)w;
#line 343
  aw = (struct update_al_work *)__mptr;
#line 344
  updated = aw->al_ext;
#line 345
  new_enr = aw->enr;
#line 346
  evicted = aw->old_enr;
#line 351
  xor_sum = 0U;
#line 353
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 353
  if (tmp___0 == 0) {
#line 354
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.disk);
#line 354
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 357
    complete(& ((struct update_al_work *)w)->event);
#line 358
    return (1);
  } else {

  }
#line 366
  if ((int )mdev->state.ldv_40583.conn <= 9 && evicted != 4294967295U) {
#line 367
    tmp___1 = al_extent_to_bm_page(evicted);
#line 367
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 370
  if ((int )mdev->state.ldv_40583.disk <= 3) {
#line 371
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.disk);
#line 371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 374
    complete(& ((struct update_al_work *)w)->event);
#line 375
    put_ldev(mdev);
#line 376
    return (1);
  } else {

  }
#line 379
  tmp___3 = drbd_md_get_buffer(mdev);
#line 379
  buffer = (struct al_transaction *)tmp___3;
#line 380
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 382
    complete(& ((struct update_al_work *)w)->event);
#line 383
    put_ldev(mdev);
#line 384
    return (1);
  } else {

  }
#line 387
  buffer->magic = 1728214147U;
#line 388
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 388
  buffer->tr_number = tmp___4;
#line 390
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 390
  n = (int )tmp___5;
#line 392
  tmp___6 = __fswab32((__u32 )n);
#line 392
  buffer->updates[0].pos = tmp___6;
#line 393
  tmp___7 = __fswab32(new_enr);
#line 393
  buffer->updates[0].extent = tmp___7;
#line 395
  xor_sum = xor_sum ^ new_enr;
#line 397
  __min1 = 61;
#line 397
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 397
  mx = __min1 < __min2 ? __min1 : __min2;
#line 399
  i = 0;
#line 399
  goto ldv_51252;
  ldv_51251: 
#line 400
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 401
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 401
  extent_nr = tmp___8->lc_number;
#line 402
  tmp___9 = __fswab32(idx);
#line 402
  buffer->updates[i + 1].pos = tmp___9;
#line 403
  tmp___10 = __fswab32(extent_nr);
#line 403
  buffer->updates[i + 1].extent = tmp___10;
#line 404
  xor_sum = xor_sum ^ extent_nr;
#line 399
  i = i + 1;
  ldv_51252: ;
#line 399
  if (i < mx) {
#line 400
    goto ldv_51251;
  } else {

  }

#line 406
  goto ldv_51255;
  ldv_51254: 
#line 407
  buffer->updates[i + 1].pos = 4294967295U;
#line 408
  buffer->updates[i + 1].extent = 4294967295U;
#line 409
  xor_sum = ~ xor_sum;
#line 406
  i = i + 1;
  ldv_51255: ;
#line 406
  if (i <= 60) {
#line 407
    goto ldv_51254;
  } else {

  }
#line 411
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 412
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 413
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 415
  tmp___11 = __fswab32(xor_sum);
#line 415
  buffer->xor_sum = tmp___11;
#line 417
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 420
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 420
  if (tmp___12 == 0) {
#line 421
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "w_al_write_transaction");
  } else {

  }
#line 423
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 423
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 425
    mdev->al_tr_pos = 0;
  } else {

  }
#line 427
  if (mdev->al_tr_pos > 63) {
#line 427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            427);
  } else {

  }
#line 428
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 430
  drbd_md_put_buffer(mdev);
#line 432
  complete(& ((struct update_al_work *)w)->event);
#line 433
  put_ldev(mdev);
#line 435
  return (1);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 454
  xor_sum = 0U;
#line 456
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 460
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 460
  if (tmp == 0) {
#line 461
    return (-1);
  } else {

  }
#line 463
  tmp___0 = __fswab32(b->magic);
#line 463
  rv = tmp___0 == 2205418087U;
#line 465
  i = 0;
#line 465
  goto ldv_51269;
  ldv_51268: 
#line 466
  tmp___1 = __fswab32(b->updates[i].extent);
#line 466
  xor_sum = tmp___1 ^ xor_sum;
#line 465
  i = i + 1;
  ldv_51269: ;
#line 465
  if (i <= 61) {
#line 466
    goto ldv_51268;
  } else {

  }
#line 467
  tmp___2 = __fswab32(b->xor_sum);
#line 467
  rv = (tmp___2 == xor_sum) & rv;
#line 469
  return (rv);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 485
  active_extents = 0;
#line 486
  transactions = 0;
#line 487
  found_valid = 0;
#line 488
  from = 0;
#line 489
  to = 0;
#line 490
  from_tnr = 0U;
#line 491
  to_tnr = 0U;
#line 494
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 499
  tmp = drbd_md_get_buffer(mdev);
#line 499
  buffer = (struct al_transaction *)tmp;
#line 500
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 501
    return (0);
  } else {

  }
#line 504
  i = 0;
#line 504
  goto ldv_51289;
  ldv_51288: 
#line 505
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 506
  if (rv == 0) {
#line 507
    goto ldv_51287;
  } else {

  }
#line 508
  if (rv == -1) {
#line 509
    drbd_md_put_buffer(mdev);
#line 510
    return (0);
  } else {

  }
#line 512
  tmp___0 = __fswab32(buffer->tr_number);
#line 512
  cnr = tmp___0;
#line 514
  found_valid = found_valid + 1;
#line 514
  if (found_valid == 1) {
#line 515
    from = i;
#line 516
    to = i;
#line 517
    from_tnr = cnr;
#line 518
    to_tnr = cnr;
#line 519
    goto ldv_51287;
  } else {

  }
#line 521
  if ((int )cnr - (int )from_tnr < 0) {
#line 522
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 522
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              522);
    } else {

    }
#line 523
    from = i;
#line 524
    from_tnr = cnr;
  } else {

  }
#line 526
  if ((int )cnr - (int )to_tnr > 0) {
#line 527
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 527
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              527);
    } else {

    }
#line 528
    to = i;
#line 529
    to_tnr = cnr;
  } else {

  }
  ldv_51287: 
#line 504
  i = i + 1;
  ldv_51289: ;
#line 504
  if (i <= mx) {
#line 505
    goto ldv_51288;
  } else {

  }

#line 533
  if (found_valid == 0) {
#line 534
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 535
    drbd_md_put_buffer(mdev);
#line 536
    return (1);
  } else {

  }
#line 541
  i = from;
  ldv_51304: 
#line 547
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 548
  _b = rv == 0;
#line 548
  if (_b != 0) {
#line 548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            548);
  } else {

  }
#line 548
  if (_b != 0) {
#line 548
    goto cancel;
  } else {

  }
#line 549
  if (rv == -1) {
#line 550
    drbd_md_put_buffer(mdev);
#line 551
    return (0);
  } else {

  }
#line 554
  tmp___1 = __fswab32(buffer->tr_number);
#line 554
  trn = tmp___1;
#line 556
  spin_lock_irq(& mdev->al_lock);
#line 562
  j = 61;
#line 562
  goto ldv_51301;
  ldv_51300: 
#line 563
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 563
  pos = (int )tmp___2;
#line 564
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 564
  extent_nr = tmp___3;
#line 566
  if (extent_nr == 4294967295U) {
#line 567
    goto ldv_51299;
  } else {

  }
#line 569
  lc_set(mdev->act_log, extent_nr, pos);
#line 570
  active_extents = active_extents + 1;
  ldv_51299: 
#line 562
  j = j - 1;
  ldv_51301: ;
#line 562
  if (j >= 0) {
#line 563
    goto ldv_51300;
  } else {

  }
#line 572
  spin_unlock_irq(& mdev->al_lock);
#line 574
  transactions = transactions + 1;
  cancel: ;
#line 577
  if (i == to) {
#line 578
    goto ldv_51303;
  } else {

  }
#line 579
  i = i + 1;
#line 580
  if (i > mx) {
#line 581
    i = 0;
  } else {

  }
#line 582
  goto ldv_51304;
  ldv_51303: 
#line 584
  mdev->al_tr_number = to_tnr + 1U;
#line 585
  mdev->al_tr_pos = to;
#line 586
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 586
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 588
    mdev->al_tr_pos = 0;
  } else {

  }
#line 591
  drbd_md_put_buffer(mdev);
#line 593
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 596
  return (1);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 606
  add = 0UL;
#line 610
  tmp___0 = lc_try_lock(mdev->act_log);
#line 610
  if (tmp___0 != 0) {
#line 610
    goto ldv_51313;
  } else {

  }
#line 610
  tmp___1 = get_current();
#line 610
  __wait.flags = 0U;
#line 610
  __wait.private = (void *)tmp___1;
#line 610
  __wait.func = & autoremove_wake_function;
#line 610
  __wait.task_list.next = & __wait.task_list;
#line 610
  __wait.task_list.prev = & __wait.task_list;
  ldv_51316: 
#line 610
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 610
  tmp___2 = lc_try_lock(mdev->act_log);
#line 610
  if (tmp___2 != 0) {
#line 610
    goto ldv_51315;
  } else {

  }
#line 610
  schedule();
#line 610
  goto ldv_51316;
  ldv_51315: 
#line 610
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51313: 
#line 612
  i = 0;
#line 612
  goto ldv_51321;
  ldv_51320: 
#line 613
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 613
  enr = tmp___3->lc_number;
#line 614
  if (enr == 4294967295U) {
#line 615
    goto ldv_51317;
  } else {

  }
#line 616
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 616
  tmp = (int )tmp___4;
#line 617
  descriptor.modname = "drbd";
#line 617
  descriptor.function = "drbd_al_apply_to_bm";
#line 617
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 617
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 617
  descriptor.lineno = 617U;
#line 617
  descriptor.flags = 0U;
#line 617
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 617
  if (tmp___5 != 0L) {
#line 617
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 618
  add = (unsigned long )tmp + add;
  ldv_51317: 
#line 612
  i = i + 1;
  ldv_51321: ;
#line 612
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 613
    goto ldv_51320;
  } else {

  }
#line 621
  lc_unlock(mdev->act_log);
#line 622
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 624
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 624
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 625
  return;
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 632
  spin_lock_irq(& mdev->al_lock);
#line 633
  rv = al_ext->refcnt == 0U;
#line 634
  tmp = __builtin_expect(rv != 0, 1L);
#line 634
  if (tmp != 0L) {
#line 635
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 636
  spin_unlock_irq(& mdev->al_lock);
#line 638
  return (rv);
}
}
#line 650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 655
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 655
  if (tmp == 0) {
#line 655
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            655);
  } else {

  }
#line 657
  i = 0;
#line 657
  goto ldv_51339;
  ldv_51338: 
#line 658
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 659
  if (al_ext->lc_number == 4294967295U) {
#line 660
    goto ldv_51333;
  } else {

  }
#line 661
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 661
  if (tmp___0 != 0) {
#line 661
    goto ldv_51334;
  } else {

  }
#line 661
  tmp___1 = get_current();
#line 661
  __wait.flags = 0U;
#line 661
  __wait.private = (void *)tmp___1;
#line 661
  __wait.func = & autoremove_wake_function;
#line 661
  __wait.task_list.next = & __wait.task_list;
#line 661
  __wait.task_list.prev = & __wait.task_list;
  ldv_51337: 
#line 661
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 661
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 661
  if (tmp___2 != 0) {
#line 661
    goto ldv_51336;
  } else {

  }
#line 661
  schedule();
#line 661
  goto ldv_51337;
  ldv_51336: 
#line 661
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51334: ;
  ldv_51333: 
#line 657
  i = i + 1;
  ldv_51339: ;
#line 657
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 658
    goto ldv_51338;
  } else {

  }
#line 664
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 665
  return;
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 669
  __mptr = (struct drbd_work  const  *)w;
#line 669
  udw = (struct update_odbm_work *)__mptr;
#line 671
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 671
  if (tmp___0 == 0) {
#line 672
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 672
    if (tmp != 0) {
#line 673
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 674
    kfree((void const   *)udw);
#line 675
    return (1);
  } else {

  }
#line 678
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 678
  drbd_bm_write_page(mdev, tmp___1);
#line 679
  put_ldev(mdev);
#line 681
  kfree((void const   *)udw);
#line 683
  tmp___2 = drbd_bm_total_weight(mdev);
#line 683
  if (tmp___2 <= mdev->rs_failed) {
#line 684
    switch ((int )mdev->state.ldv_40583.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 687
    drbd_resync_finished(mdev);
    default: ;
#line 690
    goto ldv_51355;
    }
    ldv_51355: ;
  } else {

  }
#line 693
  drbd_bcast_sync_progress(mdev);
#line 695
  return (1);
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 713
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 713
  if (tmp == 0) {
#line 713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            713);
  } else {

  }
#line 717
  enr = (unsigned int )(sector >> 15);
#line 719
  e = lc_get(mdev->resync, enr);
#line 720
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 721
    __mptr = (struct lc_element  const  *)e;
#line 721
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 722
    if (ext->lce.lc_number == enr) {
#line 723
      if (success != 0) {
#line 724
        ext->rs_left = ext->rs_left - count;
      } else {
#line 726
        ext->rs_failed = ext->rs_failed + count;
      }
#line 727
      if (ext->rs_left < ext->rs_failed) {
#line 728
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_40583.conn);
#line 728
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 741
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 750
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 750
      rs_left = tmp___1;
#line 751
      if (ext->flags != 0UL) {
#line 752
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 756
        ext->flags = 0UL;
      } else {

      }
#line 758
      if (ext->rs_failed != 0) {
#line 759
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 763
      ext->rs_left = rs_left;
#line 764
      ext->rs_failed = success == 0 ? count : 0;
#line 765
      lc_changed(mdev->resync, & ext->lce);
    }
#line 767
    lc_put(mdev->resync, & ext->lce);
#line 770
    if (ext->rs_left == ext->rs_failed) {
#line 771
      ext->rs_failed = 0;
#line 773
      tmp___2 = kmalloc(32UL, 32U);
#line 773
      udw = (struct update_odbm_work *)tmp___2;
#line 774
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 775
        udw->enr = ext->lce.lc_number;
#line 776
        udw->w.cb = & w_update_odbm;
#line 777
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 779
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 783
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 787
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 792
  now = jiffies;
#line 793
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 794
  next = (mdev->rs_last_mark + 1) % 8;
#line 795
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 796
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 799
      mdev->rs_mark_time[next] = now;
#line 800
      mdev->rs_mark_left[next] = still_to_go;
#line 801
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 803
  return;
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 818
  count = 0UL;
#line 820
  wake_up = 0;
#line 823
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 824
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 826
    return;
  } else {

  }
#line 828
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 829
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 831
  _b = sector >= nr_sectors;
#line 831
  if (_b != 0) {
#line 831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            831);
  } else {

  }
#line 831
  if (_b != 0) {
#line 831
    return;
  } else {

  }
#line 832
  _b___0 = esector >= nr_sectors;
#line 832
  if (_b___0 != 0) {
#line 832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            832);
  } else {

  }
#line 832
  if (_b___0 != 0) {
#line 832
    esector = nr_sectors - 1UL;
  } else {

  }
#line 834
  lbnr = (nr_sectors - 1UL) >> 3;
#line 839
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 839
  if (tmp != 0L) {
#line 840
    return;
  } else {

  }
#line 841
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 841
  if (tmp___0 != 0L) {
#line 842
    ebnr = lbnr;
  } else {
#line 844
    ebnr = (esector - 7UL) >> 3;
  }
#line 845
  sbnr = (sector + 7UL) >> 3;
#line 847
  if (sbnr > ebnr) {
#line 848
    return;
  } else {

  }
#line 854
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 854
  count = (unsigned long )tmp___1;
#line 855
  if (count != 0UL) {
#line 855
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 855
    if (tmp___4 != 0) {
#line 856
      tmp___2 = drbd_bm_total_weight(mdev);
#line 856
      drbd_advance_rs_marks(mdev, tmp___2);
#line 857
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 857
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 858
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 859
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 863
      wake_up = 1;
#line 864
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 866
  if (wake_up != 0) {
#line 867
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 868
  return;
}
}
#line 878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 883
  count = 0U;
#line 887
  if (size == 0) {
#line 888
    return (0);
  } else {

  }
#line 890
  if ((size < 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 893
    return (0);
  } else {

  }
#line 896
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 896
  if (tmp == 0) {
#line 897
    return (0);
  } else {

  }
#line 899
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 900
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 902
  _b = sector >= nr_sectors;
#line 902
  if (_b != 0) {
#line 902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            902);
  } else {

  }
#line 902
  if (_b != 0) {
#line 903
    goto out;
  } else {

  }
#line 904
  _b___0 = esector >= nr_sectors;
#line 904
  if (_b___0 != 0) {
#line 904
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            904);
  } else {

  }
#line 904
  if (_b___0 != 0) {
#line 905
    esector = nr_sectors - 1UL;
  } else {

  }
#line 907
  lbnr = (nr_sectors - 1UL) >> 3;
#line 911
  sbnr = sector >> 3;
#line 912
  ebnr = esector >> 3;
#line 916
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 916
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 917
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 917
  count = (unsigned int )tmp___1;
#line 919
  enr = (unsigned int )(sector >> 15);
#line 920
  e = lc_find(mdev->resync, enr);
#line 921
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 922
    __mptr = (struct lc_element  const  *)e;
#line 922
    __mptr___0 = (struct lc_element  const  *)e;
#line 922
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 923
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 926
  put_ldev(mdev);
#line 928
  return ((int )count);
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 936
  wakeup = 0;
#line 939
  spin_lock_irq(& mdev->al_lock);
#line 940
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 941
    spin_unlock_irq(& mdev->al_lock);
#line 942
    return (0);
  } else {

  }
#line 944
  e = lc_get(mdev->resync, enr);
#line 945
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 945
    __mptr = (struct lc_element  const  *)e;
#line 945
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 945
    bm_ext = 0;
  }
#line 946
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 947
    if (bm_ext->lce.lc_number != enr) {
#line 948
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 949
      bm_ext->rs_failed = 0;
#line 950
      lc_changed(mdev->resync, & bm_ext->lce);
#line 951
      wakeup = 1;
    } else {

    }
#line 953
    if (bm_ext->lce.refcnt == 1U) {
#line 954
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 955
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 957
  rs_flags = (mdev->resync)->flags;
#line 958
  spin_unlock_irq(& mdev->al_lock);
#line 959
  if (wakeup != 0) {
#line 960
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 962
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 963
    if ((rs_flags & 4UL) != 0UL) {
#line 964
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 966
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 966
    if (tmp != 0L) {
#line 966
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (966), "i" (12UL));
      ldv_51442: ;
#line 966
      goto ldv_51442;
    } else {

    }
  } else {

  }
#line 969
  return (bm_ext);
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 975
  rv = 0;
#line 977
  spin_lock_irq(& mdev->al_lock);
#line 978
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 978
  if (tmp != 0L) {
#line 979
    rv = 1;
  } else {
#line 981
    al_ext = lc_find(mdev->act_log, enr);
#line 982
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 983
      if (al_ext->refcnt != 0U) {
#line 984
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 987
  spin_unlock_irq(& mdev->al_lock);
#line 994
  return (rv);
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1006
  enr = (unsigned int )(sector >> 15);
#line 1009
  sa = 200;
  retry: 
#line 1013
  __ret = 0;
#line 1013
  bm_ext = _bme_get(mdev, enr);
#line 1013
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1013
    tmp = get_current();
#line 1013
    __wait.flags = 0U;
#line 1013
    __wait.private = (void *)tmp;
#line 1013
    __wait.func = & autoremove_wake_function;
#line 1013
    __wait.task_list.next = & __wait.task_list;
#line 1013
    __wait.task_list.prev = & __wait.task_list;
    ldv_51463: 
#line 1013
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1013
    bm_ext = _bme_get(mdev, enr);
#line 1013
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1013
      goto ldv_51461;
    } else {

    }
#line 1013
    tmp___0 = get_current();
#line 1013
    tmp___1 = signal_pending(tmp___0);
#line 1013
    if (tmp___1 == 0) {
#line 1013
      schedule();
#line 1013
      goto ldv_51462;
    } else {

    }
#line 1013
    __ret = -512;
#line 1013
    goto ldv_51461;
    ldv_51462: ;
#line 1013
    goto ldv_51463;
    ldv_51461: 
#line 1013
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1013
  sig = __ret;
#line 1015
  if (sig != 0) {
#line 1016
    return (-4);
  } else {

  }
#line 1018
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1018
  if (tmp___2 != 0) {
#line 1019
    return (0);
  } else {

  }
#line 1021
  i = 0;
#line 1021
  goto ldv_51472;
  ldv_51471: 
#line 1022
  __ret___0 = 0;
#line 1022
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1022
  if (tmp___8 != 0) {
#line 1022
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1022
    if (tmp___9 == 0) {
#line 1022
      tmp___3 = get_current();
#line 1022
      __wait___0.flags = 0U;
#line 1022
      __wait___0.private = (void *)tmp___3;
#line 1022
      __wait___0.func = & autoremove_wake_function;
#line 1022
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1022
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_51469: 
#line 1022
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1022
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1022
      if (tmp___4 == 0) {
#line 1022
        goto ldv_51467;
      } else {
#line 1022
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1022
        if (tmp___5 != 0) {
#line 1022
          goto ldv_51467;
        } else {

        }
      }
#line 1022
      tmp___6 = get_current();
#line 1022
      tmp___7 = signal_pending(tmp___6);
#line 1022
      if (tmp___7 == 0) {
#line 1022
        schedule();
#line 1022
        goto ldv_51468;
      } else {

      }
#line 1022
      __ret___0 = -512;
#line 1022
      goto ldv_51467;
      ldv_51468: ;
#line 1022
      goto ldv_51469;
      ldv_51467: 
#line 1022
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1022
  sig = __ret___0;
#line 1026
  if (sig != 0) {
#line 1026
    goto _L;
  } else {
#line 1026
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1026
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1027
      spin_lock_irq(& mdev->al_lock);
#line 1028
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1028
      if (tmp___10 == 0U) {
#line 1029
        bm_ext->flags = 0UL;
#line 1030
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1031
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1033
      spin_unlock_irq(& mdev->al_lock);
#line 1034
      if (sig != 0) {
#line 1035
        return (-4);
      } else {

      }
#line 1036
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1036
      if (tmp___11 != 0L) {
#line 1037
        return (-4);
      } else {

      }
#line 1038
      if (sa != 0) {
#line 1038
        sa = sa - 1;
#line 1038
        if (sa == 0) {
#line 1039
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1041
      goto retry;
    } else {

    }
  }
#line 1021
  i = i + 1;
  ldv_51472: ;
#line 1021
  if (i <= 3) {
#line 1022
    goto ldv_51471;
  } else {

  }
#line 1044
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1045
  return (0);
}
}
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1059
  enr = (unsigned int )(sector >> 15);
#line 1060
  al_enr = enr * 4U;
#line 1065
  spin_lock_irq(& mdev->al_lock);
#line 1066
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1080
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1081
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1081
      __mptr = (struct lc_element  const  *)e;
#line 1081
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1081
      bm_ext = 0;
    }
#line 1082
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1083
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1083
      if (tmp != 0) {
#line 1083
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1083);
      } else {

      }
#line 1084
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1084
      if (tmp___0 == 0) {
#line 1084
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1084);
      } else {

      }
#line 1085
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1086
      mdev->resync_wenr = 4294967295U;
#line 1087
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1087
      if (tmp___1 == 0U) {
#line 1088
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1089
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1091
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1095
  e = lc_try_get(mdev->resync, enr);
#line 1096
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1096
    __mptr___0 = (struct lc_element  const  *)e;
#line 1096
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1096
    bm_ext = 0;
  }
#line 1097
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1098
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1098
    if (tmp___2 != 0) {
#line 1099
      goto proceed;
    } else {

    }
#line 1100
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1100
    if (tmp___3 == 0) {
#line 1101
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1107
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1108
      if (bm_ext->lce.refcnt == 0U) {
#line 1108
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1108);
      } else {

      }
    }
#line 1110
    goto check_al;
  } else {
#line 1113
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1114
      goto try_again;
    } else {

    }
#line 1116
    e = lc_get(mdev->resync, enr);
#line 1117
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1117
      __mptr___1 = (struct lc_element  const  *)e;
#line 1117
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1117
      bm_ext = 0;
    }
#line 1118
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1119
      rs_flags = (mdev->resync)->flags;
#line 1120
      if ((rs_flags & 4UL) != 0UL) {
#line 1121
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1123
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1123
      if (tmp___4 != 0L) {
#line 1123
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1123), "i" (12UL));
        ldv_51493: ;
#line 1123
        goto ldv_51493;
      } else {

      }
#line 1124
      goto try_again;
    } else {

    }
#line 1126
    if (bm_ext->lce.lc_number != enr) {
#line 1127
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1128
      bm_ext->rs_failed = 0;
#line 1129
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1130
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1131
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1131
      if (tmp___5 != 0) {
#line 1131
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1131);
      } else {

      }
    } else {

    }
#line 1133
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1134
    if (bm_ext->lce.refcnt != 1U) {
#line 1134
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1134);
    } else {

    }
#line 1135
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1136
    goto check_al;
  }
  check_al: 
#line 1139
  i = 0;
#line 1139
  goto ldv_51495;
  ldv_51494: 
#line 1140
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1140
  if (tmp___6 != 0L) {
#line 1141
    goto try_again;
  } else {

  }
#line 1142
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1142
  if (tmp___7 != 0) {
#line 1143
    goto try_again;
  } else {

  }
#line 1139
  i = i + 1;
  ldv_51495: ;
#line 1139
  if (i <= 3) {
#line 1140
    goto ldv_51494;
  } else {

  }
#line 1145
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1147
  mdev->resync_wenr = 4294967295U;
#line 1148
  spin_unlock_irq(& mdev->al_lock);
#line 1149
  return (0);
  try_again: ;
#line 1152
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1153
    mdev->resync_wenr = enr;
  } else {

  }
#line 1154
  spin_unlock_irq(& mdev->al_lock);
#line 1155
  return (-11);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1160
  enr = (unsigned int )(sector >> 15);
#line 1165
  tmp = spinlock_check(& mdev->al_lock);
#line 1165
  flags = _raw_spin_lock_irqsave(tmp);
#line 1166
  e = lc_find(mdev->resync, enr);
#line 1167
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1167
    __mptr = (struct lc_element  const  *)e;
#line 1167
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1167
    bm_ext = 0;
  }
#line 1168
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1169
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1170
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1170
    if (tmp___0 != 0) {
#line 1171
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1172
    return;
  } else {

  }
#line 1175
  if (bm_ext->lce.refcnt == 0U) {
#line 1176
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1177
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1180
    return;
  } else {

  }
#line 1183
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1183
  if (tmp___1 == 0U) {
#line 1184
    bm_ext->flags = 0UL;
#line 1185
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1186
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1189
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1190
  return;
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1198
  spin_lock_irq(& mdev->al_lock);
#line 1200
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1200
  if (tmp != 0) {
#line 1201
    lc_reset(mdev->resync);
#line 1202
    put_ldev(mdev);
  } else {

  }
#line 1204
  mdev->resync_locked = 0U;
#line 1205
  mdev->resync_wenr = 4294967295U;
#line 1206
  spin_unlock_irq(& mdev->al_lock);
#line 1207
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1208
  return;
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1223
  spin_lock_irq(& mdev->al_lock);
#line 1225
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1225
  if (tmp___3 != 0) {
#line 1227
    i = 0;
#line 1227
    goto ldv_51524;
    ldv_51523: 
#line 1228
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1229
    __mptr = (struct lc_element  const  *)e;
#line 1229
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1230
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1231
      goto ldv_51522;
    } else {

    }
#line 1232
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1233
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1236
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1236
      if (tmp != 0) {
#line 1236
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1236);
      } else {

      }
#line 1237
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1237
      if (tmp___0 == 0) {
#line 1237
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1237);
      } else {

      }
#line 1238
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1239
      mdev->resync_wenr = 4294967295U;
#line 1240
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1242
    if (bm_ext->lce.refcnt != 0U) {
#line 1243
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1245
      put_ldev(mdev);
#line 1246
      spin_unlock_irq(& mdev->al_lock);
#line 1247
      return (-11);
    } else {

    }
#line 1249
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1249
    if (tmp___1 != 0) {
#line 1249
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1249);
    } else {

    }
#line 1250
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1250
    if (tmp___2 != 0) {
#line 1250
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1250);
    } else {

    }
#line 1251
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_51522: 
#line 1227
    i = i + 1;
    ldv_51524: ;
#line 1227
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1228
      goto ldv_51523;
    } else {

    }

#line 1253
    if ((mdev->resync)->used != 0U) {
#line 1253
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1253);
    } else {

    }
#line 1254
    put_ldev(mdev);
  } else {

  }
#line 1256
  spin_unlock_irq(& mdev->al_lock);
#line 1257
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1259
  return (0);
}
}
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1274
  wake_up = 0;
#line 1276
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1279
    return;
  } else {

  }
#line 1281
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1282
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1284
  _b = sector >= nr_sectors;
#line 1284
  if (_b != 0) {
#line 1284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1284);
  } else {

  }
#line 1284
  if (_b != 0) {
#line 1284
    return;
  } else {

  }
#line 1285
  _b___0 = esector >= nr_sectors;
#line 1285
  if (_b___0 != 0) {
#line 1285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1285);
  } else {

  }
#line 1285
  if (_b___0 != 0) {
#line 1285
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1287
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1292
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1292
  if (tmp != 0L) {
#line 1293
    return;
  } else {

  }
#line 1294
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1294
  if (tmp___0 != 0L) {
#line 1295
    ebnr = lbnr;
  } else {
#line 1297
    ebnr = (esector - 7UL) >> 3;
  }
#line 1298
  sbnr = (sector + 7UL) >> 3;
#line 1300
  if (sbnr > ebnr) {
#line 1301
    return;
  } else {

  }
#line 1307
  spin_lock_irq(& mdev->al_lock);
#line 1308
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1308
  count = (unsigned long )tmp___1;
#line 1309
  if (count != 0UL) {
#line 1310
    mdev->rs_failed = mdev->rs_failed + count;
#line 1312
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1312
    if (tmp___2 != 0) {
#line 1313
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1314
      put_ldev(mdev);
    } else {

    }
#line 1319
    wake_up = 1;
  } else {

  }
#line 1321
  spin_unlock_irq(& mdev->al_lock);
#line 1322
  if (wake_up != 0) {
#line 1323
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1324
  return;
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 77 "include/uapi/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 314 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 316
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 317
  return;
}
}
#line 459 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 461
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 461
  return ((unsigned int )tmp);
}
}
#line 653
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 655
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 94 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 175
extern int del_timer(struct timer_list * ) ;
#line 468 "include/linux/module.h"
bool ldv_try_module_get_5(struct module *ldv_func_arg1 ) ;
#line 474
void ldv_module_put_4(struct module *ldv_func_arg1 ) ;
#line 478
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 205 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 205
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 205
  return (tmp);
}
}
#line 2047 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2048
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2049
extern struct block_device *bdget(dev_t  ) ;
#line 2054
extern void bdput(struct block_device * ) ;
#line 2097
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1866 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2147
extern int wake_up_process(struct task_struct * ) ;
#line 246 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 270
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 125 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 128
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 13 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 14
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 410 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 415
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 609
extern struct gendisk *alloc_disk(int  ) ;
#line 611
extern void put_disk(struct gendisk * ) ;
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 66
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 67
extern void mempool_free_pages(void * , void * ) ;
#line 68 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 70
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 70
  return (tmp);
}
}
#line 213 "include/linux/bio.h"
extern void bioset_free(struct bio_set * ) ;
#line 895 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 896
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 897
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 899
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 932
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 938
extern void blk_queue_flush(struct request_queue * , unsigned int  ) ;
#line 949
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_49899: ;
#line 593
    goto ldv_49899;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_49914: ;
#line 618
    goto ldv_49914;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1203
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1217
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1223
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1228
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1234
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1238
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1241
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1277
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1279
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1284
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1291
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1292
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1293
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1295
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1301
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1502 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1506 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1507 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1522 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1523 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1524 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1525 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1533 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1537 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1543
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1544
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1546 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1556
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1557
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1724
void drbd_nl_cleanup(void) ;
#line 1725
int drbd_nl_init(void) ;
#line 1726
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1811 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1813
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1813
  if (tmp == 0) {
#line 1813
    goto ldv_51017;
  } else {

  }
#line 1813
  tmp___0 = get_current();
#line 1813
  __wait.flags = 0U;
#line 1813
  __wait.private = (void *)tmp___0;
#line 1813
  __wait.func = & autoremove_wake_function;
#line 1813
  __wait.task_list.next = & __wait.task_list;
#line 1813
  __wait.task_list.prev = & __wait.task_list;
  ldv_51020: 
#line 1813
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1813
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1813
  if (tmp___1 == 0) {
#line 1813
    goto ldv_51019;
  } else {

  }
#line 1813
  schedule();
#line 1813
  goto ldv_51020;
  ldv_51019: 
#line 1813
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51017: ;
#line 1816
  return;
}
}
#line 1860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1864
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1866
  if ((unsigned int )forcedetach == 0U) {
#line 1867
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1867
    if (tmp != 0) {
#line 1868
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1869
    if ((int )mdev->state.ldv_40583.disk > 4) {
#line 1870
      __ns.i = mdev->state.i;
#line 1870
      __ns.ldv_40583.disk = 4U;
#line 1870
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1871
    goto ldv_51049;
  } else {

  }
  case 2: ;
  case 1: 
#line 1876
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1877
  if ((unsigned int )forcedetach == 2U) {
#line 1878
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1879
  if ((int )mdev->state.ldv_40583.disk > 2) {
#line 1880
    __ns___0.i = mdev->state.i;
#line 1880
    __ns___0.ldv_40583.disk = 2U;
#line 1880
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1884
  goto ldv_51049;
  }
  ldv_51049: ;
#line 1887
  return;
}
}
#line 1897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1900
  if (error != 0) {
#line 1902
    tmp = spinlock_check(& mdev->req_lock);
#line 1902
    flags = _raw_spin_lock_irqsave(tmp);
#line 1903
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1904
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1906
  return;
}
}
#line 1959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1962
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1966
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1966
  if (tmp___1 != 0UL) {
#line 1966
    __min1 = 2251799813685248UL;
#line 1966
    tmp___0 = drbd_md_first_sector(bdev);
#line 1966
    __min2 = tmp___0;
#line 1966
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1966
    s = 0UL;
  }
#line 1969
  goto ldv_51090;
  case -2: 
#line 1971
  __min1___0 = 2251799813685248UL;
#line 1971
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1971
  __min2___0 = tmp___2;
#line 1971
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1974
  __min1___1 = s;
#line 1974
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1974
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1977
  goto ldv_51090;
  default: 
#line 1979
  __min1___2 = 8587575296UL;
#line 1979
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1979
  __min2___2 = tmp___3;
#line 1979
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51090: ;
#line 1982
  return (s);
}
}
#line 1990 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1993
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1995
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 2001
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2002
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 2002
    if (tmp != 0) {
#line 2003
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 2004
      dump_stack();
    } else {

    }
#line 2006
    return (0UL);
  } else {

  }
#line 2008
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 2008
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 2011
  return (0UL);
  }
}
}
#line 2073 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2075
  _drbd_thread_stop(thi, 0, 0);
#line 2076
  return;
}
}
#line 2078 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2080
  _drbd_thread_stop(thi, 1, 0);
#line 2081
  return;
}
}
#line 2295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2297
  s = mdev->state;
#line 2302
  switch ((unsigned int )s.ldv_40583.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2327
  goto ldv_51221;
  case 13U: ;
#line 2331
  if (mdev->agreed_pro_version <= 95) {
#line 2332
    return (0);
  } else {

  }
#line 2333
  goto ldv_51221;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2340
  return (0);
  }
  ldv_51221: ;
#line 2343
  switch ((unsigned int )s.ldv_40583.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2351
  goto ldv_51232;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2359
  return (0);
  }
  ldv_51232: ;
#line 2362
  return (1);
}
}
#line 2370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2372
  tmp = drbd_get_max_buffers(mdev);
#line 2372
  mxb = tmp;
#line 2374
  tmp___0 = is_susp(mdev->state);
#line 2374
  if (tmp___0 != 0) {
#line 2375
    return (0);
  } else {

  }
#line 2376
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2376
  if (tmp___1 != 0) {
#line 2377
    return (0);
  } else {

  }
#line 2384
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2384
  if (tmp___2 == 0) {
#line 2385
    return (0);
  } else {

  }
#line 2389
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2389
  if (tmp___3 > mxb) {
#line 2390
    return (0);
  } else {

  }
#line 2391
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2391
  if (tmp___4 != 0) {
#line 2392
    return (0);
  } else {

  }
#line 2393
  return (1);
}
}
#line 2475 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2477
  sk = (mdev->data.socket)->sk;
#line 2478
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2479
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2480
  return;
}
}
#line 2482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2489
  return (0);
}
}
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_51486;
  ldv_51485: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_51486: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_51485;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 89
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 90
static void _tl_clear(struct drbd_conf *mdev ) ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 136
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 167
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;
  struct bio *tmp___0 ;

  {
#line 175
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 176
    tmp = bio_alloc(gfp_mask, 1U);
#line 176
    return (tmp);
  } else {

  }
#line 178
  tmp___0 = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 178
  return (tmp___0);
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 215
  tmp = kmalloc(56UL, 208U);
#line 215
  b = (struct drbd_tl_epoch *)tmp;
#line 216
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 217
    return (0);
  } else {

  }
#line 218
  INIT_LIST_HEAD(& b->requests);
#line 219
  INIT_LIST_HEAD(& b->w.list);
#line 220
  b->next = 0;
#line 221
  b->br_number = 4711U;
#line 222
  b->n_writes = 0;
#line 223
  b->w.cb = 0;
#line 225
  mdev->oldest_tle = b;
#line 226
  mdev->newest_tle = b;
#line 227
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 228
  INIT_LIST_HEAD(& mdev->barrier_acked_requests);
#line 230
  mdev->tl_hash = 0;
#line 231
  mdev->tl_hash_s = 0U;
#line 233
  return (1);
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 238
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 238
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            238);
  } else {

  }
#line 239
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 239
  if (tmp == 0) {
#line 239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            239);
  } else {

  }
#line 240
  kfree((void const   *)mdev->oldest_tle);
#line 241
  mdev->oldest_tle = 0;
#line 242
  kfree((void const   *)mdev->unused_spare_tle);
#line 243
  mdev->unused_spare_tle = 0;
#line 244
  kfree((void const   *)mdev->tl_hash);
#line 245
  mdev->tl_hash = 0;
#line 246
  mdev->tl_hash_s = 0U;
#line 247
  return;
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 260
  INIT_LIST_HEAD(& new->requests);
#line 261
  INIT_LIST_HEAD(& new->w.list);
#line 262
  new->w.cb = 0;
#line 263
  new->next = 0;
#line 264
  new->n_writes = 0;
#line 266
  newest_before = mdev->newest_tle;
#line 267
  new->br_number = newest_before->br_number + 1U;
#line 268
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 269
    (mdev->newest_tle)->next = new;
#line 270
    mdev->newest_tle = new;
  } else {

  }
#line 272
  return;
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 291
  spin_lock_irq(& mdev->req_lock);
#line 293
  b = mdev->oldest_tle;
#line 296
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 299
    goto bail;
  } else {

  }
#line 301
  if (b->br_number != barrier_nr) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 304
    goto bail;
  } else {

  }
#line 306
  if ((unsigned int )b->n_writes != set_size) {
#line 307
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 309
    goto bail;
  } else {

  }
#line 313
  le = b->requests.next;
#line 313
  tle = le->next;
#line 313
  goto ldv_51721;
  ldv_51720: 
#line 314
  __mptr = (struct list_head  const  *)le;
#line 314
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 315
  _req_mod(r, barrier_acked);
#line 313
  le = tle;
#line 313
  tle = le->next;
  ldv_51721: ;
#line 313
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 314
    goto ldv_51720;
  } else {

  }
#line 330
  list_splice_init(& b->requests, & mdev->barrier_acked_requests);
#line 332
  nob = b->next;
#line 333
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 333
  if (tmp != 0) {
#line 334
    _tl_add_barrier(mdev, b);
#line 335
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 336
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 340
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 340
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              340);
    } else {

    }
#line 341
    mdev->oldest_tle = nob;
#line 342
    kfree((void const   *)b);
  }
#line 345
  spin_unlock_irq(& mdev->req_lock);
#line 346
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 346
  if (tmp___0 != 0) {
#line 346
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 346
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 346
  if (tmp___2 < 0) {
#line 346
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 346, tmp___1);
  } else {

  }
#line 348
  return;
  bail: 
#line 351
  spin_unlock_irq(& mdev->req_lock);
#line 352
  val.i = 0U;
#line 352
  val.ldv_40583.conn = 6U;
#line 352
  mask.i = 0U;
#line 352
  mask.ldv_40583.conn = 31U;
#line 352
  drbd_force_state(mdev, mask, val);
#line 354
  return;
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 371
  b = mdev->oldest_tle;
#line 372
  pn = & mdev->oldest_tle;
#line 373
  goto ldv_51756;
  ldv_51755: 
#line 374
  n_writes = 0;
#line 375
  n_reads = 0;
#line 376
  INIT_LIST_HEAD(& carry_reads);
#line 377
  le = b->requests.next;
#line 377
  tle = le->next;
#line 377
  goto ldv_51748;
  ldv_51747: 
#line 378
  __mptr = (struct list_head  const  *)le;
#line 378
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 379
  rv = _req_mod(req, what);
#line 381
  n_writes = (rv & 1) + n_writes;
#line 382
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 377
  le = tle;
#line 377
  tle = le->next;
  ldv_51748: ;
#line 377
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 378
    goto ldv_51747;
  } else {

  }
#line 384
  tmp = b->next;
#line 386
  if (n_writes != 0) {
#line 387
    if ((unsigned int )what == 24U) {
#line 388
      b->n_writes = n_writes;
#line 389
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 390
        b->w.cb = & w_send_barrier;
#line 391
        inc_ap_pending(mdev);
#line 392
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 395
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 397
    pn = & b->next;
  } else {
#line 399
    if (n_reads != 0) {
#line 400
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 403
    list_del(& b->requests);
#line 408
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 409
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 409
      if (tmp___0 != 0) {
#line 409
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 409
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 409
      if (tmp___2 < 0) {
#line 409
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 409
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 409, tmp___1);
      } else {

      }
    } else {

    }
#line 411
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 413
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 413
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                413);
      } else {

      }
#line 414
      INIT_LIST_HEAD(& b->requests);
#line 415
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 416
      INIT_LIST_HEAD(& b->w.list);
#line 417
      b->w.cb = 0;
#line 418
      b->br_number = random32();
#line 419
      b->n_writes = 0;
#line 421
      *pn = b;
#line 422
      goto ldv_51754;
    } else {

    }
#line 424
    *pn = tmp;
#line 425
    kfree((void const   *)b);
  }
#line 427
  b = tmp;
#line 428
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_51756: ;
#line 373
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 374
    goto ldv_51755;
  } else {

  }
  ldv_51754: 
#line 434
  le = mdev->barrier_acked_requests.next;
#line 434
  tle = le->next;
#line 434
  goto ldv_51760;
  ldv_51759: 
#line 435
  __mptr___0 = (struct list_head  const  *)le;
#line 435
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 436
  _req_mod(req, what);
#line 434
  le = tle;
#line 434
  tle = le->next;
  ldv_51760: ;
#line 434
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 435
    goto ldv_51759;
  } else {

  }

#line 439
  return;
}
}
#line 449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 


  {
#line 451
  spin_lock_irq(& mdev->req_lock);
#line 452
  _tl_clear(mdev);
#line 453
  spin_unlock_irq(& mdev->req_lock);
#line 454
  return;
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 461
  _tl_restart(mdev, connection_lost_while_pending);
#line 464
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 464
  if (tmp == 0) {
#line 464
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            464);
  } else {

  }
#line 467
  le = mdev->out_of_sequence_requests.next;
#line 467
  tle = le->next;
#line 467
  goto ldv_51774;
  ldv_51773: 
#line 468
  __mptr = (struct list_head  const  *)le;
#line 468
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 471
  _req_mod(r, connection_lost_while_pending);
#line 467
  le = tle;
#line 467
  tle = le->next;
  ldv_51774: ;
#line 467
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 468
    goto ldv_51773;
  } else {

  }
#line 475
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 477
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 478
  return;
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 483
  spin_lock_irq(& mdev->req_lock);
#line 484
  _tl_restart(mdev, what);
#line 485
  spin_unlock_irq(& mdev->req_lock);
#line 486
  return;
}
}
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 498
  spin_lock_irq(& mdev->req_lock);
#line 499
  b = mdev->oldest_tle;
#line 500
  goto ldv_51794;
  ldv_51793: 
#line 501
  le = b->requests.next;
#line 501
  tle = le->next;
#line 501
  goto ldv_51791;
  ldv_51790: 
#line 502
  __mptr = (struct list_head  const  *)le;
#line 502
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 503
  if ((req->rq_state & 1UL) == 0UL) {
#line 504
    goto ldv_51789;
  } else {

  }
#line 505
  _req_mod(req, abort_disk_io);
  ldv_51789: 
#line 501
  le = tle;
#line 501
  tle = le->next;
  ldv_51791: ;
#line 501
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 502
    goto ldv_51790;
  } else {

  }
#line 507
  b = b->next;
  ldv_51794: ;
#line 500
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 501
    goto ldv_51793;
  } else {

  }
#line 510
  le = mdev->barrier_acked_requests.next;
#line 510
  tle = le->next;
#line 510
  goto ldv_51800;
  ldv_51799: 
#line 511
  __mptr___0 = (struct list_head  const  *)le;
#line 511
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 512
  if ((req->rq_state & 1UL) == 0UL) {
#line 513
    goto ldv_51798;
  } else {

  }
#line 514
  _req_mod(req, abort_disk_io);
  ldv_51798: 
#line 510
  le = tle;
#line 510
  tle = le->next;
  ldv_51800: ;
#line 510
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 511
    goto ldv_51799;
  } else {

  }
#line 517
  spin_unlock_irq(& mdev->req_lock);
#line 518
  return;
}
}
#line 526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 529
  return (((((int )os.ldv_40583.conn > 9 && (int )ns.ldv_40583.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_40583.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 546
  tmp = spinlock_check(& mdev->req_lock);
#line 546
  flags = _raw_spin_lock_irqsave(tmp);
#line 547
  os = mdev->state;
#line 548
  ns.i = (os.i & ~ mask.i) | val.i;
#line 549
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 550
  ns = mdev->state;
#line 551
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 553
  return (rv);
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 565
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 566
  return;
}
}
#line 568
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 569
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 580
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) ;
#line 582
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 593
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 593
  if (tmp != 0) {
#line 594
    return (SS_CW_SUCCESS);
  } else {

  }
#line 596
  tmp___0 = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 596
  if (tmp___0 != 0) {
#line 597
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 599
  rv = SS_UNKNOWN_ERROR;
#line 600
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 600
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 601
  os = mdev->state;
#line 602
  ns.i = (os.i & ~ mask.i) | val.i;
#line 603
  ns = sanitize_state(mdev, os, ns, 0);
#line 605
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 605
  if (tmp___2 == 0) {
#line 606
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 607
  if ((int )rv == 0) {
#line 608
    rv = is_valid_state(mdev, ns);
#line 609
    if ((int )rv == 1) {
#line 610
      rv = is_valid_state_transition(mdev, ns, os);
#line 611
      if ((int )rv == 1) {
#line 612
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 615
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 617
  return (rv);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 639
  init_completion(& done);
#line 641
  if (((unsigned int )f & 8U) != 0U) {
#line 642
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 644
  tmp = spinlock_check(& mdev->req_lock);
#line 644
  flags = _raw_spin_lock_irqsave(tmp);
#line 645
  os = mdev->state;
#line 646
  ns.i = (os.i & ~ mask.i) | val.i;
#line 647
  ns = sanitize_state(mdev, os, ns, 0);
#line 649
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 649
  if (tmp___3 != 0) {
#line 650
    rv = is_valid_state(mdev, ns);
#line 651
    if ((int )rv == 1) {
#line 652
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 653
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 655
    if ((int )rv <= 0) {
#line 656
      if (((unsigned int )f & 2U) != 0U) {
#line 657
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 658
      goto abort;
    } else {

    }
#line 661
    drbd_state_lock___0(mdev);
#line 662
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 662
    if (tmp___0 == 0) {
#line 663
      drbd_state_unlock(mdev);
#line 664
      rv = SS_CW_FAILED_BY_PEER;
#line 665
      if (((unsigned int )f & 2U) != 0U) {
#line 666
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 667
      goto abort;
    } else {

    }
#line 670
    rv = _req_st_cond(mdev, mask, val);
#line 670
    if ((int )rv != 0) {
#line 670
      goto ldv_51875;
    } else {

    }
#line 670
    tmp___1 = get_current();
#line 670
    __wait.flags = 0U;
#line 670
    __wait.private = (void *)tmp___1;
#line 670
    __wait.func = & autoremove_wake_function;
#line 670
    __wait.task_list.next = & __wait.task_list;
#line 670
    __wait.task_list.prev = & __wait.task_list;
    ldv_51878: 
#line 670
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 670
    rv = _req_st_cond(mdev, mask, val);
#line 670
    if ((int )rv != 0) {
#line 670
      goto ldv_51877;
    } else {

    }
#line 670
    schedule();
#line 670
    goto ldv_51878;
    ldv_51877: 
#line 670
    finish_wait(& mdev->state_wait, & __wait);
    ldv_51875: ;
#line 673
    if ((int )rv <= 0) {
#line 674
      drbd_state_unlock(mdev);
#line 675
      if (((unsigned int )f & 2U) != 0U) {
#line 676
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 677
      goto abort;
    } else {

    }
#line 679
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 679
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 680
    os = mdev->state;
#line 681
    ns.i = (os.i & ~ mask.i) | val.i;
#line 682
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 683
    drbd_state_unlock(mdev);
  } else {
#line 685
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 688
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 690
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 691
    tmp___4 = get_current();
#line 691
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 691
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              691);
    } else {

    }
#line 692
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 696
  if (((unsigned int )f & 8U) != 0U) {
#line 697
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 699
  return (rv);
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 718
  rv = drbd_req_state(mdev, mask, val, f);
#line 718
  if ((int )rv != -18) {
#line 718
    goto ldv_51889;
  } else {

  }
#line 718
  tmp = get_current();
#line 718
  __wait.flags = 0U;
#line 718
  __wait.private = (void *)tmp;
#line 718
  __wait.func = & autoremove_wake_function;
#line 718
  __wait.task_list.next = & __wait.task_list;
#line 718
  __wait.task_list.prev = & __wait.task_list;
  ldv_51892: 
#line 718
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 718
  rv = drbd_req_state(mdev, mask, val, f);
#line 718
  if ((int )rv != -18) {
#line 718
    goto ldv_51891;
  } else {

  }
#line 718
  schedule();
#line 718
  goto ldv_51892;
  ldv_51891: 
#line 718
  finish_wait(& mdev->state_wait, & __wait);
  ldv_51889: ;
#line 721
  return (rv);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 726
  tmp = is_susp(ns);
#line 726
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40583.pdsk);
#line 726
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40583.disk);
#line 726
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_40583.peer);
#line 726
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_40583.role);
#line 726
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_40583.conn);
#line 726
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 737
  return;
}
}
#line 740 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 743
  if ((int )err == -18) {
#line 744
    return;
  } else {

  }
#line 745
  tmp = drbd_set_st_err_str(err);
#line 745
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 746
  print_st(mdev, (char *)" state", os);
#line 747
  print_st(mdev, (char *)"wanted", ns);
#line 748
  return;
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 762
  rv = 1;
#line 764
  fp = FP_DONT_CARE;
#line 765
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 765
  if (tmp != 0) {
#line 766
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 767
    put_ldev(mdev);
  } else {

  }
#line 770
  tmp___0 = get_net_conf(mdev);
#line 770
  if (tmp___0 != 0) {
#line 771
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 773
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 774
    put_net_conf(mdev);
  } else {

  }
#line 777
  if ((int )rv <= 0) {

  } else
#line 779
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 780
    rv = SS_DEVICE_IN_USE;
  } else
#line 782
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40583.conn <= 9) && (int )ns.ldv_40583.disk <= 7) {
#line 783
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 785
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_40583.conn <= 9) && (int )ns.ldv_40583.pdsk > 5) {
#line 787
    rv = SS_PRIMARY_NOP;
  } else
#line 789
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40583.disk <= 4) && (int )ns.ldv_40583.pdsk <= 4) {
#line 790
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 792
  if ((int )ns.ldv_40583.conn > 10 && (int )ns.ldv_40583.disk <= 3) {
#line 793
    rv = SS_NO_LOCAL_DISK;
  } else
#line 795
  if ((int )ns.ldv_40583.conn > 10 && (int )ns.ldv_40583.pdsk <= 3) {
#line 796
    rv = SS_NO_REMOTE_DISK;
  } else
#line 798
  if (((int )ns.ldv_40583.conn > 10 && (int )ns.ldv_40583.disk <= 7) && (int )ns.ldv_40583.pdsk <= 7) {
#line 799
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 801
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 806
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 808
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 810
    rv = SS_NO_VERIFY_ALG;
  } else
#line 812
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 814
    rv = SS_NOT_SUPPORTED;
  } else
#line 816
  if ((int )ns.ldv_40583.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 817
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 819
  return (rv);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 832
  rv = 1;
#line 834
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_40583.conn > 10) {
#line 836
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 838
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 839
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 841
  if ((int )ns.ldv_40583.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 842
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 844
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_40583.conn <= 1) {
#line 845
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 847
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_40583.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 848
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 850
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 851
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 853
  if ((int )ns.ldv_40583.conn == (int )os.ldv_40583.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 854
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 858
  tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 858
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 861
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 863
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_40583.conn <= 9) {
#line 864
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 866
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_40583.conn != (int )os.ldv_40583.conn) && (int )os.ldv_40583.conn > 10) {
#line 868
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 870
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_40583.conn <= 9) {
#line 872
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 874
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_40583.conn <= 8) {
#line 876
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 878
  return (rv);
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 883
  msg_table[0] = "";
#line 883
  msg_table[1] = "Online-verify aborted.";
#line 883
  msg_table[2] = "Resync aborted.";
#line 883
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 883
  msg_table[4] = "Implicitly upgraded disk";
#line 883
  msg_table[5] = "Implicitly upgraded pdsk";
#line 892
  if ((unsigned int )warn != 0U) {
#line 893
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 894
  return;
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;

  {
#line 912
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 913
    *warn = NO_WARNING;
  } else {

  }
#line 915
  fp = FP_DONT_CARE;
#line 916
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 916
  if (tmp != 0) {
#line 917
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 918
    put_ldev(mdev);
  } else {

  }
#line 922
  if (((int )ns.ldv_40583.conn > 2 && (int )ns.ldv_40583.conn <= 7) && (int )os.ldv_40583.conn <= 1) {
#line 924
    ns.ldv_40583.conn = os.ldv_40583.conn;
  } else {

  }
#line 928
  if (((((int )os.ldv_40583.conn > 2 && (int )os.ldv_40583.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_40583.conn <= 10) {
#line 930
    ns.ldv_40583.conn = os.ldv_40583.conn;
  } else {

  }
#line 933
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 934
    ns.ldv_40583.disk = 0U;
  } else {

  }
#line 937
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 938
    ns.ldv_40583.conn = os.ldv_40583.conn;
  } else {

  }
#line 940
  if ((int )ns.ldv_40583.conn <= 9) {
#line 941
    ns.ldv_40583.peer_isp = 0U;
#line 942
    ns.ldv_40583.peer = 0U;
#line 943
    if ((int )ns.ldv_40583.pdsk > 6 || (int )ns.ldv_40583.pdsk <= 3) {
#line 944
      ns.ldv_40583.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 948
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 949
    ns.ldv_40583.aftr_isp = 0U;
  } else {

  }
#line 952
  if (((int )os.ldv_40583.conn > 10 && (int )ns.ldv_40583.conn > 10) && ((int )ns.ldv_40583.disk <= 2 || (int )ns.ldv_40583.pdsk <= 2)) {
#line 954
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 955
      *warn = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 957
    ns.ldv_40583.conn = 10U;
  } else {

  }
#line 961
  if ((int )ns.ldv_40583.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 961
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 961
    if (tmp___0 != 0) {
#line 963
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 964
        ns.ldv_40583.disk = mdev->new_state_tmp.ldv_40583.disk;
#line 965
        ns.ldv_40583.pdsk = mdev->new_state_tmp.ldv_40583.pdsk;
      } else {
#line 967
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 968
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 969
        ns.ldv_40583.disk = 0U;
#line 970
        ns.ldv_40583.pdsk = 6U;
      }
#line 972
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 976
  if ((int )ns.ldv_40583.conn > 9 && (int )ns.ldv_40583.conn <= 21) {
#line 977
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 978
      ns.ldv_40583.disk = 8U;
    } else {

    }
#line 979
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 980
      ns.ldv_40583.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 984
  disk_min = D_DISKLESS;
#line 985
  disk_max = D_UP_TO_DATE;
#line 986
  pdsk_min = D_INCONSISTENT;
#line 987
  pdsk_max = D_UNKNOWN;
#line 988
  switch ((unsigned int )ns.ldv_40583.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 994
  disk_min = D_INCONSISTENT;
#line 995
  disk_max = D_OUTDATED;
#line 996
  pdsk_min = D_UP_TO_DATE;
#line 997
  pdsk_max = D_UP_TO_DATE;
#line 998
  goto ldv_51937;
  case 18U: ;
  case 19U: 
#line 1001
  disk_min = D_UP_TO_DATE;
#line 1002
  disk_max = D_UP_TO_DATE;
#line 1003
  pdsk_min = D_UP_TO_DATE;
#line 1004
  pdsk_max = D_UP_TO_DATE;
#line 1005
  goto ldv_51937;
  case 10U: 
#line 1007
  disk_min = D_DISKLESS;
#line 1008
  disk_max = D_UP_TO_DATE;
#line 1009
  pdsk_min = D_DISKLESS;
#line 1010
  pdsk_max = D_UP_TO_DATE;
#line 1011
  goto ldv_51937;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 1016
  disk_min = D_UP_TO_DATE;
#line 1017
  disk_max = D_UP_TO_DATE;
#line 1018
  pdsk_min = D_INCONSISTENT;
#line 1019
  pdsk_max = D_CONSISTENT;
#line 1020
  goto ldv_51937;
  case 17U: 
#line 1022
  disk_min = D_INCONSISTENT;
#line 1023
  disk_max = D_INCONSISTENT;
#line 1024
  pdsk_min = D_UP_TO_DATE;
#line 1025
  pdsk_max = D_UP_TO_DATE;
#line 1026
  goto ldv_51937;
  case 16U: 
#line 1028
  disk_min = D_UP_TO_DATE;
#line 1029
  disk_max = D_UP_TO_DATE;
#line 1030
  pdsk_min = D_INCONSISTENT;
#line 1031
  pdsk_max = D_INCONSISTENT;
#line 1032
  goto ldv_51937;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1044
  goto ldv_51937;
  }
  ldv_51937: ;
#line 1046
  if ((unsigned int )ns.ldv_40583.disk > (unsigned int )disk_max) {
#line 1047
    ns.ldv_40583.disk = (unsigned char )disk_max;
  } else {

  }
#line 1049
  if ((unsigned int )ns.ldv_40583.disk < (unsigned int )disk_min) {
#line 1050
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1051
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 1052
    ns.ldv_40583.disk = (unsigned char )disk_min;
  } else {

  }
#line 1054
  if ((unsigned int )ns.ldv_40583.pdsk > (unsigned int )pdsk_max) {
#line 1055
    ns.ldv_40583.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1057
  if ((unsigned int )ns.ldv_40583.pdsk < (unsigned int )pdsk_min) {
#line 1058
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1059
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 1060
    ns.ldv_40583.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1063
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40583.conn <= 9) && (int )ns.ldv_40583.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_40583.conn > 9) || (int )os.ldv_40583.pdsk <= 5)) {
#line 1066
    ns.ldv_40583.susp_fen = 1U;
  } else {

  }
#line 1068
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40583.disk <= 7) && (int )ns.ldv_40583.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_40583.disk > 7) || (int )os.ldv_40583.pdsk > 7)) {
#line 1071
    ns.ldv_40583.susp_nod = 1U;
  } else {

  }
#line 1073
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1074
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1075
      ns.ldv_40583.conn = 20U;
    } else {

    }
#line 1076
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1077
      ns.ldv_40583.conn = 21U;
    } else {

    }
  } else {
#line 1079
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1080
      ns.ldv_40583.conn = 16U;
    } else {

    }
#line 1081
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1082
      ns.ldv_40583.conn = 17U;
    } else {

    }
  }
#line 1085
  return (ns);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1091
  if (mdev->agreed_pro_version <= 89) {
#line 1092
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1093
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1094
  mdev->ov_position = 0UL;
#line 1095
  if ((unsigned int )cs == 19U) {
#line 1101
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1103
    bit = mdev->ov_start_sector >> 3;
#line 1104
    if (mdev->rs_total <= bit) {
#line 1105
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1107
      mdev->rs_total = 1UL;
    } else {
#line 1109
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1110
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1112
  mdev->ov_left = mdev->rs_total;
#line 1113
  return;
}
}
#line 1115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1117
  tmp = test_and_clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1117
  if (tmp != 0) {
#line 1118
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1119
  return;
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1135
  rv = 1;
#line 1139
  os = mdev->state;
#line 1141
  ns = sanitize_state(mdev, os, ns, & ssw);
#line 1143
  if (ns.i == os.i) {
#line 1144
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1146
  if (((unsigned int )flags & 1U) == 0U) {
#line 1150
    rv = is_valid_state(mdev, ns);
#line 1151
    if ((int )rv <= 0) {
#line 1155
      tmp = is_valid_state(mdev, os);
#line 1155
      if ((int )tmp == (int )rv) {
#line 1156
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1158
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1161
  if ((int )rv <= 0) {
#line 1162
    if (((unsigned int )flags & 2U) != 0U) {
#line 1163
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1164
    return (rv);
  } else {

  }
#line 1167
  print_sanitize_warnings(mdev, ssw);
#line 1171
  pbp = (char *)(& pb);
#line 1172
  *pbp = 0;
#line 1173
  if ((int )ns.ldv_40583.role != (int )os.ldv_40583.role) {
#line 1174
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_40583.role);
#line 1174
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_40583.role);
#line 1174
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1174
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1177
  if ((int )ns.ldv_40583.peer != (int )os.ldv_40583.peer) {
#line 1178
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_40583.peer);
#line 1178
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_40583.peer);
#line 1178
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1178
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1181
  if ((int )ns.ldv_40583.conn != (int )os.ldv_40583.conn) {
#line 1182
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_40583.conn);
#line 1182
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_40583.conn);
#line 1182
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1182
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1185
  if ((int )ns.ldv_40583.disk != (int )os.ldv_40583.disk) {
#line 1186
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40583.disk);
#line 1186
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_40583.disk);
#line 1186
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1186
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1189
  if ((int )ns.ldv_40583.pdsk != (int )os.ldv_40583.pdsk) {
#line 1190
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40583.pdsk);
#line 1190
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_40583.pdsk);
#line 1190
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1190
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1193
  tmp___18 = is_susp(ns);
#line 1193
  tmp___19 = is_susp(os);
#line 1193
  if (tmp___18 != tmp___19) {
#line 1194
    tmp___15 = is_susp(ns);
#line 1194
    tmp___16 = is_susp(os);
#line 1194
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1194
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1197
  if ((int )ns.ldv_40583.aftr_isp != (int )os.ldv_40583.aftr_isp) {
#line 1198
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_40583.aftr_isp,
                       (int )ns.ldv_40583.aftr_isp);
#line 1198
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1201
  if ((int )ns.ldv_40583.peer_isp != (int )os.ldv_40583.peer_isp) {
#line 1202
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_40583.peer_isp,
                       (int )ns.ldv_40583.peer_isp);
#line 1202
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1205
  if ((int )ns.ldv_40583.user_isp != (int )os.ldv_40583.user_isp) {
#line 1206
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_40583.user_isp,
                       (int )ns.ldv_40583.user_isp);
#line 1206
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1209
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1220
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1220
    tmp___23 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1220
    if (tmp___23 == 0) {
#line 1224
      set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1230
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1232
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1234
  mdev->state = ns;
#line 1236
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_40583.disk > 2) {
#line 1237
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1239
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1240
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1244
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_40583.conn <= 10) {
#line 1246
    tmp___24 = drbd_bm_bits(mdev);
#line 1246
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1248
    if (mdev->ov_left != 0UL) {
#line 1249
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
                (unsigned long long )mdev->ov_start_sector);
    } else {

    }
  } else {

  }
#line 1253
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1255
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1256
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1258
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1259
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1262
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1264
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1265
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1268
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1270
    now = jiffies;
#line 1273
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_40583.conn);
#line 1274
    mdev->rs_start = now;
#line 1275
    mdev->rs_last_events = 0;
#line 1276
    mdev->rs_last_sect_ev = 0;
#line 1277
    mdev->ov_last_oos_size = 0UL;
#line 1278
    mdev->ov_last_oos_start = 0UL;
#line 1280
    i = 0;
#line 1280
    goto ldv_51981;
    ldv_51980: 
#line 1281
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1282
    mdev->rs_mark_time[i] = now;
#line 1280
    i = i + 1;
    ldv_51981: ;
#line 1280
    if (i <= 7) {
#line 1281
      goto ldv_51980;
    } else {

    }
#line 1285
    drbd_rs_controller_reset(mdev);
#line 1287
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1288
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1290
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1294
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1294
  if (tmp___26 != 0) {
#line 1295
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1299
    tmp___25 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 1299
    if (tmp___25 != 0) {
#line 1300
      mdf = mdf | 64U;
    } else {

    }
#line 1301
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_40583.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1303
      mdf = mdf | 2U;
    } else {

    }
#line 1304
    if ((int )mdev->state.ldv_40583.conn > 9) {
#line 1305
      mdf = mdf | 4U;
    } else {

    }
#line 1306
    if ((int )mdev->state.ldv_40583.disk > 4) {
#line 1307
      mdf = mdf | 1U;
    } else {

    }
#line 1308
    if ((int )mdev->state.ldv_40583.disk > 5) {
#line 1309
      mdf = mdf | 16U;
    } else {

    }
#line 1310
    if ((int )mdev->state.ldv_40583.pdsk <= 5 && (int )mdev->state.ldv_40583.pdsk > 3) {
#line 1311
      mdf = mdf | 32U;
    } else {

    }
#line 1312
    if ((mdev->ldev)->md.flags != mdf) {
#line 1313
      (mdev->ldev)->md.flags = mdf;
#line 1314
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1316
    if ((int )os.ldv_40583.disk <= 6 && (int )ns.ldv_40583.disk > 6) {
#line 1317
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1318
    put_ldev(mdev);
  } else {

  }
#line 1322
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1324
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1327
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1328
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1331
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1332
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1335
  if (((int )os.ldv_40583.conn > 8 && (int )ns.ldv_40583.conn <= 7) && (int )ns.ldv_40583.conn > 2) {
#line 1337
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1340
  if ((int )os.ldv_40583.conn <= 9 && (int )ns.ldv_40583.conn > 9) {
#line 1341
    drbd_resume_al(mdev);
  } else {

  }
#line 1346
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 1347
    mdev->last_reconnect_jif = jiffies;
  } else {

  }
#line 1348
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_40583.disk > 3) {
#line 1350
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1352
  tmp___27 = kmalloc(48UL, 32U);
#line 1352
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1353
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1354
    ascw->os = os;
#line 1355
    ascw->ns = ns;
#line 1356
    ascw->flags = flags;
#line 1357
    ascw->w.cb = & w_after_state_ch;
#line 1358
    ascw->done = done;
#line 1359
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1361
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1364
  return (rv);
}
}
#line 1367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1370
  __mptr = (struct drbd_work  const  *)w;
#line 1370
  ascw = (struct after_state_chg_work *)__mptr;
#line 1371
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1372
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1373
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1373
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1373);
    } else {

    }
#line 1374
    complete(ascw->done);
  } else {

  }
#line 1376
  kfree((void const   *)ascw);
#line 1378
  return (1);
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1383
  if (rv != 0) {
#line 1384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1385
    val.i = 0U;
#line 1385
    val.ldv_40583.conn = 10U;
#line 1385
    mask.i = 0U;
#line 1385
    mask.ldv_40583.conn = 31U;
#line 1385
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1386
    return;
  } else {

  }
#line 1389
  switch ((int )mdev->state.ldv_40583.conn) {
  case 12: 
#line 1391
  val___0.i = 0U;
#line 1391
  val___0.ldv_40583.conn = 15U;
#line 1391
  mask___0.i = 0U;
#line 1391
  mask___0.ldv_40583.conn = 31U;
#line 1391
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1392
  goto ldv_52005;
  case 11: 
#line 1394
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1395
  goto ldv_52005;
  }
  ldv_52005: ;
#line 1398
  return;
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1405
  tmp = get_current();
#line 1405
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1405
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1405);
  } else {

  }
#line 1408
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1410
  drbd_bm_lock(mdev, why, flags);
#line 1411
  rv = (*io_fn)(mdev);
#line 1412
  drbd_bm_unlock(mdev);
#line 1414
  drbd_resume_io(mdev);
#line 1416
  return (rv);
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 1430
  what = nothing;
#line 1431
  nsm.i = 4294967295U;
#line 1433
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1434
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 1435
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1436
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1439
  fp = FP_DONT_CARE;
#line 1440
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1440
  if (tmp != 0) {
#line 1441
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1442
    put_ldev(mdev);
  } else {

  }
#line 1446
  drbd_bcast_state(mdev, ns);
#line 1448
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_40583.disk > 7) || (int )os.ldv_40583.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40583.disk <= 7) && (int )ns.ldv_40583.pdsk <= 7)) {
#line 1450
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1455
  if ((int )os.ldv_40583.disk <= 3 && (int )ns.ldv_40583.disk > 3) {
#line 1456
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
  } else {

  }
#line 1458
  nsm.i = 4294967295U;
#line 1459
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1460
    if ((int )os.ldv_40583.conn <= 9 && (int )ns.ldv_40583.conn > 9) {
#line 1461
      what = resend;
    } else {

    }
#line 1463
    if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_40583.disk > 3) {
#line 1465
      what = restart_frozen_disk_io;
    } else {

    }
#line 1467
    if ((unsigned int )what != 27U) {
#line 1468
      nsm.ldv_40583.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1471
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1473
    if ((int )os.ldv_40583.pdsk > 5 && (int )ns.ldv_40583.pdsk <= 5) {
#line 1474
      tmp___0 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1474
      if (tmp___0 != 0) {
#line 1475
        drbd_uuid_new_current(mdev);
#line 1476
        clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1478
      spin_lock_irq(& mdev->req_lock);
#line 1479
      _tl_clear(mdev);
#line 1480
      __ns.i = mdev->state.i;
#line 1480
      __ns.ldv_40583.susp_fen = 0U;
#line 1480
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1481
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1484
    if ((int )os.ldv_40583.conn <= 9 && (int )ns.ldv_40583.conn > 9) {
#line 1485
      clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1486
      what = resend;
#line 1487
      nsm.ldv_40583.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1491
  if ((unsigned int )what != 27U) {
#line 1492
    spin_lock_irq(& mdev->req_lock);
#line 1493
    _tl_restart(mdev, what);
#line 1494
    nsm.i = nsm.i & mdev->state.i;
#line 1495
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1496
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1503
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1503
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1503
    if (tmp___1 != 0) {
#line 1506
      drbd_gen_and_send_sync_uuid(mdev);
#line 1507
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1511
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_40583.pdsk > 0) {
#line 1514
    mdev->rs_total = 0UL;
#line 1515
    mdev->rs_failed = 0UL;
#line 1516
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1517
    drbd_rs_cancel_all(mdev);
#line 1519
    drbd_send_uuids(mdev);
#line 1520
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1525
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1527
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1532
  if ((((int )os.ldv_40583.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_40583.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1538
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1538
    if (tmp___3 != 0) {
#line 1539
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_40583.disk > 7) {
#line 1541
        tmp___2 = is_susp(mdev->state);
#line 1541
        if (tmp___2 != 0) {
#line 1542
          set_bit(26U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1544
          drbd_uuid_new_current(mdev);
#line 1545
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1548
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1552
  if ((int )ns.ldv_40583.pdsk <= 3) {
#line 1552
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1552
    if (tmp___4 != 0) {
#line 1553
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_40583.disk > 7) {
#line 1555
        drbd_uuid_new_current(mdev);
#line 1556
        drbd_send_uuids(mdev);
      } else {

      }
#line 1559
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1563
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1565
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1571
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_40583.conn <= 10) {
#line 1571
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1571
    if (tmp___5 != 0) {
#line 1575
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1577
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1581
  if (((int )ns.ldv_40583.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1583
    drbd_send_sizes(mdev, 0, 0);
#line 1584
    drbd_send_uuids(mdev);
#line 1585
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1589
  if ((int )ns.ldv_40583.conn > 9 && ((int )os.ldv_40583.aftr_isp != (int )ns.ldv_40583.aftr_isp || (int )os.ldv_40583.user_isp != (int )ns.ldv_40583.user_isp)) {
#line 1592
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1595
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1597
    suspend_other_sg(mdev);
  } else {

  }
#line 1601
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_40583.conn > 9) {
#line 1602
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1604
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1605
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1608
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1611
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1616
  if ((((int )os.ldv_40583.conn <= 9 && (int )ns.ldv_40583.conn <= 9) && (int )os.ldv_40583.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1619
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1624
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1625
    eh = EP_PASS_ON;
#line 1626
    was_io_error = 0;
#line 1631
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1632
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1633
      was_io_error = test_and_clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 1635
      if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1636
        drbd_khelper(mdev, (char *)"local-io-error");
      } else {

      }
#line 1651
      tmp___6 = test_and_clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1651
      if (tmp___6 != 0) {
#line 1652
        tl_abort_disk_io(mdev);
      } else {

      }
#line 1657
      if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1658
        tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.disk);
#line 1658
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___7);
      } else {

      }
#line 1662
      if ((int )ns.ldv_40583.conn > 9) {
#line 1663
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1665
      drbd_rs_cancel_all(mdev);
#line 1670
      drbd_md_sync(mdev);
    } else {

    }
#line 1672
    put_ldev(mdev);
  } else {

  }
#line 1678
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1681
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1682
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_40583.disk);
#line 1682
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1686
    if ((int )ns.ldv_40583.conn > 9) {
#line 1687
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1691
    put_ldev(mdev);
  } else {

  }
#line 1695
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_40583.conn > 9) {
#line 1696
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1699
  if ((int )ns.ldv_40583.disk > 3 && (int )ns.ldv_40583.pdsk > 3) {
#line 1699
    tmp___9 = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1699
    if (tmp___9 != 0) {
#line 1701
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1702
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1706
  if ((((int )os.ldv_40583.conn > 10 && (int )ns.ldv_40583.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1709
    resume_next_sg(mdev);
  } else {

  }
#line 1713
  if (((int )os.ldv_40583.disk <= 7 && (int )os.ldv_40583.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1714
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1719
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) && mdev->agreed_pro_version > 96) {
#line 1721
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1724
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1725
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
#line 1726
    __wake_up(& mdev->state_wait, 3U, 1, 0);
  } else {

  }
#line 1736
  if ((int )os.ldv_40583.conn > 10 && (int )ns.ldv_40583.conn <= 10) {
#line 1736
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1736
    if (tmp___10 != 0) {
#line 1737
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1739
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1743
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1743
    tmp___11 = is_susp(ns);
#line 1743
    if (tmp___11 == 0) {
#line 1743
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1744
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1747
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1748
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1752
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1755
    if ((int )os.ldv_40583.aftr_isp != (int )ns.ldv_40583.aftr_isp) {
#line 1756
      resume_next_sg(mdev);
    } else {

    }
#line 1758
    tmp___12 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1758
    if (tmp___12 != 0) {
#line 1759
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1762
  drbd_md_sync(mdev);
#line 1763
  return;
}
}
#line 1766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1768
  thi = (struct drbd_thread *)arg;
#line 1769
  mdev = thi->mdev;
  restart: 
#line 1774
  retval = (*(thi->function))(thi);
#line 1776
  tmp = spinlock_check(& thi->t_lock);
#line 1776
  flags = _raw_spin_lock_irqsave(tmp);
#line 1788
  if ((unsigned int )thi->t_state == 3U) {
#line 1789
    tmp___0 = get_current();
#line 1789
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1790
    thi->t_state = Running;
#line 1791
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1792
    goto restart;
  } else {

  }
#line 1795
  thi->task = 0;
#line 1796
  thi->t_state = None;
#line 1797
  __asm__  volatile   ("mfence": : : "memory");
#line 1798
  complete(& thi->stop);
#line 1799
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1801
  tmp___1 = get_current();
#line 1801
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1804
  ldv_module_put_4(& __this_module);
#line 1805
  return (retval);
}
}
#line 1808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1811
  spinlock_check(& thi->t_lock);
#line 1811
  __raw_spin_lock_init(& thi->t_lock.ldv_6135.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1812
  thi->task = 0;
#line 1813
  thi->t_state = None;
#line 1814
  thi->function = func;
#line 1815
  thi->mdev = mdev;
#line 1816
  return;
}
}
#line 1818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 1820
  mdev = thi->mdev;
#line 1824
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1831
  tmp = spinlock_check(& thi->t_lock);
#line 1831
  flags = _raw_spin_lock_irqsave(tmp);
#line 1833
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1835
  tmp___0 = get_current();
#line 1835
  tmp___1 = get_current();
#line 1835
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1839
  tmp___2 = ldv_try_module_get_5(& __this_module);
#line 1839
  if (tmp___2) {
#line 1839
    tmp___3 = 0;
  } else {
#line 1839
    tmp___3 = 1;
  }
#line 1839
  if (tmp___3) {
#line 1840
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1841
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1842
    return (0);
  } else {

  }
#line 1845
  init_completion(& thi->stop);
#line 1846
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1846);
  } else {

  }
#line 1847
  thi->reset_cpu_mask = 1;
#line 1848
  thi->t_state = Running;
#line 1849
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1850
  tmp___4 = get_current();
#line 1850
  flush_signals(tmp___4);
#line 1852
  tmp___5 = mdev_to_minor(mdev);
#line 1852
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___5,
                              me);
#line 1855
  tmp___6 = IS_ERR((void const   *)nt);
#line 1855
  if (tmp___6 != 0L) {
#line 1856
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1858
    ldv_module_put_6(& __this_module);
#line 1859
    return (0);
  } else {

  }
#line 1861
  tmp___7 = spinlock_check(& thi->t_lock);
#line 1861
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1862
  thi->task = nt;
#line 1863
  thi->t_state = Running;
#line 1864
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1865
  wake_up_process(nt);
#line 1866
  goto ldv_52061;
  case 2U: 
#line 1868
  thi->t_state = Restarting;
#line 1869
  tmp___8 = get_current();
#line 1869
  tmp___9 = get_current();
#line 1869
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___9->comm), tmp___8->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1875
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1876
  goto ldv_52061;
  }
  ldv_52061: ;
#line 1879
  return (1);
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1887
  ns = restart != 0 ? Restarting : Exiting;
#line 1890
  tmp = spinlock_check(& thi->t_lock);
#line 1890
  flags = _raw_spin_lock_irqsave(tmp);
#line 1892
  if ((unsigned int )thi->t_state == 0U) {
#line 1893
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1894
    if (restart != 0) {
#line 1895
      drbd_thread_start(thi);
    } else {

    }
#line 1896
    return;
  } else {

  }
#line 1899
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1900
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1901
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1902
      return;
    } else {

    }
#line 1905
    thi->t_state = ns;
#line 1906
    __asm__  volatile   ("mfence": : : "memory");
#line 1907
    init_completion(& thi->stop);
#line 1908
    tmp___0 = get_current();
#line 1908
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1909
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1913
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1915
  if (wait != 0) {
#line 1916
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1917
  return;
}
}
#line 1927 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1932
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1932
  if (tmp != 0U) {
#line 1933
    return;
  } else {

  }
#line 1935
  tmp___0 = mdev_to_minor(mdev);
#line 1935
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1935
  ord = (int )(tmp___0 % tmp___1);
#line 1936
  cpu = -1;
#line 1936
  goto ldv_52082;
  ldv_52081: 
#line 1937
  tmp___2 = ord;
#line 1937
  ord = ord - 1;
#line 1937
  if (tmp___2 == 0) {
#line 1938
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1939
    return;
  } else {

  }
  ldv_52082: 
#line 1936
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1936
  cpu = (int )tmp___3;
#line 1936
  if (cpu < nr_cpu_ids) {
#line 1937
    goto ldv_52081;
  } else {

  }
#line 1943
  cpumask_setall(mdev->cpu_mask);
#line 1944
  return;
}
}
#line 1953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1955
  tmp = get_current();
#line 1955
  p = tmp;
#line 1956
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1961
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1961
  if (_b != 0) {
#line 1961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1961);
  } else {

  }
#line 1961
  if (_b != 0) {
#line 1962
    return;
  } else {

  }
#line 1963
  if (thi->reset_cpu_mask == 0) {
#line 1964
    return;
  } else {

  }
#line 1965
  thi->reset_cpu_mask = 0;
#line 1966
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1967
  return;
}
}
#line 1971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1977
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1977
  if (_b != 0) {
#line 1977
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1977);
  } else {

  }
#line 1977
  if (_b != 0) {
#line 1977
    return (0);
  } else {

  }
#line 1978
  _b___0 = size == 0UL;
#line 1978
  if (_b___0 != 0) {
#line 1978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1978);
  } else {

  }
#line 1978
  if (_b___0 != 0) {
#line 1978
    return (0);
  } else {

  }
#line 1980
  h->magic = 1728214147U;
#line 1981
  tmp = __fswab16((int )((__u16 )cmd));
#line 1981
  h->command = tmp;
#line 1982
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1982
  h->length = tmp___0;
#line 1984
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1986
  ok = (size_t )sent == size;
#line 1987
  if (ok == 0) {
#line 1987
    tmp___2 = get_current();
#line 1987
    tmp___3 = signal_pending(tmp___2);
#line 1987
    if (tmp___3 == 0) {
#line 1988
      tmp___1 = cmdname(cmd);
#line 1988
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 1990
  return (ok);
}
}
#line 1996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1999
  ok = 0;
#line 2002
  if (use_data_socket != 0) {
#line 2003
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2004
    sock = mdev->data.socket;
  } else {
#line 2006
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 2007
    sock = mdev->meta.socket;
  }
#line 2012
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 2012
  if (tmp != 0L) {
#line 2013
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 2015
  if (use_data_socket != 0) {
#line 2016
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 2018
    mutex_unlock(& mdev->meta.mutex);
  }
#line 2019
  return (ok);
}
}
#line 2022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2028
  h.magic = 1728214147U;
#line 2029
  tmp = __fswab16((int )((__u16 )cmd));
#line 2029
  h.command = tmp;
#line 2030
  tmp___0 = __fswab16((int )((__u16 )size));
#line 2030
  h.length = tmp___0;
#line 2032
  tmp___1 = drbd_get_data_sock(mdev);
#line 2032
  if (tmp___1 == 0) {
#line 2033
    return (0);
  } else {

  }
#line 2035
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 2035
  ok = tmp___2 == 8;
#line 2037
  if (ok != 0) {
#line 2037
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 2037
    if ((size_t )tmp___3 == size) {
#line 2037
      tmp___4 = 1;
    } else {
#line 2037
      tmp___4 = 0;
    }
  } else {
#line 2037
    tmp___4 = 0;
  }
#line 2037
  ok = tmp___4;
#line 2040
  drbd_put_data_sock(mdev);
#line 2042
  return (ok);
}
}
#line 2045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 2050
  apv = mdev->agreed_pro_version;
#line 2052
  if (apv > 87) {
#line 2052
    if (apv == 88) {
#line 2052
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 2052
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 2052
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 2052
    size = tmp___0;
  } else {
#line 2052
    size = 12;
  }
#line 2061
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2062
  sock = mdev->data.socket;
#line 2064
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2064
  if (tmp___6 != 0L) {
#line 2065
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 2067
    p = & mdev->data.sbuf.rs_param_95;
#line 2070
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2072
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2072
    p->rate = tmp___1;
#line 2073
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2073
    p->c_plan_ahead = tmp___2;
#line 2074
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2074
    p->c_delay_target = tmp___3;
#line 2075
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2075
    p->c_fill_target = tmp___4;
#line 2076
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2076
    p->c_max_rate = tmp___5;
#line 2078
    if (apv > 87) {
#line 2079
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2080
    if (apv > 88) {
#line 2081
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2083
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2085
    rv = 0;
  }
#line 2087
  mutex_unlock(& mdev->data.mutex);
#line 2089
  return (rv);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2097
  size = 32;
#line 2099
  if (mdev->agreed_pro_version > 86) {
#line 2100
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2100
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2104
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2104
  p = (struct p_protocol *)tmp___0;
#line 2105
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2106
    return (0);
  } else {

  }
#line 2108
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2108
  p->protocol = tmp___1;
#line 2109
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2109
  p->after_sb_0p = tmp___2;
#line 2110
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2110
  p->after_sb_1p = tmp___3;
#line 2111
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2111
  p->after_sb_2p = tmp___4;
#line 2112
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2112
  p->two_primaries = tmp___5;
#line 2114
  cf = 0;
#line 2115
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2116
    cf = cf | 1;
  } else {

  }
#line 2117
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2118
    if (mdev->agreed_pro_version > 91) {
#line 2119
      cf = cf | 2;
    } else {
#line 2121
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2122
      kfree((void const   *)p);
#line 2123
      return (-1);
    }
  } else {

  }
#line 2126
  tmp___6 = __fswab32((__u32 )cf);
#line 2126
  p->conn_flags = tmp___6;
#line 2128
  if (mdev->agreed_pro_version > 86) {
#line 2129
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2131
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2133
  kfree((void const   *)p);
#line 2134
  return (rv);
}
}
#line 2137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2142
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2142
  if (tmp == 0) {
#line 2143
    return (1);
  } else {

  }
#line 2145
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2146
  i = 0;
#line 2146
  goto ldv_52148;
  ldv_52147: ;
#line 2147
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2147
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2147
    p.uuid[i] = tmp___0;
  } else {
#line 2147
    p.uuid[i] = 0ULL;
  }
#line 2146
  i = i + 1;
  ldv_52148: ;
#line 2146
  if (i <= 3) {
#line 2147
    goto ldv_52147;
  } else {

  }
#line 2148
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2150
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2151
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2151
  p.uuid[4] = tmp___1;
#line 2152
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2153
  tmp___2 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2153
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2154
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2155
  tmp___3 = __fswab64(uuid_flags);
#line 2155
  p.uuid[5] = tmp___3;
#line 2157
  put_ldev(mdev);
#line 2159
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2159
  return (tmp___4);
}
}
#line 2163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2165
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2165
  return (tmp);
}
}
#line 2168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2170
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2170
  return (tmp);
}
}
#line 2173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2175
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2175
  if (tmp != 0) {
#line 2176
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2177
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2183
    put_ldev(mdev);
  } else {
#line 2185
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2186
  return;
}
}
#line 2191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2196
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2196);
  } else {

  }
#line 2198
  uuid = (mdev->ldev)->md.uuid[1];
#line 2199
  if (uuid != 0ULL && uuid != 4ULL) {
#line 2200
    uuid = uuid + 281474976710656ULL;
  } else {
#line 2202
    get_random_bytes((void *)(& uuid), 8);
  }
#line 2203
  drbd_uuid_set(mdev, 1, uuid);
#line 2204
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2205
  drbd_md_sync(mdev);
#line 2206
  tmp = __fswab64(uuid);
#line 2206
  p.uuid = tmp;
#line 2208
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2208
  return (tmp___0);
}
}
#line 2212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  unsigned int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___0 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2220
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2220
  if (tmp___0 != 0) {
#line 2221
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2221
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2221);
    } else {

    }
#line 2222
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2223
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2224
    q_order_type = drbd_queue_order_type(mdev);
#line 2225
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2225
    max_bio_size = tmp << 9;
#line 2226
    _min1 = max_bio_size;
#line 2226
    _min2 = 131072U;
#line 2226
    max_bio_size = _min1 < _min2 ? _min1 : _min2;
#line 2227
    put_ldev(mdev);
  } else {
#line 2229
    d_size = 0UL;
#line 2230
    u_size = 0UL;
#line 2231
    q_order_type = 0;
#line 2232
    max_bio_size = 131072U;
  }
#line 2236
  if (mdev->agreed_pro_version <= 94) {
#line 2237
    _min1___0 = max_bio_size;
#line 2237
    _min2___0 = 32768U;
#line 2237
    max_bio_size = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
  } else {

  }
#line 2239
  tmp___1 = __fswab64((__u64 )d_size);
#line 2239
  p.d_size = tmp___1;
#line 2240
  tmp___2 = __fswab64((__u64 )u_size);
#line 2240
  p.u_size = tmp___2;
#line 2241
  if (trigger_reply == 0) {
#line 2241
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2241
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2241
    tmp___4 = 0ULL;
  }
#line 2241
  tmp___5 = __fswab64(tmp___4);
#line 2241
  p.c_size = tmp___5;
#line 2242
  tmp___6 = __fswab32(max_bio_size);
#line 2242
  p.max_bio_size = tmp___6;
#line 2243
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2243
  p.queue_order_type = tmp___7;
#line 2244
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2244
  p.dds_flags = tmp___8;
#line 2246
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2248
  return (ok);
}
}
#line 2255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2259
  ok = 0;
#line 2263
  drbd_state_lock___0(mdev);
#line 2265
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2267
  tmp = __fswab32(mdev->state.i);
#line 2267
  p.state = tmp;
#line 2268
  sock = mdev->data.socket;
#line 2270
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2270
  if (tmp___0 != 0L) {
#line 2271
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2275
  mutex_unlock(& mdev->data.mutex);
#line 2277
  drbd_state_unlock(mdev);
#line 2278
  return (ok);
}
}
#line 2291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2295
  ok = 0;
#line 2297
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2299
  tmp = __fswab32(state.i);
#line 2299
  p.state = tmp;
#line 2300
  sock = mdev->data.socket;
#line 2302
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2302
  if (tmp___0 != 0L) {
#line 2303
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2307
  mutex_unlock(& mdev->data.mutex);
#line 2309
  return (ok);
}
}
#line 2312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2317
  tmp = __fswab32(mask.i);
#line 2317
  p.mask = tmp;
#line 2318
  tmp___0 = __fswab32(val.i);
#line 2318
  p.val = tmp___0;
#line 2320
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2320
  return (tmp___1);
}
}
#line 2324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2328
  tmp = __fswab32((__u32 )retcode);
#line 2328
  p.retcode = tmp;
#line 2330
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2330
  return (tmp___0);
}
}
#line 2334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2347
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2349
    return (0);
  } else {

  }
#line 2351
  if (c->bit_offset >= c->bm_bits) {
#line 2352
    return (0);
  } else {

  }
#line 2355
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2356
  memset((void *)(& p->code), 0, 4087UL);
#line 2358
  plain_bits = 0UL;
#line 2363
  toggle = 2U;
  ldv_52221: ;
#line 2368
  if (toggle == 0U) {
#line 2368
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2368
    tmp = tmp___0;
  } else {
#line 2368
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2368
    tmp = tmp___1;
  }
#line 2370
  if (tmp == 0xffffffffffffffffUL) {
#line 2371
    tmp = c->bm_bits;
  } else {

  }
#line 2372
  rl = tmp - c->bit_offset;
#line 2374
  if (toggle == 2U) {
#line 2375
    if (rl == 0UL) {
#line 2378
      DCBP_set_start(p, 1);
#line 2380
      toggle = toggle == 0U;
#line 2381
      goto ldv_52219;
    } else {

    }
#line 2383
    DCBP_set_start(p, 0);
  } else {

  }
#line 2388
  if (rl == 0UL) {
#line 2389
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2391
    return (-1);
  } else {

  }
#line 2394
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2395
  if (bits == -105) {
#line 2396
    goto ldv_52220;
  } else {

  }
#line 2397
  if (bits <= 0) {
#line 2398
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2399
    return (0);
  } else {

  }
#line 2402
  toggle = toggle == 0U;
#line 2403
  plain_bits = plain_bits + rl;
#line 2404
  c->bit_offset = tmp;
  ldv_52219: ;
#line 2405
  if (c->bit_offset < c->bm_bits) {
#line 2406
    goto ldv_52221;
  } else {

  }
  ldv_52220: 
#line 2407
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2409
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2412
    c->bit_offset = c->bit_offset - plain_bits;
#line 2413
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2414
    c->bit_offset = c->word_offset * 64UL;
#line 2415
    return (0);
  } else {

  }
#line 2420
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2423
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2425
  return ((int )len);
}
}
#line 2435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2438
  p = (struct p_compressed_bm *)h;
#line 2443
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2445
  if (len < 0) {
#line 2446
    return (-5);
  } else {

  }
#line 2448
  if (len != 0) {
#line 2449
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2450
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2453
    c->packets[0] = c->packets[0] + 1U;
#line 2454
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2456
    if (c->bit_offset >= c->bm_bits) {
#line 2457
      len = 0;
    } else {

    }
  } else {
#line 2461
    __min1 = 511UL;
#line 2461
    __min2 = c->bm_words - c->word_offset;
#line 2461
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2462
    len = (int )((unsigned int )num_words * 8U);
#line 2463
    if (len != 0) {
#line 2464
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2465
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2467
    c->word_offset = c->word_offset + num_words;
#line 2468
    c->bit_offset = c->word_offset * 64UL;
#line 2470
    c->packets[1] = c->packets[1] + 1U;
#line 2471
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2473
    if (c->bit_offset > c->bm_bits) {
#line 2474
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2476
  if (ok != 0) {
#line 2477
    if (len == 0) {
#line 2478
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2479
      return (0);
    } else {
#line 2481
      return (1);
    }
  } else {

  }
#line 2483
  return (-5);
}
}
#line 2487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2493
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2493
  if (_b != 0) {
#line 2493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2493);
  } else {

  }
#line 2493
  if (_b != 0) {
#line 2493
    return (0);
  } else {

  }
#line 2497
  tmp = __get_free_pages(16U, 0U);
#line 2497
  p = (struct p_header80 *)tmp;
#line 2498
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2499
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2500
    return (0);
  } else {

  }
#line 2503
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2503
  if (tmp___2 != 0) {
#line 2504
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2504
    if (tmp___1 != 0) {
#line 2505
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2506
      drbd_bm_set_all(mdev);
#line 2507
      tmp___0 = drbd_bm_write(mdev);
#line 2507
      if (tmp___0 != 0) {
#line 2511
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2513
        drbd_md_clear_flag(mdev, 8);
#line 2514
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2517
    put_ldev(mdev);
  } else {

  }
#line 2520
  tmp___3 = drbd_bm_bits(mdev);
#line 2520
  tmp___4 = drbd_bm_words(mdev);
#line 2520
  __constr_expr_0.bm_bits = tmp___3;
#line 2520
  __constr_expr_0.bm_words = tmp___4;
#line 2520
  __constr_expr_0.bit_offset = 0UL;
#line 2520
  __constr_expr_0.word_offset = 0UL;
#line 2520
  __constr_expr_0.packets[0] = 0U;
#line 2520
  __constr_expr_0.packets[1] = 0U;
#line 2520
  __constr_expr_0.bytes[0] = 0U;
#line 2520
  __constr_expr_0.bytes[1] = 0U;
#line 2520
  c = __constr_expr_0;
  ldv_52244: 
#line 2526
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2527
  if (err > 0) {
#line 2528
    goto ldv_52244;
  } else {

  }
#line 2529
  free_pages((unsigned long )p, 0U);
#line 2530
  return (err == 0);
}
}
#line 2533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2537
  tmp = drbd_get_data_sock(mdev);
#line 2537
  if (tmp == 0) {
#line 2538
    return (-1);
  } else {

  }
#line 2539
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2539
  err = tmp___0 == 0;
#line 2540
  drbd_put_data_sock(mdev);
#line 2541
  return (err);
}
}
#line 2544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2549
  p.barrier = barrier_nr;
#line 2550
  tmp = __fswab32(set_size);
#line 2550
  p.set_size = tmp;
#line 2552
  if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 2553
    return (0);
  } else {

  }
#line 2554
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2556
  return (ok);
}
}
#line 2567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2575
  p.sector = sector;
#line 2576
  p.block_id = block_id;
#line 2577
  p.blksize = blksize;
#line 2578
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2578
  tmp___0 = __fswab32((__u32 )tmp);
#line 2578
  p.seq_num = tmp___0;
#line 2580
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_40583.conn <= 9) {
#line 2581
    return (0);
  } else {

  }
#line 2582
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2584
  return (ok);
}
}
#line 2590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2593
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2593
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2593
    tmp___0 = tmp;
  } else {
#line 2593
    tmp___0 = 0U;
  }
#line 2593
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2595
  tmp___1 = __fswab32((__u32 )data_size);
#line 2595
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2595
  return (tmp___2);
}
}
#line 2599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2602
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2602
  return (tmp);
}
}
#line 2611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2614
  tmp = __fswab32(e->size);
#line 2614
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2614
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_49794.block_id);
#line 2614
  return (tmp___1);
}
}
#line 2622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2625
  tmp = __fswab64(block_id);
#line 2625
  tmp___0 = __fswab32((__u32 )blksize);
#line 2625
  tmp___1 = __fswab64((__u64 )sector);
#line 2625
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2625
  return (tmp___2);
}
}
#line 2631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2637
  tmp = __fswab64((__u64 )sector);
#line 2637
  p.sector = tmp;
#line 2638
  p.block_id = block_id;
#line 2639
  tmp___0 = __fswab32((__u32 )size);
#line 2639
  p.blksize = tmp___0;
#line 2641
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2643
  return (ok);
}
}
#line 2646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2654
  tmp = __fswab64((__u64 )sector);
#line 2654
  p.sector = tmp;
#line 2655
  p.block_id = 1728263026ULL;
#line 2656
  tmp___0 = __fswab32((__u32 )size);
#line 2656
  p.blksize = tmp___0;
#line 2658
  p.head.magic = 1728214147U;
#line 2659
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2659
  p.head.command = tmp___1;
#line 2660
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2660
  p.head.length = tmp___2;
#line 2662
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2664
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2664
  ok = tmp___3 == 32;
#line 2665
  if (ok != 0) {
#line 2665
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2665
    if (tmp___4 == digest_size) {
#line 2665
      tmp___5 = 1;
    } else {
#line 2665
      tmp___5 = 0;
    }
  } else {
#line 2665
    tmp___5 = 0;
  }
#line 2665
  ok = tmp___5;
#line 2667
  mutex_unlock(& mdev->data.mutex);
#line 2669
  return (ok);
}
}
#line 2672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2677
  tmp = __fswab64((__u64 )sector);
#line 2677
  p.sector = tmp;
#line 2678
  p.block_id = 1728261953ULL;
#line 2679
  tmp___0 = __fswab32((__u32 )size);
#line 2679
  p.blksize = tmp___0;
#line 2681
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2683
  return (ok);
}
}
#line 2690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2695
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2695
    tmp___0 = 1;
  } else {
#line 2695
    tmp = get_t_state(& mdev->asender);
#line 2695
    if ((unsigned int )tmp != 1U) {
#line 2695
      tmp___0 = 1;
    } else
#line 2695
    if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 2695
      tmp___0 = 1;
    } else {
#line 2695
      tmp___0 = 0;
    }
  }
#line 2695
  drop_it = tmp___0;
#line 2700
  if (drop_it != 0) {
#line 2701
    return (1);
  } else {

  }
#line 2703
  mdev->ko_count = mdev->ko_count - 1U;
#line 2703
  drop_it = mdev->ko_count == 0U;
#line 2704
  if (drop_it == 0) {
#line 2705
    tmp___1 = get_current();
#line 2705
    tmp___2 = get_current();
#line 2705
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2707
    request_ping(mdev);
  } else {

  }
#line 2710
  return (drop_it);
}
}
#line 2734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2737
  tmp = kmap(page);
#line 2737
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2737
  sent = tmp___0;
#line 2738
  kunmap(page);
#line 2739
  if ((size_t )sent == size) {
#line 2740
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2741
  return ((size_t )sent == size);
}
}
#line 2744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2747
  tmp = current_thread_info();
#line 2747
  oldfs = tmp->addr_limit;
#line 2749
  len = (int )size;
#line 2757
  if ((int )disable_sendpage) {
#line 2758
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2758
    return (tmp___0);
  } else {
#line 2757
    tmp___1 = page_count(page);
#line 2757
    if (tmp___1 <= 0) {
#line 2758
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2758
      return (tmp___0);
    } else {
#line 2757
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2757
      if (tmp___2 != 0) {
#line 2758
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2758
        return (tmp___0);
      } else {

      }
    }
  }
#line 2760
  msg_flags = msg_flags | 16384U;
#line 2761
  drbd_update_congested(mdev);
#line 2762
  tmp___3 = current_thread_info();
#line 2762
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2762
  tmp___3->addr_limit = __constr_expr_0;
  ldv_52343: 
#line 2764
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2764
  sent = (int )tmp___4;
#line 2767
  if (sent == -11) {
#line 2768
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2768
    if (tmp___5 != 0) {
#line 2770
      goto ldv_52340;
    } else {
#line 2772
      goto ldv_52341;
    }
  } else {

  }
#line 2774
  if (sent <= 0) {
#line 2775
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2777
    goto ldv_52340;
  } else {

  }
#line 2779
  len = len - sent;
#line 2780
  offset = offset + sent;
  ldv_52341: ;
#line 2781
  if (len > 0) {
#line 2782
    goto ldv_52343;
  } else {

  }
  ldv_52340: 
#line 2782
  tmp___6 = current_thread_info();
#line 2782
  tmp___6->addr_limit = oldfs;
#line 2783
  clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 2785
  ok = len == 0;
#line 2786
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2786
  if (tmp___7 != 0L) {
#line 2787
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2788
  return (ok);
}
}
#line 2791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2796
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2796
  i = (int )bio->bi_idx;
#line 2796
  goto ldv_52351;
  ldv_52350: 
#line 2797
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2797
  if (tmp == 0) {
#line 2800
    return (0);
  } else {

  }
#line 2796
  bvec = bvec + 1;
#line 2796
  i = i + 1;
  ldv_52351: ;
#line 2796
  if ((int )bio->bi_vcnt > i) {
#line 2797
    goto ldv_52350;
  } else {

  }

#line 2802
  return (1);
}
}
#line 2805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2810
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2810
  i = (int )bio->bi_idx;
#line 2810
  goto ldv_52360;
  ldv_52359: 
#line 2811
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2811
  if (tmp == 0) {
#line 2814
    return (0);
  } else {

  }
#line 2810
  bvec = bvec + 1;
#line 2810
  i = i + 1;
  ldv_52360: ;
#line 2810
  if ((int )bio->bi_vcnt > i) {
#line 2811
    goto ldv_52359;
  } else {

  }

#line 2816
  return (1);
}
}
#line 2819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2821
  page = e->pages;
#line 2822
  len = e->size;
#line 2824
  goto ldv_52374;
  ldv_52373: 
#line 2825
  __min1 = len;
#line 2825
  __min2 = 4096U;
#line 2825
  l = __min1 < __min2 ? __min1 : __min2;
#line 2826
  tmp = page_chain_next(page);
#line 2826
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2826
  if (tmp___0 == 0) {
#line 2828
    return (0);
  } else {

  }
#line 2829
  len = len - l;
#line 2824
  page = page_chain_next(page);
  ldv_52374: ;
#line 2824
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2824
    tmp___1 = page_chain_next(page);
#line 2824
    __builtin_prefetch((void const   *)tmp___1);
#line 2824
    if (1 != 0) {
#line 2825
      goto ldv_52373;
    } else {
#line 2827
      goto ldv_52375;
    }
  } else {

  }
  ldv_52375: ;
#line 2831
  return (1);
}
}
#line 2834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2836
  if (mdev->agreed_pro_version > 94) {
#line 2837
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 2048UL) != 0UL ? 16 : 0)) | ((bi_rw & 4096UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2842
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2848 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2850
  ok = 1;
#line 2852
  dp_flags = 0U;
#line 2856
  tmp = drbd_get_data_sock(mdev);
#line 2856
  if (tmp == 0) {
#line 2857
    return (0);
  } else {

  }
#line 2859
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2859
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2859
    dgs = (int )tmp___0;
  } else {
#line 2859
    dgs = 0;
  }
#line 2862
  if (req->size <= 32768U) {
#line 2863
    p.head.h80.magic = 1728214147U;
#line 2864
    p.head.h80.command = 0U;
#line 2865
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2865
    p.head.h80.length = tmp___1;
  } else {
#line 2868
    p.head.h95.magic = 23171U;
#line 2869
    p.head.h95.command = 0U;
#line 2870
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2870
    p.head.h95.length = tmp___2;
  }
#line 2874
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2874
  p.sector = tmp___3;
#line 2875
  p.block_id = (u64 )req;
#line 2876
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2876
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2876
  p.seq_num = tmp___5;
#line 2878
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2880
  if ((int )mdev->state.ldv_40583.conn > 15 && (int )mdev->state.ldv_40583.conn <= 21) {
#line 2882
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2884
  tmp___6 = __fswab32(dp_flags);
#line 2884
  p.dp_flags = tmp___6;
#line 2885
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 2886
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2886
  ok = tmp___7 == 32;
#line 2888
  if (ok != 0 && dgs != 0) {
#line 2889
    dgb = mdev->int_dig_out;
#line 2890
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2891
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2891
    ok = tmp___8 == dgs;
  } else {

  }
#line 2893
  if (ok != 0) {
#line 2905
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2906
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2908
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2911
    if (dgs > 0 && dgs <= 64) {
#line 2915
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2916
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2916
      if (tmp___9 != 0) {
#line 2917
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2926
  drbd_put_data_sock(mdev);
#line 2928
  return (ok);
}
}
#line 2935 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2943
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2943
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2943
    dgs = (int )tmp;
  } else {
#line 2943
    dgs = 0;
  }
#line 2946
  if (e->size <= 32768U) {
#line 2947
    p.head.h80.magic = 1728214147U;
#line 2948
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2948
    p.head.h80.command = tmp___0;
#line 2949
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2949
    p.head.h80.length = tmp___1;
  } else {
#line 2952
    p.head.h95.magic = 23171U;
#line 2953
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2953
    p.head.h95.command = tmp___2;
#line 2954
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2954
    p.head.h95.length = tmp___3;
  }
#line 2958
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2958
  p.sector = tmp___4;
#line 2959
  p.block_id = e->ldv_49794.block_id;
#line 2966
  tmp___5 = drbd_get_data_sock(mdev);
#line 2966
  if (tmp___5 == 0) {
#line 2967
    return (0);
  } else {

  }
#line 2969
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2969
  ok = tmp___6 == 32;
#line 2970
  if (ok != 0 && dgs != 0) {
#line 2971
    dgb = mdev->int_dig_out;
#line 2972
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2973
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2973
    ok = tmp___7 == dgs;
  } else {

  }
#line 2975
  if (ok != 0) {
#line 2976
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2978
  drbd_put_data_sock(mdev);
#line 2980
  return (ok);
}
}
#line 2983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2987
  tmp = __fswab64((__u64 )req->sector);
#line 2987
  p.sector = tmp;
#line 2988
  tmp___0 = __fswab32(req->size);
#line 2988
  p.blksize = tmp___0;
#line 2990
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 2990
  return (tmp___1);
}
}
#line 3009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 3014
  sent = 0;
#line 3016
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 3017
    return (-1000);
  } else {

  }
#line 3021
  iov.iov_base = buf;
#line 3022
  iov.iov_len = size;
#line 3024
  msg.msg_name = 0;
#line 3025
  msg.msg_namelen = 0;
#line 3026
  msg.msg_control = 0;
#line 3027
  msg.msg_controllen = 0UL;
#line 3028
  msg.msg_flags = msg_flags | 16384U;
#line 3030
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3031
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 3032
    drbd_update_congested(mdev);
  } else {

  }
  ldv_52417: 
#line 3044
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 3045
  if (rv == -11) {
#line 3046
    tmp = we_should_drop_the_connection(mdev, sock);
#line 3046
    if (tmp != 0) {
#line 3047
      goto ldv_52415;
    } else {
#line 3049
      goto ldv_52416;
    }
  } else {

  }
#line 3051
  if (rv == 0) {
#line 3051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3051);
  } else {

  }
#line 3052
  if (rv == -4) {
#line 3053
    tmp___0 = get_current();
#line 3053
    flush_signals(tmp___0);
#line 3054
    rv = 0;
  } else {

  }
#line 3056
  if (rv < 0) {
#line 3057
    goto ldv_52415;
  } else {

  }
#line 3058
  sent = sent + rv;
#line 3059
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 3060
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_52416: ;
#line 3061
  if ((size_t )sent < size) {
#line 3062
    goto ldv_52417;
  } else {

  }
  ldv_52415: ;
#line 3063
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3064
    clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 3066
  if (rv <= 0) {
#line 3067
    if (rv != -11) {
#line 3068
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 3071
      val.i = 0U;
#line 3071
      val.ldv_40583.conn = 4U;
#line 3071
      mask.i = 0U;
#line 3071
      mask.ldv_40583.conn = 31U;
#line 3071
      drbd_force_state(mdev, mask, val);
    } else {
#line 3073
      val___0.i = 0U;
#line 3073
      val___0.ldv_40583.conn = 3U;
#line 3073
      mask___0.i = 0U;
#line 3073
      mask___0.ldv_40583.conn = 31U;
#line 3073
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 3076
  return (sent);
}
}
#line 3079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 3081
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 3083
  rv = 0;
#line 3085
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 3086
  tmp = spinlock_check(& mdev->req_lock);
#line 3086
  flags = _raw_spin_lock_irqsave(tmp);
#line 3090
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 3091
    if ((mode & 2U) != 0U) {
#line 3092
      rv = -30;
    } else
#line 3093
    if (! allow_oos) {
#line 3094
      rv = -124;
    } else {

    }
  } else {

  }
#line 3097
  if (rv == 0) {
#line 3098
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 3099
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 3100
  mutex_unlock(& drbd_main_mutex);
#line 3102
  return (rv);
}
}
#line 3105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3107
  mdev = (struct drbd_conf *)gd->private_data;
#line 3108
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 3109
  mdev->open_cnt = mdev->open_cnt - 1;
#line 3110
  mutex_unlock(& drbd_main_mutex);
#line 3111
  return (0);
}
}
#line 3114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3118
  __constr_expr_0.rate = 250;
#line 3118
  __constr_expr_0.after = -1;
#line 3118
  __constr_expr_0.al_extents = 127;
#line 3118
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3118
  __constr_expr_0.verify_alg_len = 0;
#line 3118
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3118
  __constr_expr_0.cpu_mask_len = 0;
#line 3118
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3118
  __constr_expr_0.csums_alg_len = 0;
#line 3118
  __constr_expr_0.use_rle = 0U;
#line 3118
  __constr_expr_0.on_no_data = 0;
#line 3118
  __constr_expr_0.c_plan_ahead = 0;
#line 3118
  __constr_expr_0.c_delay_target = 10;
#line 3118
  __constr_expr_0.c_fill_target = 0;
#line 3118
  __constr_expr_0.c_max_rate = 102400;
#line 3118
  __constr_expr_0.c_min_rate = 4096;
#line 3118
  mdev->sync_conf = __constr_expr_0;
#line 3136
  __constr_expr_1.ldv_40583.role = 2U;
#line 3136
  __constr_expr_1.ldv_40583.peer = 0U;
#line 3136
  __constr_expr_1.ldv_40583.conn = 0U;
#line 3136
  __constr_expr_1.ldv_40583.disk = 0U;
#line 3136
  __constr_expr_1.ldv_40583.pdsk = 6U;
#line 3136
  __constr_expr_1.ldv_40583.susp = 0U;
#line 3136
  __constr_expr_1.ldv_40583.aftr_isp = (unsigned char)0;
#line 3136
  __constr_expr_1.ldv_40583.peer_isp = (unsigned char)0;
#line 3136
  __constr_expr_1.ldv_40583.user_isp = (unsigned char)0;
#line 3136
  __constr_expr_1.ldv_40583.susp_nod = 0U;
#line 3136
  __constr_expr_1.ldv_40583.susp_fen = 0U;
#line 3136
  __constr_expr_1.ldv_40583._pad = (unsigned short)0;
#line 3136
  mdev->state = __constr_expr_1;
#line 3137
  return;
}
}
#line 3148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;

  {
#line 3153
  drbd_set_defaults(mdev);
#line 3155
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3156
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3157
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3158
  atomic_set(& mdev->unacked_cnt, 0);
#line 3159
  atomic_set(& mdev->local_cnt, 0);
#line 3160
  atomic_set(& mdev->net_cnt, 0);
#line 3161
  atomic_set(& mdev->packet_seq, 0);
#line 3162
  atomic_set(& mdev->pp_in_use, 0);
#line 3163
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3164
  atomic_set(& mdev->rs_sect_in, 0);
#line 3165
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3166
  atomic_set(& mdev->ap_in_flight, 0);
#line 3167
  atomic_set(& mdev->md_io_in_use, 0);
#line 3169
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key);
#line 3170
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___0);
#line 3171
  sema_init(& mdev->data.work.s, 0);
#line 3172
  sema_init(& mdev->meta.work.s, 0);
#line 3173
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___1);
#line 3175
  spinlock_check(& mdev->data.work.q_lock);
#line 3175
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_6135.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___2);
#line 3176
  spinlock_check(& mdev->meta.work.q_lock);
#line 3176
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_6135.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___3);
#line 3178
  spinlock_check(& mdev->al_lock);
#line 3178
  __raw_spin_lock_init(& mdev->al_lock.ldv_6135.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___4);
#line 3179
  spinlock_check(& mdev->req_lock);
#line 3179
  __raw_spin_lock_init(& mdev->req_lock.ldv_6135.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___5);
#line 3180
  spinlock_check(& mdev->peer_seq_lock);
#line 3180
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_6135.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___6);
#line 3181
  spinlock_check(& mdev->epoch_lock);
#line 3181
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_6135.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___7);
#line 3183
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3184
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3185
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3186
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3187
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3188
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3189
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3190
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3191
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3192
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3193
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3194
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3195
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3196
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3198
  mdev->resync_work.cb = & w_resync_timer;
#line 3199
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3200
  mdev->go_diskless.cb = & w_go_diskless;
#line 3201
  mdev->md_sync_work.cb = & w_md_sync;
#line 3202
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3203
  mdev->start_resync_work.cb = & w_start_resync;
#line 3204
  init_timer_key(& mdev->resync_timer, 0U, "(&mdev->resync_timer)", & __key___8);
#line 3205
  init_timer_key(& mdev->md_sync_timer, 0U, "(&mdev->md_sync_timer)", & __key___9);
#line 3206
  init_timer_key(& mdev->start_resync_timer, 0U, "(&mdev->start_resync_timer)", & __key___10);
#line 3207
  init_timer_key(& mdev->request_timer, 0U, "(&mdev->request_timer)", & __key___11);
#line 3208
  mdev->resync_timer.function = & resync_timer_fn;
#line 3209
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3210
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3211
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3212
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3213
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3214
  mdev->request_timer.function = & request_timer_fn;
#line 3215
  mdev->request_timer.data = (unsigned long )mdev;
#line 3217
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___12);
#line 3218
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___13);
#line 3219
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___14);
#line 3220
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___15);
#line 3221
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___16);
#line 3222
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___17);
#line 3224
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3225
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3226
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3228
  mdev->agreed_pro_version = 97;
#line 3229
  mdev->write_ordering = WO_bdev_flush;
#line 3230
  mdev->resync_wenr = 4294967295U;
#line 3231
  mdev->peer_max_bio_size = 4096U;
#line 3232
  mdev->local_max_bio_size = 4096U;
#line 3233
  return;
}
}
#line 3235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3238
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3243
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3243
  if (tmp___0 != 0) {
#line 3244
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3245
  tmp___9 = 0UL;
#line 3245
  mdev->rs_failed = tmp___9;
#line 3245
  tmp___8 = tmp___9;
#line 3245
  mdev->rs_total = tmp___8;
#line 3245
  tmp___7 = tmp___8;
#line 3245
  mdev->rs_start = tmp___7;
#line 3245
  tmp___6 = tmp___7;
#line 3245
  mdev->p_size = tmp___6;
#line 3245
  tmp___5 = (unsigned int )tmp___6;
#line 3245
  mdev->writ_cnt = tmp___5;
#line 3245
  tmp___4 = tmp___5;
#line 3245
  mdev->send_cnt = tmp___4;
#line 3245
  tmp___3 = tmp___4;
#line 3245
  mdev->recv_cnt = tmp___3;
#line 3245
  tmp___2 = tmp___3;
#line 3245
  mdev->read_cnt = tmp___2;
#line 3245
  tmp___1 = tmp___2;
#line 3245
  mdev->bm_writ_cnt = tmp___1;
#line 3245
  mdev->al_writ_cnt = tmp___1;
#line 3255
  mdev->rs_last_events = 0;
#line 3256
  mdev->rs_last_sect_ev = 0;
#line 3257
  i = 0;
#line 3257
  goto ldv_52473;
  ldv_52472: 
#line 3258
  mdev->rs_mark_left[i] = 0UL;
#line 3259
  mdev->rs_mark_time[i] = 0UL;
#line 3257
  i = i + 1;
  ldv_52473: ;
#line 3257
  if (i <= 7) {
#line 3258
    goto ldv_52472;
  } else {

  }

#line 3261
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3261);
  } else {

  }
#line 3263
  drbd_set_my_capacity(mdev, 0UL);
#line 3264
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3266
    drbd_bm_resize(mdev, 0UL, 1);
#line 3267
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3270
  drbd_free_resources(mdev);
#line 3271
  clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3277
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3277
  if (tmp___10 == 0) {
#line 3277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3277);
  } else {

  }
#line 3278
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3278
  if (tmp___11 == 0) {
#line 3278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3278);
  } else {

  }
#line 3279
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3279
  if (tmp___12 == 0) {
#line 3279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3279);
  } else {

  }
#line 3280
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3280
  if (tmp___13 == 0) {
#line 3280
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3280);
  } else {

  }
#line 3281
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3281
  if (tmp___14 == 0) {
#line 3281
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3281);
  } else {

  }
#line 3282
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3282
  if (tmp___15 == 0) {
#line 3282
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3282);
  } else {

  }
#line 3283
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3283
  if (tmp___16 == 0) {
#line 3283
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3283);
  } else {

  }
#line 3284
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3284
  if (tmp___17 == 0) {
#line 3284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3284);
  } else {

  }
#line 3285
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3285
  if (tmp___18 == 0) {
#line 3285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3285);
  } else {

  }
#line 3286
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3286
  if (tmp___19 == 0) {
#line 3286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3286);
  } else {

  }
#line 3287
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3287
  if (tmp___20 == 0) {
#line 3287
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3287);
  } else {

  }
#line 3289
  drbd_set_defaults(mdev);
#line 3290
  return;
}
}
#line 3293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3297
  goto ldv_52480;
  ldv_52479: 
#line 3298
  page = drbd_pp_pool;
#line 3299
  drbd_pp_pool = (struct page *)page->ldv_16348.private;
#line 3300
  __free_pages(page, 0U);
#line 3301
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_52480: ;
#line 3297
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3298
    goto ldv_52479;
  } else {

  }

#line 3306
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 3307
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 3308
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 3309
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 3310
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3311
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3312
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3313
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3314
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3315
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3316
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3317
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3318
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3319
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3320
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3321
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3323
  drbd_md_io_bio_set = 0;
#line 3324
  drbd_md_io_page_pool = 0;
#line 3325
  drbd_ee_mempool = 0;
#line 3326
  drbd_request_mempool = 0;
#line 3327
  drbd_ee_cache = 0;
#line 3328
  drbd_request_cache = 0;
#line 3329
  drbd_bm_ext_cache = 0;
#line 3330
  drbd_al_ext_cache = 0;
#line 3332
  return;
}
}
#line 3335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3338
  number = (int const   )(minor_count * 32U);
#line 3342
  drbd_request_mempool = 0;
#line 3343
  drbd_ee_cache = 0;
#line 3344
  drbd_request_cache = 0;
#line 3345
  drbd_bm_ext_cache = 0;
#line 3346
  drbd_al_ext_cache = 0;
#line 3347
  drbd_pp_pool = 0;
#line 3348
  drbd_md_io_page_pool = 0;
#line 3349
  drbd_md_io_bio_set = 0;
#line 3352
  drbd_request_cache = kmem_cache_create("drbd_req", 112UL, 0UL, 0UL, 0);
#line 3354
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3355
    goto Enomem;
  } else {

  }
#line 3357
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3359
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3360
    goto Enomem;
  } else {

  }
#line 3362
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3364
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3365
    goto Enomem;
  } else {

  }
#line 3367
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3369
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3370
    goto Enomem;
  } else {

  }
#line 3379
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 3380
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 3381
    goto Enomem;
  } else {

  }
#line 3383
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3385
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3386
    goto Enomem;
  } else {

  }
#line 3388
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3390
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3391
    goto Enomem;
  } else {

  }
#line 3394
  spinlock_check(& drbd_pp_lock);
#line 3394
  __raw_spin_lock_init(& drbd_pp_lock.ldv_6135.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3396
  i = 0;
#line 3396
  goto ldv_52491;
  ldv_52490: 
#line 3397
  page = alloc_pages(131282U, 0U);
#line 3398
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3399
    goto Enomem;
  } else {

  }
#line 3400
  page->ldv_16348.private = (unsigned long )drbd_pp_pool;
#line 3401
  drbd_pp_pool = page;
#line 3396
  i = i + 1;
  ldv_52491: ;
#line 3396
  if (i < number) {
#line 3397
    goto ldv_52490;
  } else {

  }
#line 3403
  drbd_pp_vacant = number;
#line 3405
  return (0);
  Enomem: 
#line 3408
  drbd_destroy_mempools();
#line 3409
  return (-12);
}
}
#line 3412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3419
  return (0);
}
}
#line 3422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3430
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3431
  if (rr != 0) {
#line 3432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3434
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3435
  if (rr != 0) {
#line 3436
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3438
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3439
  if (rr != 0) {
#line 3440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3442
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3443
  if (rr != 0) {
#line 3444
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3446
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3447
  if (rr != 0) {
#line 3448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3449
  return;
}
}
#line 3453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3455
  tmp = minor_to_mdev(minor);
#line 3455
  mdev = tmp;
#line 3457
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3458
    return;
  } else {

  }
#line 3460
  del_timer_sync(& mdev->request_timer);
#line 3463
  if (mdev->open_cnt != 0) {
#line 3464
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3465);
  } else {

  }
#line 3467
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3467
  _b = tmp___0 == 0;
#line 3467
  if (_b != 0) {
#line 3467
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3467);
  } else {

  }
#line 3467
  if (_b != 0) {
#line 3469
    lp = mdev->data.work.q.next;
#line 3469
    goto ldv_52512;
    ldv_52511: 
#line 3470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3469
    lp = lp->next;
    ldv_52512: ;
#line 3469
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3470
      goto ldv_52511;
    } else {

    }

  } else {

  }
#line 3475
  del_gendisk(mdev->vdisk);
#line 3480
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3481
    bdput(mdev->this_bdev);
  } else {

  }
#line 3483
  drbd_free_resources(mdev);
#line 3485
  drbd_release_ee_lists(mdev);
#line 3488
  kfree((void const   *)mdev->ee_hash);
#line 3494
  lc_destroy(mdev->act_log);
#line 3495
  lc_destroy(mdev->resync);
#line 3497
  kfree((void const   *)mdev->p_uuid);
#line 3500
  kfree((void const   *)mdev->int_dig_out);
#line 3501
  kfree((void const   *)mdev->int_dig_in);
#line 3502
  kfree((void const   *)mdev->int_dig_vv);
#line 3507
  drbd_free_mdev(mdev);
#line 3508
  return;
}
}
#line 3510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3514
  unregister_reboot_notifier(& drbd_notifier);
#line 3524
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3525
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3527
  drbd_nl_cleanup();
#line 3529
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3530
    i = minor_count;
#line 3531
    goto ldv_52519;
    ldv_52518: 
#line 3532
    drbd_delete_device(i);
    ldv_52519: 
#line 3531
    tmp = i;
#line 3531
    i = i - 1U;
#line 3531
    if (tmp != 0U) {
#line 3532
      goto ldv_52518;
    } else {

    }
#line 3533
    drbd_destroy_mempools();
  } else {

  }
#line 3536
  kfree((void const   *)minor_table);
#line 3538
  unregister_blkdev(147U, "drbd");
#line 3540
  printk("\016drbd: module cleanup done.\n");
#line 3541
  return;
}
}
#line 3550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3552
  mdev = (struct drbd_conf *)congested_data;
#line 3554
  reason = 45;
#line 3555
  r = 0;
#line 3557
  tmp = may_inc_ap_bio___0(mdev);
#line 3557
  if (tmp) {
#line 3557
    tmp___0 = 0;
  } else {
#line 3557
    tmp___0 = 1;
  }
#line 3557
  if (tmp___0) {
#line 3559
    r = bdi_bits;
#line 3560
    reason = 100;
#line 3561
    goto out;
  } else {

  }
#line 3564
  tmp___2 = constant_test_bit(30U, (unsigned long const volatile   *)(& mdev->flags));
#line 3564
  if (tmp___2 != 0) {
#line 3565
    r = r | 4;
#line 3571
    tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 3571
    if (tmp___1 == 0) {
#line 3572
      r = r | 8;
    } else {
#line 3574
      put_ldev(mdev);
    }
#line 3575
    r = r & bdi_bits;
#line 3576
    reason = 99;
#line 3577
    goto out;
  } else {

  }
#line 3580
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3580
  if (tmp___3 != 0) {
#line 3581
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3582
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3583
    put_ldev(mdev);
#line 3584
    if (r != 0) {
#line 3585
      reason = 98;
    } else {

    }
  } else {

  }
#line 3588
  if ((bdi_bits & 4) != 0) {
#line 3588
    tmp___4 = constant_test_bit(20U, (unsigned long const volatile   *)(& mdev->flags));
#line 3588
    if (tmp___4 != 0) {
#line 3589
      r = r | 4;
#line 3590
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3594
  mdev->congestion_reason = reason;
#line 3595
  return (r);
}
}
#line 3598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3605
  tmp = kzalloc(4736UL, 208U);
#line 3605
  mdev = (struct drbd_conf *)tmp;
#line 3606
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3607
    return (0);
  } else {

  }
#line 3608
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3608
  if (tmp___0) {
#line 3608
    tmp___1 = 0;
  } else {
#line 3608
    tmp___1 = 1;
  }
#line 3608
  if (tmp___1) {
#line 3609
    goto out_no_cpumask;
  } else {

  }
#line 3611
  mdev->minor = minor;
#line 3613
  drbd_init_set_defaults(mdev);
#line 3615
  q = blk_alloc_queue(208U);
#line 3616
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3617
    goto out_no_q;
  } else {

  }
#line 3618
  mdev->rq_queue = q;
#line 3619
  q->queuedata = (void *)mdev;
#line 3621
  disk = alloc_disk(1);
#line 3622
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3623
    goto out_no_disk;
  } else {

  }
#line 3624
  mdev->vdisk = disk;
#line 3626
  set_disk_ro(disk, 1);
#line 3628
  disk->queue = q;
#line 3629
  disk->major = 147;
#line 3630
  disk->first_minor = (int )minor;
#line 3631
  disk->fops = & drbd_ops;
#line 3632
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3633
  disk->private_data = (void *)mdev;
#line 3635
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3637
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3639
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3640
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3642
  blk_queue_make_request(q, & drbd_make_request);
#line 3643
  blk_queue_flush(q, 6144U);
#line 3646
  blk_queue_max_hw_sectors(q, 16U);
#line 3647
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3648
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3649
  q->queue_lock = & mdev->req_lock;
#line 3651
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3652
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3653
    goto out_no_io_page;
  } else {

  }
#line 3655
  tmp___2 = drbd_bm_init(mdev);
#line 3655
  if (tmp___2 != 0) {
#line 3656
    goto out_no_bitmap;
  } else {

  }
#line 3658
  tmp___3 = tl_init(mdev);
#line 3658
  if (tmp___3 == 0) {
#line 3659
    goto out_no_tl;
  } else {

  }
#line 3661
  tmp___4 = kzalloc(120UL, 208U);
#line 3661
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3662
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3663
    goto out_no_app_reads;
  } else {

  }
#line 3665
  tmp___5 = kzalloc(40UL, 208U);
#line 3665
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3666
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3667
    goto out_no_epoch;
  } else {

  }
#line 3669
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3670
  mdev->epochs = 1U;
#line 3672
  return (mdev);
  out_no_epoch: 
#line 3677
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3679
  tl_cleanup(mdev);
  out_no_tl: 
#line 3681
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3683
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3685
  put_disk(disk);
  out_no_disk: 
#line 3687
  blk_cleanup_queue(q);
  out_no_q: 
#line 3689
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3691
  kfree((void const   *)mdev);
#line 3692
  return (0);
}
}
#line 3697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3699
  kfree((void const   *)mdev->current_epoch);
#line 3700
  kfree((void const   *)mdev->app_reads_hash);
#line 3701
  tl_cleanup(mdev);
#line 3702
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3703
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3704
  __free_pages(mdev->md_io_page, 0U);
#line 3705
  put_disk(mdev->vdisk);
#line 3706
  blk_cleanup_queue(mdev->rq_queue);
#line 3707
  free_cpumask_var(mdev->cpu_mask);
#line 3708
  drbd_free_tl_hash(mdev);
#line 3709
  kfree((void const   *)mdev);
#line 3710
  return;
}
}
#line 3713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3724
  if (minor_count == 0U || minor_count > 256U) {
#line 3725
    printk("\vdrbd: invalid minor_count (%d)\n", minor_count);
#line 3728
    return (-22);
  } else {

  }
#line 3734
  err = drbd_nl_init();
#line 3735
  if (err != 0) {
#line 3736
    return (err);
  } else {

  }
#line 3738
  err = register_blkdev(147U, "drbd");
#line 3739
  if (err != 0) {
#line 3740
    printk("\vdrbd: unable to register block device major %d\n", 147);
#line 3743
    return (err);
  } else {

  }
#line 3746
  register_reboot_notifier(& drbd_notifier);
#line 3751
  err = -12;
#line 3753
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3755
  drbd_proc = 0;
#line 3756
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3756
  minor_table = (struct drbd_conf **)tmp;
#line 3758
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3759
    goto Enomem;
  } else {

  }
#line 3761
  err = drbd_create_mempools();
#line 3762
  if (err != 0) {
#line 3763
    goto Enomem;
  } else {

  }
#line 3765
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3766
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3767
    printk("\vdrbd: unable to register proc file\n");
#line 3768
    goto Enomem;
  } else {

  }
#line 3771
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3773
  printk("\016drbd: initialized. Version: 8.3.13 (api:%d/proto:%d-%d)\n", 88, 86,
         97);
#line 3776
  tmp___0 = drbd_buildtag();
#line 3776
  printk("\016drbd: %s\n", tmp___0);
#line 3777
  printk("\016drbd: registered as block device major %d\n", 147);
#line 3779
  printk("\016drbd: minor_table @ 0x%p\n", minor_table);
#line 3781
  return (0);
  Enomem: 
#line 3784
  drbd_cleanup();
#line 3785
  if (err == -12) {
#line 3787
    printk("\vdrbd: ran out of memory\n");
  } else {
#line 3789
    printk("\vdrbd: initialization failure\n");
  }
#line 3790
  return (err);
}
}
#line 3793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3795
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3796
    return;
  } else {

  }
#line 3798
  blkdev_put(ldev->backing_bdev, 131U);
#line 3799
  blkdev_put(ldev->md_bdev, 131U);
#line 3801
  kfree((void const   *)ldev);
#line 3802
  return;
}
}
#line 3804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3806
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3807
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3808
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3809
    sock_release(mdev->data.socket);
#line 3810
    mdev->data.socket = 0;
#line 3811
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3813
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3814
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3815
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3816
    sock_release(mdev->meta.socket);
#line 3817
    mdev->meta.socket = 0;
#line 3818
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3820
  return;
}
}
#line 3823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3825
  crypto_free_hash(mdev->csums_tfm);
#line 3826
  mdev->csums_tfm = 0;
#line 3827
  crypto_free_hash(mdev->verify_tfm);
#line 3828
  mdev->verify_tfm = 0;
#line 3829
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3830
  mdev->cram_hmac_tfm = 0;
#line 3831
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3832
  mdev->integrity_w_tfm = 0;
#line 3833
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3834
  mdev->integrity_r_tfm = 0;
#line 3836
  drbd_free_sock(mdev);
#line 3838
  drbd_free_bc(mdev->ldev);
#line 3838
  mdev->ldev = 0;
#line 3839
  return;
}
}
#line 3867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3873
  del_timer(& mdev->md_sync_timer);
#line 3875
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 3875
  if (tmp == 0) {
#line 3876
    return;
  } else {

  }
#line 3880
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3880
  if (tmp___0 == 0) {
#line 3881
    return;
  } else {

  }
#line 3883
  tmp___1 = drbd_md_get_buffer(mdev);
#line 3883
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3884
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3885
    goto out;
  } else {

  }
#line 3887
  memset((void *)buffer, 0, 512UL);
#line 3889
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3889
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3889
  buffer->la_size = tmp___3;
#line 3890
  i = 0;
#line 3890
  goto ldv_52585;
  ldv_52584: 
#line 3891
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3891
  buffer->uuid[i] = tmp___4;
#line 3890
  i = i + 1;
  ldv_52585: ;
#line 3890
  if (i <= 3) {
#line 3891
    goto ldv_52584;
  } else {

  }
#line 3892
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3892
  buffer->flags = tmp___5;
#line 3893
  buffer->magic = 1795323011U;
#line 3895
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3895
  buffer->md_size_sect = tmp___6;
#line 3896
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3896
  buffer->al_offset = tmp___7;
#line 3897
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3897
  buffer->al_nr_extents = tmp___8;
#line 3898
  buffer->bm_bytes_per_bit = 1048576U;
#line 3899
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3899
  buffer->device_uuid = tmp___9;
#line 3901
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3901
  buffer->bm_offset = tmp___10;
#line 3902
  tmp___11 = __fswab32(mdev->peer_max_bio_size);
#line 3902
  buffer->la_peer_max_bio_size = tmp___11;
#line 3904
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3904
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3904
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3904);
  } else {

  }
#line 3905
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3907
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3907
  if (tmp___13 == 0) {
#line 3909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3910
    drbd_chk_io_error____1(mdev, 1, DRBD_META_IO_ERROR, "drbd_md_sync");
  } else {

  }
#line 3915
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3915
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3917
  drbd_md_put_buffer(mdev);
  out: 
#line 3919
  put_ldev(mdev);
#line 3920
  return;
}
}
#line 3930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  unsigned int peer ;
  __u32 tmp___16 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
#line 3933
  rv = 101;
#line 3935
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3935
  if (tmp == 0) {
#line 3936
    return (118);
  } else {

  }
#line 3938
  tmp___0 = drbd_md_get_buffer(mdev);
#line 3938
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3939
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3940
    goto out;
  } else {

  }
#line 3942
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3942
  if (tmp___1 == 0) {
#line 3945
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3946
    rv = 118;
#line 3947
    goto err;
  } else {

  }
#line 3950
  tmp___2 = __fswab32(buffer->magic);
#line 3950
  if (tmp___2 != 2205418091U) {
#line 3951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3952
    rv = 119;
#line 3953
    goto err;
  } else {

  }
#line 3955
  tmp___4 = __fswab32(buffer->al_offset);
#line 3955
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3956
    tmp___3 = __fswab32(buffer->al_offset);
#line 3956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3958
    rv = 119;
#line 3959
    goto err;
  } else {

  }
#line 3961
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3961
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3962
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3964
    rv = 119;
#line 3965
    goto err;
  } else {

  }
#line 3967
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3967
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3968
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3970
    rv = 119;
#line 3971
    goto err;
  } else {

  }
#line 3974
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3974
  if (tmp___10 != 4096U) {
#line 3975
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3975
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3977
    rv = 119;
#line 3978
    goto err;
  } else {

  }
#line 3981
  tmp___11 = __fswab64(buffer->la_size);
#line 3981
  bdev->md.la_size_sect = tmp___11;
#line 3982
  i = 0;
#line 3982
  goto ldv_52598;
  ldv_52597: 
#line 3983
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3983
  bdev->md.uuid[i] = tmp___12;
#line 3982
  i = i + 1;
  ldv_52598: ;
#line 3982
  if (i <= 3) {
#line 3983
    goto ldv_52597;
  } else {

  }
#line 3984
  tmp___13 = __fswab32(buffer->flags);
#line 3984
  bdev->md.flags = tmp___13;
#line 3985
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3985
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3986
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3986
  bdev->md.device_uuid = tmp___15;
#line 3988
  spin_lock_irq(& mdev->req_lock);
#line 3989
  if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 3991
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3991
    peer = tmp___16;
#line 3992
    _max1 = peer;
#line 3992
    _max2 = 4096U;
#line 3992
    peer = _max1 > _max2 ? _max1 : _max2;
#line 3993
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3995
  spin_unlock_irq(& mdev->req_lock);
#line 3997
  if (mdev->sync_conf.al_extents <= 6) {
#line 3998
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 4001
  drbd_md_put_buffer(mdev);
  out: 
#line 4003
  put_ldev(mdev);
#line 4005
  return (rv);
}
}
#line 4026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4028
  tmp = test_and_set_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 4028
  if (tmp == 0) {
#line 4029
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 4030
  return;
}
}
#line 4033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 4037
  i = 2;
#line 4037
  goto ldv_52612;
  ldv_52611: 
#line 4038
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 4037
  i = i + 1;
  ldv_52612: ;
#line 4037
  if (i <= 2) {
#line 4038
    goto ldv_52611;
  } else {

  }

#line 4042
  return;
}
}
#line 4041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4043
  if (idx == 0) {
#line 4044
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 4045
      val = val | 1ULL;
    } else {
#line 4047
      val = val & 0xfffffffffffffffeULL;
    }
#line 4049
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 4052
  (mdev->ldev)->md.uuid[idx] = val;
#line 4053
  drbd_md_mark_dirty(mdev);
#line 4054
  return;
}
}
#line 4056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 4059
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4059
  flags = _raw_spin_lock_irqsave(tmp);
#line 4060
  __drbd_uuid_set(mdev, idx, val);
#line 4061
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4062
  return;
}
}
#line 4064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 4067
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4067
  flags = _raw_spin_lock_irqsave(tmp);
#line 4068
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 4069
    drbd_uuid_move_history(mdev);
#line 4070
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 4072
  __drbd_uuid_set(mdev, idx, val);
#line 4073
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4074
  return;
}
}
#line 4083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 4088
  get_random_bytes((void *)(& val), 8);
#line 4090
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 4091
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4093
  if (bm_uuid != 0ULL) {
#line 4094
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 4096
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 4097
  __drbd_uuid_set(mdev, 0, val);
#line 4098
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 4100
  drbd_print_uuids(mdev, "new current UUID");
#line 4102
  drbd_md_sync(mdev);
#line 4103
  return;
}
}
#line 4105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned long long bm_uuid ;

  {
#line 4108
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 4109
    return;
  } else {

  }
#line 4111
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4111
  flags = _raw_spin_lock_irqsave(tmp);
#line 4112
  if (val == 0ULL) {
#line 4113
    drbd_uuid_move_history(mdev);
#line 4114
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 4115
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 4117
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4118
    if (bm_uuid != 0ULL) {
#line 4119
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 4121
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 4123
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4125
  drbd_md_mark_dirty(mdev);
#line 4126
  return;
}
}
#line 4134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4136
  rv = -5;
#line 4138
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4138
  if (tmp != 0) {
#line 4139
    drbd_md_set_flag(mdev, 8);
#line 4140
    drbd_md_sync(mdev);
#line 4141
    drbd_bm_set_all(mdev);
#line 4143
    rv = drbd_bm_write(mdev);
#line 4145
    if (rv == 0) {
#line 4146
      drbd_md_clear_flag(mdev, 8);
#line 4147
      drbd_md_sync(mdev);
    } else {

    }
#line 4150
    put_ldev(mdev);
  } else {

  }
#line 4153
  return (rv);
}
}
#line 4162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4164
  rv = -5;
#line 4166
  drbd_resume_al(mdev);
#line 4167
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4167
  if (tmp != 0) {
#line 4168
    drbd_bm_clear_all(mdev);
#line 4169
    rv = drbd_bm_write(mdev);
#line 4170
    put_ldev(mdev);
  } else {

  }
#line 4173
  return (rv);
}
}
#line 4176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4178
  __mptr = (struct drbd_work  const  *)w;
#line 4178
  work = (struct bm_io_work *)__mptr;
#line 4179
  rv = -5;
#line 4181
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4181
  if (tmp != 0) {
#line 4181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4181);
  } else {

  }
#line 4183
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4183
  if (tmp___0 != 0) {
#line 4184
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4185
    rv = (*(work->io_fn))(mdev);
#line 4186
    drbd_bm_unlock(mdev);
#line 4187
    put_ldev(mdev);
  } else {

  }
#line 4190
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 4191
  __asm__  volatile   ("": : : "memory");
#line 4192
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4194
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4195
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4197
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4198
  work->why = 0;
#line 4199
  work->flags = 0;
#line 4201
  return (1);
}
}
#line 4204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4206
  lc_destroy(mdev->resync);
#line 4207
  mdev->resync = 0;
#line 4208
  lc_destroy(mdev->act_log);
#line 4209
  mdev->act_log = 0;
#line 4210
  drbd_free_bc(mdev->ldev);
#line 4210
  mdev->ldev = 0;
#line 4214
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4215
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4216
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4218
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4219
  return;
}
}
#line 4221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4223
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4223
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4223);
  } else {

  }
#line 4228
  val.i = 0U;
#line 4228
  val.ldv_40583.disk = 0U;
#line 4228
  mask.i = 0U;
#line 4228
  mask.ldv_40583.disk = 15U;
#line 4228
  drbd_force_state(mdev, mask, val);
#line 4229
  return (1);
}
}
#line 4232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4234
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4234
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4234);
  } else {

  }
#line 4235
  tmp = test_and_set_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4235
  if (tmp == 0) {
#line 4236
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4237
  return;
}
}
#line 4251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4256
  tmp = get_current();
#line 4256
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4256);
  } else {

  }
#line 4258
  tmp___0 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 4258
  if (tmp___0 != 0) {
#line 4258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4258);
  } else {

  }
#line 4259
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 4259
  if (tmp___1 != 0) {
#line 4259
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4259);
  } else {

  }
#line 4260
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4260
  if (tmp___2 == 0) {
#line 4260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4260);
  } else {

  }
#line 4261
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4265
  mdev->bm_io_work.io_fn = io_fn;
#line 4266
  mdev->bm_io_work.done = done;
#line 4267
  mdev->bm_io_work.why = why;
#line 4268
  mdev->bm_io_work.flags = flags;
#line 4270
  spin_lock_irq(& mdev->req_lock);
#line 4271
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 4272
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4272
  if (tmp___4 == 0) {
#line 4273
    tmp___3 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4273
    if (tmp___3 == 0) {
#line 4274
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4276
  spin_unlock_irq(& mdev->req_lock);
#line 4277
  return;
}
}
#line 4288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4293
  tmp = get_current();
#line 4293
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4293);
  } else {

  }
#line 4295
  if (((unsigned int )flags & 9U) == 0U) {
#line 4296
    drbd_suspend_io(mdev);
  } else {

  }
#line 4298
  drbd_bm_lock(mdev, why, flags);
#line 4299
  rv = (*io_fn)(mdev);
#line 4300
  drbd_bm_unlock(mdev);
#line 4302
  if (((unsigned int )flags & 9U) == 0U) {
#line 4303
    drbd_resume_io(mdev);
  } else {

  }
#line 4305
  return (rv);
}
}
#line 4308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4310
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4311
    drbd_md_mark_dirty(mdev);
#line 4312
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4314
  return;
}
}
#line 4316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4318
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4319
    drbd_md_mark_dirty(mdev);
#line 4320
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4322
  return;
}
}
#line 4323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4325
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4330
  mdev = (struct drbd_conf *)data;
#line 4332
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4333
  return;
}
}
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4337
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4342
  drbd_md_sync(mdev);
#line 4343
  return (1);
}
}
#line 4363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4367
  tmp = rsp->count;
#line 4367
  rsp->count = rsp->count - 1UL;
#line 4367
  if (tmp == 0UL) {
#line 4368
    get_random_bytes((void *)(& refresh), 8);
#line 4369
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4370
    rsp->count = 10000UL;
  } else {

  }
#line 4372
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4373
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4373
  return ((unsigned long )tmp___0);
}
}
#line 4377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4378
  _faults[0] = (char *)"Meta-data write";
#line 4378
  _faults[1] = (char *)"Meta-data read";
#line 4378
  _faults[2] = (char *)"Resync write";
#line 4378
  _faults[3] = (char *)"Resync read";
#line 4378
  _faults[4] = (char *)"Data write";
#line 4378
  _faults[5] = (char *)"Data read";
#line 4378
  _faults[6] = (char *)"Data read ahead";
#line 4378
  _faults[7] = (char *)"BM allocation";
#line 4378
  _faults[8] = (char *)"EE allocation";
#line 4378
  _faults[9] = (char *)"receive data corruption";
#line 4391
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4397
  rrs.state = 0UL;
#line 4397
  rrs.count = 0UL;
#line 4399
  if (fault_devs == 0) {
#line 4399
    goto _L;
  } else {
#line 4399
    tmp = mdev_to_minor(mdev);
#line 4399
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4399
      tmp___0 = _drbd_fault_random(& rrs);
#line 4399
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4399
        tmp___1 = 1;
      } else {
#line 4399
        tmp___1 = 0;
      }
    } else {
#line 4399
      tmp___1 = 0;
    }
  }
#line 4399
  ret = (unsigned int )tmp___1;
#line 4404
  if (ret != 0U) {
#line 4405
    fault_count = fault_count + 1;
#line 4407
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4407
    if (tmp___3 != 0) {
#line 4408
      tmp___2 = _drbd_fault_str(type);
#line 4408
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4412
  return (ret);
}
}
#line 4416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4421
  buildtag[0] = '\000';
#line 4421
  tmp = 1U;
#line 4421
  while (1) {
#line 4421
    if (tmp >= 38U) {
#line 4421
      break;
    } else {

    }
#line 4421
    buildtag[tmp] = (char)0;
#line 4421
    tmp = tmp + 1U;
  }
#line 4423
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4425
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 4431
  return ((char const   *)(& buildtag));
}
}
#line 4479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_110_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4678
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4635
  LDV_IN_INTERRUPT = 1;
#line 4644
  ldv_initialize();
#line 4660
  ldv_handler_precall();
#line 4661
  tmp = drbd_init();
#line 4661
  if (tmp != 0) {
#line 4662
    goto ldv_final;
  } else {

  }
#line 4685
  goto ldv_52809;
  ldv_52808: 
#line 4689
  tmp___0 = nondet_int();
#line 4689
  switch (tmp___0) {
  case 0: ;
#line 4694
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4707
    ldv_handler_precall();
#line 4708
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 4709
    ldv_check_return_value(res_drbd_open_73);
#line 4710
    if (res_drbd_open_73 != 0) {
#line 4711
      goto ldv_module_exit;
    } else {

    }
#line 4732
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4738
  goto ldv_52803;
  case 1: ;
#line 4742
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4755
    ldv_handler_precall();
#line 4756
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 4777
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4783
  goto ldv_52803;
  case 2: 
#line 4802
  ldv_handler_precall();
#line 4803
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 4828
  goto ldv_52803;
  case 3: 
#line 4853
  ldv_handler_precall();
#line 4854
  md_sync_timer_fn(var_md_sync_timer_fn_110_p0);
#line 4873
  goto ldv_52803;
  default: ;
#line 4874
  goto ldv_52803;
  }
  ldv_52803: ;
  ldv_52809: 
#line 4685
  tmp___1 = nondet_int();
#line 4685
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4687
    goto ldv_52808;
  } else {

  }

  ldv_module_exit: 
#line 4896
  ldv_handler_precall();
#line 4897
  drbd_cleanup();
  ldv_final: 
#line 4918
  ldv_check_final_state();
#line 4921
  return;
}
}
#line 4925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_4(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4930
  ldv_module_put(ldv_func_arg1);
#line 4931
  return;
}
}
#line 4933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
bool ldv_try_module_get_5(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
#line 4938
  tmp = ldv_try_module_get(ldv_func_arg1);
#line 4938
  return (tmp != 0);
}
}
#line 4941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4946
  ldv_module_put(ldv_func_arg1);
#line 4947
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 68
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 80
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 104
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 109
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 114
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 119
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 326 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 404 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 407
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 407
  return (tmp != 0);
}
}
#line 495 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 498
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 499
  return;
}
}
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 468 "include/linux/module.h"
bool ldv_try_module_get_7(struct module *ldv_func_arg1 ) ;
#line 474
void ldv_module_put_8(struct module *ldv_func_arg1 ) ;
#line 478
void ldv_module_put_9(struct module *ldv_func_arg1 ) ;
#line 210 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2093 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 71 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 73
extern void cn_del_callback(struct cb_id * ) ;
#line 74
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 409 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 900 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 906
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 922
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 929
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1567 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1962
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1966
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1966
  if (tmp___1 != 0UL) {
#line 1966
    __min1 = 2251799813685248UL;
#line 1966
    tmp___0 = drbd_md_first_sector(bdev);
#line 1966
    __min2 = tmp___0;
#line 1966
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1966
    s = 0UL;
  }
#line 1969
  goto ldv_50963;
  case -2: 
#line 1971
  __min1___0 = 2251799813685248UL;
#line 1971
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1971
  __min2___0 = tmp___2;
#line 1971
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1974
  __min1___1 = s;
#line 1974
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1974
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1977
  goto ldv_50963;
  default: 
#line 1979
  __min1___2 = 8587575296UL;
#line 1979
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1979
  __min2___2 = tmp___3;
#line 1979
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50963: ;
#line 1982
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[91U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"detach_force", 40960, 4}, 
        {"disk_timeout", 0, 4}, 
        {"stop_sector", 24576, 8}};
#line 52 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 53
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 54
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_51763;
  ldv_51762: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_51760;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_51760: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_51763: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_51762;
  } else {

  }

#line 14
  return (1);
}
}
#line 35
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 35 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  unsigned short *tmp___6 ;
  u16 tmp___7 ;

  {
#line 20
  goto ldv_51825;
  ldv_51824: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_51792;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_51792;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_51792;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_51792;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_51792;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_51792;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51792;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51792;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51792;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_51792;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51792;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51792;
  case 89: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->disk_timeout = (int )tmp___5;
#line 20
  goto ldv_51792;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_51792: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_51825: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___7 = get_unaligned_le16((void const   *)tmp___6);
#line 20
  tag = (int )tmp___7;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_51824;
  } else {

  }

#line 20
  return (1);
}
}
#line 39
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) ;
#line 39 "include/linux/drbd_nl.h"
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 37
  goto ldv_51842;
  ldv_51841: 
#line 37
  tmp = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 37
  dlen = (int )tmp___0;
#line 37
  switch (tag & 8191) {
  case 88: 
#line 37
  arg->detach_force = (int )((signed char )*((char *)tags)) != 0;
#line 37
  goto ldv_51839;
  default: ;
#line 37
  if ((tag & 8192) != 0) {
#line 37
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 37
    return (0);
  } else {

  }
  }
  ldv_51839: 
#line 37
  tags = tags + (unsigned long )dlen;
  ldv_51842: 
#line 37
  tmp___1 = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 37
  tag = (int )tmp___2;
#line 37
  if (tag != 0) {
#line 38
    goto ldv_51841;
  } else {

  }

#line 37
  return (1);
}
}
#line 73
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 73 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 41
  goto ldv_51933;
  ldv_51932: 
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 41
  dlen = (int )tmp___0;
#line 41
  switch (tag & 8191) {
  case 8: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->my_addr_len = dlen;
#line 41
  __min1 = (size_t )dlen;
#line 41
  __min2 = 128UL;
#line 41
  __len = __min1 < __min2 ? __min1 : __min2;
#line 41
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 41
  goto ldv_51865;
  case 9: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->peer_addr_len = dlen;
#line 41
  __min1___0 = (size_t )dlen;
#line 41
  __min2___0 = 128UL;
#line 41
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 41
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 41
  goto ldv_51865;
  case 10: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->shared_secret_len = dlen;
#line 41
  __min1___1 = (size_t )dlen;
#line 41
  __min2___1 = 64UL;
#line 41
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 41
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 41
  goto ldv_51865;
  case 11: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->cram_hmac_alg_len = dlen;
#line 41
  __min1___2 = (size_t )dlen;
#line 41
  __min2___2 = 64UL;
#line 41
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 41
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 41
  goto ldv_51865;
  case 44: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->integrity_alg_len = dlen;
#line 41
  __min1___3 = (size_t )dlen;
#line 41
  __min2___3 = 64UL;
#line 41
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 41
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 41
  goto ldv_51865;
  case 14: 
#line 41
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->timeout = (int )tmp___1;
#line 41
  goto ldv_51865;
  case 15: 
#line 41
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->wire_protocol = (int )tmp___2;
#line 41
  goto ldv_51865;
  case 16: 
#line 41
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->try_connect_int = (int )tmp___3;
#line 41
  goto ldv_51865;
  case 17: 
#line 41
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_int = (int )tmp___4;
#line 41
  goto ldv_51865;
  case 18: 
#line 41
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_epoch_size = (int )tmp___5;
#line 41
  goto ldv_51865;
  case 19: 
#line 41
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_buffers = (int )tmp___6;
#line 41
  goto ldv_51865;
  case 20: 
#line 41
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->unplug_watermark = (int )tmp___7;
#line 41
  goto ldv_51865;
  case 21: 
#line 41
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->sndbuf_size = (int )tmp___8;
#line 41
  goto ldv_51865;
  case 22: 
#line 41
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ko_count = (int )tmp___9;
#line 41
  goto ldv_51865;
  case 24: 
#line 41
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_0p = (int )tmp___10;
#line 41
  goto ldv_51865;
  case 25: 
#line 41
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_1p = (int )tmp___11;
#line 41
  goto ldv_51865;
  case 26: 
#line 41
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_2p = (int )tmp___12;
#line 41
  goto ldv_51865;
  case 39: 
#line 41
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rr_conflict = (int )tmp___13;
#line 41
  goto ldv_51865;
  case 40: 
#line 41
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_timeo = (int )tmp___14;
#line 41
  goto ldv_51865;
  case 67: 
#line 41
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rcvbuf_size = (int )tmp___15;
#line 41
  goto ldv_51865;
  case 81: 
#line 41
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->on_congestion = (int )tmp___16;
#line 41
  goto ldv_51865;
  case 82: 
#line 41
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_fill = (int )tmp___17;
#line 41
  goto ldv_51865;
  case 83: 
#line 41
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_extents = (int )tmp___18;
#line 41
  goto ldv_51865;
  case 60: 
#line 41
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 27: 
#line 41
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 28: 
#line 41
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 41: 
#line 41
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 61: 
#line 41
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 62: 
#line 41
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  case 70: 
#line 41
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51865;
  default: ;
#line 41
  if ((tag & 8192) != 0) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 41
    return (0);
  } else {

  }
  }
  ldv_51865: 
#line 41
  tags = tags + (unsigned long )dlen;
  ldv_51933: 
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 41
  tag = (int )tmp___20;
#line 41
  if (tag != 0) {
#line 42
    goto ldv_51932;
  } else {

  }

#line 41
  return (1);
}
}
#line 77
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 77 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 75
  goto ldv_51950;
  ldv_51949: 
#line 75
  tmp = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 75
  dlen = (int )tmp___0;
#line 75
  switch (tag & 8191) {
  case 84: 
#line 75
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 75
  goto ldv_51947;
  default: ;
#line 75
  if ((tag & 8192) != 0) {
#line 75
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 75
    return (0);
  } else {

  }
  }
  ldv_51947: 
#line 75
  tags = tags + (unsigned long )dlen;
  ldv_51950: 
#line 75
  tmp___1 = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 75
  tag = (int )tmp___2;
#line 75
  if (tag != 0) {
#line 76
    goto ldv_51949;
  } else {

  }

#line 75
  return (1);
}
}
#line 83
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 83 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 79
  goto ldv_51969;
  ldv_51968: 
#line 79
  tmp = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 79
  dlen = (int )tmp___0;
#line 79
  switch (tag & 8191) {
  case 29: 
#line 79
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 79
  goto ldv_51964;
  case 68: 
#line 79
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_51964;
  case 69: 
#line 79
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_51964;
  default: ;
#line 79
  if ((tag & 8192) != 0) {
#line 79
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 79
    return (0);
  } else {

  }
  }
  ldv_51964: 
#line 79
  tags = tags + (unsigned long )dlen;
  ldv_51969: 
#line 79
  tmp___1 = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 79
  tag = (int )tmp___2;
#line 79
  if (tag != 0) {
#line 80
    goto ldv_51968;
  } else {

  }

#line 79
  return (1);
}
}
#line 104
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 104 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 85
  goto ldv_52025;
  ldv_52024: 
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 85
  dlen = (int )tmp___0;
#line 85
  switch (tag & 8191) {
  case 30: 
#line 85
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->rate = (int )tmp___1;
#line 85
  goto ldv_51983;
  case 31: 
#line 85
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->after = (int )tmp___2;
#line 85
  goto ldv_51983;
  case 32: 
#line 85
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->al_extents = (int )tmp___3;
#line 85
  goto ldv_51983;
  case 52: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->verify_alg_len = dlen;
#line 85
  __min1 = (size_t )dlen;
#line 85
  __min2 = 64UL;
#line 85
  __len = __min1 < __min2 ? __min1 : __min2;
#line 85
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 85
  goto ldv_51983;
  case 51: ;
#line 85
  if (dlen > 32) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->cpu_mask_len = dlen;
#line 85
  __min1___0 = (size_t )dlen;
#line 85
  __min2___0 = 32UL;
#line 85
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 85
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 85
  goto ldv_51983;
  case 64: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->csums_alg_len = dlen;
#line 85
  __min1___1 = (size_t )dlen;
#line 85
  __min2___1 = 64UL;
#line 85
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 85
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 85
  goto ldv_51983;
  case 65: 
#line 85
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 85
  goto ldv_51983;
  case 75: 
#line 85
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->on_no_data = (int )tmp___4;
#line 85
  goto ldv_51983;
  case 76: 
#line 85
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_plan_ahead = (int )tmp___5;
#line 85
  goto ldv_51983;
  case 77: 
#line 85
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_delay_target = (int )tmp___6;
#line 85
  goto ldv_51983;
  case 78: 
#line 85
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_fill_target = (int )tmp___7;
#line 85
  goto ldv_51983;
  case 79: 
#line 85
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_max_rate = (int )tmp___8;
#line 85
  goto ldv_51983;
  case 80: 
#line 85
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_min_rate = (int )tmp___9;
#line 85
  goto ldv_51983;
  default: ;
#line 85
  if ((tag & 8192) != 0) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 85
    return (0);
  } else {

  }
  }
  ldv_51983: 
#line 85
  tags = tags + (unsigned long )dlen;
  ldv_52025: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 85
  tag = (int )tmp___11;
#line 85
  if (tag != 0) {
#line 86
    goto ldv_52024;
  } else {

  }

#line 85
  return (1);
}
}
#line 149
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 146
  goto ldv_52325;
  ldv_52324: 
#line 146
  tmp = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 146
  dlen = (int )tmp___0;
#line 146
  switch (tag & 8191) {
  case 66: 
#line 146
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_52321;
  case 90: 
#line 146
  arg->stop_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_52321;
  default: ;
#line 146
  if ((tag & 8192) != 0) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 146
    return (0);
  } else {

  }
  }
  ldv_52321: 
#line 146
  tags = tags + (unsigned long )dlen;
  ldv_52325: 
#line 146
  tmp___1 = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 146
  tag = (int )tmp___2;
#line 146
  if (tag != 0) {
#line 147
    goto ldv_52324;
  } else {

  }

#line 146
  return (1);
}
}
#line 153
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 153 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 151
  goto ldv_52342;
  ldv_52341: 
#line 151
  tmp = tags;
#line 151
  tags = tags + 1;
#line 151
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 151
  dlen = (int )tmp___0;
#line 151
  switch (tag & 8191) {
  case 63: 
#line 151
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 151
  goto ldv_52339;
  default: ;
#line 151
  if ((tag & 8192) != 0) {
#line 151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 151
    return (0);
  } else {

  }
  }
  ldv_52339: 
#line 151
  tags = tags + (unsigned long )dlen;
  ldv_52342: 
#line 151
  tmp___1 = tags;
#line 151
  tags = tags + 1;
#line 151
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 151
  tag = (int )tmp___2;
#line 151
  if (tag != 0) {
#line 152
    goto ldv_52341;
  } else {

  }

#line 151
  return (1);
}
}
#line 35
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 35 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;
  void *__gu_p___28 ;
  unsigned short *tmp___23 ;
  void *__gu_p___29 ;
  unsigned short *tmp___24 ;
  void *__gu_p___30 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_52387;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_52387;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_52387;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_52387;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52387;
  }
  ldv_52387: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_52394;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_52394;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_52394;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_52394;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52394;
  }
  ldv_52394: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_52401;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_52401;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_52401;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_52401;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52401;
  }
  ldv_52401: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_52408;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_52408;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_52408;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_52408;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52408;
  }
  ldv_52408: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_52415;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_52415;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_52415;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_52415;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52415;
  }
  ldv_52415: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_52425;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_52425;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_52425;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_52425;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52425;
  }
  ldv_52425: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_52432;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_52432;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_52432;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_52432;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52432;
  }
  ldv_52432: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_52442;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_52442;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_52442;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_52442;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52442;
  }
  ldv_52442: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_52449;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_52449;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_52449;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_52449;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52449;
  }
  ldv_52449: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_52456;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_52456;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_52456;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_52456;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52456;
  }
  ldv_52456: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_52463;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_52463;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_52463;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_52463;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52463;
  }
  ldv_52463: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_52470;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_52470;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_52470;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_52470;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52470;
  }
  ldv_52470: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_52477;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_52477;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_52477;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_52477;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52477;
  }
  ldv_52477: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_52484;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_52484;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_52484;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_52484;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52484;
  }
  ldv_52484: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_52491;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_52491;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_52491;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_52491;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52491;
  }
  ldv_52491: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_52498;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_52498;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_52498;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_52498;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52498;
  }
  ldv_52498: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_52505;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_52505;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_52505;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_52505;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52505;
  }
  ldv_52505: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_52512;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_52512;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_52512;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_52512;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52512;
  }
  ldv_52512: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_52519;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_52519;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_52519;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_52519;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52519;
  }
  ldv_52519: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_52526;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_52526;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_52526;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_52526;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52526;
  }
  ldv_52526: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_52533;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_52533;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_52533;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_52533;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52533;
  }
  ldv_52533: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_52540;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_52540;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_52540;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_52540;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52540;
  }
  ldv_52540: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_52547;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_52547;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_52547;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_52547;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52547;
  }
  ldv_52547: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_52554;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_52554;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_52554;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_52554;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52554;
  }
  ldv_52554: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_52561;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_52561;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_52561;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_52561;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52561;
  }
  ldv_52561: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_52568;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_52568;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_52568;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_52568;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52568;
  }
  ldv_52568: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_52575;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_52575;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_52575;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_52575;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52575;
  }
  ldv_52575: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_52582;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_52582;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_52582;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_52582;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52582;
  }
  ldv_52582: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_52589;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_52589;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_52589;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_52589;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52589;
  }
  ldv_52589: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  tmp___23 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___28 = (void *)tmp___23;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___28) = 89U;
#line 20
  goto ldv_52596;
  case 2UL: 
#line 20
  put_unaligned_le16(89, __gu_p___28);
#line 20
  goto ldv_52596;
  case 4UL: 
#line 20
  put_unaligned_le32(89U, __gu_p___28);
#line 20
  goto ldv_52596;
  case 8UL: 
#line 20
  put_unaligned_le64(89ULL, __gu_p___28);
#line 20
  goto ldv_52596;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52596;
  }
  ldv_52596: 
#line 20
  tmp___24 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___29 = (void *)tmp___24;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___29) = 4U;
#line 20
  goto ldv_52603;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___29);
#line 20
  goto ldv_52603;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___29);
#line 20
  goto ldv_52603;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___29);
#line 20
  goto ldv_52603;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52603;
  }
  ldv_52603: 
#line 20
  __gu_p___30 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___30) = (unsigned char )arg->disk_timeout;
#line 20
  goto ldv_52610;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_timeout), __gu_p___30);
#line 20
  goto ldv_52610;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_52610;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_52610;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52610;
  }
  ldv_52610: 
#line 20
  tags = tags + 4U;
#line 20
  return (tags);
}
}
#line 73
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 73 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p = (void *)tmp;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p) = 8U;
#line 41
  goto ldv_52649;
  case 2UL: 
#line 41
  put_unaligned_le16(57352, __gu_p);
#line 41
  goto ldv_52649;
  case 4UL: 
#line 41
  put_unaligned_le32(57352U, __gu_p);
#line 41
  goto ldv_52649;
  case 8UL: 
#line 41
  put_unaligned_le64(57352ULL, __gu_p);
#line 41
  goto ldv_52649;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52649;
  }
  ldv_52649: 
#line 41
  tmp___0 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___0 = (void *)tmp___0;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 41
  goto ldv_52656;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 41
  goto ldv_52656;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_52656;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_52656;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52656;
  }
  ldv_52656: 
#line 41
  __len = (size_t )arg->my_addr_len;
#line 41
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 41
  tags = tags + (unsigned long )arg->my_addr_len;
#line 41
  tmp___1 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___1 = (void *)tmp___1;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___1) = 9U;
#line 41
  goto ldv_52666;
  case 2UL: 
#line 41
  put_unaligned_le16(57353, __gu_p___1);
#line 41
  goto ldv_52666;
  case 4UL: 
#line 41
  put_unaligned_le32(57353U, __gu_p___1);
#line 41
  goto ldv_52666;
  case 8UL: 
#line 41
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 41
  goto ldv_52666;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52666;
  }
  ldv_52666: 
#line 41
  tmp___2 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___2 = (void *)tmp___2;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 41
  goto ldv_52673;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 41
  goto ldv_52673;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_52673;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_52673;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52673;
  }
  ldv_52673: 
#line 41
  __len___0 = (size_t )arg->peer_addr_len;
#line 41
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 41
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 41
  tmp___3 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___3 = (void *)tmp___3;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___3) = 10U;
#line 41
  goto ldv_52683;
  case 2UL: 
#line 41
  put_unaligned_le16(49162, __gu_p___3);
#line 41
  goto ldv_52683;
  case 4UL: 
#line 41
  put_unaligned_le32(49162U, __gu_p___3);
#line 41
  goto ldv_52683;
  case 8UL: 
#line 41
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 41
  goto ldv_52683;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52683;
  }
  ldv_52683: 
#line 41
  tmp___4 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___4 = (void *)tmp___4;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 41
  goto ldv_52690;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 41
  goto ldv_52690;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_52690;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_52690;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52690;
  }
  ldv_52690: 
#line 41
  __len___1 = (size_t )arg->shared_secret_len;
#line 41
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 41
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 41
  tmp___5 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___5 = (void *)tmp___5;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___5) = 11U;
#line 41
  goto ldv_52700;
  case 2UL: 
#line 41
  put_unaligned_le16(49163, __gu_p___5);
#line 41
  goto ldv_52700;
  case 4UL: 
#line 41
  put_unaligned_le32(49163U, __gu_p___5);
#line 41
  goto ldv_52700;
  case 8UL: 
#line 41
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 41
  goto ldv_52700;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52700;
  }
  ldv_52700: 
#line 41
  tmp___6 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___6 = (void *)tmp___6;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 41
  goto ldv_52707;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 41
  goto ldv_52707;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_52707;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_52707;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52707;
  }
  ldv_52707: 
#line 41
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 41
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 41
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 41
  tmp___7 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___7 = (void *)tmp___7;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___7) = 44U;
#line 41
  goto ldv_52717;
  case 2UL: 
#line 41
  put_unaligned_le16(49196, __gu_p___7);
#line 41
  goto ldv_52717;
  case 4UL: 
#line 41
  put_unaligned_le32(49196U, __gu_p___7);
#line 41
  goto ldv_52717;
  case 8UL: 
#line 41
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 41
  goto ldv_52717;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52717;
  }
  ldv_52717: 
#line 41
  tmp___8 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___8 = (void *)tmp___8;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 41
  goto ldv_52724;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 41
  goto ldv_52724;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_52724;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_52724;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52724;
  }
  ldv_52724: 
#line 41
  __len___3 = (size_t )arg->integrity_alg_len;
#line 41
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 41
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 41
  tmp___9 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___9 = (void *)tmp___9;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___9) = 14U;
#line 41
  goto ldv_52734;
  case 2UL: 
#line 41
  put_unaligned_le16(14, __gu_p___9);
#line 41
  goto ldv_52734;
  case 4UL: 
#line 41
  put_unaligned_le32(14U, __gu_p___9);
#line 41
  goto ldv_52734;
  case 8UL: 
#line 41
  put_unaligned_le64(14ULL, __gu_p___9);
#line 41
  goto ldv_52734;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52734;
  }
  ldv_52734: 
#line 41
  tmp___10 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___10 = (void *)tmp___10;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___10) = 4U;
#line 41
  goto ldv_52741;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___10);
#line 41
  goto ldv_52741;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___10);
#line 41
  goto ldv_52741;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___10);
#line 41
  goto ldv_52741;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52741;
  }
  ldv_52741: 
#line 41
  __gu_p___11 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 41
  goto ldv_52748;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 41
  goto ldv_52748;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 41
  goto ldv_52748;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 41
  goto ldv_52748;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52748;
  }
  ldv_52748: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___11 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___12 = (void *)tmp___11;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___12) = 15U;
#line 41
  goto ldv_52755;
  case 2UL: 
#line 41
  put_unaligned_le16(8207, __gu_p___12);
#line 41
  goto ldv_52755;
  case 4UL: 
#line 41
  put_unaligned_le32(8207U, __gu_p___12);
#line 41
  goto ldv_52755;
  case 8UL: 
#line 41
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 41
  goto ldv_52755;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52755;
  }
  ldv_52755: 
#line 41
  tmp___12 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___13 = (void *)tmp___12;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___13) = 4U;
#line 41
  goto ldv_52762;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___13);
#line 41
  goto ldv_52762;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___13);
#line 41
  goto ldv_52762;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___13);
#line 41
  goto ldv_52762;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52762;
  }
  ldv_52762: 
#line 41
  __gu_p___14 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 41
  goto ldv_52769;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 41
  goto ldv_52769;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_52769;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_52769;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52769;
  }
  ldv_52769: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___13 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___15 = (void *)tmp___13;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___15) = 16U;
#line 41
  goto ldv_52776;
  case 2UL: 
#line 41
  put_unaligned_le16(16, __gu_p___15);
#line 41
  goto ldv_52776;
  case 4UL: 
#line 41
  put_unaligned_le32(16U, __gu_p___15);
#line 41
  goto ldv_52776;
  case 8UL: 
#line 41
  put_unaligned_le64(16ULL, __gu_p___15);
#line 41
  goto ldv_52776;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52776;
  }
  ldv_52776: 
#line 41
  tmp___14 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___16 = (void *)tmp___14;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___16) = 4U;
#line 41
  goto ldv_52783;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___16);
#line 41
  goto ldv_52783;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___16);
#line 41
  goto ldv_52783;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___16);
#line 41
  goto ldv_52783;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52783;
  }
  ldv_52783: 
#line 41
  __gu_p___17 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 41
  goto ldv_52790;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 41
  goto ldv_52790;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_52790;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_52790;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52790;
  }
  ldv_52790: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___15 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___18 = (void *)tmp___15;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___18) = 17U;
#line 41
  goto ldv_52797;
  case 2UL: 
#line 41
  put_unaligned_le16(17, __gu_p___18);
#line 41
  goto ldv_52797;
  case 4UL: 
#line 41
  put_unaligned_le32(17U, __gu_p___18);
#line 41
  goto ldv_52797;
  case 8UL: 
#line 41
  put_unaligned_le64(17ULL, __gu_p___18);
#line 41
  goto ldv_52797;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52797;
  }
  ldv_52797: 
#line 41
  tmp___16 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___19 = (void *)tmp___16;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___19) = 4U;
#line 41
  goto ldv_52804;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___19);
#line 41
  goto ldv_52804;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___19);
#line 41
  goto ldv_52804;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___19);
#line 41
  goto ldv_52804;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52804;
  }
  ldv_52804: 
#line 41
  __gu_p___20 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 41
  goto ldv_52811;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 41
  goto ldv_52811;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_52811;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_52811;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52811;
  }
  ldv_52811: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___17 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___21 = (void *)tmp___17;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___21) = 18U;
#line 41
  goto ldv_52818;
  case 2UL: 
#line 41
  put_unaligned_le16(18, __gu_p___21);
#line 41
  goto ldv_52818;
  case 4UL: 
#line 41
  put_unaligned_le32(18U, __gu_p___21);
#line 41
  goto ldv_52818;
  case 8UL: 
#line 41
  put_unaligned_le64(18ULL, __gu_p___21);
#line 41
  goto ldv_52818;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52818;
  }
  ldv_52818: 
#line 41
  tmp___18 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___22 = (void *)tmp___18;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___22) = 4U;
#line 41
  goto ldv_52825;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___22);
#line 41
  goto ldv_52825;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___22);
#line 41
  goto ldv_52825;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___22);
#line 41
  goto ldv_52825;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52825;
  }
  ldv_52825: 
#line 41
  __gu_p___23 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 41
  goto ldv_52832;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 41
  goto ldv_52832;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_52832;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_52832;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52832;
  }
  ldv_52832: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___24 = (void *)tmp___19;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___24) = 19U;
#line 41
  goto ldv_52839;
  case 2UL: 
#line 41
  put_unaligned_le16(19, __gu_p___24);
#line 41
  goto ldv_52839;
  case 4UL: 
#line 41
  put_unaligned_le32(19U, __gu_p___24);
#line 41
  goto ldv_52839;
  case 8UL: 
#line 41
  put_unaligned_le64(19ULL, __gu_p___24);
#line 41
  goto ldv_52839;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52839;
  }
  ldv_52839: 
#line 41
  tmp___20 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___25 = (void *)tmp___20;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___25) = 4U;
#line 41
  goto ldv_52846;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___25);
#line 41
  goto ldv_52846;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___25);
#line 41
  goto ldv_52846;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___25);
#line 41
  goto ldv_52846;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52846;
  }
  ldv_52846: 
#line 41
  __gu_p___26 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 41
  goto ldv_52853;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 41
  goto ldv_52853;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_52853;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_52853;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52853;
  }
  ldv_52853: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___21 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___27 = (void *)tmp___21;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___27) = 20U;
#line 41
  goto ldv_52860;
  case 2UL: 
#line 41
  put_unaligned_le16(20, __gu_p___27);
#line 41
  goto ldv_52860;
  case 4UL: 
#line 41
  put_unaligned_le32(20U, __gu_p___27);
#line 41
  goto ldv_52860;
  case 8UL: 
#line 41
  put_unaligned_le64(20ULL, __gu_p___27);
#line 41
  goto ldv_52860;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52860;
  }
  ldv_52860: 
#line 41
  tmp___22 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___28 = (void *)tmp___22;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___28) = 4U;
#line 41
  goto ldv_52867;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___28);
#line 41
  goto ldv_52867;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___28);
#line 41
  goto ldv_52867;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___28);
#line 41
  goto ldv_52867;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52867;
  }
  ldv_52867: 
#line 41
  __gu_p___29 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 41
  goto ldv_52874;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 41
  goto ldv_52874;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_52874;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_52874;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52874;
  }
  ldv_52874: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___23 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___30 = (void *)tmp___23;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___30) = 21U;
#line 41
  goto ldv_52881;
  case 2UL: 
#line 41
  put_unaligned_le16(21, __gu_p___30);
#line 41
  goto ldv_52881;
  case 4UL: 
#line 41
  put_unaligned_le32(21U, __gu_p___30);
#line 41
  goto ldv_52881;
  case 8UL: 
#line 41
  put_unaligned_le64(21ULL, __gu_p___30);
#line 41
  goto ldv_52881;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52881;
  }
  ldv_52881: 
#line 41
  tmp___24 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___31 = (void *)tmp___24;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___31) = 4U;
#line 41
  goto ldv_52888;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___31);
#line 41
  goto ldv_52888;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___31);
#line 41
  goto ldv_52888;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___31);
#line 41
  goto ldv_52888;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52888;
  }
  ldv_52888: 
#line 41
  __gu_p___32 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 41
  goto ldv_52895;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 41
  goto ldv_52895;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_52895;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_52895;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52895;
  }
  ldv_52895: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___25 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___33 = (void *)tmp___25;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___33) = 22U;
#line 41
  goto ldv_52902;
  case 2UL: 
#line 41
  put_unaligned_le16(22, __gu_p___33);
#line 41
  goto ldv_52902;
  case 4UL: 
#line 41
  put_unaligned_le32(22U, __gu_p___33);
#line 41
  goto ldv_52902;
  case 8UL: 
#line 41
  put_unaligned_le64(22ULL, __gu_p___33);
#line 41
  goto ldv_52902;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52902;
  }
  ldv_52902: 
#line 41
  tmp___26 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___34 = (void *)tmp___26;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___34) = 4U;
#line 41
  goto ldv_52909;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___34);
#line 41
  goto ldv_52909;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___34);
#line 41
  goto ldv_52909;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___34);
#line 41
  goto ldv_52909;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52909;
  }
  ldv_52909: 
#line 41
  __gu_p___35 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 41
  goto ldv_52916;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 41
  goto ldv_52916;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_52916;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_52916;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52916;
  }
  ldv_52916: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___27 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___36 = (void *)tmp___27;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___36) = 24U;
#line 41
  goto ldv_52923;
  case 2UL: 
#line 41
  put_unaligned_le16(24, __gu_p___36);
#line 41
  goto ldv_52923;
  case 4UL: 
#line 41
  put_unaligned_le32(24U, __gu_p___36);
#line 41
  goto ldv_52923;
  case 8UL: 
#line 41
  put_unaligned_le64(24ULL, __gu_p___36);
#line 41
  goto ldv_52923;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52923;
  }
  ldv_52923: 
#line 41
  tmp___28 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___37 = (void *)tmp___28;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___37) = 4U;
#line 41
  goto ldv_52930;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___37);
#line 41
  goto ldv_52930;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___37);
#line 41
  goto ldv_52930;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___37);
#line 41
  goto ldv_52930;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52930;
  }
  ldv_52930: 
#line 41
  __gu_p___38 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 41
  goto ldv_52937;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 41
  goto ldv_52937;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_52937;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_52937;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52937;
  }
  ldv_52937: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___29 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___39 = (void *)tmp___29;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___39) = 25U;
#line 41
  goto ldv_52944;
  case 2UL: 
#line 41
  put_unaligned_le16(25, __gu_p___39);
#line 41
  goto ldv_52944;
  case 4UL: 
#line 41
  put_unaligned_le32(25U, __gu_p___39);
#line 41
  goto ldv_52944;
  case 8UL: 
#line 41
  put_unaligned_le64(25ULL, __gu_p___39);
#line 41
  goto ldv_52944;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52944;
  }
  ldv_52944: 
#line 41
  tmp___30 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___40 = (void *)tmp___30;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___40) = 4U;
#line 41
  goto ldv_52951;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___40);
#line 41
  goto ldv_52951;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___40);
#line 41
  goto ldv_52951;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___40);
#line 41
  goto ldv_52951;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52951;
  }
  ldv_52951: 
#line 41
  __gu_p___41 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 41
  goto ldv_52958;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 41
  goto ldv_52958;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_52958;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_52958;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52958;
  }
  ldv_52958: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___31 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___42 = (void *)tmp___31;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___42) = 26U;
#line 41
  goto ldv_52965;
  case 2UL: 
#line 41
  put_unaligned_le16(26, __gu_p___42);
#line 41
  goto ldv_52965;
  case 4UL: 
#line 41
  put_unaligned_le32(26U, __gu_p___42);
#line 41
  goto ldv_52965;
  case 8UL: 
#line 41
  put_unaligned_le64(26ULL, __gu_p___42);
#line 41
  goto ldv_52965;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52965;
  }
  ldv_52965: 
#line 41
  tmp___32 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___43 = (void *)tmp___32;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___43) = 4U;
#line 41
  goto ldv_52972;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___43);
#line 41
  goto ldv_52972;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___43);
#line 41
  goto ldv_52972;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___43);
#line 41
  goto ldv_52972;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52972;
  }
  ldv_52972: 
#line 41
  __gu_p___44 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 41
  goto ldv_52979;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 41
  goto ldv_52979;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_52979;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_52979;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52979;
  }
  ldv_52979: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___33 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___45 = (void *)tmp___33;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___45) = 39U;
#line 41
  goto ldv_52986;
  case 2UL: 
#line 41
  put_unaligned_le16(39, __gu_p___45);
#line 41
  goto ldv_52986;
  case 4UL: 
#line 41
  put_unaligned_le32(39U, __gu_p___45);
#line 41
  goto ldv_52986;
  case 8UL: 
#line 41
  put_unaligned_le64(39ULL, __gu_p___45);
#line 41
  goto ldv_52986;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52986;
  }
  ldv_52986: 
#line 41
  tmp___34 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___46 = (void *)tmp___34;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___46) = 4U;
#line 41
  goto ldv_52993;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___46);
#line 41
  goto ldv_52993;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___46);
#line 41
  goto ldv_52993;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___46);
#line 41
  goto ldv_52993;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52993;
  }
  ldv_52993: 
#line 41
  __gu_p___47 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 41
  goto ldv_53000;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 41
  goto ldv_53000;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_53000;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_53000;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53000;
  }
  ldv_53000: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___35 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___48 = (void *)tmp___35;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___48) = 40U;
#line 41
  goto ldv_53007;
  case 2UL: 
#line 41
  put_unaligned_le16(40, __gu_p___48);
#line 41
  goto ldv_53007;
  case 4UL: 
#line 41
  put_unaligned_le32(40U, __gu_p___48);
#line 41
  goto ldv_53007;
  case 8UL: 
#line 41
  put_unaligned_le64(40ULL, __gu_p___48);
#line 41
  goto ldv_53007;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53007;
  }
  ldv_53007: 
#line 41
  tmp___36 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___49 = (void *)tmp___36;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___49) = 4U;
#line 41
  goto ldv_53014;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___49);
#line 41
  goto ldv_53014;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___49);
#line 41
  goto ldv_53014;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___49);
#line 41
  goto ldv_53014;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53014;
  }
  ldv_53014: 
#line 41
  __gu_p___50 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 41
  goto ldv_53021;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 41
  goto ldv_53021;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_53021;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_53021;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53021;
  }
  ldv_53021: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___37 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___51 = (void *)tmp___37;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___51) = 67U;
#line 41
  goto ldv_53028;
  case 2UL: 
#line 41
  put_unaligned_le16(67, __gu_p___51);
#line 41
  goto ldv_53028;
  case 4UL: 
#line 41
  put_unaligned_le32(67U, __gu_p___51);
#line 41
  goto ldv_53028;
  case 8UL: 
#line 41
  put_unaligned_le64(67ULL, __gu_p___51);
#line 41
  goto ldv_53028;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53028;
  }
  ldv_53028: 
#line 41
  tmp___38 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___52 = (void *)tmp___38;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___52) = 4U;
#line 41
  goto ldv_53035;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___52);
#line 41
  goto ldv_53035;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___52);
#line 41
  goto ldv_53035;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___52);
#line 41
  goto ldv_53035;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53035;
  }
  ldv_53035: 
#line 41
  __gu_p___53 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 41
  goto ldv_53042;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 41
  goto ldv_53042;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_53042;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_53042;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53042;
  }
  ldv_53042: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___39 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___54 = (void *)tmp___39;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___54) = 81U;
#line 41
  goto ldv_53049;
  case 2UL: 
#line 41
  put_unaligned_le16(81, __gu_p___54);
#line 41
  goto ldv_53049;
  case 4UL: 
#line 41
  put_unaligned_le32(81U, __gu_p___54);
#line 41
  goto ldv_53049;
  case 8UL: 
#line 41
  put_unaligned_le64(81ULL, __gu_p___54);
#line 41
  goto ldv_53049;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53049;
  }
  ldv_53049: 
#line 41
  tmp___40 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___55 = (void *)tmp___40;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___55) = 4U;
#line 41
  goto ldv_53056;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___55);
#line 41
  goto ldv_53056;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___55);
#line 41
  goto ldv_53056;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___55);
#line 41
  goto ldv_53056;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53056;
  }
  ldv_53056: 
#line 41
  __gu_p___56 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 41
  goto ldv_53063;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 41
  goto ldv_53063;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_53063;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_53063;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53063;
  }
  ldv_53063: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___41 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___57 = (void *)tmp___41;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___57) = 82U;
#line 41
  goto ldv_53070;
  case 2UL: 
#line 41
  put_unaligned_le16(82, __gu_p___57);
#line 41
  goto ldv_53070;
  case 4UL: 
#line 41
  put_unaligned_le32(82U, __gu_p___57);
#line 41
  goto ldv_53070;
  case 8UL: 
#line 41
  put_unaligned_le64(82ULL, __gu_p___57);
#line 41
  goto ldv_53070;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53070;
  }
  ldv_53070: 
#line 41
  tmp___42 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___58 = (void *)tmp___42;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___58) = 4U;
#line 41
  goto ldv_53077;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___58);
#line 41
  goto ldv_53077;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___58);
#line 41
  goto ldv_53077;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___58);
#line 41
  goto ldv_53077;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53077;
  }
  ldv_53077: 
#line 41
  __gu_p___59 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 41
  goto ldv_53084;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 41
  goto ldv_53084;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_53084;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_53084;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53084;
  }
  ldv_53084: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___43 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___60 = (void *)tmp___43;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___60) = 83U;
#line 41
  goto ldv_53091;
  case 2UL: 
#line 41
  put_unaligned_le16(83, __gu_p___60);
#line 41
  goto ldv_53091;
  case 4UL: 
#line 41
  put_unaligned_le32(83U, __gu_p___60);
#line 41
  goto ldv_53091;
  case 8UL: 
#line 41
  put_unaligned_le64(83ULL, __gu_p___60);
#line 41
  goto ldv_53091;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53091;
  }
  ldv_53091: 
#line 41
  tmp___44 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___61 = (void *)tmp___44;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___61) = 4U;
#line 41
  goto ldv_53098;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___61);
#line 41
  goto ldv_53098;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___61);
#line 41
  goto ldv_53098;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___61);
#line 41
  goto ldv_53098;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53098;
  }
  ldv_53098: 
#line 41
  __gu_p___62 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 41
  goto ldv_53105;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 41
  goto ldv_53105;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_53105;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_53105;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53105;
  }
  ldv_53105: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___45 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___63 = (void *)tmp___45;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___63) = 60U;
#line 41
  goto ldv_53112;
  case 2UL: 
#line 41
  put_unaligned_le16(41020, __gu_p___63);
#line 41
  goto ldv_53112;
  case 4UL: 
#line 41
  put_unaligned_le32(41020U, __gu_p___63);
#line 41
  goto ldv_53112;
  case 8UL: 
#line 41
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 41
  goto ldv_53112;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53112;
  }
  ldv_53112: 
#line 41
  tmp___46 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___64 = (void *)tmp___46;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___64) = 1U;
#line 41
  goto ldv_53119;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___64);
#line 41
  goto ldv_53119;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___64);
#line 41
  goto ldv_53119;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___64);
#line 41
  goto ldv_53119;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53119;
  }
  ldv_53119: 
#line 41
  *((char *)tags) = (char )arg->mind_af;
#line 41
  tags = tags + 1U;
#line 41
  tmp___47 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___65 = (void *)tmp___47;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___65) = 27U;
#line 41
  goto ldv_53126;
  case 2UL: 
#line 41
  put_unaligned_le16(32795, __gu_p___65);
#line 41
  goto ldv_53126;
  case 4UL: 
#line 41
  put_unaligned_le32(32795U, __gu_p___65);
#line 41
  goto ldv_53126;
  case 8UL: 
#line 41
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 41
  goto ldv_53126;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53126;
  }
  ldv_53126: 
#line 41
  tmp___48 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___66 = (void *)tmp___48;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___66) = 1U;
#line 41
  goto ldv_53133;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___66);
#line 41
  goto ldv_53133;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___66);
#line 41
  goto ldv_53133;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___66);
#line 41
  goto ldv_53133;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53133;
  }
  ldv_53133: 
#line 41
  *((char *)tags) = (char )arg->want_lose;
#line 41
  tags = tags + 1U;
#line 41
  tmp___49 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___67 = (void *)tmp___49;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___67) = 28U;
#line 41
  goto ldv_53140;
  case 2UL: 
#line 41
  put_unaligned_le16(32796, __gu_p___67);
#line 41
  goto ldv_53140;
  case 4UL: 
#line 41
  put_unaligned_le32(32796U, __gu_p___67);
#line 41
  goto ldv_53140;
  case 8UL: 
#line 41
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 41
  goto ldv_53140;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53140;
  }
  ldv_53140: 
#line 41
  tmp___50 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___68 = (void *)tmp___50;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___68) = 1U;
#line 41
  goto ldv_53147;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___68);
#line 41
  goto ldv_53147;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___68);
#line 41
  goto ldv_53147;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___68);
#line 41
  goto ldv_53147;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53147;
  }
  ldv_53147: 
#line 41
  *((char *)tags) = (char )arg->two_primaries;
#line 41
  tags = tags + 1U;
#line 41
  tmp___51 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___69 = (void *)tmp___51;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___69) = 41U;
#line 41
  goto ldv_53154;
  case 2UL: 
#line 41
  put_unaligned_le16(32809, __gu_p___69);
#line 41
  goto ldv_53154;
  case 4UL: 
#line 41
  put_unaligned_le32(32809U, __gu_p___69);
#line 41
  goto ldv_53154;
  case 8UL: 
#line 41
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 41
  goto ldv_53154;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53154;
  }
  ldv_53154: 
#line 41
  tmp___52 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___70 = (void *)tmp___52;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___70) = 1U;
#line 41
  goto ldv_53161;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___70);
#line 41
  goto ldv_53161;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___70);
#line 41
  goto ldv_53161;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___70);
#line 41
  goto ldv_53161;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53161;
  }
  ldv_53161: 
#line 41
  *((char *)tags) = (char )arg->always_asbp;
#line 41
  tags = tags + 1U;
#line 41
  tmp___53 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___71 = (void *)tmp___53;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___71) = 61U;
#line 41
  goto ldv_53168;
  case 2UL: 
#line 41
  put_unaligned_le16(32829, __gu_p___71);
#line 41
  goto ldv_53168;
  case 4UL: 
#line 41
  put_unaligned_le32(32829U, __gu_p___71);
#line 41
  goto ldv_53168;
  case 8UL: 
#line 41
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 41
  goto ldv_53168;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53168;
  }
  ldv_53168: 
#line 41
  tmp___54 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___72 = (void *)tmp___54;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___72) = 1U;
#line 41
  goto ldv_53175;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___72);
#line 41
  goto ldv_53175;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___72);
#line 41
  goto ldv_53175;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___72);
#line 41
  goto ldv_53175;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53175;
  }
  ldv_53175: 
#line 41
  *((char *)tags) = (char )arg->no_cork;
#line 41
  tags = tags + 1U;
#line 41
  tmp___55 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___73 = (void *)tmp___55;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___73) = 62U;
#line 41
  goto ldv_53182;
  case 2UL: 
#line 41
  put_unaligned_le16(41022, __gu_p___73);
#line 41
  goto ldv_53182;
  case 4UL: 
#line 41
  put_unaligned_le32(41022U, __gu_p___73);
#line 41
  goto ldv_53182;
  case 8UL: 
#line 41
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 41
  goto ldv_53182;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53182;
  }
  ldv_53182: 
#line 41
  tmp___56 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___74 = (void *)tmp___56;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___74) = 1U;
#line 41
  goto ldv_53189;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___74);
#line 41
  goto ldv_53189;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___74);
#line 41
  goto ldv_53189;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___74);
#line 41
  goto ldv_53189;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53189;
  }
  ldv_53189: 
#line 41
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 41
  tags = tags + 1U;
#line 41
  tmp___57 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___75 = (void *)tmp___57;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___75) = 70U;
#line 41
  goto ldv_53196;
  case 2UL: 
#line 41
  put_unaligned_le16(41030, __gu_p___75);
#line 41
  goto ldv_53196;
  case 4UL: 
#line 41
  put_unaligned_le32(41030U, __gu_p___75);
#line 41
  goto ldv_53196;
  case 8UL: 
#line 41
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 41
  goto ldv_53196;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53196;
  }
  ldv_53196: 
#line 41
  tmp___58 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___76 = (void *)tmp___58;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___76) = 1U;
#line 41
  goto ldv_53203;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___76);
#line 41
  goto ldv_53203;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___76);
#line 41
  goto ldv_53203;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___76);
#line 41
  goto ldv_53203;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53203;
  }
  ldv_53203: 
#line 41
  *((char *)tags) = (char )arg->dry_run;
#line 41
  tags = tags + 1U;
#line 41
  return (tags);
}
}
#line 104
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 104 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p = (void *)tmp;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p) = 30U;
#line 85
  goto ldv_53300;
  case 2UL: 
#line 85
  put_unaligned_le16(30, __gu_p);
#line 85
  goto ldv_53300;
  case 4UL: 
#line 85
  put_unaligned_le32(30U, __gu_p);
#line 85
  goto ldv_53300;
  case 8UL: 
#line 85
  put_unaligned_le64(30ULL, __gu_p);
#line 85
  goto ldv_53300;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53300;
  }
  ldv_53300: 
#line 85
  tmp___0 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___0 = (void *)tmp___0;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___0) = 4U;
#line 85
  goto ldv_53307;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___0);
#line 85
  goto ldv_53307;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___0);
#line 85
  goto ldv_53307;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___0);
#line 85
  goto ldv_53307;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53307;
  }
  ldv_53307: 
#line 85
  __gu_p___1 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 85
  goto ldv_53314;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 85
  goto ldv_53314;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 85
  goto ldv_53314;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 85
  goto ldv_53314;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53314;
  }
  ldv_53314: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___1 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___2 = (void *)tmp___1;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___2) = 31U;
#line 85
  goto ldv_53321;
  case 2UL: 
#line 85
  put_unaligned_le16(31, __gu_p___2);
#line 85
  goto ldv_53321;
  case 4UL: 
#line 85
  put_unaligned_le32(31U, __gu_p___2);
#line 85
  goto ldv_53321;
  case 8UL: 
#line 85
  put_unaligned_le64(31ULL, __gu_p___2);
#line 85
  goto ldv_53321;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53321;
  }
  ldv_53321: 
#line 85
  tmp___2 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___3 = (void *)tmp___2;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___3) = 4U;
#line 85
  goto ldv_53328;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___3);
#line 85
  goto ldv_53328;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___3);
#line 85
  goto ldv_53328;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___3);
#line 85
  goto ldv_53328;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53328;
  }
  ldv_53328: 
#line 85
  __gu_p___4 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 85
  goto ldv_53335;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 85
  goto ldv_53335;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 85
  goto ldv_53335;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 85
  goto ldv_53335;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53335;
  }
  ldv_53335: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___3 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___5 = (void *)tmp___3;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___5) = 32U;
#line 85
  goto ldv_53342;
  case 2UL: 
#line 85
  put_unaligned_le16(32, __gu_p___5);
#line 85
  goto ldv_53342;
  case 4UL: 
#line 85
  put_unaligned_le32(32U, __gu_p___5);
#line 85
  goto ldv_53342;
  case 8UL: 
#line 85
  put_unaligned_le64(32ULL, __gu_p___5);
#line 85
  goto ldv_53342;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53342;
  }
  ldv_53342: 
#line 85
  tmp___4 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___6 = (void *)tmp___4;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___6) = 4U;
#line 85
  goto ldv_53349;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___6);
#line 85
  goto ldv_53349;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___6);
#line 85
  goto ldv_53349;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___6);
#line 85
  goto ldv_53349;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53349;
  }
  ldv_53349: 
#line 85
  __gu_p___7 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 85
  goto ldv_53356;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 85
  goto ldv_53356;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_53356;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_53356;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53356;
  }
  ldv_53356: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___5 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___8 = (void *)tmp___5;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___8) = 52U;
#line 85
  goto ldv_53363;
  case 2UL: 
#line 85
  put_unaligned_le16(49204, __gu_p___8);
#line 85
  goto ldv_53363;
  case 4UL: 
#line 85
  put_unaligned_le32(49204U, __gu_p___8);
#line 85
  goto ldv_53363;
  case 8UL: 
#line 85
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 85
  goto ldv_53363;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53363;
  }
  ldv_53363: 
#line 85
  tmp___6 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___9 = (void *)tmp___6;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 85
  goto ldv_53370;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 85
  goto ldv_53370;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_53370;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_53370;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53370;
  }
  ldv_53370: 
#line 85
  __len = (size_t )arg->verify_alg_len;
#line 85
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 85
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 85
  tmp___7 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___10 = (void *)tmp___7;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___10) = 51U;
#line 85
  goto ldv_53380;
  case 2UL: 
#line 85
  put_unaligned_le16(49203, __gu_p___10);
#line 85
  goto ldv_53380;
  case 4UL: 
#line 85
  put_unaligned_le32(49203U, __gu_p___10);
#line 85
  goto ldv_53380;
  case 8UL: 
#line 85
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 85
  goto ldv_53380;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53380;
  }
  ldv_53380: 
#line 85
  tmp___8 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___11 = (void *)tmp___8;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 85
  goto ldv_53387;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 85
  goto ldv_53387;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_53387;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_53387;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53387;
  }
  ldv_53387: 
#line 85
  __len___0 = (size_t )arg->cpu_mask_len;
#line 85
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 85
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 85
  tmp___9 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___12 = (void *)tmp___9;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___12) = 64U;
#line 85
  goto ldv_53397;
  case 2UL: 
#line 85
  put_unaligned_le16(49216, __gu_p___12);
#line 85
  goto ldv_53397;
  case 4UL: 
#line 85
  put_unaligned_le32(49216U, __gu_p___12);
#line 85
  goto ldv_53397;
  case 8UL: 
#line 85
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 85
  goto ldv_53397;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53397;
  }
  ldv_53397: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___13 = (void *)tmp___10;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 85
  goto ldv_53404;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 85
  goto ldv_53404;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_53404;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_53404;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53404;
  }
  ldv_53404: 
#line 85
  __len___1 = (size_t )arg->csums_alg_len;
#line 85
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 85
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 85
  tmp___11 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___14 = (void *)tmp___11;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___14) = 65U;
#line 85
  goto ldv_53414;
  case 2UL: 
#line 85
  put_unaligned_le16(32833, __gu_p___14);
#line 85
  goto ldv_53414;
  case 4UL: 
#line 85
  put_unaligned_le32(32833U, __gu_p___14);
#line 85
  goto ldv_53414;
  case 8UL: 
#line 85
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 85
  goto ldv_53414;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53414;
  }
  ldv_53414: 
#line 85
  tmp___12 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___15 = (void *)tmp___12;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___15) = 1U;
#line 85
  goto ldv_53421;
  case 2UL: 
#line 85
  put_unaligned_le16(1, __gu_p___15);
#line 85
  goto ldv_53421;
  case 4UL: 
#line 85
  put_unaligned_le32(1U, __gu_p___15);
#line 85
  goto ldv_53421;
  case 8UL: 
#line 85
  put_unaligned_le64(1ULL, __gu_p___15);
#line 85
  goto ldv_53421;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53421;
  }
  ldv_53421: 
#line 85
  *((char *)tags) = (char )arg->use_rle;
#line 85
  tags = tags + 1U;
#line 85
  tmp___13 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___16 = (void *)tmp___13;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___16) = 75U;
#line 85
  goto ldv_53428;
  case 2UL: 
#line 85
  put_unaligned_le16(75, __gu_p___16);
#line 85
  goto ldv_53428;
  case 4UL: 
#line 85
  put_unaligned_le32(75U, __gu_p___16);
#line 85
  goto ldv_53428;
  case 8UL: 
#line 85
  put_unaligned_le64(75ULL, __gu_p___16);
#line 85
  goto ldv_53428;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53428;
  }
  ldv_53428: 
#line 85
  tmp___14 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___17 = (void *)tmp___14;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___17) = 4U;
#line 85
  goto ldv_53435;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___17);
#line 85
  goto ldv_53435;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___17);
#line 85
  goto ldv_53435;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___17);
#line 85
  goto ldv_53435;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53435;
  }
  ldv_53435: 
#line 85
  __gu_p___18 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 85
  goto ldv_53442;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 85
  goto ldv_53442;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_53442;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_53442;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53442;
  }
  ldv_53442: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___15 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___19 = (void *)tmp___15;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___19) = 76U;
#line 85
  goto ldv_53449;
  case 2UL: 
#line 85
  put_unaligned_le16(76, __gu_p___19);
#line 85
  goto ldv_53449;
  case 4UL: 
#line 85
  put_unaligned_le32(76U, __gu_p___19);
#line 85
  goto ldv_53449;
  case 8UL: 
#line 85
  put_unaligned_le64(76ULL, __gu_p___19);
#line 85
  goto ldv_53449;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53449;
  }
  ldv_53449: 
#line 85
  tmp___16 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___20 = (void *)tmp___16;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___20) = 4U;
#line 85
  goto ldv_53456;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___20);
#line 85
  goto ldv_53456;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___20);
#line 85
  goto ldv_53456;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___20);
#line 85
  goto ldv_53456;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53456;
  }
  ldv_53456: 
#line 85
  __gu_p___21 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 85
  goto ldv_53463;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 85
  goto ldv_53463;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_53463;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_53463;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53463;
  }
  ldv_53463: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___17 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___22 = (void *)tmp___17;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___22) = 77U;
#line 85
  goto ldv_53470;
  case 2UL: 
#line 85
  put_unaligned_le16(77, __gu_p___22);
#line 85
  goto ldv_53470;
  case 4UL: 
#line 85
  put_unaligned_le32(77U, __gu_p___22);
#line 85
  goto ldv_53470;
  case 8UL: 
#line 85
  put_unaligned_le64(77ULL, __gu_p___22);
#line 85
  goto ldv_53470;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53470;
  }
  ldv_53470: 
#line 85
  tmp___18 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___23 = (void *)tmp___18;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___23) = 4U;
#line 85
  goto ldv_53477;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___23);
#line 85
  goto ldv_53477;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___23);
#line 85
  goto ldv_53477;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___23);
#line 85
  goto ldv_53477;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53477;
  }
  ldv_53477: 
#line 85
  __gu_p___24 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 85
  goto ldv_53484;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 85
  goto ldv_53484;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_53484;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_53484;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53484;
  }
  ldv_53484: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___19 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___25 = (void *)tmp___19;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___25) = 78U;
#line 85
  goto ldv_53491;
  case 2UL: 
#line 85
  put_unaligned_le16(78, __gu_p___25);
#line 85
  goto ldv_53491;
  case 4UL: 
#line 85
  put_unaligned_le32(78U, __gu_p___25);
#line 85
  goto ldv_53491;
  case 8UL: 
#line 85
  put_unaligned_le64(78ULL, __gu_p___25);
#line 85
  goto ldv_53491;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53491;
  }
  ldv_53491: 
#line 85
  tmp___20 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___26 = (void *)tmp___20;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___26) = 4U;
#line 85
  goto ldv_53498;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___26);
#line 85
  goto ldv_53498;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___26);
#line 85
  goto ldv_53498;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___26);
#line 85
  goto ldv_53498;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53498;
  }
  ldv_53498: 
#line 85
  __gu_p___27 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 85
  goto ldv_53505;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 85
  goto ldv_53505;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_53505;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_53505;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53505;
  }
  ldv_53505: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___21 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___28 = (void *)tmp___21;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___28) = 79U;
#line 85
  goto ldv_53512;
  case 2UL: 
#line 85
  put_unaligned_le16(79, __gu_p___28);
#line 85
  goto ldv_53512;
  case 4UL: 
#line 85
  put_unaligned_le32(79U, __gu_p___28);
#line 85
  goto ldv_53512;
  case 8UL: 
#line 85
  put_unaligned_le64(79ULL, __gu_p___28);
#line 85
  goto ldv_53512;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53512;
  }
  ldv_53512: 
#line 85
  tmp___22 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___29 = (void *)tmp___22;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___29) = 4U;
#line 85
  goto ldv_53519;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___29);
#line 85
  goto ldv_53519;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___29);
#line 85
  goto ldv_53519;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___29);
#line 85
  goto ldv_53519;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53519;
  }
  ldv_53519: 
#line 85
  __gu_p___30 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 85
  goto ldv_53526;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 85
  goto ldv_53526;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_53526;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_53526;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53526;
  }
  ldv_53526: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___23 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___31 = (void *)tmp___23;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___31) = 80U;
#line 85
  goto ldv_53533;
  case 2UL: 
#line 85
  put_unaligned_le16(80, __gu_p___31);
#line 85
  goto ldv_53533;
  case 4UL: 
#line 85
  put_unaligned_le32(80U, __gu_p___31);
#line 85
  goto ldv_53533;
  case 8UL: 
#line 85
  put_unaligned_le64(80ULL, __gu_p___31);
#line 85
  goto ldv_53533;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53533;
  }
  ldv_53533: 
#line 85
  tmp___24 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___32 = (void *)tmp___24;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___32) = 4U;
#line 85
  goto ldv_53540;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___32);
#line 85
  goto ldv_53540;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___32);
#line 85
  goto ldv_53540;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___32);
#line 85
  goto ldv_53540;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53540;
  }
  ldv_53540: 
#line 85
  __gu_p___33 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 85
  goto ldv_53547;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 85
  goto ldv_53547;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_53547;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_53547;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53547;
  }
  ldv_53547: 
#line 85
  tags = tags + 4U;
#line 85
  return (tags);
}
}
#line 116
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 116 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 114
  tmp = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p = (void *)tmp;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p) = 33U;
#line 114
  goto ldv_53635;
  case 2UL: 
#line 114
  put_unaligned_le16(33, __gu_p);
#line 114
  goto ldv_53635;
  case 4UL: 
#line 114
  put_unaligned_le32(33U, __gu_p);
#line 114
  goto ldv_53635;
  case 8UL: 
#line 114
  put_unaligned_le64(33ULL, __gu_p);
#line 114
  goto ldv_53635;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53635;
  }
  ldv_53635: 
#line 114
  tmp___0 = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p___0 = (void *)tmp___0;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___0) = 4U;
#line 114
  goto ldv_53642;
  case 2UL: 
#line 114
  put_unaligned_le16(4, __gu_p___0);
#line 114
  goto ldv_53642;
  case 4UL: 
#line 114
  put_unaligned_le32(4U, __gu_p___0);
#line 114
  goto ldv_53642;
  case 8UL: 
#line 114
  put_unaligned_le64(4ULL, __gu_p___0);
#line 114
  goto ldv_53642;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53642;
  }
  ldv_53642: 
#line 114
  __gu_p___1 = (void *)tags;
#line 114
  switch (4UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 114
  goto ldv_53649;
  case 2UL: 
#line 114
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 114
  goto ldv_53649;
  case 4UL: 
#line 114
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 114
  goto ldv_53649;
  case 8UL: 
#line 114
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 114
  goto ldv_53649;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53649;
  }
  ldv_53649: 
#line 114
  tags = tags + 4U;
#line 114
  return (tags);
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 143
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  struct task_struct *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 147
  envp[0] = (char *)"HOME=/";
#line 147
  envp[1] = (char *)"TERM=linux";
#line 147
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 147
  envp[3] = 0;
#line 147
  envp[4] = 0;
#line 147
  envp[5] = 0;
#line 155
  argv[0] = (char *)(& usermode_helper);
#line 155
  argv[1] = cmd;
#line 155
  argv[2] = (char *)(& mb);
#line 155
  argv[3] = 0;
#line 158
  tmp = get_current();
#line 158
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 159
    set_bit(30U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 161
  tmp___0 = mdev_to_minor(mdev);
#line 161
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp___0);
#line 163
  tmp___1 = get_net_conf(mdev);
#line 163
  if (tmp___1 != 0) {
#line 164
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 166
    afs = (char *)"ipv6";
#line 167
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 169
    goto ldv_53991;
    case 2: 
#line 171
    afs = (char *)"ipv4";
#line 172
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 174
    goto ldv_53991;
    default: 
#line 176
    afs = (char *)"ssocks";
#line 177
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_53991: 
#line 180
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 181
    envp[3] = (char *)(& af);
#line 182
    envp[4] = (char *)(& ad);
#line 183
    put_net_conf(mdev);
  } else {

  }
#line 188
  drbd_md_sync(mdev);
#line 190
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 192
  drbd_bcast_ev_helper(mdev, cmd);
#line 193
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 194
  if (ret != 0) {
#line 195
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 199
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 203
  tmp___2 = get_current();
#line 203
  if ((unsigned long )tmp___2 == (unsigned long )mdev->worker.task) {
#line 204
    clear_bit(30, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 206
  if (ret < 0) {
#line 207
    ret = 0;
  } else {

  }
#line 209
  return (ret);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 219
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            219);
  } else {

  }
#line 221
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 221
  if (tmp != 0) {
#line 222
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 223
    put_ldev(mdev);
  } else {
#line 225
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 226
    nps = (enum drbd_disk_state )mdev->state.ldv_40583.pdsk;
#line 227
    goto out;
  }
#line 230
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 232
  switch ((r >> 8) & 255) {
  case 3: 
#line 234
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 235
  nps = D_INCONSISTENT;
#line 236
  goto ldv_54003;
  case 4: 
#line 238
  ex_to_string = (char *)"peer was fenced";
#line 239
  nps = D_OUTDATED;
#line 240
  goto ldv_54003;
  case 5: ;
#line 242
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 244
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 245
    nps = D_OUTDATED;
  } else {
#line 247
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 248
    nps = (enum drbd_disk_state )mdev->state.ldv_40583.pdsk;
  }
#line 250
  goto ldv_54003;
  case 6: 
#line 254
  ex_to_string = (char *)"peer is active";
#line 255
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 256
  nps = D_UNKNOWN;
#line 257
  val.i = 0U;
#line 257
  val.ldv_40583.disk = 5U;
#line 257
  mask.i = 0U;
#line 257
  mask.ldv_40583.disk = 15U;
#line 257
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 258
  goto ldv_54003;
  case 7: ;
#line 260
  if ((unsigned int )fp != 2U) {
#line 261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 262
  ex_to_string = (char *)"peer was stonithed";
#line 263
  nps = D_OUTDATED;
#line 264
  goto ldv_54003;
  default: 
#line 267
  nps = D_UNKNOWN;
#line 268
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 269
  return (nps);
  }
  ldv_54003: 
#line 272
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 276
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 279
    val___0.i = 0U;
#line 279
    val___0.ldv_40583.susp_fen = 0U;
#line 279
    mask___0.i = 0U;
#line 279
    mask___0.ldv_40583.susp_fen = 1U;
#line 279
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 282
  return (nps);
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;
  int tmp ;

  {
#line 287
  mdev = (struct drbd_conf *)data;
#line 291
  nps = drbd_try_outdate_peer(mdev);
#line 304
  spin_lock_irq(& mdev->req_lock);
#line 305
  ns = mdev->state;
#line 306
  if ((int )ns.ldv_40583.conn <= 8) {
#line 306
    tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 306
    if (tmp == 0) {
#line 307
      ns.ldv_40583.pdsk = (unsigned char )nps;
#line 308
      _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
    } else {

    }
  } else {

  }
#line 310
  spin_unlock_irq(& mdev->req_lock);
#line 312
  return (0);
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 319
  tmp = mdev_to_minor(mdev);
#line 319
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 319
  __k = tmp___0;
#line 319
  tmp___1 = IS_ERR((void const   *)__k);
#line 319
  if (tmp___1 == 0L) {
#line 319
    wake_up_process(__k);
  } else {

  }
#line 319
  opa = __k;
#line 320
  tmp___2 = IS_ERR((void const   *)opa);
#line 320
  if (tmp___2 != 0L) {
#line 321
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 322
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 327
  max_tries = 4;
#line 328
  rv = 0;
#line 329
  try = 0;
#line 330
  forced = 0;
#line 334
  if ((unsigned int )new_role == 1U) {
#line 335
    request_ping(mdev);
  } else {

  }
#line 337
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 339
  mask.i = 0U;
#line 339
  mask.ldv_40583.role = 3U;
#line 340
  val.i = 0U;
#line 340
  val.ldv_40583.role = (unsigned char )new_role;
#line 342
  goto ldv_54041;
  ldv_54044: 
#line 343
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 347
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 348
    val.ldv_40583.pdsk = 0U;
#line 349
    mask.ldv_40583.pdsk = 0U;
#line 350
    goto ldv_54041;
  } else {

  }
#line 353
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_40583.disk <= 7 && (int )mdev->state.ldv_40583.disk > 3)) {
#line 356
    mask.ldv_40583.disk = 15U;
#line 357
    val.ldv_40583.disk = 8U;
#line 358
    forced = 1;
#line 359
    goto ldv_54041;
  } else {

  }
#line 362
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 364
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 364
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              364);
    } else {

    }
#line 365
    nps = drbd_try_outdate_peer(mdev);
#line 367
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 368
      val.ldv_40583.disk = 8U;
#line 369
      mask.ldv_40583.disk = 15U;
    } else {

    }
#line 372
    val.ldv_40583.pdsk = (unsigned char )nps;
#line 373
    mask.ldv_40583.pdsk = 15U;
#line 375
    goto ldv_54041;
  } else {

  }
#line 378
  if ((int )rv == 2) {
#line 379
    goto fail;
  } else {

  }
#line 380
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 381
    nps = drbd_try_outdate_peer(mdev);
#line 383
    if (force != 0 && (unsigned int )nps > 5U) {
#line 384
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 385
      nps = D_OUTDATED;
    } else {

    }
#line 388
    mask.ldv_40583.pdsk = 15U;
#line 389
    val.ldv_40583.pdsk = (unsigned char )nps;
#line 391
    goto ldv_54041;
  } else {

  }
#line 393
  if ((int )rv == -1) {
#line 396
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 397
    if (try < max_tries) {
#line 398
      try = max_tries + -1;
    } else {

    }
#line 399
    goto ldv_54041;
  } else {

  }
#line 401
  if ((int )rv <= 0) {
#line 402
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 404
    if ((int )rv <= 0) {
#line 405
      goto fail;
    } else {

    }
  } else {

  }
#line 407
  goto ldv_54043;
  ldv_54041: 
#line 342
  tmp = try;
#line 342
  try = try + 1;
#line 342
  if (tmp < max_tries) {
#line 343
    goto ldv_54044;
  } else {

  }
  ldv_54043: ;
#line 410
  if ((int )rv <= 0) {
#line 411
    goto fail;
  } else {

  }
#line 413
  if (forced != 0) {
#line 414
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 417
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 417
  if (tmp___0 == 0) {
#line 417
    goto ldv_54045;
  } else {

  }
#line 417
  tmp___1 = get_current();
#line 417
  __wait.flags = 0U;
#line 417
  __wait.private = (void *)tmp___1;
#line 417
  __wait.func = & autoremove_wake_function;
#line 417
  __wait.task_list.next = & __wait.task_list;
#line 417
  __wait.task_list.prev = & __wait.task_list;
  ldv_54048: 
#line 417
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 417
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 417
  if (tmp___2 == 0) {
#line 417
    goto ldv_54047;
  } else {

  }
#line 417
  schedule();
#line 417
  goto ldv_54048;
  ldv_54047: 
#line 417
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54045: ;
#line 419
  if ((unsigned int )new_role == 2U) {
#line 420
    set_disk_ro(mdev->vdisk, 1);
#line 421
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 421
    if (tmp___3 != 0) {
#line 422
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 423
      put_ldev(mdev);
    } else {

    }
  } else {
#line 426
    tmp___4 = get_net_conf(mdev);
#line 426
    if (tmp___4 != 0) {
#line 427
      (mdev->net_conf)->want_lose = 0U;
#line 428
      put_net_conf(mdev);
    } else {

    }
#line 430
    set_disk_ro(mdev->vdisk, 0);
#line 431
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 431
    if (tmp___5 != 0) {
#line 432
      if ((((int )mdev->state.ldv_40583.conn <= 9 || (int )mdev->state.ldv_40583.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 435
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 437
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 438
      put_ldev(mdev);
    } else {

    }
  }
#line 445
  if ((int )mdev->state.ldv_40583.conn > 8) {
#line 447
    if (forced != 0) {
#line 448
      drbd_send_uuids(mdev);
    } else {

    }
#line 449
    drbd_send_current_state(mdev);
  } else {

  }
#line 452
  drbd_md_sync(mdev);
#line 454
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 456
  mutex_unlock(& mdev->state_mutex);
#line 457
  return (rv);
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 464
  if ((unsigned int )minor >= minor_count) {
#line 465
    return (0);
  } else {

  }
#line 467
  mdev = minor_to_mdev((unsigned int )minor);
#line 469
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 470
    disk = 0;
#line 471
    mdev = drbd_new_device((unsigned int )minor);
#line 473
    spin_lock_irq(& drbd_pp_lock);
#line 474
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 475
      *(minor_table + (unsigned long )minor) = mdev;
#line 476
      disk = mdev->vdisk;
#line 477
      mdev = 0;
    } else {

    }
#line 479
    spin_unlock_irq(& drbd_pp_lock);
#line 481
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 484
      add_disk(disk);
    } else {
#line 486
      drbd_free_mdev(mdev);
    }
#line 488
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 491
  return (mdev);
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 499
  memset((void *)(& primary_args), 0, 4UL);
#line 500
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 500
  if (tmp == 0) {
#line 501
    reply->ret_code = 126;
#line 502
    return (0);
  } else {

  }
#line 505
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 505
  reply->ret_code = (int )tmp___0;
#line 508
  return (0);
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 514
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 514
  reply->ret_code = (int )tmp;
#line 516
  return (0);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 524
  md_size_sect = 0UL;
#line 525
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 528
  bdev->md.md_size_sect = 262144U;
#line 529
  tmp = drbd_md_ss__(mdev, bdev);
#line 529
  bdev->md.md_offset = (u64 )tmp;
#line 530
  bdev->md.al_offset = 8;
#line 531
  bdev->md.bm_offset = 72;
#line 532
  goto ldv_54072;
  case -2: 
#line 535
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 535
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 536
  bdev->md.md_offset = 0ULL;
#line 537
  bdev->md.al_offset = 8;
#line 538
  bdev->md.bm_offset = 72;
#line 539
  goto ldv_54072;
  case -1: ;
  case -3: 
#line 542
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 542
  bdev->md.md_offset = (u64 )tmp___1;
#line 544
  bdev->md.al_offset = -64;
#line 546
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 547
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 548
  md_size_sect = md_size_sect >> 15;
#line 549
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 553
  md_size_sect = md_size_sect + 72UL;
#line 555
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 557
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 558
  goto ldv_54072;
  }
  ldv_54072: ;
#line 561
  return;
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 567
  units[0] = 75;
#line 567
  units[1] = 77;
#line 567
  units[2] = 71;
#line 567
  units[3] = 84;
#line 567
  units[4] = 80;
#line 567
  units[5] = 69;
#line 568
  base = 0;
#line 569
  goto ldv_54083;
  ldv_54082: 
#line 571
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 572
  base = base + 1;
  ldv_54083: ;
#line 569
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 570
    goto ldv_54082;
  } else {

  }
#line 574
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 576
  return (buf);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 594
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 595
  tmp = is_susp(mdev->state);
#line 595
  if (tmp != 0) {
#line 596
    return;
  } else {

  }
#line 597
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 597
  if (tmp___0 == 0) {
#line 597
    goto ldv_54088;
  } else {

  }
#line 597
  tmp___1 = get_current();
#line 597
  __wait.flags = 0U;
#line 597
  __wait.private = (void *)tmp___1;
#line 597
  __wait.func = & autoremove_wake_function;
#line 597
  __wait.task_list.next = & __wait.task_list;
#line 597
  __wait.task_list.prev = & __wait.task_list;
  ldv_54091: 
#line 597
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 597
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 597
  if (tmp___2 == 0) {
#line 597
    goto ldv_54090;
  } else {

  }
#line 597
  schedule();
#line 597
  goto ldv_54091;
  ldv_54090: 
#line 597
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54088: ;
#line 600
  return;
}
}
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 602
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 603
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 604
  return;
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 621
  rv = 0;
#line 632
  drbd_suspend_io(mdev);
#line 635
  tmp = lc_try_lock(mdev->act_log);
#line 635
  if (tmp != 0) {
#line 635
    goto ldv_54107;
  } else {

  }
#line 635
  tmp___0 = get_current();
#line 635
  __wait.flags = 0U;
#line 635
  __wait.private = (void *)tmp___0;
#line 635
  __wait.func = & autoremove_wake_function;
#line 635
  __wait.task_list.next = & __wait.task_list;
#line 635
  __wait.task_list.prev = & __wait.task_list;
  ldv_54110: 
#line 635
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 635
  tmp___1 = lc_try_lock(mdev->act_log);
#line 635
  if (tmp___1 != 0) {
#line 635
    goto ldv_54109;
  } else {

  }
#line 635
  schedule();
#line 635
  goto ldv_54110;
  ldv_54109: 
#line 635
  finish_wait(& mdev->al_wait, & __wait);
  ldv_54107: 
#line 637
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 638
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 639
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 642
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 644
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 646
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 646
  if (tmp___5 != size) {
#line 646
    goto _L;
  } else {
#line 646
    tmp___6 = drbd_bm_capacity(mdev);
#line 646
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 649
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 650
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 650
      if (tmp___3 != 0L) {
#line 652
        tmp___2 = drbd_bm_capacity(mdev);
#line 652
        size = tmp___2 >> 1;
#line 653
        if (size == 0UL) {
#line 654
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 657
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 661
        rv = dev_size_error;
      } else {

      }
#line 664
      drbd_set_my_capacity(mdev, size);
#line 665
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 666
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 666
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 669
  if ((int )rv == -1) {
#line 670
    goto out;
  } else {

  }
#line 672
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 674
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 674
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 677
  if (la_size_changed != 0 || md_moved != 0) {
#line 680
    drbd_al_shrink(mdev);
#line 681
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 685
    err___0 = drbd_bitmap_io(mdev, md_moved != 0 ? & drbd_bm_write_all : & drbd_bm_write,
                             (char *)"size changed", BM_LOCKED_MASK);
#line 687
    if (err___0 != 0) {
#line 688
      rv = dev_size_error;
#line 689
      goto out;
    } else {

    }
#line 691
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 694
  if (size > la_size) {
#line 695
    rv = grew;
  } else {

  }
#line 696
  if (size < la_size) {
#line 697
    rv = shrunk;
  } else {

  }
  out: 
#line 699
  lc_unlock(mdev->act_log);
#line 700
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 701
  drbd_resume_io(mdev);
#line 703
  return (rv);
}
}
#line 707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 709
  p_size = mdev->p_size;
#line 710
  la_size = (sector_t )bdev->md.la_size_sect;
#line 712
  u_size = (sector_t )bdev->dc.disk_size;
#line 713
  size = 0UL;
#line 715
  m_size = drbd_get_max_capacity___1(bdev);
#line 717
  if ((int )mdev->state.ldv_40583.conn <= 9 && assume_peer_has_space != 0) {
#line 718
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 719
    p_size = m_size;
  } else {

  }
#line 722
  if (p_size != 0UL && m_size != 0UL) {
#line 723
    __min1 = p_size;
#line 723
    __min2 = m_size;
#line 723
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 725
  if (la_size != 0UL) {
#line 726
    size = la_size;
#line 727
    if (m_size != 0UL && m_size < size) {
#line 728
      size = m_size;
    } else {

    }
#line 729
    if (p_size != 0UL && p_size < size) {
#line 730
      size = p_size;
    } else {

    }
  } else {
#line 732
    if (m_size != 0UL) {
#line 733
      size = m_size;
    } else {

    }
#line 734
    if (p_size != 0UL) {
#line 735
      size = p_size;
    } else {

    }
  }
#line 739
  if (size == 0UL) {
#line 740
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 742
  if (u_size != 0UL) {
#line 743
    if (u_size > size) {
#line 744
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 747
      size = u_size;
    }
  } else {

  }
#line 750
  return (size);
}
}
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 768
  _b = mdev->sync_conf.al_extents <= 6;
#line 768
  if (_b != 0) {
#line 768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            768);
  } else {

  }
#line 768
  if (_b != 0) {
#line 769
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 771
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 773
    return (0);
  } else {

  }
#line 775
  in_use = 0U;
#line 776
  t = mdev->act_log;
#line 777
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 780
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 782
    return (-12);
  } else {

  }
#line 784
  spin_lock_irq(& mdev->al_lock);
#line 785
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 786
    i = 0;
#line 786
    goto ldv_54139;
    ldv_54138: 
#line 787
    e = lc_element_by_index(t, (unsigned int )i);
#line 788
    if (e->refcnt != 0U) {
#line 789
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 791
    in_use = e->refcnt + in_use;
#line 786
    i = i + 1;
    ldv_54139: ;
#line 786
    if ((unsigned int )i < t->nr_elements) {
#line 787
      goto ldv_54138;
    } else {

    }

  } else {

  }
#line 794
  if (in_use == 0U) {
#line 795
    mdev->act_log = n;
  } else {

  }
#line 796
  spin_unlock_irq(& mdev->al_lock);
#line 797
  if (in_use != 0U) {
#line 798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 799
    lc_destroy(n);
#line 800
    return (-16);
  } else
#line 802
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 803
    lc_destroy(t);
  } else {

  }
#line 805
  drbd_md_mark_dirty(mdev);
#line 806
  return (0);
}
}
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  unsigned int max_hw_sectors ;
  unsigned int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 811
  q = mdev->rq_queue;
#line 812
  max_hw_sectors = max_bio_size >> 9;
#line 813
  max_segments = 0U;
#line 815
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 815
  if (tmp___0 != 0) {
#line 816
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 818
    tmp = queue_max_hw_sectors(b);
#line 818
    _min1 = tmp;
#line 818
    _min2 = max_bio_size >> 9;
#line 818
    max_hw_sectors = _min1 < _min2 ? _min1 : _min2;
#line 819
    max_segments = (unsigned int )(mdev->ldev)->dc.max_bio_bvecs;
#line 820
    put_ldev(mdev);
  } else {

  }
#line 823
  blk_queue_logical_block_size(q, 512);
#line 824
  blk_queue_max_hw_sectors(q, max_hw_sectors);
#line 826
  blk_queue_max_segments(q, max_segments != 0U ? (int )((unsigned short )max_segments) : 128);
#line 827
  blk_queue_segment_boundary(q, 4095UL);
#line 829
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 829
  if (tmp___1 != 0) {
#line 830
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 832
    blk_queue_stack_limits(q, b___0);
#line 834
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 835
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 838
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 840
    put_ldev(mdev);
  } else {

  }
#line 842
  return;
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  unsigned int now ;
  unsigned int new ;
  unsigned int local ;
  unsigned int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;

  {
#line 848
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 848
  now = tmp << 9;
#line 849
  local = mdev->local_max_bio_size;
#line 850
  peer = mdev->peer_max_bio_size;
#line 852
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 852
  if (tmp___1 != 0) {
#line 853
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 853
    local = tmp___0 << 9;
#line 854
    mdev->local_max_bio_size = local;
#line 855
    put_ldev(mdev);
  } else {

  }
#line 857
  _min1 = local;
#line 857
  _min2 = 131072U;
#line 857
  local = _min1 < _min2 ? _min1 : _min2;
#line 862
  if ((int )mdev->state.ldv_40583.conn > 9) {
#line 863
    if (mdev->agreed_pro_version <= 93) {
#line 864
      _min1___0 = mdev->peer_max_bio_size;
#line 864
      _min2___0 = 32768U;
#line 864
      peer = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
    } else
#line 866
    if (mdev->agreed_pro_version == 94) {
#line 867
      peer = 32768U;
    } else {
#line 869
      peer = 131072U;
    }
  } else {

  }
#line 872
  _min1___1 = local;
#line 872
  _min2___1 = peer;
#line 872
  new = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 874
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 875
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%u < %u)\n",
            new, now);
  } else {

  }
#line 877
  if (new != now) {
#line 878
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 880
  drbd_setup_queue_param(mdev, new);
#line 881
  return;
}
}
#line 890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 892
  tmp = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 892
  if (tmp == 0) {
#line 892
    goto ldv_54172;
  } else {

  }
#line 892
  tmp___0 = get_current();
#line 892
  __wait.flags = 0U;
#line 892
  __wait.private = (void *)tmp___0;
#line 892
  __wait.func = & autoremove_wake_function;
#line 892
  __wait.task_list.next = & __wait.task_list;
#line 892
  __wait.task_list.prev = & __wait.task_list;
  ldv_54175: 
#line 892
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 892
  tmp___1 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 892
  if (tmp___1 == 0) {
#line 892
    goto ldv_54174;
  } else {

  }
#line 892
  schedule();
#line 892
  goto ldv_54175;
  ldv_54174: 
#line 892
  finish_wait(& mdev->state_wait, & __wait);
  ldv_54172: 
#line 893
  tmp___2 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 893
  if (tmp___2 == 0) {
#line 893
    goto ldv_54176;
  } else {

  }
#line 893
  tmp___3 = get_current();
#line 893
  __wait___0.flags = 0U;
#line 893
  __wait___0.private = (void *)tmp___3;
#line 893
  __wait___0.func = & autoremove_wake_function;
#line 893
  __wait___0.task_list.next = & __wait___0.task_list;
#line 893
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_54179: 
#line 893
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 893
  tmp___4 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 893
  if (tmp___4 == 0) {
#line 893
    goto ldv_54178;
  } else {

  }
#line 893
  schedule();
#line 893
  goto ldv_54179;
  ldv_54178: 
#line 893
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_54176: 
#line 894
  drbd_thread_start(& mdev->worker);
#line 895
  drbd_flush_workqueue(mdev);
#line 896
  return;
}
}
#line 901 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 903
  spin_lock_irq(& mdev->req_lock);
#line 904
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 907
    set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
#line 908
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 910
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  }
#line 911
  spin_unlock_irq(& mdev->req_lock);
#line 912
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 913
  return;
}
}
#line 916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 918
  s = 0;
#line 920
  tmp = lc_try_lock(mdev->act_log);
#line 920
  if (tmp != 0) {
#line 921
    drbd_al_shrink(mdev);
#line 922
    lc_unlock(mdev->act_log);
  } else {
#line 924
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 925
    return;
  }
#line 928
  spin_lock_irq(& mdev->req_lock);
#line 929
  if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 930
    tmp___0 = test_and_set_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 930
    s = tmp___0 == 0;
  } else {

  }
#line 932
  spin_unlock_irq(& mdev->req_lock);
#line 934
  if (s != 0) {
#line 935
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 936
  return;
}
}
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  struct lock_class_key __key ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 947
  nbc = 0;
#line 949
  resync_lru = 0;
#line 952
  cp_discovered = 0;
#line 955
  drbd_reconfig_start(mdev);
#line 958
  if ((int )mdev->state.ldv_40583.disk > 0) {
#line 959
    retcode = ERR_DISK_CONFIGURED;
#line 960
    goto fail;
  } else {

  }
#line 966
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 966
  if (tmp == 0) {
#line 966
    goto ldv_54205;
  } else {

  }
#line 966
  tmp___0 = get_current();
#line 966
  __wait.flags = 0U;
#line 966
  __wait.private = (void *)tmp___0;
#line 966
  __wait.func = & autoremove_wake_function;
#line 966
  __wait.task_list.next = & __wait.task_list;
#line 966
  __wait.task_list.prev = & __wait.task_list;
  ldv_54208: 
#line 966
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 966
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 966
  if (tmp___1 == 0) {
#line 966
    goto ldv_54207;
  } else {

  }
#line 966
  schedule();
#line 966
  goto ldv_54208;
  ldv_54207: 
#line 966
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54205: 
#line 969
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 972
  mdev->rs_total = 0UL;
#line 973
  mdev->rs_failed = 0UL;
#line 974
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 977
  tmp___2 = kzalloc(472UL, 208U);
#line 977
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 978
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 979
    retcode = ERR_NOMEM;
#line 980
    goto fail;
  } else {

  }
#line 983
  nbc->dc.disk_size = 0ULL;
#line 984
  nbc->dc.on_io_error = 0;
#line 985
  nbc->dc.fencing = 0;
#line 986
  nbc->dc.max_bio_bvecs = 0;
#line 988
  spinlock_check(& nbc->md.uuid_lock);
#line 988
  __raw_spin_lock_init(& nbc->md.uuid_lock.ldv_6135.rlock, "&(&nbc->md.uuid_lock)->rlock",
                       & __key);
#line 990
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 990
  if (tmp___3 == 0) {
#line 991
    retcode = ERR_MANDATORY_TAG;
#line 992
    goto fail;
  } else {

  }
#line 995
  if (nbc->dc.meta_dev_idx < -3) {
#line 996
    retcode = ERR_MD_IDX_INVALID;
#line 997
    goto fail;
  } else {

  }
#line 1000
  tmp___4 = get_net_conf(mdev);
#line 1000
  if (tmp___4 != 0) {
#line 1001
    prot = (mdev->net_conf)->wire_protocol;
#line 1002
    put_net_conf(mdev);
#line 1003
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1004
      retcode = ERR_STONITH_AND_PROT_A;
#line 1005
      goto fail;
    } else {

    }
  } else {

  }
#line 1009
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1011
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1011
  if (tmp___6 != 0L) {
#line 1012
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1012
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1014
    retcode = ERR_OPEN_DISK;
#line 1015
    goto fail;
  } else {

  }
#line 1017
  nbc->backing_bdev = bdev;
#line 1027
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1031
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1031
  if (tmp___8 != 0L) {
#line 1032
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1034
    retcode = ERR_OPEN_MD_DISK;
#line 1035
    goto fail;
  } else {

  }
#line 1037
  nbc->md_bdev = bdev;
#line 1039
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1042
    retcode = ERR_MD_IDX_INVALID;
#line 1043
    goto fail;
  } else {

  }
#line 1046
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1049
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1050
    retcode = ERR_NOMEM;
#line 1051
    goto fail;
  } else {

  }
#line 1055
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1057
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1057
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1058
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1058
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1061
    retcode = ERR_DISK_TOO_SMALL;
#line 1062
    goto fail;
  } else {

  }
#line 1065
  if (nbc->dc.meta_dev_idx < 0) {
#line 1066
    max_possible_sectors = 2251799813685248UL;
#line 1068
    min_md_device_sectors = 2048UL;
  } else {
#line 1070
    max_possible_sectors = 8587575296UL;
#line 1071
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1074
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1074
  if (tmp___11 < min_md_device_sectors) {
#line 1075
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1076
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1079
    goto fail;
  } else {

  }
#line 1084
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1084
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1084
  if (tmp___12 < tmp___13) {
#line 1086
    retcode = ERR_DISK_TOO_SMALL;
#line 1087
    goto fail;
  } else {

  }
#line 1090
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1092
  if (nbc->known_size > max_possible_sectors) {
#line 1093
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1096
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1097
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1101
  drbd_suspend_io(mdev);
#line 1103
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1103
  if (tmp___14 == 0) {
#line 1103
    goto ldv_54211;
  } else {
#line 1103
    tmp___15 = is_susp(mdev->state);
#line 1103
    if (tmp___15 != 0) {
#line 1103
      goto ldv_54211;
    } else {

    }
  }
#line 1103
  tmp___16 = get_current();
#line 1103
  __wait___0.flags = 0U;
#line 1103
  __wait___0.private = (void *)tmp___16;
#line 1103
  __wait___0.func = & autoremove_wake_function;
#line 1103
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1103
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_54214: 
#line 1103
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1103
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1103
  if (tmp___17 == 0) {
#line 1103
    goto ldv_54213;
  } else {
#line 1103
    tmp___18 = is_susp(mdev->state);
#line 1103
    if (tmp___18 != 0) {
#line 1103
      goto ldv_54213;
    } else {

    }
  }
#line 1103
  schedule();
#line 1103
  goto ldv_54214;
  ldv_54213: 
#line 1103
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_54211: 
#line 1105
  drbd_flush_workqueue(mdev);
#line 1107
  val.i = 0U;
#line 1107
  val.ldv_40583.disk = 1U;
#line 1107
  mask.i = 0U;
#line 1107
  mask.ldv_40583.disk = 15U;
#line 1107
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1108
  retcode = (enum drbd_ret_code )rv;
#line 1109
  drbd_resume_io(mdev);
#line 1110
  if ((int )rv <= 0) {
#line 1111
    goto fail;
  } else {

  }
#line 1113
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1113
  if (tmp___19 == 0) {
#line 1114
    goto force_diskless;
  } else {

  }
#line 1116
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1119
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1119
  logical_block_size = (int )tmp___20;
#line 1120
  if (logical_block_size == 0) {
#line 1121
    logical_block_size = 512;
  } else {

  }
#line 1123
  if (logical_block_size != 512) {
#line 1124
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1125
      tmp___21 = alloc_pages(16U, 0U);
#line 1125
      page = tmp___21;
#line 1126
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1127
        goto force_diskless_dec;
      } else {

      }
#line 1129
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1131
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1133
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1137
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1138
    tmp___22 = drbd_bm_init(mdev);
#line 1138
    if (tmp___22 != 0) {
#line 1139
      retcode = ERR_NOMEM;
#line 1140
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1144
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1144
  retcode = (enum drbd_ret_code )tmp___23;
#line 1145
  if ((unsigned int )retcode != 101U) {
#line 1146
    goto force_diskless_dec;
  } else {

  }
#line 1148
  if (((int )mdev->state.ldv_40583.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1153
    retcode = ERR_DATA_NOT_CURRENT;
#line 1154
    goto force_diskless_dec;
  } else {

  }
#line 1158
  tmp___24 = drbd_check_al_size(mdev);
#line 1158
  if (tmp___24 != 0) {
#line 1159
    retcode = ERR_NOMEM;
#line 1160
    goto force_diskless_dec;
  } else {

  }
#line 1164
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1164
  if (tmp___25 != 0) {
#line 1164
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1164
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1166
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1167
      retcode = ERR_DISK_TOO_SMALL;
#line 1168
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1171
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1171
  if (tmp___27 == 0) {
#line 1172
    retcode = ERR_IO_MD_DISK;
#line 1173
    goto force_diskless_dec;
  } else {

  }
#line 1178
  if ((unsigned int )*((unsigned char *)nbc + 444UL) != 0U) {
#line 1179
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1181
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1187
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1187
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1187);
  } else {

  }
#line 1188
  mdev->ldev = nbc;
#line 1189
  mdev->resync = resync_lru;
#line 1190
  nbc = 0;
#line 1191
  resync_lru = 0;
#line 1193
  mdev->write_ordering = WO_bdev_flush;
#line 1194
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1196
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1196
  if (tmp___28 != 0) {
#line 1197
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1199
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1201
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1201
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1203
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 1204
    cp_discovered = 1;
  } else {

  }
#line 1207
  mdev->send_cnt = 0U;
#line 1208
  mdev->recv_cnt = 0U;
#line 1209
  mdev->read_cnt = 0U;
#line 1210
  mdev->writ_cnt = 0U;
#line 1212
  drbd_reconsider_max_bio_size(mdev);
#line 1228
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 1229
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1229
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1229
    if (tmp___30 != 0) {
#line 1229
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1229
      if (tmp___31 == 0) {
#line 1232
        set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1234
  dd = drbd_determine_dev_size(mdev, 0);
#line 1235
  if ((int )dd == -1) {
#line 1236
    retcode = ERR_NOMEM_BITMAP;
#line 1237
    goto force_diskless_dec;
  } else
#line 1238
  if ((int )dd == 2) {
#line 1239
    set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1241
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1241
  if (tmp___34 != 0) {
#line 1242
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1244
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1244
    if (tmp___32 != 0) {
#line 1246
      retcode = ERR_IO_MD_DISK;
#line 1247
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1250
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1250
    if (tmp___33 < 0) {
#line 1252
      retcode = ERR_IO_MD_DISK;
#line 1253
      goto force_diskless_dec;
    } else {

    }
  }
#line 1257
  if (cp_discovered != 0) {
#line 1258
    drbd_al_apply_to_bm(mdev);
#line 1259
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1259
    if (tmp___35 != 0) {
#line 1261
      retcode = ERR_IO_MD_DISK;
#line 1262
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1266
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1266
  tmp___37 = drbd_bm_bits(mdev);
#line 1266
  if (tmp___36 == tmp___37) {
#line 1267
    drbd_suspend_al(mdev);
  } else {

  }
#line 1269
  spin_lock_irq(& mdev->req_lock);
#line 1270
  os = mdev->state;
#line 1271
  ns.i = os.i;
#line 1277
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1277
  if (tmp___39 != 0) {
#line 1278
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1278
    if (tmp___38 != 0) {
#line 1279
      ns.ldv_40583.disk = 7U;
    } else {
#line 1281
      ns.ldv_40583.disk = 5U;
    }
  } else {
#line 1283
    ns.ldv_40583.disk = 4U;
  }
#line 1286
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1286
  if (tmp___40 != 0) {
#line 1287
    ns.ldv_40583.pdsk = 5U;
  } else {

  }
#line 1289
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1291
    ns.ldv_40583.disk = 8U;
  } else {

  }
#line 1300
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1301
    mdev->new_state_tmp.i = ns.i;
#line 1302
    ns.i = os.i;
#line 1303
    ns.ldv_40583.disk = 3U;
#line 1308
    kfree((void const   *)mdev->p_uuid);
#line 1309
    mdev->p_uuid = 0;
  } else {

  }
#line 1312
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1313
  ns = mdev->state;
#line 1314
  spin_unlock_irq(& mdev->req_lock);
#line 1316
  if ((int )rv <= 0) {
#line 1317
    goto force_diskless_dec;
  } else {

  }
#line 1319
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1320
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1322
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1324
  drbd_md_mark_dirty(mdev);
#line 1325
  drbd_md_sync(mdev);
#line 1327
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1328
  put_ldev(mdev);
#line 1329
  reply->ret_code = (int )retcode;
#line 1330
  drbd_reconfig_done(mdev);
#line 1331
  return (0);
  force_diskless_dec: 
#line 1334
  put_ldev(mdev);
  force_diskless: 
#line 1336
  val___0.i = 0U;
#line 1336
  val___0.ldv_40583.disk = 2U;
#line 1336
  mask___0.i = 0U;
#line 1336
  mask___0.ldv_40583.disk = 15U;
#line 1336
  drbd_force_state(mdev, mask___0, val___0);
#line 1337
  drbd_md_sync(mdev);
  fail: ;
#line 1339
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1340
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1341
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1343
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1344
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1346
    kfree((void const   *)nbc);
  } else {

  }
#line 1348
  lc_destroy(resync_lru);
#line 1350
  reply->ret_code = (int )retcode;
#line 1351
  drbd_reconfig_done(mdev);
#line 1352
  return (0);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  struct detach dt ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___0 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1365
  dt.detach_force = (unsigned char)0;
#line 1367
  tmp = detach_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dt);
#line 1367
  if (tmp == 0) {
#line 1368
    reply->ret_code = 126;
#line 1369
    goto out;
  } else {

  }
#line 1372
  if ((unsigned int )*((unsigned char *)(& dt) + 0UL) != 0U) {
#line 1373
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 1374
    val.i = 0U;
#line 1374
    val.ldv_40583.disk = 2U;
#line 1374
    mask.i = 0U;
#line 1374
    mask.ldv_40583.disk = 15U;
#line 1374
    drbd_force_state(mdev, mask, val);
#line 1375
    reply->ret_code = 1;
#line 1376
    goto out;
  } else {

  }
#line 1379
  drbd_suspend_io(mdev);
#line 1380
  drbd_md_get_buffer(mdev);
#line 1381
  val___0.i = 0U;
#line 1381
  val___0.ldv_40583.disk = 2U;
#line 1381
  mask___0.i = 0U;
#line 1381
  mask___0.ldv_40583.disk = 15U;
#line 1381
  tmp___0 = drbd_request_state(mdev, mask___0, val___0);
#line 1381
  retcode = (enum drbd_ret_code )tmp___0;
#line 1382
  drbd_md_put_buffer(mdev);
#line 1384
  __ret = 0;
#line 1384
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1384
    tmp___1 = get_current();
#line 1384
    __wait.flags = 0U;
#line 1384
    __wait.private = (void *)tmp___1;
#line 1384
    __wait.func = & autoremove_wake_function;
#line 1384
    __wait.task_list.next = & __wait.task_list;
#line 1384
    __wait.task_list.prev = & __wait.task_list;
    ldv_54247: 
#line 1384
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1384
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1384
      goto ldv_54245;
    } else {

    }
#line 1384
    tmp___2 = get_current();
#line 1384
    tmp___3 = signal_pending(tmp___2);
#line 1384
    if (tmp___3 == 0) {
#line 1384
      schedule();
#line 1384
      goto ldv_54246;
    } else {

    }
#line 1384
    __ret = -512;
#line 1384
    goto ldv_54245;
    ldv_54246: ;
#line 1384
    goto ldv_54247;
    ldv_54245: 
#line 1384
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1384
  ret = __ret;
#line 1386
  drbd_resume_io(mdev);
#line 1388
  if ((long )retcode == 4294967285L) {
#line 1389
    retcode = 2;
  } else {

  }
#line 1390
  if (ret != 0) {
#line 1391
    retcode = ERR_INTR;
  } else {

  }
#line 1392
  reply->ret_code = (int )retcode;
  out: ;
#line 1394
  return (0);
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1402
  new_conf = 0;
#line 1403
  tfm = 0;
#line 1404
  integrity_w_tfm = 0;
#line 1405
  integrity_r_tfm = 0;
#line 1406
  new_tl_hash = 0;
#line 1407
  new_ee_hash = 0;
#line 1410
  int_dig_out = 0;
#line 1411
  int_dig_in = 0;
#line 1412
  int_dig_vv = 0;
#line 1415
  drbd_reconfig_start(mdev);
#line 1417
  if ((int )mdev->state.ldv_40583.conn > 0) {
#line 1418
    retcode = ERR_NET_CONFIGURED;
#line 1419
    goto fail;
  } else {

  }
#line 1423
  tmp = kzalloc(544UL, 208U);
#line 1423
  new_conf = (struct net_conf *)tmp;
#line 1424
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1425
    retcode = ERR_NOMEM;
#line 1426
    goto fail;
  } else {

  }
#line 1429
  new_conf->timeout = 60;
#line 1430
  new_conf->try_connect_int = 10;
#line 1431
  new_conf->ping_int = 10;
#line 1432
  new_conf->max_epoch_size = 2048;
#line 1433
  new_conf->max_buffers = 2048;
#line 1434
  new_conf->unplug_watermark = 128;
#line 1435
  new_conf->sndbuf_size = 0;
#line 1436
  new_conf->rcvbuf_size = 0;
#line 1437
  new_conf->ko_count = 0;
#line 1438
  new_conf->after_sb_0p = 0;
#line 1439
  new_conf->after_sb_1p = 0;
#line 1440
  new_conf->after_sb_2p = 0;
#line 1441
  new_conf->want_lose = 0U;
#line 1442
  new_conf->two_primaries = 0U;
#line 1443
  new_conf->wire_protocol = 3;
#line 1444
  new_conf->ping_timeo = 5;
#line 1445
  new_conf->rr_conflict = 0;
#line 1446
  new_conf->on_congestion = 0;
#line 1447
  new_conf->cong_extents = 127;
#line 1449
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1449
  if (tmp___0 == 0) {
#line 1450
    retcode = ERR_MANDATORY_TAG;
#line 1451
    goto fail;
  } else {

  }
#line 1454
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1456
    retcode = ERR_NOT_PROTO_C;
#line 1457
    goto fail;
  } else {

  }
#line 1460
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1460
  if (tmp___1 != 0) {
#line 1461
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1462
    put_ldev(mdev);
#line 1463
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1464
      retcode = ERR_STONITH_AND_PROT_A;
#line 1465
      goto fail;
    } else {

    }
  } else {

  }
#line 1469
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1470
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1471
    goto fail;
  } else {

  }
#line 1474
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1475
    retcode = ERR_DISCARD;
#line 1476
    goto fail;
  } else {

  }
#line 1479
  retcode = NO_ERROR;
#line 1481
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1482
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1483
  i = 0;
#line 1483
  goto ldv_54275;
  ldv_54274: 
#line 1484
  odev = minor_to_mdev((unsigned int )i);
#line 1485
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1486
    goto ldv_54273;
  } else {

  }
#line 1487
  tmp___4 = get_net_conf(odev);
#line 1487
  if (tmp___4 != 0) {
#line 1488
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1489
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1489
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1489
      if (tmp___2 == 0) {
#line 1491
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1493
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1494
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1494
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1494
      if (tmp___3 == 0) {
#line 1496
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1498
    put_net_conf(odev);
#line 1499
    if ((unsigned int )retcode != 101U) {
#line 1500
      goto fail;
    } else {

    }
  } else {

  }
  ldv_54273: 
#line 1483
  i = i + 1;
  ldv_54275: ;
#line 1483
  if ((unsigned int )i < minor_count) {
#line 1484
    goto ldv_54274;
  } else {

  }

#line 1504
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1505
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1507
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1508
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1508
    if (tmp___5 != 0L) {
#line 1509
      tfm = 0;
#line 1510
      retcode = ERR_AUTH_ALG;
#line 1511
      goto fail;
    } else {

    }
#line 1514
    tmp___6 = crypto_hash_tfm(tfm);
#line 1514
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1514
    if (tmp___7 == 0) {
#line 1515
      retcode = ERR_AUTH_ALG_ND;
#line 1516
      goto fail;
    } else {

    }
  } else {

  }
#line 1520
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1521
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1522
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1522
    if (tmp___8 != 0L) {
#line 1523
      integrity_w_tfm = 0;
#line 1524
      retcode = ERR_INTEGRITY_ALG;
#line 1525
      goto fail;
    } else {

    }
#line 1528
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1528
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1528
    if (tmp___10 == 0) {
#line 1529
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1530
      goto fail;
    } else {

    }
#line 1533
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1534
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1534
    if (tmp___11 != 0L) {
#line 1535
      integrity_r_tfm = 0;
#line 1536
      retcode = ERR_INTEGRITY_ALG;
#line 1537
      goto fail;
    } else {

    }
  } else {

  }
#line 1541
  ns = new_conf->max_epoch_size / 8;
#line 1542
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1543
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1543
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1544
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1545
      retcode = ERR_NOMEM;
#line 1546
      goto fail;
    } else {

    }
  } else {

  }
#line 1550
  ns = new_conf->max_buffers / 8;
#line 1551
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1552
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1552
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1553
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1554
      retcode = ERR_NOMEM;
#line 1555
      goto fail;
    } else {

    }
  } else {

  }
#line 1559
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1561
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1562
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1562
    i = (int )tmp___14;
#line 1563
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1564
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1565
      retcode = ERR_NOMEM;
#line 1566
      goto fail;
    } else {

    }
#line 1568
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1569
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1570
      retcode = ERR_NOMEM;
#line 1571
      goto fail;
    } else {

    }
#line 1573
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1574
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1575
      retcode = ERR_NOMEM;
#line 1576
      goto fail;
    } else {

    }
  } else {

  }
#line 1580
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1581
    tmp___15 = drbd_bm_init(mdev);
#line 1581
    if (tmp___15 != 0) {
#line 1582
      retcode = ERR_NOMEM;
#line 1583
      goto fail;
    } else {

    }
  } else {

  }
#line 1587
  drbd_flush_workqueue(mdev);
#line 1588
  spin_lock_irq(& mdev->req_lock);
#line 1589
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1590
    retcode = ERR_NET_CONFIGURED;
#line 1591
    spin_unlock_irq(& mdev->req_lock);
#line 1592
    goto fail;
  } else {

  }
#line 1594
  mdev->net_conf = new_conf;
#line 1596
  mdev->send_cnt = 0U;
#line 1597
  mdev->recv_cnt = 0U;
#line 1599
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1600
    kfree((void const   *)mdev->tl_hash);
#line 1601
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1602
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1605
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1606
    kfree((void const   *)mdev->ee_hash);
#line 1607
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1608
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1611
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1612
  mdev->cram_hmac_tfm = tfm;
#line 1614
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1615
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1617
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1618
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1620
  kfree((void const   *)mdev->int_dig_out);
#line 1621
  kfree((void const   *)mdev->int_dig_in);
#line 1622
  kfree((void const   *)mdev->int_dig_vv);
#line 1623
  mdev->int_dig_out = int_dig_out;
#line 1624
  mdev->int_dig_in = int_dig_in;
#line 1625
  mdev->int_dig_vv = int_dig_vv;
#line 1626
  __ns.i = mdev->state.i;
#line 1626
  __ns.ldv_40583.conn = 2U;
#line 1626
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1626
  retcode = (enum drbd_ret_code )tmp___16;
#line 1627
  spin_unlock_irq(& mdev->req_lock);
#line 1629
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1630
  reply->ret_code = (int )retcode;
#line 1631
  drbd_reconfig_done(mdev);
#line 1632
  return (0);
  fail: 
#line 1635
  kfree((void const   *)int_dig_out);
#line 1636
  kfree((void const   *)int_dig_in);
#line 1637
  kfree((void const   *)int_dig_vv);
#line 1638
  crypto_free_hash(tfm);
#line 1639
  crypto_free_hash(integrity_w_tfm);
#line 1640
  crypto_free_hash(integrity_r_tfm);
#line 1641
  kfree((void const   *)new_tl_hash);
#line 1642
  kfree((void const   *)new_ee_hash);
#line 1643
  kfree((void const   *)new_conf);
#line 1645
  reply->ret_code = (int )retcode;
#line 1646
  drbd_reconfig_done(mdev);
#line 1647
  return (0);
}
}
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1656
  memset((void *)(& dc), 0, 4UL);
#line 1657
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1657
  if (tmp == 0) {
#line 1658
    retcode = 126;
#line 1659
    goto fail;
  } else {

  }
#line 1662
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1663
    spin_lock_irq(& mdev->req_lock);
#line 1664
    if ((int )mdev->state.ldv_40583.conn > 7) {
#line 1665
      __ns.i = mdev->state.i;
#line 1665
      __ns.ldv_40583.conn = 1U;
#line 1665
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1666
    spin_unlock_irq(& mdev->req_lock);
#line 1667
    goto done;
  } else {

  }
#line 1670
  val.i = 0U;
#line 1670
  val.ldv_40583.conn = 1U;
#line 1670
  mask.i = 0U;
#line 1670
  mask.ldv_40583.conn = 31U;
#line 1670
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1670
  retcode = (int )tmp___0;
#line 1672
  if (retcode == 2) {
#line 1673
    goto done;
  } else
#line 1674
  if (retcode == -9) {
#line 1675
    goto done;
  } else
#line 1676
  if (retcode == -7) {
#line 1679
    val___0.i = 0U;
#line 1679
    val___0.ldv_40583.conn = 1U;
#line 1679
    val___0.ldv_40583.pdsk = 5U;
#line 1678
    mask___0.i = 0U;
#line 1678
    mask___0.ldv_40583.conn = 31U;
#line 1679
    mask___0.ldv_40583.pdsk = 15U;
#line 1679
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1680
  if (retcode == -10) {
#line 1683
    val___1.i = 0U;
#line 1683
    val___1.ldv_40583.conn = 1U;
#line 1683
    val___1.ldv_40583.disk = 5U;
#line 1682
    mask___1.i = 0U;
#line 1682
    mask___1.ldv_40583.conn = 31U;
#line 1683
    mask___1.ldv_40583.disk = 15U;
#line 1683
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1683
    retcode = (int )tmp___1;
#line 1685
    if (retcode == -11 || retcode == -16) {
#line 1686
      val___2.i = 0U;
#line 1686
      val___2.ldv_40583.conn = 1U;
#line 1686
      mask___2.i = 0U;
#line 1686
      mask___2.ldv_40583.conn = 31U;
#line 1686
      drbd_force_state(mdev, mask___2, val___2);
#line 1687
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1691
  if (retcode <= 0) {
#line 1692
    goto fail;
  } else {

  }
#line 1694
  __ret = 0;
#line 1694
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1694
    tmp___2 = get_current();
#line 1694
    __wait.flags = 0U;
#line 1694
    __wait.private = (void *)tmp___2;
#line 1694
    __wait.func = & autoremove_wake_function;
#line 1694
    __wait.task_list.next = & __wait.task_list;
#line 1694
    __wait.task_list.prev = & __wait.task_list;
    ldv_54310: 
#line 1694
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1694
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1694
      goto ldv_54308;
    } else {

    }
#line 1694
    tmp___3 = get_current();
#line 1694
    tmp___4 = signal_pending(tmp___3);
#line 1694
    if (tmp___4 == 0) {
#line 1694
      schedule();
#line 1694
      goto ldv_54309;
    } else {

    }
#line 1694
    __ret = -512;
#line 1694
    goto ldv_54308;
    ldv_54309: ;
#line 1694
    goto ldv_54310;
    ldv_54308: 
#line 1694
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1694
  if (__ret != 0) {
#line 1698
    retcode = 129;
#line 1699
    goto fail;
  } else {

  }
  done: 
#line 1703
  retcode = 101;
  fail: 
#line 1705
  drbd_md_sync(mdev);
#line 1706
  reply->ret_code = retcode;
#line 1707
  return (0);
}
}
#line 1710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1714
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1715
  if ((int )mdev->state.ldv_40583.role != (int )mdev->state.ldv_40583.peer) {
#line 1716
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1718
    iass = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1720
  if (iass != 0) {
#line 1721
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1723
    val.i = 0U;
#line 1723
    val.ldv_40583.conn = 15U;
#line 1723
    mask.i = 0U;
#line 1723
    mask.ldv_40583.conn = 31U;
#line 1723
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1725
  return;
}
}
#line 1726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1730
  retcode = 101;
#line 1734
  memset((void *)(& rs), 0, 16UL);
#line 1735
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1735
  if (tmp == 0) {
#line 1736
    retcode = 126;
#line 1737
    goto fail;
  } else {

  }
#line 1740
  if ((int )mdev->state.ldv_40583.conn > 10) {
#line 1741
    retcode = 130;
#line 1742
    goto fail;
  } else {

  }
#line 1745
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1747
    retcode = 131;
#line 1748
    goto fail;
  } else {

  }
#line 1751
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1751
  if (tmp___0 == 0) {
#line 1752
    retcode = 138;
#line 1753
    goto fail;
  } else {

  }
#line 1756
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1757
    retcode = 153;
#line 1758
    goto fail_ldev;
  } else {

  }
#line 1761
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1761
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1762
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1764
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1765
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1766
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1767
  drbd_md_sync(mdev);
#line 1768
  put_ldev(mdev);
#line 1769
  if ((int )dd == -1) {
#line 1770
    retcode = 140;
#line 1771
    goto fail;
  } else {

  }
#line 1774
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1775
    if ((int )dd == 2) {
#line 1776
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1778
    drbd_send_uuids(mdev);
#line 1779
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1783
  reply->ret_code = retcode;
#line 1784
  return (0);
  fail_ldev: 
#line 1787
  put_ldev(mdev);
#line 1788
  goto fail;
}
}
#line 1791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1794
  retcode = 101;
#line 1798
  verify_tfm = 0;
#line 1799
  csums_tfm = 0;
#line 1802
  rs_plan_s = 0;
#line 1805
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1805
  if (tmp) {
#line 1805
    tmp___0 = 0;
  } else {
#line 1805
    tmp___0 = 1;
  }
#line 1805
  if (tmp___0) {
#line 1806
    retcode = 122;
#line 1807
    goto fail;
  } else {

  }
#line 1810
  if ((nlp->flags & 2) != 0) {
#line 1811
    memset((void *)(& sc), 0, 212UL);
#line 1812
    sc.rate = 250;
#line 1813
    sc.after = -1;
#line 1814
    sc.al_extents = 127;
#line 1815
    sc.on_no_data = 0;
#line 1816
    sc.c_plan_ahead = 0;
#line 1817
    sc.c_delay_target = 10;
#line 1818
    sc.c_fill_target = 0;
#line 1819
    sc.c_max_rate = 102400;
#line 1820
    sc.c_min_rate = 4096;
  } else {
#line 1822
    __len = 212UL;
#line 1822
    if (__len > 63UL) {
#line 1822
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1822
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1824
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1824
  if (tmp___1 == 0) {
#line 1825
    retcode = 126;
#line 1826
    goto fail;
  } else {

  }
#line 1830
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1835
  if (rsr != 0) {
#line 1835
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1835
    if (tmp___2 != 0) {
#line 1836
      retcode = 148;
#line 1837
      goto fail;
    } else {

    }
  } else {

  }
#line 1840
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1841
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1842
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1842
    if (tmp___3 != 0L) {
#line 1843
      csums_tfm = 0;
#line 1844
      retcode = 144;
#line 1845
      goto fail;
    } else {

    }
#line 1848
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1848
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1848
    if (tmp___5 == 0) {
#line 1849
      retcode = 145;
#line 1850
      goto fail;
    } else {

    }
  } else {

  }
#line 1855
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1857
  if (ovr != 0) {
#line 1858
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1858
    if (tmp___6 != 0) {
#line 1859
      retcode = 149;
#line 1860
      goto fail;
    } else {

    }
  } else {

  }
#line 1864
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1865
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1866
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1866
    if (tmp___7 != 0L) {
#line 1867
      verify_tfm = 0;
#line 1868
      retcode = 146;
#line 1869
      goto fail;
    } else {

    }
#line 1872
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1872
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1872
    if (tmp___9 == 0) {
#line 1873
      retcode = 147;
#line 1874
      goto fail;
    } else {

    }
  } else {

  }
#line 1879
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1880
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1882
    if (err != 0) {
#line 1883
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1884
      retcode = 143;
#line 1885
      goto fail;
    } else {

    }
  } else {

  }
#line 1889
  _b = sc.rate <= 0;
#line 1889
  if (_b != 0) {
#line 1889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1889);
  } else {

  }
#line 1889
  if (_b != 0) {
#line 1889
    sc.rate = 1;
  } else {

  }
#line 1890
  _b___0 = sc.al_extents <= 6;
#line 1890
  if (_b___0 != 0) {
#line 1890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1890);
  } else {

  }
#line 1890
  if (_b___0 != 0) {
#line 1890
    sc.al_extents = 127;
  } else {

  }
#line 1892
  if (sc.al_extents > 3843) {
#line 1893
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1894
    sc.al_extents = 3843;
  } else {

  }
#line 1901
  if (sc.after >= 0) {
#line 1902
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1907
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1908
  if (retcode != 101) {
#line 1909
    goto fail;
  } else {

  }
#line 1911
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1912
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1913
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1913
    rs_plan_s = (int *)tmp___10;
#line 1914
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1915
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1916
      retcode = 122;
#line 1917
      goto fail;
    } else {

    }
  } else {

  }
#line 1923
  spin_lock(& mdev->peer_seq_lock);
#line 1924
  mdev->sync_conf = sc;
#line 1926
  if (rsr == 0) {
#line 1927
    crypto_free_hash(mdev->csums_tfm);
#line 1928
    mdev->csums_tfm = csums_tfm;
#line 1929
    csums_tfm = 0;
  } else {

  }
#line 1932
  if (ovr == 0) {
#line 1933
    crypto_free_hash(mdev->verify_tfm);
#line 1934
    mdev->verify_tfm = verify_tfm;
#line 1935
    verify_tfm = 0;
  } else {

  }
#line 1938
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1939
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1940
    mdev->rs_plan_s.values = rs_plan_s;
#line 1941
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1942
    mdev->rs_planed = 0;
#line 1943
    rs_plan_s = 0;
  } else {

  }
#line 1946
  spin_unlock(& mdev->peer_seq_lock);
#line 1948
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1948
  if (tmp___14 != 0) {
#line 1949
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1949
    if (tmp___11 != 0) {
#line 1949
      goto ldv_54355;
    } else {

    }
#line 1949
    tmp___12 = get_current();
#line 1949
    __wait.flags = 0U;
#line 1949
    __wait.private = (void *)tmp___12;
#line 1949
    __wait.func = & autoremove_wake_function;
#line 1949
    __wait.task_list.next = & __wait.task_list;
#line 1949
    __wait.task_list.prev = & __wait.task_list;
    ldv_54358: 
#line 1949
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1949
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1949
    if (tmp___13 != 0) {
#line 1949
      goto ldv_54357;
    } else {

    }
#line 1949
    schedule();
#line 1949
    goto ldv_54358;
    ldv_54357: 
#line 1949
    finish_wait(& mdev->al_wait, & __wait);
    ldv_54355: 
#line 1950
    drbd_al_shrink(mdev);
#line 1951
    err = drbd_check_al_size(mdev);
#line 1952
    lc_unlock(mdev->act_log);
#line 1953
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1955
    put_ldev(mdev);
#line 1956
    drbd_md_sync(mdev);
#line 1958
    if (err != 0) {
#line 1959
      retcode = 122;
#line 1960
      goto fail;
    } else {

    }
  } else {

  }
#line 1964
  if ((int )mdev->state.ldv_40583.conn > 9) {
#line 1965
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1967
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1967
  if (tmp___15) {
#line 1967
    tmp___16 = 0;
  } else {
#line 1967
    tmp___16 = 1;
  }
#line 1967
  if (tmp___16) {
#line 1968
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1969
    drbd_calc_cpu_mask(mdev);
#line 1970
    mdev->receiver.reset_cpu_mask = 1;
#line 1971
    mdev->asender.reset_cpu_mask = 1;
#line 1972
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1975
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1977
  kfree((void const   *)rs_plan_s);
#line 1978
  free_cpumask_var(new_cpu_mask);
#line 1979
  crypto_free_hash(csums_tfm);
#line 1980
  crypto_free_hash(verify_tfm);
#line 1981
  reply->ret_code = retcode;
#line 1982
  return (0);
}
}
#line 1985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1993
  drbd_suspend_io(mdev);
#line 1994
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1994
  if (tmp == 0) {
#line 1994
    goto ldv_54365;
  } else {

  }
#line 1994
  tmp___0 = get_current();
#line 1994
  __wait.flags = 0U;
#line 1994
  __wait.private = (void *)tmp___0;
#line 1994
  __wait.func = & autoremove_wake_function;
#line 1994
  __wait.task_list.next = & __wait.task_list;
#line 1994
  __wait.task_list.prev = & __wait.task_list;
  ldv_54368: 
#line 1994
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1994
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1994
  if (tmp___1 == 0) {
#line 1994
    goto ldv_54367;
  } else {

  }
#line 1994
  schedule();
#line 1994
  goto ldv_54368;
  ldv_54367: 
#line 1994
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54365: 
#line 1995
  drbd_flush_workqueue(mdev);
#line 1997
  val.i = 0U;
#line 1997
  val.ldv_40583.conn = 12U;
#line 1997
  mask.i = 0U;
#line 1997
  mask.ldv_40583.conn = 31U;
#line 1997
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1997
  retcode = (int )tmp___2;
#line 1999
  if (retcode <= 0 && retcode != -15) {
#line 2000
    val___0.i = 0U;
#line 2000
    val___0.ldv_40583.conn = 12U;
#line 2000
    mask___0.i = 0U;
#line 2000
    mask___0.ldv_40583.conn = 31U;
#line 2000
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2002
  goto ldv_54385;
  ldv_54384: 
#line 2003
  spin_lock_irq(& mdev->req_lock);
#line 2004
  if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 2005
    __ns.i = mdev->state.i;
#line 2005
    __ns.ldv_40583.disk = 4U;
#line 2005
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2005
    retcode = (int )tmp___3;
  } else {

  }
#line 2006
  spin_unlock_irq(& mdev->req_lock);
#line 2008
  if (retcode != -15) {
#line 2009
    goto ldv_54379;
  } else {

  }
#line 2011
  val___1.i = 0U;
#line 2011
  val___1.ldv_40583.conn = 12U;
#line 2011
  mask___1.i = 0U;
#line 2011
  mask___1.ldv_40583.conn = 31U;
#line 2011
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_54385: ;
#line 2002
  if (retcode == -15) {
#line 2003
    goto ldv_54384;
  } else {

  }
  ldv_54379: 
#line 2013
  drbd_resume_io(mdev);
#line 2015
  reply->ret_code = retcode;
#line 2016
  return (0);
}
}
#line 2019 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2023
  rv = drbd_bmio_set_n_write(mdev);
#line 2024
  drbd_suspend_al(mdev);
#line 2025
  return (rv);
}
}
#line 2028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2036
  drbd_suspend_io(mdev);
#line 2037
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2037
  if (tmp == 0) {
#line 2037
    goto ldv_54396;
  } else {

  }
#line 2037
  tmp___0 = get_current();
#line 2037
  __wait.flags = 0U;
#line 2037
  __wait.private = (void *)tmp___0;
#line 2037
  __wait.func = & autoremove_wake_function;
#line 2037
  __wait.task_list.next = & __wait.task_list;
#line 2037
  __wait.task_list.prev = & __wait.task_list;
  ldv_54399: 
#line 2037
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2037
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2037
  if (tmp___1 == 0) {
#line 2037
    goto ldv_54398;
  } else {

  }
#line 2037
  schedule();
#line 2037
  goto ldv_54399;
  ldv_54398: 
#line 2037
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54396: 
#line 2038
  drbd_flush_workqueue(mdev);
#line 2040
  val.i = 0U;
#line 2040
  val.ldv_40583.conn = 11U;
#line 2040
  mask.i = 0U;
#line 2040
  mask.ldv_40583.conn = 31U;
#line 2040
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2040
  retcode = (int )tmp___2;
#line 2042
  if (retcode <= 0) {
#line 2043
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2046
      val___0.i = 0U;
#line 2046
      val___0.ldv_40583.pdsk = 4U;
#line 2046
      mask___0.i = 0U;
#line 2046
      mask___0.ldv_40583.pdsk = 15U;
#line 2046
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2047
      if (retcode > 0) {
#line 2048
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2048
        if (tmp___3 != 0) {
#line 2051
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2054
      val___1.i = 0U;
#line 2054
      val___1.ldv_40583.conn = 11U;
#line 2054
      mask___1.i = 0U;
#line 2054
      mask___1.ldv_40583.conn = 31U;
#line 2054
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2056
  drbd_resume_io(mdev);
#line 2058
  reply->ret_code = retcode;
#line 2059
  return (0);
}
}
#line 2062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2065
  retcode = 101;
#line 2067
  val.i = 0U;
#line 2067
  val.ldv_40583.user_isp = 1U;
#line 2067
  mask.i = 0U;
#line 2067
  mask.ldv_40583.user_isp = 1U;
#line 2067
  tmp = drbd_request_state(mdev, mask, val);
#line 2067
  if (tmp == 2) {
#line 2068
    retcode = 134;
  } else {

  }
#line 2070
  reply->ret_code = retcode;
#line 2071
  return (0);
}
}
#line 2074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2077
  retcode = 101;
#line 2080
  val.i = 0U;
#line 2080
  val.ldv_40583.user_isp = 0U;
#line 2080
  mask.i = 0U;
#line 2080
  mask.ldv_40583.user_isp = 1U;
#line 2080
  tmp = drbd_request_state(mdev, mask, val);
#line 2080
  if (tmp == 2) {
#line 2081
    s = mdev->state;
#line 2082
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2083
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2086
      retcode = 135;
    }
  } else {

  }
#line 2090
  reply->ret_code = retcode;
#line 2091
  return (0);
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2097
  val.i = 0U;
#line 2097
  val.ldv_40583.susp = 1U;
#line 2097
  mask.i = 0U;
#line 2097
  mask.ldv_40583.susp = 1U;
#line 2097
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2099
  return (0);
}
}
#line 2102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2105
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 2105
  if (tmp != 0) {
#line 2106
    drbd_uuid_new_current(mdev);
#line 2107
    clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2109
  drbd_suspend_io(mdev);
#line 2110
  val.i = 0U;
#line 2110
  val.ldv_40583.susp = 0U;
#line 2110
  val.ldv_40583.susp_nod = 0U;
#line 2110
  val.ldv_40583.susp_fen = 0U;
#line 2110
  mask.i = 0U;
#line 2110
  mask.ldv_40583.susp = 1U;
#line 2110
  mask.ldv_40583.susp_nod = 1U;
#line 2110
  mask.ldv_40583.susp_fen = 1U;
#line 2110
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2111
  if (reply->ret_code == 1) {
#line 2112
    if ((int )mdev->state.ldv_40583.conn <= 9) {
#line 2113
      tl_clear(mdev);
    } else {

    }
#line 2114
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2115
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2117
  drbd_resume_io(mdev);
#line 2119
  return (0);
}
}
#line 2122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2125
  val.i = 0U;
#line 2125
  val.ldv_40583.disk = 5U;
#line 2125
  mask.i = 0U;
#line 2125
  mask.ldv_40583.disk = 15U;
#line 2125
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2126
  return (0);
}
}
#line 2129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2134
  tl = (unsigned short *)(& reply->tag_list);
#line 2136
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2136
  if (tmp != 0) {
#line 2137
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2138
    put_ldev(mdev);
  } else {

  }
#line 2141
  tmp___0 = get_net_conf(mdev);
#line 2141
  if (tmp___0 != 0) {
#line 2142
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2143
    put_net_conf(mdev);
  } else {

  }
#line 2145
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2147
  tmp___1 = tl;
#line 2147
  tl = tl + 1;
#line 2147
  __gu_p = (void *)tmp___1;
#line 2147
  switch (2UL) {
  case 1UL: 
#line 2147
  *((u8 *)__gu_p) = 0U;
#line 2147
  goto ldv_54468;
  case 2UL: 
#line 2147
  put_unaligned_le16(0, __gu_p);
#line 2147
  goto ldv_54468;
  case 4UL: 
#line 2147
  put_unaligned_le32(0U, __gu_p);
#line 2147
  goto ldv_54468;
  case 8UL: 
#line 2147
  put_unaligned_le64(0ULL, __gu_p);
#line 2147
  goto ldv_54468;
  default: 
#line 2147
  __bad_unaligned_access_size();
#line 2147
  goto ldv_54468;
  }
  ldv_54468: ;
#line 2149
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2155
  tl = (unsigned short *)(& reply->tag_list);
#line 2156
  s = mdev->state;
#line 2160
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2163
  if ((int )s.ldv_40583.conn > 15 && (int )s.ldv_40583.conn <= 21) {
#line 2164
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2164
    if (tmp != 0) {
#line 2165
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2166
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2167
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2170
  tmp___0 = tl;
#line 2170
  tl = tl + 1;
#line 2170
  __gu_p = (void *)tmp___0;
#line 2170
  switch (2UL) {
  case 1UL: 
#line 2170
  *((u8 *)__gu_p) = 0U;
#line 2170
  goto ldv_54484;
  case 2UL: 
#line 2170
  put_unaligned_le16(0, __gu_p);
#line 2170
  goto ldv_54484;
  case 4UL: 
#line 2170
  put_unaligned_le32(0U, __gu_p);
#line 2170
  goto ldv_54484;
  case 8UL: 
#line 2170
  put_unaligned_le64(0ULL, __gu_p);
#line 2170
  goto ldv_54484;
  default: 
#line 2170
  __bad_unaligned_access_size();
#line 2170
  goto ldv_54484;
  }
  ldv_54484: ;
#line 2172
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2180
  tl = (unsigned short *)(& reply->tag_list);
#line 2182
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2182
  if (tmp___0 != 0) {
#line 2184
    tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 2184
    flags = _raw_spin_lock_irqsave(tmp);
#line 2185
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2186
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2187
    spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 2188
    put_ldev(mdev);
  } else {

  }
#line 2190
  tmp___1 = tl;
#line 2190
  tl = tl + 1;
#line 2190
  __gu_p = (void *)tmp___1;
#line 2190
  switch (2UL) {
  case 1UL: 
#line 2190
  *((u8 *)__gu_p) = 0U;
#line 2190
  goto ldv_54501;
  case 2UL: 
#line 2190
  put_unaligned_le16(0, __gu_p);
#line 2190
  goto ldv_54501;
  case 4UL: 
#line 2190
  put_unaligned_le32(0U, __gu_p);
#line 2190
  goto ldv_54501;
  case 8UL: 
#line 2190
  put_unaligned_le64(0ULL, __gu_p);
#line 2190
  goto ldv_54501;
  default: 
#line 2190
  __bad_unaligned_access_size();
#line 2190
  goto ldv_54501;
  }
  ldv_54501: ;
#line 2192
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2207
  tl = (unsigned short *)(& reply->tag_list);
#line 2209
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2209
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2209
    rv = tmp != 0;
  } else {
#line 2209
    rv = 2;
  }
#line 2212
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2213
  tmp___0 = tl;
#line 2213
  tl = tl + 1;
#line 2213
  __gu_p = (void *)tmp___0;
#line 2213
  switch (2UL) {
  case 1UL: 
#line 2213
  *((u8 *)__gu_p) = 0U;
#line 2213
  goto ldv_54515;
  case 2UL: 
#line 2213
  put_unaligned_le16(0, __gu_p);
#line 2213
  goto ldv_54515;
  case 4UL: 
#line 2213
  put_unaligned_le32(0U, __gu_p);
#line 2213
  goto ldv_54515;
  case 8UL: 
#line 2213
  put_unaligned_le64(0ULL, __gu_p);
#line 2213
  goto ldv_54515;
  default: 
#line 2213
  __bad_unaligned_access_size();
#line 2213
  goto ldv_54515;
  }
  ldv_54515: ;
#line 2215
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2222
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2222
  args.stop_sector = 0xffffffffffffffffULL;
#line 2227
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2227
  if (tmp == 0) {
#line 2228
    reply->ret_code = 126;
#line 2229
    return (0);
  } else {

  }
#line 2234
  drbd_suspend_io(mdev);
#line 2235
  tmp___0 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2235
  if (tmp___0 == 0) {
#line 2235
    goto ldv_54526;
  } else {

  }
#line 2235
  tmp___1 = get_current();
#line 2235
  __wait.flags = 0U;
#line 2235
  __wait.private = (void *)tmp___1;
#line 2235
  __wait.func = & autoremove_wake_function;
#line 2235
  __wait.task_list.next = & __wait.task_list;
#line 2235
  __wait.task_list.prev = & __wait.task_list;
  ldv_54529: 
#line 2235
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2235
  tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2235
  if (tmp___2 == 0) {
#line 2235
    goto ldv_54528;
  } else {

  }
#line 2235
  schedule();
#line 2235
  goto ldv_54529;
  ldv_54528: 
#line 2235
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54526: 
#line 2238
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff8UL;
#line 2239
  mdev->ov_stop_sector = (sector_t )args.stop_sector;
#line 2240
  val.i = 0U;
#line 2240
  val.ldv_40583.conn = 18U;
#line 2240
  mask.i = 0U;
#line 2240
  mask.ldv_40583.conn = 31U;
#line 2240
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2241
  drbd_resume_io(mdev);
#line 2242
  return (0);
}
}
#line 2246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2249
  retcode = 101;
#line 2250
  skip_initial_sync = 0;
#line 2255
  memset((void *)(& args), 0, 4UL);
#line 2256
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2256
  if (tmp == 0) {
#line 2257
    reply->ret_code = 126;
#line 2258
    return (0);
  } else {

  }
#line 2261
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 2263
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2263
  if (tmp___0 == 0) {
#line 2264
    retcode = 138;
#line 2265
    goto out;
  } else {

  }
#line 2269
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2271
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2272
    skip_initial_sync = 1;
  } else
#line 2273
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2274
    retcode = 151;
#line 2275
    goto out_dec;
  } else {

  }
#line 2278
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2279
  drbd_uuid_new_current(mdev);
#line 2281
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2282
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2284
    if (err != 0) {
#line 2285
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2286
      retcode = 118;
    } else {

    }
#line 2288
    if (skip_initial_sync != 0) {
#line 2289
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2290
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2291
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2292
      spin_lock_irq(& mdev->req_lock);
#line 2293
      __ns.i = mdev->state.i;
#line 2293
      __ns.ldv_40583.disk = 8U;
#line 2293
      __ns.ldv_40583.pdsk = 8U;
#line 2293
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2295
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2299
  drbd_md_sync(mdev);
  out_dec: 
#line 2301
  put_ldev(mdev);
  out: 
#line 2303
  mutex_unlock(& mdev->state_mutex);
#line 2305
  reply->ret_code = retcode;
#line 2306
  return (0);
}
}
#line 2316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2316
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1320}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 2349
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2355
  reply_size = 34;
#line 2359
  tmp = ldv_try_module_get_7(& __this_module);
#line 2359
  if (tmp) {
#line 2359
    tmp___0 = 0;
  } else {
#line 2359
    tmp___0 = 1;
  }
#line 2359
  if (tmp___0) {
#line 2360
    printk("\vdrbd: try_module_get() failed!\n");
#line 2361
    return;
  } else {

  }
#line 2364
  tmp___1 = capable(21);
#line 2364
  if (tmp___1) {
#line 2364
    tmp___2 = 0;
  } else {
#line 2364
    tmp___2 = 1;
  }
#line 2364
  if (tmp___2) {
#line 2365
    retcode = 152;
#line 2366
    goto fail;
  } else {

  }
#line 2369
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2371
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2372
    retcode = 127;
#line 2373
    goto fail;
  } else {

  }
#line 2376
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2378
    retcode = 137;
#line 2379
    goto fail;
  } else {

  }
#line 2382
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2385
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2386
    retcode = 137;
#line 2387
    goto fail;
  } else {

  }
#line 2390
  reply_size = cm->reply_body_size + reply_size;
#line 2393
  tmp___3 = kzalloc((size_t )reply_size, 208U);
#line 2393
  cn_reply = (struct cn_msg *)tmp___3;
#line 2394
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2395
    retcode = 122;
#line 2396
    goto fail;
  } else {

  }
#line 2398
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2400
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2402
  reply->minor = nlp->drbd_minor;
#line 2403
  reply->ret_code = 101;
#line 2406
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2408
  cn_reply->id = req->id;
#line 2409
  cn_reply->seq = req->seq;
#line 2410
  cn_reply->ack = req->ack + 1U;
#line 2411
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2412
  cn_reply->flags = 0U;
#line 2414
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2415
  if (rr != 0 && rr != -3) {
#line 2416
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2418
  kfree((void const   *)cn_reply);
#line 2419
  ldv_module_put_8(& __this_module);
#line 2420
  return;
  fail: 
#line 2422
  drbd_nl_send_reply(req, retcode);
#line 2423
  ldv_module_put_9(& __this_module);
#line 2424
  return;
}
}
#line 2426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2432
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2433
  len = (int )len < (int )l ? len : l;
#line 2434
  tmp = tl;
#line 2434
  tl = tl + 1;
#line 2434
  __gu_p = (void *)tmp;
#line 2434
  switch (2UL) {
  case 1UL: 
#line 2434
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2434
  goto ldv_54578;
  case 2UL: 
#line 2434
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2434
  goto ldv_54578;
  case 4UL: 
#line 2434
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2434
  goto ldv_54578;
  case 8UL: 
#line 2434
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2434
  goto ldv_54578;
  default: 
#line 2434
  __bad_unaligned_access_size();
#line 2434
  goto ldv_54578;
  }
  ldv_54578: 
#line 2435
  tmp___0 = tl;
#line 2435
  tl = tl + 1;
#line 2435
  __gu_p___0 = (void *)tmp___0;
#line 2435
  switch (2UL) {
  case 1UL: 
#line 2435
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2435
  goto ldv_54585;
  case 2UL: 
#line 2435
  put_unaligned_le16((int )len, __gu_p___0);
#line 2435
  goto ldv_54585;
  case 4UL: 
#line 2435
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2435
  goto ldv_54585;
  case 8UL: 
#line 2435
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2435
  goto ldv_54585;
  default: 
#line 2435
  __bad_unaligned_access_size();
#line 2435
  goto ldv_54585;
  }
  ldv_54585: 
#line 2436
  __len = (size_t )len;
#line 2436
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2437
  tl = tl + (unsigned long )len;
#line 2438
  if (nul_terminated != 0) {
#line 2439
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2440
  return (tl);
}
}
#line 2444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2446
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2446
  return (tmp);
}
}
#line 2450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2452
  tmp = strlen(str);
#line 2452
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2452
  return (tmp___0);
}
}
#line 2456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2458
  tmp = tl;
#line 2458
  tl = tl + 1;
#line 2458
  __gu_p = (void *)tmp;
#line 2458
  switch (2UL) {
  case 1UL: 
#line 2458
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2458
  goto ldv_54611;
  case 2UL: 
#line 2458
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2458
  goto ldv_54611;
  case 4UL: 
#line 2458
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2458
  goto ldv_54611;
  case 8UL: 
#line 2458
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2458
  goto ldv_54611;
  default: 
#line 2458
  __bad_unaligned_access_size();
#line 2458
  goto ldv_54611;
  }
  ldv_54611: ;
#line 2459
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2461
  tmp___0 = tl;
#line 2461
  tl = tl + 1;
#line 2461
  __gu_p___0 = (void *)tmp___0;
#line 2461
  switch (2UL) {
  case 1UL: 
#line 2461
  *((u8 *)__gu_p___0) = 4U;
#line 2461
  goto ldv_54619;
  case 2UL: 
#line 2461
  put_unaligned_le16(4, __gu_p___0);
#line 2461
  goto ldv_54619;
  case 4UL: 
#line 2461
  put_unaligned_le32(4U, __gu_p___0);
#line 2461
  goto ldv_54619;
  case 8UL: 
#line 2461
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2461
  goto ldv_54619;
  default: 
#line 2461
  __bad_unaligned_access_size();
#line 2461
  goto ldv_54619;
  }
  ldv_54619: 
#line 2462
  __gu_p___1 = (void *)tl;
#line 2462
  switch (4UL) {
  case 1UL: 
#line 2462
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2462
  goto ldv_54626;
  case 2UL: 
#line 2462
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2462
  goto ldv_54626;
  case 4UL: 
#line 2462
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2462
  goto ldv_54626;
  case 8UL: 
#line 2462
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2462
  goto ldv_54626;
  default: 
#line 2462
  __bad_unaligned_access_size();
#line 2462
  goto ldv_54626;
  }
  ldv_54626: 
#line 2463
  tl = tl + 4U;
#line 2464
  goto ldv_54631;
  case 16384U: 
#line 2466
  tmp___1 = tl;
#line 2466
  tl = tl + 1;
#line 2466
  __gu_p___2 = (void *)tmp___1;
#line 2466
  switch (2UL) {
  case 1UL: 
#line 2466
  *((u8 *)__gu_p___2) = 8U;
#line 2466
  goto ldv_54635;
  case 2UL: 
#line 2466
  put_unaligned_le16(8, __gu_p___2);
#line 2466
  goto ldv_54635;
  case 4UL: 
#line 2466
  put_unaligned_le32(8U, __gu_p___2);
#line 2466
  goto ldv_54635;
  case 8UL: 
#line 2466
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2466
  goto ldv_54635;
  default: 
#line 2466
  __bad_unaligned_access_size();
#line 2466
  goto ldv_54635;
  }
  ldv_54635: 
#line 2467
  __gu_p___3 = (void *)tl;
#line 2467
  switch (8UL) {
  case 1UL: 
#line 2467
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2467
  goto ldv_54642;
  case 2UL: 
#line 2467
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2467
  goto ldv_54642;
  case 4UL: 
#line 2467
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2467
  goto ldv_54642;
  case 8UL: 
#line 2467
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2467
  goto ldv_54642;
  default: 
#line 2467
  __bad_unaligned_access_size();
#line 2467
  goto ldv_54642;
  }
  ldv_54642: 
#line 2468
  tl = tl + 8U;
#line 2469
  goto ldv_54631;
  default: ;
  }
  ldv_54631: ;
#line 2474
  return (tl);
}
}
#line 2477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2483
  cn_reply = (struct cn_msg *)(& buffer);
#line 2484
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2486
  tl = (unsigned short *)(& reply->tag_list);
#line 2490
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2492
  tmp = tl;
#line 2492
  tl = tl + 1;
#line 2492
  __gu_p = (void *)tmp;
#line 2492
  switch (2UL) {
  case 1UL: 
#line 2492
  *((u8 *)__gu_p) = 0U;
#line 2492
  goto ldv_54658;
  case 2UL: 
#line 2492
  put_unaligned_le16(0, __gu_p);
#line 2492
  goto ldv_54658;
  case 4UL: 
#line 2492
  put_unaligned_le32(0U, __gu_p);
#line 2492
  goto ldv_54658;
  case 8UL: 
#line 2492
  put_unaligned_le64(0ULL, __gu_p);
#line 2492
  goto ldv_54658;
  default: 
#line 2492
  __bad_unaligned_access_size();
#line 2492
  goto ldv_54658;
  }
  ldv_54658: 
#line 2494
  cn_reply->id.idx = 8U;
#line 2495
  cn_reply->id.val = 1U;
#line 2497
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2497
  cn_reply->seq = (__u32 )tmp___0;
#line 2498
  cn_reply->ack = 0U;
#line 2499
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2501
  cn_reply->flags = 0U;
#line 2503
  reply->packet_type = 17;
#line 2504
  reply->minor = mdev_to_minor(mdev);
#line 2505
  reply->ret_code = 101;
#line 2507
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2508
  return;
}
}
#line 2510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2516
  cn_reply = (struct cn_msg *)(& buffer);
#line 2517
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2519
  tl = (unsigned short *)(& reply->tag_list);
#line 2523
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2524
  tmp = tl;
#line 2524
  tl = tl + 1;
#line 2524
  __gu_p = (void *)tmp;
#line 2524
  switch (2UL) {
  case 1UL: 
#line 2524
  *((u8 *)__gu_p) = 0U;
#line 2524
  goto ldv_54673;
  case 2UL: 
#line 2524
  put_unaligned_le16(0, __gu_p);
#line 2524
  goto ldv_54673;
  case 4UL: 
#line 2524
  put_unaligned_le32(0U, __gu_p);
#line 2524
  goto ldv_54673;
  case 8UL: 
#line 2524
  put_unaligned_le64(0ULL, __gu_p);
#line 2524
  goto ldv_54673;
  default: 
#line 2524
  __bad_unaligned_access_size();
#line 2524
  goto ldv_54673;
  }
  ldv_54673: 
#line 2526
  cn_reply->id.idx = 8U;
#line 2527
  cn_reply->id.val = 1U;
#line 2529
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2529
  cn_reply->seq = (__u32 )tmp___0;
#line 2530
  cn_reply->ack = 0U;
#line 2531
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2533
  cn_reply->flags = 0U;
#line 2535
  reply->packet_type = 20;
#line 2536
  reply->minor = mdev_to_minor(mdev);
#line 2537
  reply->ret_code = 101;
#line 2539
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2540
  return;
}
}
#line 2542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2553
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2554
    return;
  } else {

  }
#line 2555
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2556
    return;
  } else {

  }
#line 2564
  tmp = kzalloc(33026UL, 16U);
#line 2564
  cn_reply = (struct cn_msg *)tmp;
#line 2571
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2572
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2574
    return;
  } else {

  }
#line 2577
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2578
  tl = (unsigned short *)(& reply->tag_list);
#line 2580
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2581
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2582
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2583
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2584
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_49794.block_id));
#line 2587
  __min1 = e->size;
#line 2587
  __min2 = 32768U;
#line 2587
  len = __min1 < __min2 ? __min1 : __min2;
#line 2588
  tmp___0 = tl;
#line 2588
  tl = tl + 1;
#line 2588
  __gu_p = (void *)tmp___0;
#line 2588
  switch (2UL) {
  case 1UL: 
#line 2588
  *((u8 *)__gu_p) = 50U;
#line 2588
  goto ldv_54696;
  case 2UL: 
#line 2588
  put_unaligned_le16(49202, __gu_p);
#line 2588
  goto ldv_54696;
  case 4UL: 
#line 2588
  put_unaligned_le32(49202U, __gu_p);
#line 2588
  goto ldv_54696;
  case 8UL: 
#line 2588
  put_unaligned_le64(49202ULL, __gu_p);
#line 2588
  goto ldv_54696;
  default: 
#line 2588
  __bad_unaligned_access_size();
#line 2588
  goto ldv_54696;
  }
  ldv_54696: 
#line 2589
  tmp___1 = tl;
#line 2589
  tl = tl + 1;
#line 2589
  __gu_p___0 = (void *)tmp___1;
#line 2589
  switch (2UL) {
  case 1UL: 
#line 2589
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2589
  goto ldv_54703;
  case 2UL: 
#line 2589
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2589
  goto ldv_54703;
  case 4UL: 
#line 2589
  put_unaligned_le32(len, __gu_p___0);
#line 2589
  goto ldv_54703;
  case 8UL: 
#line 2589
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2589
  goto ldv_54703;
  default: 
#line 2589
  __bad_unaligned_access_size();
#line 2589
  goto ldv_54703;
  }
  ldv_54703: 
#line 2591
  page = e->pages;
#line 2592
  goto ldv_54719;
  ldv_54718: 
#line 2593
  tmp___2 = kmap_atomic(page);
#line 2593
  d = tmp___2;
#line 2594
  __min1___0 = len;
#line 2594
  __min2___0 = 4096U;
#line 2594
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2595
  __len = (size_t )l;
#line 2595
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2596
  __kunmap_atomic(d);
#line 2597
  tl = tl + (unsigned long )l;
#line 2598
  len = len - l;
#line 2599
  if (len == 0U) {
#line 2600
    goto ldv_54717;
  } else {

  }
#line 2592
  page = page_chain_next(page);
  ldv_54719: ;
#line 2592
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2592
    tmp___3 = page_chain_next(page);
#line 2592
    __builtin_prefetch((void const   *)tmp___3);
#line 2592
    if (1 != 0) {
#line 2593
      goto ldv_54718;
    } else {
#line 2595
      goto ldv_54717;
    }
  } else {

  }
  ldv_54717: 
#line 2602
  tmp___4 = tl;
#line 2602
  tl = tl + 1;
#line 2602
  __gu_p___1 = (void *)tmp___4;
#line 2602
  switch (2UL) {
  case 1UL: 
#line 2602
  *((u8 *)__gu_p___1) = 0U;
#line 2602
  goto ldv_54722;
  case 2UL: 
#line 2602
  put_unaligned_le16(0, __gu_p___1);
#line 2602
  goto ldv_54722;
  case 4UL: 
#line 2602
  put_unaligned_le32(0U, __gu_p___1);
#line 2602
  goto ldv_54722;
  case 8UL: 
#line 2602
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2602
  goto ldv_54722;
  default: 
#line 2602
  __bad_unaligned_access_size();
#line 2602
  goto ldv_54722;
  }
  ldv_54722: 
#line 2604
  cn_reply->id.idx = 8U;
#line 2605
  cn_reply->id.val = 1U;
#line 2607
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2607
  cn_reply->seq = (__u32 )tmp___5;
#line 2608
  cn_reply->ack = 0U;
#line 2609
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2611
  cn_reply->flags = 0U;
#line 2613
  reply->packet_type = 24;
#line 2614
  reply->minor = mdev_to_minor(mdev);
#line 2615
  reply->ret_code = 101;
#line 2617
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2618
  kfree((void const   *)cn_reply);
#line 2619
  return;
}
}
#line 2621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2627
  cn_reply = (struct cn_msg *)(& buffer);
#line 2628
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2630
  tl = (unsigned short *)(& reply->tag_list);
#line 2635
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2635
  if (tmp == 0) {
#line 2636
    return;
  } else {

  }
#line 2637
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2638
  put_ldev(mdev);
#line 2640
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2641
  tmp___0 = tl;
#line 2641
  tl = tl + 1;
#line 2641
  __gu_p = (void *)tmp___0;
#line 2641
  switch (2UL) {
  case 1UL: 
#line 2641
  *((u8 *)__gu_p) = 0U;
#line 2641
  goto ldv_54738;
  case 2UL: 
#line 2641
  put_unaligned_le16(0, __gu_p);
#line 2641
  goto ldv_54738;
  case 4UL: 
#line 2641
  put_unaligned_le32(0U, __gu_p);
#line 2641
  goto ldv_54738;
  case 8UL: 
#line 2641
  put_unaligned_le64(0ULL, __gu_p);
#line 2641
  goto ldv_54738;
  default: 
#line 2641
  __bad_unaligned_access_size();
#line 2641
  goto ldv_54738;
  }
  ldv_54738: 
#line 2643
  cn_reply->id.idx = 8U;
#line 2644
  cn_reply->id.val = 1U;
#line 2646
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2646
  cn_reply->seq = (__u32 )tmp___1;
#line 2647
  cn_reply->ack = 0U;
#line 2648
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2650
  cn_reply->flags = 0U;
#line 2652
  reply->packet_type = 23;
#line 2653
  reply->minor = mdev_to_minor(mdev);
#line 2654
  reply->ret_code = 101;
#line 2656
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2657
  return;
}
}
#line 2659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2662
  try = 10;
#line 2664
  cn_id_drbd.val = 1U;
  ldv_54750: 
#line 2666
  cn_id_drbd.idx = cn_idx;
#line 2667
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2668
  if (err == 0) {
#line 2669
    goto ldv_54749;
  } else {

  }
#line 2670
  cn_idx = cn_idx + 6977U;
#line 2671
  tmp = try;
#line 2671
  try = try - 1;
#line 2671
  if (tmp != 0) {
#line 2672
    goto ldv_54750;
  } else {

  }
  ldv_54749: ;
#line 2673
  if (err != 0) {
#line 2674
    printk("\vdrbd: cn_drbd failed to register\n");
#line 2675
    return (err);
  } else {

  }
#line 2678
  return (0);
}
}
#line 2681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2685
  cn_id_drbd.idx = cn_idx;
#line 2686
  cn_id_drbd.val = 1U;
#line 2688
  cn_del_callback(& cn_id_drbd);
#line 2689
  return;
}
}
#line 2691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2694
  cn_reply = (struct cn_msg *)(& buffer);
#line 2695
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2699
  memset((void *)(& buffer), 0, 32UL);
#line 2700
  cn_reply->id = req->id;
#line 2702
  cn_reply->seq = req->seq;
#line 2703
  cn_reply->ack = req->ack + 1U;
#line 2704
  cn_reply->len = 12U;
#line 2705
  cn_reply->flags = 0U;
#line 2707
  reply->packet_type = 27;
#line 2708
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2709
  reply->ret_code = ret_code;
#line 2711
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2712
  if (rr != 0 && rr != -3) {
#line 2713
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2714
  return;
}
}
#line 2754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_main8_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2766
  LDV_IN_INTERRUPT = 1;
#line 2775
  ldv_initialize();
#line 2777
  goto ldv_54782;
  ldv_54781: 
#line 2780
  tmp = nondet_int();
#line 2780
  switch (tmp) {
  default: ;
#line 2782
  goto ldv_54780;
  }
  ldv_54780: ;
  ldv_54782: 
#line 2777
  tmp___0 = nondet_int();
#line 2777
  if (tmp___0 != 0) {
#line 2778
    goto ldv_54781;
  } else {

  }


#line 2791
  ldv_check_final_state();
#line 2794
  return;
}
}
#line 2798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
bool ldv_try_module_get_7(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
#line 2803
  tmp = ldv_try_module_get(ldv_func_arg1);
#line 2803
  return (tmp != 0);
}
}
#line 2806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_8(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2811
  ldv_module_put(ldv_func_arg1);
#line 2812
  return;
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_9(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2819
  ldv_module_put(ldv_func_arg1);
#line 2820
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
