/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 171 "include/linux/types.h"
typedef __u16 __le16;
#line 172 "include/linux/types.h"
typedef __u16 __be16;
#line 174 "include/linux/types.h"
typedef __u32 __be32;
#line 179 "include/linux/types.h"
typedef __u32 __wsum;
#line 182 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 200 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 200 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 201 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 206
struct hlist_node;
#line 206 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 210 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 121 "include/linux/kernel.h"
struct completion;
#line 122
struct pt_regs;
#line 227
struct pid;
#line 744
struct task_struct;
#line 745
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1859_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1859_8 ldv_1859 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2078_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2093_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2094_14 {
   struct __anonstruct_ldv_2078_15 ldv_2078 ;
   struct __anonstruct_ldv_2093_16 ldv_2093 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2094_14 ldv_2094 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4681_20 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4687_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4688_19 {
   struct __anonstruct_ldv_4681_20 ldv_4681 ;
   struct __anonstruct_ldv_4687_21 ldv_4687 ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4697_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4688_19 ldv_4688 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4697_22 ldv_4697 ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 652 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 176 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 551 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5622_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5623_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5622_27 ldv_5622 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5623_26 ldv_5623 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 65
struct compat_timespec;
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5821_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 66
struct pollfd;
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5844_29 {
   struct __anonstruct_ldv_5821_30 ldv_5821 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5844_29 ldv_5844 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 396 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 43 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 84 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 406
struct hlist_nulls_node;
#line 406 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 626 "include/linux/mmzone.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 740 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "include/linux/ioport.h"
struct device;
#line 54 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   unsigned long wakeup_count ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct kobject;
#line 444
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 445 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 97 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 115
struct sysfs_dirent;
#line 180 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106
struct kobj_ns_type_operations;
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 114 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 121 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 138
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 144
struct sock;
#line 145 "include/linux/kobject.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 173 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 248
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_11225_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_11225_110 ldv_11225 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 567 "include/linux/rcupdate.h"
struct tracepoint;
#line 568 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 28 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 87 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 383
struct module_sect_attrs;
#line 383
struct module_notes_attrs;
#line 383
struct ftrace_event_call;
#line 383 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12375_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12376_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12375_123 ldv_12375 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12381_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12384_124 {
   struct __anonstruct_ldv_12381_125 ldv_12381 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12388_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12376_122 ldv_12376 ;
   union __anonunion_ldv_12384_124 ldv_12384 ;
   union __anonunion_ldv_12388_126 ldv_12388 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12846 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12846 socket_state;
#line 171 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 172
struct pipe_inode_info;
#line 173
struct inode;
#line 174
struct net;
#line 191
struct fasync_struct;
#line 191 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 18
struct user_struct;
#line 19
struct writeback_control;
#line 161 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 178 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 817
struct hrtimer_clock_base;
#line 818
struct hrtimer_cpu_base;
#line 827
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 832 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_19067_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19068_131 {
   __wsum csum ;
   struct __anonstruct_ldv_19067_132 ldv_19067 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19098_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19068_131 ldv_19068 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19098_133 ldv_19098 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 488
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 58 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 315 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 315 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 397 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 204
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 211
struct pid_namespace;
#line 211 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 423 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 162 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 573 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 573 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 573 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 576 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 625
struct backing_dev_info;
#line 626 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 647
struct hd_struct;
#line 647
struct gendisk;
#line 647 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 717
struct posix_acl;
#line 718
struct inode_operations;
#line 718
struct file_lock;
#line 718
struct cdev;
#line 718 "include/linux/fs.h"
union __anonunion_ldv_23058_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 718 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23058_152 ldv_23058 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 881 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 889 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 912 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 912 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1036
struct files_struct;
#line 1036 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1037 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1042 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1141 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1320
struct file_system_type;
#line 1320
struct super_operations;
#line 1320
struct xattr_handler;
#line 1320
struct mtd_info;
#line 1320 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1436 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1474
struct block_device_operations;
#line 1475 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1515 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1558 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1233
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 99 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_161 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_161 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_164 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_167 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_168 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_162 {
   int _pad[28U] ;
   struct __anonstruct__kill_163 _kill ;
   struct __anonstruct__timer_164 _timer ;
   struct __anonstruct__rt_165 _rt ;
   struct __anonstruct__sigchld_166 _sigchld ;
   struct __anonstruct__sigfault_167 _sigfault ;
   struct __anonstruct__sigpoll_168 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_162 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_171 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_171 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_28916_172 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_173 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_174 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_28916_172 ldv_28916 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_173 type_data ;
   union __anonunion_payload_174 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 357
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_175 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_175 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 398 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 440 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 448 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 455 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 472 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 508
struct tty_struct;
#line 508
struct taskstats;
#line 508
struct tty_audit_buf;
#line 508 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
};
#line 655 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 697
struct reclaim_state;
#line 698 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 716 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 990
struct io_context;
#line 1013
struct rq;
#line 1014 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1077 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1082 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1117 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1143
struct rt_rq;
#line 1143 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1160
struct mem_cgroup;
#line 1160 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1496
struct css_set;
#line 1496
struct compat_robust_list_head;
#line 1496 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 321 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3000 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 785 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_33829_180 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_33829_180 ldv_33829 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_181 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_181 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_33971_182 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_33977_183 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_33985_184 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_33971_182 ldv_33971 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_33977_183 ldv_33977 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_33985_184 ldv_33985 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_185 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_185 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 695
struct request_sock_ops;
#line 696
struct timewait_sock_ops;
#line 697
struct inet_hashinfo;
#line 698
struct raw_hashinfo;
#line 699
struct udp_table;
#line 699 "include/net/sock.h"
union __anonunion_h_186 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 699 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_186 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 172 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 185 "include/linux/drbd.h"
struct __anonstruct_ldv_35127_187 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 185 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35127_187 ldv_35127 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_188 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_188 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_189 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_189 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 56
struct bdi_writeback;
#line 37 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 44 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 60 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 371 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_38683_197 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_38683_197 ldv_38683 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 185 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 186 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 187 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 188 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 189 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 190 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 198 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 200 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 201 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 202 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 203
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 210 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 216 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 225 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 252 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1166 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1187 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1188 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1189 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1190 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1191 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1232 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct __anonstruct_ldv_40156_204 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 492 "include/linux/ipv6.h"
union __anonunion_ldv_40158_203 {
   struct __anonstruct_ldv_40156_204 ldv_40156 ;
   struct rcu_head rcu ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_40158_203 ldv_40158 ;
};
#line 49 "include/linux/route.h"
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 225 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1506 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 621
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 628 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 649
struct drbd_work;
#line 659 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 663
struct drbd_tl_epoch;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 702 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 746 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   u64 block_id ;
};
#line 798
struct drbd_bitmap;
#line 799 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 851 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 861 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 138 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 903 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 910
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 917 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1097
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 139 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 146
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 664 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 735 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    nothing = 21
} ;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 251
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 525
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 727
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1105
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1418
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3371
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3648 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 148 "include/linux/slab.h"
enum kobj_ns_type;
#line 148
enum kobj_ns_type;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_207 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_207 updates[62U] ;
   u32 xor_sum ;
};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 146 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 185 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30205 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 173 "include/linux/types.h"
typedef __u32 __le32;
#line 175 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 692 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    AFTER_LAST_ERR_CODE = 154
} ;
#line 300 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 336 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 125 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 134 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 101 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 182
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 192
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 139 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 265
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1935;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1935;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1935;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1935;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1935: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4356: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4356;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 550 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 151
extern int mutex_trylock(struct mutex * ) ;
#line 154
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 158
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 163
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 44
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5865;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5865;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5865;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5865;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5865: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5623.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5623.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5623.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5623.rlock, flags);
#line 340
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 120 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 171 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 173
  return (1);
}
}
#line 398 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 402
  return;
}
}
#line 39 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13847: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13847;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 152 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 158 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 160
  if (size == 0UL) {
#line 161
    return (0);
  } else {

  }
#line 163
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 166
  if (size > 64UL && size <= 96UL) {
#line 167
    return (1);
  } else {

  }
#line 168
  if (size > 128UL && size <= 192UL) {
#line 169
    return (2);
  } else {

  }
#line 170
  if (size <= 8UL) {
#line 170
    return (3);
  } else {

  }
#line 171
  if (size <= 16UL) {
#line 171
    return (4);
  } else {

  }
#line 172
  if (size <= 32UL) {
#line 172
    return (5);
  } else {

  }
#line 173
  if (size <= 64UL) {
#line 173
    return (6);
  } else {

  }
#line 174
  if (size <= 128UL) {
#line 174
    return (7);
  } else {

  }
#line 175
  if (size <= 256UL) {
#line 175
    return (8);
  } else {

  }
#line 176
  if (size <= 512UL) {
#line 176
    return (9);
  } else {

  }
#line 177
  if (size <= 1024UL) {
#line 177
    return (10);
  } else {

  }
#line 178
  if (size <= 2048UL) {
#line 178
    return (11);
  } else {

  }
#line 179
  if (size <= 4096UL) {
#line 179
    return (12);
  } else {

  }
#line 184
  if (size <= 8192UL) {
#line 184
    return (13);
  } else {

  }
#line 185
  if (size <= 16384UL) {
#line 185
    return (14);
  } else {

  }
#line 186
  if (size <= 32768UL) {
#line 186
    return (15);
  } else {

  }
#line 187
  if (size <= 65536UL) {
#line 187
    return (16);
  } else {

  }
#line 188
  if (size <= 131072UL) {
#line 188
    return (17);
  } else {

  }
#line 189
  if (size <= 262144UL) {
#line 189
    return (18);
  } else {

  }
#line 190
  if (size <= 524288UL) {
#line 190
    return (19);
  } else {

  }
#line 191
  if (size <= 1048576UL) {
#line 191
    return (20);
  } else {

  }
#line 192
  if (size <= 2097152UL) {
#line 192
    return (21);
  } else {

  }
#line 193
  return (-1);
}
}
#line 210 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 212
  tmp = kmalloc_index(size);
#line 212
  index = tmp;
#line 214
  if (index == 0) {
#line 215
    return (0);
  } else {

  }
#line 217
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 221
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 224
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 597 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 599
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2202 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 355 "include/linux/sched.h"
extern void schedule(void) ;
#line 2346
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable();
#line 79
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 752 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 754
  return ((bdev->bd_disk)->queue);
}
}
#line 925
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1124
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1346
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1347
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1348
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1349
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1350
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1351
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1353
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1356
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1358
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1359
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1360
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1361
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1362
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1363
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1365
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1366
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1367
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1368
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1370
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1371
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1372
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1375
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1378
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1381
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1382
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1384
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1399
rwlock_t global_state_lock ;
#line 1416
char *ppsize(char *buf , unsigned long long size ) ;
#line 1435
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1678 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1684
  _raw_read_lock(& global_state_lock);
#line 1685
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1686
  _raw_read_unlock(& global_state_lock);
#line 1688
  return (rv);
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43384;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35127.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35127.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43384;
  }
  ldv_43384: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1775 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1777
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1780
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1783
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2045 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2048
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 2048
  if (tmp != 0) {
#line 2049
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2050
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 2050
  if (tmp___0 < 0) {
#line 2050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2050);
  } else {

  }
#line 2051
  return;
}
}
#line 2054 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2058
  atomic_inc(& mdev->local_cnt);
#line 2059
  io_allowed = (unsigned int )mdev->state.ldv_35127.disk >= (unsigned int )mins;
#line 2060
  if (io_allowed == 0) {
#line 2061
    put_ldev(mdev);
  } else {

  }
#line 2062
  return (io_allowed);
}
}
#line 2303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2305
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2306
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2307
  return;
}
}
#line 2317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2321
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2321
  if (tmp != 0) {
#line 2322
    return;
  } else {

  }
#line 2324
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2326
  if (r != 0) {
#line 2327
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2330
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 139
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 139
  return (tmp);
}
}
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 145
  b = mdev->bitmap;
#line 146
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 146
  if (tmp == 0) {
#line 147
    return;
  } else {

  }
#line 148
  tmp___9 = get_current();
#line 148
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 148
    tmp___7 = get_current();
#line 148
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 148
      tmp___5 = get_current();
#line 148
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 148
        tmp___3 = get_current();
#line 148
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 148
        tmp___4 = (char *)"worker";
      }
#line 148
      tmp___6 = tmp___4;
    } else {
#line 148
      tmp___6 = (char *)"asender";
    }
#line 148
    tmp___8 = tmp___6;
  } else {
#line 148
    tmp___8 = (char *)"receiver";
  }
#line 148
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 154
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 160
  b = mdev->bitmap;
#line 163
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 165
    return;
  } else {

  }
#line 168
  tmp = ldv_mutex_trylock_7(& b->bm_change);
#line 168
  trylock_failed = tmp == 0;
#line 170
  if (trylock_failed != 0) {
#line 171
    tmp___9 = get_current();
#line 171
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 171
      tmp___7 = get_current();
#line 171
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 171
        tmp___5 = get_current();
#line 171
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 171
          tmp___3 = get_current();
#line 171
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 171
          tmp___4 = (char *)"worker";
        }
#line 171
        tmp___6 = tmp___4;
      } else {
#line 171
        tmp___6 = (char *)"asender";
      }
#line 171
      tmp___8 = tmp___6;
    } else {
#line 171
      tmp___8 = (char *)"receiver";
    }
#line 171
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 179
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 181
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 181
  if (tmp___10 != 0) {
#line 182
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 184
  b->bm_why = why;
#line 185
  b->bm_task = get_current();
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 190
  b = mdev->bitmap;
#line 191
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 193
    return;
  } else {

  }
#line 196
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 196
  if (tmp == 0) {
#line 197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 199
  b->bm_why = 0;
#line 200
  b->bm_task = 0;
#line 201
  ldv_mutex_unlock_9(& b->bm_change);
#line 202
  return;
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 211
  page_nr = offset >> 9;
#line 212
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 212
  if (tmp != 0L) {
#line 212
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (212), "i" (12UL));
    ldv_43661: ;
#line 212
    goto ldv_43661;
  } else {

  }
#line 213
  page = *(b->bm_pages + page_nr);
#line 215
  tmp___0 = kmap_atomic(page, km);
#line 215
  return ((unsigned long *)tmp___0);
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 220
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 220
  return (tmp);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 225
  kunmap_atomic_notypecheck((void *)p_addr, km);
#line 226
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 230
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 255
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 256
    return;
  } else {

  }
#line 258
  i = 0UL;
#line 258
  goto ldv_43680;
  ldv_43679: ;
#line 259
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 260
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 263
    goto ldv_43678;
  } else {

  }
#line 265
  __free_pages(*(pages + i), 0U);
#line 266
  *(pages + i) = 0;
  ldv_43678: 
#line 258
  i = i + 1UL;
  ldv_43680: ;
#line 258
  if (i < number) {
#line 259
    goto ldv_43679;
  } else {

  }

#line 263
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 272
  if (v != 0) {
#line 273
    vfree((void const   *)ptr);
  } else {
#line 275
    kfree((void const   *)ptr);
  }
#line 276
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 283
  old_pages = b->bm_pages;
#line 285
  vmalloced = 0U;
#line 286
  have = b->bm_number_of_pages;
#line 288
  tmp = __builtin_expect(have == 0UL, 0L);
#line 288
  if (tmp != 0L) {
#line 288
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 288
    if (tmp___0 != 0L) {
#line 288
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (288), "i" (12UL));
      ldv_43697: ;
#line 288
      goto ldv_43697;
    } else {

    }
  } else {

  }
#line 289
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 289
  if (tmp___1 != 0L) {
#line 289
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 289
    if (tmp___2 != 0L) {
#line 289
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (289), "i" (12UL));
      ldv_43698: ;
#line 289
      goto ldv_43698;
    } else {

    }
  } else {

  }
#line 291
  if (have == want) {
#line 292
    return (old_pages);
  } else {

  }
#line 299
  bytes = (unsigned int )want * 8U;
#line 300
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 300
  new_pages = (struct page **)tmp___3;
#line 301
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 302
    tmp___4 = vmalloc((unsigned long )bytes);
#line 302
    new_pages = (struct page **)tmp___4;
#line 303
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 304
      return (0);
    } else {

    }
#line 305
    vmalloced = 1U;
  } else {

  }
#line 308
  memset((void *)new_pages, 0, (size_t )bytes);
#line 309
  if (want >= have) {
#line 310
    i = 0U;
#line 310
    goto ldv_43700;
    ldv_43699: 
#line 311
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 310
    i = i + 1U;
    ldv_43700: ;
#line 310
    if ((unsigned long )i < have) {
#line 311
      goto ldv_43699;
    } else {

    }

#line 312
    goto ldv_43703;
    ldv_43702: 
#line 313
    page = alloc_pages(131282U, 0U);
#line 314
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 315
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 316
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 317
      return (0);
    } else {

    }
#line 319
    *(new_pages + (unsigned long )i) = page;
#line 312
    i = i + 1U;
    ldv_43703: ;
#line 312
    if ((unsigned long )i < want) {
#line 313
      goto ldv_43702;
    } else {

    }

  } else {
#line 322
    i = 0U;
#line 322
    goto ldv_43706;
    ldv_43705: 
#line 323
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 322
    i = i + 1U;
    ldv_43706: ;
#line 322
    if ((unsigned long )i < want) {
#line 323
      goto ldv_43705;
    } else {

    }

  }
#line 329
  if (vmalloced != 0U) {
#line 330
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 332
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 334
  return (new_pages);
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 343
  b = mdev->bitmap;
#line 344
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 344
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 344
  if (tmp != 0L) {
#line 344
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       344);
  } else {

  }
#line 344
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 345
  tmp___0 = kzalloc(376UL, 208U);
#line 345
  b = (struct drbd_bitmap *)tmp___0;
#line 346
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 347
    return (-12);
  } else {

  }
#line 348
  spinlock_check(& b->bm_lock);
#line 348
  __raw_spin_lock_init(& b->bm_lock.ldv_5623.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 349
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 350
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 352
  mdev->bitmap = b;
#line 354
  return (0);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 359
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 359
  if (_b != 0) {
#line 359
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            359);
  } else {

  }
#line 359
  if (_b != 0) {
#line 359
    return (0UL);
  } else {

  }
#line 360
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 367
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 367
  if (_b != 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            367);
  } else {

  }
#line 367
  if (_b != 0) {
#line 367
    return;
  } else {

  }
#line 368
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 369
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 369
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 370
  kfree((void const   *)mdev->bitmap);
#line 371
  mdev->bitmap = 0;
#line 372
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 381
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 382
  w = b->bm_bits >> 6;
#line 383
  cleared = 0;
#line 386
  p_addr = bm_map_paddr(b, w);
#line 387
  bm = p_addr + (w & 511UL);
#line 388
  if (b->bm_words > w) {
#line 389
    tmp = hweight_long(*bm & ~ mask);
#line 389
    cleared = (int )tmp;
#line 390
    *bm = *bm & mask;
#line 391
    w = w + (size_t )1;
#line 391
    bm = bm + 1;
  } else {

  }
#line 394
  if (b->bm_words > w) {
#line 395
    tmp___0 = hweight_long(*bm);
#line 395
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 396
    *bm = 0UL;
  } else {

  }
#line 398
  bm_unmap(p_addr);
#line 399
  return (cleared);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 404
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 405
  w = b->bm_bits >> 6;
#line 408
  p_addr = bm_map_paddr(b, w);
#line 409
  bm = p_addr + (w & 511UL);
#line 410
  if (b->bm_words > w) {
#line 411
    *bm = *bm | ~ mask;
#line 412
    bm = bm + 1;
#line 412
    w = w + (size_t )1;
  } else {

  }
#line 415
  if (b->bm_words > w) {
#line 416
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 418
  bm_unmap(p_addr);
#line 419
  return;
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 423
  offset = 0UL;
#line 424
  bits = 0UL;
#line 427
  goto ldv_43762;
  ldv_43761: 
#line 428
  __min1 = b->bm_words - offset;
#line 428
  __min2 = 512UL;
#line 428
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 428
  i = do_now;
#line 429
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 430
  bm = p_addr + (offset & 511UL);
#line 431
  goto ldv_43758;
  ldv_43757: 
#line 436
  tmp = bm;
#line 436
  bm = bm + 1;
#line 436
  tmp___0 = hweight_long(*tmp);
#line 436
  bits = tmp___0 + bits;
  ldv_43758: 
#line 431
  tmp___1 = i;
#line 431
  i = i - 1UL;
#line 431
  if (tmp___1 != 0UL) {
#line 432
    goto ldv_43757;
  } else {

  }
#line 438
  __bm_unmap(p_addr, KM_USER0);
#line 439
  offset = offset + do_now;
#line 440
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                440, 0);
#line 440
  _cond_resched();
  ldv_43762: ;
#line 427
  if (b->bm_words > offset) {
#line 428
    goto ldv_43761;
  } else {

  }

#line 443
  return (bits);
}
}
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 448
  tmp = __bm_count_bits(b, 0);
#line 448
  return (tmp);
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 453
  tmp = __bm_count_bits(b, 1);
#line 453
  return (tmp);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 464
  end = offset + len;
#line 466
  if (b->bm_words < end) {
#line 467
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 468
    return;
  } else {

  }
#line 471
  goto ldv_43785;
  ldv_43784: 
#line 472
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 472
  __min2 = end;
#line 472
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 473
  p_addr = bm_map_paddr(b, offset);
#line 474
  bm = p_addr + (offset & 511UL);
#line 475
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 476
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 478
    goto ldv_43783;
  } else {

  }
#line 480
  memset((void *)bm, c, do_now * 8UL);
#line 481
  bm_unmap(p_addr);
#line 482
  offset = offset + do_now;
  ldv_43785: ;
#line 471
  if (offset < end) {
#line 472
    goto ldv_43784;
  } else {

  }
  ldv_43783: ;
#line 476
  return;
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 496
  b = mdev->bitmap;
#line 499
  opages = 0;
#line 500
  err = 0;
#line 503
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 503
  if (_b != 0) {
#line 503
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            503);
  } else {

  }
#line 503
  if (_b != 0) {
#line 503
    return (-12);
  } else {

  }
#line 505
  drbd_bm_lock(mdev, (char *)"resize");
#line 507
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 510
  if (b->bm_dev_capacity == capacity) {
#line 511
    goto out;
  } else {

  }
#line 513
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 515
  if (capacity == 0UL) {
#line 516
    spin_lock_irq(& b->bm_lock);
#line 517
    opages = b->bm_pages;
#line 518
    onpages = b->bm_number_of_pages;
#line 519
    owords = b->bm_words;
#line 520
    b->bm_pages = 0;
#line 521
    tmp___2 = 0UL;
#line 521
    b->bm_dev_capacity = tmp___2;
#line 521
    tmp___1 = tmp___2;
#line 521
    b->bm_words = tmp___1;
#line 521
    tmp___0 = tmp___1;
#line 521
    b->bm_bits = tmp___0;
#line 521
    tmp = tmp___0;
#line 521
    b->bm_set = tmp;
#line 521
    b->bm_number_of_pages = tmp;
#line 526
    spin_unlock_irq(& b->bm_lock);
#line 527
    bm_free_pages(opages, onpages);
#line 528
    bm_vk_free((void *)opages, opages_vmalloced);
#line 529
    goto out;
  } else {

  }
#line 531
  bits = (capacity + 7UL) >> 3;
#line 538
  words = (bits + 63UL) >> 6;
#line 540
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 540
  if (tmp___3 != 0) {
#line 541
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 541
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              541);
    } else {

    }
#line 542
    put_ldev(mdev);
  } else {

  }
#line 546
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 547
  have = b->bm_number_of_pages;
#line 548
  if (want == have) {
#line 549
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              549);
    } else {

    }
#line 550
    npages = b->bm_pages;
  } else {
#line 552
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 552
    if (tmp___4 != 0) {
#line 553
      npages = 0;
    } else {
#line 555
      npages = bm_realloc_pages(b, want);
    }
  }
#line 558
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 559
    err = -12;
#line 560
    goto out;
  } else {

  }
#line 563
  spin_lock_irq(& b->bm_lock);
#line 564
  opages = b->bm_pages;
#line 565
  owords = b->bm_words;
#line 566
  obits = b->bm_bits;
#line 568
  growing = bits > obits;
#line 569
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 570
    bm_set_surplus(b);
  } else {

  }
#line 572
  b->bm_pages = npages;
#line 573
  b->bm_number_of_pages = want;
#line 574
  b->bm_bits = bits;
#line 575
  b->bm_words = words;
#line 576
  b->bm_dev_capacity = capacity;
#line 578
  if (growing != 0) {
#line 579
    if (set_new_bits != 0) {
#line 580
      bm_memset(b, owords, 255, words - owords);
#line 581
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 583
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 587
  if (want < have) {
#line 589
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 592
  p_addr = bm_map_paddr(b, words);
#line 593
  bm = p_addr + (words & 511UL);
#line 594
  *bm = 2205418087UL;
#line 595
  bm_unmap(p_addr);
#line 597
  bm_clear_surplus(b);
#line 599
  spin_unlock_irq(& b->bm_lock);
#line 600
  if ((unsigned long )opages != (unsigned long )npages) {
#line 601
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 602
  if (growing == 0) {
#line 603
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 604
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 607
  drbd_bm_unlock(mdev);
#line 608
  return (err);
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 621
  b = mdev->bitmap;
#line 625
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 625
  if (_b != 0) {
#line 625
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            625);
  } else {

  }
#line 625
  if (_b != 0) {
#line 625
    return (0UL);
  } else {

  }
#line 626
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 626
  if (_b___0 != 0) {
#line 626
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            626);
  } else {

  }
#line 626
  if (_b___0 != 0) {
#line 626
    return (0UL);
  } else {

  }
#line 628
  tmp = spinlock_check(& b->bm_lock);
#line 628
  flags = _raw_spin_lock_irqsave(tmp);
#line 629
  s = b->bm_set;
#line 630
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 632
  return (s);
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 639
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 639
  if (tmp == 0) {
#line 640
    return (0UL);
  } else {

  }
#line 641
  s = _drbd_bm_total_weight(mdev);
#line 642
  put_ldev(mdev);
#line 643
  return (s);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 648
  b = mdev->bitmap;
#line 649
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 649
  if (_b != 0) {
#line 649
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            649);
  } else {

  }
#line 649
  if (_b != 0) {
#line 649
    return (0UL);
  } else {

  }
#line 650
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 650
  if (_b___0 != 0) {
#line 650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            650);
  } else {

  }
#line 650
  if (_b___0 != 0) {
#line 650
    return (0UL);
  } else {

  }
#line 652
  return (b->bm_words);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 657
  b = mdev->bitmap;
#line 658
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 658
  if (_b != 0) {
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            658);
  } else {

  }
#line 658
  if (_b != 0) {
#line 658
    return (0UL);
  } else {

  }
#line 660
  return (b->bm_bits);
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 671
  b = mdev->bitmap;
#line 676
  end = offset + number;
#line 678
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 678
  if (_b != 0) {
#line 678
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            678);
  } else {

  }
#line 678
  if (_b != 0) {
#line 678
    return;
  } else {

  }
#line 679
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 679
  if (_b___0 != 0) {
#line 679
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            679);
  } else {

  }
#line 679
  if (_b___0 != 0) {
#line 679
    return;
  } else {

  }
#line 680
  if (number == 0UL) {
#line 681
    return;
  } else {

  }
#line 682
  __ret_warn_on = b->bm_words <= offset;
#line 682
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 682
  if (tmp != 0L) {
#line 682
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       682);
  } else {

  }
#line 682
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 683
  __ret_warn_on___0 = b->bm_words < end;
#line 683
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 683
  if (tmp___0 != 0L) {
#line 683
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       683);
  } else {

  }
#line 683
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  goto ldv_43873;
  ldv_43872: 
#line 687
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 687
  __min2 = end;
#line 687
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 688
  p_addr = bm_map_paddr(b, offset);
#line 689
  bm = p_addr + (offset & 511UL);
#line 690
  offset = offset + do_now;
#line 691
  goto ldv_43870;
  ldv_43869: 
#line 692
  bits = hweight_long(*bm);
#line 693
  tmp___1 = buffer;
#line 693
  buffer = buffer + 1;
#line 693
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 694
  tmp___2 = bm;
#line 694
  bm = bm + 1;
#line 694
  *tmp___2 = word;
#line 695
  tmp___3 = hweight_long(word);
#line 695
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_43870: 
#line 691
  tmp___4 = do_now;
#line 691
  do_now = do_now - (size_t )1;
#line 691
  if (tmp___4 != 0UL) {
#line 692
    goto ldv_43869;
  } else {

  }
#line 697
  bm_unmap(p_addr);
  ldv_43873: ;
#line 686
  if (offset < end) {
#line 687
    goto ldv_43872;
  } else {

  }

#line 704
  if (b->bm_words == end) {
#line 705
    tmp___5 = bm_clear_surplus(b);
#line 705
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 707
  spin_unlock_irq(& b->bm_lock);
#line 708
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 716
  b = mdev->bitmap;
#line 720
  end = offset + number;
#line 722
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 722
  if (_b != 0) {
#line 722
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            722);
  } else {

  }
#line 722
  if (_b != 0) {
#line 722
    return;
  } else {

  }
#line 723
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 723
  if (_b___0 != 0) {
#line 723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            723);
  } else {

  }
#line 723
  if (_b___0 != 0) {
#line 723
    return;
  } else {

  }
#line 725
  spin_lock_irq(& b->bm_lock);
#line 726
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 729
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 734
    goto ldv_43898;
    ldv_43897: 
#line 735
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 735
    __min2 = end;
#line 735
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 736
    p_addr = bm_map_paddr(b, offset);
#line 737
    bm = p_addr + (offset & 511UL);
#line 738
    offset = offset + do_now;
#line 739
    goto ldv_43895;
    ldv_43894: 
#line 740
    tmp = buffer;
#line 740
    buffer = buffer + 1;
#line 740
    tmp___0 = bm;
#line 740
    bm = bm + 1;
#line 740
    *tmp = *tmp___0;
    ldv_43895: 
#line 739
    tmp___1 = do_now;
#line 739
    do_now = do_now - (size_t )1;
#line 739
    if (tmp___1 != 0UL) {
#line 740
      goto ldv_43894;
    } else {

    }
#line 741
    bm_unmap(p_addr);
    ldv_43898: ;
#line 734
    if (offset < end) {
#line 735
      goto ldv_43897;
    } else {

    }

  }
#line 744
  spin_unlock_irq(& b->bm_lock);
#line 745
  return;
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 750
  b = mdev->bitmap;
#line 751
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 751
  if (_b != 0) {
#line 751
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            751);
  } else {

  }
#line 751
  if (_b != 0) {
#line 751
    return;
  } else {

  }
#line 752
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 752
  if (_b___0 != 0) {
#line 752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            752);
  } else {

  }
#line 752
  if (_b___0 != 0) {
#line 752
    return;
  } else {

  }
#line 754
  spin_lock_irq(& b->bm_lock);
#line 755
  bm_memset(b, 0UL, 255, b->bm_words);
#line 756
  bm_clear_surplus(b);
#line 757
  b->bm_set = b->bm_bits;
#line 758
  spin_unlock_irq(& b->bm_lock);
#line 759
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 764
  b = mdev->bitmap;
#line 765
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 765
  if (_b != 0) {
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            765);
  } else {

  }
#line 765
  if (_b != 0) {
#line 765
    return;
  } else {

  }
#line 766
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 766
  if (_b___0 != 0) {
#line 766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            766);
  } else {

  }
#line 766
  if (_b___0 != 0) {
#line 766
    return;
  } else {

  }
#line 768
  spin_lock_irq(& b->bm_lock);
#line 769
  bm_memset(b, 0UL, 0, b->bm_words);
#line 770
  b->bm_set = 0UL;
#line 771
  spin_unlock_irq(& b->bm_lock);
#line 772
  return;
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 776
  b = (struct drbd_bitmap *)bio->bi_private;
#line 777
  uptodate = (int )bio->bi_flags & 1;
#line 784
  if (error == 0 && uptodate == 0) {
#line 785
    error = -5;
  } else {

  }
#line 787
  if (error != 0) {
#line 790
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 792
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 792
  if (tmp != 0) {
#line 793
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 795
  bio_put(bio);
#line 796
  return;
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 801
  tmp = bio_alloc(208U, 1);
#line 801
  bio = tmp;
#line 803
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 805
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 809
  __min1 = 4096U;
#line 809
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 809
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 809
  len = __min1 < __min2 ? __min1 : __min2;
#line 812
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 813
  bio->bi_sector = on_disk_sector;
#line 814
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 815
  bio->bi_private = (void *)b;
#line 816
  bio->bi_end_io = & bm_async_io_complete;
#line 818
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 818
  if (tmp___1 != 0) {
#line 819
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 820
    bio_endio(bio, -5);
  } else {
#line 822
    submit_bio(rw, bio);
  }
#line 823
  return;
}
}
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 864
  b = mdev->bitmap;
#line 869
  err = 0;
#line 871
  tmp = bm_is_locked(b);
#line 871
  __ret_warn_on = tmp == 0;
#line 871
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 871
  if (tmp___0 != 0L) {
#line 871
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       871);
  } else {

  }
#line 871
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 875
  tmp___1 = drbd_bm_words(mdev);
#line 875
  bm_words = (int )tmp___1;
#line 876
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 882
  now = jiffies;
#line 883
  atomic_set(& b->bm_async_io, num_pages);
#line 884
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 887
  i = 0;
#line 887
  goto ldv_43950;
  ldv_43949: 
#line 888
  bm_page_io_async(mdev, b, i, rw);
#line 887
  i = i + 1;
  ldv_43950: ;
#line 887
  if (i < num_pages) {
#line 888
    goto ldv_43949;
  } else {

  }
#line 890
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 890
  drbd_blk_run_queue(tmp___2);
#line 891
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 891
  if (tmp___3 == 0) {
#line 891
    goto ldv_43952;
  } else {

  }
#line 891
  tmp___4 = get_current();
#line 891
  __wait.flags = 0U;
#line 891
  __wait.private = (void *)tmp___4;
#line 891
  __wait.func = & autoremove_wake_function;
#line 891
  __wait.task_list.next = & __wait.task_list;
#line 891
  __wait.task_list.prev = & __wait.task_list;
  ldv_43955: 
#line 891
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 891
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 891
  if (tmp___5 == 0) {
#line 891
    goto ldv_43954;
  } else {

  }
#line 891
  schedule();
#line 891
  goto ldv_43955;
  ldv_43954: 
#line 891
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_43952: 
#line 893
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 893
  if (tmp___6 != 0) {
#line 894
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 895
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 896
    err = -5;
  } else {

  }
#line 899
  now = jiffies;
#line 900
  if (rw == 1) {
#line 904
    drbd_md_flush(mdev);
  } else {
#line 907
    b->bm_set = bm_count_bits_swap_endian(b);
#line 908
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 911
  now = b->bm_set;
#line 913
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 913
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 916
  return (err);
}
}
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 925
  tmp = bm_rw(mdev, 0);
#line 925
  return (tmp);
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 934
  tmp = bm_rw(mdev, 1);
#line 934
  return (tmp);
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 948
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 951
  err = 0;
#line 953
  ldv_mutex_lock_10(& mdev->md_io_mutex);
#line 954
  tmp = drbd_bm_words(mdev);
#line 954
  bm_words = (int )tmp;
#line 955
  offset = (int )(enr << 6);
#line 956
  _min1 = 64;
#line 956
  _min2 = bm_words - offset;
#line 956
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 957
  if (num_words <= 63) {
#line 958
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 958
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 959
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 959
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 961
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 961
  if (tmp___2 == 0) {
#line 963
    err = -5;
#line 964
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 967
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 968
    i = 0;
#line 968
    goto ldv_43978;
    ldv_43977: 
#line 969
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 968
    i = i + 1;
    ldv_43978: ;
#line 968
    if (i <= 3) {
#line 969
      goto ldv_43977;
    } else {

    }

  } else {

  }
#line 971
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 972
  ldv_mutex_unlock_11(& mdev->md_io_mutex);
#line 973
  return (err);
}
}
#line 983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 986
  b = mdev->bitmap;
#line 987
  i = 0xffffffffffffffffUL;
#line 991
  if (b->bm_bits < bm_fo) {
#line 992
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 994
    goto ldv_43994;
    ldv_43993: 
#line 996
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 997
    offset = bit_offset >> 6;
#line 998
    p_addr = __bm_map_paddr(b, offset, km);
#line 1000
    if ((int )find_zero_bit != 0) {
#line 1001
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 1003
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 1005
    __bm_unmap(p_addr, km);
#line 1006
    if (i <= 32767UL) {
#line 1007
      i = bit_offset + i;
#line 1008
      if (b->bm_bits <= i) {
#line 1009
        goto ldv_43991;
      } else {

      }
#line 1010
      goto found;
    } else {

    }
#line 1012
    bm_fo = bit_offset + 32768UL;
    ldv_43994: ;
#line 994
    if (b->bm_bits > bm_fo) {
#line 995
      goto ldv_43993;
    } else {

    }
    ldv_43991: 
#line 1014
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1017
  return (i);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 1023
  b = mdev->bitmap;
#line 1024
  i = 0xffffffffffffffffUL;
#line 1026
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1026
  if (_b != 0) {
#line 1026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1026);
  } else {

  }
#line 1026
  if (_b != 0) {
#line 1026
    return (i);
  } else {

  }
#line 1027
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1027
  if (_b___0 != 0) {
#line 1027
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1027);
  } else {

  }
#line 1027
  if (_b___0 != 0) {
#line 1027
    return (i);
  } else {

  }
#line 1029
  spin_lock_irq(& b->bm_lock);
#line 1030
  tmp = bm_is_locked(b);
#line 1030
  if (tmp != 0) {
#line 1031
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1033
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1035
  spin_unlock_irq(& b->bm_lock);
#line 1036
  return (i);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1041
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1041
  return (tmp);
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1057
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1057
  return (tmp);
}
}
#line 1060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1063
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1063
  return (tmp);
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1075
  b = mdev->bitmap;
#line 1076
  p_addr = 0;
#line 1078
  last_page_nr = 0xffffffffffffffffUL;
#line 1079
  c = 0;
#line 1081
  if (b->bm_bits <= e) {
#line 1082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1084
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1086
  bitnr = s;
#line 1086
  goto ldv_44034;
  ldv_44033: 
#line 1087
  offset = bitnr >> 6;
#line 1088
  page_nr = offset >> 9;
#line 1089
  if (page_nr != last_page_nr) {
#line 1090
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1091
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1092
    p_addr = __bm_map_paddr(b, offset, km);
#line 1093
    last_page_nr = page_nr;
  } else {

  }
#line 1095
  if (val != 0) {
#line 1096
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1096
    c = (tmp == 0) + c;
  } else {
#line 1098
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1098
    c = c - (tmp___0 != 0);
  }
#line 1086
  bitnr = bitnr + 1UL;
  ldv_44034: ;
#line 1086
  if (bitnr <= e) {
#line 1087
    goto ldv_44033;
  } else {

  }

#line 1100
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1101
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1102
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1103
  return (c);
}
}
#line 1110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1114
  b = mdev->bitmap;
#line 1115
  c = 0;
#line 1117
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1117
  if (_b != 0) {
#line 1117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1117);
  } else {

  }
#line 1117
  if (_b != 0) {
#line 1117
    return (1);
  } else {

  }
#line 1118
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1118
  if (_b___0 != 0) {
#line 1118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1118);
  } else {

  }
#line 1118
  if (_b___0 != 0) {
#line 1118
    return (0);
  } else {

  }
#line 1120
  tmp = spinlock_check(& b->bm_lock);
#line 1120
  flags = _raw_spin_lock_irqsave(tmp);
#line 1121
  tmp___0 = bm_is_locked(b);
#line 1121
  if (tmp___0 != 0) {
#line 1122
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1124
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1126
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1127
  return (c);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1133
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1133
  return (tmp);
}
}
#line 1137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1139
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1139
  return (- tmp);
}
}
#line 1144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1149
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1149
  paddr = (unsigned long *)tmp;
#line 1150
  i = first_word;
#line 1150
  goto ldv_44073;
  ldv_44072: 
#line 1151
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1151
  bits = (int )tmp___0;
#line 1152
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1153
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1150
  i = i + 1;
  ldv_44073: ;
#line 1150
  if (i < last_word) {
#line 1151
    goto ldv_44072;
  } else {

  }
#line 1155
  kunmap_atomic_notypecheck((void *)paddr, KM_USER0);
#line 1156
  return;
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1172
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1173
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1180
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1182
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1183
    return;
  } else {

  }
#line 1189
  if (sl != 0UL) {
#line 1190
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1192
  first_page = (int )(sl >> 15);
#line 1193
  last_page = (int )(el >> 15);
#line 1197
  first_word = (int )(sl >> 6) & 511;
#line 1198
  last_word = 512;
#line 1201
  page_nr = first_page;
#line 1201
  goto ldv_44089;
  ldv_44088: 
#line 1202
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1203
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1203, 0);
#line 1203
  _cond_resched();
#line 1204
  first_word = 0;
#line 1201
  page_nr = page_nr + 1;
  ldv_44089: ;
#line 1201
  if (page_nr < last_page) {
#line 1202
    goto ldv_44088;
  } else {

  }
#line 1208
  last_word = (int )(el >> 6) & 511;
#line 1209
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1216
  if (el <= (unsigned long )e) {
#line 1217
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1218
  return;
}
}
#line 1227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1230
  b = mdev->bitmap;
#line 1234
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1234
  if (_b != 0) {
#line 1234
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1234);
  } else {

  }
#line 1234
  if (_b != 0) {
#line 1234
    return (0);
  } else {

  }
#line 1235
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1235
  if (_b___0 != 0) {
#line 1235
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1235);
  } else {

  }
#line 1235
  if (_b___0 != 0) {
#line 1235
    return (0);
  } else {

  }
#line 1237
  tmp = spinlock_check(& b->bm_lock);
#line 1237
  flags = _raw_spin_lock_irqsave(tmp);
#line 1238
  tmp___0 = bm_is_locked(b);
#line 1238
  if (tmp___0 != 0) {
#line 1239
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1240
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1241
    offset = bitnr >> 6;
#line 1242
    p_addr = bm_map_paddr(b, offset);
#line 1243
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1243
    i = tmp___1 != 0;
#line 1244
    bm_unmap(p_addr);
  } else
#line 1245
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1246
    i = -1;
  } else {
#line 1248
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1249
    i = 0;
  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (i);
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1260
  b = mdev->bitmap;
#line 1261
  p_addr = 0;
#line 1261
  page_nr = 0xffffffffffffffffUL;
#line 1263
  c = 0;
#line 1270
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1270
  if (_b != 0) {
#line 1270
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1270);
  } else {

  }
#line 1270
  if (_b != 0) {
#line 1270
    return (1);
  } else {

  }
#line 1271
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1271
  if (_b___0 != 0) {
#line 1271
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1271);
  } else {

  }
#line 1271
  if (_b___0 != 0) {
#line 1271
    return (1);
  } else {

  }
#line 1273
  tmp = spinlock_check(& b->bm_lock);
#line 1273
  flags = _raw_spin_lock_irqsave(tmp);
#line 1274
  tmp___0 = bm_is_locked(b);
#line 1274
  if (tmp___0 != 0) {
#line 1275
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1276
  bitnr = s;
#line 1276
  goto ldv_44131;
  ldv_44130: 
#line 1277
  w = bitnr >> 6;
#line 1278
  if (w >> 9 != page_nr) {
#line 1279
    page_nr = w >> 9;
#line 1280
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1281
      bm_unmap(p_addr);
    } else {

    }
#line 1282
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1284
  _b___1 = b->bm_bits <= bitnr;
#line 1284
  if (_b___1 != 0) {
#line 1284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1284);
  } else {

  }
#line 1284
  if (_b___1 != 0) {
#line 1285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1287
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1287
    c = (tmp___1 != 0) + c;
  }
#line 1276
  bitnr = bitnr + 1UL;
  ldv_44131: ;
#line 1276
  if (bitnr <= (unsigned long )e) {
#line 1277
    goto ldv_44130;
  } else {

  }

#line 1290
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1291
    bm_unmap(p_addr);
  } else {

  }
#line 1292
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1293
  return (c);
}
}
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1313
  b = mdev->bitmap;
#line 1318
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1318
  if (_b != 0) {
#line 1318
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1318);
  } else {

  }
#line 1318
  if (_b != 0) {
#line 1318
    return (0);
  } else {

  }
#line 1319
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1319
  if (_b___0 != 0) {
#line 1319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1319);
  } else {

  }
#line 1319
  if (_b___0 != 0) {
#line 1319
    return (0);
  } else {

  }
#line 1321
  tmp = spinlock_check(& b->bm_lock);
#line 1321
  flags = _raw_spin_lock_irqsave(tmp);
#line 1322
  tmp___0 = bm_is_locked(b);
#line 1322
  if (tmp___0 != 0) {
#line 1323
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1325
  s = (int )(enr << 6);
#line 1326
  _min1 = (enr + 1UL) << 6;
#line 1326
  _min2 = b->bm_words;
#line 1326
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1327
  count = 0;
#line 1328
  if ((size_t )s < b->bm_words) {
#line 1329
    n = e - s;
#line 1330
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1331
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1332
    goto ldv_44157;
    ldv_44156: 
#line 1333
    tmp___1 = bm;
#line 1333
    bm = bm + 1;
#line 1333
    tmp___2 = hweight_long(*tmp___1);
#line 1333
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_44157: 
#line 1332
    tmp___3 = n;
#line 1332
    n = n - 1;
#line 1332
    if (tmp___3 != 0) {
#line 1333
      goto ldv_44156;
    } else {

    }
#line 1334
    bm_unmap(p_addr);
  } else {
#line 1336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1338
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1339
  return (count);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1345
  b = mdev->bitmap;
#line 1349
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1349
  if (_b != 0) {
#line 1349
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1349);
  } else {

  }
#line 1349
  if (_b != 0) {
#line 1349
    return (0UL);
  } else {

  }
#line 1350
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1350
  if (_b___0 != 0) {
#line 1350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1350);
  } else {

  }
#line 1350
  if (_b___0 != 0) {
#line 1350
    return (0UL);
  } else {

  }
#line 1352
  spin_lock_irq(& b->bm_lock);
#line 1353
  tmp = bm_is_locked(b);
#line 1353
  if (tmp != 0) {
#line 1354
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1355
  weight = b->bm_set;
#line 1357
  s = (int )((unsigned int )al_enr * 16U);
#line 1358
  __min1 = (size_t )(s + 16);
#line 1358
  __min2 = b->bm_words;
#line 1358
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1360
  if ((e + -1) >> 9 != s >> 9) {
#line 1360
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1361);
  } else {

  }
#line 1362
  count = 0;
#line 1363
  if ((size_t )s < b->bm_words) {
#line 1364
    do_now = e - s;
#line 1364
    i = do_now;
#line 1365
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1366
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1367
    goto ldv_44181;
    ldv_44180: 
#line 1368
    tmp___0 = hweight_long(*bm);
#line 1368
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1369
    *bm = 0xffffffffffffffffUL;
#line 1370
    bm = bm + 1;
    ldv_44181: 
#line 1367
    tmp___1 = i;
#line 1367
    i = i - 1;
#line 1367
    if (tmp___1 != 0) {
#line 1368
      goto ldv_44180;
    } else {

    }
#line 1372
    bm_unmap(p_addr);
#line 1373
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1374
    if ((size_t )e == b->bm_words) {
#line 1375
      tmp___2 = bm_clear_surplus(b);
#line 1375
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1379
  weight = b->bm_set - weight;
#line 1380
  spin_unlock_irq(& b->bm_lock);
#line 1381
  return (weight);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1389
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1391
  mutex_lock(ldv_func_arg1);
#line 1392
  return;
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1399
  tmp = mutex_trylock(ldv_func_arg1);
#line 1399
  ldv_func_res = tmp;
#line 1401
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1401
  return (tmp___0);
#line 1403
  return (ldv_func_res);
}
}
#line 1406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1411
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1413
  mutex_unlock(ldv_func_arg1);
#line 1414
  return;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1421
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1423
  mutex_lock(ldv_func_arg1);
#line 1424
  return;
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1431
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1433
  mutex_unlock(ldv_func_arg1);
#line 1434
  return;
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1441
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1443
  mutex_unlock(ldv_func_arg1);
#line 1444
  return;
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1451
  tmp = mutex_trylock(ldv_func_arg1);
#line 1451
  ldv_func_res = tmp;
#line 1453
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1453
  return (tmp___0);
#line 1455
  return (ldv_func_res);
}
}
#line 1458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1463
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1465
  mutex_lock(ldv_func_arg1);
#line 1466
  return;
}
}
#line 1468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1473
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1475
  mutex_unlock(ldv_func_arg1);
#line 1476
  return;
}
}
#line 1478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1483
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1485
  mutex_lock(ldv_func_arg1);
#line 1486
  return;
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1493
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1495
  mutex_unlock(ldv_func_arg1);
#line 1496
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 280
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 281
char const   *drbd_role_str(enum drbd_role s ) ;
#line 282
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1059 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1063
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1065
  return (mdev);
}
}
#line 1404
int proc_details ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1537
struct file_operations  const  drbd_proc_fops ;
#line 2069 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2082
  tmp = drbd_bm_total_weight(mdev);
#line 2082
  *bits_left = tmp - mdev->rs_failed;
#line 2085
  if (*bits_left > mdev->rs_total) {
#line 2091
    __asm__  volatile   ("": : : "memory");
#line 2092
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 2092
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2095
    *per_mil_done = 0U;
  } else {
#line 2098
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2101
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2103
  return;
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 88
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 109
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 111
  x = (int )(res / 50U);
#line 112
  y = 20 - x;
#line 113
  seq_printf(seq, "\t[");
#line 114
  i = 1;
#line 114
  goto ldv_43647;
  ldv_43646: 
#line 115
  seq_printf(seq, "=");
#line 114
  i = i + 1;
  ldv_43647: ;
#line 114
  if (i < x) {
#line 115
    goto ldv_43646;
  } else {

  }
#line 116
  seq_printf(seq, ">");
#line 117
  i = 0;
#line 117
  goto ldv_43650;
  ldv_43649: 
#line 118
  seq_printf(seq, ".");
#line 117
  i = i + 1;
  ldv_43650: ;
#line 117
  if (i < y) {
#line 118
    goto ldv_43649;
  } else {

  }
#line 119
  seq_printf(seq, "] ");
#line 121
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 123
  if (mdev->rs_total > 1048576UL) {
#line 124
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 128
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 141
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 143
  if (dt > 20UL) {
#line 146
    seq_printf(seq, "stalled\n");
#line 147
    return;
  } else {

  }
#line 150
  if (dt == 0UL) {
#line 151
    dt = dt + 1UL;
  } else {

  }
#line 152
  db = mdev->rs_mark_left - rs_left;
#line 153
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 155
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 159
  dbdt = db / dt << 2;
#line 160
  if (dbdt > 1000UL) {
#line 161
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 164
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 168
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 169
  if (dt == 0UL) {
#line 170
    dt = 1UL;
  } else {

  }
#line 171
  db = mdev->rs_total - rs_left;
#line 172
  dbdt = db / dt << 2;
#line 173
  if (dbdt > 1000UL) {
#line 174
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 177
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 179
  seq_printf(seq, " K/sec\n");
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 184
  __mptr = (struct lc_element  const  *)e;
#line 184
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 186
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 189
  return;
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 194
  hole = 0;
#line 198
  write_ordering_chars[0] = 110;
#line 198
  write_ordering_chars[1] = 100;
#line 198
  write_ordering_chars[2] = 102;
#line 198
  write_ordering_chars[3] = 98;
#line 205
  tmp = drbd_buildtag();
#line 205
  seq_printf(seq, "version: 8.3.8.1 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 94, tmp);
#line 228
  i = 0;
#line 228
  goto ldv_43670;
  ldv_43669: 
#line 229
  mdev = minor_to_mdev((unsigned int )i);
#line 230
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 231
    hole = 1;
#line 232
    goto ldv_43668;
  } else {

  }
#line 234
  if (hole != 0) {
#line 235
    hole = 0;
#line 236
    seq_printf(seq, "\n");
  } else {

  }
#line 239
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 241
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 244
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 246
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 246
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 246
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 246
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 246
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 246
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35127.pdsk);
#line 246
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35127.disk);
#line 246
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_35127.peer);
#line 246
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_35127.role);
#line 246
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 276
    tmp___9 = drbd_bm_total_weight(mdev);
#line 276
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 279
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) {
#line 281
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 283
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U) {
#line 284
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 290
  if (proc_details > 0) {
#line 290
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 290
    if (tmp___10 != 0) {
#line 291
      lc_seq_printf_stats(seq, mdev->resync);
#line 292
      lc_seq_printf_stats(seq, mdev->act_log);
#line 293
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 296
  if (proc_details > 1) {
#line 297
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 298
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_43668: 
#line 228
  i = i + 1;
  ldv_43670: ;
#line 228
  if ((unsigned int )i < minor_count) {
#line 229
    goto ldv_43669;
  } else {

  }

#line 304
  return (0);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 309
  tmp = PDE((struct inode  const  *)inode);
#line 309
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 309
  return (tmp___0);
}
}
#line 330
void ldv_check_final_state(void) ;
#line 333
extern void ldv_check_return_value(int  ) ;
#line 339
void ldv_initialize(void) ;
#line 342
extern void ldv_handler_precall(void) ;
#line 345
extern int nondet_int(void) ;
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 383
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 373
  LDV_IN_INTERRUPT = 1;
#line 382
  ldv_initialize();
#line 386
  goto ldv_43701;
  ldv_43700: 
#line 390
  tmp = nondet_int();
#line 390
  switch (tmp) {
  case 0: ;
#line 395
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 400
    ldv_handler_precall();
#line 401
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 402
    ldv_check_return_value(res_drbd_proc_open_3);
#line 403
    if (res_drbd_proc_open_3 != 0) {
#line 404
      goto ldv_module_exit;
    } else {

    }
#line 405
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 411
  goto ldv_43698;
  default: ;
#line 412
  goto ldv_43698;
  }
  ldv_43698: ;
  ldv_43701: 
#line 386
  tmp___0 = nondet_int();
#line 386
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 388
    goto ldv_43700;
  } else {

  }

  ldv_module_exit: ;
#line 421
  ldv_check_final_state();
#line 424
  return;
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 433
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 435
  mutex_lock(ldv_func_arg1);
#line 436
  return;
}
}
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 443
  tmp = mutex_trylock(ldv_func_arg1);
#line 443
  ldv_func_res = tmp;
#line 445
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 445
  return (tmp___0);
#line 447
  return (ldv_func_res);
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 455
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 457
  mutex_unlock(ldv_func_arg1);
#line 458
  return;
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 465
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 467
  mutex_lock(ldv_func_arg1);
#line 468
  return;
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 475
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 477
  mutex_unlock(ldv_func_arg1);
#line 478
  return;
}
}
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 485
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 487
  mutex_unlock(ldv_func_arg1);
#line 488
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 198 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 25 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 27
  list->next = list;
#line 28
  list->prev = list;
#line 29
  return;
}
}
#line 48
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 61 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 63
  __list_add(new, head, head->next);
#line 64
  return;
}
}
#line 75 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 77
  __list_add(new, head->prev, head);
#line 78
  return;
}
}
#line 87 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 89
  next->prev = prev;
#line 90
  prev->next = next;
#line 91
  return;
}
}
#line 107
extern void list_del(struct list_head * ) ;
#line 137 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 139
  __list_del(entry->prev, entry->next);
#line 140
  INIT_LIST_HEAD(entry);
#line 141
  return;
}
}
#line 181 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 183
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 268 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 272
  first = list->next;
#line 273
  last = list->prev;
#line 275
  first->prev = prev;
#line 276
  prev->next = first;
#line 278
  last->next = next;
#line 279
  next->prev = last;
#line 280
  return;
}
}
#line 313 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 316
  tmp = list_empty((struct list_head  const  *)list);
#line 316
  if (tmp == 0) {
#line 317
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 318
    INIT_LIST_HEAD(list);
  } else {

  }
#line 320
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 250 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13733: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13733;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___0(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 303 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 305
  tmp = PageTail(page);
#line 305
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 305
  if (tmp___0 != 0L) {
#line 306
    return (page->ldv_12384.first_page);
  } else {

  }
#line 307
  return (page);
}
}
#line 310 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 312
  tmp = compound_head(page);
#line 312
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 312
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17806: ;
#line 63
    goto ldv_17806;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17807: ;
#line 65
    goto ldv_17807;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17808: ;
#line 66
    goto ldv_17808;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5623.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5623.ldv_5622.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 43
extern int down_interruptible(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 351 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2001
extern void flush_signals(struct task_struct * ) ;
#line 2034
extern void force_sig(int  , struct task_struct * ) ;
#line 1066 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 977 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 979
  return (q->limits.max_segment_size);
}
}
#line 640 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 646
  __asm__  volatile   ("": : : "memory");
#line 647
  return (thi->t_state);
}
}
#line 1068 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1070
  return (mdev->minor);
}
}
#line 1081 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1083
  ldv_mutex_lock_38(& mdev->data.mutex);
#line 1086
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1086
  if (tmp != 0L) {
#line 1087
    ldv_mutex_unlock_39(& mdev->data.mutex);
#line 1088
    return (0);
  } else {

  }
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1095
  ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1096
  return;
}
}
#line 1120
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1129
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1131
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1148
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1152
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1157
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1165
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1171
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1173
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1175
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1178
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1180
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1184
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1190
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1193
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1196
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1197
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1200
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1205
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1425
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1428
int drbd_worker(struct drbd_thread *thi ) ;
#line 1429
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1430
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1431
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1432
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1433
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1437
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1439 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1441
  if (mdev->ov_last_oos_size != 0UL) {
#line 1442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1446
  mdev->ov_last_oos_size = 0UL;
#line 1447
  return;
}
}
#line 1450
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1451
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1454
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1455
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1456
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1457
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1458
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1459
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1460
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1461
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1463
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1464
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1465
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1466
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1467
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1468
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1469
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1471
void resync_timer_fn(unsigned long data ) ;
#line 1474
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1477
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1482
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1497
  if (level == 1) {
#line 1498
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1500
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1502
  return (err);
}
}
#line 1505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1507
  val = 1;
#line 1508
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1510
  return;
}
}
#line 1512 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1514
  val = 0;
#line 1515
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1517
  return;
}
}
#line 1533
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1543
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1544
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1546
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1547
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1548
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1549
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1552
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1556
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1634
  return ((struct page *)page->ldv_12384.ldv_12381.private);
}
}
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_43960;
  ldv_43959: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_43960: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_43959;
    } else {
#line 1661
      goto ldv_43961;
    }
  } else {

  }
  ldv_43961: ;
#line 1662
  return (0);
}
}
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_43965;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_43968: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_43967;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_43968;
  ldv_43967: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43965: ;
#line 1671
  return;
}
}
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1674
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1675
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1676
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43991;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35127.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35127.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43991;
  }
  ldv_43991: ;
#line 1730
  return;
}
}
#line 1788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1791
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  tmp = spinlock_check(& q->q_lock);
#line 1880
  flags = _raw_spin_lock_irqsave(tmp);
#line 1881
  list_add_tail(& w->list, & q->q);
#line 1882
  up(& q->s);
#line 1884
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1885
  return;
}
}
#line 1887 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1889
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1889
  if (tmp != 0) {
#line 1890
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1891
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1895
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1896
  wake_asender(mdev);
#line 1897
  return;
}
}
#line 1899 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1903
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1903
  return (tmp);
}
}
#line 1918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1920
  _drbd_thread_stop(thi, 0, 1);
#line 1921
  return;
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1980
  atomic_inc(& mdev->rs_pending_cnt);
#line 1981
  return;
}
}
#line 2309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2311
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2311
  if (tmp___0 != 0) {
#line 2312
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2312
    drbd_blk_run_queue(tmp);
#line 2313
    put_ldev(mdev);
  } else {

  }
#line 2315
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 297
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 304
  mdev = req->mdev;
#line 308
  __req_mod(req, what, & m);
#line 309
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 310
    complete_master_bio(mdev, & m);
  } else {

  }
#line 311
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 318
  mdev = req->mdev;
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 321
  __req_mod(req, what, & m);
#line 322
  spin_unlock_irq(& mdev->req_lock);
#line 324
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 325
    complete_master_bio(mdev, & m);
  } else {

  }
#line 326
  return;
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 125
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 126
  md_io->error = error;
#line 128
  complete(& md_io->event);
#line 129
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 136
  flags = 0UL;
#line 137
  mdev = e->mdev;
#line 139
  if (e->block_id == 0ULL) {
#line 139
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            139);
  } else {

  }
#line 141
  tmp = spinlock_check(& mdev->req_lock);
#line 141
  flags = _raw_spin_lock_irqsave(tmp);
#line 142
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 143
  list_del(& e->w.list);
#line 144
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 144
  if (tmp___0 != 0) {
#line 145
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 146
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 146
  if (tmp___1 != 0) {
#line 147
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 148
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 150
  drbd_queue_work(& mdev->data.work, & e->w);
#line 151
  put_ldev(mdev);
#line 152
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 156
  return ((ee_flags & 28) == 20);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 164
  flags = 0UL;
#line 165
  mdev = e->mdev;
#line 173
  tmp___0 = is_failed_barrier((int )e->flags);
#line 173
  if (tmp___0 != 0) {
#line 174
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 175
    tmp = spinlock_check(& mdev->req_lock);
#line 175
    flags = _raw_spin_lock_irqsave(tmp);
#line 176
    list_del(& e->w.list);
#line 177
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 178
    e->w.cb = & w_e_reissue;
#line 181
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 182
    drbd_queue_work(& mdev->data.work, & e->w);
#line 183
    return;
  } else {

  }
#line 186
  if (e->block_id == 0ULL) {
#line 186
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            186);
  } else {

  }
#line 192
  e_sector = e->sector;
#line 193
  do_al_complete_io = (int )e->flags & 1;
#line 194
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 196
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 196
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 197
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 198
  list_del(& e->w.list);
#line 199
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 206
  if (is_syncer_req != 0) {
#line 206
    tmp___2 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 206
    do_wake = tmp___2;
  } else {
#line 206
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 206
    do_wake = tmp___3;
  }
#line 210
  tmp___4 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 210
  if (tmp___4 != 0) {
#line 211
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 212
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 214
  if (is_syncer_req != 0) {
#line 215
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 217
  if (do_wake != 0) {
#line 218
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 220
  if (do_al_complete_io != 0) {
#line 221
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 223
  wake_asender(mdev);
#line 224
  put_ldev(mdev);
#line 225
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 232
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 233
  mdev = e->mdev;
#line 234
  uptodate = (int )bio->bi_flags & 1;
#line 235
  is_write = (int )bio->bi_rw & 1;
#line 237
  if (error != 0) {
#line 238
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 241
  if (error == 0 && uptodate == 0) {
#line 242
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 248
    error = -5;
  } else {

  }
#line 251
  if (error != 0) {
#line 252
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 254
  bio_put(bio);
#line 255
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 255
  if (tmp != 0) {
#line 256
    if (is_write != 0) {
#line 257
      drbd_endio_write_sec_final(e);
    } else {
#line 259
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 260
  return;
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 268
  req = (struct drbd_request *)bio->bi_private;
#line 269
  mdev = req->mdev;
#line 272
  uptodate = (int )bio->bi_flags & 1;
#line 274
  if (error == 0 && uptodate == 0) {
#line 275
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 280
    error = -5;
  } else {

  }
#line 284
  tmp = __builtin_expect(error != 0, 0L);
#line 284
  if (tmp != 0L) {
#line 285
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 291
    what = completed_ok;
  }
#line 293
  bio_put(req->private_bio);
#line 294
  tmp___0 = ERR_PTR((long )error);
#line 294
  req->private_bio = (struct bio *)tmp___0;
#line 296
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 296
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 297
  __req_mod(req, what, & m);
#line 298
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 300
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 301
    complete_master_bio(mdev, & m);
  } else {

  }
#line 302
  return;
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 306
  __mptr = (struct drbd_work  const  *)w;
#line 306
  req = (struct drbd_request *)__mptr;
#line 312
  spin_lock_irq(& mdev->req_lock);
#line 313
  if (cancel != 0 || *((unsigned int *)mdev + 455UL) != 65536U) {
#line 314
    _req_mod(req, read_retry_remote_canceled);
#line 315
    spin_unlock_irq(& mdev->req_lock);
#line 316
    return (1);
  } else {

  }
#line 318
  spin_unlock_irq(& mdev->req_lock);
#line 320
  tmp = w_send_read_req(mdev, w, 0);
#line 320
  return (tmp);
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 325
  _b = cancel != 0;
#line 325
  if (_b != 0) {
#line 325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            325);
  } else {

  }
#line 325
  if (_b != 0) {
#line 325
    return (1);
  } else {

  }
#line 326
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 327
  return (1);
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 334
  page = e->pages;
#line 338
  desc.tfm = tfm;
#line 339
  desc.flags = 0U;
#line 341
  sg_init_table(& sg, 1U);
#line 342
  crypto_hash_init(& desc);
#line 344
  goto ldv_44446;
  ldv_44445: 
#line 346
  sg_set_page(& sg, page, 4096U, 0U);
#line 347
  crypto_hash_update(& desc, & sg, sg.length);
#line 348
  page = tmp;
  ldv_44446: 
#line 344
  tmp = page_chain_next(page);
#line 344
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 345
    goto ldv_44445;
  } else {

  }
#line 351
  len = e->size & 4095U;
#line 352
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 353
  crypto_hash_update(& desc, & sg, sg.length);
#line 354
  crypto_hash_final(& desc, (u8 *)digest);
#line 355
  return;
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 364
  desc.tfm = tfm;
#line 365
  desc.flags = 0U;
#line 367
  sg_init_table(& sg, 1U);
#line 368
  crypto_hash_init(& desc);
#line 370
  bvec = bio->bi_io_vec;
#line 370
  i = 0;
#line 370
  goto ldv_44459;
  ldv_44458: 
#line 371
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 372
  crypto_hash_update(& desc, & sg, sg.length);
#line 370
  bvec = bvec + 1;
#line 370
  i = i + 1;
  ldv_44459: ;
#line 370
  if ((int )bio->bi_vcnt > i) {
#line 371
    goto ldv_44458;
  } else {

  }
#line 374
  crypto_hash_final(& desc, (u8 *)digest);
#line 375
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 379
  __mptr = (struct drbd_work  const  *)w;
#line 379
  e = (struct drbd_epoch_entry *)__mptr;
#line 384
  if (e->block_id != 2205466966ULL) {
#line 384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            384);
  } else {

  }
#line 386
  tmp = __builtin_expect(cancel != 0, 0L);
#line 386
  if (tmp != 0L) {
#line 387
    drbd_free_ee(mdev, e);
#line 388
    return (1);
  } else {

  }
#line 391
  tmp___1 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 391
  if (tmp___1 != 0L) {
#line 392
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 392
    digest_size = (int )tmp___0;
#line 393
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 394
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 395
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 397
      inc_rs_pending(mdev);
#line 398
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 404
      kfree((void const   *)digest);
    } else {
#line 406
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 407
      ok = 0;
    }
  } else {
#line 410
    ok = 1;
  }
#line 412
  drbd_free_ee(mdev, e);
#line 414
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 414
  if (tmp___2 != 0L) {
#line 415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 416
  return (ok);
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;

  {
#line 425
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 425
  if (tmp == 0) {
#line 426
    return (0);
  } else {

  }
#line 430
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 431
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 432
    goto fail;
  } else {

  }
#line 434
  spin_lock_irq(& mdev->req_lock);
#line 435
  list_add(& e->w.list, & mdev->read_ee);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 438
  e->w.cb = & w_e_send_csum;
#line 439
  tmp___0 = drbd_submit_ee(mdev, e, 0U, 3);
#line 439
  if (tmp___0 == 0) {
#line 440
    return (1);
  } else {

  }
#line 442
  drbd_free_ee(mdev, e);
  fail: 
#line 444
  put_ldev(mdev);
#line 445
  return (2);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 451
  mdev = (struct drbd_conf *)data;
#line 454
  tmp = spinlock_check(& mdev->req_lock);
#line 454
  flags = _raw_spin_lock_irqsave(tmp);
#line 456
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 456
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 456
  if (tmp___1 != 0L) {
#line 457
    queue = 1;
#line 458
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U) {
#line 459
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 461
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 463
    queue = 0;
#line 464
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 467
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 470
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 470
  if (tmp___2 != 0 && queue != 0) {
#line 471
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 472
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  unsigned long tmp___13 ;

  {
#line 479
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 479
  capacity = tmp;
#line 484
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 484
  if (tmp___0 != 0L) {
#line 485
    return (1);
  } else {

  }
#line 487
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35127.conn <= 9, 0L);
#line 487
  if (tmp___1 != 0L) {
#line 488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 489
    return (0);
  } else {

  }
#line 492
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 272U) {
#line 493
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 496
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 496
  if (tmp___3 == 0) {
#line 501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 502
    mdev->resync_work.cb = & w_resync_inactive;
#line 503
    return (1);
  } else {

  }
#line 508
  if (mdev->agreed_pro_version <= 93) {
#line 508
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 508
    max_segment_size = (int )tmp___4;
  } else {
#line 508
    max_segment_size = 32768;
  }
#line 511
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 512
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 514
  ldv_mutex_lock_41(& mdev->data.mutex);
#line 515
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 516
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 518
    mx = 1;
  }
#line 519
  ldv_mutex_unlock_42(& mdev->data.mutex);
#line 522
  if (number > mx) {
#line 523
    mx = number;
  } else {

  }
#line 526
  if (pe + number > mx) {
#line 527
    number = mx - pe;
  } else {

  }
#line 530
  i = 0;
#line 530
  goto ldv_44516;
  ldv_44515: 
#line 532
  ldv_mutex_lock_43(& mdev->data.mutex);
#line 533
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 534
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 535
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 537
    queued = 1;
#line 538
    sndbuf = 0;
  }
#line 540
  ldv_mutex_unlock_44(& mdev->data.mutex);
#line 541
  if (sndbuf / 2 < queued) {
#line 542
    goto requeue;
  } else {

  }
  next_sector: 
#line 545
  size = 4096;
#line 546
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 548
  if (bit == 0xffffffffffffffffUL) {
#line 549
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 550
    mdev->resync_work.cb = & w_resync_inactive;
#line 551
    put_ldev(mdev);
#line 552
    return (1);
  } else {

  }
#line 555
  sector = bit << 3;
#line 557
  tmp___5 = drbd_try_rs_begin_io(mdev, sector);
#line 557
  if (tmp___5 != 0) {
#line 558
    mdev->bm_resync_fo = bit;
#line 559
    goto requeue;
  } else {

  }
#line 561
  mdev->bm_resync_fo = bit + 1UL;
#line 563
  tmp___6 = drbd_bm_test_bit(mdev, bit);
#line 563
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 563
  if (tmp___7 != 0L) {
#line 564
    drbd_rs_complete_io(mdev, sector);
#line 565
    goto next_sector;
  } else {

  }
#line 575
  align = 1;
  ldv_44508: ;
#line 577
  if (size + 4096 > max_segment_size) {
#line 578
    goto ldv_44507;
  } else {

  }
#line 581
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 582
    goto ldv_44507;
  } else {

  }
#line 585
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 586
    goto ldv_44507;
  } else {

  }
#line 592
  tmp___8 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 592
  if (tmp___8 != 1) {
#line 593
    goto ldv_44507;
  } else {

  }
#line 594
  bit = bit + 1UL;
#line 595
  size = size + 4096;
#line 596
  if (4096 << align <= size) {
#line 597
    align = align + 1;
  } else {

  }
#line 598
  i = i + 1;
#line 599
  goto ldv_44508;
  ldv_44507: ;
#line 602
  if (size > 4096) {
#line 603
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 607
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 608
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 609
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 610
    tmp___9 = read_for_csum(mdev, sector, size);
#line 610
    switch (tmp___9) {
    case 0: 
#line 612
    put_ldev(mdev);
#line 613
    return (0);
    case 2: 
#line 615
    drbd_rs_complete_io(mdev, sector);
#line 616
    mdev->bm_resync_fo = sector >> 3;
#line 617
    goto requeue;
    }
  } else {
#line 621
    inc_rs_pending(mdev);
#line 622
    tmp___12 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 622
    if (tmp___12 == 0) {
#line 624
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 625
      atomic_dec(& mdev->rs_pending_cnt);
#line 625
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 625
      if (tmp___11 < 0) {
#line 625
        tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 625
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 625, tmp___10);
      } else {

      }
#line 626
      put_ldev(mdev);
#line 627
      return (0);
    } else {

    }
  }
#line 530
  i = i + 1;
  ldv_44516: ;
#line 530
  if (i < number) {
#line 531
    goto ldv_44515;
  } else {

  }
#line 632
  tmp___13 = drbd_bm_bits(mdev);
#line 632
  if (mdev->bm_resync_fo >= tmp___13) {
#line 639
    mdev->resync_work.cb = & w_resync_inactive;
#line 640
    put_ldev(mdev);
#line 641
    return (1);
  } else {

  }
  requeue: 
#line 645
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 646
  put_ldev(mdev);
#line 647
  return (1);
}
}
#line 650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 654
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 654
  capacity = tmp;
#line 656
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 656
  if (tmp___0 != 0L) {
#line 657
    return (1);
  } else {

  }
#line 659
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35127.conn <= 9, 0L);
#line 659
  if (tmp___1 != 0L) {
#line 660
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 661
    return (0);
  } else {

  }
#line 664
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 665
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 665
  if (tmp___2 > number) {
#line 666
    goto requeue;
  } else {

  }
#line 668
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 668
  number = number - tmp___3;
#line 670
  sector = mdev->ov_position;
#line 671
  i = 0;
#line 671
  goto ldv_44534;
  ldv_44533: ;
#line 672
  if (sector >= capacity) {
#line 673
    mdev->resync_work.cb = & w_resync_inactive;
#line 674
    return (1);
  } else {

  }
#line 677
  size = 4096;
#line 679
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 679
  if (tmp___4 != 0) {
#line 680
    mdev->ov_position = sector;
#line 681
    goto requeue;
  } else {

  }
#line 684
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 685
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 687
  inc_rs_pending(mdev);
#line 688
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 688
  if (tmp___7 == 0) {
#line 689
    atomic_dec(& mdev->rs_pending_cnt);
#line 689
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 689
    if (tmp___6 < 0) {
#line 689
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 689
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 689, tmp___5);
    } else {

    }
#line 690
    return (0);
  } else {

  }
#line 692
  sector = sector + 8UL;
#line 671
  i = i + 1;
  ldv_44534: ;
#line 671
  if (i < number) {
#line 672
    goto ldv_44533;
  } else {

  }
#line 694
  mdev->ov_position = sector;
  requeue: 
#line 697
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 698
  return (1);
}
}
#line 702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 704
  kfree((void const   *)w);
#line 705
  ov_oos_print(mdev);
#line 706
  drbd_resync_finished(mdev);
#line 708
  return (1);
}
}
#line 711 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 713
  kfree((void const   *)w);
#line 715
  drbd_resync_finished(mdev);
#line 717
  return (1);
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 726
  khelper_cmd = 0;
#line 731
  tmp___1 = drbd_rs_del_all(mdev);
#line 731
  if (tmp___1 != 0) {
#line 737
    drbd_kick_lo(mdev);
#line 738
    tmp = get_current();
#line 738
    tmp->state = 1L;
#line 739
    schedule_timeout(25L);
#line 740
    tmp___0 = kmalloc___0(24UL, 32U);
#line 740
    w = (struct drbd_work *)tmp___0;
#line 741
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 742
      w->cb = & w_resync_finished;
#line 743
      drbd_queue_work(& mdev->data.work, w);
#line 744
      return (1);
    } else {

    }
#line 746
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 749
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 750
  if (dt == 0UL) {
#line 751
    dt = 1UL;
  } else {

  }
#line 752
  db = mdev->rs_total;
#line 753
  dbdt = db / dt << 2;
#line 754
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 756
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 756
  if (tmp___2 == 0) {
#line 757
    goto out;
  } else {

  }
#line 759
  spin_lock_irq(& mdev->req_lock);
#line 760
  os = mdev->state;
#line 764
  if ((int )os.ldv_35127.conn <= 10) {
#line 765
    goto out_unlock;
  } else {

  }
#line 767
  ns = os;
#line 768
  ns.ldv_35127.conn = 10U;
#line 770
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 775
  n_oos = drbd_bm_total_weight(mdev);
#line 777
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 778
    if (n_oos != 0UL) {
#line 779
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 781
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 784
      if (mdev->rs_failed != n_oos) {
#line 784
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                784);
      } else {

      }
#line 786
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 787
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 789
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 790
        s = mdev->rs_same_csum;
#line 791
        t = mdev->rs_total;
#line 792
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 795
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 804
  if (mdev->rs_failed != 0UL) {
#line 805
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 807
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 808
      ns.ldv_35127.disk = 4U;
#line 809
      ns.ldv_35127.pdsk = 8U;
    } else {
#line 811
      ns.ldv_35127.disk = 8U;
#line 812
      ns.ldv_35127.pdsk = 4U;
    }
  } else {
#line 815
    ns.ldv_35127.disk = 8U;
#line 816
    ns.ldv_35127.pdsk = 8U;
#line 818
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 819
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 821
        i = 1;
#line 821
        goto ldv_44564;
        ldv_44563: 
#line 822
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 821
        i = i + 1;
        ldv_44564: ;
#line 821
        if (i <= 3) {
#line 822
          goto ldv_44563;
        } else {

        }
#line 823
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 824
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 826
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 830
    drbd_uuid_set_bm(mdev, 0ULL);
#line 832
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 836
      i___0 = 0;
#line 836
      goto ldv_44568;
      ldv_44567: 
#line 837
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 836
      i___0 = i___0 + 1;
      ldv_44568: ;
#line 836
      if (i___0 <= 3) {
#line 837
        goto ldv_44567;
      } else {

      }

    } else {

    }
  }
#line 841
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 843
  spin_unlock_irq(& mdev->req_lock);
#line 844
  put_ldev(mdev);
  out: 
#line 846
  mdev->rs_total = 0UL;
#line 847
  mdev->rs_failed = 0UL;
#line 848
  mdev->rs_paused = 0UL;
#line 849
  mdev->ov_start_sector = 0UL;
#line 851
  tmp___3 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 851
  if (tmp___3 != 0) {
#line 852
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, due to failed kmalloc\n");
#line 853
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 856
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 857
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 859
  return (1);
}
}
#line 863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 865
  tmp = drbd_ee_has_active_page(e);
#line 865
  if (tmp != 0) {
#line 867
    spin_lock_irq(& mdev->req_lock);
#line 868
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 869
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 871
    drbd_free_ee(mdev, e);
  }
#line 872
  return;
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 882
  __mptr = (struct drbd_work  const  *)w;
#line 882
  e = (struct drbd_epoch_entry *)__mptr;
#line 885
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 885
  if (tmp___1 != 0L) {
#line 886
    drbd_free_ee(mdev, e);
#line 887
    atomic_dec(& mdev->unacked_cnt);
#line 887
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 887
    if (tmp___0 < 0) {
#line 887
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 887
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 887, tmp);
    } else {

    }
#line 888
    return (1);
  } else {

  }
#line 891
  tmp___3 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 891
  if (tmp___3 != 0L) {
#line 892
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 894
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 894
    if (tmp___2 != 0) {
#line 895
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 898
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 901
  atomic_dec(& mdev->unacked_cnt);
#line 901
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 901
  if (tmp___5 < 0) {
#line 901
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 901
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 901, tmp___4);
  } else {

  }
#line 903
  move_to_net_ee_or_free(mdev, e);
#line 905
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 905
  if (tmp___6 != 0L) {
#line 906
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 907
  return (ok);
}
}
#line 916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 918
  __mptr = (struct drbd_work  const  *)w;
#line 918
  e = (struct drbd_epoch_entry *)__mptr;
#line 921
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 921
  if (tmp___1 != 0L) {
#line 922
    drbd_free_ee(mdev, e);
#line 923
    atomic_dec(& mdev->unacked_cnt);
#line 923
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 923
    if (tmp___0 < 0) {
#line 923
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 923
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 923, tmp);
    } else {

    }
#line 924
    return (1);
  } else {

  }
#line 927
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 927
  if (tmp___2 != 0) {
#line 928
    drbd_rs_complete_io(mdev, e->sector);
#line 929
    put_ldev(mdev);
  } else {

  }
#line 932
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 932
  if (tmp___6 != 0L) {
#line 933
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35127.pdsk > 3, 1L);
#line 933
    if (tmp___4 != 0L) {
#line 934
      inc_rs_pending(mdev);
#line 935
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 937
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 937
      if (tmp___3 != 0) {
#line 938
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 940
      ok = 1;
    }
  } else {
#line 943
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 943
    if (tmp___5 != 0) {
#line 944
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 947
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 950
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 953
  atomic_dec(& mdev->unacked_cnt);
#line 953
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 953
  if (tmp___8 < 0) {
#line 953
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 953, tmp___7);
  } else {

  }
#line 955
  move_to_net_ee_or_free(mdev, e);
#line 957
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 957
  if (tmp___9 != 0L) {
#line 958
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 959
  return (ok);
}
}
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;

  {
#line 964
  __mptr = (struct drbd_work  const  *)w;
#line 964
  e = (struct drbd_epoch_entry *)__mptr;
#line 967
  digest = 0;
#line 968
  eq = 0;
#line 970
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 970
  if (tmp___1 != 0L) {
#line 971
    drbd_free_ee(mdev, e);
#line 972
    atomic_dec(& mdev->unacked_cnt);
#line 972
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 972
    if (tmp___0 < 0) {
#line 972
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 972
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 972, tmp);
    } else {

    }
#line 973
    return (1);
  } else {

  }
#line 976
  drbd_rs_complete_io(mdev, e->sector);
#line 978
  di = (struct digest_info *)e->block_id;
#line 980
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 980
  if (tmp___5 != 0L) {
#line 984
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 985
      tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 985
      digest_size = (int )tmp___2;
#line 986
      if (di->digest_size != digest_size) {
#line 986
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                986);
      } else {

      }
#line 987
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 989
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 990
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 991
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 991
      eq = tmp___3 == 0;
#line 992
      kfree((void const   *)digest);
    } else {

    }
#line 995
    if (eq != 0) {
#line 996
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         996U);
#line 998
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 999
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1001
      inc_rs_pending(mdev);
#line 1002
      e->block_id = 0xffffffffffffffffULL;
#line 1003
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1006
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1007
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1007
    if (tmp___4 != 0) {
#line 1008
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1011
  atomic_dec(& mdev->unacked_cnt);
#line 1011
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
  if (tmp___7 < 0) {
#line 1011
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1011, tmp___6);
  } else {

  }
#line 1013
  kfree((void const   *)di);
#line 1015
  move_to_net_ee_or_free(mdev, e);
#line 1017
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 1017
  if (tmp___8 != 0L) {
#line 1018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1019
  return (ok);
}
}
#line 1022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1024
  __mptr = (struct drbd_work  const  *)w;
#line 1024
  e = (struct drbd_epoch_entry *)__mptr;
#line 1027
  ok = 1;
#line 1029
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1029
  if (tmp != 0L) {
#line 1030
    goto out;
  } else {

  }
#line 1032
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1032
  if (tmp___0 != 0L) {
#line 1033
    goto out;
  } else {

  }
#line 1035
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1035
  digest_size = (int )tmp___1;
#line 1037
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1038
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1039
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1040
    inc_rs_pending(mdev);
#line 1041
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1043
    if (ok == 0) {
#line 1044
      atomic_dec(& mdev->rs_pending_cnt);
#line 1044
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1044
      if (tmp___3 < 0) {
#line 1044
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1044
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1044, tmp___2);
      } else {

      }
    } else {

    }
#line 1045
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1049
  drbd_free_ee(mdev, e);
#line 1051
  atomic_dec(& mdev->unacked_cnt);
#line 1051
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1051
  if (tmp___5 < 0) {
#line 1051
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1051, tmp___4);
  } else {

  }
#line 1053
  return (ok);
}
}
#line 1056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1058
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1059
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1061
    mdev->ov_last_oos_start = sector;
#line 1062
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1064
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1064U);
#line 1065
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1066
  return;
}
}
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1070
  __mptr = (struct drbd_work  const  *)w;
#line 1070
  e = (struct drbd_epoch_entry *)__mptr;
#line 1074
  eq = 0;
#line 1076
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1076
  if (tmp___1 != 0L) {
#line 1077
    drbd_free_ee(mdev, e);
#line 1078
    atomic_dec(& mdev->unacked_cnt);
#line 1078
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
    if (tmp___0 < 0) {
#line 1078
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1078, tmp);
    } else {

    }
#line 1079
    return (1);
  } else {

  }
#line 1084
  drbd_rs_complete_io(mdev, e->sector);
#line 1086
  di = (struct digest_info *)e->block_id;
#line 1088
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1088
  if (tmp___5 != 0L) {
#line 1089
    tmp___2 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1089
    digest_size = (int )tmp___2;
#line 1090
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1091
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1092
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1094
      if (di->digest_size != digest_size) {
#line 1094
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1094);
      } else {

      }
#line 1095
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1095
      eq = tmp___3 == 0;
#line 1096
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1099
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1100
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1100
    if (tmp___4 != 0) {
#line 1101
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1104
  atomic_dec(& mdev->unacked_cnt);
#line 1104
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1104
  if (tmp___7 < 0) {
#line 1104
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1104
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1104, tmp___6);
  } else {

  }
#line 1106
  kfree((void const   *)di);
#line 1108
  if (eq == 0) {
#line 1109
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1111
    ov_oos_print(mdev);
  }
#line 1113
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1116
  drbd_free_ee(mdev, e);
#line 1118
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1118
  if (mdev->ov_left == 0UL) {
#line 1119
    ov_oos_print(mdev);
#line 1120
    drbd_resync_finished(mdev);
  } else {

  }
#line 1123
  return (ok);
}
}
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1128
  __mptr = (struct drbd_work  const  *)w;
#line 1128
  b = (struct drbd_wq_barrier *)__mptr;
#line 1129
  complete(& b->done);
#line 1130
  return (1);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1135
  __mptr = (struct drbd_work  const  *)w;
#line 1135
  b = (struct drbd_tl_epoch *)__mptr;
#line 1136
  p = & mdev->data.sbuf.barrier;
#line 1137
  ok = 1;
#line 1144
  spin_lock_irq(& mdev->req_lock);
#line 1145
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35127.conn <= 9) {
#line 1146
    cancel = 1;
  } else {

  }
#line 1147
  spin_unlock_irq(& mdev->req_lock);
#line 1148
  if (cancel != 0) {
#line 1149
    return (1);
  } else {

  }
#line 1151
  tmp = drbd_get_data_sock(mdev);
#line 1151
  if (tmp == 0) {
#line 1152
    return (0);
  } else {

  }
#line 1153
  p->barrier = b->br_number;
#line 1157
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1159
  drbd_put_data_sock(mdev);
#line 1161
  return (ok);
}
}
#line 1164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1166
  if (cancel != 0) {
#line 1167
    return (1);
  } else {

  }
#line 1168
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1168
  return (tmp);
}
}
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1179
  __mptr = (struct drbd_work  const  *)w;
#line 1179
  req = (struct drbd_request *)__mptr;
#line 1182
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1182
  if (tmp != 0L) {
#line 1183
    req_mod(req, send_canceled);
#line 1184
    return (1);
  } else {

  }
#line 1187
  ok = drbd_send_dblock(mdev, req);
#line 1188
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1190
  return (ok);
}
}
#line 1199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1201
  __mptr = (struct drbd_work  const  *)w;
#line 1201
  req = (struct drbd_request *)__mptr;
#line 1204
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1204
  if (tmp != 0L) {
#line 1205
    req_mod(req, send_canceled);
#line 1206
    return (1);
  } else {

  }
#line 1209
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1212
  if (ok == 0) {
#line 1215
    if ((int )mdev->state.ldv_35127.conn > 9) {
#line 1216
      val.i = 0U;
#line 1216
      val.ldv_35127.conn = 5U;
#line 1216
      mask.i = 0U;
#line 1216
      mask.ldv_35127.conn = 31U;
#line 1216
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1218
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1220
  return (ok);
}
}
#line 1223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1225
  odev = mdev;
  ldv_44722: ;
#line 1228
  if (odev->sync_conf.after == -1) {
#line 1229
    return (1);
  } else {

  }
#line 1230
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1231
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1231
  if (_b != 0) {
#line 1231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1231);
  } else {

  }
#line 1231
  if (_b != 0) {
#line 1231
    return (1);
  } else {

  }
#line 1232
  if (((((int )odev->state.ldv_35127.conn > 15 && (int )odev->state.ldv_35127.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1236
    return (0);
  } else {

  }
#line 1237
  goto ldv_44722;
}
}
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1249
  rv = 0;
#line 1251
  i = 0;
#line 1251
  goto ldv_44733;
  ldv_44732: 
#line 1252
  odev = minor_to_mdev((unsigned int )i);
#line 1253
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1254
    goto ldv_44729;
  } else {

  }
#line 1255
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1256
    goto ldv_44729;
  } else {

  }
#line 1257
  tmp___0 = _drbd_may_sync_now(odev);
#line 1257
  if (tmp___0 == 0) {
#line 1258
    __ns.i = odev->state.i;
#line 1258
    __ns.ldv_35127.aftr_isp = 1U;
#line 1258
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1258
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_44729: 
#line 1251
  i = i + 1;
  ldv_44733: ;
#line 1251
  if ((unsigned int )i < minor_count) {
#line 1252
    goto ldv_44732;
  } else {

  }

#line 1262
  return (rv);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1274
  rv = 0;
#line 1276
  i = 0;
#line 1276
  goto ldv_44745;
  ldv_44744: 
#line 1277
  odev = minor_to_mdev((unsigned int )i);
#line 1278
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1279
    goto ldv_44741;
  } else {

  }
#line 1280
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1281
    goto ldv_44741;
  } else {

  }
#line 1282
  if ((unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1283
    tmp___0 = _drbd_may_sync_now(odev);
#line 1283
    if (tmp___0 != 0) {
#line 1284
      __ns.i = odev->state.i;
#line 1284
      __ns.ldv_35127.aftr_isp = 0U;
#line 1284
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1284
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_44741: 
#line 1276
  i = i + 1;
  ldv_44745: ;
#line 1276
  if ((unsigned int )i < minor_count) {
#line 1277
    goto ldv_44744;
  } else {

  }

#line 1289
  return (rv);
}
}
#line 1292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1294
  _raw_write_lock_irq(& global_state_lock);
#line 1295
  _drbd_resume_next(mdev);
#line 1296
  _raw_write_unlock_irq(& global_state_lock);
#line 1297
  return;
}
}
#line 1299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1301
  _raw_write_lock_irq(& global_state_lock);
#line 1302
  _drbd_pause_after(mdev);
#line 1303
  _raw_write_unlock_irq(& global_state_lock);
#line 1304
  return;
}
}
#line 1306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1310
  if (o_minor == -1) {
#line 1311
    return (101);
  } else {

  }
#line 1312
  if (o_minor < -1) {
#line 1313
    return (132);
  } else {
#line 1312
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1312
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1313
      return (132);
    } else {

    }
  }
#line 1316
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_44758: ;
#line 1318
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1319
    return (133);
  } else {

  }
#line 1322
  if (odev->sync_conf.after == -1) {
#line 1323
    return (101);
  } else {

  }
#line 1326
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1327
  goto ldv_44758;
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1335
  _raw_write_lock_irq(& global_state_lock);
#line 1336
  retcode = sync_after_error(mdev, na);
#line 1337
  if (retcode == 101) {
#line 1338
    mdev->sync_conf.after = na;
    ldv_44765: 
#line 1340
    changes = _drbd_pause_after(mdev);
#line 1341
    tmp = _drbd_resume_next(mdev);
#line 1341
    changes = tmp | changes;
#line 1342
    if (changes != 0) {
#line 1343
      goto ldv_44765;
    } else {

    }

  } else {

  }
#line 1344
  _raw_write_unlock_irq(& global_state_lock);
#line 1345
  return (retcode);
}
}
#line 1348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1350
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1351
  request_ping(mdev);
#line 1352
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1352
  if (tmp != 0 || (int )mdev->state.ldv_35127.conn <= 9) {
#line 1352
    goto ldv_44770;
  } else {

  }
#line 1352
  tmp___0 = get_current();
#line 1352
  __wait.flags = 0U;
#line 1352
  __wait.private = (void *)tmp___0;
#line 1352
  __wait.func = & autoremove_wake_function;
#line 1352
  __wait.task_list.next = & __wait.task_list;
#line 1352
  __wait.task_list.prev = & __wait.task_list;
  ldv_44773: 
#line 1352
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1352
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1352
  if (tmp___1 != 0 || (int )mdev->state.ldv_35127.conn <= 9) {
#line 1352
    goto ldv_44772;
  } else {

  }
#line 1352
  schedule();
#line 1352
  goto ldv_44773;
  ldv_44772: 
#line 1352
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44770: ;
#line 1355
  return;
}
}
#line 1364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1369
  if ((int )mdev->state.ldv_35127.conn > 15) {
#line 1370
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1371
    return;
  } else {

  }
#line 1375
  drbd_rs_cancel_all(mdev);
#line 1377
  if ((unsigned int )side == 17U) {
#line 1381
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1382
    r = (r >> 8) & 255;
#line 1383
    if (r > 0) {
#line 1384
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1386
      val.i = 0U;
#line 1386
      val.ldv_35127.conn = 1U;
#line 1386
      mask.i = 0U;
#line 1386
      mask.ldv_35127.conn = 31U;
#line 1386
      drbd_force_state(mdev, mask, val);
#line 1387
      return;
    } else {

    }
  } else {

  }
#line 1391
  drbd_state_lock(mdev);
#line 1393
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1393
  if (tmp == 0) {
#line 1394
    drbd_state_unlock(mdev);
#line 1395
    return;
  } else {

  }
#line 1398
  if ((unsigned int )side == 17U) {
#line 1399
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1403
    get_random_bytes((void *)(& uuid), 8);
#line 1404
    drbd_uuid_set(mdev, 1, uuid);
#line 1405
    drbd_send_sync_uuid(mdev, uuid);
#line 1407
    if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 16U) {
#line 1407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1407);
    } else {

    }
  }
#line 1410
  _raw_write_lock_irq(& global_state_lock);
#line 1411
  ns = mdev->state;
#line 1413
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1413
  ns.ldv_35127.aftr_isp = tmp___0 == 0;
#line 1415
  ns.ldv_35127.conn = (unsigned char )side;
#line 1417
  if ((unsigned int )side == 17U) {
#line 1418
    ns.ldv_35127.disk = 4U;
  } else {
#line 1420
    ns.ldv_35127.pdsk = 4U;
  }
#line 1422
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1423
  ns = mdev->state;
#line 1425
  if ((int )ns.ldv_35127.conn <= 9) {
#line 1426
    r = 0;
  } else {

  }
#line 1428
  if (r == 1) {
#line 1429
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1429
    mdev->rs_mark_left = tmp___1;
#line 1429
    mdev->rs_total = tmp___1;
#line 1431
    mdev->rs_failed = 0UL;
#line 1432
    mdev->rs_paused = 0UL;
#line 1433
    tmp___2 = jiffies;
#line 1433
    mdev->rs_mark_time = tmp___2;
#line 1433
    mdev->rs_start = tmp___2;
#line 1435
    mdev->rs_same_csum = 0UL;
#line 1436
    _drbd_pause_after(mdev);
  } else {

  }
#line 1438
  _raw_write_unlock_irq(& global_state_lock);
#line 1439
  put_ldev(mdev);
#line 1441
  if (r == 1) {
#line 1442
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35127.conn);
#line 1442
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1447
    if (mdev->rs_total == 0UL) {
#line 1449
      ping_peer(mdev);
#line 1450
      drbd_resync_finished(mdev);
    } else {

    }
#line 1457
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1458
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1460
    drbd_md_sync(mdev);
  } else {

  }
#line 1462
  drbd_state_unlock(mdev);
#line 1463
  return;
}
}
#line 1465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1467
  mdev = thi->mdev;
#line 1468
  w = 0;
#line 1469
  work_list.next = & work_list;
#line 1469
  work_list.prev = & work_list;
#line 1470
  intr = 0;
#line 1472
  tmp = mdev_to_minor(mdev);
#line 1472
  tmp___0 = get_current();
#line 1472
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1474
  goto ldv_44796;
  ldv_44806: 
#line 1475
  drbd_thread_current_set_cpu(mdev);
#line 1477
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1477
  if (tmp___1 != 0) {
#line 1478
    ldv_mutex_lock_45(& mdev->data.mutex);
#line 1479
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1480
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1481
    ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1483
    intr = down_interruptible(& mdev->data.work.s);
#line 1485
    ldv_mutex_lock_47(& mdev->data.mutex);
#line 1486
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1487
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1488
    ldv_mutex_unlock_48(& mdev->data.mutex);
  } else {

  }
#line 1491
  if (intr != 0) {
#line 1492
    if (intr != -4) {
#line 1492
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1492);
    } else {

    }
#line 1493
    tmp___2 = get_current();
#line 1493
    flush_signals(tmp___2);
#line 1494
    tmp___3 = get_t_state(thi);
#line 1494
    _b = (unsigned int )tmp___3 == 1U;
#line 1494
    if (_b != 0) {
#line 1494
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1494);
    } else {

    }
#line 1494
    if (_b != 0) {
#line 1495
      goto ldv_44796;
    } else {

    }
#line 1496
    goto ldv_44797;
  } else {

  }
#line 1499
  tmp___4 = get_t_state(thi);
#line 1499
  if ((unsigned int )tmp___4 != 1U) {
#line 1500
    goto ldv_44797;
  } else {

  }
#line 1505
  w = 0;
#line 1506
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1507
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1507
  _b___0 = tmp___5 != 0;
#line 1507
  if (_b___0 != 0) {
#line 1507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1507);
  } else {

  }
#line 1507
  if (_b___0 != 0) {
#line 1519
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1520
    goto ldv_44796;
  } else {

  }
#line 1522
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1522
  w = (struct drbd_work *)__mptr;
#line 1523
  list_del_init(& w->list);
#line 1524
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1526
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35127.conn <= 9);
#line 1526
  if (tmp___6 == 0) {
#line 1528
    if ((int )mdev->state.ldv_35127.conn > 9) {
#line 1530
      val.i = 0U;
#line 1530
      val.ldv_35127.conn = 5U;
#line 1530
      mask.i = 0U;
#line 1530
      mask.ldv_35127.conn = 31U;
#line 1530
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_44796: 
#line 1474
  tmp___7 = get_t_state(thi);
#line 1474
  if ((unsigned int )tmp___7 == 1U) {
#line 1475
    goto ldv_44806;
  } else {

  }
  ldv_44797: 
#line 1533
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1533
  if (tmp___8 == 0) {
#line 1533
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1533);
  } else {

  }
#line 1534
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1534
  if (tmp___9 == 0) {
#line 1534
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1534);
  } else {

  }
#line 1536
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1537
  i = 0;
#line 1538
  goto ldv_44813;
  ldv_44812: 
#line 1539
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1540
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1542
  goto ldv_44810;
  ldv_44809: 
#line 1543
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1543
  w = (struct drbd_work *)__mptr___0;
#line 1544
  list_del_init(& w->list);
#line 1545
  (*(w->cb))(mdev, w, 1);
#line 1546
  i = i + 1;
  ldv_44810: 
#line 1542
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1542
  if (tmp___10 == 0) {
#line 1543
    goto ldv_44809;
  } else {

  }
#line 1549
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_44813: 
#line 1538
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1538
  if (tmp___11 == 0) {
#line 1539
    goto ldv_44812;
  } else {

  }
#line 1551
  sema_init(& mdev->data.work.s, 0);
#line 1557
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1559
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 0U || (unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1559
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1559);
  } else {

  }
#line 1562
  drbd_thread_stop(& mdev->receiver);
#line 1563
  drbd_mdev_cleanup(mdev);
#line 1565
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1567
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1568
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1569
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1571
  return (0);
}
}
#line 1574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1579
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1581
  mutex_lock(ldv_func_arg1);
#line 1582
  return;
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1589
  tmp = mutex_trylock(ldv_func_arg1);
#line 1589
  ldv_func_res = tmp;
#line 1591
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1591
  return (tmp___0);
#line 1593
  return (ldv_func_res);
}
}
#line 1596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1601
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1603
  mutex_unlock(ldv_func_arg1);
#line 1604
  return;
}
}
#line 1606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1611
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1613
  mutex_lock(ldv_func_arg1);
#line 1614
  return;
}
}
#line 1616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1621
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1623
  mutex_unlock(ldv_func_arg1);
#line 1624
  return;
}
}
#line 1626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1631
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1633
  mutex_unlock(ldv_func_arg1);
#line 1634
  return;
}
}
#line 1636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1641
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1643
  mutex_lock(ldv_func_arg1);
#line 1644
  return;
}
}
#line 1646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1651
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1653
  mutex_unlock(ldv_func_arg1);
#line 1654
  return;
}
}
#line 1656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1661
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1663
  mutex_lock(ldv_func_arg1);
#line 1664
  return;
}
}
#line 1666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1671
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1673
  mutex_unlock(ldv_func_arg1);
#line 1674
  return;
}
}
#line 1676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1681
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1683
  mutex_lock(ldv_func_arg1);
#line 1684
  return;
}
}
#line 1686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1691
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1693
  mutex_unlock(ldv_func_arg1);
#line 1694
  return;
}
}
#line 1696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1701
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1703
  mutex_lock(ldv_func_arg1);
#line 1704
  return;
}
}
#line 1706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1711
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1713
  mutex_unlock(ldv_func_arg1);
#line 1714
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 363 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 148 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 150
  __list_del(list->prev, list->next);
#line 151
  list_add(list, head);
#line 152
  return;
}
}
#line 569 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 571
  h->next = 0;
#line 572
  h->pprev = 0;
#line 573
  return;
}
}
#line 575 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 577
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 585 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 587
  next = n->next;
#line 588
  pprev = n->pprev;
#line 589
  *pprev = next;
#line 590
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 591
    next->pprev = pprev;
  } else {

  }
#line 592
  return;
}
}
#line 601 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 603
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 603
  if (tmp == 0) {
#line 604
    __hlist_del(n);
#line 605
    INIT_HLIST_NODE(n);
  } else {

  }
#line 607
  return;
}
}
#line 609 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 611
  first = h->first;
#line 612
  n->next = first;
#line 613
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 614
    first->pprev = & n->next;
  } else {

  }
#line 615
  h->first = n;
#line 616
  n->pprev = & h->first;
#line 617
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) ;
#line 44
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5888: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5623.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5623.rlock);
#line 325
  return;
}
}
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 234 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 236
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 238
extern void sock_release(struct socket * ) ;
#line 241
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13861: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13861;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___1(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 337 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17776: ;
#line 63
    goto ldv_17776;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17777: ;
#line 65
    goto ldv_17777;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17778: ;
#line 66
    goto ldv_17778;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2283 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2285
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2285
  return (tmp);
}
}
#line 2309 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2311
  tmp = test_tsk_thread_flag(p, 2);
#line 2311
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2311
  return ((int )tmp___0);
}
}
#line 283 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  __might_sleep("include/linux/highmem.h", 61, 0);
#line 62
  tmp = lowmem_page_address(page);
#line 62
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 67
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 684 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 555 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 557
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 570
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 582
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1118
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1122
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1128
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1138
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1140
void tl_clear(struct drbd_conf *mdev ) ;
#line 1142
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1145
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1146
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1149
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1151
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1160
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1162
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1163
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1167
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1169
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1186
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1188
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1209
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1210
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1211
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1392
mempool_t *drbd_ee_mempool ;
#line 1394
struct page *drbd_pp_pool ;
#line 1395
spinlock_t drbd_pp_lock ;
#line 1396
int drbd_pp_vacant ;
#line 1397
wait_queue_head_t drbd_pp_wait ;
#line 1417
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1419
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1420
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1421
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1422
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1424
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1476
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1483
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1485
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1489
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1521
  val = 1;
#line 1522
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1524
  return;
}
}
#line 1526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1528
  val = 2;
#line 1529
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1531
  return;
}
}
#line 1542
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1545
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1571
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_44215;
  ldv_44214: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_44215: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_44214;
    } else {
#line 1661
      goto ldv_44216;
    }
  } else {

  }
  ldv_44216: ;
#line 1662
  return (0);
}
}
#line 1701 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1705
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1705
  return (tmp);
}
}
#line 1759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1761
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1764
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1767
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44287;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44287;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44287: ;
#line 1825
  return (s);
}
}
#line 1866 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1869
  tmp = spinlock_check(& q->q_lock);
#line 1869
  flags = _raw_spin_lock_irqsave(tmp);
#line 1870
  list_add(& w->list, & q->q);
#line 1871
  up(& q->s);
#line 1873
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1874
  return;
}
}
#line 1906 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1909
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1909
  return (tmp);
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1915
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1915
  return (tmp);
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1999
  atomic_inc(& mdev->unacked_cnt);
#line 2000
  return;
}
}
#line 2013 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2015
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2015
  if (tmp != 0) {
#line 2016
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2017
  return;
}
}
#line 2025 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2029
  atomic_inc(& mdev->net_cnt);
#line 2030
  have_net_conf = (int )mdev->state.ldv_35127.conn > 1;
#line 2031
  if (have_net_conf == 0) {
#line 2032
    put_net_conf(mdev);
  } else {

  }
#line 2033
  return (have_net_conf);
}
}
#line 2254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2256
  mdev->ed_uuid = val;
#line 2257
  return;
}
}
#line 2259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2266
  return ((int )a - (int )b);
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2278
  spin_lock(& mdev->peer_seq_lock);
#line 2279
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2279
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2280
  mdev->peer_seq = m;
#line 2281
  spin_unlock(& mdev->peer_seq_lock);
#line 2282
  if (m == new_seq) {
#line 2283
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2284
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_44549: ;
#line 208
    goto ldv_44549;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_44554: ;
#line 217
    goto ldv_44554;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 231 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 234
  tmp = ar_hash_slot(mdev, sector);
#line 234
  slot = tmp;
#line 238
  n = slot->first;
#line 238
  goto ldv_44572;
  ldv_44571: ;
#line 239
  if ((unsigned long )req == (unsigned long )id) {
#line 240
    if (req->sector != sector) {
#line 240
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              240);
    } else {

    }
#line 241
    return (req);
  } else {

  }
#line 238
  n = n->next;
  ldv_44572: ;
#line 238
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 238
    __builtin_prefetch((void const   *)n->next);
#line 238
    if (1 != 0) {
#line 238
      __mptr = (struct hlist_node  const  *)n;
#line 238
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 238
      if (1 != 0) {
#line 239
        goto ldv_44571;
      } else {
#line 241
        goto ldv_44573;
      }
    } else {
#line 241
      goto ldv_44573;
    }
  } else {

  }
  ldv_44573: ;
#line 244
  return (0);
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 282
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_44619: ;
#line 162
  goto ldv_44619;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 112
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 114
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 115
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 120
  spin_lock(& mdev->epoch_lock);
#line 121
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 121
  prev = (struct drbd_epoch *)__mptr;
#line 122
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 123
    prev = 0;
  } else {

  }
#line 124
  spin_unlock(& mdev->epoch_lock);
#line 125
  return (prev);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 144
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 144
  if (tmp___0 != 0L) {
#line 144
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (144), "i" (12UL));
    ldv_44709: ;
#line 144
    goto ldv_44709;
  } else {

  }
#line 145
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 145
  if (tmp___1 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_44710: ;
#line 145
    goto ldv_44710;
  } else {

  }
#line 147
  page = *head;
#line 149
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 152
  goto ldv_44713;
  ldv_44712: 
#line 153
  tmp = page_chain_next(page);
#line 154
  n = n - 1;
#line 154
  if (n == 0) {
#line 155
    goto ldv_44711;
  } else {

  }
#line 156
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 159
  page = tmp;
  ldv_44713: ;
#line 152
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 153
    goto ldv_44712;
  } else {

  }
  ldv_44711: 
#line 163
  page->ldv_12384.ldv_12381.private = 0UL;
#line 165
  page = *head;
#line 166
  *head = tmp;
#line 167
  return (page);
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 176
  i = 1;
#line 177
  goto ldv_44721;
  ldv_44720: 
#line 178
  i = i + 1;
#line 178
  page = tmp;
  ldv_44721: 
#line 177
  tmp = page_chain_next(page);
#line 177
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 178
    goto ldv_44720;
  } else {

  }

#line 179
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 180
    *len = i;
  } else {

  }
#line 181
  return (page);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 187
  i = 0;
#line 188
  goto ldv_44730;
  ldv_44729: 
#line 189
  put_page(page);
#line 190
  i = i + 1;
#line 188
  page = tmp;
  ldv_44730: ;
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 188
    tmp = page_chain_next(page);
#line 188
    if (1 != 0) {
#line 189
      goto ldv_44729;
    } else {
#line 191
      goto ldv_44731;
    }
  } else {

  }
  ldv_44731: ;
#line 192
  return (i);
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 200
  tmp = page_chain_tail(chain_first, 0);
#line 201
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 201
  if (tmp___0 != 0L) {
#line 201
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (201), "i" (12UL));
    ldv_44738: ;
#line 201
    goto ldv_44738;
  } else {

  }
#line 205
  chain_last->ldv_12384.ldv_12381.private = (unsigned long )*head;
#line 206
  *head = chain_first;
#line 207
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 211
  page = 0;
#line 212
  tmp = 0;
#line 213
  i = 0;
#line 217
  if (drbd_pp_vacant >= number) {
#line 218
    spin_lock(& drbd_pp_lock);
#line 219
    page = page_chain_del(& drbd_pp_pool, number);
#line 220
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 221
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 222
    spin_unlock(& drbd_pp_lock);
#line 223
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 224
      return (page);
    } else {

    }
  } else {

  }
#line 230
  i = 0;
#line 230
  goto ldv_44748;
  ldv_44747: 
#line 231
  tmp = alloc_pages(514U, 0U);
#line 232
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 233
    goto ldv_44746;
  } else {

  }
#line 234
  tmp->ldv_12384.ldv_12381.private = (unsigned long )page;
#line 235
  page = tmp;
#line 230
  i = i + 1;
  ldv_44748: ;
#line 230
  if (i < number) {
#line 231
    goto ldv_44747;
  } else {

  }
  ldv_44746: ;
#line 238
  if (i == number) {
#line 239
    return (page);
  } else {

  }
#line 244
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 245
    tmp = page_chain_tail(page, 0);
#line 246
    spin_lock(& drbd_pp_lock);
#line 247
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 248
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 249
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 251
  return (0);
}
}
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 259
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 259
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 260
    drbd_kick_lo(mdev);
  } else {

  }
#line 261
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 273
  le = mdev->net_ee.next;
#line 273
  tle = le->next;
#line 273
  goto ldv_44763;
  ldv_44762: 
#line 274
  __mptr = (struct list_head  const  *)le;
#line 274
  e = (struct drbd_epoch_entry *)__mptr;
#line 275
  tmp = drbd_ee_has_active_page___0(e);
#line 275
  if (tmp != 0) {
#line 276
    goto ldv_44761;
  } else {

  }
#line 277
  list_move(le, to_be_freed);
#line 273
  le = tle;
#line 273
  tle = le->next;
  ldv_44763: ;
#line 273
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 274
    goto ldv_44762;
  } else {

  }
  ldv_44761: ;
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 283
  reclaimed.next = & reclaimed;
#line 283
  reclaimed.prev = & reclaimed;
#line 286
  maybe_kick_lo(mdev);
#line 287
  spin_lock_irq(& mdev->req_lock);
#line 288
  reclaim_net_ee(mdev, & reclaimed);
#line 289
  spin_unlock_irq(& mdev->req_lock);
#line 291
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 291
  e = (struct drbd_epoch_entry *)__mptr;
#line 291
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 291
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 291
  goto ldv_44777;
  ldv_44776: 
#line 292
  drbd_free_ee(mdev, e);
#line 291
  e = t;
#line 291
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 291
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44777: ;
#line 291
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 292
    goto ldv_44776;
  } else {

  }

#line 296
  return;
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 309
  page = 0;
#line 310
  tmp = get_current();
#line 310
  wait.flags = 0U;
#line 310
  wait.private = (void *)tmp;
#line 310
  wait.func = & autoremove_wake_function;
#line 310
  wait.task_list.next = & wait.task_list;
#line 310
  wait.task_list.prev = & wait.task_list;
#line 314
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 314
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 315
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 317
  goto ldv_44788;
  ldv_44787: 
#line 318
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 320
  drbd_kick_lo_and_reclaim_net(mdev);
#line 322
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 322
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 323
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 324
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 325
      goto ldv_44786;
    } else {

    }
  } else {

  }
#line 328
  if (! retry) {
#line 329
    goto ldv_44786;
  } else {

  }
#line 331
  tmp___2 = get_current();
#line 331
  tmp___3 = signal_pending(tmp___2);
#line 331
  if (tmp___3 != 0) {
#line 332
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 333
    goto ldv_44786;
  } else {

  }
#line 336
  schedule();
  ldv_44788: ;
#line 317
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 318
    goto ldv_44787;
  } else {

  }
  ldv_44786: 
#line 338
  finish_wait(& drbd_pp_wait, & wait);
#line 340
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 341
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 342
  return (page);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int i ;
  struct page *tmp ;

  {
#line 352
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 353
    i = page_chain_free(page);
  } else {
#line 356
    tmp = page_chain_tail(page, & i);
#line 357
    spin_lock(& drbd_pp_lock);
#line 358
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 359
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 360
    spin_unlock(& drbd_pp_lock);
  }
#line 362
  atomic_sub(i, & mdev->pp_in_use);
#line 363
  i = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 364
  if (i < 0) {
#line 365
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: pp_in_use: %d < 0\n",
             i);
  } else {

  }
#line 366
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 367
  return;
}
}
#line 384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 392
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 394
  tmp = drbd_insert_fault(mdev, 8U);
#line 394
  if (tmp != 0) {
#line 395
    return (0);
  } else {

  }
#line 397
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 397
  e = (struct drbd_epoch_entry *)tmp___0;
#line 398
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 399
    if ((gfp_mask & 512U) == 0U) {
#line 400
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 401
    return (0);
  } else {

  }
#line 404
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 405
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 406
    goto fail;
  } else {

  }
#line 408
  INIT_HLIST_NODE(& e->colision);
#line 409
  e->epoch = 0;
#line 410
  e->mdev = mdev;
#line 411
  e->pages = page;
#line 412
  atomic_set(& e->pending_bios, 0);
#line 413
  e->size = data_size;
#line 414
  e->flags = 0UL;
#line 415
  e->sector = sector;
#line 416
  e->sector = sector;
#line 417
  e->block_id = id;
#line 419
  return (e);
  fail: 
#line 422
  mempool_free((void *)e, drbd_ee_mempool);
#line 423
  return (0);
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 428
  drbd_pp_free(mdev, e->pages);
#line 429
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 429
  if (tmp != 0) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            429);
  } else {

  }
#line 430
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 430
  if (tmp___0 == 0) {
#line 430
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            430);
  } else {

  }
#line 431
  mempool_free((void *)e, drbd_ee_mempool);
#line 432
  return;
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 436
  work_list.next = & work_list;
#line 436
  work_list.prev = & work_list;
#line 438
  count = 0;
#line 440
  spin_lock_irq(& mdev->req_lock);
#line 441
  list_splice_init(list, & work_list);
#line 442
  spin_unlock_irq(& mdev->req_lock);
#line 444
  __mptr = (struct list_head  const  *)work_list.next;
#line 444
  e = (struct drbd_epoch_entry *)__mptr;
#line 444
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 444
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 444
  goto ldv_44825;
  ldv_44824: 
#line 445
  drbd_free_ee(mdev, e);
#line 446
  count = count + 1;
#line 444
  e = t;
#line 444
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 444
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44825: ;
#line 444
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 445
    goto ldv_44824;
  } else {

  }

#line 448
  return (count);
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 463
  work_list.next = & work_list;
#line 463
  work_list.prev = & work_list;
#line 464
  reclaimed.next = & reclaimed;
#line 464
  reclaimed.prev = & reclaimed;
#line 466
  ok = (int )mdev->state.ldv_35127.conn > 8;
#line 468
  spin_lock_irq(& mdev->req_lock);
#line 469
  reclaim_net_ee(mdev, & reclaimed);
#line 470
  list_splice_init(& mdev->done_ee, & work_list);
#line 471
  spin_unlock_irq(& mdev->req_lock);
#line 473
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 473
  e = (struct drbd_epoch_entry *)__mptr;
#line 473
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 473
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 473
  goto ldv_44842;
  ldv_44841: 
#line 474
  drbd_free_ee(mdev, e);
#line 473
  e = t;
#line 473
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 473
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44842: ;
#line 473
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 474
    goto ldv_44841;
  } else {

  }
#line 480
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 480
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 480
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 480
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 480
  goto ldv_44851;
  ldv_44850: 
#line 482
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 482
  ok = tmp != 0 && ok != 0;
#line 483
  drbd_free_ee(mdev, e);
#line 480
  e = t;
#line 480
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 480
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_44851: ;
#line 480
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 481
    goto ldv_44850;
  } else {

  }
#line 485
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 487
  return (ok);
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 492
  tmp = get_current();
#line 492
  wait.flags = 0U;
#line 492
  wait.private = (void *)tmp;
#line 492
  wait.func = & autoremove_wake_function;
#line 492
  wait.task_list.next = & wait.task_list;
#line 492
  wait.task_list.prev = & wait.task_list;
#line 496
  goto ldv_44859;
  ldv_44858: 
#line 497
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 498
  spin_unlock_irq(& mdev->req_lock);
#line 499
  drbd_kick_lo(mdev);
#line 500
  schedule();
#line 501
  finish_wait(& mdev->ee_wait, & wait);
#line 502
  spin_lock_irq(& mdev->req_lock);
  ldv_44859: 
#line 496
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 496
  if (tmp___0 == 0) {
#line 497
    goto ldv_44858;
  } else {

  }

#line 501
  return;
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 508
  spin_lock_irq(& mdev->req_lock);
#line 509
  _drbd_wait_ee_list_empty(mdev, head);
#line 510
  spin_unlock_irq(& mdev->req_lock);
#line 511
  return;
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 518
  sk = sock->sk;
#line 519
  err = 0;
#line 521
  *what = "listen";
#line 522
  err = (*((sock->ops)->listen))(sock, 5);
#line 523
  if (err < 0) {
#line 524
    goto out;
  } else {

  }
#line 526
  *what = "sock_create_lite";
#line 527
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 529
  if (err < 0) {
#line 530
    goto out;
  } else {

  }
#line 532
  *what = "accept";
#line 533
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 534
  if (err < 0) {
#line 535
    sock_release(*newsock);
#line 536
    *newsock = 0;
#line 537
    goto out;
  } else {

  }
#line 539
  (*newsock)->ops = sock->ops;
  out: ;
#line 542
  return (err);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 549
  iov.iov_base = buf;
#line 549
  iov.iov_len = size;
#line 553
  msg.msg_name = 0;
#line 553
  msg.msg_namelen = 0;
#line 553
  msg.msg_iov = (struct iovec *)(& iov);
#line 553
  msg.msg_iovlen = 1UL;
#line 553
  msg.msg_control = 0;
#line 553
  msg.msg_controllen = 0UL;
#line 553
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 560
  tmp = current_thread_info___0();
#line 560
  oldfs = tmp->addr_limit;
#line 561
  tmp___0 = current_thread_info___0();
#line 561
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 561
  tmp___0->addr_limit = __constr_expr_0;
#line 562
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 563
  tmp___1 = current_thread_info___0();
#line 563
  tmp___1->addr_limit = oldfs;
#line 565
  return (rv);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 571
  iov.iov_base = buf;
#line 571
  iov.iov_len = size;
#line 575
  msg.msg_name = 0;
#line 575
  msg.msg_namelen = 0;
#line 575
  msg.msg_iov = (struct iovec *)(& iov);
#line 575
  msg.msg_iovlen = 1UL;
#line 575
  msg.msg_control = 0;
#line 575
  msg.msg_controllen = 0UL;
#line 575
  msg.msg_flags = 16640U;
#line 582
  tmp = current_thread_info___0();
#line 582
  oldfs = tmp->addr_limit;
#line 583
  tmp___0 = current_thread_info___0();
#line 583
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 583
  tmp___0->addr_limit = __constr_expr_0;
  ldv_44897: 
#line 586
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 587
  if ((size_t )rv == size) {
#line 588
    goto ldv_44896;
  } else {

  }
#line 595
  if (rv < 0) {
#line 596
    if (rv == -104) {
#line 597
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 598
    if (rv != -512) {
#line 599
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 600
    goto ldv_44896;
  } else
#line 601
  if (rv == 0) {
#line 602
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 603
    goto ldv_44896;
  } else {
#line 609
    goto ldv_44896;
  }
#line 611
  goto ldv_44897;
  ldv_44896: 
#line 613
  tmp___1 = current_thread_info___0();
#line 613
  tmp___1->addr_limit = oldfs;
#line 615
  if ((size_t )rv != size) {
#line 616
    val.i = 0U;
#line 616
    val.ldv_35127.conn = 4U;
#line 616
    mask.i = 0U;
#line 616
    mask.ldv_35127.conn = 31U;
#line 616
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 618
  return (rv);
}
}
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 630
  if (snd != 0U) {
#line 631
    (sock->sk)->sk_sndbuf = (int )snd;
#line 632
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 634
  if (rcv != 0U) {
#line 635
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 636
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 638
  return;
}
}
#line 640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 646
  disconnect_on_error = 1;
#line 648
  tmp = get_net_conf(mdev);
#line 648
  if (tmp == 0) {
#line 649
    return (0);
  } else {

  }
#line 651
  what = "sock_create_kern";
#line 652
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 654
  if (err < 0) {
#line 655
    sock = 0;
#line 656
    goto out;
  } else {

  }
#line 659
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 659
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 659
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 661
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 671
  __min1 = (mdev->net_conf)->my_addr_len;
#line 671
  __min2 = 28;
#line 671
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 671
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 673
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 674
    src_in6.sin6_port = 0U;
  } else {
#line 676
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 678
  what = "bind before connect";
#line 679
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 682
  if (err < 0) {
#line 683
    goto out;
  } else {

  }
#line 687
  disconnect_on_error = 0;
#line 688
  what = "connect";
#line 689
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 694
  if (err < 0) {
#line 695
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 696
      sock_release(sock);
#line 697
      sock = 0;
    } else {

    }
#line 699
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 706
    disconnect_on_error = 0;
#line 707
    goto ldv_44934;
    default: 
#line 709
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_44934: ;
#line 711
    if (disconnect_on_error != 0) {
#line 712
      val.i = 0U;
#line 712
      val.ldv_35127.conn = 1U;
#line 712
      mask.i = 0U;
#line 712
      mask.ldv_35127.conn = 31U;
#line 712
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 714
  put_net_conf(mdev);
#line 715
  return (sock);
}
}
#line 718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 721
  s_estab = 0;
#line 724
  tmp = get_net_conf(mdev);
#line 724
  if (tmp == 0) {
#line 725
    return (0);
  } else {

  }
#line 727
  what = "sock_create_kern";
#line 728
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 730
  if (err != 0) {
#line 731
    s_listen = 0;
#line 732
    goto out;
  } else {

  }
#line 735
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 736
  tmp___0 = random32();
#line 736
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 738
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 739
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 740
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 741
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 744
  what = "bind before listen";
#line 745
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 748
  if (err < 0) {
#line 749
    goto out;
  } else {

  }
#line 751
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 754
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 755
    sock_release(s_listen);
  } else {

  }
#line 756
  if (err < 0) {
#line 757
    if ((err != -11 && err != -4) && err != -512) {
#line 758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 759
      val.i = 0U;
#line 759
      val.ldv_35127.conn = 1U;
#line 759
      mask.i = 0U;
#line 759
      mask.ldv_35127.conn = 31U;
#line 759
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 762
  put_net_conf(mdev);
#line 764
  return (s_estab);
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 770
  h = & mdev->data.sbuf.header;
#line 772
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 772
  return (tmp);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 777
  h = & mdev->data.sbuf.header;
#line 780
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 782
  if (rr == 8 && h->magic == 1728214147U) {
#line 783
    tmp = __fswab16((int )h->command);
#line 783
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 785
  return (65535);
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 798
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 799
    return (0);
  } else {

  }
#line 801
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 803
  if (rr > 0 || rr == -11) {
#line 804
    return (1);
  } else {
#line 806
    sock_release(*sock);
#line 807
    *sock = 0;
#line 808
    return (0);
  }
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  enum drbd_packets tmp___4 ;
  u32 tmp___5 ;
  struct task_struct *tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 825
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            825);
  } else {

  }
#line 827
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 827
  if (tmp != 0) {
#line 828
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "CREATE_BARRIER flag was set in drbd_connect - now cleared!\n");
  } else {

  }
#line 830
  val.i = 0U;
#line 830
  val.ldv_35127.conn = 8U;
#line 830
  mask.i = 0U;
#line 830
  mask.ldv_35127.conn = 31U;
#line 830
  tmp___0 = drbd_request_state(mdev, mask, val);
#line 830
  if (tmp___0 <= 0) {
#line 831
    return (-2);
  } else {

  }
#line 833
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 835
  sock = 0;
#line 836
  msock = 0;
  ldv_44993: 
#line 839
  try = 0;
  ldv_44985: 
#line 841
  s = drbd_try_connect(mdev);
#line 842
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 843
    goto ldv_44984;
  } else {
#line 842
    try = try + 1;
#line 842
    if (try > 2) {
#line 843
      goto ldv_44984;
    } else {

    }
  }
#line 845
  tmp___1 = get_current();
#line 845
  tmp___1->state = 1L;
#line 846
  schedule_timeout(25L);
#line 847
  goto ldv_44985;
  ldv_44984: ;
#line 849
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 850
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 851
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 852
      sock = s;
#line 853
      s = 0;
    } else
#line 854
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 855
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 856
      msock = s;
#line 857
      s = 0;
    } else {
#line 859
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 860
      goto out_release_sockets;
    }
  } else {

  }
#line 864
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 865
    tmp___2 = get_current();
#line 865
    tmp___2->state = 1L;
#line 866
    schedule_timeout(25L);
#line 867
    ok = drbd_socket_okay(mdev, & sock);
#line 868
    tmp___3 = drbd_socket_okay(mdev, & msock);
#line 868
    ok = tmp___3 != 0 && ok != 0;
#line 869
    if (ok != 0) {
#line 870
      goto ldv_44987;
    } else {

    }
  } else {

  }
  retry: 
#line 874
  s = drbd_wait_for_connect(mdev);
#line 875
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 876
    tmp___4 = drbd_recv_fp(mdev, s);
#line 876
    try = (int )tmp___4;
#line 877
    drbd_socket_okay(mdev, & sock);
#line 878
    drbd_socket_okay(mdev, & msock);
#line 879
    switch (try) {
    case 65522: ;
#line 881
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 882
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 883
      sock_release(sock);
    } else {

    }
#line 885
    sock = s;
#line 886
    goto ldv_44990;
    case 65521: ;
#line 888
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 889
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 890
      sock_release(msock);
    } else {

    }
#line 892
    msock = s;
#line 893
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 894
    goto ldv_44990;
    default: 
#line 896
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 897
    sock_release(s);
#line 898
    tmp___5 = random32();
#line 898
    if ((int )tmp___5 & 1) {
#line 899
      goto retry;
    } else {

    }
    }
    ldv_44990: ;
  } else {

  }
#line 903
  if ((int )mdev->state.ldv_35127.conn <= 1) {
#line 904
    goto out_release_sockets;
  } else {

  }
#line 905
  tmp___8 = get_current();
#line 905
  tmp___9 = signal_pending(tmp___8);
#line 905
  if (tmp___9 != 0) {
#line 906
    tmp___6 = get_current();
#line 906
    flush_signals(tmp___6);
#line 907
    __asm__  volatile   ("": : : "memory");
#line 908
    tmp___7 = get_t_state(& mdev->receiver);
#line 908
    if ((unsigned int )tmp___7 == 2U) {
#line 909
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 912
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 913
    ok = drbd_socket_okay(mdev, & sock);
#line 914
    tmp___10 = drbd_socket_okay(mdev, & msock);
#line 914
    ok = tmp___10 != 0 && ok != 0;
#line 915
    if (ok != 0) {
#line 916
      goto ldv_44987;
    } else {

    }
  } else {

  }
#line 918
  goto ldv_44993;
  ldv_44987: 
#line 920
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 921
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 923
  (sock->sk)->sk_allocation = 16U;
#line 924
  (msock->sk)->sk_allocation = 16U;
#line 926
  (sock->sk)->sk_priority = 4U;
#line 927
  (msock->sk)->sk_priority = 6U;
#line 934
  tmp___11 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 934
  (sock->sk)->sk_rcvtimeo = tmp___11;
#line 934
  (sock->sk)->sk_sndtimeo = tmp___11;
#line 937
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 938
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 942
  drbd_tcp_nodelay(sock);
#line 943
  drbd_tcp_nodelay(msock);
#line 945
  mdev->data.socket = sock;
#line 946
  mdev->meta.socket = msock;
#line 947
  mdev->last_received = jiffies;
#line 949
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            949);
  } else {

  }
#line 951
  h = drbd_do_handshake(mdev);
#line 952
  if (h <= 0) {
#line 953
    return (h);
  } else {

  }
#line 955
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 957
    tmp___12 = drbd_do_auth(mdev);
#line 957
    switch (tmp___12) {
    case -1: 
#line 959
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 960
    return (-1);
    case 0: 
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 963
    return (0);
    }
  } else {

  }
#line 967
  val___0.i = 0U;
#line 967
  val___0.ldv_35127.conn = 9U;
#line 967
  mask___0.i = 0U;
#line 967
  mask___0.ldv_35127.conn = 31U;
#line 967
  tmp___13 = drbd_request_state(mdev, mask___0, val___0);
#line 967
  if (tmp___13 <= 0) {
#line 968
    return (0);
  } else {

  }
#line 970
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 971
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 973
  atomic_set(& mdev->packet_seq, 0);
#line 974
  mdev->peer_seq = 0U;
#line 976
  drbd_thread_start(& mdev->asender);
#line 978
  tmp___14 = drbd_send_protocol(mdev);
#line 978
  if (tmp___14 == 0) {
#line 979
    return (-1);
  } else {

  }
#line 980
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 981
  drbd_send_sizes(mdev, 0, 0);
#line 982
  drbd_send_uuids(mdev);
#line 983
  drbd_send_state(mdev);
#line 984
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 985
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 987
  return (1);
  out_release_sockets: ;
#line 990
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 991
    sock_release(sock);
  } else {

  }
#line 992
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 993
    sock_release(msock);
  } else {

  }
#line 994
  return (-1);
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  long tmp___3 ;

  {
#line 1001
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 1003
  tmp = __builtin_expect(r != 8, 0L);
#line 1003
  if (tmp != 0L) {
#line 1004
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 1005
    return (0);
  } else {

  }
#line 1007
  tmp___0 = __fswab16((int )h->command);
#line 1007
  h->command = tmp___0;
#line 1008
  tmp___1 = __fswab16((int )h->length);
#line 1008
  h->length = tmp___1;
#line 1009
  tmp___3 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 1009
  if (tmp___3 != 0L) {
#line 1010
    tmp___2 = __fswab32(h->magic);
#line 1010
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%lx c: %d l: %d\n",
            (long )tmp___2, (int )h->command, (int )h->length);
#line 1013
    return (0);
  } else {

  }
#line 1015
  mdev->last_received = jiffies;
#line 1017
  return (1);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  int tmp ;
  enum finish_epoch tmp___0 ;

  {
#line 1024
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1024
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1024
    if (tmp != 0) {
#line 1025
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 1027
      if (rv != 0) {
#line 1028
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1032
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1034
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1037
  tmp___0 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1037
  return (tmp___0);
}
}
#line 1040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1042
  fw = (struct flush_work *)w;
#line 1043
  epoch = fw->epoch;
#line 1045
  kfree((void const   *)w);
#line 1047
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1047
  if (tmp == 0) {
#line 1048
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1050
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_35127.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1053
  return (1);
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___8 ;

  {
#line 1068
  schedule_flush = 0;
#line 1069
  rv = FE_STILL_LIVE;
#line 1071
  spin_lock(& mdev->epoch_lock);
  ldv_45039: 
#line 1073
  next_epoch = 0;
#line 1074
  finish = 0;
#line 1076
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1078
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1080
  atomic_dec(& epoch->active);
#line 1081
  goto ldv_45028;
  case 1U: 
#line 1083
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1087
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1087
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1090
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1091
  goto ldv_45028;
  case 2U: 
#line 1093
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1094
  goto ldv_45028;
  case 3U: ;
#line 1097
  goto ldv_45028;
  }
  ldv_45028: ;
#line 1100
  if (epoch_size != 0) {
#line 1100
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1100
    if (tmp___3 == 0) {
#line 1100
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1100
      if (tmp___4 != 0) {
#line 1100
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1100
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1100
          if (tmp___5 == 0) {
#line 1106
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1106
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1110
              finish = 1;
#line 1111
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1106
            if (epoch_size == 1) {
#line 1106
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1106
              if (tmp___2 != 0) {
#line 1110
                finish = 1;
#line 1111
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1106
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1106
            if (((unsigned int )ev & 32U) != 0U) {
#line 1110
              finish = 1;
#line 1111
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1112
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1112
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1114
                atomic_inc(& epoch->active);
#line 1115
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1118
  if (finish != 0) {
#line 1119
    if (((unsigned int )ev & 32U) == 0U) {
#line 1120
      spin_unlock(& mdev->epoch_lock);
#line 1121
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1122
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1124
    atomic_dec(& mdev->unacked_cnt);
#line 1124
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1124
    if (tmp___7 < 0) {
#line 1124
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1124
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "drbd_may_finish_epoch", 1124, tmp___6);
    } else {

    }
#line 1126
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1127
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1127
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1128
      list_del(& epoch->list);
#line 1129
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1130
      mdev->epochs = mdev->epochs - 1U;
#line 1131
      kfree((void const   *)epoch);
#line 1133
      if ((unsigned int )rv == 0U) {
#line 1134
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1136
      epoch->flags = 0UL;
#line 1137
      atomic_set(& epoch->epoch_size, 0);
#line 1139
      if ((unsigned int )rv == 0U) {
#line 1140
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1144
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1145
    goto ldv_45038;
  } else {

  }
#line 1147
  epoch = next_epoch;
#line 1148
  goto ldv_45039;
  ldv_45038: 
#line 1150
  spin_unlock(& mdev->epoch_lock);
#line 1152
  if (schedule_flush != 0) {
#line 1154
    tmp___8 = kmalloc___1(32UL, 32U);
#line 1154
    fw = (struct flush_work *)tmp___8;
#line 1155
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1156
      fw->w.cb = & w_flush;
#line 1157
      fw->epoch = epoch;
#line 1158
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1160
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc a flush_work obj\n");
#line 1161
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1163
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1164
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1168
  return (rv);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1179
  write_ordering_str[0] = (char *)"none";
#line 1179
  write_ordering_str[1] = (char *)"drain";
#line 1179
  write_ordering_str[2] = (char *)"flush";
#line 1179
  write_ordering_str[3] = (char *)"barrier";
#line 1186
  pwo = mdev->write_ordering;
#line 1187
  _min1 = pwo;
#line 1187
  _min2 = wo;
#line 1187
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1188
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1189
    wo = WO_bdev_flush;
  } else {

  }
#line 1190
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1191
    wo = WO_drain_io;
  } else {

  }
#line 1192
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1193
    wo = WO_none;
  } else {

  }
#line 1194
  mdev->write_ordering = wo;
#line 1195
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1196
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1197
  return;
}
}
#line 1206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1209
  bios = 0;
#line 1211
  page = e->pages;
#line 1212
  sector = e->sector;
#line 1213
  ds = e->size;
#line 1214
  n_bios = 0U;
#line 1215
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1222
  bio = bio_alloc(16U, (int )nr_pages);
#line 1223
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1225
    goto fail;
  } else {

  }
#line 1228
  bio->bi_sector = sector;
#line 1229
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1232
  bio->bi_rw = (unsigned long )rw;
#line 1233
  bio->bi_private = (void *)e;
#line 1234
  bio->bi_end_io = & drbd_endio_sec;
#line 1236
  bio->bi_next = bios;
#line 1237
  bios = bio;
#line 1238
  n_bios = n_bios + 1U;
#line 1240
  goto ldv_45072;
  ldv_45071: 
#line 1241
  __min1 = ds;
#line 1241
  __min2 = 4096U;
#line 1241
  len = __min1 < __min2 ? __min1 : __min2;
#line 1242
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1242
  if (tmp___0 == 0) {
#line 1244
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1244
    if (tmp != 0L) {
#line 1244
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1244), "i" (12UL));
      ldv_45070: ;
#line 1244
      goto ldv_45070;
    } else {

    }
#line 1245
    goto next_bio;
  } else {

  }
#line 1247
  ds = ds - len;
#line 1248
  sector = (sector_t )(len >> 9) + sector;
#line 1249
  nr_pages = nr_pages - 1U;
#line 1240
  page = page_chain_next(page);
  ldv_45072: ;
#line 1240
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1240
    tmp___1 = page_chain_next(page);
#line 1240
    __builtin_prefetch((void const   *)tmp___1);
#line 1240
    if (1 != 0) {
#line 1241
      goto ldv_45071;
    } else {
#line 1243
      goto ldv_45073;
    }
  } else {

  }
  ldv_45073: ;
#line 1251
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1251
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1251);
  } else {

  }
#line 1252
  if (ds != 0U) {
#line 1252
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1252);
  } else {

  }
#line 1254
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_45074: 
#line 1256
  bio = bios;
#line 1257
  bios = bios->bi_next;
#line 1258
  bio->bi_next = 0;
#line 1261
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1262
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1264
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1268
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1269
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffefUL;
  } else {

  }
#line 1270
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1271
    goto ldv_45074;
  } else {

  }
#line 1271
  maybe_kick_lo(mdev);
#line 1272
  return (0);
  fail: ;
#line 1275
  goto ldv_45077;
  ldv_45076: 
#line 1276
  bio = bios;
#line 1277
  bios = bios->bi_next;
#line 1278
  bio_put(bio);
  ldv_45077: ;
#line 1275
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1276
    goto ldv_45076;
  } else {

  }

#line 1280
  return (-12);
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_epoch *tmp ;
  int tmp___0 ;

  {
#line 1291
  e = (struct drbd_epoch_entry *)w;
#line 1302
  tmp = previous_epoch(mdev, e->epoch);
#line 1302
  if ((unsigned long )tmp != (unsigned long )((struct drbd_epoch *)0)) {
#line 1303
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Write ordering was not enforced (one time event)\n");
  } else {

  }
#line 1308
  e->w.cb = & e_end_block;
#line 1309
  tmp___0 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1309
  if (tmp___0 != 0) {
#line 1313
    e->w.cb = & w_e_reissue;
#line 1314
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1316
  return (1);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  int _b___0 ;
  enum finish_epoch tmp ;
  enum finish_epoch tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  enum finish_epoch tmp___3 ;
  int tmp___4 ;

  {
#line 1322
  p = (struct p_barrier *)h;
#line 1325
  _b = (unsigned int )h->length != 8U;
#line 1325
  if (_b != 0) {
#line 1325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1325);
  } else {

  }
#line 1325
  if (_b != 0) {
#line 1325
    return (0);
  } else {

  }
#line 1327
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1328
  _b___0 = (int )h->length != rv;
#line 1328
  if (_b___0 != 0) {
#line 1328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"rv != h->length", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1328);
  } else {

  }
#line 1328
  if (_b___0 != 0) {
#line 1328
    return (0);
  } else {

  }
#line 1330
  inc_unacked(mdev);
#line 1332
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1333
    drbd_kick_lo(mdev);
  } else {

  }
#line 1335
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1336
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1336
  rv = (int )tmp;
#line 1343
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1346
  if (rv == 2) {
#line 1347
    return (1);
  } else {

  }
#line 1348
  goto ldv_45100;
  case 2U: ;
  case 1U: ;
#line 1352
  if (rv == 0) {
#line 1353
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1354
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1355
    tmp___0 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1355
    rv = (int )tmp___0;
  } else {

  }
#line 1357
  if (rv == 2) {
#line 1358
    return (1);
  } else {

  }
#line 1363
  goto ldv_45100;
  }
  ldv_45100: 
#line 1368
  tmp___1 = kmalloc___1(40UL, 16U);
#line 1368
  epoch = (struct drbd_epoch *)tmp___1;
#line 1369
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1370
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
#line 1371
    tmp___2 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1371
    issue_flush = tmp___2 == 0;
#line 1372
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1373
    if (issue_flush != 0) {
#line 1374
      tmp___3 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1374
      rv = (int )tmp___3;
#line 1375
      if (rv == 2) {
#line 1376
        return (1);
      } else {

      }
    } else {

    }
#line 1379
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1381
    return (1);
  } else {

  }
#line 1384
  epoch->flags = 0UL;
#line 1385
  atomic_set(& epoch->epoch_size, 0);
#line 1386
  atomic_set(& epoch->active, 0);
#line 1388
  spin_lock(& mdev->epoch_lock);
#line 1389
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1389
  if (tmp___4 != 0) {
#line 1390
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1391
    mdev->current_epoch = epoch;
#line 1392
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1395
    kfree((void const   *)epoch);
  }
#line 1397
  spin_unlock(& mdev->epoch_lock);
#line 1399
  return (1);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1407
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1407
  capacity = tmp;
#line 1411
  dig_in = mdev->int_dig_in;
#line 1412
  dig_vv = mdev->int_dig_vv;
#line 1415
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1415
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1415
    dgs = (int )tmp___0;
  } else {
#line 1415
    dgs = 0;
  }
#line 1418
  if (dgs != 0) {
#line 1419
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1420
    if (rr != dgs) {
#line 1421
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1423
      return (0);
    } else {

    }
  } else {

  }
#line 1427
  data_size = data_size - dgs;
#line 1429
  _b = (data_size & 511) != 0;
#line 1429
  if (_b != 0) {
#line 1429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1429);
  } else {

  }
#line 1429
  if (_b != 0) {
#line 1429
    return (0);
  } else {

  }
#line 1430
  _b___0 = (unsigned int )data_size > 32768U;
#line 1430
  if (_b___0 != 0) {
#line 1430
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1430);
  } else {

  }
#line 1430
  if (_b___0 != 0) {
#line 1430
    return (0);
  } else {

  }
#line 1434
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1435
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1438
    return (0);
  } else {

  }
#line 1444
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1445
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1446
    return (0);
  } else {

  }
#line 1448
  ds = data_size;
#line 1449
  page = e->pages;
#line 1450
  goto ldv_45129;
  ldv_45128: 
#line 1451
  __min1 = ds;
#line 1451
  __min2 = 4096;
#line 1451
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1452
  tmp___1 = kmap(page);
#line 1452
  data = (unsigned long *)tmp___1;
#line 1453
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1454
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1454
  if (tmp___2 != 0) {
#line 1455
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1456
    *data = ~ *data;
  } else {

  }
#line 1458
  kunmap(page);
#line 1459
  if ((unsigned int )rr != len) {
#line 1460
    drbd_free_ee(mdev, e);
#line 1461
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1463
    return (0);
  } else {

  }
#line 1465
  ds = ds - rr;
#line 1450
  page = page_chain_next(page);
  ldv_45129: ;
#line 1450
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1450
    tmp___3 = page_chain_next(page);
#line 1450
    __builtin_prefetch((void const   *)tmp___3);
#line 1450
    if (1 != 0) {
#line 1451
      goto ldv_45128;
    } else {
#line 1453
      goto ldv_45130;
    }
  } else {

  }
  ldv_45130: ;
#line 1468
  if (dgs != 0) {
#line 1469
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1470
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1470
    if (tmp___4 != 0) {
#line 1471
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1472
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1474
      drbd_free_ee(mdev, e);
#line 1475
      return (0);
    } else {

    }
  } else {

  }
#line 1478
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1479
  return (e);
}
}
#line 1485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1488
  rv = 1;
#line 1491
  if (data_size == 0) {
#line 1492
    return (1);
  } else {

  }
#line 1494
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1496
  data = kmap(page);
#line 1497
  goto ldv_45150;
  ldv_45149: 
#line 1498
  __min1 = data_size;
#line 1498
  __min2 = 4096;
#line 1498
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1499
  __min1___1 = data_size;
#line 1499
  __min2___1 = 4096;
#line 1499
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1500
    rv = 0;
#line 1502
    __min1___0 = data_size;
#line 1502
    __min2___0 = 4096;
#line 1502
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1503
    goto ldv_45148;
  } else {

  }
#line 1505
  data_size = data_size - rr;
  ldv_45150: ;
#line 1497
  if (data_size != 0) {
#line 1498
    goto ldv_45149;
  } else {

  }
  ldv_45148: 
#line 1507
  kunmap(page);
#line 1508
  drbd_pp_free(mdev, page);
#line 1509
  return (rv);
}
}
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1518
  dig_in = mdev->int_dig_in;
#line 1519
  dig_vv = mdev->int_dig_vv;
#line 1521
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1521
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1521
    dgs = (int )tmp;
  } else {
#line 1521
    dgs = 0;
  }
#line 1524
  if (dgs != 0) {
#line 1525
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1526
    if (rr != dgs) {
#line 1527
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1529
      return (0);
    } else {

    }
  } else {

  }
#line 1533
  data_size = data_size - dgs;
#line 1537
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1539
  bio = req->master_bio;
#line 1540
  if (bio->bi_sector != sector) {
#line 1540
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1540);
  } else {

  }
#line 1542
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1542
  i = (int )bio->bi_idx;
#line 1542
  goto ldv_45169;
  ldv_45168: 
#line 1543
  __min1 = data_size;
#line 1543
  __min2 = (int )bvec->bv_len;
#line 1543
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1544
  tmp___0 = kmap(bvec->bv_page);
#line 1544
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1547
  kunmap(bvec->bv_page);
#line 1548
  if (rr != expect) {
#line 1549
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1552
    return (0);
  } else {

  }
#line 1554
  data_size = data_size - rr;
#line 1542
  bvec = bvec + 1;
#line 1542
  i = i + 1;
  ldv_45169: ;
#line 1542
  if ((int )bio->bi_vcnt > i) {
#line 1543
    goto ldv_45168;
  } else {

  }

#line 1557
  if (dgs != 0) {
#line 1558
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1559
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1559
    if (tmp___1 != 0) {
#line 1560
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1561
      return (0);
    } else {

    }
  } else {

  }
#line 1565
  if (data_size != 0) {
#line 1565
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1565);
  } else {

  }
#line 1566
  return (1);
}
}
#line 1571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1573
  e = (struct drbd_epoch_entry *)w;
#line 1574
  sector = e->sector;
#line 1577
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1577
  if (tmp == 0) {
#line 1577
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1577);
  } else {

  }
#line 1579
  tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1579
  if (tmp___0 != 0L) {
#line 1580
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1580U);
#line 1581
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1584
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1586
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1588
  atomic_dec(& mdev->unacked_cnt);
#line 1588
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1588
  if (tmp___2 < 0) {
#line 1588
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1588
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1588, tmp___1);
  } else {

  }
#line 1590
  return (ok);
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1597
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1598
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1599
    goto fail;
  } else {

  }
#line 1601
  atomic_dec(& mdev->rs_pending_cnt);
#line 1601
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1601
  if (tmp___0 < 0) {
#line 1601
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1601
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1601, tmp);
  } else {

  }
#line 1603
  inc_unacked(mdev);
#line 1607
  e->w.cb = & e_end_resync_block;
#line 1609
  spin_lock_irq(& mdev->req_lock);
#line 1610
  list_add(& e->w.list, & mdev->sync_ee);
#line 1611
  spin_unlock_irq(& mdev->req_lock);
#line 1613
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1613
  if (tmp___1 == 0) {
#line 1614
    return (1);
  } else {

  }
#line 1616
  drbd_free_ee(mdev, e);
  fail: 
#line 1618
  put_ldev(mdev);
#line 1619
  return (0);
}
}
#line 1622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;

  {
#line 1628
  p = (struct p_data *)h;
#line 1630
  header_size = 24U;
#line 1631
  data_size = (unsigned int )h->length - header_size;
#line 1633
  _b = data_size == 0U;
#line 1633
  if (_b != 0) {
#line 1633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_DataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1633);
  } else {

  }
#line 1633
  if (_b != 0) {
#line 1633
    return (0);
  } else {

  }
#line 1635
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1635
  if ((unsigned int )tmp != header_size) {
#line 1636
    return (0);
  } else {

  }
#line 1638
  tmp___0 = __fswab64(p->sector);
#line 1638
  sector = (sector_t )tmp___0;
#line 1640
  spin_lock_irq(& mdev->req_lock);
#line 1641
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1642
  spin_unlock_irq(& mdev->req_lock);
#line 1643
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1643
  if (tmp___1 != 0L) {
#line 1644
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1645
    return (0);
  } else {

  }
#line 1651
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1653
  if (ok != 0) {
#line 1654
    req_mod(req, data_received);
  } else {

  }
#line 1659
  return (ok);
}
}
#line 1662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1667
  p = (struct p_data *)h;
#line 1669
  header_size = 24U;
#line 1670
  data_size = (unsigned int )h->length - header_size;
#line 1672
  _b = data_size == 0U;
#line 1672
  if (_b != 0) {
#line 1672
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_RSDataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1672);
  } else {

  }
#line 1672
  if (_b != 0) {
#line 1672
    return (0);
  } else {

  }
#line 1674
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1674
  if ((unsigned int )tmp != header_size) {
#line 1675
    return (0);
  } else {

  }
#line 1677
  tmp___0 = __fswab64(p->sector);
#line 1677
  sector = (sector_t )tmp___0;
#line 1678
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1678
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1678);
  } else {

  }
#line 1680
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1680
  if (tmp___2 != 0) {
#line 1684
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1686
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1686
    if (tmp___1 != 0) {
#line 1687
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1689
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1691
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1694
  return (ok);
}
}
#line 1700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1702
  e = (struct drbd_epoch_entry *)w;
#line 1703
  sector = e->sector;
#line 1705
  ok = 1;
#line 1707
  if ((e->flags & 4UL) != 0UL) {
#line 1708
    epoch = previous_epoch(mdev, e->epoch);
#line 1709
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1710
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1713
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1714
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1714
    if (tmp___0 != 0L) {
#line 1715
      pcmd = ((int )mdev->state.ldv_35127.conn > 15 && (int )mdev->state.ldv_35127.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1719
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1719
      ok = tmp & ok;
#line 1720
      if (pcmd == 23) {
#line 1721
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1721U);
      } else {

      }
    } else {
#line 1723
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1727
    atomic_dec(& mdev->unacked_cnt);
#line 1727
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1727
    if (tmp___2 < 0) {
#line 1727
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1727
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1727, tmp___1);
    } else {

    }
  } else {

  }
#line 1731
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1732
    spin_lock_irq(& mdev->req_lock);
#line 1733
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1733
    if (tmp___3 != 0) {
#line 1733
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1733);
    } else {

    }
#line 1734
    hlist_del_init(& e->colision);
#line 1735
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1737
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1737
    if (tmp___4 == 0) {
#line 1737
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1737);
    } else {

    }
  }
#line 1740
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1742
  return (ok);
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1747
  e = (struct drbd_epoch_entry *)w;
#line 1748
  ok = 1;
#line 1750
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1750
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1750);
  } else {

  }
#line 1751
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1753
  spin_lock_irq(& mdev->req_lock);
#line 1754
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1754
  if (tmp != 0) {
#line 1754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1754);
  } else {

  }
#line 1755
  hlist_del_init(& e->colision);
#line 1756
  spin_unlock_irq(& mdev->req_lock);
#line 1758
  atomic_dec(& mdev->unacked_cnt);
#line 1758
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1758
  if (tmp___1 < 0) {
#line 1758
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1758, tmp___0);
  } else {

  }
#line 1760
  return (ok);
}
}
#line 1784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1786
  tmp = get_current();
#line 1786
  wait.flags = 0U;
#line 1786
  wait.private = (void *)tmp;
#line 1786
  wait.func = & autoremove_wake_function;
#line 1786
  wait.task_list.next = & wait.task_list;
#line 1786
  wait.task_list.prev = & wait.task_list;
#line 1789
  ret = 0;
#line 1790
  spin_lock(& mdev->peer_seq_lock);
  ldv_45253: 
#line 1792
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1793
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1793
  if (tmp___0 <= 0) {
#line 1794
    goto ldv_45252;
  } else {

  }
#line 1795
  tmp___1 = get_current();
#line 1795
  tmp___2 = signal_pending(tmp___1);
#line 1795
  if (tmp___2 != 0) {
#line 1796
    ret = -512;
#line 1797
    goto ldv_45252;
  } else {

  }
#line 1799
  p_seq = mdev->peer_seq;
#line 1800
  spin_unlock(& mdev->peer_seq_lock);
#line 1801
  timeout = schedule_timeout(7500L);
#line 1802
  spin_lock(& mdev->peer_seq_lock);
#line 1803
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1804
    ret = -110;
#line 1805
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1806
    goto ldv_45252;
  } else {

  }
#line 1808
  goto ldv_45253;
  ldv_45252: 
#line 1809
  finish_wait(& mdev->seq_wait, & wait);
#line 1810
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1811
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1812
  spin_unlock(& mdev->peer_seq_lock);
#line 1813
  return (ret);
}
}
#line 1817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u32 tmp___8 ;
  int size ;
  int discard ;
  int tmp___9 ;
  wait_queue_t wait ;
  struct task_struct *tmp___10 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___11 ;
  long tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  struct hlist_head *tmp___15 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  struct hlist_node  const  *__mptr___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 1821
  p = (struct p_data *)h;
#line 1823
  rw = 1;
#line 1826
  header_size = 24;
#line 1827
  data_size = (int )h->length - header_size;
#line 1829
  _b = data_size == 0;
#line 1829
  if (_b != 0) {
#line 1829
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Data", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1829);
  } else {

  }
#line 1829
  if (_b != 0) {
#line 1829
    return (0);
  } else {

  }
#line 1831
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1831
  if (tmp != header_size) {
#line 1832
    return (0);
  } else {

  }
#line 1834
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1834
  if (tmp___3 == 0) {
#line 1835
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1835
    if (tmp___0 != 0) {
#line 1836
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1838
    spin_lock(& mdev->peer_seq_lock);
#line 1839
    tmp___1 = __fswab32(p->seq_num);
#line 1839
    if (mdev->peer_seq + 1U == tmp___1) {
#line 1840
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1841
    spin_unlock(& mdev->peer_seq_lock);
#line 1843
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1844
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1845
    tmp___2 = drbd_drain_block(mdev, data_size);
#line 1845
    return (tmp___2);
  } else {

  }
#line 1853
  tmp___4 = __fswab64(p->sector);
#line 1853
  sector = (sector_t )tmp___4;
#line 1854
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1855
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1856
    put_ldev(mdev);
#line 1857
    return (0);
  } else {

  }
#line 1860
  e->w.cb = & e_end_block;
#line 1862
  spin_lock(& mdev->epoch_lock);
#line 1863
  e->epoch = mdev->current_epoch;
#line 1864
  atomic_inc(& (e->epoch)->epoch_size);
#line 1865
  atomic_inc(& (e->epoch)->active);
#line 1867
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1867
    tmp___7 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1867
    if (tmp___7 == 1) {
#line 1872
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1872
      epoch = (struct drbd_epoch *)__mptr;
#line 1873
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1874
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1875
        rw = rw | 16;
#line 1876
        e->flags = e->flags | 4UL;
      } else {
#line 1878
        tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1878
        if (tmp___5 > 1) {
#line 1880
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1881
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1882
          rw = rw | 16;
#line 1883
          e->flags = e->flags | 4UL;
        } else {
#line 1878
          tmp___6 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1878
          if (tmp___6 == 0) {
#line 1880
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1881
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1882
            rw = rw | 16;
#line 1883
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1887
  spin_unlock(& mdev->epoch_lock);
#line 1889
  tmp___8 = __fswab32(p->dp_flags);
#line 1889
  dp_flags = tmp___8;
#line 1890
  if ((int )dp_flags & 1) {
#line 1891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have submitted barrier request\n");
  } else {

  }
#line 1894
  if ((dp_flags & 2U) != 0U) {
#line 1895
    rw = rw | 544;
  } else {

  }
#line 1896
  if ((dp_flags & 4U) != 0U) {
#line 1897
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1900
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1901
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1905
    size = (int const   )e->size;
#line 1906
    tmp___9 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1906
    discard = tmp___9;
#line 1907
    tmp___10 = get_current();
#line 1907
    wait.flags = 0U;
#line 1907
    wait.private = (void *)tmp___10;
#line 1907
    wait.func = & autoremove_wake_function;
#line 1907
    wait.task_list.next = & wait.task_list;
#line 1907
    wait.task_list.prev = & wait.task_list;
#line 1913
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1913
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1913);
    } else {

    }
#line 1914
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1914
    if (tmp___11 != 0L) {
#line 1914
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1914), "i" (12UL));
      ldv_45278: ;
#line 1914
      goto ldv_45278;
    } else {

    }
#line 1915
    tmp___12 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1915
    if (tmp___12 != 0L) {
#line 1915
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1915), "i" (12UL));
      ldv_45279: ;
#line 1915
      goto ldv_45279;
    } else {

    }
#line 1951
    tmp___13 = __fswab32(p->seq_num);
#line 1951
    tmp___14 = drbd_wait_peer_seq(mdev, tmp___13);
#line 1951
    if (tmp___14 != 0) {
#line 1952
      goto out_interrupted;
    } else {

    }
#line 1954
    spin_lock_irq(& mdev->req_lock);
#line 1956
    tmp___15 = ee_hash_slot(mdev, sector);
#line 1956
    hlist_add_head(& e->colision, tmp___15);
#line 1959
    slot = tl_hash_slot(mdev, sector);
#line 1960
    first = 1;
    ldv_45291: 
#line 1962
    have_unacked = 0;
#line 1963
    have_conflict = 0;
#line 1964
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1966
    n = slot->first;
#line 1966
    goto ldv_45288;
    ldv_45287: 
#line 1967
    tmp___18 = overlaps(i->sector, (int )i->size, sector, size);
#line 1967
    if (tmp___18 != 0) {
#line 1970
      if (first != 0) {
#line 1971
        tmp___16 = get_current();
#line 1971
        tmp___17 = get_current();
#line 1971
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___17->comm), tmp___16->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1976
      if ((i->rq_state & 8UL) != 0UL) {
#line 1977
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1978
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1966
    n = n->next;
    ldv_45288: ;
#line 1966
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1966
      __builtin_prefetch((void const   *)n->next);
#line 1966
      if (1 != 0) {
#line 1966
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1966
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1966
        if (1 != 0) {
#line 1967
          goto ldv_45287;
        } else {
#line 1969
          goto ldv_45289;
        }
      } else {
#line 1969
        goto ldv_45289;
      }
    } else {

    }
    ldv_45289: ;
#line 1982
    if (have_conflict == 0) {
#line 1983
      goto ldv_45290;
    } else {

    }
#line 1986
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1987
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1989
      inc_unacked(mdev);
#line 1990
      e->w.cb = & e_send_discard_ack;
#line 1991
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1993
      spin_unlock_irq(& mdev->req_lock);
#line 1998
      put_ldev(mdev);
#line 1999
      wake_asender(mdev);
#line 2000
      finish_wait(& mdev->misc_wait, & wait);
#line 2001
      return (1);
    } else {

    }
#line 2004
    tmp___19 = get_current();
#line 2004
    tmp___20 = signal_pending(tmp___19);
#line 2004
    if (tmp___20 != 0) {
#line 2005
      hlist_del_init(& e->colision);
#line 2007
      spin_unlock_irq(& mdev->req_lock);
#line 2009
      finish_wait(& mdev->misc_wait, & wait);
#line 2010
      goto out_interrupted;
    } else {

    }
#line 2013
    spin_unlock_irq(& mdev->req_lock);
#line 2014
    if (first != 0) {
#line 2015
      first = 0;
#line 2016
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 2018
    if (discard != 0) {
#line 2021
      if (have_unacked != 0) {
#line 2021
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2021);
      } else {

      }
    } else {

    }
#line 2023
    schedule();
#line 2024
    spin_lock_irq(& mdev->req_lock);
#line 2025
    goto ldv_45291;
    ldv_45290: 
#line 2026
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 2029
  list_add(& e->w.list, & mdev->active_ee);
#line 2030
  spin_unlock_irq(& mdev->req_lock);
#line 2032
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 2034
  inc_unacked(mdev);
#line 2037
  goto ldv_45293;
  case 2: 
#line 2041
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2042
  goto ldv_45293;
  case 1: ;
#line 2045
  goto ldv_45293;
  }
  ldv_45293: ;
#line 2048
  if (*((unsigned int *)mdev + 455UL) == 0U) {
#line 2050
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2050U);
#line 2051
    e->flags = e->flags | 1UL;
#line 2052
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2055
  tmp___21 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2055
  if (tmp___21 == 0) {
#line 2056
    return (1);
  } else {

  }
  out_interrupted: 
#line 2062
  put_ldev(mdev);
#line 2063
  drbd_free_ee(mdev, e);
#line 2064
  return (0);
}
}
#line 2067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;

  {
#line 2070
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2070
  capacity = tmp;
#line 2072
  di = 0;
#line 2075
  p = (struct p_block_req *)h;
#line 2077
  brps = 24;
#line 2079
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 2079
  if (tmp___0 != brps) {
#line 2080
    return (0);
  } else {

  }
#line 2082
  tmp___1 = __fswab64(p->sector);
#line 2082
  sector = (sector_t )tmp___1;
#line 2083
  tmp___2 = __fswab32(p->blksize);
#line 2083
  size = (int )tmp___2;
#line 2085
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 2086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2086, (unsigned long long )sector, size);
#line 2088
    return (0);
  } else {

  }
#line 2090
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2091, (unsigned long long )sector, size);
#line 2093
    return (0);
  } else {

  }
#line 2096
  tmp___5 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2096
  if (tmp___5 == 0) {
#line 2097
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2097
    if (tmp___3 != 0) {
#line 2098
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
    } else {

    }
#line 2100
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 2102
    tmp___4 = drbd_drain_block(mdev, (int )h->length - brps);
#line 2102
    return (tmp___4);
  } else {

  }
#line 2108
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2109
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2110
    put_ldev(mdev);
#line 2111
    return (0);
  } else {

  }
#line 2114
  switch ((int )h->command) {
  case 8: 
#line 2116
  e->w.cb = & w_e_end_data_req;
#line 2117
  fault_type = 5U;
#line 2118
  goto ldv_45311;
  case 9: 
#line 2120
  e->w.cb = & w_e_end_rsdata_req;
#line 2121
  fault_type = 3U;
#line 2127
  tmp___8 = drbd_rs_begin_io(mdev, sector);
#line 2127
  if (tmp___8 == 0) {
#line 2130
    tmp___6 = get_current();
#line 2130
    tmp___7 = signal_pending(tmp___6);
#line 2130
    if (tmp___7 == 0) {
#line 2130
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2130);
    } else {

    }
#line 2131
    goto out_free_e;
  } else {

  }
#line 2133
  goto ldv_45311;
  case 31: ;
  case 33: 
#line 2137
  fault_type = 3U;
#line 2138
  digest_size = (int )h->length - brps;
#line 2139
  tmp___9 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2139
  di = (struct digest_info *)tmp___9;
#line 2140
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2141
    goto out_free_e;
  } else {

  }
#line 2143
  di->digest_size = digest_size;
#line 2144
  di->digest = (void *)di + 16U;
#line 2146
  tmp___10 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2146
  if (tmp___10 != digest_size) {
#line 2147
    goto out_free_e;
  } else {

  }
#line 2149
  e->block_id = (unsigned long long )di;
#line 2150
  if ((unsigned int )h->command == 33U) {
#line 2151
    if (mdev->agreed_pro_version <= 88) {
#line 2151
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2151);
    } else {

    }
#line 2152
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2153
  if ((unsigned int )h->command == 31U) {
#line 2154
    e->w.cb = & w_e_end_ov_reply;
#line 2155
    atomic_dec(& mdev->rs_pending_cnt);
#line 2155
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2155
    if (tmp___12 < 0) {
#line 2155
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2155
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2155, tmp___11);
    } else {

    }
#line 2156
    goto ldv_45311;
  } else {

  }
#line 2159
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2159
  if (tmp___15 == 0) {
#line 2161
    tmp___13 = get_current();
#line 2161
    tmp___14 = signal_pending(tmp___13);
#line 2161
    if (tmp___14 == 0) {
#line 2161
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2161);
    } else {

    }
#line 2162
    goto out_free_e;
  } else {

  }
#line 2164
  goto ldv_45311;
  case 30: ;
#line 2167
  if ((int )mdev->state.ldv_35127.conn > 9 && (unsigned int )*((unsigned short *)mdev + 910UL) != 304U) {
#line 2169
    tmp___16 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 2169
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: got P_OV_REQUEST while being %s\n",
             tmp___16);
  } else {

  }
#line 2171
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2173
    mdev->ov_start_sector = sector;
#line 2174
    mdev->ov_position = sector;
#line 2175
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2176
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2179
  e->w.cb = & w_e_end_ov_req;
#line 2180
  fault_type = 3U;
#line 2186
  tmp___19 = drbd_rs_begin_io(mdev, sector);
#line 2186
  if (tmp___19 == 0) {
#line 2189
    tmp___17 = get_current();
#line 2189
    tmp___18 = signal_pending(tmp___17);
#line 2189
    if (tmp___18 == 0) {
#line 2189
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2189);
    } else {

    }
#line 2190
    goto out_free_e;
  } else {

  }
#line 2192
  goto ldv_45311;
  default: 
#line 2196
  tmp___20 = cmdname((enum drbd_packets )h->command);
#line 2196
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___20);
#line 2198
  fault_type = 10U;
  }
  ldv_45311: 
#line 2201
  spin_lock_irq(& mdev->req_lock);
#line 2202
  list_add(& e->w.list, & mdev->read_ee);
#line 2203
  spin_unlock_irq(& mdev->req_lock);
#line 2205
  inc_unacked(mdev);
#line 2207
  tmp___21 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2207
  if (tmp___21 == 0) {
#line 2208
    return (1);
  } else {

  }
  out_free_e: 
#line 2211
  kfree((void const   *)di);
#line 2212
  put_ldev(mdev);
#line 2213
  drbd_free_ee(mdev, e);
#line 2214
  return (0);
}
}
#line 2217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2219
  rv = -100;
#line 2222
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2223
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2225
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2226
  ch_self = mdev->comm_bm_set;
#line 2228
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2232
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2233
  goto ldv_45332;
  case 0: ;
#line 2235
  goto ldv_45332;
  case 1: ;
#line 2237
  if (self == 0 && peer == 1) {
#line 2238
    rv = -1;
#line 2239
    goto ldv_45332;
  } else {

  }
#line 2241
  if (self == 1 && peer == 0) {
#line 2242
    rv = 1;
#line 2243
    goto ldv_45332;
  } else {

  }
  case 2: ;
#line 2247
  if (self == 0 && peer == 1) {
#line 2248
    rv = 1;
#line 2249
    goto ldv_45332;
  } else {

  }
#line 2251
  if (self == 1 && peer == 0) {
#line 2252
    rv = -1;
#line 2253
    goto ldv_45332;
  } else {

  }
#line 2256
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2259
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2260
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2260
    rv = tmp != 0 ? -1 : 1;
#line 2262
    goto ldv_45332;
  } else {
#line 2264
    if (ch_peer == 0UL) {
#line 2264
      rv = 1;
#line 2264
      goto ldv_45332;
    } else {

    }
#line 2265
    if (ch_self == 0UL) {
#line 2265
      rv = -1;
#line 2265
      goto ldv_45332;
    } else {

    }
  }
#line 2267
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2268
    goto ldv_45332;
  } else {

  }
  case 4: ;
#line 2270
  if (ch_self < ch_peer) {
#line 2271
    rv = -1;
  } else
#line 2272
  if (ch_self > ch_peer) {
#line 2273
    rv = 1;
  } else {
#line 2276
    tmp___0 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2276
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2278
  goto ldv_45332;
  case 5: 
#line 2280
  rv = -1;
#line 2281
  goto ldv_45332;
  case 6: 
#line 2283
  rv = 1;
  }
  ldv_45332: ;
#line 2286
  return (rv);
}
}
#line 2289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2291
  rv = -100;
#line 2293
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2294
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2296
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2302
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2303
  goto ldv_45352;
  case 0: ;
#line 2305
  goto ldv_45352;
  case 7: 
#line 2307
  hg = drbd_asb_recover_0p(mdev);
#line 2308
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 2309
    rv = hg;
  } else {

  }
#line 2310
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2311
    rv = hg;
  } else {

  }
#line 2312
  goto ldv_45352;
  case 10: 
#line 2314
  rv = drbd_asb_recover_0p(mdev);
#line 2315
  goto ldv_45352;
  case 8: ;
#line 2317
  return ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U ? 1 : -1);
  case 9: 
#line 2319
  hg = drbd_asb_recover_0p(mdev);
#line 2320
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2321
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2325
    val.i = 0U;
#line 2325
    val.ldv_35127.role = 2U;
#line 2325
    mask.i = 0U;
#line 2325
    mask.ldv_35127.role = 3U;
#line 2325
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2326
    if (self != 1) {
#line 2327
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2329
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2330
      rv = hg;
    }
  } else {
#line 2333
    rv = hg;
  }
  }
  ldv_45352: ;
#line 2336
  return (rv);
}
}
#line 2339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2341
  rv = -100;
#line 2343
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2344
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2346
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2354
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2355
  goto ldv_45376;
  case 10: 
#line 2357
  rv = drbd_asb_recover_0p(mdev);
#line 2358
  goto ldv_45376;
  case 0: ;
#line 2360
  goto ldv_45376;
  case 9: 
#line 2362
  hg = drbd_asb_recover_0p(mdev);
#line 2363
  if (hg == -1) {
#line 2367
    val.i = 0U;
#line 2367
    val.ldv_35127.role = 2U;
#line 2367
    mask.i = 0U;
#line 2367
    mask.ldv_35127.role = 3U;
#line 2367
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2368
    if (self != 1) {
#line 2369
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2371
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2372
      rv = hg;
    }
  } else {
#line 2375
    rv = hg;
  }
  }
  ldv_45376: ;
#line 2378
  return (rv);
}
}
#line 2381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2384
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2385
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2386
    return;
  } else {

  }
#line 2388
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2389
  return;
}
}
#line 2408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2413
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2414
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2416
  *rule_nr = 10;
#line 2417
  if (self == 4ULL && peer == 4ULL) {
#line 2418
    return (0);
  } else {

  }
#line 2420
  *rule_nr = 20;
#line 2421
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2423
    return (-2);
  } else {

  }
#line 2425
  *rule_nr = 30;
#line 2426
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2428
    return (2);
  } else {

  }
#line 2430
  if (self == peer) {
#line 2433
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2435
      if (mdev->agreed_pro_version <= 90) {
#line 2436
        return (-1001);
      } else {

      }
#line 2438
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2440
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2441
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2443
        if ((int )mdev->state.ldv_35127.disk > 2) {
#line 2443
          tmp = drbd_bm_total_weight(mdev);
#line 2443
          tmp___0 = (u64 )tmp;
        } else {
#line 2443
          tmp___0 = 0ULL;
        }
#line 2443
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2445
        *rule_nr = 34;
      } else {
#line 2447
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2448
        *rule_nr = 36;
      }
#line 2451
      return (1);
    } else {

    }
#line 2454
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2456
      if (mdev->agreed_pro_version <= 90) {
#line 2457
        return (-1001);
      } else {

      }
#line 2459
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2461
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2463
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2464
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2465
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2467
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2468
        *rule_nr = 35;
      } else {
#line 2470
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2471
        *rule_nr = 37;
      }
#line 2474
      return (-1);
    } else {

    }
#line 2478
    tmp___1 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2478
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2482
    *rule_nr = 40;
#line 2484
    switch (rct) {
    case 0: ;
#line 2485
    return (0);
    case 1: ;
#line 2486
    return (1);
    case 2: ;
#line 2487
    return (-1);
    case 3: 
#line 2489
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2490
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2494
  *rule_nr = 50;
#line 2495
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2496
  if (self == peer) {
#line 2497
    return (-1);
  } else {

  }
#line 2499
  *rule_nr = 51;
#line 2500
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2501
  if (self == peer) {
#line 2502
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2503
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2504
    if (self == peer) {
#line 2508
      if (mdev->agreed_pro_version <= 90) {
#line 2509
        return (-1001);
      } else {

      }
#line 2511
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2512
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2513
      return (-1);
    } else {

    }
  } else {

  }
#line 2517
  *rule_nr = 60;
#line 2518
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2519
  i = 2;
#line 2519
  goto ldv_45406;
  ldv_45405: 
#line 2520
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2521
  if (self == peer) {
#line 2522
    return (-2);
  } else {

  }
#line 2519
  i = i + 1;
  ldv_45406: ;
#line 2519
  if (i <= 3) {
#line 2520
    goto ldv_45405;
  } else {

  }
#line 2525
  *rule_nr = 70;
#line 2526
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2527
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2528
  if (self == peer) {
#line 2529
    return (1);
  } else {

  }
#line 2531
  *rule_nr = 71;
#line 2532
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2533
  if (self == peer) {
#line 2534
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2535
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2536
    if (self == peer) {
#line 2540
      if (mdev->agreed_pro_version <= 90) {
#line 2541
        return (-1001);
      } else {

      }
#line 2543
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2544
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2546
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2548
      if ((int )mdev->state.ldv_35127.disk > 2) {
#line 2548
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2548
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2548
        tmp___3 = 0ULL;
      }
#line 2548
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2551
      return (1);
    } else {

    }
  } else {

  }
#line 2556
  *rule_nr = 80;
#line 2557
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2558
  i = 2;
#line 2558
  goto ldv_45409;
  ldv_45408: 
#line 2559
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2560
  if (self == peer) {
#line 2561
    return (2);
  } else {

  }
#line 2558
  i = i + 1;
  ldv_45409: ;
#line 2558
  if (i <= 3) {
#line 2559
    goto ldv_45408;
  } else {

  }
#line 2564
  *rule_nr = 90;
#line 2565
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2566
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2567
  if (self == peer && self != 0ULL) {
#line 2568
    return (100);
  } else {

  }
#line 2570
  *rule_nr = 100;
#line 2571
  i = 2;
#line 2571
  goto ldv_45415;
  ldv_45414: 
#line 2572
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2573
  j = 2;
#line 2573
  goto ldv_45412;
  ldv_45411: 
#line 2574
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2575
  if (self == peer) {
#line 2576
    return (-100);
  } else {

  }
#line 2573
  j = j + 1;
  ldv_45412: ;
#line 2573
  if (j <= 3) {
#line 2574
    goto ldv_45411;
  } else {

  }
#line 2571
  i = i + 1;
  ldv_45415: ;
#line 2571
  if (i <= 3) {
#line 2572
    goto ldv_45414;
  } else {

  }

#line 2580
  return (-1000);
}
}
#line 2586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2590
  rv = C_MASK;
#line 2593
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35127.disk;
#line 2594
  if ((unsigned int )mydisk == 3U) {
#line 2595
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35127.disk;
  } else {

  }
#line 2597
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2598
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2599
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2602
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2604
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2606
  if (hg == -1000) {
#line 2607
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2608
    return (C_MASK);
  } else {

  }
#line 2610
  if (hg == -1001) {
#line 2611
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2612
    return (C_MASK);
  } else {

  }
#line 2615
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2617
    if (hg == -100) {
#line 2617
      tmp = 1;
    } else {
#line 2617
      __x = (long )hg;
#line 2617
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2617
        tmp = 1;
      } else {
#line 2617
        tmp = 0;
      }
    }
#line 2617
    f = tmp;
#line 2618
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2619
    if (f != 0) {
#line 2620
      hg = hg * 2;
    } else {

    }
#line 2621
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2625
  __x___0 = (long )hg;
#line 2625
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2626
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2628
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2629
    pcount = ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2631
    forced = hg == -100;
#line 2633
    switch (pcount) {
    case 0: 
#line 2635
    hg = drbd_asb_recover_0p(mdev);
#line 2636
    goto ldv_45434;
    case 1: 
#line 2638
    hg = drbd_asb_recover_1p(mdev);
#line 2639
    goto ldv_45434;
    case 2: 
#line 2641
    hg = drbd_asb_recover_2p(mdev);
#line 2642
    goto ldv_45434;
    }
    ldv_45434: 
#line 2644
    __x___1 = (long )hg;
#line 2644
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2645
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2648
      if (forced != 0) {
#line 2649
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2651
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2656
  if (hg == -100) {
#line 2657
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2658
      hg = -1;
    } else {

    }
#line 2659
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2660
      hg = 1;
    } else {

    }
#line 2662
    __x___2 = (long )hg;
#line 2662
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2663
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2668
  if (hg == -100) {
#line 2673
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2674
    drbd_khelper(mdev, (char *)"split-brain");
#line 2675
    return (C_MASK);
  } else {

  }
#line 2678
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2679
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2680
    return (C_MASK);
  } else {

  }
#line 2683
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && (int )mdev->state.ldv_35127.disk > 6) {
#line 2685
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2687
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2690
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2691
    return (C_MASK);
    case 10: 
#line 2693
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2698
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2698
    goto _L;
  } else {
#line 2698
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2698
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2699
      if (hg == 0) {
#line 2700
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2702
        __x___3 = (long )hg;
#line 2702
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2702
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2705
      return (C_MASK);
    } else {

    }
  }
#line 2708
  __x___4 = (long )hg;
#line 2708
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2709
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2710
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2710
    if (tmp___2 != 0) {
#line 2711
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2714
  if (hg > 0) {
#line 2715
    rv = C_WF_BITMAP_S;
  } else
#line 2716
  if (hg < 0) {
#line 2717
    rv = C_WF_BITMAP_T;
  } else {
#line 2719
    rv = C_CONNECTED;
#line 2720
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2720
    if (tmp___4 != 0UL) {
#line 2721
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2721
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2726
  return (rv);
}
}
#line 2730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2733
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2735
    return (0);
  } else {

  }
#line 2738
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2740
    return (1);
  } else {

  }
#line 2743
  if ((unsigned int )peer == (unsigned int )self) {
#line 2744
    return (0);
  } else {

  }
#line 2747
  return (1);
}
}
#line 2750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *my_alg ;
  int tmp___10 ;
  int tmp___11 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2752
  p = (struct p_protocol *)h;
#line 2756
  p_integrity_alg[0] = '\000';
#line 2756
  tmp = 1U;
#line 2756
  while (1) {
#line 2756
    if (tmp >= 64U) {
#line 2756
      break;
    } else {

    }
#line 2756
    p_integrity_alg[tmp] = (char)0;
#line 2756
    tmp = tmp + 1U;
  }
#line 2758
  header_size = 24;
#line 2759
  data_size = (int )h->length - header_size;
#line 2761
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2761
  if (tmp___0 != header_size) {
#line 2762
    return (0);
  } else {

  }
#line 2764
  tmp___1 = __fswab32(p->protocol);
#line 2764
  p_proto = (int )tmp___1;
#line 2765
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2765
  p_after_sb_0p = (int )tmp___2;
#line 2766
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2766
  p_after_sb_1p = (int )tmp___3;
#line 2767
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2767
  p_after_sb_2p = (int )tmp___4;
#line 2768
  tmp___5 = __fswab32(p->two_primaries);
#line 2768
  p_two_primaries = (int )tmp___5;
#line 2769
  tmp___6 = __fswab32(p->conn_flags);
#line 2769
  cf = (int )tmp___6;
#line 2770
  p_want_lose = cf & 1;
#line 2772
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2774
  if ((cf & 2) != 0) {
#line 2775
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2777
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2778
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2779
    goto disconnect;
  } else {

  }
#line 2782
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2782
  if (tmp___7 != 0) {
#line 2783
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2784
    goto disconnect;
  } else {

  }
#line 2787
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2787
  if (tmp___8 != 0) {
#line 2788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2789
    goto disconnect;
  } else {

  }
#line 2792
  tmp___9 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2792
  if (tmp___9 != 0) {
#line 2793
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2794
    goto disconnect;
  } else {

  }
#line 2797
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2799
    goto disconnect;
  } else {

  }
#line 2802
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2803
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2804
    goto disconnect;
  } else {

  }
#line 2807
  if (mdev->agreed_pro_version > 86) {
#line 2808
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2810
    tmp___10 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2810
    if (tmp___10 != data_size) {
#line 2811
      return (0);
    } else {

    }
#line 2813
    p_integrity_alg[63] = 0;
#line 2814
    tmp___11 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2814
    if (tmp___11 != 0) {
#line 2815
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2816
      goto disconnect;
    } else {

    }
#line 2818
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2822
  return (1);
  disconnect: 
#line 2825
  val.i = 0U;
#line 2825
  val.ldv_35127.conn = 1U;
#line 2825
  mask.i = 0U;
#line 2825
  mask.ldv_35127.conn = 31U;
#line 2825
  drbd_force_state(mdev, mask, val);
#line 2826
  return (0);
}
}
#line 2834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2839
  if ((int )((signed char )*alg) == 0) {
#line 2840
    return (0);
  } else {

  }
#line 2842
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2843
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2843
  if (tmp___0 != 0L) {
#line 2844
    tmp = PTR_ERR((void const   *)tfm);
#line 2844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2846
    return (tfm);
  } else {

  }
#line 2848
  tmp___2 = crypto_hash_tfm(tfm);
#line 2848
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2848
  if (tmp___3 == 0) {
#line 2849
    crypto_free_hash(tfm);
#line 2850
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2851
    tmp___1 = ERR_PTR(-22L);
#line 2851
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2853
  return (tfm);
}
}
#line 2856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  size_t tmp___6 ;
  size_t tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2858
  ok = 1;
#line 2859
  p = (struct p_rs_param_89 *)h;
#line 2861
  verify_tfm = 0;
#line 2862
  csums_tfm = 0;
#line 2863
  apv = mdev->agreed_pro_version;
#line 2865
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2870
  if ((unsigned int )h->length > exp_max_sz) {
#line 2871
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            (int )h->length, exp_max_sz);
#line 2873
    return (0);
  } else {

  }
#line 2876
  if (apv <= 88) {
#line 2877
    header_size = 4U;
#line 2878
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2880
    header_size = 132U;
#line 2881
    data_size = (unsigned int )h->length - header_size;
#line 2882
    if (data_size != 0U) {
#line 2882
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2882);
    } else {

    }
  }
#line 2886
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2888
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2888
  if ((unsigned int )tmp != header_size) {
#line 2889
    return (0);
  } else {

  }
#line 2891
  tmp___0 = __fswab32(p->rate);
#line 2891
  mdev->sync_conf.rate = (int )tmp___0;
#line 2893
  if (apv > 87) {
#line 2894
    if (apv == 88) {
#line 2895
      if (data_size > 64U) {
#line 2896
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2899
        return (0);
      } else {

      }
#line 2902
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2902
      if ((unsigned int )tmp___1 != data_size) {
#line 2903
        return (0);
      } else {

      }
#line 2907
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2907
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2907);
      } else {

      }
#line 2908
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2913
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2913
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2913);
      } else {

      }
#line 2914
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2914
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2914);
      } else {

      }
#line 2915
      p->verify_alg[63] = 0;
#line 2916
      p->csums_alg[63] = 0;
    }
#line 2919
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2919
    if (tmp___3 != 0) {
#line 2920
      if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2921
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2923
        goto disconnect;
      } else {

      }
#line 2925
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2927
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2927
      if (tmp___2 != 0L) {
#line 2928
        verify_tfm = 0;
#line 2929
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2933
    if (apv > 88) {
#line 2933
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2933
      if (tmp___5 != 0) {
#line 2934
        if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2935
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2937
          goto disconnect;
        } else {

        }
#line 2939
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2941
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2941
        if (tmp___4 != 0L) {
#line 2942
          csums_tfm = 0;
#line 2943
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2948
    spin_lock(& mdev->peer_seq_lock);
#line 2950
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2951
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2952
      tmp___6 = strlen((char const   *)(& p->verify_alg));
#line 2952
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___6 + 1U);
#line 2953
      crypto_free_hash(mdev->verify_tfm);
#line 2954
      mdev->verify_tfm = verify_tfm;
#line 2955
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2957
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2958
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2959
      tmp___7 = strlen((char const   *)(& p->csums_alg));
#line 2959
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___7 + 1U);
#line 2960
      crypto_free_hash(mdev->csums_tfm);
#line 2961
      mdev->csums_tfm = csums_tfm;
#line 2962
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2964
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2967
  return (ok);
  disconnect: 
#line 2971
  crypto_free_hash(csums_tfm);
#line 2973
  crypto_free_hash(verify_tfm);
#line 2974
  val.i = 0U;
#line 2974
  val.ldv_35127.conn = 1U;
#line 2974
  mask.i = 0U;
#line 2974
  mask.ldv_35127.conn = 31U;
#line 2974
  drbd_force_state(mdev, mask, val);
#line 2975
  return (0);
}
}
#line 2978 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2980
  return;
}
}
#line 2985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2989
  if (a == 0UL || b == 0UL) {
#line 2990
    return;
  } else {

  }
#line 2991
  d = a > b ? a - b : b - a;
#line 2992
  if (a >> 3 < d || b >> 3 < d) {
#line 2993
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2995
  return;
}
}
#line 2997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___2 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 2999
  p = (struct p_sizes *)h;
#line 3000
  dd = 0;
#line 3003
  ldsc = 0;
#line 3006
  _b = (unsigned int )h->length != 32U;
#line 3006
  if (_b != 0) {
#line 3006
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3006);
  } else {

  }
#line 3006
  if (_b != 0) {
#line 3006
    return (0);
  } else {

  }
#line 3007
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3007
  if (tmp != (int )h->length) {
#line 3008
    return (0);
  } else {

  }
#line 3010
  tmp___0 = __fswab64(p->d_size);
#line 3010
  p_size = (sector_t )tmp___0;
#line 3011
  tmp___1 = __fswab64(p->u_size);
#line 3011
  p_usize = (sector_t )tmp___1;
#line 3013
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) {
#line 3014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3015
    val.i = 0U;
#line 3015
    val.ldv_35127.conn = 1U;
#line 3015
    mask.i = 0U;
#line 3015
    mask.ldv_35127.conn = 31U;
#line 3015
    drbd_force_state(mdev, mask, val);
#line 3016
    return (0);
  } else {

  }
#line 3021
  mdev->p_size = p_size;
#line 3024
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3024
  if (tmp___6 != 0) {
#line 3025
    tmp___2 = drbd_get_max_capacity(mdev->ldev);
#line 3025
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___2);
#line 3027
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3032
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 3033
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 3033
        if (p_usize == 0UL) {
#line 3033
          tmp___3 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 3033
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3033
          _min2 = p_usize;
#line 3033
          tmp___3 = _min1 < _min2 ? _min1 : _min2;
        }
#line 3033
        p_usize = tmp___3;
      } else {
#line 3033
        p_usize = p_usize;
      }
    } else {

    }
#line 3036
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3038
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3039
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3040
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3046
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3046
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3046
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35127.disk > 4) && (int )mdev->state.ldv_35127.conn <= 9) {
#line 3050
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3051
      val___0.i = 0U;
#line 3051
      val___0.ldv_35127.conn = 1U;
#line 3051
      mask___0.i = 0U;
#line 3051
      mask___0.ldv_35127.conn = 31U;
#line 3051
      drbd_force_state(mdev, mask___0, val___0);
#line 3052
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3053
      put_ldev(mdev);
#line 3054
      return (0);
    } else {

    }
#line 3056
    put_ldev(mdev);
  } else {

  }
#line 3060
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3060
  ddsf = (enum dds_flags )tmp___7;
#line 3061
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3061
  if (tmp___8 != 0) {
#line 3062
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3063
    put_ldev(mdev);
#line 3064
    if ((int )dd == -1) {
#line 3065
      return (0);
    } else {

    }
#line 3066
    drbd_md_sync(mdev);
  } else {
#line 3069
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3072
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3072
  if (tmp___13 != 0) {
#line 3073
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3073
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3074
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3075
      ldsc = 1;
    } else {

    }
#line 3078
    if (mdev->agreed_pro_version <= 93) {
#line 3079
      tmp___10 = __fswab32(p->max_segment_size);
#line 3079
      max_seg_s = tmp___10;
    } else {
#line 3081
      max_seg_s = 32768U;
    }
#line 3083
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3083
    if (tmp___11 != max_seg_s) {
#line 3084
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3086
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3086
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3087
    put_ldev(mdev);
  } else {

  }
#line 3090
  if ((int )mdev->state.ldv_35127.conn > 9) {
#line 3091
    tmp___14 = __fswab64(p->c_size);
#line 3091
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3091
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3095
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3097
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3097
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 910UL) == 160U)) {
#line 3099
      if ((int )mdev->state.ldv_35127.pdsk > 3 && (int )mdev->state.ldv_35127.disk > 3) {
#line 3101
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3102
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3104
          resync_after_online_grow(mdev);
        }
      } else {
#line 3106
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3110
  return (1);
}
}
#line 3113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  int tmp ;
  void *tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 3115
  p = (struct p_uuids *)h;
#line 3119
  _b = (unsigned int )h->length != 48U;
#line 3119
  if (_b != 0) {
#line 3119
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3119);
  } else {

  }
#line 3119
  if (_b != 0) {
#line 3119
    return (0);
  } else {

  }
#line 3120
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3120
  if (tmp != (int )h->length) {
#line 3121
    return (0);
  } else {

  }
#line 3123
  tmp___0 = kmalloc___1(48UL, 16U);
#line 3123
  p_uuid = (u64 *)tmp___0;
#line 3125
  i = 0;
#line 3125
  goto ldv_45544;
  ldv_45543: 
#line 3126
  tmp___1 = __fswab64(p->uuid[i]);
#line 3126
  *(p_uuid + (unsigned long )i) = tmp___1;
#line 3125
  i = i + 1;
  ldv_45544: ;
#line 3125
  if (i <= 5) {
#line 3126
    goto ldv_45543;
  } else {

  }
#line 3128
  kfree((void const   *)mdev->p_uuid);
#line 3129
  mdev->p_uuid = p_uuid;
#line 3131
  if ((((int )mdev->state.ldv_35127.conn <= 9 && (int )mdev->state.ldv_35127.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3135
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3137
    val.i = 0U;
#line 3137
    val.ldv_35127.conn = 1U;
#line 3137
    mask.i = 0U;
#line 3137
    mask.ldv_35127.conn = 31U;
#line 3137
    drbd_force_state(mdev, mask, val);
#line 3138
    return (0);
  } else {

  }
#line 3141
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3141
  if (tmp___2 != 0) {
#line 3142
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3147
    if (skip_initial_sync != 0) {
#line 3148
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3149
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3151
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3152
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3153
      __ns.i = mdev->state.i;
#line 3153
      __ns.ldv_35127.disk = 8U;
#line 3153
      __ns.ldv_35127.pdsk = 8U;
#line 3153
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3155
      drbd_md_sync(mdev);
    } else {

    }
#line 3157
    put_ldev(mdev);
  } else {

  }
#line 3164
  tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3164
  if (tmp___3 == 0) {
#line 3164
    goto ldv_45553;
  } else {

  }
#line 3164
  tmp___4 = get_current();
#line 3164
  __wait.flags = 0U;
#line 3164
  __wait.private = (void *)tmp___4;
#line 3164
  __wait.func = & autoremove_wake_function;
#line 3164
  __wait.task_list.next = & __wait.task_list;
#line 3164
  __wait.task_list.prev = & __wait.task_list;
  ldv_45556: 
#line 3164
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3164
  tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3164
  if (tmp___5 == 0) {
#line 3164
    goto ldv_45555;
  } else {

  }
#line 3164
  schedule();
#line 3164
  goto ldv_45556;
  ldv_45555: 
#line 3164
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45553: ;
#line 3165
  if ((int )mdev->state.ldv_35127.conn > 9 && (int )mdev->state.ldv_35127.disk <= 3) {
#line 3166
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3168
  return (1);
}
}
#line 3175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3179
  c_tab[0] = 0;
#line 3179
  c_tab[1] = C_TEAR_DOWN;
#line 3179
  c_tab[2] = 0;
#line 3179
  c_tab[3] = 0;
#line 3179
  c_tab[4] = 0;
#line 3179
  c_tab[5] = 0;
#line 3179
  c_tab[6] = 0;
#line 3179
  c_tab[7] = 0;
#line 3179
  c_tab[8] = 0;
#line 3179
  c_tab[9] = 0;
#line 3179
  c_tab[10] = C_CONNECTED;
#line 3179
  c_tab[11] = C_STARTING_SYNC_T;
#line 3179
  c_tab[12] = C_STARTING_SYNC_S;
#line 3179
  c_tab[13] = 0;
#line 3179
  c_tab[14] = 0;
#line 3179
  c_tab[15] = 0;
#line 3179
  c_tab[16] = 0;
#line 3179
  c_tab[17] = 0;
#line 3179
  c_tab[18] = C_VERIFY_T;
#line 3179
  c_tab[19] = 0;
#line 3179
  c_tab[20] = 0;
#line 3179
  c_tab[21] = 0;
#line 3179
  c_tab[22] = 0;
#line 3179
  c_tab[23] = 0;
#line 3179
  c_tab[24] = 0;
#line 3179
  c_tab[25] = 0;
#line 3179
  c_tab[26] = 0;
#line 3179
  c_tab[27] = 0;
#line 3179
  c_tab[28] = 0;
#line 3179
  c_tab[29] = 0;
#line 3179
  c_tab[30] = 0;
#line 3179
  c_tab[31] = C_MASK;
#line 3189
  ms.i = ps.i;
#line 3191
  ms.ldv_35127.conn = (unsigned char )c_tab[(int )ps.ldv_35127.conn];
#line 3192
  ms.ldv_35127.peer = ps.ldv_35127.role;
#line 3193
  ms.ldv_35127.role = ps.ldv_35127.peer;
#line 3194
  ms.ldv_35127.pdsk = ps.ldv_35127.disk;
#line 3195
  ms.ldv_35127.disk = ps.ldv_35127.pdsk;
#line 3196
  ms.ldv_35127.peer_isp = (unsigned char )((int )ps.ldv_35127.aftr_isp | (int )ps.ldv_35127.user_isp);
#line 3198
  return (ms);
}
}
#line 3201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 3203
  p = (struct p_req_state *)h;
#line 3207
  _b = (unsigned int )h->length != 8U;
#line 3207
  if (_b != 0) {
#line 3207
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3207);
  } else {

  }
#line 3207
  if (_b != 0) {
#line 3207
    return (0);
  } else {

  }
#line 3208
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3208
  if (tmp != (int )h->length) {
#line 3209
    return (0);
  } else {

  }
#line 3211
  tmp___0 = __fswab32(p->mask);
#line 3211
  mask.i = tmp___0;
#line 3212
  tmp___1 = __fswab32(p->val);
#line 3212
  val.i = tmp___1;
#line 3214
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3214
  if (tmp___2 != 0) {
#line 3214
    tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3214
    if (tmp___3 != 0) {
#line 3216
      drbd_send_sr_reply(mdev, -19);
#line 3217
      return (1);
    } else {

    }
  } else {

  }
#line 3220
  mask = convert_state(mask);
#line 3221
  val = convert_state(val);
#line 3223
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3225
  drbd_send_sr_reply(mdev, rv);
#line 3226
  drbd_md_sync(mdev);
#line 3228
  return (1);
}
}
#line 3231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  int cr ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___4 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3233
  p = (struct p_state *)h;
#line 3239
  _b = (unsigned int )h->length != 4U;
#line 3239
  if (_b != 0) {
#line 3239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3239);
  } else {

  }
#line 3239
  if (_b != 0) {
#line 3240
    return (0);
  } else {

  }
#line 3242
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3242
  if (tmp != (int )h->length) {
#line 3243
    return (0);
  } else {

  }
#line 3245
  tmp___0 = __fswab32(p->state);
#line 3245
  peer_state.i = tmp___0;
#line 3247
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35127.disk;
#line 3248
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3249
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3250
    tmp___1 = drbd_disk_str(real_peer_disk);
#line 3250
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___1);
  } else {

  }
#line 3253
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3255
  nconn = (enum drbd_conns )mdev->state.ldv_35127.conn;
#line 3255
  oconn = nconn;
#line 3256
  spin_unlock_irq(& mdev->req_lock);
#line 3258
  if ((unsigned int )nconn == 9U) {
#line 3259
    nconn = C_CONNECTED;
  } else {

  }
#line 3261
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35127.disk > 2) {
#line 3261
    tmp___4 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3261
    if (tmp___4 != 0) {
#line 3266
      cr = (unsigned int )oconn <= 9U;
#line 3269
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1821UL) == 6U)) | cr;
#line 3274
      tmp___2 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3274
      cr = tmp___2 | cr;
#line 3277
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_35127.conn > 10 && (int )peer_state.ldv_35127.conn <= 14)) | cr;
#line 3281
      if (cr != 0) {
#line 3282
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35127.role,
                                    real_peer_disk);
      } else {

      }
#line 3284
      put_ldev(mdev);
#line 3285
      if ((unsigned int )nconn == 31U) {
#line 3286
        nconn = C_CONNECTED;
#line 3287
        if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 6U) {
#line 3288
          val.i = 0U;
#line 3288
          val.ldv_35127.disk = 0U;
#line 3288
          mask.i = 0U;
#line 3288
          mask.ldv_35127.disk = 15U;
#line 3288
          drbd_force_state(mdev, mask, val);
        } else
#line 3289
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3290
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3291
          peer_state.ldv_35127.disk = 0U;
#line 3292
          real_peer_disk = D_DISKLESS;
        } else {
#line 3294
          tmp___3 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3294
          if (tmp___3 != 0) {
#line 3295
            return (0);
          } else {

          }
#line 3296
          if ((unsigned int )oconn != 9U) {
#line 3296
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3296);
          } else {

          }
#line 3297
          val___0.i = 0U;
#line 3297
          val___0.ldv_35127.conn = 1U;
#line 3297
          mask___0.i = 0U;
#line 3297
          mask___0.ldv_35127.conn = 31U;
#line 3297
          drbd_force_state(mdev, mask___0, val___0);
#line 3298
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3303
  spin_lock_irq(& mdev->req_lock);
#line 3304
  if ((unsigned int )mdev->state.ldv_35127.conn != (unsigned int )oconn) {
#line 3305
    goto retry;
  } else {

  }
#line 3306
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3307
  ns.i = mdev->state.i;
#line 3308
  ns.ldv_35127.conn = (unsigned char )nconn;
#line 3309
  ns.ldv_35127.peer = peer_state.ldv_35127.role;
#line 3310
  ns.ldv_35127.pdsk = (unsigned char )real_peer_disk;
#line 3311
  ns.ldv_35127.peer_isp = (unsigned char )((int )peer_state.ldv_35127.aftr_isp | (int )peer_state.ldv_35127.user_isp);
#line 3312
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3313
    ns.ldv_35127.disk = mdev->new_state_tmp.ldv_35127.disk;
  } else {

  }
#line 3315
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3316
  ns = mdev->state;
#line 3317
  spin_unlock_irq(& mdev->req_lock);
#line 3319
  if (rv <= 0) {
#line 3320
    val___1.i = 0U;
#line 3320
    val___1.ldv_35127.conn = 1U;
#line 3320
    mask___1.i = 0U;
#line 3320
    mask___1.ldv_35127.conn = 31U;
#line 3320
    drbd_force_state(mdev, mask___1, val___1);
#line 3321
    return (0);
  } else {

  }
#line 3324
  if ((unsigned int )oconn > 9U) {
#line 3325
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_35127.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3330
      drbd_send_uuids(mdev);
#line 3331
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3335
  (mdev->net_conf)->want_lose = 0U;
#line 3337
  drbd_md_sync(mdev);
#line 3339
  return (1);
}
}
#line 3342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  int tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 3344
  p = (struct p_rs_uuid *)h;
#line 3346
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35127.conn <= 9) || (int )mdev->state.ldv_35127.disk <= 2) {
#line 3346
    goto ldv_45606;
  } else {

  }
#line 3346
  tmp = get_current();
#line 3346
  __wait.flags = 0U;
#line 3346
  __wait.private = (void *)tmp;
#line 3346
  __wait.func = & autoremove_wake_function;
#line 3346
  __wait.task_list.next = & __wait.task_list;
#line 3346
  __wait.task_list.prev = & __wait.task_list;
  ldv_45609: 
#line 3346
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3346
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35127.conn <= 9) || (int )mdev->state.ldv_35127.disk <= 2) {
#line 3346
    goto ldv_45608;
  } else {

  }
#line 3346
  schedule();
#line 3346
  goto ldv_45609;
  ldv_45608: 
#line 3346
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45606: 
#line 3353
  _b = (unsigned int )h->length != 8U;
#line 3353
  if (_b != 0) {
#line 3353
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sync_uuid", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3353);
  } else {

  }
#line 3353
  if (_b != 0) {
#line 3353
    return (0);
  } else {

  }
#line 3354
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3354
  if (tmp___0 != (int )h->length) {
#line 3355
    return (0);
  } else {

  }
#line 3359
  tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3359
  if (tmp___2 != 0) {
#line 3360
    tmp___1 = __fswab64(p->uuid);
#line 3360
    _drbd_uuid_set(mdev, 0, tmp___1);
#line 3361
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3363
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3365
    put_ldev(mdev);
  } else {
#line 3367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3369
  return (1);
}
}
#line 3375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3378
  __min1 = 511UL;
#line 3378
  __min2 = c->bm_words - c->word_offset;
#line 3378
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3379
  want = num_words * 8U;
#line 3381
  if ((unsigned int )h->length != want) {
#line 3382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != h->length (%u)\n",
            "receive_bitmap_plain", want, (int )h->length);
#line 3383
    return (FAILED);
  } else {

  }
#line 3385
  if (want == 0U) {
#line 3386
    return (DONE);
  } else {

  }
#line 3387
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3387
  if ((unsigned int )tmp != want) {
#line 3388
    return (FAILED);
  } else {

  }
#line 3390
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3392
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3393
  c->bit_offset = c->word_offset * 64UL;
#line 3394
  if (c->bit_offset > c->bm_bits) {
#line 3395
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3397
  return (OK);
}
}
#line 3401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;

  {
#line 3409
  s = c->bit_offset;
#line 3411
  len = (int )((unsigned int )p->head.length - 1U);
#line 3412
  tmp___0 = DCBP_get_start(p);
#line 3412
  toggle = tmp___0;
#line 3416
  tmp___1 = DCBP_get_pad_bits(p);
#line 3416
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3418
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3419
  if (bits < 0) {
#line 3420
    return (FAILED);
  } else {

  }
#line 3422
  have = bits;
#line 3422
  goto ldv_45645;
  ldv_45644: 
#line 3423
  bits = vli_decode_bits(& rl, look_ahead);
#line 3424
  if (bits <= 0) {
#line 3425
    return (FAILED);
  } else {

  }
#line 3427
  if (toggle != 0) {
#line 3428
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3429
    if (c->bm_bits <= e) {
#line 3430
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3431
      return (FAILED);
    } else {

    }
#line 3433
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3436
  if (have < bits) {
#line 3437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3441
    return (FAILED);
  } else {

  }
#line 3443
  look_ahead = look_ahead >> bits;
#line 3444
  have = have - bits;
#line 3446
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3447
  if (bits < 0) {
#line 3448
    return (FAILED);
  } else {

  }
#line 3449
  look_ahead = (tmp << have) | look_ahead;
#line 3450
  have = have + bits;
#line 3422
  s = (unsigned long )((unsigned long long )s + rl);
#line 3422
  toggle = toggle == 0;
  ldv_45645: ;
#line 3422
  if (have > 0) {
#line 3423
    goto ldv_45644;
  } else {

  }
#line 3453
  c->bit_offset = s;
#line 3454
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3456
  return (c->bm_bits == s);
}
}
#line 3460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3464
  tmp___0 = DCBP_get_code(p);
#line 3464
  if ((unsigned int )tmp___0 == 2U) {
#line 3465
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3465
    return (tmp);
  } else {

  }
#line 3471
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3472
  val.i = 0U;
#line 3472
  val.ldv_35127.conn = 6U;
#line 3472
  mask.i = 0U;
#line 3472
  mask.ldv_35127.conn = 31U;
#line 3472
  drbd_force_state(mdev, mask, val);
#line 3473
  return (FAILED);
}
}
#line 3476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3480
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3483
  total = c->bytes[0] + c->bytes[1];
#line 3487
  if (total == 0U) {
#line 3488
    return;
  } else {

  }
#line 3491
  if (total >= plain) {
#line 3492
    return;
  } else {

  }
#line 3495
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3498
  if (r > 1000U) {
#line 3499
    r = 1000U;
  } else {

  }
#line 3501
  r = 1000U - r;
#line 3502
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3503
  return;
}
}
#line 3518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3523
  ok = 0;
#line 3525
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3525
  if (tmp == 0) {
#line 3525
    goto ldv_45672;
  } else {

  }
#line 3525
  tmp___0 = get_current();
#line 3525
  __wait.flags = 0U;
#line 3525
  __wait.private = (void *)tmp___0;
#line 3525
  __wait.func = & autoremove_wake_function;
#line 3525
  __wait.task_list.next = & __wait.task_list;
#line 3525
  __wait.task_list.prev = & __wait.task_list;
  ldv_45675: 
#line 3525
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3525
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3525
  if (tmp___1 == 0) {
#line 3525
    goto ldv_45674;
  } else {

  }
#line 3525
  schedule();
#line 3525
  goto ldv_45675;
  ldv_45674: 
#line 3525
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45672: 
#line 3527
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3531
  tmp___2 = __get_free_pages(16U, 0U);
#line 3531
  buffer = (void *)tmp___2;
#line 3532
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3533
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3534
    goto out;
  } else {

  }
#line 3537
  tmp___3 = drbd_bm_bits(mdev);
#line 3537
  tmp___4 = drbd_bm_words(mdev);
#line 3537
  __constr_expr_0.bm_bits = tmp___3;
#line 3537
  __constr_expr_0.bm_words = tmp___4;
#line 3537
  __constr_expr_0.bit_offset = 0UL;
#line 3537
  __constr_expr_0.word_offset = 0UL;
#line 3537
  __constr_expr_0.packets[0] = 0U;
#line 3537
  __constr_expr_0.packets[1] = 0U;
#line 3537
  __constr_expr_0.bytes[0] = 0U;
#line 3537
  __constr_expr_0.bytes[1] = 0U;
#line 3537
  c = __constr_expr_0;
  ldv_45684: ;
#line 3543
  if ((unsigned int )h->command == 4U) {
#line 3544
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3545
  if ((unsigned int )h->command == 36U) {
#line 3550
    if ((unsigned int )h->length > 4088U) {
#line 3551
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3552
      goto out;
    } else {

    }
#line 3555
    p = (struct p_compressed_bm *)buffer;
#line 3556
    __len = 8UL;
#line 3556
    if (__len > 63UL) {
#line 3556
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3556
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3557
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3557
    if (tmp___5 != (int )h->length) {
#line 3558
      goto out;
    } else {

    }
#line 3559
    if ((unsigned int )p->head.length <= 1U) {
#line 3560
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              (int )p->head.length);
#line 3561
      return (2);
    } else {

    }
#line 3563
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3565
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (int )h->command);
#line 3566
    goto out;
  }
#line 3569
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3570
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3572
  if ((unsigned int )ret != 0U) {
#line 3573
    goto ldv_45683;
  } else {

  }
#line 3575
  tmp___6 = drbd_recv_header(mdev, h);
#line 3575
  if (tmp___6 == 0) {
#line 3576
    goto out;
  } else {

  }
#line 3577
  if ((unsigned int )ret == 0U) {
#line 3578
    goto ldv_45684;
  } else {

  }
  ldv_45683: ;
#line 3578
  if ((unsigned int )ret == 2U) {
#line 3579
    goto out;
  } else {

  }
#line 3581
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3583
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 224U) {
#line 3584
    tmp___7 = drbd_send_bitmap(mdev);
#line 3584
    ok = tmp___7 == 0;
#line 3585
    if (ok == 0) {
#line 3586
      goto out;
    } else {

    }
#line 3588
    val.i = 0U;
#line 3588
    val.ldv_35127.conn = 15U;
#line 3588
    mask.i = 0U;
#line 3588
    mask.ldv_35127.conn = 31U;
#line 3588
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3589
    if (ok != 1) {
#line 3589
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3589);
    } else {

    }
  } else
#line 3590
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 208U) {
#line 3593
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 3593
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3597
  ok = 1;
  out: 
#line 3599
  drbd_bm_unlock(mdev);
#line 3600
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 910UL) == 208U) {
#line 3601
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3602
  free_pages((unsigned long )buffer, 0U);
#line 3603
  return (ok);
}
}
#line 3606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_(struct drbd_conf *mdev , struct p_header *h , int silent ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3612
  if (silent == 0) {
#line 3613
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
             (int )h->command, (int )h->length);
  } else {

  }
#line 3616
  size = (int )h->length;
#line 3617
  goto ldv_45706;
  ldv_45705: 
#line 3618
  __min1 = size;
#line 3618
  __min2 = 128;
#line 3618
  want = __min1 < __min2 ? __min1 : __min2;
#line 3619
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3620
  _b = r <= 0;
#line 3620
  if (_b != 0) {
#line 3620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_skip_", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3620);
  } else {

  }
#line 3620
  if (_b != 0) {
#line 3620
    goto ldv_45704;
  } else {

  }
#line 3621
  size = size - r;
  ldv_45706: ;
#line 3617
  if (size > 0) {
#line 3618
    goto ldv_45705;
  } else {

  }
  ldv_45704: ;
#line 3623
  return (size == 0);
}
}
#line 3626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3628
  tmp = receive_skip_(mdev, h, 0);
#line 3628
  return (tmp);
}
}
#line 3631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_silent(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3633
  tmp = receive_skip_(mdev, h, 1);
#line 3633
  return (tmp);
}
}
#line 3636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3638
  if ((int )mdev->state.ldv_35127.disk > 3) {
#line 3639
    drbd_kick_lo(mdev);
  } else {

  }
#line 3643
  drbd_tcp_quickack(mdev->data.socket);
#line 3645
  return (1);
}
}
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[41U]  = 
#line 3650
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0,      0,      & receive_skip_silent, 
        0};
#line 3677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___2 ;
  long tmp___3 ;
  enum drbd_thread_state tmp___4 ;

  {
#line 3683
  header = & mdev->data.rbuf.header;
#line 3685
  goto ldv_45744;
  ldv_45743: 
#line 3686
  drbd_thread_current_set_cpu(mdev);
#line 3687
  tmp = drbd_recv_header(mdev, header);
#line 3687
  if (tmp == 0) {
#line 3688
    val.i = 0U;
#line 3688
    val.ldv_35127.conn = 6U;
#line 3688
    mask.i = 0U;
#line 3688
    mask.ldv_35127.conn = 31U;
#line 3688
    drbd_force_state(mdev, mask, val);
#line 3689
    goto ldv_45734;
  } else {

  }
#line 3692
  if ((unsigned int )header->command <= 39U) {
#line 3693
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3694
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3696
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3697
  if ((unsigned int )header->command > 257U) {
#line 3698
    handler = & receive_skip;
  } else {
#line 3700
    handler = 0;
  }
#line 3702
  tmp___0 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3702
  if (tmp___0 != 0L) {
#line 3703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (int )header->command, (int )header->length);
#line 3705
    val___0.i = 0U;
#line 3705
    val___0.ldv_35127.conn = 6U;
#line 3705
    mask___0.i = 0U;
#line 3705
    mask___0.ldv_35127.conn = 31U;
#line 3705
    drbd_force_state(mdev, mask___0, val___0);
#line 3706
    goto ldv_45734;
  } else {

  }
#line 3708
  tmp___2 = (*handler)(mdev, header);
#line 3708
  tmp___3 = __builtin_expect(tmp___2 == 0, 0L);
#line 3708
  if (tmp___3 != 0L) {
#line 3709
    tmp___1 = cmdname((enum drbd_packets )header->command);
#line 3709
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___1, (int )header->length);
#line 3711
    val___1.i = 0U;
#line 3711
    val___1.ldv_35127.conn = 6U;
#line 3711
    mask___1.i = 0U;
#line 3711
    mask___1.ldv_35127.conn = 31U;
#line 3711
    drbd_force_state(mdev, mask___1, val___1);
#line 3712
    goto ldv_45734;
  } else {

  }
  ldv_45744: 
#line 3685
  tmp___4 = get_t_state(& mdev->receiver);
#line 3685
  if ((unsigned int )tmp___4 == 1U) {
#line 3686
    goto ldv_45743;
  } else {

  }
  ldv_45734: ;
#line 3690
  return;
}
}
#line 3717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr ;
  int tmp___1 ;

  {
#line 3728
  spin_lock_irq(& mdev->req_lock);
#line 3729
  i = 0;
#line 3729
  goto ldv_45761;
  ldv_45760: 
#line 3730
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3731
  pos = slot->first;
#line 3731
  goto ldv_45758;
  ldv_45757: 
#line 3737
  tmp___0 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3737
  if (tmp___0 == 0) {
#line 3737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&req->w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3737);
  } else {

  }
#line 3740
  _req_mod(req, connection_lost_while_pending);
#line 3731
  pos = tmp;
  ldv_45758: ;
#line 3731
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3731
    tmp = pos->next;
#line 3731
    if (1 != 0) {
#line 3731
      __mptr = (struct hlist_node  const  *)pos;
#line 3731
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3731
      if (1 != 0) {
#line 3732
        goto ldv_45757;
      } else {
#line 3734
        goto ldv_45759;
      }
    } else {
#line 3734
      goto ldv_45759;
    }
  } else {

  }
  ldv_45759: 
#line 3729
  i = i + 1;
  ldv_45761: ;
#line 3729
  if (i <= 14) {
#line 3730
    goto ldv_45760;
  } else {

  }
#line 3743
  i = 0;
#line 3743
  goto ldv_45764;
  ldv_45763: 
#line 3744
  tmp___1 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3744
  if (tmp___1 == 0) {
#line 3745
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
             i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3743
  i = i + 1;
  ldv_45764: ;
#line 3743
  if (i <= 14) {
#line 3744
    goto ldv_45763;
  } else {

  }
#line 3748
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3749
  spin_unlock_irq(& mdev->req_lock);
#line 3750
  return;
}
}
#line 3752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3756
  barr.w.cb = & w_prev_work_done;
#line 3757
  init_completion(& barr.done);
#line 3758
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3759
  wait_for_completion(& barr.done);
#line 3760
  return;
}
}
#line 3762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 3766
  rv = 0;
#line 3769
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 0U) {
#line 3770
    return;
  } else {

  }
#line 3771
  if ((int )mdev->state.ldv_35127.conn > 7) {
#line 3772
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35127.conn);
#line 3772
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3776
  drbd_thread_stop(& mdev->asender);
#line 3777
  drbd_free_sock(mdev);
#line 3779
  spin_lock_irq(& mdev->req_lock);
#line 3780
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3781
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3782
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3783
  spin_unlock_irq(& mdev->req_lock);
#line 3795
  drbd_rs_cancel_all(mdev);
#line 3796
  mdev->rs_total = 0UL;
#line 3797
  mdev->rs_failed = 0UL;
#line 3798
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3799
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3802
  del_timer_sync(& mdev->resync_timer);
#line 3803
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3804
  resync_timer_fn((unsigned long )mdev);
#line 3809
  drbd_flush_workqueue(mdev);
#line 3813
  drbd_process_done_ee(mdev);
#line 3815
  kfree((void const   *)mdev->p_uuid);
#line 3816
  mdev->p_uuid = 0;
#line 3818
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 3819
    tl_clear(mdev);
  } else {

  }
#line 3821
  drbd_fail_pending_reads(mdev);
#line 3823
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3825
  drbd_md_sync(mdev);
#line 3827
  fp = FP_DONT_CARE;
#line 3828
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3828
  if (tmp___0 != 0) {
#line 3829
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3830
    put_ldev(mdev);
  } else {

  }
#line 3833
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3834
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_35127.pdsk > 5) {
#line 3835
      tmp___1 = drbd_try_outdate_peer(mdev);
#line 3835
      nps = tmp___1;
#line 3836
      val.i = 0U;
#line 3836
      val.ldv_35127.pdsk = (unsigned char )nps;
#line 3836
      mask.i = 0U;
#line 3836
      mask.ldv_35127.pdsk = 15U;
#line 3836
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3840
  spin_lock_irq(& mdev->req_lock);
#line 3841
  os = mdev->state;
#line 3842
  if ((int )os.ldv_35127.conn > 1) {
#line 3844
    ns = os;
#line 3845
    ns.ldv_35127.conn = 2U;
#line 3846
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3848
  spin_unlock_irq(& mdev->req_lock);
#line 3850
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3852
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3852
    if (tmp___2 == 0) {
#line 3852
      goto ldv_45784;
    } else {

    }
#line 3852
    tmp___3 = get_current();
#line 3852
    __wait.flags = 0U;
#line 3852
    __wait.private = (void *)tmp___3;
#line 3852
    __wait.func = & autoremove_wake_function;
#line 3852
    __wait.task_list.next = & __wait.task_list;
#line 3852
    __wait.task_list.prev = & __wait.task_list;
    ldv_45787: 
#line 3852
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3852
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3852
    if (tmp___4 == 0) {
#line 3852
      goto ldv_45786;
    } else {

    }
#line 3852
    schedule();
#line 3852
    goto ldv_45787;
    ldv_45786: 
#line 3852
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_45784: 
#line 3856
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3856
    if (tmp___5 == 0) {
#line 3856
      goto ldv_45788;
    } else {

    }
#line 3856
    tmp___6 = get_current();
#line 3856
    __wait___0.flags = 0U;
#line 3856
    __wait___0.private = (void *)tmp___6;
#line 3856
    __wait___0.func = & autoremove_wake_function;
#line 3856
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3856
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45791: 
#line 3856
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3856
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3856
    if (tmp___7 == 0) {
#line 3856
      goto ldv_45790;
    } else {

    }
#line 3856
    schedule();
#line 3856
    goto ldv_45791;
    ldv_45790: 
#line 3856
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_45788: 
#line 3858
    spin_lock_irq(& mdev->req_lock);
#line 3860
    h = mdev->ee_hash;
#line 3860
    goto ldv_45793;
    ldv_45792: ;
#line 3861
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3862
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3860
    h = h + 1;
    ldv_45793: ;
#line 3860
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3861
      goto ldv_45792;
    } else {

    }
#line 3864
    kfree((void const   *)mdev->ee_hash);
#line 3865
    mdev->ee_hash = 0;
#line 3866
    mdev->ee_hash_s = 0U;
#line 3869
    h = mdev->tl_hash;
#line 3869
    goto ldv_45796;
    ldv_45795: ;
#line 3870
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3871
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3869
    h = h + 1;
    ldv_45796: ;
#line 3869
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3870
      goto ldv_45795;
    } else {

    }
#line 3873
    kfree((void const   *)mdev->tl_hash);
#line 3874
    mdev->tl_hash = 0;
#line 3875
    mdev->tl_hash_s = 0U;
#line 3876
    spin_unlock_irq(& mdev->req_lock);
#line 3878
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3879
    mdev->cram_hmac_tfm = 0;
#line 3881
    kfree((void const   *)mdev->net_conf);
#line 3882
    mdev->net_conf = 0;
#line 3883
    val___0.i = 0U;
#line 3883
    val___0.ldv_35127.conn = 0U;
#line 3883
    mask___0.i = 0U;
#line 3883
    mask___0.ldv_35127.conn = 31U;
#line 3883
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3893
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3893
  i = (unsigned int )tmp___8;
#line 3894
  if (i != 0U) {
#line 3895
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3896
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3896
  i = (unsigned int )tmp___9;
#line 3897
  if (i != 0U) {
#line 3898
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3900
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3900
  if (tmp___10 == 0) {
#line 3900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3900);
  } else {

  }
#line 3901
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3901
  if (tmp___11 == 0) {
#line 3901
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3901);
  } else {

  }
#line 3902
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3902
  if (tmp___12 == 0) {
#line 3902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3902);
  } else {

  }
#line 3903
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3903
  if (tmp___13 == 0) {
#line 3903
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3903);
  } else {

  }
#line 3906
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3907
  tmp___14 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3907
  if (tmp___14 == 0) {
#line 3907
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3907);
  } else {

  }
#line 3908
  return;
}
}
#line 3919 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3922
  p = & mdev->data.sbuf.handshake;
#line 3925
  tmp = ldv_mutex_lock_interruptible_69(& mdev->data.mutex);
#line 3925
  if (tmp != 0) {
#line 3926
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3927
    return (0);
  } else {

  }
#line 3930
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3931
    ldv_mutex_unlock_70(& mdev->data.mutex);
#line 3932
    return (0);
  } else {

  }
#line 3935
  memset((void *)p, 0, 80UL);
#line 3936
  p->protocol_min = 1442840576U;
#line 3937
  p->protocol_max = 1577058304U;
#line 3938
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3940
  ldv_mutex_unlock_71(& mdev->data.mutex);
#line 3941
  return (ok);
}
}
#line 3951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 3954
  p = & mdev->data.rbuf.handshake;
#line 3955
  expect = 72;
#line 3959
  rv = drbd_send_handshake(mdev);
#line 3960
  if (rv == 0) {
#line 3961
    return (0);
  } else {

  }
#line 3963
  rv = drbd_recv_header(mdev, & p->head);
#line 3964
  if (rv == 0) {
#line 3965
    return (0);
  } else {

  }
#line 3967
  if ((unsigned int )p->head.command != 65534U) {
#line 3968
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (int )p->head.command);
#line 3970
    return (-1);
  } else {

  }
#line 3973
  if ((int )p->head.length != expect) {
#line 3974
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, (int )p->head.length);
#line 3976
    return (-1);
  } else {

  }
#line 3979
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3981
  if (rv != expect) {
#line 3982
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 3983
    return (0);
  } else {

  }
#line 3986
  tmp___0 = __fswab32(p->protocol_min);
#line 3986
  p->protocol_min = tmp___0;
#line 3987
  tmp___1 = __fswab32(p->protocol_max);
#line 3987
  p->protocol_max = tmp___1;
#line 3988
  if (p->protocol_max == 0U) {
#line 3989
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3991
  if (p->protocol_min > 94U || p->protocol_max <= 85U) {
#line 3993
    goto incompat;
  } else {

  }
#line 3995
  __min1 = 94;
#line 3995
  __min2 = (int )p->protocol_max;
#line 3995
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3997
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4000
  return (1);
  incompat: 
#line 4003
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 94, p->protocol_min, p->protocol_max);
#line 4007
  return (-1);
}
}
#line 4026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 4030
  response = 0;
#line 4031
  right_response = 0;
#line 4032
  peers_ch = 0;
#line 4034
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4034
  key_len = (unsigned int )tmp;
#line 4039
  desc.tfm = mdev->cram_hmac_tfm;
#line 4040
  desc.flags = 0U;
#line 4042
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4044
  if (rv != 0) {
#line 4045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4046
    rv = -1;
#line 4047
    goto fail;
  } else {

  }
#line 4050
  get_random_bytes((void *)(& my_challenge), 64);
#line 4052
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4053
  if (rv == 0) {
#line 4054
    goto fail;
  } else {

  }
#line 4056
  rv = drbd_recv_header(mdev, & p);
#line 4057
  if (rv == 0) {
#line 4058
    goto fail;
  } else {

  }
#line 4060
  if ((unsigned int )p.command != 16U) {
#line 4061
    tmp___0 = cmdname((enum drbd_packets )p.command);
#line 4061
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (int )p.command);
#line 4063
    rv = 0;
#line 4064
    goto fail;
  } else {

  }
#line 4067
  if ((unsigned int )p.length > 128U) {
#line 4068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4069
    rv = -1;
#line 4070
    goto fail;
  } else {

  }
#line 4073
  tmp___1 = kmalloc___1((size_t )p.length, 16U);
#line 4073
  peers_ch = (char *)tmp___1;
#line 4074
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4075
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4076
    rv = -1;
#line 4077
    goto fail;
  } else {

  }
#line 4080
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 4082
  if ((int )p.length != rv) {
#line 4083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4084
    rv = 0;
#line 4085
    goto fail;
  } else {

  }
#line 4088
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4089
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4089
  response = (char *)tmp___2;
#line 4090
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4092
    rv = -1;
#line 4093
    goto fail;
  } else {

  }
#line 4096
  sg_init_table(& sg, 1U);
#line 4097
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 4099
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4100
  if (rv != 0) {
#line 4101
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4102
    rv = -1;
#line 4103
    goto fail;
  } else {

  }
#line 4106
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4107
  if (rv == 0) {
#line 4108
    goto fail;
  } else {

  }
#line 4110
  rv = drbd_recv_header(mdev, & p);
#line 4111
  if (rv == 0) {
#line 4112
    goto fail;
  } else {

  }
#line 4114
  if ((unsigned int )p.command != 17U) {
#line 4115
    tmp___3 = cmdname((enum drbd_packets )p.command);
#line 4115
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (int )p.command);
#line 4117
    rv = 0;
#line 4118
    goto fail;
  } else {

  }
#line 4121
  if ((unsigned int )p.length != resp_size) {
#line 4122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4123
    rv = 0;
#line 4124
    goto fail;
  } else {

  }
#line 4127
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4129
  if ((unsigned int )rv != resp_size) {
#line 4130
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4131
    rv = 0;
#line 4132
    goto fail;
  } else {

  }
#line 4135
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4135
  right_response = (char *)tmp___4;
#line 4136
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4137
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4138
    rv = -1;
#line 4139
    goto fail;
  } else {

  }
#line 4142
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4144
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4145
  if (rv != 0) {
#line 4146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4147
    rv = -1;
#line 4148
    goto fail;
  } else {

  }
#line 4151
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4151
  rv = tmp___5 == 0;
#line 4153
  if (rv != 0) {
#line 4154
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4157
    rv = -1;
  }
  fail: 
#line 4160
  kfree((void const   *)peers_ch);
#line 4161
  kfree((void const   *)response);
#line 4162
  kfree((void const   *)right_response);
#line 4164
  return (rv);
}
}
#line 4168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4170
  mdev = thi->mdev;
#line 4171
  tmp = mdev_to_minor(mdev);
#line 4171
  minor = tmp;
#line 4174
  tmp___0 = get_current();
#line 4174
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4176
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_45841: 
#line 4179
  h = drbd_connect(mdev);
#line 4180
  if (h == 0) {
#line 4181
    drbd_disconnect(mdev);
#line 4182
    tmp___1 = get_current();
#line 4182
    tmp___1->state = 1L;
#line 4183
    schedule_timeout(250L);
  } else {

  }
#line 4185
  if (h == -1) {
#line 4186
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4187
    val.i = 0U;
#line 4187
    val.ldv_35127.conn = 1U;
#line 4187
    mask.i = 0U;
#line 4187
    mask.ldv_35127.conn = 31U;
#line 4187
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4189
  if (h == 0) {
#line 4190
    goto ldv_45841;
  } else {

  }

#line 4191
  if (h > 0) {
#line 4192
    tmp___2 = get_net_conf(mdev);
#line 4192
    if (tmp___2 != 0) {
#line 4193
      drbdd(mdev);
#line 4194
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4198
  drbd_disconnect(mdev);
#line 4200
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4201
  return (0);
}
}
#line 4206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4208
  p = (struct p_req_state_reply *)h;
#line 4210
  tmp = __fswab32(p->retcode);
#line 4210
  retcode = (int )tmp;
#line 4212
  if (retcode > 0) {
#line 4213
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4215
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4216
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4216
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4219
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4221
  return (1);
}
}
#line 4224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4226
  tmp = drbd_send_ping_ack(mdev);
#line 4226
  return (tmp);
}
}
#line 4230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4233
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4234
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4234
  if (tmp == 0) {
#line 4235
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4237
  return (1);
}
}
#line 4240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4242
  p = (struct p_block_ack *)h;
#line 4243
  tmp = __fswab64(p->sector);
#line 4243
  sector = (sector_t )tmp;
#line 4244
  tmp___0 = __fswab32(p->blksize);
#line 4244
  blksize = (int )tmp___0;
#line 4246
  if (mdev->agreed_pro_version <= 88) {
#line 4246
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4246);
  } else {

  }
#line 4248
  tmp___1 = __fswab32(p->seq_num);
#line 4248
  update_peer_seq(mdev, tmp___1);
#line 4250
  drbd_rs_complete_io(mdev, sector);
#line 4251
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4251U);
#line 4253
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4254
  atomic_dec(& mdev->rs_pending_cnt);
#line 4254
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4254
  if (tmp___3 < 0) {
#line 4254
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4254, tmp___2);
  } else {

  }
#line 4256
  return (1);
}
}
#line 4261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4264
  tmp = tl_hash_slot(mdev, sector);
#line 4264
  slot = tmp;
#line 4268
  n = slot->first;
#line 4268
  goto ldv_45882;
  ldv_45881: ;
#line 4269
  if ((unsigned long )req == (unsigned long )id) {
#line 4270
    if (req->sector != sector) {
#line 4271
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4275
      goto ldv_45880;
    } else {

    }
#line 4277
    return (req);
  } else {

  }
#line 4268
  n = n->next;
  ldv_45882: ;
#line 4268
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4268
    __builtin_prefetch((void const   *)n->next);
#line 4268
    if (1 != 0) {
#line 4268
      __mptr = (struct hlist_node  const  *)n;
#line 4268
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4268
      if (1 != 0) {
#line 4269
        goto ldv_45881;
      } else {
#line 4271
        goto ldv_45880;
      }
    } else {
#line 4271
      goto ldv_45880;
    }
  } else {

  }
  ldv_45880: 
#line 4280
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4282
  return (0);
}
}
#line 4288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4295
  spin_lock_irq(& mdev->req_lock);
#line 4296
  req = (*validator)(mdev, id, sector);
#line 4297
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4297
  if (tmp != 0L) {
#line 4298
    spin_unlock_irq(& mdev->req_lock);
#line 4299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4300
    return (0);
  } else {

  }
#line 4302
  __req_mod(req, what, & m);
#line 4303
  spin_unlock_irq(& mdev->req_lock);
#line 4305
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4306
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4307
  return (1);
}
}
#line 4310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4312
  p = (struct p_block_ack *)h;
#line 4313
  tmp = __fswab64(p->sector);
#line 4313
  sector = (sector_t )tmp;
#line 4314
  tmp___0 = __fswab32(p->blksize);
#line 4314
  blksize = (int )tmp___0;
#line 4317
  tmp___1 = __fswab32(p->seq_num);
#line 4317
  update_peer_seq(mdev, tmp___1);
#line 4319
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4320
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4320U);
#line 4321
    atomic_dec(& mdev->rs_pending_cnt);
#line 4321
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4321
    if (tmp___3 < 0) {
#line 4321
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4321
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4321, tmp___2);
    } else {

    }
#line 4322
    return (1);
  } else {

  }
#line 4324
  tmp___4 = __fswab16((int )h->command);
#line 4324
  switch ((int )tmp___4) {
  case 23: ;
#line 4326
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4326);
  } else {

  }
#line 4327
  what = write_acked_by_peer_and_sis;
#line 4328
  goto ldv_45910;
  case 22: ;
#line 4330
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4330);
  } else {

  }
#line 4331
  what = write_acked_by_peer;
#line 4332
  goto ldv_45910;
  case 21: ;
#line 4334
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4334);
  } else {

  }
#line 4335
  what = recv_acked_by_peer;
#line 4336
  goto ldv_45910;
  case 24: ;
#line 4338
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4338);
  } else {

  }
#line 4339
  what = conflict_discarded_by_peer;
#line 4340
  goto ldv_45910;
  default: 
#line 4342
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4342);
#line 4343
  return (0);
  }
  ldv_45910: 
#line 4346
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4346
  return (tmp___5);
}
}
#line 4350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4352
  p = (struct p_block_ack *)h;
#line 4353
  tmp = __fswab64(p->sector);
#line 4353
  sector = (sector_t )tmp;
#line 4355
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4355
  if (tmp___0 != 0) {
#line 4356
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4358
  tmp___1 = __fswab32(p->seq_num);
#line 4358
  update_peer_seq(mdev, tmp___1);
#line 4360
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4361
    tmp___2 = __fswab32(p->blksize);
#line 4361
    size = (int )tmp___2;
#line 4362
    atomic_dec(& mdev->rs_pending_cnt);
#line 4362
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4362
    if (tmp___4 < 0) {
#line 4362
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4362
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4362, tmp___3);
    } else {

    }
#line 4363
    drbd_rs_failed_io(mdev, sector, size);
#line 4364
    return (1);
  } else {

  }
#line 4366
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4366
  return (tmp___5);
}
}
#line 4370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4372
  p = (struct p_block_ack *)h;
#line 4373
  tmp = __fswab64(p->sector);
#line 4373
  sector = (sector_t )tmp;
#line 4375
  tmp___0 = __fswab32(p->seq_num);
#line 4375
  update_peer_seq(mdev, tmp___0);
#line 4376
  tmp___1 = __fswab32(p->blksize);
#line 4376
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4379
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4379
  return (tmp___2);
}
}
#line 4383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4387
  p = (struct p_block_ack *)h;
#line 4389
  tmp = __fswab64(p->sector);
#line 4389
  sector = (sector_t )tmp;
#line 4390
  tmp___0 = __fswab32(p->blksize);
#line 4390
  size = (int )tmp___0;
#line 4392
  tmp___1 = __fswab32(p->seq_num);
#line 4392
  update_peer_seq(mdev, tmp___1);
#line 4394
  atomic_dec(& mdev->rs_pending_cnt);
#line 4394
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4394
  if (tmp___3 < 0) {
#line 4394
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4394
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4394, tmp___2);
  } else {

  }
#line 4396
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4396
  if (tmp___4 != 0) {
#line 4397
    drbd_rs_complete_io(mdev, sector);
#line 4398
    drbd_rs_failed_io(mdev, sector, size);
#line 4399
    put_ldev(mdev);
  } else {

  }
#line 4402
  return (1);
}
}
#line 4405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4407
  p = (struct p_barrier_ack *)h;
#line 4409
  tmp = __fswab32(p->set_size);
#line 4409
  tl_release(mdev, p->barrier, tmp);
#line 4411
  return (1);
}
}
#line 4414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;

  {
#line 4416
  p = (struct p_block_ack *)h;
#line 4421
  tmp = __fswab64(p->sector);
#line 4421
  sector = (sector_t )tmp;
#line 4422
  tmp___0 = __fswab32(p->blksize);
#line 4422
  size = (int )tmp___0;
#line 4424
  tmp___1 = __fswab32(p->seq_num);
#line 4424
  update_peer_seq(mdev, tmp___1);
#line 4426
  tmp___2 = __fswab64(p->block_id);
#line 4426
  if (tmp___2 == 4712ULL) {
#line 4427
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4429
    ov_oos_print(mdev);
  }
#line 4431
  drbd_rs_complete_io(mdev, sector);
#line 4432
  atomic_dec(& mdev->rs_pending_cnt);
#line 4432
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4432
  if (tmp___4 < 0) {
#line 4432
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4432, tmp___3);
  } else {

  }
#line 4434
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4434
  if (mdev->ov_left == 0UL) {
#line 4435
    tmp___5 = kmalloc___1(24UL, 16U);
#line 4435
    w = (struct drbd_work *)tmp___5;
#line 4436
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4437
      w->cb = & w_ov_finished;
#line 4438
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4440
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4441
      ov_oos_print(mdev);
#line 4442
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4445
  return (1);
}
}
#line 4448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_something_to_ignore_m(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 4451
  return (1);
}
}
#line 4459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4461
  asender_tbl[0].pkt_size = 0UL;
#line 4461
  asender_tbl[0].process = 0;
#line 4461
  asender_tbl[1].pkt_size = 0UL;
#line 4461
  asender_tbl[1].process = 0;
#line 4461
  asender_tbl[2].pkt_size = 0UL;
#line 4461
  asender_tbl[2].process = 0;
#line 4461
  asender_tbl[3].pkt_size = 0UL;
#line 4461
  asender_tbl[3].process = 0;
#line 4461
  asender_tbl[4].pkt_size = 0UL;
#line 4461
  asender_tbl[4].process = 0;
#line 4461
  asender_tbl[5].pkt_size = 0UL;
#line 4461
  asender_tbl[5].process = 0;
#line 4461
  asender_tbl[6].pkt_size = 0UL;
#line 4461
  asender_tbl[6].process = 0;
#line 4461
  asender_tbl[7].pkt_size = 0UL;
#line 4461
  asender_tbl[7].process = 0;
#line 4461
  asender_tbl[8].pkt_size = 0UL;
#line 4461
  asender_tbl[8].process = 0;
#line 4461
  asender_tbl[9].pkt_size = 0UL;
#line 4461
  asender_tbl[9].process = 0;
#line 4461
  asender_tbl[10].pkt_size = 0UL;
#line 4461
  asender_tbl[10].process = 0;
#line 4461
  asender_tbl[11].pkt_size = 0UL;
#line 4461
  asender_tbl[11].process = 0;
#line 4461
  asender_tbl[12].pkt_size = 0UL;
#line 4461
  asender_tbl[12].process = 0;
#line 4461
  asender_tbl[13].pkt_size = 0UL;
#line 4461
  asender_tbl[13].process = 0;
#line 4461
  asender_tbl[14].pkt_size = 0UL;
#line 4461
  asender_tbl[14].process = 0;
#line 4461
  asender_tbl[15].pkt_size = 0UL;
#line 4461
  asender_tbl[15].process = 0;
#line 4461
  asender_tbl[16].pkt_size = 0UL;
#line 4461
  asender_tbl[16].process = 0;
#line 4461
  asender_tbl[17].pkt_size = 0UL;
#line 4461
  asender_tbl[17].process = 0;
#line 4461
  asender_tbl[18].pkt_size = 0UL;
#line 4461
  asender_tbl[18].process = 0;
#line 4461
  asender_tbl[19].pkt_size = 8UL;
#line 4461
  asender_tbl[19].process = & got_Ping;
#line 4461
  asender_tbl[20].pkt_size = 8UL;
#line 4461
  asender_tbl[20].process = & got_PingAck;
#line 4461
  asender_tbl[21].pkt_size = 32UL;
#line 4461
  asender_tbl[21].process = & got_BlockAck;
#line 4461
  asender_tbl[22].pkt_size = 32UL;
#line 4461
  asender_tbl[22].process = & got_BlockAck;
#line 4461
  asender_tbl[23].pkt_size = 32UL;
#line 4461
  asender_tbl[23].process = & got_BlockAck;
#line 4461
  asender_tbl[24].pkt_size = 32UL;
#line 4461
  asender_tbl[24].process = & got_BlockAck;
#line 4461
  asender_tbl[25].pkt_size = 32UL;
#line 4461
  asender_tbl[25].process = & got_NegAck;
#line 4461
  asender_tbl[26].pkt_size = 32UL;
#line 4461
  asender_tbl[26].process = & got_NegDReply;
#line 4461
  asender_tbl[27].pkt_size = 32UL;
#line 4461
  asender_tbl[27].process = & got_NegRSDReply;
#line 4461
  asender_tbl[28].pkt_size = 16UL;
#line 4461
  asender_tbl[28].process = & got_BarrierAck;
#line 4461
  asender_tbl[29].pkt_size = 12UL;
#line 4461
  asender_tbl[29].process = & got_RqSReply;
#line 4461
  asender_tbl[30].pkt_size = 0UL;
#line 4461
  asender_tbl[30].process = 0;
#line 4461
  asender_tbl[31].pkt_size = 0UL;
#line 4461
  asender_tbl[31].process = 0;
#line 4461
  asender_tbl[32].pkt_size = 32UL;
#line 4461
  asender_tbl[32].process = & got_OVResult;
#line 4461
  asender_tbl[33].pkt_size = 0UL;
#line 4461
  asender_tbl[33].process = 0;
#line 4461
  asender_tbl[34].pkt_size = 32UL;
#line 4461
  asender_tbl[34].process = & got_IsInSync;
#line 4461
  asender_tbl[35].pkt_size = 0UL;
#line 4461
  asender_tbl[35].process = 0;
#line 4461
  asender_tbl[36].pkt_size = 0UL;
#line 4461
  asender_tbl[36].process = 0;
#line 4461
  asender_tbl[37].pkt_size = 0UL;
#line 4461
  asender_tbl[37].process = 0;
#line 4461
  asender_tbl[38].pkt_size = 0UL;
#line 4461
  asender_tbl[38].process = 0;
#line 4461
  asender_tbl[39].pkt_size = 16UL;
#line 4461
  asender_tbl[39].process = & got_something_to_ignore_m;
#line 4461
  asender_tbl[40].pkt_size = 0UL;
#line 4461
  asender_tbl[40].process = 0;
#line 4481
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4482
    return (0);
  } else {

  }
#line 4483
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u32 tmp___12 ;
  long tmp___13 ;
  __u16 tmp___14 ;
  __u16 tmp___15 ;
  __u32 tmp___16 ;
  long tmp___17 ;
  int _b___0 ;
  int tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4488
  mdev = thi->mdev;
#line 4489
  h = & mdev->meta.rbuf.header;
#line 4490
  cmd = 0;
#line 4493
  buf = (void *)h;
#line 4494
  received = 0;
#line 4495
  expect = 8;
#line 4498
  tmp = mdev_to_minor(mdev);
#line 4498
  tmp___0 = get_current();
#line 4498
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4500
  tmp___1 = get_current();
#line 4500
  tmp___1->policy = 2U;
#line 4501
  tmp___2 = get_current();
#line 4501
  tmp___2->rt_priority = 2U;
#line 4503
  goto ldv_45992;
  ldv_45996: 
#line 4504
  drbd_thread_current_set_cpu(mdev);
#line 4505
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4505
  if (tmp___4 != 0) {
#line 4506
    tmp___3 = drbd_send_ping(mdev);
#line 4506
    _b = tmp___3 == 0;
#line 4506
    if (_b != 0) {
#line 4506
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4506);
    } else {

    }
#line 4506
    if (_b != 0) {
#line 4506
      goto reconnect;
    } else {

    }
#line 4507
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4513
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4513
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4513
    if (tmp___5 > 3) {
#line 4515
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_45991: 
#line 4517
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4518
  tmp___6 = get_current();
#line 4518
  flush_signals(tmp___6);
#line 4519
  tmp___7 = drbd_process_done_ee(mdev);
#line 4519
  if (tmp___7 == 0) {
#line 4520
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "process_done_ee() = NOT_OK\n");
#line 4521
    goto reconnect;
  } else {

  }
#line 4524
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4525
  spin_lock_irq(& mdev->req_lock);
#line 4526
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4527
  spin_unlock_irq(& mdev->req_lock);
#line 4531
  if (empty != 0) {
#line 4532
    goto ldv_45990;
  } else {

  }
#line 4533
  goto ldv_45991;
  ldv_45990: ;
#line 4535
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4536
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4539
  tmp___8 = get_current();
#line 4539
  tmp___9 = signal_pending(tmp___8);
#line 4539
  if (tmp___9 != 0) {
#line 4540
    goto ldv_45992;
  } else {

  }
#line 4542
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4544
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4546
  tmp___10 = get_current();
#line 4546
  flush_signals(tmp___10);
#line 4558
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4558
  if (tmp___11 != 0L) {
#line 4559
    received = received + rv;
#line 4560
    buf = buf + (unsigned long )rv;
  } else
#line 4561
  if (rv == 0) {
#line 4562
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4563
    goto reconnect;
  } else
#line 4564
  if (rv == -11) {
#line 4565
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4567
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4568
      goto reconnect;
    } else {

    }
#line 4570
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4571
    goto ldv_45992;
  } else
#line 4572
  if (rv == -4) {
#line 4573
    goto ldv_45992;
  } else {
#line 4575
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4576
    goto reconnect;
  }
#line 4579
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4580
    tmp___13 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4580
    if (tmp___13 != 0L) {
#line 4581
      tmp___12 = __fswab32(h->magic);
#line 4581
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___12, (int )h->command, (int )h->length);
#line 4584
      goto reconnect;
    } else {

    }
#line 4586
    tmp___14 = __fswab16((int )h->command);
#line 4586
    cmd = get_asender_cmd((int )tmp___14);
#line 4587
    tmp___15 = __fswab16((int )h->length);
#line 4587
    len = (int )tmp___15;
#line 4588
    tmp___17 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4588
    if (tmp___17 != 0L) {
#line 4589
      tmp___16 = __fswab32(h->magic);
#line 4589
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___16, (int )h->command, (int )h->length);
#line 4592
      goto disconnect;
    } else {

    }
#line 4594
    expect = (int )cmd->pkt_size;
#line 4595
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4595
    if (_b___0 != 0) {
#line 4595
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4595);
    } else {

    }
#line 4595
    if (_b___0 != 0) {
#line 4596
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4598
  if (received == expect) {
#line 4599
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4599
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4599);
    } else {

    }
#line 4600
    tmp___18 = (*(cmd->process))(mdev, h);
#line 4600
    if (tmp___18 == 0) {
#line 4601
      goto reconnect;
    } else {

    }
#line 4603
    buf = (void *)h;
#line 4604
    received = 0;
#line 4605
    expect = 8;
#line 4606
    cmd = 0;
  } else {

  }
  ldv_45992: 
#line 4503
  tmp___19 = get_t_state(thi);
#line 4503
  if ((unsigned int )tmp___19 == 1U) {
#line 4504
    goto ldv_45996;
  } else {

  }

#line 4610
  if (0) {
    reconnect: 
#line 4612
    val.i = 0U;
#line 4612
    val.ldv_35127.conn = 5U;
#line 4612
    mask.i = 0U;
#line 4612
    mask.ldv_35127.conn = 31U;
#line 4612
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4614
  if (0) {
    disconnect: 
#line 4616
    val___0.i = 0U;
#line 4616
    val___0.ldv_35127.conn = 1U;
#line 4616
    mask___0.i = 0U;
#line 4616
    mask___0.ldv_35127.conn = 31U;
#line 4616
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4618
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4620
  if ((int )mdev->state.ldv_35127.conn > 9) {
#line 4620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4620);
  } else {

  }
#line 4621
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4623
  return (0);
}
}
#line 4663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4675
  LDV_IN_INTERRUPT = 1;
#line 4684
  ldv_initialize();
#line 4686
  goto ldv_46025;
  ldv_46024: 
#line 4689
  tmp = nondet_int();
#line 4689
  switch (tmp) {
  default: ;
#line 4691
  goto ldv_46023;
  }
  ldv_46023: ;
  ldv_46025: 
#line 4686
  tmp___0 = nondet_int();
#line 4686
  if (tmp___0 != 0) {
#line 4687
    goto ldv_46024;
  } else {

  }


#line 4700
  ldv_check_final_state();
#line 4703
  return;
}
}
#line 4707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4712
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4714
  mutex_lock(ldv_func_arg1);
#line 4715
  return;
}
}
#line 4717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4722
  tmp = mutex_trylock(ldv_func_arg1);
#line 4722
  ldv_func_res = tmp;
#line 4724
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4724
  return (tmp___0);
#line 4726
  return (ldv_func_res);
}
}
#line 4729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4734
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4736
  mutex_unlock(ldv_func_arg1);
#line 4737
  return;
}
}
#line 4739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4744
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4746
  mutex_lock(ldv_func_arg1);
#line 4747
  return;
}
}
#line 4749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4754
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4756
  mutex_unlock(ldv_func_arg1);
#line 4757
  return;
}
}
#line 4759 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4764
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4766
  mutex_unlock(ldv_func_arg1);
#line 4767
  return;
}
}
#line 4769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4774
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4774
  ldv_func_res = tmp;
#line 4776
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4776
  return (tmp___0);
#line 4778
  return (ldv_func_res);
}
}
#line 4781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4786
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4788
  mutex_unlock(ldv_func_arg1);
#line 4789
  return;
}
}
#line 4791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4796
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4798
  mutex_unlock(ldv_func_arg1);
#line 4799
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 594 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 596
  __hlist_del(n);
#line 597
  n->next = 0xdead000000100100UL;
#line 598
  n->pprev = 0xdead000000200200UL;
#line 599
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 304 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 308
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 104 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 322 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 324
  rcu_read_lock_sched_notrace();
#line 326
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 328
  return;
}
}
#line 344 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 346
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 348
  rcu_read_lock_sched_notrace();
#line 349
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11975: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_11975;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___2(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 229
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 704 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1141
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1391
mempool_t *drbd_request_mempool ;
#line 1407
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1409
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43364;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35127.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35127.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43364;
  }
  ldv_43364: ;
#line 1730
  return;
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1957
  atomic_inc(& mdev->ap_pending_cnt);
#line 1958
  return;
}
}
#line 2109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2111
  mxb = 1000000;
#line 2112
  tmp = get_net_conf(mdev);
#line 2112
  if (tmp != 0) {
#line 2113
    mxb = (mdev->net_conf)->max_buffers;
#line 2114
    put_net_conf(mdev);
  } else {

  }
#line 2116
  return (mxb);
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35127.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_43523;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_43523: ;
#line 2160
  switch ((unsigned int )s.ldv_35127.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_43543;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_43543: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2215
  tmp = get_current();
#line 2215
  wait.flags = 0U;
#line 2215
  wait.private = (void *)tmp;
#line 2215
  wait.func = & autoremove_wake_function;
#line 2215
  wait.task_list.next = & wait.task_list;
#line 2215
  wait.task_list.prev = & wait.task_list;
#line 2225
  spin_lock_irq(& mdev->req_lock);
#line 2226
  goto ldv_43559;
  ldv_43558: 
#line 2227
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2228
  spin_unlock_irq(& mdev->req_lock);
#line 2229
  schedule();
#line 2230
  finish_wait(& mdev->misc_wait, & wait);
#line 2231
  spin_lock_irq(& mdev->req_lock);
  ldv_43559: 
#line 2226
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2226
  if (tmp___0 == 0) {
#line 2227
    goto ldv_43558;
  } else {

  }
#line 2233
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2234
  spin_unlock_irq(& mdev->req_lock);
#line 2235
  return;
}
}
#line 2237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2239
  tmp = drbd_get_max_buffers(mdev);
#line 2239
  mxb = tmp;
#line 2240
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2240
  ap_bio = tmp___0;
#line 2242
  if (ap_bio < 0) {
#line 2242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2242);
  } else {

  }
#line 2246
  if (ap_bio < mxb) {
#line 2247
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2248
  if (ap_bio == 0) {
#line 2248
    tmp___2 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2248
    if (tmp___2 != 0) {
#line 2249
      tmp___1 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2249
      if (tmp___1 == 0) {
#line 2250
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2251
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_43667: ;
#line 208
    goto ldv_43667;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_43672: ;
#line 217
    goto ldv_43672;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 251
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 251
  req = (struct drbd_request *)tmp;
#line 253
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 253
  if (tmp___0 != 0L) {
#line 254
    bio = bio_clone(bio_src, 16U);
#line 256
    req->rq_state = 0UL;
#line 257
    req->mdev = mdev;
#line 258
    req->master_bio = bio_src;
#line 259
    req->private_bio = bio;
#line 260
    req->epoch = 0U;
#line 261
    req->sector = bio->bi_sector;
#line 262
    req->size = bio->bi_size;
#line 263
    req->start_time = jiffies;
#line 264
    INIT_HLIST_NODE(& req->colision);
#line 265
    INIT_LIST_HEAD(& req->tl_requests);
#line 266
    INIT_LIST_HEAD(& req->w.list);
#line 268
    bio->bi_private = (void *)req;
#line 269
    bio->bi_end_io = & drbd_endio_pri;
#line 270
    bio->bi_next = 0;
  } else {

  }
#line 272
  return (req);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 277
  mempool_free((void *)req, drbd_request_mempool);
#line 278
  return;
}
}
#line 293
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 84
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 86
  rcu_read_lock();
#line 86
  switch (4UL) {
  case 1UL: 
#line 86
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_43741;
  case 2UL: 
#line 86
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_43741;
  case 4UL: 
#line 86
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_43741;
  case 8UL: 
#line 86
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_43741;
  default: 
#line 86
  __bad_percpu_size();
  }
  ldv_43741: 
#line 86
  cpu = pfo_ret__;
#line 87
  __vpp_verify = 0;
#line 87
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 87
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 87
  if ((mdev->vdisk)->part0.partno != 0) {
#line 87
    __vpp_verify___0 = 0;
#line 87
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 87
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 87
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 88
  __vpp_verify___1 = 0;
#line 88
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 88
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 88
  if ((mdev->vdisk)->part0.partno != 0) {
#line 88
    __vpp_verify___2 = 0;
#line 88
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 88
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 88
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 89
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 90
  rcu_read_unlock();
#line 91
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 96
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 97
  duration = (unsigned long )jiffies - req->start_time;
#line 99
  rcu_read_lock();
#line 99
  switch (4UL) {
  case 1UL: 
#line 99
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_43774;
  case 2UL: 
#line 99
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_43774;
  case 4UL: 
#line 99
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_43774;
  case 8UL: 
#line 99
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_43774;
  default: 
#line 99
  __bad_percpu_size();
  }
  ldv_43774: 
#line 99
  cpu = pfo_ret__;
#line 100
  __vpp_verify = 0;
#line 100
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 100
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 100
  if ((mdev->vdisk)->part0.partno != 0) {
#line 100
    __vpp_verify___0 = 0;
#line 100
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 100
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 100
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 101
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 102
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 103
  rcu_read_unlock();
#line 104
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 108
  s = req->rq_state;
#line 112
  if ((int )rw == 1) {
#line 119
    list_del(& req->tl_requests);
#line 124
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 125
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             125U);
    } else {

    }
#line 127
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 128
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         128U);
    } else {

    }
#line 140
    if ((s & 7UL) != 0UL) {
#line 141
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 141
      if (tmp___0 != 0) {
#line 142
        drbd_al_complete_io(mdev, req->sector);
#line 143
        put_ldev(mdev);
      } else {
#line 144
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 144
        if (tmp != 0) {
#line 145
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 152
  drbd_req_free(req);
#line 153
  return;
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 164
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 164
  if (tmp != 0) {
#line 165
    return;
  } else {

  }
#line 167
  b = mdev->newest_tle;
#line 168
  b->w.cb = & w_send_barrier;
#line 173
  inc_ap_pending(mdev);
#line 174
  drbd_queue_work(& mdev->data.work, & b->w);
#line 175
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 176
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 181
  s = req->rq_state;
#line 189
  if ((int )mdev->state.ldv_35127.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 191
    queue_barrier(mdev);
  } else {

  }
#line 196
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 197
    sector = req->sector;
#line 198
    size = (int const   )req->size;
#line 204
    slot = tl_hash_slot___0(mdev, sector);
#line 205
    n = slot->first;
#line 205
    goto ldv_43817;
    ldv_43816: 
#line 206
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 206
    if (tmp != 0) {
#line 207
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 205
    n = n->next;
    ldv_43817: ;
#line 205
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 205
      __builtin_prefetch((void const   *)n->next);
#line 205
      if (1 != 0) {
#line 205
        __mptr = (struct hlist_node  const  *)n;
#line 205
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 205
        if (1 != 0) {
#line 206
          goto ldv_43816;
        } else {
#line 208
          goto ldv_43818;
        }
      } else {
#line 208
        goto ldv_43818;
      }
    } else {

    }
    ldv_43818: 
#line 228
    slot = ee_hash_slot___0(mdev, req->sector);
#line 229
    n = slot->first;
#line 229
    goto ldv_43825;
    ldv_43824: 
#line 230
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 230
    if (tmp___0 != 0) {
#line 231
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 232
      goto ldv_43823;
    } else {

    }
#line 229
    n = n->next;
    ldv_43825: ;
#line 229
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 229
      __builtin_prefetch((void const   *)n->next);
#line 229
      if (1 != 0) {
#line 229
        __mptr___0 = (struct hlist_node  const  *)n;
#line 229
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 229
        if (1 != 0) {
#line 230
          goto ldv_43824;
        } else {
#line 232
          goto ldv_43823;
        }
      } else {
#line 232
        goto ldv_43823;
      }
    } else {

    }
    ldv_43823: ;
  } else {

  }
#line 235
  return;
}
}
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 242
  bio_endio(m->bio, m->error);
#line 243
  dec_ap_bio(mdev);
#line 244
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 254
  s = req->rq_state;
#line 255
  mdev = req->mdev;
#line 257
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 268
  if ((s & 16UL) != 0UL) {
#line 269
    return;
  } else {

  }
#line 270
  if ((s & 8UL) != 0UL) {
#line 271
    return;
  } else {

  }
#line 272
  if ((int )s & 1) {
#line 273
    return;
  } else {

  }
#line 275
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 297
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 298
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 298
    error = (int )tmp;
#line 302
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 302
    if (tmp___0 == 0) {
#line 303
      hlist_del(& req->colision);
    } else
#line 305
    if ((s & 504UL) != 0UL) {
#line 305
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              305);
    } else {

    }
#line 308
    if (rw == 1) {
#line 309
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 312
    _drbd_end_io_acct(mdev, req);
#line 314
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 315
    m->bio = req->master_bio;
#line 316
    req->master_bio = 0;
  } else {

  }
#line 319
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 324
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 325
  return;
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 355
  mdev = req->mdev;
#line 356
  sector = req->sector;
#line 357
  size = (int const   )req->size;
#line 363
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 363
  if (tmp == 0) {
#line 363
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            363);
  } else {

  }
#line 365
  tmp___0 = get_net_conf(mdev);
#line 365
  if (tmp___0 == 0) {
#line 366
    return (0);
  } else {

  }
#line 369
  _b = mdev->tl_hash_s == 0U;
#line 369
  if (_b != 0) {
#line 369
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            369);
  } else {

  }
#line 369
  if (_b != 0) {
#line 370
    goto out_no_conflict;
  } else {

  }
#line 371
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 371
  if (tmp___1 != 0L) {
#line 371
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (371), "i" (12UL));
    ldv_43853: ;
#line 371
    goto ldv_43853;
  } else {

  }
#line 374
  slot = tl_hash_slot___0(mdev, sector);
#line 375
  n = slot->first;
#line 375
  goto ldv_43860;
  ldv_43859: 
#line 376
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 376
  if (tmp___4 != 0) {
#line 377
    tmp___2 = get_current();
#line 377
    tmp___3 = get_current();
#line 377
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 383
    goto out_conflict;
  } else {

  }
#line 375
  n = n->next;
  ldv_43860: ;
#line 375
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 375
    __builtin_prefetch((void const   *)n->next);
#line 375
    if (1 != 0) {
#line 375
      __mptr = (struct hlist_node  const  *)n;
#line 375
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 375
      if (1 != 0) {
#line 376
        goto ldv_43859;
      } else {
#line 378
        goto ldv_43861;
      }
    } else {
#line 378
      goto ldv_43861;
    }
  } else {

  }
  ldv_43861: ;
#line 387
  if (mdev->ee_hash_s != 0U) {
#line 389
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 389
    if (tmp___5 != 0L) {
#line 389
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (389), "i" (12UL));
      ldv_43862: ;
#line 389
      goto ldv_43862;
    } else {

    }
#line 392
    slot = ee_hash_slot___0(mdev, sector);
#line 393
    n = slot->first;
#line 393
    goto ldv_43868;
    ldv_43867: 
#line 394
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 394
    if (tmp___8 != 0) {
#line 395
      tmp___6 = get_current();
#line 395
      tmp___7 = get_current();
#line 395
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 401
      goto out_conflict;
    } else {

    }
#line 393
    n = n->next;
    ldv_43868: ;
#line 393
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 393
      __builtin_prefetch((void const   *)n->next);
#line 393
      if (1 != 0) {
#line 393
        __mptr___0 = (struct hlist_node  const  *)n;
#line 393
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 393
        if (1 != 0) {
#line 394
          goto ldv_43867;
        } else {
#line 396
          goto ldv_43869;
        }
      } else {
#line 396
        goto ldv_43869;
      }
    } else {

    }
    ldv_43869: ;
  } else {

  }
  out_no_conflict: 
#line 410
  put_net_conf(mdev);
#line 411
  return (0);
  out_conflict: 
#line 414
  put_net_conf(mdev);
#line 415
  return (1);
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 433
  mdev = req->mdev;
#line 434
  m->bio = 0;
#line 436
  switch ((unsigned int )what) {
  default: 
#line 438
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          438);
#line 439
  goto ldv_43877;
  case 1U: ;
#line 450
  if ((req->rq_state & 504UL) != 0UL) {
#line 450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            450);
  } else {

  }
#line 451
  req->rq_state = req->rq_state | 8UL;
#line 452
  inc_ap_pending(mdev);
#line 453
  goto ldv_43877;
  case 2U: ;
#line 457
  if ((req->rq_state & 7UL) != 0UL) {
#line 457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            457);
  } else {

  }
#line 458
  req->rq_state = req->rq_state | 1UL;
#line 459
  goto ldv_43877;
  case 20U: ;
#line 462
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 463
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 465
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 467
  req->rq_state = req->rq_state | 6UL;
#line 468
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 470
  _req_may_be_done(req, m);
#line 471
  put_ldev(mdev);
#line 472
  goto ldv_43877;
  case 19U: 
#line 475
  req->rq_state = req->rq_state | 2UL;
#line 476
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 478
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 479
  _req_may_be_done(req, m);
#line 480
  put_ldev(mdev);
#line 481
  goto ldv_43877;
  case 18U: 
#line 485
  req->rq_state = req->rq_state | 2UL;
#line 486
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 487
  _req_may_be_done(req, m);
#line 488
  put_ldev(mdev);
#line 489
  goto ldv_43877;
  case 17U: 
#line 492
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         492U);
#line 494
  req->rq_state = req->rq_state | 2UL;
#line 495
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 497
  if ((req->rq_state & 504UL) != 0UL) {
#line 497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            497);
  } else {

  }
#line 499
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 500
  put_ldev(mdev);
#line 504
  if (*((unsigned int *)mdev + 455UL) != 65536U) {
#line 505
    _req_may_be_done(req, m);
#line 506
    goto ldv_43877;
  } else {

  }
#line 510
  req->rq_state = req->rq_state | 8UL;
#line 511
  inc_ap_pending(mdev);
  case 4U: 
#line 524
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 524
  hlist_add_head(& req->colision, tmp);
#line 526
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 528
  if ((req->rq_state & 8UL) == 0UL) {
#line 528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            528);
  } else {

  }
#line 529
  req->rq_state = req->rq_state | 16UL;
#line 530
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 533
  drbd_queue_work(& mdev->data.work, & req->w);
#line 534
  goto ldv_43877;
  case 3U: 
#line 540
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 540
  hlist_add_head(& req->colision, tmp___0);
#line 560
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 564
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 564
  if (tmp___1 != 0) {
#line 564
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            564);
  } else {

  }
#line 566
  req->epoch = (mdev->newest_tle)->br_number;
#line 567
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 571
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 574
  if ((req->rq_state & 8UL) == 0UL) {
#line 574
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            574);
  } else {

  }
#line 575
  req->rq_state = req->rq_state | 16UL;
#line 576
  req->w.cb = & w_send_dblock;
#line 577
  drbd_queue_work(& mdev->data.work, & req->w);
#line 580
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 581
    queue_barrier(mdev);
  } else {

  }
#line 583
  goto ldv_43877;
  case 5U: ;
  case 6U: 
#line 590
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 593
  _req_may_be_done(req, m);
#line 594
  goto ldv_43877;
  case 7U: ;
#line 598
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 602
    if ((req->rq_state & 8UL) != 0UL) {
#line 603
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 603
      if (tmp___2 != 0) {
#line 603
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 603
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 603
      if (tmp___4 < 0) {
#line 603
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 603
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 603, tmp___3);
      } else {

      }
#line 604
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 605
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 611
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 612
  req->rq_state = req->rq_state | 32UL;
#line 618
  _req_may_be_done(req, m);
#line 619
  goto ldv_43877;
  case 9U: 
#line 622
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 627
  if ((req->rq_state & 8UL) != 0UL) {
#line 628
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 628
    if (tmp___5 != 0) {
#line 628
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 628
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 628
    if (tmp___7 < 0) {
#line 628
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 628
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 628, tmp___6);
    } else {

    }
  } else {

  }
#line 629
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 630
  req->rq_state = req->rq_state | 64UL;
#line 633
  if ((req->rq_state & 16UL) == 0UL) {
#line 634
    _req_may_be_done(req, m);
  } else {

  }
#line 635
  goto ldv_43877;
  case 12U: 
#line 638
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 643
  if ((unsigned int )what == 13U) {
#line 644
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 647
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 665
  req->rq_state = req->rq_state | 128UL;
#line 666
  if ((req->rq_state & 8UL) == 0UL) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            666);
  } else {

  }
#line 667
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 667
  if (tmp___8 != 0) {
#line 667
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 667
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 667
  if (tmp___10 < 0) {
#line 667
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 667
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 667, tmp___9);
  } else {

  }
#line 668
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 669
  _req_may_be_done(req, m);
#line 670
  goto ldv_43877;
  case 14U: ;
#line 674
  if ((req->rq_state & 8UL) != 0UL) {
#line 675
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 675
    if (tmp___11 != 0) {
#line 675
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 675
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 675
    if (tmp___13 < 0) {
#line 675
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 675
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 675, tmp___12);
    } else {

    }
  } else {

  }
#line 676
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 678
  req->rq_state = req->rq_state | 64UL;
#line 679
  _req_may_be_done(req, m);
#line 681
  goto ldv_43877;
  case 15U: ;
#line 684
  if ((req->rq_state & 8UL) != 0UL) {
#line 688
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 689
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 691
  if ((req->rq_state & 32UL) == 0UL) {
#line 691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            691);
  } else {

  }
#line 692
  req->rq_state = req->rq_state | 64UL;
#line 693
  _req_may_be_done(req, m);
#line 694
  goto ldv_43877;
  case 16U: ;
#line 697
  if ((req->rq_state & 8UL) == 0UL) {
#line 697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            697);
  } else {

  }
#line 698
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 698
  if (tmp___14 != 0) {
#line 698
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 698
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 698
  if (tmp___16 < 0) {
#line 698
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 698
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 698, tmp___15);
  } else {

  }
#line 699
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 700
  req->rq_state = req->rq_state | 192UL;
#line 701
  _req_may_be_done(req, m);
#line 702
  goto ldv_43877;
  }
  ldv_43877: ;
#line 704
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 718
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 719
    return (1);
  } else {

  }
#line 720
  if ((int )mdev->state.ldv_35127.disk > 4) {
#line 721
    return (0);
  } else {

  }
#line 722
  if ((int )mdev->state.ldv_35127.disk <= 3) {
#line 723
    return (0);
  } else {

  }
#line 725
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 726
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 728
  if (sector >= nr_sectors) {
#line 728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            728);
  } else {

  }
#line 729
  if (esector >= nr_sectors) {
#line 729
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            729);
  } else {

  }
#line 731
  sbnr = sector >> 3;
#line 732
  ebnr = esector >> 3;
#line 734
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 734
  return (tmp == 0);
}
}
#line 737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 739
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 740
  size = (int const   )bio->bi_size;
#line 741
  sector = bio->bi_sector;
#line 742
  b = 0;
#line 745
  err = -5;
#line 746
  ret = 0;
#line 749
  req = drbd_req_new(mdev, bio);
#line 750
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 751
    dec_ap_bio(mdev);
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 755
    bio_endio(bio, -12);
#line 756
    return (0);
  } else {

  }
#line 759
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 760
  if (local == 0) {
#line 761
    bio_put(req->private_bio);
#line 762
    req->private_bio = 0;
  } else {

  }
#line 764
  if (rw == 1) {
#line 765
    remote = 1;
  } else {
#line 768
    if (local != 0) {
#line 769
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 769
      if (tmp == 0) {
#line 775
        local = 0;
#line 776
        bio_put(req->private_bio);
#line 777
        req->private_bio = 0;
#line 778
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 781
    remote = local == 0 && (int )mdev->state.ldv_35127.pdsk > 7;
  }
#line 792
  if ((rw == 1024 && (int )mdev->state.ldv_35127.disk > 3) && local == 0) {
#line 793
    err = -11;
#line 794
    goto fail_and_free_req;
  } else {

  }
#line 802
  if (rw == 1 && local != 0) {
#line 803
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 805
  remote = remote != 0 && (*((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35127.conn > 9));
#line 809
  if ((local == 0 && remote == 0) && (unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 811
    goto fail_free_complete;
  } else {

  }
#line 820
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 820
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 820
    if (tmp___1 != 0) {
      allocate_barrier: 
#line 824
      tmp___0 = kmalloc___2(56UL, 16U);
#line 824
      b = (struct drbd_tl_epoch *)tmp___0;
#line 825
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 826
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 827
        err = -12;
#line 828
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 833
  spin_lock_irq(& mdev->req_lock);
#line 835
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 840
    ret = 1;
#line 841
    spin_unlock_irq(& mdev->req_lock);
#line 842
    goto fail_free_complete;
  } else {

  }
#line 845
  if (remote != 0) {
#line 846
    remote = *((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35127.conn > 9);
#line 849
    if (remote == 0) {
#line 850
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 851
    if (local == 0 && remote == 0) {
#line 852
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 853
      spin_unlock_irq(& mdev->req_lock);
#line 854
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 858
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 859
    mdev->unused_spare_tle = b;
#line 860
    b = 0;
  } else {

  }
#line 862
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 862
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 862
    if (tmp___2 != 0) {
#line 867
      spin_unlock_irq(& mdev->req_lock);
#line 868
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 873
  _drbd_start_io_acct(mdev, req, bio);
#line 885
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 885
    tmp___4 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 885
    if (tmp___4 != 0) {
#line 887
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 888
      mdev->unused_spare_tle = 0;
    } else {
#line 885
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 890
  if (remote != 0 && rw == 1) {
#line 890
    tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 890
    if (tmp___3 != 0) {
#line 890
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              891);
    } else {

    }
  } else {

  }
#line 909
  if (remote != 0) {
#line 910
    _req_mod(req, to_be_send);
  } else {

  }
#line 911
  if (local != 0) {
#line 912
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 917
  if (rw == 1) {
#line 917
    tmp___8 = _req_conflicts(req);
#line 917
    if (tmp___8 != 0) {
#line 924
      if (local != 0) {
#line 925
        bio_put(req->private_bio);
#line 926
        req->private_bio = 0;
#line 927
        drbd_al_complete_io(mdev, req->sector);
#line 928
        put_ldev(mdev);
#line 929
        local = 0;
      } else {

      }
#line 931
      if (remote != 0) {
#line 932
        tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 932
        if (tmp___5 != 0) {
#line 932
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 932
        tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 932
        if (tmp___7 < 0) {
#line 932
          tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 932
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                  "drbd_make_request_common", 932, tmp___6);
        } else {

        }
      } else {

      }
#line 933
      _drbd_end_io_acct(mdev, req);
#line 935
      bio_endio(req->master_bio, 0);
#line 936
      req->master_bio = 0;
#line 937
      dec_ap_bio(mdev);
#line 938
      drbd_req_free(req);
#line 939
      remote = 0;
    } else {

    }
  } else {

  }
#line 944
  if (remote != 0) {
#line 949
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 953
  spin_unlock_irq(& mdev->req_lock);
#line 954
  kfree((void const   *)b);
#line 956
  if (local != 0) {
#line 957
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 959
    tmp___9 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 959
    if (tmp___9 != 0) {
#line 962
      bio_endio(req->private_bio, -5);
    } else {
#line 964
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 969
  drbd_plug_device(mdev);
#line 971
  return (0);
  fail_free_complete: ;
#line 974
  if (rw == 1 && local != 0) {
#line 975
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 977
  if (local != 0) {
#line 978
    bio_put(req->private_bio);
#line 979
    req->private_bio = 0;
#line 980
    put_ldev(mdev);
  } else {

  }
#line 982
  if (ret == 0) {
#line 983
    bio_endio(bio, err);
  } else {

  }
#line 985
  drbd_req_free(req);
#line 986
  dec_ap_bio(mdev);
#line 987
  kfree((void const   *)b);
#line 989
  return (ret);
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 999
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1001
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1001
    if (tmp___1 != 0) {
#line 1002
      tmp = get_current();
#line 1002
      tmp___0 = get_current();
#line 1002
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1008
    return (1);
  } else {

  }
#line 1020
  if ((int )mdev->state.ldv_35127.disk <= 7 && (int )mdev->state.ldv_35127.pdsk <= 7) {
#line 1021
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1021
    if (tmp___2 != 0) {
#line 1022
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sorry, I have no access to good data anymore.\n");
    } else {

    }
#line 1023
    return (1);
  } else {

  }
#line 1026
  return (0);
}
}
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1032
  mdev = (struct drbd_conf *)q->queuedata;
#line 1034
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1034
  if (tmp != 0) {
#line 1035
    bio_endio(bio, -1);
#line 1036
    return (0);
  } else {

  }
#line 1047
  tmp___0 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 1047
  if (tmp___0 != 0L) {
#line 1047
    tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1047
    if (tmp___1 != 0) {
#line 1049
      bio_endio(bio, -95);
#line 1050
      return (0);
    } else {

    }
  } else {

  }
#line 1056
  if (bio->bi_size == 0U) {
#line 1056
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1056);
  } else {

  }
#line 1057
  if ((bio->bi_size & 511U) != 0U) {
#line 1057
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1057);
  } else {

  }
#line 1058
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1058
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1058);
  } else {

  }
#line 1062
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1063
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1065
  tmp___3 = __builtin_expect(s_enr == e_enr, 1L);
#line 1065
  if (tmp___3 != 0L) {
#line 1066
    inc_ap_bio(mdev, 1);
#line 1067
    tmp___2 = drbd_make_request_common(mdev, bio);
#line 1067
    return (tmp___2);
  } else {

  }
#line 1072
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1074
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1078
    bio_endio(bio, -22);
  } else {
#line 1090
    sect = bio->bi_sector;
#line 1091
    sps = 64;
#line 1092
    mask = sps + -1;
#line 1093
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1094
    bp = bio_split(bio, (int )first_sectors);
#line 1105
    inc_ap_bio(mdev, 3);
#line 1107
    if (s_enr + 1U != e_enr) {
#line 1107
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1107);
    } else {

    }
#line 1109
    goto ldv_43961;
    ldv_43960: 
#line 1110
    inc_ap_bio(mdev, 1);
    ldv_43961: 
#line 1109
    tmp___4 = drbd_make_request_common(mdev, & bp->bio1);
#line 1109
    if (tmp___4 != 0) {
#line 1110
      goto ldv_43960;
    } else {

    }

#line 1112
    goto ldv_43964;
    ldv_43963: 
#line 1113
    inc_ap_bio(mdev, 1);
    ldv_43964: 
#line 1112
    tmp___5 = drbd_make_request_common(mdev, & bp->bio2);
#line 1112
    if (tmp___5 != 0) {
#line 1113
      goto ldv_43963;
    } else {

    }
#line 1115
    dec_ap_bio(mdev);
#line 1117
    bio_pair_release(bp);
  }
#line 1119
  return (0);
}
}
#line 1135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1137
  mdev = (struct drbd_conf *)q->queuedata;
#line 1138
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1140
  bio_size = bvm->bi_size;
#line 1143
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1145
  if (limit < 0) {
#line 1146
    limit = 0;
  } else {

  }
#line 1147
  if (bio_size == 0U) {
#line 1148
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1149
      limit = (int )bvec->bv_len;
    } else
#line 1150
    if (limit != 0) {
#line 1150
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1150
      if (tmp != 0) {
#line 1151
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1153
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1154
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1155
          _min1 = limit;
#line 1155
          _min2 = backing_limit;
#line 1155
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1157
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1159
  return (limit);
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1167
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1169
  mutex_lock(ldv_func_arg1);
#line 1170
  return;
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1177
  tmp = mutex_trylock(ldv_func_arg1);
#line 1177
  ldv_func_res = tmp;
#line 1179
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1179
  return (tmp___0);
#line 1181
  return (ldv_func_res);
}
}
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1189
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1191
  mutex_unlock(ldv_func_arg1);
#line 1192
  return;
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1199
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1201
  mutex_lock(ldv_func_arg1);
#line 1202
  return;
}
}
#line 1204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1209
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1211
  mutex_unlock(ldv_func_arg1);
#line 1212
  return;
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1219
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1221
  mutex_unlock(ldv_func_arg1);
#line 1222
  return;
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 122
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) ;
#line 154
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 38
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_10993: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_10993;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___3(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___3(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 315 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 317
  page = compound_head(page);
#line 318
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 318
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 318
  if (tmp___0 != 0L) {
#line 318
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (318), "i" (12UL));
    ldv_16245: ;
#line 318
    goto ldv_16245;
  } else {

  }
#line 319
  atomic_inc(& page->_count);
#line 320
  return;
}
}
#line 982 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 984
  retval = 512;
#line 986
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 987
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 989
  return ((unsigned short )retval);
}
}
#line 992 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 994
  tmp = bdev_get_queue(bdev);
#line 994
  tmp___0 = queue_logical_block_size(tmp);
#line 994
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1551 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1560
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1561
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1562
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1570
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43397;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35127.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35127.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43397;
  }
  ldv_43397: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 124
  md_io.mdev = mdev;
#line 125
  init_completion(& md_io.event);
#line 126
  md_io.error = 0;
#line 128
  if (rw & 1) {
#line 128
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 128
    if (tmp == 0) {
#line 129
      rw = rw | 16;
    } else {

    }
  } else {

  }
#line 130
  rw = rw | 544;
  retry: 
#line 133
  bio = bio_alloc(16U, 1);
#line 134
  bio->bi_bdev = bdev->md_bdev;
#line 135
  bio->bi_sector = sector;
#line 136
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 136
  ok = tmp___0 == size;
#line 137
  if (ok == 0) {
#line 138
    goto out;
  } else {

  }
#line 139
  bio->bi_private = (void *)(& md_io);
#line 140
  bio->bi_end_io = & drbd_md_io_complete;
#line 141
  bio->bi_rw = (unsigned long )rw;
#line 143
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 143
  if (tmp___1 != 0) {
#line 144
    bio_endio(bio, -5);
  } else {
#line 146
    submit_bio(rw, bio);
  }
#line 147
  wait_for_completion(& md_io.event);
#line 148
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 153
  tmp___2 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 153
  if (tmp___2 != 0L) {
#line 153
    tmp___3 = __builtin_expect(ok == 0, 0L);
#line 153
    if (tmp___3 != 0L) {
#line 155
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Barriers not supported on meta data device - disabling\n");
#line 156
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 157
      rw = rw & -17;
#line 158
      bio_put(bio);
#line 159
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 162
  bio_put(bio);
#line 163
  return (ok);
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 170
  offset = 0;
#line 171
  iop = mdev->md_io_page;
#line 173
  tmp = ldv_mutex_is_locked_99(& mdev->md_io_mutex);
#line 173
  if (tmp == 0) {
#line 173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            173);
  } else {

  }
#line 175
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 175
  if (tmp___0 != 0L) {
#line 175
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (175), "i" (12UL));
    ldv_43712: ;
#line 175
    goto ldv_43712;
  } else {

  }
#line 177
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 177
  logical_block_size = (int )tmp___1;
#line 178
  if (logical_block_size == 0) {
#line 179
    logical_block_size = 512;
  } else {

  }
#line 182
  if (logical_block_size != 512) {
#line 183
    mask = logical_block_size / 512 + -1;
#line 184
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 184
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              184);
    } else {

    }
#line 185
    if ((mask + 1) * 512 != logical_block_size) {
#line 185
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              185);
    } else {

    }
#line 186
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 187
    sector = (sector_t )(~ mask) & sector;
#line 188
    iop = mdev->md_io_tmpp;
#line 190
    if (rw & 1) {
#line 193
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 193
      p = tmp___2;
#line 194
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 194
      hp = tmp___3;
#line 196
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 199
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 199
      if (tmp___4 != 0L) {
#line 200
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 203
        return (0);
      } else {

      }
#line 206
      __len = 512UL;
#line 206
      if (__len > 63UL) {
#line 206
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 206
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 210
  tmp___7 = drbd_md_first_sector(bdev);
#line 210
  if (tmp___7 > sector) {
#line 212
    tmp___5 = get_current();
#line 212
    tmp___6 = get_current();
#line 212
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 210
    tmp___8 = drbd_md_last_sector(bdev);
#line 210
    if (tmp___8 < sector) {
#line 212
      tmp___5 = get_current();
#line 212
      tmp___6 = get_current();
#line 212
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 216
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 217
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 217
  if (tmp___9 != 0L) {
#line 218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 220
    return (0);
  } else {

  }
#line 223
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 224
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 224
    p___0 = tmp___10;
#line 225
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 225
    hp___0 = tmp___11;
#line 227
    __len___0 = 512UL;
#line 227
    if (__len___0 > 63UL) {
#line 227
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 227
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 230
  return (ok);
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 237
  al_flags = 0UL;
#line 239
  spin_lock_irq(& mdev->al_lock);
#line 240
  tmp = lc_find(mdev->resync, enr / 4U);
#line 241
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 241
  if (tmp___1 != 0L) {
#line 242
    __mptr = (struct lc_element  const  *)tmp;
#line 242
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 243
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 243
    if (tmp___0 != 0) {
#line 244
      spin_unlock_irq(& mdev->al_lock);
#line 245
      return (0);
    } else {

    }
  } else {

  }
#line 248
  al_ext = lc_get(mdev->act_log, enr);
#line 249
  al_flags = (mdev->act_log)->flags;
#line 250
  spin_unlock_irq(& mdev->al_lock);
#line 261
  return (al_ext);
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 266
  enr = (unsigned int )(sector >> 13);
#line 270
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 270
  if (tmp <= 0) {
#line 270
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            270);
  } else {

  }
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_43741;
  } else {

  }
#line 272
  tmp___0 = get_current();
#line 272
  __wait.flags = 0U;
#line 272
  __wait.private = (void *)tmp___0;
#line 272
  __wait.func = & autoremove_wake_function;
#line 272
  __wait.task_list.next = & __wait.task_list;
#line 272
  __wait.task_list.prev = & __wait.task_list;
  ldv_43744: 
#line 272
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_43743;
  } else {

  }
#line 272
  schedule();
#line 272
  goto ldv_43744;
  ldv_43743: 
#line 272
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43741: ;
#line 274
  if (al_ext->lc_number != enr) {
#line 281
    init_completion(& al_work.event);
#line 282
    al_work.al_ext = al_ext;
#line 283
    al_work.enr = enr;
#line 284
    al_work.old_enr = al_ext->lc_number;
#line 285
    al_work.w.cb = & w_al_write_transaction;
#line 286
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 287
    wait_for_completion(& al_work.event);
#line 289
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 291
    spin_lock_irq(& mdev->al_lock);
#line 292
    lc_changed(mdev->act_log, al_ext);
#line 293
    spin_unlock_irq(& mdev->al_lock);
#line 294
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 296
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 300
  enr = (unsigned int )(sector >> 13);
#line 304
  tmp = spinlock_check(& mdev->al_lock);
#line 304
  flags = _raw_spin_lock_irqsave(tmp);
#line 306
  extent = lc_find(mdev->act_log, enr);
#line 308
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 309
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 311
    return;
  } else {

  }
#line 314
  tmp___0 = lc_put(mdev->act_log, extent);
#line 314
  if (tmp___0 == 0U) {
#line 315
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 317
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  unsigned int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  int tmp___9 ;

  {
#line 323
  __mptr = (struct drbd_work  const  *)w;
#line 323
  aw = (struct update_al_work *)__mptr;
#line 324
  updated = aw->al_ext;
#line 325
  new_enr = aw->enr;
#line 326
  evicted = aw->old_enr;
#line 331
  xor_sum = 0U;
#line 333
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 333
  if (tmp == 0) {
#line 334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "get_ldev() failed in w_al_write_transaction\n");
#line 335
    complete(& ((struct update_al_work *)w)->event);
#line 336
    return (1);
  } else {

  }
#line 342
  if ((int )mdev->state.ldv_35127.conn <= 9 && evicted != 4294967295U) {
#line 343
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 345
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 346
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 346
  buffer = (struct al_transaction *)tmp___0;
#line 348
  buffer->magic = 1728214147U;
#line 349
  tmp___1 = __fswab32(mdev->al_tr_number);
#line 349
  buffer->tr_number = tmp___1;
#line 351
  tmp___2 = lc_index_of(mdev->act_log, updated);
#line 351
  n = (int )tmp___2;
#line 353
  tmp___3 = __fswab32((__u32 )n);
#line 353
  buffer->updates[0].pos = tmp___3;
#line 354
  tmp___4 = __fswab32(new_enr);
#line 354
  buffer->updates[0].extent = tmp___4;
#line 356
  xor_sum = xor_sum ^ new_enr;
#line 358
  __min1 = 61;
#line 358
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 358
  mx = __min1 < __min2 ? __min1 : __min2;
#line 360
  i = 0;
#line 360
  goto ldv_43778;
  ldv_43777: 
#line 361
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 362
  tmp___5 = lc_element_by_index(mdev->act_log, idx);
#line 362
  extent_nr = tmp___5->lc_number;
#line 363
  tmp___6 = __fswab32(idx);
#line 363
  buffer->updates[i + 1].pos = tmp___6;
#line 364
  tmp___7 = __fswab32(extent_nr);
#line 364
  buffer->updates[i + 1].extent = tmp___7;
#line 365
  xor_sum = xor_sum ^ extent_nr;
#line 360
  i = i + 1;
  ldv_43778: ;
#line 360
  if (i < mx) {
#line 361
    goto ldv_43777;
  } else {

  }

#line 367
  goto ldv_43781;
  ldv_43780: 
#line 368
  buffer->updates[i + 1].pos = 4294967295U;
#line 369
  buffer->updates[i + 1].extent = 4294967295U;
#line 370
  xor_sum = ~ xor_sum;
#line 367
  i = i + 1;
  ldv_43781: ;
#line 367
  if (i <= 60) {
#line 368
    goto ldv_43780;
  } else {

  }
#line 372
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 373
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 374
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 376
  tmp___8 = __fswab32(xor_sum);
#line 376
  buffer->xor_sum = tmp___8;
#line 378
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 381
  tmp___9 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 381
  if (tmp___9 == 0) {
#line 382
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 384
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 384
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 386
    mdev->al_tr_pos = 0;
  } else {

  }
#line 388
  if (mdev->al_tr_pos > 63) {
#line 388
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            388);
  } else {

  }
#line 389
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 391
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 393
  complete(& ((struct update_al_work *)w)->event);
#line 394
  put_ldev(mdev);
#line 396
  return (1);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 415
  xor_sum = 0U;
#line 417
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 421
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 421
  if (tmp == 0) {
#line 422
    return (-1);
  } else {

  }
#line 424
  tmp___0 = __fswab32(b->magic);
#line 424
  rv = tmp___0 == 2205418087U;
#line 426
  i = 0;
#line 426
  goto ldv_43795;
  ldv_43794: 
#line 427
  tmp___1 = __fswab32(b->updates[i].extent);
#line 427
  xor_sum = tmp___1 ^ xor_sum;
#line 426
  i = i + 1;
  ldv_43795: ;
#line 426
  if (i <= 61) {
#line 427
    goto ldv_43794;
  } else {

  }
#line 428
  tmp___2 = __fswab32(b->xor_sum);
#line 428
  rv = (tmp___2 == xor_sum) & rv;
#line 430
  return (rv);
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 446
  active_extents = 0;
#line 447
  transactions = 0;
#line 448
  found_valid = 0;
#line 449
  from = 0;
#line 450
  to = 0;
#line 451
  from_tnr = 0U;
#line 452
  to_tnr = 0U;
#line 455
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 460
  ldv_mutex_lock_102(& mdev->md_io_mutex);
#line 461
  tmp = lowmem_page_address(mdev->md_io_page);
#line 461
  buffer = (struct al_transaction *)tmp;
#line 464
  i = 0;
#line 464
  goto ldv_43815;
  ldv_43814: 
#line 465
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 466
  if (rv == 0) {
#line 467
    goto ldv_43813;
  } else {

  }
#line 468
  if (rv == -1) {
#line 469
    ldv_mutex_unlock_103(& mdev->md_io_mutex);
#line 470
    return (0);
  } else {

  }
#line 472
  tmp___0 = __fswab32(buffer->tr_number);
#line 472
  cnr = tmp___0;
#line 474
  found_valid = found_valid + 1;
#line 474
  if (found_valid == 1) {
#line 475
    from = i;
#line 476
    to = i;
#line 477
    from_tnr = cnr;
#line 478
    to_tnr = cnr;
#line 479
    goto ldv_43813;
  } else {

  }
#line 481
  if ((int )cnr - (int )from_tnr < 0) {
#line 482
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 482
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              482);
    } else {

    }
#line 483
    from = i;
#line 484
    from_tnr = cnr;
  } else {

  }
#line 486
  if ((int )cnr - (int )to_tnr > 0) {
#line 487
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 487
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              487);
    } else {

    }
#line 488
    to = i;
#line 489
    to_tnr = cnr;
  } else {

  }
  ldv_43813: 
#line 464
  i = i + 1;
  ldv_43815: ;
#line 464
  if (i <= mx) {
#line 465
    goto ldv_43814;
  } else {

  }

#line 493
  if (found_valid == 0) {
#line 494
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 495
    ldv_mutex_unlock_104(& mdev->md_io_mutex);
#line 496
    return (1);
  } else {

  }
#line 501
  i = from;
  ldv_43830: 
#line 507
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 508
  _b = rv == 0;
#line 508
  if (_b != 0) {
#line 508
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            508);
  } else {

  }
#line 508
  if (_b != 0) {
#line 508
    goto cancel;
  } else {

  }
#line 509
  if (rv == -1) {
#line 510
    ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 511
    return (0);
  } else {

  }
#line 514
  tmp___1 = __fswab32(buffer->tr_number);
#line 514
  trn = tmp___1;
#line 516
  spin_lock_irq(& mdev->al_lock);
#line 522
  j = 61;
#line 522
  goto ldv_43827;
  ldv_43826: 
#line 523
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 523
  pos = (int )tmp___2;
#line 524
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 524
  extent_nr = tmp___3;
#line 526
  if (extent_nr == 4294967295U) {
#line 527
    goto ldv_43825;
  } else {

  }
#line 529
  lc_set(mdev->act_log, extent_nr, pos);
#line 530
  active_extents = active_extents + 1;
  ldv_43825: 
#line 522
  j = j - 1;
  ldv_43827: ;
#line 522
  if (j >= 0) {
#line 523
    goto ldv_43826;
  } else {

  }
#line 532
  spin_unlock_irq(& mdev->al_lock);
#line 534
  transactions = transactions + 1;
  cancel: ;
#line 537
  if (i == to) {
#line 538
    goto ldv_43829;
  } else {

  }
#line 539
  i = i + 1;
#line 540
  if (i > mx) {
#line 541
    i = 0;
  } else {

  }
#line 542
  goto ldv_43830;
  ldv_43829: 
#line 544
  mdev->al_tr_number = to_tnr + 1U;
#line 545
  mdev->al_tr_pos = to;
#line 546
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 546
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 548
    mdev->al_tr_pos = 0;
  } else {

  }
#line 551
  ldv_mutex_unlock_106(& mdev->md_io_mutex);
#line 553
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 556
  return (1);
}
}
#line 559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 561
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 562
  mdev = wc->mdev;
#line 564
  uptodate = (int )bio->bi_flags & 1;
#line 569
  if (error == 0 && uptodate == 0) {
#line 570
    error = -5;
  } else {

  }
#line 572
  drbd_chk_io_error____0(mdev, error, 1, "atodb_endio");
#line 573
  if (error != 0 && wc->error == 0) {
#line 574
    wc->error = error;
  } else {

  }
#line 576
  tmp = atomic_dec_and_test(& wc->count);
#line 576
  if (tmp != 0) {
#line 577
    complete(& wc->io_done);
  } else {

  }
#line 579
  page = (bio->bi_io_vec)->bv_page;
#line 580
  put_page(page);
#line 581
  bio_put(bio);
#line 582
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 583
  put_ldev(mdev);
#line 584
  return;
}
}
#line 591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 599
  page_offset___0 = 4096U;
#line 601
  i = 0;
#line 602
  err = -12;
#line 606
  enr = enr & 4294967288U;
#line 607
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 610
  if ((on_disk_sector & 7UL) != 0UL) {
#line 610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            610);
  } else {

  }
#line 619
  goto ldv_43854;
  ldv_43853: ;
#line 620
  if (bio->bi_sector == on_disk_sector) {
#line 621
    return (0);
  } else {

  }
#line 622
  i = i + 1;
  ldv_43854: 
#line 619
  bio = *(bios + (unsigned long )i);
#line 619
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 620
    goto ldv_43853;
  } else {

  }
#line 627
  bio = bio_alloc(208U, 1);
#line 628
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 629
    return (-12);
  } else {

  }
#line 631
  if (i > 0) {
#line 632
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 633
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 634
    page = prev_bv->bv_page;
  } else {

  }
#line 636
  if (page_offset___0 == 4096U) {
#line 637
    page = alloc_pages(2U, 0U);
#line 638
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 639
      goto out_bio_put;
    } else {

    }
#line 640
    page_offset___0 = 0U;
  } else {
#line 642
    get_page(page);
  }
#line 645
  offset = (int )(enr << 6);
#line 646
  tmp = kmap(page);
#line 647
  __min1 = 512UL;
#line 647
  tmp___0 = drbd_bm_words(mdev);
#line 647
  __min2 = tmp___0 - (size_t )offset;
#line 647
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 649
  kunmap(page);
#line 651
  bio->bi_private = (void *)wc;
#line 652
  bio->bi_end_io = & atodb_endio;
#line 653
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 654
  bio->bi_sector = on_disk_sector;
#line 656
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 656
  if (tmp___1 != 4096) {
#line 657
    goto out_put_page;
  } else {

  }
#line 659
  atomic_inc(& wc->count);
#line 665
  atomic_inc(& mdev->local_cnt);
#line 667
  *(bios + (unsigned long )i) = bio;
#line 669
  return (0);
  out_put_page: 
#line 672
  err = -22;
#line 673
  put_page(page);
  out_bio_put: 
#line 675
  bio_put(bio);
#line 676
  return (err);
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 693
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 693
  _b = tmp == 0;
#line 693
  if (_b != 0) {
#line 693
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            693);
  } else {

  }
#line 693
  if (_b != 0) {
#line 694
    return;
  } else {

  }
#line 696
  tmp___0 = lc_try_lock(mdev->act_log);
#line 696
  if (tmp___0 != 0) {
#line 696
    goto ldv_43873;
  } else {

  }
#line 696
  tmp___1 = get_current();
#line 696
  __wait.flags = 0U;
#line 696
  __wait.private = (void *)tmp___1;
#line 696
  __wait.func = & autoremove_wake_function;
#line 696
  __wait.task_list.next = & __wait.task_list;
#line 696
  __wait.task_list.prev = & __wait.task_list;
  ldv_43876: 
#line 696
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 696
  tmp___2 = lc_try_lock(mdev->act_log);
#line 696
  if (tmp___2 != 0) {
#line 696
    goto ldv_43875;
  } else {

  }
#line 696
  schedule();
#line 696
  goto ldv_43876;
  ldv_43875: 
#line 696
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43873: 
#line 698
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 701
  tmp___3 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 701
  bios = (struct bio **)tmp___3;
#line 702
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 703
    goto submit_one_by_one;
  } else {

  }
#line 705
  atomic_set(& wc.count, 0);
#line 706
  init_completion(& wc.io_done);
#line 707
  wc.mdev = mdev;
#line 708
  wc.error = 0;
#line 710
  i = 0;
#line 710
  goto ldv_43881;
  ldv_43880: 
#line 711
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 711
  enr = tmp___4->lc_number;
#line 712
  if (enr == 4294967295U) {
#line 713
    goto ldv_43878;
  } else {

  }
#line 715
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 715
  if (tmp___5 != 0) {
#line 718
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_43878: 
#line 710
  i = i + 1;
  ldv_43881: ;
#line 710
  if (i < nr_elements) {
#line 711
    goto ldv_43880;
  } else {

  }
#line 722
  lc_unlock(mdev->act_log);
#line 723
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 726
  i = 0;
#line 726
  goto ldv_43885;
  ldv_43884: ;
#line 727
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 728
    goto ldv_43883;
  } else {

  }
#line 729
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 729
  if (tmp___6 != 0) {
#line 730
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 731
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 733
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 726
  i = i + 1;
  ldv_43885: ;
#line 726
  if (i < nr_elements) {
#line 727
    goto ldv_43884;
  } else {

  }
  ldv_43883: 
#line 737
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 737
  drbd_blk_run_queue(tmp___7);
#line 740
  drbd_md_flush(mdev);
#line 748
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 748
  if (tmp___8 != 0) {
#line 749
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 751
  put_ldev(mdev);
#line 753
  kfree((void const   *)bios);
#line 754
  return;
  free_bios_submit_one_by_one: 
#line 758
  i = 0;
#line 758
  goto ldv_43887;
  ldv_43886: 
#line 759
  bio_endio(*(bios + (unsigned long )i), 0);
#line 758
  i = i + 1;
  ldv_43887: ;
#line 758
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 759
    goto ldv_43886;
  } else {

  }
#line 761
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 764
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 766
  i = 0;
#line 766
  goto ldv_43891;
  ldv_43890: 
#line 767
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 767
  enr = tmp___9->lc_number;
#line 768
  if (enr == 4294967295U) {
#line 769
    goto ldv_43889;
  } else {

  }
#line 772
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_43889: 
#line 766
  i = i + 1;
  ldv_43891: ;
#line 766
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 767
    goto ldv_43890;
  } else {

  }
#line 775
  lc_unlock(mdev->act_log);
#line 776
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 777
  put_ldev(mdev);
#line 778
  return;
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;

  {
#line 787
  add = 0UL;
#line 791
  tmp = lc_try_lock(mdev->act_log);
#line 791
  if (tmp != 0) {
#line 791
    goto ldv_43900;
  } else {

  }
#line 791
  tmp___0 = get_current();
#line 791
  __wait.flags = 0U;
#line 791
  __wait.private = (void *)tmp___0;
#line 791
  __wait.func = & autoremove_wake_function;
#line 791
  __wait.task_list.next = & __wait.task_list;
#line 791
  __wait.task_list.prev = & __wait.task_list;
  ldv_43903: 
#line 791
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 791
  tmp___1 = lc_try_lock(mdev->act_log);
#line 791
  if (tmp___1 != 0) {
#line 791
    goto ldv_43902;
  } else {

  }
#line 791
  schedule();
#line 791
  goto ldv_43903;
  ldv_43902: 
#line 791
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43900: 
#line 793
  i = 0;
#line 793
  goto ldv_43906;
  ldv_43905: 
#line 794
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 794
  enr = tmp___2->lc_number;
#line 795
  if (enr == 4294967295U) {
#line 796
    goto ldv_43904;
  } else {

  }
#line 797
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 797
  add = tmp___3 + add;
  ldv_43904: 
#line 793
  i = i + 1;
  ldv_43906: ;
#line 793
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 794
    goto ldv_43905;
  } else {

  }
#line 800
  lc_unlock(mdev->act_log);
#line 801
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 803
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 803
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___4);
#line 804
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 811
  spin_lock_irq(& mdev->al_lock);
#line 812
  rv = al_ext->refcnt == 0U;
#line 813
  tmp = __builtin_expect(rv != 0, 1L);
#line 813
  if (tmp != 0L) {
#line 814
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 815
  spin_unlock_irq(& mdev->al_lock);
#line 817
  return (rv);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 834
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 834
  if (tmp == 0) {
#line 834
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            834);
  } else {

  }
#line 836
  i = 0;
#line 836
  goto ldv_43924;
  ldv_43923: 
#line 837
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 838
  if (al_ext->lc_number == 4294967295U) {
#line 839
    goto ldv_43918;
  } else {

  }
#line 840
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 840
  if (tmp___0 != 0) {
#line 840
    goto ldv_43919;
  } else {

  }
#line 840
  tmp___1 = get_current();
#line 840
  __wait.flags = 0U;
#line 840
  __wait.private = (void *)tmp___1;
#line 840
  __wait.func = & autoremove_wake_function;
#line 840
  __wait.task_list.next = & __wait.task_list;
#line 840
  __wait.task_list.prev = & __wait.task_list;
  ldv_43922: 
#line 840
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 840
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 840
  if (tmp___2 != 0) {
#line 840
    goto ldv_43921;
  } else {

  }
#line 840
  schedule();
#line 840
  goto ldv_43922;
  ldv_43921: 
#line 840
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43919: ;
  ldv_43918: 
#line 836
  i = i + 1;
  ldv_43924: ;
#line 836
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 837
    goto ldv_43923;
  } else {

  }
#line 843
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 844
  return;
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 848
  __mptr = (struct drbd_work  const  *)w;
#line 848
  udw = (struct update_odbm_work *)__mptr;
#line 850
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 850
  if (tmp___0 == 0) {
#line 851
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 851
    if (tmp != 0) {
#line 852
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 853
    kfree((void const   *)udw);
#line 854
    return (1);
  } else {

  }
#line 857
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 858
  put_ldev(mdev);
#line 860
  kfree((void const   *)udw);
#line 862
  tmp___1 = drbd_bm_total_weight(mdev);
#line 862
  if (tmp___1 <= mdev->rs_failed) {
#line 863
    switch ((int )mdev->state.ldv_35127.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 866
    drbd_resync_finished(mdev);
    default: ;
#line 869
    goto ldv_43940;
    }
    ldv_43940: ;
  } else {

  }
#line 872
  drbd_bcast_sync_progress(mdev);
#line 874
  return (1);
}
}
#line 884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 892
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 892
  if (tmp == 0) {
#line 892
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            892);
  } else {

  }
#line 896
  enr = (unsigned int )(sector >> 15);
#line 898
  e = lc_get(mdev->resync, enr);
#line 899
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 900
    __mptr = (struct lc_element  const  *)e;
#line 900
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 901
    if (ext->lce.lc_number == enr) {
#line 902
      if (success != 0) {
#line 903
        ext->rs_left = ext->rs_left - count;
      } else {
#line 905
        ext->rs_failed = ext->rs_failed + count;
      }
#line 906
      if (ext->rs_left < ext->rs_failed) {
#line 907
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 912
        dump_stack();
#line 914
        lc_put(mdev->resync, & ext->lce);
#line 915
        val.i = 0U;
#line 915
        val.ldv_35127.conn = 1U;
#line 915
        mask.i = 0U;
#line 915
        mask.ldv_35127.conn = 31U;
#line 915
        drbd_force_state(mdev, mask, val);
#line 916
        return;
      } else {

      }
    } else {
#line 925
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 925
      rs_left = tmp___0;
#line 926
      if (ext->flags != 0UL) {
#line 927
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 931
        ext->flags = 0UL;
      } else {

      }
#line 933
      if (ext->rs_failed != 0) {
#line 934
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 937
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 939
      ext->rs_left = rs_left;
#line 940
      ext->rs_failed = success == 0 ? count : 0;
#line 941
      lc_changed(mdev->resync, & ext->lce);
    }
#line 943
    lc_put(mdev->resync, & ext->lce);
#line 946
    if (ext->rs_left == ext->rs_failed) {
#line 947
      ext->rs_failed = 0;
#line 949
      tmp___1 = kmalloc___3(32UL, 32U);
#line 949
      udw = (struct update_odbm_work *)tmp___1;
#line 950
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 951
        udw->enr = ext->lce.lc_number;
#line 952
        udw->w.cb = & w_update_odbm;
#line 953
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 955
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 956
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 960
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 964
  return;
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;
  int tmp___4 ;

  {
#line 979
  count = 0UL;
#line 981
  wake_up = 0;
#line 984
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 985
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 987
    return;
  } else {

  }
#line 989
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 990
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 992
  _b = sector >= nr_sectors;
#line 992
  if (_b != 0) {
#line 992
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            992);
  } else {

  }
#line 992
  if (_b != 0) {
#line 992
    return;
  } else {

  }
#line 993
  _b___0 = esector >= nr_sectors;
#line 993
  if (_b___0 != 0) {
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            993);
  } else {

  }
#line 993
  if (_b___0 != 0) {
#line 993
    esector = nr_sectors - 1UL;
  } else {

  }
#line 995
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1000
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1000
  if (tmp != 0L) {
#line 1001
    return;
  } else {

  }
#line 1002
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1002
  if (tmp___0 != 0L) {
#line 1003
    ebnr = lbnr;
  } else {
#line 1005
    ebnr = (esector - 7UL) >> 3;
  }
#line 1006
  sbnr = (sector + 7UL) >> 3;
#line 1008
  if (sbnr > ebnr) {
#line 1009
    return;
  } else {

  }
#line 1015
  tmp___1 = spinlock_check(& mdev->al_lock);
#line 1015
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1016
  tmp___2 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1016
  count = (unsigned long )tmp___2;
#line 1017
  if (count != 0UL) {
#line 1019
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 1022
      tmp___3 = drbd_bm_total_weight(mdev);
#line 1022
      if ((mdev->rs_mark_left != tmp___3 && (unsigned int )*((unsigned short *)mdev + 910UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 910UL) != 320U) {
#line 1025
        mdev->rs_mark_time = jiffies;
#line 1026
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 1029
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1029
    if (tmp___4 != 0) {
#line 1030
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1031
      put_ldev(mdev);
    } else {

    }
#line 1035
    wake_up = 1;
  } else {

  }
#line 1037
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1038
  if (wake_up != 0) {
#line 1039
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1040
  return;
}
}
#line 1050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1058
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1059
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1061
    return;
  } else {

  }
#line 1064
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1064
  if (tmp == 0) {
#line 1065
    return;
  } else {

  }
#line 1067
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1068
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1070
  _b = sector >= nr_sectors;
#line 1070
  if (_b != 0) {
#line 1070
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1070);
  } else {

  }
#line 1070
  if (_b != 0) {
#line 1071
    goto out;
  } else {

  }
#line 1072
  _b___0 = esector >= nr_sectors;
#line 1072
  if (_b___0 != 0) {
#line 1072
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1072);
  } else {

  }
#line 1072
  if (_b___0 != 0) {
#line 1073
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1075
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1079
  sbnr = sector >> 3;
#line 1080
  ebnr = esector >> 3;
#line 1084
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1084
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1085
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1085
  count = (unsigned int )tmp___1;
#line 1087
  enr = (unsigned int )(sector >> 15);
#line 1088
  e = lc_find(mdev->resync, enr);
#line 1089
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1090
    __mptr = (struct lc_element  const  *)e;
#line 1090
    __mptr___0 = (struct lc_element  const  *)e;
#line 1090
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1091
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1094
  put_ldev(mdev);
#line 1095
  return;
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1102
  wakeup = 0;
#line 1105
  spin_lock_irq(& mdev->al_lock);
#line 1106
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1107
    spin_unlock_irq(& mdev->al_lock);
#line 1108
    return (0);
  } else {

  }
#line 1110
  e = lc_get(mdev->resync, enr);
#line 1111
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1111
    __mptr = (struct lc_element  const  *)e;
#line 1111
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1111
    bm_ext = 0;
  }
#line 1112
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1113
    if (bm_ext->lce.lc_number != enr) {
#line 1114
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1115
      bm_ext->rs_failed = 0;
#line 1116
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1117
      wakeup = 1;
    } else {

    }
#line 1119
    if (bm_ext->lce.refcnt == 1U) {
#line 1120
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1121
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1123
  rs_flags = (mdev->resync)->flags;
#line 1124
  spin_unlock_irq(& mdev->al_lock);
#line 1125
  if (wakeup != 0) {
#line 1126
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1128
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1129
    if ((rs_flags & 4UL) != 0UL) {
#line 1130
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1132
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1132
    if (tmp != 0L) {
#line 1132
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1132), "i" (12UL));
      ldv_44018: ;
#line 1132
      goto ldv_44018;
    } else {

    }
  } else {

  }
#line 1135
  return (bm_ext);
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1141
  rv = 0;
#line 1143
  spin_lock_irq(& mdev->al_lock);
#line 1144
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1144
  if (tmp != 0L) {
#line 1145
    rv = 1;
  } else {
#line 1147
    al_ext = lc_find(mdev->act_log, enr);
#line 1148
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1149
      if (al_ext->refcnt != 0U) {
#line 1150
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1153
  spin_unlock_irq(& mdev->al_lock);
#line 1160
  return (rv);
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1172
  enr = (unsigned int )(sector >> 15);
#line 1176
  __ret = 0;
#line 1176
  bm_ext = _bme_get(mdev, enr);
#line 1176
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1176
    tmp = get_current();
#line 1176
    __wait.flags = 0U;
#line 1176
    __wait.private = (void *)tmp;
#line 1176
    __wait.func = & autoremove_wake_function;
#line 1176
    __wait.task_list.next = & __wait.task_list;
#line 1176
    __wait.task_list.prev = & __wait.task_list;
    ldv_44037: 
#line 1176
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1176
    bm_ext = _bme_get(mdev, enr);
#line 1176
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1176
      goto ldv_44035;
    } else {

    }
#line 1176
    tmp___0 = get_current();
#line 1176
    tmp___1 = signal_pending(tmp___0);
#line 1176
    if (tmp___1 == 0) {
#line 1176
      schedule();
#line 1176
      goto ldv_44036;
    } else {

    }
#line 1176
    __ret = -512;
#line 1176
    goto ldv_44035;
    ldv_44036: ;
#line 1176
    goto ldv_44037;
    ldv_44035: 
#line 1176
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1176
  sig = __ret;
#line 1178
  if (sig != 0) {
#line 1179
    return (0);
  } else {

  }
#line 1181
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1181
  if (tmp___2 != 0) {
#line 1182
    return (1);
  } else {

  }
#line 1184
  i = 0;
#line 1184
  goto ldv_44046;
  ldv_44045: 
#line 1185
  __ret___0 = 0;
#line 1185
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1185
  if (tmp___7 != 0) {
#line 1185
    tmp___3 = get_current();
#line 1185
    __wait___0.flags = 0U;
#line 1185
    __wait___0.private = (void *)tmp___3;
#line 1185
    __wait___0.func = & autoremove_wake_function;
#line 1185
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1185
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44043: 
#line 1185
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1185
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1185
    if (tmp___4 == 0) {
#line 1185
      goto ldv_44041;
    } else {

    }
#line 1185
    tmp___5 = get_current();
#line 1185
    tmp___6 = signal_pending(tmp___5);
#line 1185
    if (tmp___6 == 0) {
#line 1185
      schedule();
#line 1185
      goto ldv_44042;
    } else {

    }
#line 1185
    __ret___0 = -512;
#line 1185
    goto ldv_44041;
    ldv_44042: ;
#line 1185
    goto ldv_44043;
    ldv_44041: 
#line 1185
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1185
  sig = __ret___0;
#line 1187
  if (sig != 0) {
#line 1188
    spin_lock_irq(& mdev->al_lock);
#line 1189
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1189
    if (tmp___8 == 0U) {
#line 1190
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1191
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1192
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1194
    spin_unlock_irq(& mdev->al_lock);
#line 1195
    return (0);
  } else {

  }
#line 1184
  i = i + 1;
  ldv_44046: ;
#line 1184
  if (i <= 3) {
#line 1185
    goto ldv_44045;
  } else {

  }
#line 1199
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1201
  return (1);
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1215
  enr = (unsigned int )(sector >> 15);
#line 1216
  al_enr = enr * 4U;
#line 1221
  spin_lock_irq(& mdev->al_lock);
#line 1222
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1236
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1237
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1237
      __mptr = (struct lc_element  const  *)e;
#line 1237
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1237
      bm_ext = 0;
    }
#line 1238
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1239
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1239
      if (tmp != 0) {
#line 1239
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1239);
      } else {

      }
#line 1240
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1240
      if (tmp___0 == 0) {
#line 1240
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1240);
      } else {

      }
#line 1241
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1242
      mdev->resync_wenr = 4294967295U;
#line 1243
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1243
      if (tmp___1 == 0U) {
#line 1244
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1245
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1247
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1251
  e = lc_try_get(mdev->resync, enr);
#line 1252
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1252
    __mptr___0 = (struct lc_element  const  *)e;
#line 1252
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1252
    bm_ext = 0;
  }
#line 1253
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1254
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1254
    if (tmp___2 != 0) {
#line 1255
      goto proceed;
    } else {

    }
#line 1256
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1256
    if (tmp___3 == 0) {
#line 1257
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1263
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1264
      if (bm_ext->lce.refcnt == 0U) {
#line 1264
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1264);
      } else {

      }
    }
#line 1266
    goto check_al;
  } else {
#line 1269
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1270
      goto try_again;
    } else {

    }
#line 1272
    e = lc_get(mdev->resync, enr);
#line 1273
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1273
      __mptr___1 = (struct lc_element  const  *)e;
#line 1273
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1273
      bm_ext = 0;
    }
#line 1274
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1275
      rs_flags = (mdev->resync)->flags;
#line 1276
      if ((rs_flags & 4UL) != 0UL) {
#line 1277
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1279
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1279
      if (tmp___4 != 0L) {
#line 1279
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1279), "i" (12UL));
        ldv_44067: ;
#line 1279
        goto ldv_44067;
      } else {

      }
#line 1280
      goto try_again;
    } else {

    }
#line 1282
    if (bm_ext->lce.lc_number != enr) {
#line 1283
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1284
      bm_ext->rs_failed = 0;
#line 1285
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1286
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1287
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1287
      if (tmp___5 != 0) {
#line 1287
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1287);
      } else {

      }
    } else {

    }
#line 1289
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1290
    if (bm_ext->lce.refcnt != 1U) {
#line 1290
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1290);
    } else {

    }
#line 1291
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1292
    goto check_al;
  }
  check_al: 
#line 1295
  i = 0;
#line 1295
  goto ldv_44069;
  ldv_44068: 
#line 1296
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1296
  if (tmp___6 != 0L) {
#line 1297
    goto try_again;
  } else {

  }
#line 1298
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1298
  if (tmp___7 != 0) {
#line 1299
    goto try_again;
  } else {

  }
#line 1295
  i = i + 1;
  ldv_44069: ;
#line 1295
  if (i <= 3) {
#line 1296
    goto ldv_44068;
  } else {

  }
#line 1301
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1303
  mdev->resync_wenr = 4294967295U;
#line 1304
  spin_unlock_irq(& mdev->al_lock);
#line 1305
  return (0);
  try_again: ;
#line 1308
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1309
    mdev->resync_wenr = enr;
  } else {

  }
#line 1310
  spin_unlock_irq(& mdev->al_lock);
#line 1311
  return (-11);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1316
  enr = (unsigned int )(sector >> 15);
#line 1321
  tmp = spinlock_check(& mdev->al_lock);
#line 1321
  flags = _raw_spin_lock_irqsave(tmp);
#line 1322
  e = lc_find(mdev->resync, enr);
#line 1323
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1323
    __mptr = (struct lc_element  const  *)e;
#line 1323
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1323
    bm_ext = 0;
  }
#line 1324
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1325
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1326
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1326
    if (tmp___0 != 0) {
#line 1327
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1328
    return;
  } else {

  }
#line 1331
  if (bm_ext->lce.refcnt == 0U) {
#line 1332
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1336
    return;
  } else {

  }
#line 1339
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1339
  if (tmp___1 == 0U) {
#line 1340
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1341
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1342
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1343
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1346
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1347
  return;
}
}
#line 1353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1355
  spin_lock_irq(& mdev->al_lock);
#line 1357
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1357
  if (tmp != 0) {
#line 1358
    lc_reset(mdev->resync);
#line 1359
    put_ldev(mdev);
  } else {

  }
#line 1361
  mdev->resync_locked = 0U;
#line 1362
  mdev->resync_wenr = 4294967295U;
#line 1363
  spin_unlock_irq(& mdev->al_lock);
#line 1364
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1365
  return;
}
}
#line 1374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1380
  spin_lock_irq(& mdev->al_lock);
#line 1382
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1382
  if (tmp___3 != 0) {
#line 1384
    i = 0;
#line 1384
    goto ldv_44098;
    ldv_44097: 
#line 1385
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1386
    __mptr = (struct lc_element  const  *)e;
#line 1386
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1387
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1388
      goto ldv_44096;
    } else {

    }
#line 1389
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1390
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1393
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1393
      if (tmp != 0) {
#line 1393
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1393);
      } else {

      }
#line 1394
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1394
      if (tmp___0 == 0) {
#line 1394
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1394);
      } else {

      }
#line 1395
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1396
      mdev->resync_wenr = 4294967295U;
#line 1397
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1399
    if (bm_ext->lce.refcnt != 0U) {
#line 1400
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1402
      put_ldev(mdev);
#line 1403
      spin_unlock_irq(& mdev->al_lock);
#line 1404
      return (-11);
    } else {

    }
#line 1406
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1406
    if (tmp___1 != 0) {
#line 1406
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1406);
    } else {

    }
#line 1407
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1407
    if (tmp___2 != 0) {
#line 1407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1407);
    } else {

    }
#line 1408
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_44096: 
#line 1384
    i = i + 1;
    ldv_44098: ;
#line 1384
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1385
      goto ldv_44097;
    } else {

    }

#line 1410
    if ((mdev->resync)->used != 0U) {
#line 1410
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1410);
    } else {

    }
#line 1411
    put_ldev(mdev);
  } else {

  }
#line 1413
  spin_unlock_irq(& mdev->al_lock);
#line 1415
  return (0);
}
}
#line 1424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1430
  wake_up = 0;
#line 1432
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1433
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1435
    return;
  } else {

  }
#line 1437
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1438
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1440
  _b = sector >= nr_sectors;
#line 1440
  if (_b != 0) {
#line 1440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1440);
  } else {

  }
#line 1440
  if (_b != 0) {
#line 1440
    return;
  } else {

  }
#line 1441
  _b___0 = esector >= nr_sectors;
#line 1441
  if (_b___0 != 0) {
#line 1441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1441);
  } else {

  }
#line 1441
  if (_b___0 != 0) {
#line 1441
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1443
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1448
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1448
  if (tmp != 0L) {
#line 1449
    return;
  } else {

  }
#line 1450
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1450
  if (tmp___0 != 0L) {
#line 1451
    ebnr = lbnr;
  } else {
#line 1453
    ebnr = (esector - 7UL) >> 3;
  }
#line 1454
  sbnr = (sector + 7UL) >> 3;
#line 1456
  if (sbnr > ebnr) {
#line 1457
    return;
  } else {

  }
#line 1463
  spin_lock_irq(& mdev->al_lock);
#line 1464
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1464
  count = (unsigned long )tmp___1;
#line 1465
  if (count != 0UL) {
#line 1466
    mdev->rs_failed = mdev->rs_failed + count;
#line 1468
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1468
    if (tmp___2 != 0) {
#line 1469
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1470
      put_ldev(mdev);
    } else {

    }
#line 1475
    wake_up = 1;
  } else {

  }
#line 1477
  spin_unlock_irq(& mdev->al_lock);
#line 1478
  if (wake_up != 0) {
#line 1479
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1480
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1487
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1489
  mutex_lock(ldv_func_arg1);
#line 1490
  return;
}
}
#line 1492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1497
  tmp = mutex_trylock(ldv_func_arg1);
#line 1497
  ldv_func_res = tmp;
#line 1499
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1499
  return (tmp___0);
#line 1501
  return (ldv_func_res);
}
}
#line 1504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1509
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1511
  mutex_unlock(ldv_func_arg1);
#line 1512
  return;
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1519
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1521
  mutex_lock(ldv_func_arg1);
#line 1522
  return;
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1529
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1531
  mutex_unlock(ldv_func_arg1);
#line 1532
  return;
}
}
#line 1534 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1539
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1541
  mutex_unlock(ldv_func_arg1);
#line 1542
  return;
}
}
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1549
  tmp = mutex_is_locked(lock);
#line 1549
  ldv_func_res = tmp;
#line 1551
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1551
  return (tmp___0);
#line 1553
  return (ldv_func_res);
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1561
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1563
  mutex_lock(ldv_func_arg1);
#line 1564
  return;
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1571
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1573
  mutex_unlock(ldv_func_arg1);
#line 1574
  return;
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1581
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1583
  mutex_lock(ldv_func_arg1);
#line 1584
  return;
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1591
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1593
  mutex_unlock(ldv_func_arg1);
#line 1594
  return;
}
}
#line 1596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1601
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1603
  mutex_unlock(ldv_func_arg1);
#line 1604
  return;
}
}
#line 1606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1611
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1613
  mutex_unlock(ldv_func_arg1);
#line 1614
  return;
}
}
#line 1616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1621
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1623
  mutex_unlock(ldv_func_arg1);
#line 1624
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 91
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 95
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5956;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5956;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5956;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5956;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5956: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 237 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 84 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func_ptr = _________p1;
#line 79
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11503: 
#line 79
      it_func = it_func_ptr->func;
#line 79
      __data = it_func_ptr->data;
#line 79
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 79
      it_func_ptr = it_func_ptr + 1;
#line 79
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11503;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 400 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 402
  return ((unsigned int )mod->state != 2U);
}
}
#line 482 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 484
  ret = 1;
#line 486
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 489
    tmp = module_is_live(module);
#line 489
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 489
    if (tmp___0 != 0L) {
#line 490
      __vpp_verify = 0;
#line 490
      switch (4UL) {
      case 1UL: 
#line 490
      pao_ID__ = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11868;
      case 2UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11868;
      case 4UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11868;
      case 8UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11868;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11868: ;
#line 490
      goto ldv_11873;
      case 2UL: 
#line 490
      pao_ID_____0 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11879;
      case 2UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11879;
      case 4UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11879;
      case 8UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11879;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11879: ;
#line 490
      goto ldv_11873;
      case 4UL: 
#line 490
      pao_ID_____1 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11889;
      case 2UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11889;
      case 4UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11889;
      case 8UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11889;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11889: ;
#line 490
      goto ldv_11873;
      case 8UL: 
#line 490
      pao_ID_____2 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11899;
      case 2UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11899;
      case 4UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11899;
      case 8UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11899;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11899: ;
#line 490
      goto ldv_11873;
      default: 
#line 490
      __bad_size_call_parameter();
#line 490
      goto ldv_11873;
      }
      ldv_11873: ;
#line 491
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 493
      ret = 0;
    }
  } else {

  }
#line 497
  return (ret);
}
}
#line 500
extern void module_put(struct module * ) ;
#line 251 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 275
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13781: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13781;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___4(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 1958 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1959
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1960
extern struct block_device *bdget(dev_t  ) ;
#line 1964
extern void bdput(struct block_device * ) ;
#line 1999
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1765 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1989
extern int wake_up_process(struct task_struct * ) ;
#line 28 "include/linux/smp_lock.h"
extern void _lock_kernel(char const   * , char const   * , int  ) ;
#line 32
extern void _unlock_kernel(char const   * , char const   * , int  ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 256 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 258
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 259
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 259
    return (tmp);
  } else {

  }
#line 260
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 706 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 842
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 843
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 844
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 847
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 875
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 894
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 561 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 563
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 563
  if (tmp != 0L) {
#line 563
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (563), "i" (12UL));
    ldv_43122: ;
#line 563
    goto ldv_43122;
  } else {

  }
#line 564
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 565
  return;
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 576
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 577
  return;
}
}
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 588
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 588
  if (tmp != 0L) {
#line 588
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (588), "i" (12UL));
    ldv_43137: ;
#line 588
    goto ldv_43137;
  } else {

  }
#line 589
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 590
  return;
}
}
#line 1081 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1083
  ldv_mutex_lock_124(& mdev->data.mutex);
#line 1086
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1086
  if (tmp != 0L) {
#line 1087
    ldv_mutex_unlock_125(& mdev->data.mutex);
#line 1088
    return (0);
  } else {

  }
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1095
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 1096
  return;
}
}
#line 1117
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1126
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1132
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1137
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1143
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1147
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1187
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1189
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1194
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1198
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1201
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1202
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1203
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1204
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1389 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1391 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1394 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1395 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1401
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1402
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1414
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1415
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1567
void drbd_nl_cleanup(void) ;
#line 1568
int drbd_nl_init(void) ;
#line 1569
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_44142;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_44145: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_44144;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_44145;
  ldv_44144: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44142: ;
#line 1671
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_44168;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35127.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35127.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_44168;
  }
  ldv_44168: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44209;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44209;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44209: ;
#line 1825
  return (s);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1836
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1838
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1844
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1845
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1845
    if (tmp != 0) {
#line 1846
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1847
      dump_stack();
    } else {

    }
#line 1849
    return (0UL);
  } else {

  }
#line 1851
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1851
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1854
  return (0UL);
  }
}
}
#line 1923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1925
  _drbd_thread_stop(thi, 0, 0);
#line 1926
  return;
}
}
#line 1928 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1930
  _drbd_thread_stop(thi, 1, 0);
#line 1931
  return;
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35127.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_44327;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_44327: ;
#line 2160
  switch ((unsigned int )s.ldv_35127.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_44347;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_44347: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2288
  sk = (mdev->data.socket)->sk;
#line 2289
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2290
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2291
  return;
}
}
#line 2293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2300
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_44574;
  ldv_44573: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_44574: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_44573;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 120
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 121
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 122
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 125
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 126
static void md_sync_timer_fn(unsigned long data ) ;
#line 127
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 172
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 201
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 243
  tmp = kmalloc___4(56UL, 208U);
#line 243
  b = (struct drbd_tl_epoch *)tmp;
#line 244
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 245
    return (0);
  } else {

  }
#line 246
  INIT_LIST_HEAD(& b->requests);
#line 247
  INIT_LIST_HEAD(& b->w.list);
#line 248
  b->next = 0;
#line 249
  b->br_number = 4711U;
#line 250
  b->n_req = 0;
#line 251
  b->w.cb = 0;
#line 253
  mdev->oldest_tle = b;
#line 254
  mdev->newest_tle = b;
#line 255
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 257
  mdev->tl_hash = 0;
#line 258
  mdev->tl_hash_s = 0U;
#line 260
  return (1);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 265
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 265
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            265);
  } else {

  }
#line 266
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 266
  if (tmp == 0) {
#line 266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            266);
  } else {

  }
#line 267
  kfree((void const   *)mdev->oldest_tle);
#line 268
  mdev->oldest_tle = 0;
#line 269
  kfree((void const   *)mdev->unused_spare_tle);
#line 270
  mdev->unused_spare_tle = 0;
#line 271
  kfree((void const   *)mdev->tl_hash);
#line 272
  mdev->tl_hash = 0;
#line 273
  mdev->tl_hash_s = 0U;
#line 274
  return;
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 287
  INIT_LIST_HEAD(& new->requests);
#line 288
  INIT_LIST_HEAD(& new->w.list);
#line 289
  new->w.cb = 0;
#line 290
  new->next = 0;
#line 291
  new->n_req = 0;
#line 293
  newest_before = mdev->newest_tle;
#line 296
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 297
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 298
    (mdev->newest_tle)->next = new;
#line 299
    mdev->newest_tle = new;
  } else {

  }
#line 301
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 322
  b = mdev->oldest_tle;
#line 325
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 328
    goto bail;
  } else {

  }
#line 330
  if (b->br_number != barrier_nr) {
#line 331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 333
    goto bail;
  } else {

  }
#line 335
  if ((unsigned int )b->n_req != set_size) {
#line 336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
            barrier_nr, set_size, b->n_req);
#line 338
    goto bail;
  } else {

  }
#line 342
  le = b->requests.next;
#line 342
  tle = le->next;
#line 342
  goto ldv_44796;
  ldv_44795: 
#line 343
  __mptr = (struct list_head  const  *)le;
#line 343
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 344
  _req_mod(r, barrier_acked);
#line 342
  le = tle;
#line 342
  tle = le->next;
  ldv_44796: ;
#line 342
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 343
    goto ldv_44795;
  } else {

  }
#line 359
  list_del_init(& b->requests);
#line 361
  nob = b->next;
#line 362
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 362
  if (tmp != 0) {
#line 363
    _tl_add_barrier(mdev, b);
#line 364
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 365
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 369
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 369
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              369);
    } else {

    }
#line 370
    mdev->oldest_tle = nob;
#line 371
    kfree((void const   *)b);
  }
#line 374
  spin_unlock_irq(& mdev->req_lock);
#line 375
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 375
  if (tmp___0 != 0) {
#line 375
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 375
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 375
  if (tmp___2 < 0) {
#line 375
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 375, tmp___1);
  } else {

  }
#line 377
  return;
  bail: 
#line 380
  spin_unlock_irq(& mdev->req_lock);
#line 381
  val.i = 0U;
#line 381
  val.ldv_35127.conn = 6U;
#line 381
  mask.i = 0U;
#line 381
  mask.ldv_35127.conn = 31U;
#line 381
  drbd_force_state(mdev, mask, val);
#line 383
  return;
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 398
  tmp___0 = random32();
#line 398
  new_initial_bnr = (int )tmp___0;
#line 400
  spin_lock_irq(& mdev->req_lock);
#line 402
  b = mdev->oldest_tle;
#line 403
  goto ldv_44826;
  ldv_44825: 
#line 404
  le = b->requests.next;
#line 404
  tle = le->next;
#line 404
  goto ldv_44818;
  ldv_44817: 
#line 405
  __mptr = (struct list_head  const  *)le;
#line 405
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 408
  _req_mod(r, connection_lost_while_pending);
#line 404
  le = tle;
#line 404
  tle = le->next;
  ldv_44818: ;
#line 404
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 405
    goto ldv_44817;
  } else {

  }
#line 410
  tmp = b->next;
#line 414
  list_del(& b->requests);
#line 419
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 420
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 420
    if (tmp___1 != 0) {
#line 420
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 420
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 420
    if (tmp___3 < 0) {
#line 420
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 420
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "tl_clear", 420, tmp___2);
    } else {

    }
  } else {

  }
#line 422
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 424
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 424
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              424);
    } else {

    }
#line 425
    INIT_LIST_HEAD(& b->requests);
#line 426
    INIT_LIST_HEAD(& b->w.list);
#line 427
    b->w.cb = 0;
#line 428
    b->br_number = (unsigned int )new_initial_bnr;
#line 429
    b->n_req = 0;
#line 431
    mdev->oldest_tle = b;
#line 432
    goto ldv_44824;
  } else {

  }
#line 434
  kfree((void const   *)b);
#line 435
  b = tmp;
  ldv_44826: ;
#line 403
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 404
    goto ldv_44825;
  } else {

  }
  ldv_44824: 
#line 439
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 439
  if (tmp___4 == 0) {
#line 439
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            439);
  } else {

  }
#line 442
  le = mdev->out_of_sequence_requests.next;
#line 442
  tle = le->next;
#line 442
  goto ldv_44830;
  ldv_44829: 
#line 443
  __mptr___0 = (struct list_head  const  *)le;
#line 443
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 446
  _req_mod(r, connection_lost_while_pending);
#line 442
  le = tle;
#line 442
  tle = le->next;
  ldv_44830: ;
#line 442
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 443
    goto ldv_44829;
  } else {

  }
#line 450
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 452
  spin_unlock_irq(& mdev->req_lock);
#line 453
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 464
  return (((((int )os.ldv_35127.conn > 9 && (int )ns.ldv_35127.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35127.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 480
  tmp = spinlock_check(& mdev->req_lock);
#line 480
  flags = _raw_spin_lock_irqsave(tmp);
#line 481
  os = mdev->state;
#line 482
  ns.i = (os.i & ~ mask.i) | val.i;
#line 483
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 484
  ns = mdev->state;
#line 485
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 487
  return (rv);
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 499
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 500
  return;
}
}
#line 502
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 503
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 505
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 507
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 517
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 517
  if (tmp != 0) {
#line 518
    return (SS_CW_SUCCESS);
  } else {

  }
#line 520
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 520
  if (tmp___0 != 0) {
#line 521
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 523
  rv = 0;
#line 524
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 524
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 525
  os = mdev->state;
#line 526
  ns.i = (os.i & ~ mask.i) | val.i;
#line 527
  ns = sanitize_state(mdev, os, ns, 0);
#line 529
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 529
  if (tmp___2 == 0) {
#line 530
    rv = 4;
  } else {

  }
#line 531
  if (rv == 0) {
#line 532
    rv = is_valid_state(mdev, ns);
#line 533
    if (rv == 1) {
#line 534
      rv = is_valid_state_transition(mdev, ns, os);
#line 535
      if (rv == 1) {
#line 536
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 539
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 541
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 563
  init_completion(& done);
#line 565
  if (((unsigned int )f & 8U) != 0U) {
#line 566
    ldv_mutex_lock_127(& mdev->state_mutex);
  } else {

  }
#line 568
  tmp = spinlock_check(& mdev->req_lock);
#line 568
  flags = _raw_spin_lock_irqsave(tmp);
#line 569
  os = mdev->state;
#line 570
  ns.i = (os.i & ~ mask.i) | val.i;
#line 571
  ns = sanitize_state(mdev, os, ns, 0);
#line 573
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 573
  if (tmp___5 != 0) {
#line 574
    rv = is_valid_state(mdev, ns);
#line 575
    if (rv == 1) {
#line 576
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 577
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 579
    if (rv <= 0) {
#line 580
      if (((unsigned int )f & 2U) != 0U) {
#line 581
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 582
      goto abort;
    } else {

    }
#line 585
    drbd_state_lock___0(mdev);
#line 586
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 586
    if (tmp___0 == 0) {
#line 587
      drbd_state_unlock(mdev);
#line 588
      rv = -10;
#line 589
      if (((unsigned int )f & 2U) != 0U) {
#line 590
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 591
      goto abort;
    } else {

    }
#line 594
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 594
    rv = (int )tmp___1;
#line 594
    if (rv != 0) {
#line 594
      goto ldv_44898;
    } else {

    }
#line 594
    tmp___2 = get_current();
#line 594
    __wait.flags = 0U;
#line 594
    __wait.private = (void *)tmp___2;
#line 594
    __wait.func = & autoremove_wake_function;
#line 594
    __wait.task_list.next = & __wait.task_list;
#line 594
    __wait.task_list.prev = & __wait.task_list;
    ldv_44901: 
#line 594
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 594
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 594
    rv = (int )tmp___3;
#line 594
    if (rv != 0) {
#line 594
      goto ldv_44900;
    } else {

    }
#line 594
    schedule();
#line 594
    goto ldv_44901;
    ldv_44900: 
#line 594
    finish_wait(& mdev->state_wait, & __wait);
    ldv_44898: ;
#line 597
    if (rv <= 0) {
#line 598
      drbd_state_unlock(mdev);
#line 599
      if (((unsigned int )f & 2U) != 0U) {
#line 600
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 601
      goto abort;
    } else {

    }
#line 603
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 603
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 604
    os = mdev->state;
#line 605
    ns.i = (os.i & ~ mask.i) | val.i;
#line 606
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 607
    drbd_state_unlock(mdev);
  } else {
#line 609
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 612
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 614
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 615
    tmp___6 = get_current();
#line 615
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 615
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              615);
    } else {

    }
#line 616
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 620
  if (((unsigned int )f & 8U) != 0U) {
#line 621
    ldv_mutex_unlock_128(& mdev->state_mutex);
  } else {

  }
#line 623
  return (rv);
}
}
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 641
  rv = drbd_req_state(mdev, mask, val, f);
#line 641
  if (rv != -18) {
#line 641
    goto ldv_44912;
  } else {

  }
#line 641
  tmp = get_current();
#line 641
  __wait.flags = 0U;
#line 641
  __wait.private = (void *)tmp;
#line 641
  __wait.func = & autoremove_wake_function;
#line 641
  __wait.task_list.next = & __wait.task_list;
#line 641
  __wait.task_list.prev = & __wait.task_list;
  ldv_44915: 
#line 641
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 641
  rv = drbd_req_state(mdev, mask, val, f);
#line 641
  if (rv != -18) {
#line 641
    goto ldv_44914;
  } else {

  }
#line 641
  schedule();
#line 641
  goto ldv_44915;
  ldv_44914: 
#line 641
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44912: ;
#line 644
  return (rv);
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 649
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_35127.pdsk);
#line 649
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35127.disk);
#line 649
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35127.peer);
#line 649
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35127.role);
#line 649
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35127.conn);
#line 649
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 660
  return;
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 666
  if (err == -18) {
#line 667
    return;
  } else {

  }
#line 668
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 668
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 669
  print_st(mdev, (char *)" state", os);
#line 670
  print_st(mdev, (char *)"wanted", ns);
#line 671
  return;
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 699
  rv = 1;
#line 701
  fp = FP_DONT_CARE;
#line 702
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 702
  if (tmp != 0) {
#line 703
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 704
    put_ldev(mdev);
  } else {

  }
#line 707
  tmp___0 = get_net_conf(mdev);
#line 707
  if (tmp___0 != 0) {
#line 708
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 710
      rv = -1;
    } else {

    }
#line 711
    put_net_conf(mdev);
  } else {

  }
#line 714
  if (rv <= 0) {

  } else
#line 716
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 717
    rv = -12;
  } else
#line 719
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35127.conn <= 9) && (int )ns.ldv_35127.disk <= 7) {
#line 720
    rv = -2;
  } else
#line 722
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35127.conn <= 9) && (int )ns.ldv_35127.pdsk > 5) {
#line 724
    rv = -7;
  } else
#line 726
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35127.disk <= 4) && (int )ns.ldv_35127.pdsk <= 4) {
#line 727
    rv = -2;
  } else
#line 729
  if ((int )ns.ldv_35127.conn > 10 && (int )ns.ldv_35127.disk <= 3) {
#line 730
    rv = -4;
  } else
#line 732
  if ((int )ns.ldv_35127.conn > 10 && (int )ns.ldv_35127.pdsk <= 3) {
#line 733
    rv = -5;
  } else
#line 735
  if (((int )ns.ldv_35127.conn > 10 && (int )ns.ldv_35127.disk <= 7) && (int )ns.ldv_35127.pdsk <= 7) {
#line 736
    rv = -2;
  } else
#line 738
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 743
    rv = -6;
  } else
#line 745
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 747
    rv = -14;
  } else
#line 749
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 751
    rv = -17;
  } else {

  }
#line 753
  return (rv);
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 765
  rv = 1;
#line 767
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35127.conn > 10) {
#line 769
    rv = -8;
  } else {

  }
#line 771
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 772
    rv = -9;
  } else {

  }
#line 774
  if ((int )ns.ldv_35127.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 775
    rv = -11;
  } else {

  }
#line 777
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35127.conn <= 1) {
#line 778
    rv = -13;
  } else {

  }
#line 780
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35127.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 781
    rv = -16;
  } else {

  }
#line 783
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 784
    rv = -18;
  } else {

  }
#line 786
  if ((int )ns.ldv_35127.conn == (int )os.ldv_35127.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 787
    rv = -18;
  } else {

  }
#line 789
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35127.conn <= 9) {
#line 790
    rv = -15;
  } else {

  }
#line 792
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35127.conn != (int )os.ldv_35127.conn) && (int )os.ldv_35127.conn > 10) {
#line 794
    rv = -8;
  } else {

  }
#line 796
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35127.conn <= 9) {
#line 798
    rv = -15;
  } else {

  }
#line 800
  return (rv);
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 818
  fp = FP_DONT_CARE;
#line 819
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 819
  if (tmp != 0) {
#line 820
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 821
    put_ldev(mdev);
  } else {

  }
#line 825
  if (((int )ns.ldv_35127.conn > 2 && (int )ns.ldv_35127.conn <= 7) && (int )os.ldv_35127.conn <= 1) {
#line 827
    ns.ldv_35127.conn = os.ldv_35127.conn;
  } else {

  }
#line 830
  if ((((int )os.ldv_35127.conn > 2 && (int )os.ldv_35127.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 832
    ns.ldv_35127.conn = os.ldv_35127.conn;
  } else {

  }
#line 835
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 836
    ns.ldv_35127.conn = os.ldv_35127.conn;
  } else {

  }
#line 838
  if ((int )ns.ldv_35127.conn <= 9) {
#line 839
    ns.ldv_35127.peer_isp = 0U;
#line 840
    ns.ldv_35127.peer = 0U;
#line 841
    if ((int )ns.ldv_35127.pdsk > 6 || (int )ns.ldv_35127.pdsk <= 3) {
#line 842
      ns.ldv_35127.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 846
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 847
    ns.ldv_35127.aftr_isp = 0U;
  } else {

  }
#line 849
  if ((int )ns.ldv_35127.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 850
    ns.ldv_35127.pdsk = 6U;
  } else {

  }
#line 853
  if (((int )os.ldv_35127.conn > 10 && (int )ns.ldv_35127.conn > 10) && ((int )ns.ldv_35127.disk <= 2 || (int )ns.ldv_35127.pdsk <= 2)) {
#line 855
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 856
      *warn_sync_abort = 1;
    } else {

    }
#line 857
    ns.ldv_35127.conn = 10U;
  } else {

  }
#line 860
  if ((int )ns.ldv_35127.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 863
    switch ((int )ns.ldv_35127.conn) {
    case 14: ;
    case 21: 
#line 866
    ns.ldv_35127.disk = 5U;
#line 867
    goto ldv_44948;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 872
    ns.ldv_35127.disk = 8U;
#line 873
    goto ldv_44948;
    case 17: 
#line 875
    ns.ldv_35127.disk = 4U;
#line 876
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 877
    goto ldv_44948;
    }
    ldv_44948: ;
#line 879
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 880
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 883
  if ((int )ns.ldv_35127.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 885
    switch ((int )ns.ldv_35127.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 890
    ns.ldv_35127.pdsk = 8U;
#line 891
    goto ldv_44958;
    case 13: ;
    case 20: 
#line 897
    ns.ldv_35127.pdsk = (int )os.ldv_35127.pdsk > 0 && (int )os.ldv_35127.pdsk <= 4 ? os.ldv_35127.pdsk : 5U;
#line 900
    goto ldv_44958;
    case 16: 
#line 902
    ns.ldv_35127.pdsk = 4U;
#line 903
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 904
    goto ldv_44958;
    }
    ldv_44958: ;
#line 906
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 907
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 911
  if ((int )ns.ldv_35127.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 911
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 911
    if (tmp___0 != 0) {
#line 913
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 914
        ns.ldv_35127.disk = mdev->new_state_tmp.ldv_35127.disk;
#line 915
        ns.ldv_35127.pdsk = mdev->new_state_tmp.ldv_35127.pdsk;
      } else {
#line 917
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 918
        ns.ldv_35127.disk = 0U;
#line 919
        ns.ldv_35127.pdsk = 6U;
      }
#line 921
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 924
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35127.conn <= 9) && (int )ns.ldv_35127.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35127.conn > 9) || (int )os.ldv_35127.pdsk <= 5)) {
#line 927
    ns.ldv_35127.susp = 1U;
  } else {

  }
#line 929
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 930
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 931
      ns.ldv_35127.conn = 20U;
    } else {

    }
#line 932
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 933
      ns.ldv_35127.conn = 21U;
    } else {

    }
  } else {
#line 935
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 936
      ns.ldv_35127.conn = 16U;
    } else {

    }
#line 937
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 938
      ns.ldv_35127.conn = 17U;
    } else {

    }
  }
#line 941
  return (ns);
}
}
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 947
  if ((unsigned int )cs == 19U) {
#line 953
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 955
    bit = mdev->ov_start_sector >> 3;
#line 956
    if (mdev->rs_total <= bit) {
#line 957
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 959
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 961
  return;
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  int tmp___0 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  unsigned long tmp___22 ;
  unsigned long tmp___23 ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 977
  rv = 1;
#line 978
  warn_sync_abort = 0;
#line 981
  os = mdev->state;
#line 983
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 985
  if (ns.i == os.i) {
#line 986
    return (2);
  } else {

  }
#line 988
  if (((unsigned int )flags & 1U) == 0U) {
#line 992
    rv = is_valid_state(mdev, ns);
#line 993
    if (rv <= 0) {
#line 997
      tmp___0 = is_valid_state(mdev, os);
#line 997
      if (tmp___0 == rv) {
#line 998
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 998
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considering state change from bad state. Error would be: \'%s\'\n",
                tmp);
#line 1001
        print_st(mdev, (char *)"old", os);
#line 1002
        print_st(mdev, (char *)"new", ns);
#line 1003
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1006
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1009
  if (rv <= 0) {
#line 1010
    if (((unsigned int )flags & 2U) != 0U) {
#line 1011
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1012
    return (rv);
  } else {

  }
#line 1015
  if (warn_sync_abort != 0) {
#line 1016
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync aborted.\n");
  } else {

  }
#line 1020
  pbp = (char *)(& pb);
#line 1021
  *pbp = 0;
#line 1022
  if ((int )ns.ldv_35127.role != (int )os.ldv_35127.role) {
#line 1022
    tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35127.role);
#line 1022
    tmp___2 = drbd_role_str((enum drbd_role )os.ldv_35127.role);
#line 1022
    tmp___3 = sprintf(pbp, "role( %s -> %s ) ", tmp___2, tmp___1);
#line 1022
    pbp = pbp + (unsigned long )tmp___3;
  } else {

  }
#line 1023
  if ((int )ns.ldv_35127.peer != (int )os.ldv_35127.peer) {
#line 1023
    tmp___4 = drbd_role_str((enum drbd_role )ns.ldv_35127.peer);
#line 1023
    tmp___5 = drbd_role_str((enum drbd_role )os.ldv_35127.peer);
#line 1023
    tmp___6 = sprintf(pbp, "peer( %s -> %s ) ", tmp___5, tmp___4);
#line 1023
    pbp = pbp + (unsigned long )tmp___6;
  } else {

  }
#line 1024
  if ((int )ns.ldv_35127.conn != (int )os.ldv_35127.conn) {
#line 1024
    tmp___7 = drbd_conn_str((enum drbd_conns )ns.ldv_35127.conn);
#line 1024
    tmp___8 = drbd_conn_str((enum drbd_conns )os.ldv_35127.conn);
#line 1024
    tmp___9 = sprintf(pbp, "conn( %s -> %s ) ", tmp___8, tmp___7);
#line 1024
    pbp = pbp + (unsigned long )tmp___9;
  } else {

  }
#line 1025
  if ((int )ns.ldv_35127.disk != (int )os.ldv_35127.disk) {
#line 1025
    tmp___10 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35127.disk);
#line 1025
    tmp___11 = drbd_disk_str((enum drbd_disk_state )os.ldv_35127.disk);
#line 1025
    tmp___12 = sprintf(pbp, "disk( %s -> %s ) ", tmp___11, tmp___10);
#line 1025
    pbp = pbp + (unsigned long )tmp___12;
  } else {

  }
#line 1026
  if ((int )ns.ldv_35127.pdsk != (int )os.ldv_35127.pdsk) {
#line 1026
    tmp___13 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35127.pdsk);
#line 1026
    tmp___14 = drbd_disk_str((enum drbd_disk_state )os.ldv_35127.pdsk);
#line 1026
    tmp___15 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___14, tmp___13);
#line 1026
    pbp = pbp + (unsigned long )tmp___15;
  } else {

  }
#line 1027
  if ((int )ns.ldv_35127.susp != (int )os.ldv_35127.susp) {
#line 1027
    tmp___16 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1027
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 1028
  if ((int )ns.ldv_35127.aftr_isp != (int )os.ldv_35127.aftr_isp) {
#line 1028
    tmp___17 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1028
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1029
  if ((int )ns.ldv_35127.peer_isp != (int )os.ldv_35127.peer_isp) {
#line 1029
    tmp___18 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1029
    pbp = pbp + (unsigned long )tmp___18;
  } else {

  }
#line 1030
  if ((int )ns.ldv_35127.user_isp != (int )os.ldv_35127.user_isp) {
#line 1030
    tmp___19 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1030
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 1031
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1042
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1042
    tmp___20 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1042
    if (tmp___20 == 0) {
#line 1046
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1048
  mdev->state.i = ns.i;
#line 1049
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1050
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1053
  if ((int )os.ldv_35127.conn > 15 && (int )ns.ldv_35127.conn <= 10) {
#line 1054
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1055
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1059
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35127.conn <= 9) {
#line 1061
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1063
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1067
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1069
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1070
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1071
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1072
      tmp___21 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1072
      if (tmp___21 == 0) {
#line 1073
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1081
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1083
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1084
    mdev->rs_mark_time = jiffies;
#line 1085
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1086
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1089
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1091
    mdev->ov_position = 0UL;
#line 1092
    tmp___22 = drbd_bm_bits(mdev);
#line 1092
    mdev->rs_mark_left = tmp___22;
#line 1092
    mdev->rs_total = tmp___22;
#line 1094
    if (mdev->agreed_pro_version > 89) {
#line 1095
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35127.conn);
    } else {
#line 1097
      mdev->ov_start_sector = 0UL;
    }
#line 1098
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1100
    tmp___23 = jiffies;
#line 1100
    mdev->rs_mark_time = tmp___23;
#line 1100
    mdev->rs_start = tmp___23;
#line 1102
    mdev->ov_last_oos_size = 0UL;
#line 1103
    mdev->ov_last_oos_start = 0UL;
#line 1105
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1106
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1108
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1112
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1112
  if (tmp___25 != 0) {
#line 1113
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1117
    tmp___24 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1117
    if (tmp___24 != 0) {
#line 1118
      mdf = mdf | 64U;
    } else {

    }
#line 1119
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U || ((int )mdev->state.ldv_35127.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 4U)) {
#line 1121
      mdf = mdf | 2U;
    } else {

    }
#line 1122
    if ((int )mdev->state.ldv_35127.conn > 9) {
#line 1123
      mdf = mdf | 4U;
    } else {

    }
#line 1124
    if ((int )mdev->state.ldv_35127.disk > 4) {
#line 1125
      mdf = mdf | 1U;
    } else {

    }
#line 1126
    if ((int )mdev->state.ldv_35127.disk > 5) {
#line 1127
      mdf = mdf | 16U;
    } else {

    }
#line 1128
    if ((int )mdev->state.ldv_35127.pdsk <= 5 && (int )mdev->state.ldv_35127.pdsk > 3) {
#line 1129
      mdf = mdf | 32U;
    } else {

    }
#line 1130
    if ((mdev->ldev)->md.flags != mdf) {
#line 1131
      (mdev->ldev)->md.flags = mdf;
#line 1132
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1134
    if ((int )os.ldv_35127.disk <= 6 && (int )ns.ldv_35127.disk > 6) {
#line 1135
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1136
    put_ldev(mdev);
  } else {

  }
#line 1140
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1142
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1145
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1146
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1149
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1150
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1153
  if (((int )os.ldv_35127.conn > 7 && (int )ns.ldv_35127.conn <= 7) && (int )ns.ldv_35127.conn > 2) {
#line 1155
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1157
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1157
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1158
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1159
    ascw->os = os;
#line 1160
    ascw->ns = ns;
#line 1161
    ascw->flags = flags;
#line 1162
    ascw->w.cb = & w_after_state_ch;
#line 1163
    ascw->done = done;
#line 1164
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1166
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1169
  return (rv);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1175
  __mptr = (struct drbd_work  const  *)w;
#line 1175
  ascw = (struct after_state_chg_work *)__mptr;
#line 1176
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1177
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1178
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1178
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1178);
    } else {

    }
#line 1179
    complete(ascw->done);
  } else {

  }
#line 1181
  kfree((void const   *)ascw);
#line 1183
  return (1);
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1188
  if (rv != 0) {
#line 1189
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1190
    val.i = 0U;
#line 1190
    val.ldv_35127.conn = 10U;
#line 1190
    mask.i = 0U;
#line 1190
    mask.ldv_35127.conn = 31U;
#line 1190
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1191
    return;
  } else {

  }
#line 1194
  switch ((int )mdev->state.ldv_35127.conn) {
  case 12: 
#line 1196
  val___0.i = 0U;
#line 1196
  val___0.ldv_35127.conn = 15U;
#line 1196
  mask___0.i = 0U;
#line 1196
  mask___0.ldv_35127.conn = 31U;
#line 1196
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1197
  goto ldv_45001;
  case 11: 
#line 1199
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1200
  goto ldv_45001;
  }
  ldv_45001: ;
#line 1203
  return;
}
}
#line 1211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  int tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1216
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1217
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1218
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1219
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1222
  fp = FP_DONT_CARE;
#line 1223
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1223
  if (tmp != 0) {
#line 1224
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1225
    put_ldev(mdev);
  } else {

  }
#line 1229
  drbd_bcast_state(mdev, ns);
#line 1231
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35127.disk > 7) || (int )os.ldv_35127.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35127.disk <= 7) && (int )ns.ldv_35127.pdsk <= 7)) {
#line 1233
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1238
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1241
    if (((int )os.ldv_35127.pdsk > 5 && (int )ns.ldv_35127.pdsk <= 5) || ((int )os.ldv_35127.conn <= 9 && (int )ns.ldv_35127.conn > 9)) {
#line 1243
      tl_clear(mdev);
#line 1244
      spin_lock_irq(& mdev->req_lock);
#line 1245
      __ns.i = mdev->state.i;
#line 1245
      __ns.ldv_35127.susp = 0U;
#line 1245
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1246
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1250
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35127.pdsk > 0) {
#line 1251
    drbd_send_uuids(mdev);
#line 1252
    drbd_send_state(mdev);
  } else {

  }
#line 1254
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1255
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1258
  if ((((int )os.ldv_35127.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35127.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1264
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1264
    if (tmp___0 != 0) {
#line 1265
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35127.disk > 7) {
#line 1267
        drbd_uuid_new_current(mdev);
#line 1268
        drbd_send_uuids(mdev);
      } else {

      }
#line 1270
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1274
  if ((int )ns.ldv_35127.pdsk <= 3) {
#line 1274
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1274
    if (tmp___1 != 0) {
#line 1275
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1276
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1279
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1280
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1281
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1285
  if (((int )ns.ldv_35127.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1287
    drbd_send_sizes(mdev, 0, 0);
#line 1288
    drbd_send_uuids(mdev);
#line 1289
    drbd_send_state(mdev);
  } else {

  }
#line 1293
  if ((int )ns.ldv_35127.conn > 9 && ((int )os.ldv_35127.aftr_isp != (int )ns.ldv_35127.aftr_isp || (int )os.ldv_35127.user_isp != (int )ns.ldv_35127.user_isp)) {
#line 1296
    drbd_send_state(mdev);
  } else {

  }
#line 1299
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1301
    suspend_other_sg(mdev);
  } else {

  }
#line 1305
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35127.conn > 9) {
#line 1306
    drbd_send_state(mdev);
  } else {

  }
#line 1309
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1311
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1314
  if ((((int )os.ldv_35127.conn <= 9 && (int )ns.ldv_35127.conn <= 9) && (int )os.ldv_35127.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1316
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1318
  if ((int )os.ldv_35127.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1321
    eh = EP_PASS_ON;
#line 1322
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1322
    if (tmp___2 != 0) {
#line 1323
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1324
      put_ldev(mdev);
    } else {

    }
#line 1327
    drbd_rs_cancel_all(mdev);
#line 1331
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1331
    if (tmp___3 == 0) {
#line 1331
      goto ldv_45013;
    } else {

    }
#line 1331
    tmp___4 = get_current();
#line 1331
    __wait.flags = 0U;
#line 1331
    __wait.private = (void *)tmp___4;
#line 1331
    __wait.func = & autoremove_wake_function;
#line 1331
    __wait.task_list.next = & __wait.task_list;
#line 1331
    __wait.task_list.prev = & __wait.task_list;
    ldv_45016: 
#line 1331
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1331
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1331
    if (tmp___5 == 0) {
#line 1331
      goto ldv_45015;
    } else {

    }
#line 1331
    schedule();
#line 1331
    goto ldv_45016;
    ldv_45015: 
#line 1331
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_45013: 
#line 1332
    mdev->rs_total = 0UL;
#line 1333
    mdev->rs_failed = 0UL;
#line 1334
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1336
    spin_lock_irq(& mdev->req_lock);
#line 1337
    __ns___0.i = mdev->state.i;
#line 1337
    __ns___0.ldv_35127.disk = 0U;
#line 1337
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1338
    spin_unlock_irq(& mdev->req_lock);
#line 1340
    if ((unsigned int )eh == 1U) {
#line 1341
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1344
  if ((int )os.ldv_35127.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1346
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1347
      tmp___6 = drbd_send_state(mdev);
#line 1347
      if (tmp___6 != 0) {
#line 1348
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that my disk is broken.\n");
      } else {
#line 1350
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state in drbd_io_error() failed\n");
      }
    } else {

    }
#line 1353
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1353
    if (tmp___7 == 0) {
#line 1353
      goto ldv_45019;
    } else {

    }
#line 1353
    tmp___8 = get_current();
#line 1353
    __wait___0.flags = 0U;
#line 1353
    __wait___0.private = (void *)tmp___8;
#line 1353
    __wait___0.func = & autoremove_wake_function;
#line 1353
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1353
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45022: 
#line 1353
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1353
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1353
    if (tmp___9 == 0) {
#line 1353
      goto ldv_45021;
    } else {

    }
#line 1353
    schedule();
#line 1353
    goto ldv_45022;
    ldv_45021: 
#line 1353
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_45019: 
#line 1354
    lc_destroy(mdev->resync);
#line 1355
    mdev->resync = 0;
#line 1356
    lc_destroy(mdev->act_log);
#line 1357
    mdev->act_log = 0;
#line 1358
    drbd_free_bc(mdev->ldev);
#line 1358
    mdev->ldev = 0;
#line 1362
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1363
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1367
  if ((int )ns.ldv_35127.disk > 3 && (int )ns.ldv_35127.pdsk > 3) {
#line 1367
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1367
    if (tmp___10 != 0) {
#line 1369
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1370
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1374
  if ((((int )os.ldv_35127.conn > 10 && (int )ns.ldv_35127.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1377
    resume_next_sg(mdev);
  } else {

  }
#line 1380
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1381
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1385
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1388
    if ((int )os.ldv_35127.aftr_isp != (int )ns.ldv_35127.aftr_isp) {
#line 1389
      resume_next_sg(mdev);
    } else {

    }
#line 1391
    tmp___11 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1391
    if (tmp___11 != 0) {
#line 1392
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1395
  drbd_md_sync(mdev);
#line 1396
  return;
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1401
  thi = (struct drbd_thread *)arg;
#line 1402
  mdev = thi->mdev;
  restart: 
#line 1407
  retval = (*(thi->function))(thi);
#line 1409
  tmp = spinlock_check(& thi->t_lock);
#line 1409
  flags = _raw_spin_lock_irqsave(tmp);
#line 1421
  if ((unsigned int )thi->t_state == 3U) {
#line 1422
    tmp___0 = get_current();
#line 1422
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1423
    thi->t_state = Running;
#line 1424
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1425
    goto restart;
  } else {

  }
#line 1428
  thi->task = 0;
#line 1429
  thi->t_state = None;
#line 1430
  __asm__  volatile   ("mfence": : : "memory");
#line 1431
  complete(& thi->stop);
#line 1432
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1434
  tmp___1 = get_current();
#line 1434
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1437
  module_put(& __this_module);
#line 1438
  return (retval);
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1444
  spinlock_check(& thi->t_lock);
#line 1444
  __raw_spin_lock_init(& thi->t_lock.ldv_5623.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1445
  thi->task = 0;
#line 1446
  thi->t_state = None;
#line 1447
  thi->function = func;
#line 1448
  thi->mdev = mdev;
#line 1449
  return;
}
}
#line 1451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1453
  mdev = thi->mdev;
#line 1457
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1464
  tmp = spinlock_check(& thi->t_lock);
#line 1464
  flags = _raw_spin_lock_irqsave(tmp);
#line 1466
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1468
  tmp___0 = get_current();
#line 1468
  tmp___1 = get_current();
#line 1468
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1472
  tmp___2 = try_module_get(& __this_module);
#line 1472
  if (tmp___2 == 0) {
#line 1473
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1474
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1475
    return (0);
  } else {

  }
#line 1478
  init_completion(& thi->stop);
#line 1479
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1479
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1479);
  } else {

  }
#line 1480
  thi->reset_cpu_mask = 1;
#line 1481
  thi->t_state = Running;
#line 1482
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1483
  tmp___3 = get_current();
#line 1483
  flush_signals(tmp___3);
#line 1485
  tmp___4 = mdev_to_minor(mdev);
#line 1485
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1488
  tmp___5 = IS_ERR((void const   *)nt);
#line 1488
  if (tmp___5 != 0L) {
#line 1489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1491
    module_put(& __this_module);
#line 1492
    return (0);
  } else {

  }
#line 1494
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1494
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1495
  thi->task = nt;
#line 1496
  thi->t_state = Running;
#line 1497
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1498
  wake_up_process(nt);
#line 1499
  goto ldv_45055;
  case 2U: 
#line 1501
  thi->t_state = Restarting;
#line 1502
  tmp___7 = get_current();
#line 1502
  tmp___8 = get_current();
#line 1502
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1508
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1509
  goto ldv_45055;
  }
  ldv_45055: ;
#line 1512
  return (1);
}
}
#line 1516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1520
  ns = restart != 0 ? Restarting : Exiting;
#line 1523
  tmp = spinlock_check(& thi->t_lock);
#line 1523
  flags = _raw_spin_lock_irqsave(tmp);
#line 1525
  if ((unsigned int )thi->t_state == 0U) {
#line 1526
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1527
    if (restart != 0) {
#line 1528
      drbd_thread_start(thi);
    } else {

    }
#line 1529
    return;
  } else {

  }
#line 1532
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1533
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1534
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1535
      return;
    } else {

    }
#line 1538
    thi->t_state = ns;
#line 1539
    __asm__  volatile   ("mfence": : : "memory");
#line 1540
    init_completion(& thi->stop);
#line 1541
    tmp___0 = get_current();
#line 1541
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1542
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1546
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1548
  if (wait != 0) {
#line 1549
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1550
  return;
}
}
#line 1560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1565
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1565
  if (tmp != 0U) {
#line 1566
    return;
  } else {

  }
#line 1568
  tmp___0 = mdev_to_minor(mdev);
#line 1568
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1568
  ord = (int )(tmp___0 % tmp___1);
#line 1569
  cpu = -1;
#line 1569
  goto ldv_45076;
  ldv_45075: 
#line 1570
  tmp___2 = ord;
#line 1570
  ord = ord - 1;
#line 1570
  if (tmp___2 == 0) {
#line 1571
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1572
    return;
  } else {

  }
  ldv_45076: 
#line 1569
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1569
  cpu = (int )tmp___3;
#line 1569
  if (cpu < nr_cpu_ids) {
#line 1570
    goto ldv_45075;
  } else {

  }
#line 1576
  cpumask_setall(mdev->cpu_mask);
#line 1577
  return;
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1588
  tmp = get_current();
#line 1588
  p = tmp;
#line 1589
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1594
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1594
  if (_b != 0) {
#line 1594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1594);
  } else {

  }
#line 1594
  if (_b != 0) {
#line 1595
    return;
  } else {

  }
#line 1596
  if (thi->reset_cpu_mask == 0) {
#line 1597
    return;
  } else {

  }
#line 1598
  thi->reset_cpu_mask = 0;
#line 1599
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1600
  return;
}
}
#line 1604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1610
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1610
  if (_b != 0) {
#line 1610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1610);
  } else {

  }
#line 1610
  if (_b != 0) {
#line 1610
    return (0);
  } else {

  }
#line 1611
  _b___0 = size == 0UL;
#line 1611
  if (_b___0 != 0) {
#line 1611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1611);
  } else {

  }
#line 1611
  if (_b___0 != 0) {
#line 1611
    return (0);
  } else {

  }
#line 1613
  h->magic = 1728214147U;
#line 1614
  tmp = __fswab16((int )((__u16 )cmd));
#line 1614
  h->command = tmp;
#line 1615
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1615
  h->length = tmp___0;
#line 1617
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1619
  ok = (size_t )sent == size;
#line 1620
  if (ok == 0) {
#line 1621
    tmp___1 = cmdname(cmd);
#line 1621
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1623
  return (ok);
}
}
#line 1629 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1632
  ok = 0;
#line 1635
  if (use_data_socket != 0) {
#line 1636
    ldv_mutex_lock_129(& mdev->data.mutex);
#line 1637
    sock = mdev->data.socket;
  } else {
#line 1639
    ldv_mutex_lock_130(& mdev->meta.mutex);
#line 1640
    sock = mdev->meta.socket;
  }
#line 1645
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1645
  if (tmp != 0L) {
#line 1646
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1648
  if (use_data_socket != 0) {
#line 1649
    ldv_mutex_unlock_131(& mdev->data.mutex);
  } else {
#line 1651
    ldv_mutex_unlock_132(& mdev->meta.mutex);
  }
#line 1652
  return (ok);
}
}
#line 1655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1661
  h.magic = 1728214147U;
#line 1662
  tmp = __fswab16((int )((__u16 )cmd));
#line 1662
  h.command = tmp;
#line 1663
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1663
  h.length = tmp___0;
#line 1665
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1665
  if (tmp___1 == 0) {
#line 1666
    return (0);
  } else {

  }
#line 1668
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1668
  ok = tmp___2 == 8;
#line 1670
  if (ok != 0) {
#line 1670
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1670
    if ((size_t )tmp___3 == size) {
#line 1670
      tmp___4 = 1;
    } else {
#line 1670
      tmp___4 = 0;
    }
  } else {
#line 1670
    tmp___4 = 0;
  }
#line 1670
  ok = tmp___4;
#line 1673
  drbd_put_data_sock___0(mdev);
#line 1675
  return (ok);
}
}
#line 1678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1683
  apv = mdev->agreed_pro_version;
#line 1685
  if (apv > 87) {
#line 1685
    if (apv == 88) {
#line 1685
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1685
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1685
      tmp___0 = 140;
    }
#line 1685
    size = tmp___0;
  } else {
#line 1685
    size = 12;
  }
#line 1693
  ldv_mutex_lock_133(& mdev->data.mutex);
#line 1694
  sock = mdev->data.socket;
#line 1696
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1696
  if (tmp___2 != 0L) {
#line 1697
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1699
    p = & mdev->data.sbuf.rs_param_89;
#line 1702
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1704
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1704
    p->rate = tmp___1;
#line 1706
    if (apv > 87) {
#line 1707
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1708
    if (apv > 88) {
#line 1709
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1711
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1713
    rv = 0;
  }
#line 1715
  ldv_mutex_unlock_134(& mdev->data.mutex);
#line 1717
  return (rv);
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1725
  size = 32;
#line 1727
  if (mdev->agreed_pro_version > 86) {
#line 1728
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1728
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1732
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1732
  p = (struct p_protocol *)tmp___0;
#line 1733
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1734
    return (0);
  } else {

  }
#line 1736
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1736
  p->protocol = tmp___1;
#line 1737
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1737
  p->after_sb_0p = tmp___2;
#line 1738
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1738
  p->after_sb_1p = tmp___3;
#line 1739
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1739
  p->after_sb_2p = tmp___4;
#line 1740
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1740
  p->two_primaries = tmp___5;
#line 1742
  cf = 0;
#line 1743
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1744
    cf = cf | 1;
  } else {

  }
#line 1745
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1746
    if (mdev->agreed_pro_version > 91) {
#line 1747
      cf = cf | 2;
    } else {
#line 1749
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1750
      kfree((void const   *)p);
#line 1751
      return (0);
    }
  } else {

  }
#line 1754
  tmp___6 = __fswab32((__u32 )cf);
#line 1754
  p->conn_flags = tmp___6;
#line 1756
  if (mdev->agreed_pro_version > 86) {
#line 1757
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1759
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1761
  kfree((void const   *)p);
#line 1762
  return (rv);
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1770
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1770
  if (tmp == 0) {
#line 1771
    return (1);
  } else {

  }
#line 1773
  i = 0;
#line 1773
  goto ldv_45142;
  ldv_45141: ;
#line 1774
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1774
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1774
    p.uuid[i] = tmp___0;
  } else {
#line 1774
    p.uuid[i] = 0ULL;
  }
#line 1773
  i = i + 1;
  ldv_45142: ;
#line 1773
  if (i <= 3) {
#line 1774
    goto ldv_45141;
  } else {

  }
#line 1776
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1777
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1777
  p.uuid[4] = tmp___1;
#line 1778
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1779
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1779
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1780
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1817UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1781
  tmp___3 = __fswab64(uuid_flags);
#line 1781
  p.uuid[5] = tmp___3;
#line 1783
  put_ldev(mdev);
#line 1785
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1785
  return (tmp___4);
}
}
#line 1789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1791
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1791
  return (tmp);
}
}
#line 1794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1796
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1796
  return (tmp);
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1804
  tmp = __fswab64(val);
#line 1804
  p.uuid = tmp;
#line 1806
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1806
  return (tmp___0);
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1817
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1817
  if (tmp != 0) {
#line 1818
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1818
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1818);
    } else {

    }
#line 1819
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1820
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1821
    q_order_type = drbd_queue_order_type(mdev);
#line 1822
    put_ldev(mdev);
  } else {
#line 1824
    d_size = 0UL;
#line 1825
    u_size = 0UL;
#line 1826
    q_order_type = 0;
  }
#line 1829
  tmp___0 = __fswab64((__u64 )d_size);
#line 1829
  p.d_size = tmp___0;
#line 1830
  tmp___1 = __fswab64((__u64 )u_size);
#line 1830
  p.u_size = tmp___1;
#line 1831
  if (trigger_reply == 0) {
#line 1831
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1831
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1831
    tmp___3 = 0ULL;
  }
#line 1831
  tmp___4 = __fswab64(tmp___3);
#line 1831
  p.c_size = tmp___4;
#line 1832
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1832
  tmp___6 = __fswab32(tmp___5);
#line 1832
  p.max_segment_size = tmp___6;
#line 1833
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1833
  p.queue_order_type = tmp___7;
#line 1834
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1834
  p.dds_flags = tmp___8;
#line 1836
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1838
  return (ok);
}
}
#line 1845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1849
  ok = 0;
#line 1853
  drbd_state_lock___0(mdev);
#line 1855
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 1857
  tmp = __fswab32(mdev->state.i);
#line 1857
  p.state = tmp;
#line 1858
  sock = mdev->data.socket;
#line 1860
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1860
  if (tmp___0 != 0L) {
#line 1861
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1865
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 1867
  drbd_state_unlock(mdev);
#line 1868
  return (ok);
}
}
#line 1871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1876
  tmp = __fswab32(mask.i);
#line 1876
  p.mask = tmp;
#line 1877
  tmp___0 = __fswab32(val.i);
#line 1877
  p.val = tmp___0;
#line 1879
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1879
  return (tmp___1);
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1887
  tmp = __fswab32((__u32 )retcode);
#line 1887
  p.retcode = tmp;
#line 1889
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1889
  return (tmp___0);
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1906
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1908
    return (0);
  } else {

  }
#line 1910
  if (c->bit_offset >= c->bm_bits) {
#line 1911
    return (0);
  } else {

  }
#line 1914
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1915
  memset((void *)(& p->code), 0, 4087UL);
#line 1917
  plain_bits = 0UL;
#line 1922
  toggle = 2U;
  ldv_45196: ;
#line 1927
  if (toggle == 0U) {
#line 1927
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1927
    tmp = tmp___0;
  } else {
#line 1927
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1927
    tmp = tmp___1;
  }
#line 1929
  if (tmp == 0xffffffffffffffffUL) {
#line 1930
    tmp = c->bm_bits;
  } else {

  }
#line 1931
  rl = tmp - c->bit_offset;
#line 1933
  if (toggle == 2U) {
#line 1934
    if (rl == 0UL) {
#line 1937
      DCBP_set_start(p, 1);
#line 1939
      toggle = toggle == 0U;
#line 1940
      goto ldv_45194;
    } else {

    }
#line 1942
    DCBP_set_start(p, 0);
  } else {

  }
#line 1947
  if (rl == 0UL) {
#line 1948
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 1950
    return (-1);
  } else {

  }
#line 1953
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1954
  if (bits == -105) {
#line 1955
    goto ldv_45195;
  } else {

  }
#line 1956
  if (bits <= 0) {
#line 1957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 1958
    return (0);
  } else {

  }
#line 1961
  toggle = toggle == 0U;
#line 1962
  plain_bits = plain_bits + rl;
#line 1963
  c->bit_offset = tmp;
  ldv_45194: ;
#line 1964
  if (c->bit_offset < c->bm_bits) {
#line 1965
    goto ldv_45196;
  } else {

  }
  ldv_45195: 
#line 1966
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1968
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1971
    c->bit_offset = c->bit_offset - plain_bits;
#line 1972
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1973
    c->bit_offset = c->word_offset * 64UL;
#line 1974
    return (0);
  } else {

  }
#line 1979
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1982
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1984
  return ((int )len);
}
}
#line 1988 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30205 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1991
  p = (struct p_compressed_bm *)h;
#line 1996
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1998
  if (len < 0) {
#line 1999
    return (FAILED);
  } else {

  }
#line 2001
  if (len != 0) {
#line 2002
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2003
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2006
    c->packets[0] = c->packets[0] + 1U;
#line 2007
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2009
    if (c->bit_offset >= c->bm_bits) {
#line 2010
      len = 0;
    } else {

    }
  } else {
#line 2014
    __min1 = 511UL;
#line 2014
    __min2 = c->bm_words - c->word_offset;
#line 2014
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2015
    len = (int )((unsigned int )num_words * 8U);
#line 2016
    if (len != 0) {
#line 2017
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2018
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2020
    c->word_offset = c->word_offset + num_words;
#line 2021
    c->bit_offset = c->word_offset * 64UL;
#line 2023
    c->packets[1] = c->packets[1] + 1U;
#line 2024
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2026
    if (c->bit_offset > c->bm_bits) {
#line 2027
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2029
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2031
  if (ok == 2) {
#line 2032
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2033
  return ((enum ldv_30205 )ok);
}
}
#line 2037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30205 tmp___5 ;

  {
#line 2043
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2043
  if (_b != 0) {
#line 2043
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2043);
  } else {

  }
#line 2043
  if (_b != 0) {
#line 2043
    return (0);
  } else {

  }
#line 2047
  tmp = __get_free_pages(16U, 0U);
#line 2047
  p = (struct p_header *)tmp;
#line 2048
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2050
    return (0);
  } else {

  }
#line 2053
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2053
  if (tmp___2 != 0) {
#line 2054
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2054
    if (tmp___1 != 0) {
#line 2055
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2056
      drbd_bm_set_all(mdev);
#line 2057
      tmp___0 = drbd_bm_write(mdev);
#line 2057
      if (tmp___0 != 0) {
#line 2061
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2063
        drbd_md_clear_flag(mdev, 8);
#line 2064
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2067
    put_ldev(mdev);
  } else {

  }
#line 2070
  tmp___3 = drbd_bm_bits(mdev);
#line 2070
  tmp___4 = drbd_bm_words(mdev);
#line 2070
  __constr_expr_0.bm_bits = tmp___3;
#line 2070
  __constr_expr_0.bm_words = tmp___4;
#line 2070
  __constr_expr_0.bit_offset = 0UL;
#line 2070
  __constr_expr_0.word_offset = 0UL;
#line 2070
  __constr_expr_0.packets[0] = 0U;
#line 2070
  __constr_expr_0.packets[1] = 0U;
#line 2070
  __constr_expr_0.bytes[0] = 0U;
#line 2070
  __constr_expr_0.bytes[1] = 0U;
#line 2070
  c = __constr_expr_0;
  ldv_45223: 
#line 2076
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2076
  ret = (int )tmp___5;
#line 2077
  if (ret == 0) {
#line 2078
    goto ldv_45223;
  } else {

  }
#line 2079
  free_pages((unsigned long )p, 0U);
#line 2080
  return (ret == 2);
}
}
#line 2083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2087
  tmp = drbd_get_data_sock___0(mdev);
#line 2087
  if (tmp == 0) {
#line 2088
    return (-1);
  } else {

  }
#line 2089
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2089
  err = tmp___0 == 0;
#line 2090
  drbd_put_data_sock___0(mdev);
#line 2091
  return (err);
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2099
  p.barrier = barrier_nr;
#line 2100
  tmp = __fswab32(set_size);
#line 2100
  p.set_size = tmp;
#line 2102
  if ((int )mdev->state.ldv_35127.conn <= 9) {
#line 2103
    return (0);
  } else {

  }
#line 2104
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2106
  return (ok);
}
}
#line 2117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2125
  p.sector = sector;
#line 2126
  p.block_id = block_id;
#line 2127
  p.blksize = blksize;
#line 2128
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2128
  tmp___0 = __fswab32((__u32 )tmp);
#line 2128
  p.seq_num = tmp___0;
#line 2130
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35127.conn <= 9) {
#line 2131
    return (0);
  } else {

  }
#line 2132
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2134
  return (ok);
}
}
#line 2137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2140
  header_size = 24;
#line 2142
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2144
  tmp = __fswab32((__u32 )data_size);
#line 2144
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2144
  return (tmp___0);
}
}
#line 2148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2151
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2151
  return (tmp);
}
}
#line 2160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2163
  tmp = __fswab32(e->size);
#line 2163
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2163
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2163
  return (tmp___1);
}
}
#line 2171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2174
  tmp = __fswab64(block_id);
#line 2174
  tmp___0 = __fswab32((__u32 )blksize);
#line 2174
  tmp___1 = __fswab64((__u64 )sector);
#line 2174
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2174
  return (tmp___2);
}
}
#line 2180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2186
  tmp = __fswab64((__u64 )sector);
#line 2186
  p.sector = tmp;
#line 2187
  p.block_id = block_id;
#line 2188
  tmp___0 = __fswab32((__u32 )size);
#line 2188
  p.blksize = tmp___0;
#line 2190
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2192
  return (ok);
}
}
#line 2195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2203
  tmp = __fswab64((__u64 )sector);
#line 2203
  p.sector = tmp;
#line 2204
  p.block_id = 1728263026ULL;
#line 2205
  tmp___0 = __fswab32((__u32 )size);
#line 2205
  p.blksize = tmp___0;
#line 2207
  p.head.magic = 1728214147U;
#line 2208
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2208
  p.head.command = tmp___1;
#line 2209
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2209
  p.head.length = tmp___2;
#line 2211
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2213
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2213
  ok = tmp___3 == 32;
#line 2214
  if (ok != 0) {
#line 2214
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2214
    if (tmp___4 == digest_size) {
#line 2214
      tmp___5 = 1;
    } else {
#line 2214
      tmp___5 = 0;
    }
  } else {
#line 2214
    tmp___5 = 0;
  }
#line 2214
  ok = tmp___5;
#line 2216
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2218
  return (ok);
}
}
#line 2221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2226
  tmp = __fswab64((__u64 )sector);
#line 2226
  p.sector = tmp;
#line 2227
  p.block_id = 1728261953ULL;
#line 2228
  tmp___0 = __fswab32((__u32 )size);
#line 2228
  p.blksize = tmp___0;
#line 2230
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2232
  return (ok);
}
}
#line 2239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2244
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2244
    tmp___0 = 1;
  } else {
#line 2244
    tmp = get_t_state(& mdev->asender);
#line 2244
    if ((unsigned int )tmp != 1U) {
#line 2244
      tmp___0 = 1;
    } else
#line 2244
    if ((int )mdev->state.ldv_35127.conn <= 9) {
#line 2244
      tmp___0 = 1;
    } else {
#line 2244
      tmp___0 = 0;
    }
  }
#line 2244
  drop_it = tmp___0;
#line 2249
  if (drop_it != 0) {
#line 2250
    return (1);
  } else {

  }
#line 2252
  mdev->ko_count = mdev->ko_count - 1U;
#line 2252
  drop_it = mdev->ko_count == 0U;
#line 2253
  if (drop_it == 0) {
#line 2254
    tmp___1 = get_current();
#line 2254
    tmp___2 = get_current();
#line 2254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2256
    request_ping(mdev);
  } else {

  }
#line 2259
  return (drop_it);
}
}
#line 2283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2286
  tmp = kmap(page);
#line 2286
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2286
  sent = tmp___0;
#line 2287
  kunmap(page);
#line 2288
  if ((size_t )sent == size) {
#line 2289
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2290
  return ((size_t )sent == size);
}
}
#line 2293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2296
  tmp = current_thread_info___1();
#line 2296
  oldfs = tmp->addr_limit;
#line 2298
  len = (int )size;
#line 2306
  if (disable_sendpage != 0) {
#line 2307
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2307
    return (tmp___0);
  } else {
#line 2306
    tmp___1 = page_count(page);
#line 2306
    if (tmp___1 <= 0) {
#line 2307
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2307
      return (tmp___0);
    } else {
#line 2306
      tmp___2 = PageSlab(page);
#line 2306
      if (tmp___2 != 0) {
#line 2307
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2307
        return (tmp___0);
      } else {

      }
    }
  }
#line 2309
  msg_flags = msg_flags | 16384U;
#line 2310
  drbd_update_congested(mdev);
#line 2311
  tmp___3 = current_thread_info___1();
#line 2311
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2311
  tmp___3->addr_limit = __constr_expr_0;
  ldv_45323: 
#line 2313
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2313
  sent = (int )tmp___4;
#line 2316
  if (sent == -11) {
#line 2317
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2317
    if (tmp___5 != 0) {
#line 2319
      goto ldv_45320;
    } else {
#line 2321
      goto ldv_45321;
    }
  } else {

  }
#line 2323
  if (sent <= 0) {
#line 2324
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2326
    goto ldv_45320;
  } else {

  }
#line 2328
  len = len - sent;
#line 2329
  offset = offset + sent;
  ldv_45321: ;
#line 2330
  if (len > 0) {
#line 2331
    goto ldv_45323;
  } else {

  }
  ldv_45320: 
#line 2331
  tmp___6 = current_thread_info___1();
#line 2331
  tmp___6->addr_limit = oldfs;
#line 2332
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2334
  ok = len == 0;
#line 2335
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2335
  if (tmp___7 != 0L) {
#line 2336
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2337
  return (ok);
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2345
  bvec = bio->bi_io_vec;
#line 2345
  i = 0;
#line 2345
  goto ldv_45331;
  ldv_45330: 
#line 2346
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2346
  if (tmp == 0) {
#line 2349
    return (0);
  } else {

  }
#line 2345
  bvec = bvec + 1;
#line 2345
  i = i + 1;
  ldv_45331: ;
#line 2345
  if ((int )bio->bi_vcnt > i) {
#line 2346
    goto ldv_45330;
  } else {

  }

#line 2351
  return (1);
}
}
#line 2354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2359
  bvec = bio->bi_io_vec;
#line 2359
  i = 0;
#line 2359
  goto ldv_45340;
  ldv_45339: 
#line 2360
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2360
  if (tmp == 0) {
#line 2363
    return (0);
  } else {

  }
#line 2359
  bvec = bvec + 1;
#line 2359
  i = i + 1;
  ldv_45340: ;
#line 2359
  if ((int )bio->bi_vcnt > i) {
#line 2360
    goto ldv_45339;
  } else {

  }

#line 2365
  return (1);
}
}
#line 2368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2370
  page = e->pages;
#line 2371
  len = e->size;
#line 2373
  goto ldv_45354;
  ldv_45353: 
#line 2374
  __min1 = len;
#line 2374
  __min2 = 4096U;
#line 2374
  l = __min1 < __min2 ? __min1 : __min2;
#line 2375
  tmp = page_chain_next(page);
#line 2375
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2375
  if (tmp___0 == 0) {
#line 2377
    return (0);
  } else {

  }
#line 2378
  len = len - l;
#line 2373
  page = page_chain_next(page);
  ldv_45354: ;
#line 2373
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2373
    tmp___1 = page_chain_next(page);
#line 2373
    __builtin_prefetch((void const   *)tmp___1);
#line 2373
    if (1 != 0) {
#line 2374
      goto ldv_45353;
    } else {
#line 2376
      goto ldv_45355;
    }
  } else {

  }
  ldv_45355: ;
#line 2380
  return (1);
}
}
#line 2386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;

  {
#line 2388
  ok = 1;
#line 2390
  dp_flags = 0U;
#line 2394
  tmp = drbd_get_data_sock___0(mdev);
#line 2394
  if (tmp == 0) {
#line 2395
    return (0);
  } else {

  }
#line 2397
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2397
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2397
    dgs = (int )tmp___0;
  } else {
#line 2397
    dgs = 0;
  }
#line 2400
  p.head.magic = 1728214147U;
#line 2401
  p.head.command = 0U;
#line 2402
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2402
  p.head.length = tmp___1;
#line 2405
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2405
  p.sector = tmp___2;
#line 2406
  p.block_id = (u64 )req;
#line 2407
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2407
  req->seq_num = tmp___3;
#line 2407
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2407
  p.seq_num = tmp___4;
#line 2409
  dp_flags = 0U;
#line 2414
  if (((req->master_bio)->bi_rw & 16UL) != 0UL) {
#line 2415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have set DP_HARDBARRIER\n");
  } else {

  }
#line 2418
  if (((req->master_bio)->bi_rw & 32UL) != 0UL) {
#line 2419
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2422
  if (((req->master_bio)->bi_rw & 512UL) != 0UL) {
#line 2423
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2424
  if ((int )mdev->state.ldv_35127.conn > 15 && (int )mdev->state.ldv_35127.conn <= 21) {
#line 2426
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2428
  tmp___5 = __fswab32(dp_flags);
#line 2428
  p.dp_flags = tmp___5;
#line 2429
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2430
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2430
  ok = tmp___6 == 32;
#line 2432
  if (ok != 0 && dgs != 0) {
#line 2433
    dgb = mdev->int_dig_out;
#line 2434
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2435
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2437
  if (ok != 0) {
#line 2438
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2439
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2441
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2444
  drbd_put_data_sock___0(mdev);
#line 2446
  return (ok);
}
}
#line 2453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2461
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2461
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2461
    dgs = (int )tmp;
  } else {
#line 2461
    dgs = 0;
  }
#line 2464
  p.head.magic = 1728214147U;
#line 2465
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2465
  p.head.command = tmp___0;
#line 2466
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2466
  p.head.length = tmp___1;
#line 2469
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2469
  p.sector = tmp___2;
#line 2470
  p.block_id = e->block_id;
#line 2477
  tmp___3 = drbd_get_data_sock___0(mdev);
#line 2477
  if (tmp___3 == 0) {
#line 2478
    return (0);
  } else {

  }
#line 2480
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2480
  ok = tmp___4 == 32;
#line 2482
  if (ok != 0 && dgs != 0) {
#line 2483
    dgb = mdev->int_dig_out;
#line 2484
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2485
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2487
  if (ok != 0) {
#line 2488
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2490
  drbd_put_data_sock___0(mdev);
#line 2492
  return (ok);
}
}
#line 2511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2516
  sent = 0;
#line 2518
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2519
    return (-1000);
  } else {

  }
#line 2523
  iov.iov_base = buf;
#line 2524
  iov.iov_len = size;
#line 2526
  msg.msg_name = 0;
#line 2527
  msg.msg_namelen = 0;
#line 2528
  msg.msg_control = 0;
#line 2529
  msg.msg_controllen = 0UL;
#line 2530
  msg.msg_flags = msg_flags | 16384U;
#line 2532
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2533
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2534
    drbd_update_congested(mdev);
  } else {

  }
  ldv_45387: 
#line 2546
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2547
  if (rv == -11) {
#line 2548
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2548
    if (tmp != 0) {
#line 2549
      goto ldv_45385;
    } else {
#line 2551
      goto ldv_45386;
    }
  } else {

  }
#line 2553
  if (rv == 0) {
#line 2553
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2553);
  } else {

  }
#line 2554
  if (rv == -4) {
#line 2555
    tmp___0 = get_current();
#line 2555
    flush_signals(tmp___0);
#line 2556
    rv = 0;
  } else {

  }
#line 2558
  if (rv < 0) {
#line 2559
    goto ldv_45385;
  } else {

  }
#line 2560
  sent = sent + rv;
#line 2561
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2562
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_45386: ;
#line 2563
  if ((size_t )sent < size) {
#line 2564
    goto ldv_45387;
  } else {

  }
  ldv_45385: ;
#line 2565
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2566
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2568
  if (rv <= 0) {
#line 2569
    if (rv != -11) {
#line 2570
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2573
      val.i = 0U;
#line 2573
      val.ldv_35127.conn = 4U;
#line 2573
      mask.i = 0U;
#line 2573
      mask.ldv_35127.conn = 31U;
#line 2573
      drbd_force_state(mdev, mask, val);
    } else {
#line 2575
      val___0.i = 0U;
#line 2575
      val___0.ldv_35127.conn = 3U;
#line 2575
      mask___0.i = 0U;
#line 2575
      mask___0.ldv_35127.conn = 31U;
#line 2575
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2578
  return (sent);
}
}
#line 2581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2583
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2585
  rv = 0;
#line 2587
  _lock_kernel("drbd_open", "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
               2587);
#line 2588
  tmp = spinlock_check(& mdev->req_lock);
#line 2588
  flags = _raw_spin_lock_irqsave(tmp);
#line 2592
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2593
    if ((mode & 2U) != 0U) {
#line 2594
      rv = -30;
    } else
#line 2595
    if (allow_oos == 0) {
#line 2596
      rv = -124;
    } else {

    }
  } else {

  }
#line 2599
  if (rv == 0) {
#line 2600
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2601
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2602
  _unlock_kernel("drbd_open", "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                 2602);
#line 2604
  return (rv);
}
}
#line 2607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2609
  mdev = (struct drbd_conf *)gd->private_data;
#line 2610
  _lock_kernel("drbd_release", "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
               2610);
#line 2611
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2612
  _unlock_kernel("drbd_release", "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                 2612);
#line 2613
  return (0);
}
}
#line 2616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2618
  mdev = (struct drbd_conf *)q->queuedata;
#line 2621
  spin_lock_irq(q->queue_lock);
#line 2622
  blk_remove_plug(q);
#line 2623
  spin_unlock_irq(q->queue_lock);
#line 2626
  spin_lock_irq(& mdev->req_lock);
#line 2627
  if ((int )mdev->state.ldv_35127.pdsk > 3 && (int )mdev->state.ldv_35127.conn > 9) {
#line 2628
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2628
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2628);
    } else {

    }
#line 2629
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2629
    if (tmp___0 != 0) {
#line 2634
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2634
      if (tmp != 0) {
#line 2635
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2639
  spin_unlock_irq(& mdev->req_lock);
#line 2641
  if ((int )mdev->state.ldv_35127.disk > 3) {
#line 2642
    drbd_kick_lo(mdev);
  } else {

  }
#line 2643
  return;
}
}
#line 2645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2649
  __constr_expr_0.rate = 250;
#line 2649
  __constr_expr_0.after = -1;
#line 2649
  __constr_expr_0.al_extents = 127;
#line 2649
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2649
  __constr_expr_0.verify_alg_len = 0;
#line 2649
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2649
  __constr_expr_0.cpu_mask_len = 0;
#line 2649
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2649
  __constr_expr_0.csums_alg_len = 0;
#line 2649
  __constr_expr_0.use_rle = 0U;
#line 2649
  mdev->sync_conf = __constr_expr_0;
#line 2661
  __constr_expr_1.ldv_35127.role = 2U;
#line 2661
  __constr_expr_1.ldv_35127.peer = 0U;
#line 2661
  __constr_expr_1.ldv_35127.conn = 0U;
#line 2661
  __constr_expr_1.ldv_35127.disk = 0U;
#line 2661
  __constr_expr_1.ldv_35127.pdsk = 6U;
#line 2661
  __constr_expr_1.ldv_35127.susp = 0U;
#line 2661
  __constr_expr_1.ldv_35127.aftr_isp = (unsigned char)0;
#line 2661
  __constr_expr_1.ldv_35127.peer_isp = (unsigned char)0;
#line 2661
  __constr_expr_1.ldv_35127.user_isp = (unsigned char)0;
#line 2661
  __constr_expr_1.ldv_35127._pad = (unsigned short)0;
#line 2661
  mdev->state = __constr_expr_1;
#line 2662
  return;
}
}
#line 2671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2676
  drbd_set_defaults(mdev);
#line 2681
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2683
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2684
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2685
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2686
  atomic_set(& mdev->unacked_cnt, 0);
#line 2687
  atomic_set(& mdev->local_cnt, 0);
#line 2688
  atomic_set(& mdev->net_cnt, 0);
#line 2689
  atomic_set(& mdev->packet_seq, 0);
#line 2690
  atomic_set(& mdev->pp_in_use, 0);
#line 2692
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2693
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2694
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2695
  sema_init(& mdev->data.work.s, 0);
#line 2696
  sema_init(& mdev->meta.work.s, 0);
#line 2697
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2699
  spinlock_check(& mdev->data.work.q_lock);
#line 2699
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5623.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2700
  spinlock_check(& mdev->meta.work.q_lock);
#line 2700
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5623.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2702
  spinlock_check(& mdev->al_lock);
#line 2702
  __raw_spin_lock_init(& mdev->al_lock.ldv_5623.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2703
  spinlock_check(& mdev->req_lock);
#line 2703
  __raw_spin_lock_init(& mdev->req_lock.ldv_5623.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2704
  spinlock_check(& mdev->peer_seq_lock);
#line 2704
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5623.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2705
  spinlock_check(& mdev->epoch_lock);
#line 2705
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5623.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2707
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2708
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2709
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2710
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2711
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2712
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2713
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2714
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2715
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2716
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2717
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2718
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2720
  mdev->resync_work.cb = & w_resync_inactive;
#line 2721
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2722
  mdev->md_sync_work.cb = & w_md_sync;
#line 2723
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2724
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2725
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2726
  mdev->resync_timer.function = & resync_timer_fn;
#line 2727
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2728
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2729
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2731
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2732
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2733
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2734
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2735
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2737
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2738
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2739
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2741
  mdev->agreed_pro_version = 94;
#line 2742
  mdev->write_ordering = WO_bio_barrier;
#line 2743
  mdev->resync_wenr = 4294967295U;
#line 2744
  return;
}
}
#line 2746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  unsigned long tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 2748
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2753
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2753
  if (tmp___0 != 0) {
#line 2754
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2755
  tmp___11 = 0UL;
#line 2755
  mdev->rs_mark_time = tmp___11;
#line 2755
  tmp___10 = tmp___11;
#line 2755
  mdev->rs_mark_left = tmp___10;
#line 2755
  tmp___9 = tmp___10;
#line 2755
  mdev->rs_failed = tmp___9;
#line 2755
  tmp___8 = tmp___9;
#line 2755
  mdev->rs_total = tmp___8;
#line 2755
  tmp___7 = tmp___8;
#line 2755
  mdev->rs_start = tmp___7;
#line 2755
  tmp___6 = tmp___7;
#line 2755
  mdev->p_size = tmp___6;
#line 2755
  tmp___5 = (unsigned int )tmp___6;
#line 2755
  mdev->writ_cnt = tmp___5;
#line 2755
  tmp___4 = tmp___5;
#line 2755
  mdev->send_cnt = tmp___4;
#line 2755
  tmp___3 = tmp___4;
#line 2755
  mdev->recv_cnt = tmp___3;
#line 2755
  tmp___2 = tmp___3;
#line 2755
  mdev->read_cnt = tmp___2;
#line 2755
  tmp___1 = tmp___2;
#line 2755
  mdev->bm_writ_cnt = tmp___1;
#line 2755
  mdev->al_writ_cnt = tmp___1;
#line 2767
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2767
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2767);
  } else {

  }
#line 2769
  drbd_set_my_capacity(mdev, 0UL);
#line 2770
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2772
    drbd_bm_resize(mdev, 0UL, 1);
#line 2773
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2776
  drbd_free_resources(mdev);
#line 2782
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2782
  if (tmp___12 == 0) {
#line 2782
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2782);
  } else {

  }
#line 2783
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2783
  if (tmp___13 == 0) {
#line 2783
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2783);
  } else {

  }
#line 2784
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2784
  if (tmp___14 == 0) {
#line 2784
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2784);
  } else {

  }
#line 2785
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2785
  if (tmp___15 == 0) {
#line 2785
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2785);
  } else {

  }
#line 2786
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2786
  if (tmp___16 == 0) {
#line 2786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2786);
  } else {

  }
#line 2787
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2787
  if (tmp___17 == 0) {
#line 2787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2787);
  } else {

  }
#line 2788
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2788
  if (tmp___18 == 0) {
#line 2788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2788);
  } else {

  }
#line 2789
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2789
  if (tmp___19 == 0) {
#line 2789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2789);
  } else {

  }
#line 2790
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2790
  if (tmp___20 == 0) {
#line 2790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2790);
  } else {

  }
#line 2791
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2791
  if (tmp___21 == 0) {
#line 2791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2791);
  } else {

  }
#line 2792
  return;
}
}
#line 2796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2800
  goto ldv_45450;
  ldv_45449: 
#line 2801
  page = drbd_pp_pool;
#line 2802
  drbd_pp_pool = (struct page *)page->ldv_12384.ldv_12381.private;
#line 2803
  __free_pages(page, 0U);
#line 2804
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_45450: ;
#line 2800
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2801
    goto ldv_45449;
  } else {

  }

#line 2809
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2810
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2811
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2812
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2813
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2814
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2815
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2816
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2817
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2818
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2819
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2820
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2822
  drbd_ee_mempool = 0;
#line 2823
  drbd_request_mempool = 0;
#line 2824
  drbd_ee_cache = 0;
#line 2825
  drbd_request_cache = 0;
#line 2826
  drbd_bm_ext_cache = 0;
#line 2827
  drbd_al_ext_cache = 0;
#line 2829
  return;
}
}
#line 2832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2835
  number = (int const   )(minor_count * 8U);
#line 2839
  drbd_request_mempool = 0;
#line 2840
  drbd_ee_cache = 0;
#line 2841
  drbd_request_cache = 0;
#line 2842
  drbd_bm_ext_cache = 0;
#line 2843
  drbd_al_ext_cache = 0;
#line 2844
  drbd_pp_pool = 0;
#line 2847
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2849
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2850
    goto Enomem;
  } else {

  }
#line 2852
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2854
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2855
    goto Enomem;
  } else {

  }
#line 2857
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2859
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2860
    goto Enomem;
  } else {

  }
#line 2862
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2864
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2865
    goto Enomem;
  } else {

  }
#line 2868
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2870
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2871
    goto Enomem;
  } else {

  }
#line 2873
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2875
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2876
    goto Enomem;
  } else {

  }
#line 2879
  spinlock_check(& drbd_pp_lock);
#line 2879
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5623.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2881
  i = 0;
#line 2881
  goto ldv_45461;
  ldv_45460: 
#line 2882
  page = alloc_pages(131282U, 0U);
#line 2883
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2884
    goto Enomem;
  } else {

  }
#line 2885
  page->ldv_12384.ldv_12381.private = (unsigned long )drbd_pp_pool;
#line 2886
  drbd_pp_pool = page;
#line 2881
  i = i + 1;
  ldv_45461: ;
#line 2881
  if (i < number) {
#line 2882
    goto ldv_45460;
  } else {

  }
#line 2888
  drbd_pp_vacant = number;
#line 2890
  return (0);
  Enomem: 
#line 2893
  drbd_destroy_mempools();
#line 2894
  return (-12);
}
}
#line 2897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2904
  return (0);
}
}
#line 2907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 2915
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2916
  if (rr != 0) {
#line 2917
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 2919
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2920
  if (rr != 0) {
#line 2921
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 2923
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2924
  if (rr != 0) {
#line 2925
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 2927
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2928
  if (rr != 0) {
#line 2929
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 2931
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2932
  if (rr != 0) {
#line 2933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 2934
  return;
}
}
#line 2938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 2940
  tmp = minor_to_mdev(minor);
#line 2940
  mdev = tmp;
#line 2942
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2943
    return;
  } else {

  }
#line 2946
  if (mdev->open_cnt != 0) {
#line 2947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2948);
  } else {

  }
#line 2950
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2950
  _b = tmp___0 == 0;
#line 2950
  if (_b != 0) {
#line 2950
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2950);
  } else {

  }
#line 2950
  if (_b != 0) {
#line 2952
    lp = mdev->data.work.q.next;
#line 2952
    goto ldv_45482;
    ldv_45481: 
#line 2953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 2952
    lp = lp->next;
    ldv_45482: 
#line 2952
    __builtin_prefetch((void const   *)lp->next);
#line 2952
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2953
      goto ldv_45481;
    } else {

    }

  } else {

  }
#line 2958
  del_gendisk(mdev->vdisk);
#line 2963
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2964
    bdput(mdev->this_bdev);
  } else {

  }
#line 2966
  drbd_free_resources(mdev);
#line 2968
  drbd_release_ee_lists(mdev);
#line 2971
  kfree((void const   *)mdev->ee_hash);
#line 2977
  lc_destroy(mdev->act_log);
#line 2978
  lc_destroy(mdev->resync);
#line 2980
  kfree((void const   *)mdev->p_uuid);
#line 2983
  kfree((void const   *)mdev->int_dig_out);
#line 2984
  kfree((void const   *)mdev->int_dig_in);
#line 2985
  kfree((void const   *)mdev->int_dig_vv);
#line 2990
  drbd_free_mdev(mdev);
#line 2991
  return;
}
}
#line 2993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2997
  unregister_reboot_notifier(& drbd_notifier);
#line 2999
  drbd_nl_cleanup();
#line 3001
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3002
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3003
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3004
    i = minor_count;
#line 3005
    goto ldv_45489;
    ldv_45488: 
#line 3006
    drbd_delete_device(i);
    ldv_45489: 
#line 3005
    tmp = i;
#line 3005
    i = i - 1U;
#line 3005
    if (tmp != 0U) {
#line 3006
      goto ldv_45488;
    } else {

    }
#line 3007
    drbd_destroy_mempools();
  } else {

  }
#line 3010
  kfree((void const   *)minor_table);
#line 3012
  unregister_blkdev(147U, "drbd");
#line 3014
  printk("<6>drbd: module cleanup done.\n");
#line 3015
  return;
}
}
#line 3024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3026
  mdev = (struct drbd_conf *)congested_data;
#line 3028
  reason = 45;
#line 3029
  r = 0;
#line 3031
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3031
  if (tmp == 0) {
#line 3033
    r = bdi_bits;
#line 3034
    reason = 100;
#line 3035
    goto out;
  } else {

  }
#line 3038
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3038
  if (tmp___0 != 0) {
#line 3039
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3040
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3041
    put_ldev(mdev);
#line 3042
    if (r != 0) {
#line 3043
      reason = 98;
    } else {

    }
  } else {

  }
#line 3046
  if ((bdi_bits & 4) != 0) {
#line 3046
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3046
    if (tmp___1 != 0) {
#line 3047
      r = r | 4;
#line 3048
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3052
  mdev->congestion_reason = reason;
#line 3053
  return (r);
}
}
#line 3056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3063
  tmp = kzalloc___1(3968UL, 208U);
#line 3063
  mdev = (struct drbd_conf *)tmp;
#line 3064
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3065
    return (0);
  } else {

  }
#line 3066
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3066
  if (tmp___0) {
#line 3066
    tmp___1 = 0;
  } else {
#line 3066
    tmp___1 = 1;
  }
#line 3066
  if (tmp___1) {
#line 3067
    goto out_no_cpumask;
  } else {

  }
#line 3069
  mdev->minor = minor;
#line 3071
  drbd_init_set_defaults(mdev);
#line 3073
  q = blk_alloc_queue(208U);
#line 3074
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3075
    goto out_no_q;
  } else {

  }
#line 3076
  mdev->rq_queue = q;
#line 3077
  q->queuedata = (void *)mdev;
#line 3079
  disk = alloc_disk(1);
#line 3080
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3081
    goto out_no_disk;
  } else {

  }
#line 3082
  mdev->vdisk = disk;
#line 3084
  set_disk_ro(disk, 1);
#line 3086
  disk->queue = q;
#line 3087
  disk->major = 147;
#line 3088
  disk->first_minor = (int )minor;
#line 3089
  disk->fops = & drbd_ops;
#line 3090
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3091
  disk->private_data = (void *)mdev;
#line 3093
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3095
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3097
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3098
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3100
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3101
  blk_queue_max_segment_size(q, 32768U);
#line 3102
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3103
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3104
  q->queue_lock = & mdev->req_lock;
#line 3106
  q->unplug_fn = & drbd_unplug_fn;
#line 3108
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3109
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3110
    goto out_no_io_page;
  } else {

  }
#line 3112
  tmp___2 = drbd_bm_init(mdev);
#line 3112
  if (tmp___2 != 0) {
#line 3113
    goto out_no_bitmap;
  } else {

  }
#line 3115
  tmp___3 = tl_init(mdev);
#line 3115
  if (tmp___3 == 0) {
#line 3116
    goto out_no_tl;
  } else {

  }
#line 3118
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3118
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3119
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3120
    goto out_no_app_reads;
  } else {

  }
#line 3122
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3122
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3123
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3124
    goto out_no_epoch;
  } else {

  }
#line 3126
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3127
  mdev->epochs = 1U;
#line 3129
  return (mdev);
  out_no_epoch: 
#line 3134
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3136
  tl_cleanup(mdev);
  out_no_tl: 
#line 3138
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3140
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3142
  put_disk(disk);
  out_no_disk: 
#line 3144
  blk_cleanup_queue(q);
  out_no_q: 
#line 3146
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3148
  kfree((void const   *)mdev);
#line 3149
  return (0);
}
}
#line 3154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3156
  kfree((void const   *)mdev->current_epoch);
#line 3157
  kfree((void const   *)mdev->app_reads_hash);
#line 3158
  tl_cleanup(mdev);
#line 3159
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3160
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3161
  __free_pages(mdev->md_io_page, 0U);
#line 3162
  put_disk(mdev->vdisk);
#line 3163
  blk_cleanup_queue(mdev->rq_queue);
#line 3164
  free_cpumask_var(mdev->cpu_mask);
#line 3165
  kfree((void const   *)mdev);
#line 3166
  return;
}
}
#line 3169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3180
  if (minor_count == 0U || minor_count > 255U) {
#line 3181
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3184
    return (-22);
  } else {

  }
#line 3190
  err = drbd_nl_init();
#line 3191
  if (err != 0) {
#line 3192
    return (err);
  } else {

  }
#line 3194
  err = register_blkdev(147U, "drbd");
#line 3195
  if (err != 0) {
#line 3196
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3199
    return (err);
  } else {

  }
#line 3202
  register_reboot_notifier(& drbd_notifier);
#line 3207
  err = -12;
#line 3209
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3211
  drbd_proc = 0;
#line 3212
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3212
  minor_table = (struct drbd_conf **)tmp;
#line 3214
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3215
    goto Enomem;
  } else {

  }
#line 3217
  err = drbd_create_mempools();
#line 3218
  if (err != 0) {
#line 3219
    goto Enomem;
  } else {

  }
#line 3221
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3222
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3223
    printk("<3>drbd: unable to register proc file\n");
#line 3224
    goto Enomem;
  } else {

  }
#line 3227
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3229
  printk("<6>drbd: initialized. Version: 8.3.8.1 (api:%d/proto:%d-%d)\n", 88, 86,
         94);
#line 3232
  tmp___0 = drbd_buildtag();
#line 3232
  printk("<6>drbd: %s\n", tmp___0);
#line 3233
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3235
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3237
  return (0);
  Enomem: 
#line 3240
  drbd_cleanup();
#line 3241
  if (err == -12) {
#line 3243
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3245
    printk("<3>drbd: initialization failure\n");
  }
#line 3246
  return (err);
}
}
#line 3249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3251
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3252
    return;
  } else {

  }
#line 3254
  bd_release(ldev->backing_bdev);
#line 3255
  bd_release(ldev->md_bdev);
#line 3257
  fput(ldev->lo_file);
#line 3258
  fput(ldev->md_file);
#line 3260
  kfree((void const   *)ldev);
#line 3261
  return;
}
}
#line 3263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3265
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3266
    ldv_mutex_lock_139(& mdev->data.mutex);
#line 3267
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3268
    sock_release(mdev->data.socket);
#line 3269
    mdev->data.socket = 0;
#line 3270
    ldv_mutex_unlock_140(& mdev->data.mutex);
  } else {

  }
#line 3272
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3273
    ldv_mutex_lock_141(& mdev->meta.mutex);
#line 3274
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3275
    sock_release(mdev->meta.socket);
#line 3276
    mdev->meta.socket = 0;
#line 3277
    ldv_mutex_unlock_142(& mdev->meta.mutex);
  } else {

  }
#line 3279
  return;
}
}
#line 3282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3284
  crypto_free_hash(mdev->csums_tfm);
#line 3285
  mdev->csums_tfm = 0;
#line 3286
  crypto_free_hash(mdev->verify_tfm);
#line 3287
  mdev->verify_tfm = 0;
#line 3288
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3289
  mdev->cram_hmac_tfm = 0;
#line 3290
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3291
  mdev->integrity_w_tfm = 0;
#line 3292
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3293
  mdev->integrity_r_tfm = 0;
#line 3295
  drbd_free_sock(mdev);
#line 3297
  drbd_free_bc(mdev->ldev);
#line 3297
  mdev->ldev = 0;
#line 3298
  return;
}
}
#line 3325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3331
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3331
  if (tmp == 0) {
#line 3332
    return;
  } else {

  }
#line 3333
  del_timer(& mdev->md_sync_timer);
#line 3337
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3337
  if (tmp___0 == 0) {
#line 3338
    return;
  } else {

  }
#line 3340
  ldv_mutex_lock_143(& mdev->md_io_mutex);
#line 3341
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3341
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3342
  memset((void *)buffer, 0, 512UL);
#line 3344
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3344
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3344
  buffer->la_size = tmp___3;
#line 3345
  i = 0;
#line 3345
  goto ldv_45553;
  ldv_45552: 
#line 3346
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3346
  buffer->uuid[i] = tmp___4;
#line 3345
  i = i + 1;
  ldv_45553: ;
#line 3345
  if (i <= 3) {
#line 3346
    goto ldv_45552;
  } else {

  }
#line 3347
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3347
  buffer->flags = tmp___5;
#line 3348
  buffer->magic = 1795323011U;
#line 3350
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3350
  buffer->md_size_sect = tmp___6;
#line 3351
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3351
  buffer->al_offset = tmp___7;
#line 3352
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3352
  buffer->al_nr_extents = tmp___8;
#line 3353
  buffer->bm_bytes_per_bit = 1048576U;
#line 3354
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3354
  buffer->device_uuid = tmp___9;
#line 3356
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3356
  buffer->bm_offset = tmp___10;
#line 3358
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3358
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3358
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3358);
  } else {

  }
#line 3359
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3361
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3361
  if (tmp___12 != 0) {
#line 3362
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3365
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3367
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  }
#line 3372
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3372
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3374
  ldv_mutex_unlock_144(& mdev->md_io_mutex);
#line 3375
  put_ldev(mdev);
#line 3376
  return;
}
}
#line 3386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3389
  rv = 101;
#line 3391
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3391
  if (tmp == 0) {
#line 3392
    return (118);
  } else {

  }
#line 3394
  ldv_mutex_lock_145(& mdev->md_io_mutex);
#line 3395
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3395
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3397
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3397
  if (tmp___1 == 0) {
#line 3400
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3401
    rv = 118;
#line 3402
    goto err;
  } else {

  }
#line 3405
  tmp___2 = __fswab32(buffer->magic);
#line 3405
  if (tmp___2 != 2205418091U) {
#line 3406
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3407
    rv = 119;
#line 3408
    goto err;
  } else {

  }
#line 3410
  tmp___4 = __fswab32(buffer->al_offset);
#line 3410
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3411
    tmp___3 = __fswab32(buffer->al_offset);
#line 3411
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3413
    rv = 119;
#line 3414
    goto err;
  } else {

  }
#line 3416
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3416
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3417
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3417
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3419
    rv = 119;
#line 3420
    goto err;
  } else {

  }
#line 3422
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3422
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3423
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3423
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3425
    rv = 119;
#line 3426
    goto err;
  } else {

  }
#line 3429
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3429
  if (tmp___10 != 4096U) {
#line 3430
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3430
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3432
    rv = 119;
#line 3433
    goto err;
  } else {

  }
#line 3436
  tmp___11 = __fswab64(buffer->la_size);
#line 3436
  bdev->md.la_size_sect = tmp___11;
#line 3437
  i = 0;
#line 3437
  goto ldv_45565;
  ldv_45564: 
#line 3438
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3438
  bdev->md.uuid[i] = tmp___12;
#line 3437
  i = i + 1;
  ldv_45565: ;
#line 3437
  if (i <= 3) {
#line 3438
    goto ldv_45564;
  } else {

  }
#line 3439
  tmp___13 = __fswab32(buffer->flags);
#line 3439
  bdev->md.flags = tmp___13;
#line 3440
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3440
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3441
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3441
  bdev->md.device_uuid = tmp___15;
#line 3443
  if (mdev->sync_conf.al_extents <= 6) {
#line 3444
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3447
  ldv_mutex_unlock_146(& mdev->md_io_mutex);
#line 3448
  put_ldev(mdev);
#line 3450
  return (rv);
}
}
#line 3461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3463
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3464
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3465
  return;
}
}
#line 3468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3472
  i = 2;
#line 3472
  goto ldv_45575;
  ldv_45574: 
#line 3473
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3472
  i = i + 1;
  ldv_45575: ;
#line 3472
  if (i <= 2) {
#line 3473
    goto ldv_45574;
  } else {

  }

#line 3477
  return;
}
}
#line 3476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3478
  if (idx == 0) {
#line 3479
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3480
      val = val | 1ULL;
    } else {
#line 3482
      val = val & 0xfffffffffffffffeULL;
    }
#line 3484
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3487
  (mdev->ldev)->md.uuid[idx] = val;
#line 3488
  drbd_md_mark_dirty(mdev);
#line 3489
  return;
}
}
#line 3492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3494
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3495
    drbd_uuid_move_history(mdev);
#line 3496
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3498
  _drbd_uuid_set(mdev, idx, val);
#line 3499
  return;
}
}
#line 3508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3512
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3513
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3513
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3513);
  } else {

  }
#line 3514
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3516
  get_random_bytes((void *)(& val), 8);
#line 3517
  _drbd_uuid_set(mdev, 0, val);
#line 3518
  return;
}
}
#line 3520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3522
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3523
    return;
  } else {

  }
#line 3525
  if (val == 0ULL) {
#line 3526
    drbd_uuid_move_history(mdev);
#line 3527
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3528
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3530
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3531
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3533
    (mdev->ldev)->md.uuid[1] = val;
#line 3534
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3537
  drbd_md_mark_dirty(mdev);
#line 3538
  return;
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3548
  rv = -5;
#line 3550
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3550
  if (tmp != 0) {
#line 3551
    drbd_md_set_flag(mdev, 8);
#line 3552
    drbd_md_sync(mdev);
#line 3553
    drbd_bm_set_all(mdev);
#line 3555
    rv = drbd_bm_write(mdev);
#line 3557
    if (rv == 0) {
#line 3558
      drbd_md_clear_flag(mdev, 8);
#line 3559
      drbd_md_sync(mdev);
    } else {

    }
#line 3562
    put_ldev(mdev);
  } else {

  }
#line 3565
  return (rv);
}
}
#line 3574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3576
  rv = -5;
#line 3578
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3578
  if (tmp != 0) {
#line 3579
    drbd_bm_clear_all(mdev);
#line 3580
    rv = drbd_bm_write(mdev);
#line 3581
    put_ldev(mdev);
  } else {

  }
#line 3584
  return (rv);
}
}
#line 3587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3589
  __mptr = (struct drbd_work  const  *)w;
#line 3589
  work = (struct bm_io_work *)__mptr;
#line 3592
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3592
  if (tmp != 0) {
#line 3592
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3592);
  } else {

  }
#line 3594
  drbd_bm_lock(mdev, work->why);
#line 3595
  rv = (*(work->io_fn))(mdev);
#line 3596
  drbd_bm_unlock(mdev);
#line 3598
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3599
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3601
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3602
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3604
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3605
  work->why = 0;
#line 3607
  return (1);
}
}
#line 3622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3627
  tmp = get_current();
#line 3627
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3627
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3627);
  } else {

  }
#line 3629
  tmp___0 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3629
  if (tmp___0 != 0) {
#line 3629
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3629);
  } else {

  }
#line 3630
  tmp___1 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3630
  if (tmp___1 != 0) {
#line 3630
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3630);
  } else {

  }
#line 3631
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3631
  if (tmp___2 == 0) {
#line 3631
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3631);
  } else {

  }
#line 3632
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3636
  mdev->bm_io_work.io_fn = io_fn;
#line 3637
  mdev->bm_io_work.done = done;
#line 3638
  mdev->bm_io_work.why = why;
#line 3640
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3641
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3641
  if (tmp___4 == 0) {
#line 3642
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3642
    if (tmp___3 != 0) {
#line 3643
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3644
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3646
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3647
  return;
}
}
#line 3659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3663
  tmp = get_current();
#line 3663
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3663
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3663);
  } else {

  }
#line 3665
  drbd_suspend_io(mdev);
#line 3667
  drbd_bm_lock(mdev, why);
#line 3668
  rv = (*io_fn)(mdev);
#line 3669
  drbd_bm_unlock(mdev);
#line 3671
  drbd_resume_io(mdev);
#line 3673
  return (rv);
}
}
#line 3676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3678
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3679
    drbd_md_mark_dirty(mdev);
#line 3680
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3682
  return;
}
}
#line 3684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3686
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3687
    drbd_md_mark_dirty(mdev);
#line 3688
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3690
  return;
}
}
#line 3691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3693
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3698
  mdev = (struct drbd_conf *)data;
#line 3700
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3701
  return;
}
}
#line 3703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3705
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3706
  drbd_md_sync(mdev);
#line 3708
  return (1);
}
}
#line 3728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3732
  tmp = rsp->count;
#line 3732
  rsp->count = rsp->count - 1UL;
#line 3732
  if (tmp == 0UL) {
#line 3733
    get_random_bytes((void *)(& refresh), 8);
#line 3734
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3735
    rsp->count = 10000UL;
  } else {

  }
#line 3737
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3738
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3738
  return ((unsigned long )tmp___0);
}
}
#line 3742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3743
  _faults[0] = (char *)"Meta-data write";
#line 3743
  _faults[1] = (char *)"Meta-data read";
#line 3743
  _faults[2] = (char *)"Resync write";
#line 3743
  _faults[3] = (char *)"Resync read";
#line 3743
  _faults[4] = (char *)"Data write";
#line 3743
  _faults[5] = (char *)"Data read";
#line 3743
  _faults[6] = (char *)"Data read ahead";
#line 3743
  _faults[7] = (char *)"BM allocation";
#line 3743
  _faults[8] = (char *)"EE allocation";
#line 3743
  _faults[9] = (char *)"receive data corruption";
#line 3756
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3762
  rrs.state = 0UL;
#line 3762
  rrs.count = 0UL;
#line 3764
  if (fault_devs == 0) {
#line 3764
    goto _L;
  } else {
#line 3764
    tmp = mdev_to_minor(mdev);
#line 3764
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3764
      tmp___0 = _drbd_fault_random(& rrs);
#line 3764
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3764
        tmp___1 = 1;
      } else {
#line 3764
        tmp___1 = 0;
      }
    } else {
#line 3764
      tmp___1 = 0;
    }
  }
#line 3764
  ret = (unsigned int )tmp___1;
#line 3769
  if (ret != 0U) {
#line 3770
    fault_count = fault_count + 1;
#line 3772
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3772
    if (tmp___3 != 0) {
#line 3773
      tmp___2 = _drbd_fault_str(type);
#line 3773
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3777
  return (ret);
}
}
#line 3781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3786
  buildtag[0] = '\000';
#line 3786
  tmp = 1U;
#line 3786
  while (1) {
#line 3786
    if (tmp >= 38U) {
#line 3786
      break;
    } else {

    }
#line 3786
    buildtag[tmp] = (char)0;
#line 3786
    tmp = tmp + 1U;
  }
#line 3788
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3790
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3791
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3794
      buildtag[0] = 98;
    }
  } else {

  }
#line 3797
  return ((char const   *)(& buildtag));
}
}
#line 3845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_61_p1 ;
  int res_drbd_open_61 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_62_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_69_p1 ;
  void *var_drbd_notify_sys_69_p2 ;
  unsigned long var_md_sync_timer_fn_94_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4069
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4021
  LDV_IN_INTERRUPT = 1;
#line 4030
  ldv_initialize();
#line 4057
  ldv_handler_precall();
#line 4058
  tmp = drbd_init();
#line 4058
  if (tmp != 0) {
#line 4059
    goto ldv_final;
  } else {

  }
#line 4076
  goto ldv_45736;
  ldv_45735: 
#line 4080
  tmp___0 = nondet_int();
#line 4080
  switch (tmp___0) {
  case 0: ;
#line 4085
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4111
    ldv_handler_precall();
#line 4112
    res_drbd_open_61 = drbd_open(var_group1, var_drbd_open_61_p1);
#line 4113
    ldv_check_return_value(res_drbd_open_61);
#line 4114
    if (res_drbd_open_61 != 0) {
#line 4115
      goto ldv_module_exit;
    } else {

    }
#line 4128
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4134
  goto ldv_45730;
  case 1: ;
#line 4138
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4164
    ldv_handler_precall();
#line 4165
    drbd_release(var_group2, var_drbd_release_62_p1);
#line 4178
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4184
  goto ldv_45730;
  case 2: 
#line 4214
  ldv_handler_precall();
#line 4215
  drbd_notify_sys(var_group3, var_drbd_notify_sys_69_p1, var_drbd_notify_sys_69_p2);
#line 4234
  goto ldv_45730;
  case 3: 
#line 4267
  ldv_handler_precall();
#line 4268
  md_sync_timer_fn(var_md_sync_timer_fn_94_p0);
#line 4284
  goto ldv_45730;
  default: ;
#line 4285
  goto ldv_45730;
  }
  ldv_45730: ;
  ldv_45736: 
#line 4076
  tmp___1 = nondet_int();
#line 4076
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4078
    goto ldv_45735;
  } else {

  }

  ldv_module_exit: 
#line 4318
  ldv_handler_precall();
#line 4319
  drbd_cleanup();
  ldv_final: 
#line 4334
  ldv_check_final_state();
#line 4337
  return;
}
}
#line 4341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4346
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4348
  mutex_lock(ldv_func_arg1);
#line 4349
  return;
}
}
#line 4351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4356
  tmp = mutex_trylock(ldv_func_arg1);
#line 4356
  ldv_func_res = tmp;
#line 4358
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4358
  return (tmp___0);
#line 4360
  return (ldv_func_res);
}
}
#line 4363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4368
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4370
  mutex_unlock(ldv_func_arg1);
#line 4371
  return;
}
}
#line 4373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4378
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4380
  mutex_lock(ldv_func_arg1);
#line 4381
  return;
}
}
#line 4383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4388
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4390
  mutex_unlock(ldv_func_arg1);
#line 4391
  return;
}
}
#line 4393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4398
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4400
  mutex_unlock(ldv_func_arg1);
#line 4401
  return;
}
}
#line 4403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4408
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4410
  mutex_lock(ldv_func_arg1);
#line 4411
  return;
}
}
#line 4413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4418
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4420
  mutex_unlock(ldv_func_arg1);
#line 4421
  return;
}
}
#line 4423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4428
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4430
  mutex_lock(ldv_func_arg1);
#line 4431
  return;
}
}
#line 4433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4438
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4440
  mutex_lock(ldv_func_arg1);
#line 4441
  return;
}
}
#line 4443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4448
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4450
  mutex_unlock(ldv_func_arg1);
#line 4451
  return;
}
}
#line 4453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4458
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4460
  mutex_unlock(ldv_func_arg1);
#line 4461
  return;
}
}
#line 4463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4468
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4470
  mutex_lock(ldv_func_arg1);
#line 4471
  return;
}
}
#line 4473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4478
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4480
  mutex_unlock(ldv_func_arg1);
#line 4481
  return;
}
}
#line 4483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4488
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4490
  mutex_lock(ldv_func_arg1);
#line 4491
  return;
}
}
#line 4493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4498
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4500
  mutex_unlock(ldv_func_arg1);
#line 4501
  return;
}
}
#line 4503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4508
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4510
  mutex_lock(ldv_func_arg1);
#line 4511
  return;
}
}
#line 4513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4518
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4520
  mutex_unlock(ldv_func_arg1);
#line 4521
  return;
}
}
#line 4523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4528
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4530
  mutex_lock(ldv_func_arg1);
#line 4531
  return;
}
}
#line 4533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4538
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4540
  mutex_unlock(ldv_func_arg1);
#line 4541
  return;
}
}
#line 4543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4548
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4550
  mutex_lock(ldv_func_arg1);
#line 4551
  return;
}
}
#line 4553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4558
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4560
  mutex_unlock(ldv_func_arg1);
#line 4561
  return;
}
}
#line 4563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4568
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4570
  mutex_lock(ldv_func_arg1);
#line 4571
  return;
}
}
#line 4573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4578
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4580
  mutex_unlock(ldv_func_arg1);
#line 4581
  return;
}
}
#line 4583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4588
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4590
  mutex_lock(ldv_func_arg1);
#line 4591
  return;
}
}
#line 4593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4598
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4600
  mutex_unlock(ldv_func_arg1);
#line 4601
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_174(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 75
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 106
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 118
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 142
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 147
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 152
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 157
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 167
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 169
  mutex_lock(ldv_func_arg1);
#line 170
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_174(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 177
  tmp = mutex_trylock(ldv_func_arg1);
#line 177
  ldv_func_res = tmp;
#line 179
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 179
  return (tmp___0);
#line 181
  return (ldv_func_res);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 189
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 191
  mutex_unlock(ldv_func_arg1);
#line 192
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 202 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_180(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_181(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_184(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_179(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_182(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5892;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5892;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5892;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5892;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5892: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 240 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func_ptr = _________p1;
#line 79
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11439: 
#line 79
      it_func = it_func_ptr->func;
#line 79
      __data = it_func_ptr->data;
#line 79
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 79
      it_func_ptr = it_func_ptr + 1;
#line 79
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11439;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 482 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 484
  ret = 1;
#line 486
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 489
    tmp = module_is_live(module);
#line 489
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 489
    if (tmp___0 != 0L) {
#line 490
      __vpp_verify = 0;
#line 490
      switch (4UL) {
      case 1UL: 
#line 490
      pao_ID__ = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11804;
      case 2UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11804;
      case 4UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11804;
      case 8UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11804;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11804: ;
#line 490
      goto ldv_11809;
      case 2UL: 
#line 490
      pao_ID_____0 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11815;
      case 2UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11815;
      case 4UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11815;
      case 8UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11815;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11815: ;
#line 490
      goto ldv_11809;
      case 4UL: 
#line 490
      pao_ID_____1 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11825;
      case 2UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11825;
      case 4UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11825;
      case 8UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11825;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11825: ;
#line 490
      goto ldv_11809;
      case 8UL: 
#line 490
      pao_ID_____2 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11835;
      case 2UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11835;
      case 4UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11835;
      case 8UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11835;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11835: ;
#line 490
      goto ldv_11809;
      default: 
#line 490
      __bad_size_call_parameter();
#line 490
      goto ldv_11809;
      }
      ldv_11809: ;
#line 491
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 493
      ret = 0;
    }
  } else {

  }
#line 497
  return (ret);
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13717: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13717;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 233 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 235
  tmp = get_order(size);
#line 235
  order = (unsigned int )tmp;
#line 236
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 236
  ret = (void *)tmp___0;
#line 238
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 239
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 241
  return (ret);
}
}
#line 244 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 248
  if (0) {
#line 249
    if (size > 8192UL) {
#line 250
      tmp = kmalloc_large___5(size, flags);
#line 250
      return (tmp);
    } else {

    }
#line 252
    if ((flags & 1U) == 0U) {
#line 253
      tmp___0 = kmalloc_slab(size);
#line 253
      s = tmp___0;
#line 255
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 256
        return (16);
      } else {

      }
#line 258
      ret = kmem_cache_alloc_notrace(s, flags);
#line 260
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 262
      return (ret);
    } else {

    }
  } else {

  }
#line 265
  tmp___1 = __kmalloc(size, flags);
#line 265
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___5(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 1932 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1998
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable___0();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck___0(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable___0();
#line 79
  return;
}
}
#line 845 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 846
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 850
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 859
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 872
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 962 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 964
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_43464;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_43464;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_43464: ;
#line 1825
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[71U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 89
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 90
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_44026;
  ldv_44025: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_44023;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_44023: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_44026: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_44025;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_44087;
  ldv_44086: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_44055;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_44055;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_44055;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_44055;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_44055;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_44055;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44055;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44055;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44055;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_44055;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44055;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44055;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_44055: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_44087: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_44086;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_44190;
  ldv_44189: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_44125;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_44125;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_44125;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_44125;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_44125;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_44125;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_44125;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_44125;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_44125;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_44125;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_44125;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_44125;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_44125;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_44125;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_44125;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_44125;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_44125;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_44125;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_44125;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_44125;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44125;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_44125: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_44190: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_44189;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_44224;
  ldv_44223: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_44219;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44219;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44219;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_44219: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_44224: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_44223;
  } else {

  }

#line 71
  return (1);
}
}
#line 90
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 90 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  unsigned short *tmp___4 ;
  u16 tmp___5 ;

  {
#line 77
  goto ldv_44274;
  ldv_44273: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_44238;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_44238;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_44238;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_44238;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_44238;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_44238;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_44238;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_44238: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_44274: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___5 = get_unaligned_le16((void const   *)tmp___4);
#line 77
  tag = (int )tmp___5;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_44273;
  } else {

  }

#line 77
  return (1);
}
}
#line 134
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 134 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 132
  goto ldv_44573;
  ldv_44572: 
#line 132
  tmp = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 132
  dlen = (int )tmp___0;
#line 132
  switch (tag & 8191) {
  case 66: 
#line 132
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 132
  goto ldv_44570;
  default: ;
#line 132
  if ((tag & 8192) != 0) {
#line 132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 132
    return (0);
  } else {

  }
  }
  ldv_44570: 
#line 132
  tags = tags + (unsigned long )dlen;
  ldv_44573: 
#line 132
  tmp___1 = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 132
  tag = (int )tmp___2;
#line 132
  if (tag != 0) {
#line 133
    goto ldv_44572;
  } else {

  }

#line 132
  return (1);
}
}
#line 138
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 138 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 136
  goto ldv_44590;
  ldv_44589: 
#line 136
  tmp = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 136
  dlen = (int )tmp___0;
#line 136
  switch (tag & 8191) {
  case 63: 
#line 136
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 136
  goto ldv_44587;
  default: ;
#line 136
  if ((tag & 8192) != 0) {
#line 136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 136
    return (0);
  } else {

  }
  }
  ldv_44587: 
#line 136
  tags = tags + (unsigned long )dlen;
  ldv_44590: 
#line 136
  tmp___1 = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 136
  tag = (int )tmp___2;
#line 136
  if (tag != 0) {
#line 137
    goto ldv_44589;
  } else {

  }

#line 136
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_44635;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_44635;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_44635;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_44635;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44635;
  }
  ldv_44635: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_44642;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_44642;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_44642;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_44642;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44642;
  }
  ldv_44642: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_44649;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_44649;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44649;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44649;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44649;
  }
  ldv_44649: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_44656;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_44656;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_44656;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_44656;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44656;
  }
  ldv_44656: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_44663;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_44663;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44663;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44663;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44663;
  }
  ldv_44663: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_44673;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_44673;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_44673;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_44673;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44673;
  }
  ldv_44673: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_44680;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_44680;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44680;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44680;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44680;
  }
  ldv_44680: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_44690;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_44690;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_44690;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_44690;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44690;
  }
  ldv_44690: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_44697;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_44697;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_44697;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_44697;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44697;
  }
  ldv_44697: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_44704;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_44704;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44704;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44704;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44704;
  }
  ldv_44704: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_44711;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_44711;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_44711;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_44711;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44711;
  }
  ldv_44711: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_44718;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_44718;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_44718;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_44718;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44718;
  }
  ldv_44718: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_44725;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_44725;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44725;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44725;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44725;
  }
  ldv_44725: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_44732;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_44732;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_44732;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_44732;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44732;
  }
  ldv_44732: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_44739;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_44739;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_44739;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_44739;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44739;
  }
  ldv_44739: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_44746;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_44746;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44746;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44746;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44746;
  }
  ldv_44746: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_44753;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_44753;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_44753;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_44753;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44753;
  }
  ldv_44753: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_44760;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_44760;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_44760;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_44760;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44760;
  }
  ldv_44760: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_44767;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_44767;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_44767;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_44767;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44767;
  }
  ldv_44767: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_44774;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_44774;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_44774;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_44774;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44774;
  }
  ldv_44774: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_44781;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_44781;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_44781;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_44781;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44781;
  }
  ldv_44781: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_44788;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_44788;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_44788;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_44788;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44788;
  }
  ldv_44788: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_44795;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_44795;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_44795;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_44795;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44795;
  }
  ldv_44795: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_44802;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_44802;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_44802;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_44802;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44802;
  }
  ldv_44802: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_44809;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_44809;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44809;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44809;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44809;
  }
  ldv_44809: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_44816;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_44816;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_44816;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_44816;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44816;
  }
  ldv_44816: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_44823;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_44823;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_44823;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_44823;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44823;
  }
  ldv_44823: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_44830;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_44830;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_44830;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_44830;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44830;
  }
  ldv_44830: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_44837;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_44837;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_44837;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_44837;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44837;
  }
  ldv_44837: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_44862;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_44862;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_44862;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_44862;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44862;
  }
  ldv_44862: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_44869;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_44869;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44869;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44869;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44869;
  }
  ldv_44869: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_44879;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_44879;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_44879;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_44879;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44879;
  }
  ldv_44879: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_44886;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_44886;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44886;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44886;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44886;
  }
  ldv_44886: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_44896;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_44896;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_44896;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_44896;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44896;
  }
  ldv_44896: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_44903;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_44903;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44903;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44903;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44903;
  }
  ldv_44903: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_44913;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_44913;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_44913;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_44913;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44913;
  }
  ldv_44913: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_44920;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_44920;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_44920;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_44920;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44920;
  }
  ldv_44920: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_44930;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_44930;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_44930;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_44930;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44930;
  }
  ldv_44930: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_44937;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_44937;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_44937;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_44937;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44937;
  }
  ldv_44937: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_44947;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_44947;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_44947;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_44947;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44947;
  }
  ldv_44947: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_44954;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_44954;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_44954;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_44954;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44954;
  }
  ldv_44954: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_44961;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_44961;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_44961;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_44961;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44961;
  }
  ldv_44961: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_44968;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_44968;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_44968;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_44968;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44968;
  }
  ldv_44968: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_44975;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_44975;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_44975;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_44975;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44975;
  }
  ldv_44975: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_44982;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_44982;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_44982;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_44982;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44982;
  }
  ldv_44982: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_44989;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_44989;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_44989;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_44989;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44989;
  }
  ldv_44989: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_44996;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_44996;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_44996;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_44996;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44996;
  }
  ldv_44996: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_45003;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_45003;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45003;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45003;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45003;
  }
  ldv_45003: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_45010;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_45010;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_45010;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_45010;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45010;
  }
  ldv_45010: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_45017;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_45017;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_45017;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_45017;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45017;
  }
  ldv_45017: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_45024;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_45024;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45024;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45024;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45024;
  }
  ldv_45024: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_45031;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_45031;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_45031;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_45031;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45031;
  }
  ldv_45031: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_45038;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_45038;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_45038;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_45038;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45038;
  }
  ldv_45038: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_45045;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_45045;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45045;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45045;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45045;
  }
  ldv_45045: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_45052;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_45052;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_45052;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_45052;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45052;
  }
  ldv_45052: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_45059;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_45059;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_45059;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_45059;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45059;
  }
  ldv_45059: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_45066;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_45066;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45066;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45066;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45066;
  }
  ldv_45066: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_45073;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_45073;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_45073;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_45073;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45073;
  }
  ldv_45073: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_45080;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_45080;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_45080;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_45080;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45080;
  }
  ldv_45080: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_45087;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_45087;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45087;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45087;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45087;
  }
  ldv_45087: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_45094;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_45094;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_45094;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_45094;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45094;
  }
  ldv_45094: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_45101;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_45101;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_45101;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_45101;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45101;
  }
  ldv_45101: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_45108;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_45108;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45108;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45108;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45108;
  }
  ldv_45108: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_45115;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_45115;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_45115;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_45115;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45115;
  }
  ldv_45115: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_45122;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_45122;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_45122;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_45122;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45122;
  }
  ldv_45122: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_45129;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_45129;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45129;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45129;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45129;
  }
  ldv_45129: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_45136;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_45136;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_45136;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_45136;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45136;
  }
  ldv_45136: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_45143;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_45143;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_45143;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_45143;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45143;
  }
  ldv_45143: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_45150;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_45150;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45150;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45150;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45150;
  }
  ldv_45150: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_45157;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_45157;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_45157;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_45157;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45157;
  }
  ldv_45157: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_45164;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_45164;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_45164;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_45164;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45164;
  }
  ldv_45164: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_45171;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_45171;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45171;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45171;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45171;
  }
  ldv_45171: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_45178;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_45178;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_45178;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_45178;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45178;
  }
  ldv_45178: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_45185;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_45185;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_45185;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_45185;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45185;
  }
  ldv_45185: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_45192;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_45192;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45192;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45192;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45192;
  }
  ldv_45192: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_45199;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_45199;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_45199;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_45199;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45199;
  }
  ldv_45199: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_45206;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_45206;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_45206;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_45206;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45206;
  }
  ldv_45206: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_45213;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_45213;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45213;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45213;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45213;
  }
  ldv_45213: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_45220;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_45220;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_45220;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_45220;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45220;
  }
  ldv_45220: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_45227;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_45227;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_45227;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_45227;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45227;
  }
  ldv_45227: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_45234;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_45234;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45234;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45234;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45234;
  }
  ldv_45234: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_45241;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_45241;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_45241;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_45241;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45241;
  }
  ldv_45241: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_45248;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_45248;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_45248;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_45248;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45248;
  }
  ldv_45248: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_45255;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_45255;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45255;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45255;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45255;
  }
  ldv_45255: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_45262;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_45262;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_45262;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_45262;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45262;
  }
  ldv_45262: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_45269;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_45269;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_45269;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_45269;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45269;
  }
  ldv_45269: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_45276;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_45276;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_45276;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_45276;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45276;
  }
  ldv_45276: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_45283;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_45283;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_45283;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_45283;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45283;
  }
  ldv_45283: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_45290;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_45290;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_45290;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_45290;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45290;
  }
  ldv_45290: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_45297;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_45297;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_45297;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_45297;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45297;
  }
  ldv_45297: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_45304;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_45304;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_45304;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_45304;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45304;
  }
  ldv_45304: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_45311;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_45311;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_45311;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_45311;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45311;
  }
  ldv_45311: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_45318;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_45318;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_45318;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_45318;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45318;
  }
  ldv_45318: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_45325;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_45325;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_45325;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_45325;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45325;
  }
  ldv_45325: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_45332;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_45332;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_45332;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_45332;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45332;
  }
  ldv_45332: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_45339;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_45339;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_45339;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_45339;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45339;
  }
  ldv_45339: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_45346;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_45346;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_45346;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_45346;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45346;
  }
  ldv_45346: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_45353;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_45353;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_45353;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_45353;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45353;
  }
  ldv_45353: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 90
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 90 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_45436;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_45436;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_45436;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_45436;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45436;
  }
  ldv_45436: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_45443;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_45443;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_45443;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_45443;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45443;
  }
  ldv_45443: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_45450;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_45450;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_45450;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_45450;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45450;
  }
  ldv_45450: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_45457;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_45457;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_45457;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_45457;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45457;
  }
  ldv_45457: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_45464;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_45464;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_45464;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_45464;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45464;
  }
  ldv_45464: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_45471;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_45471;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_45471;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_45471;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45471;
  }
  ldv_45471: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_45478;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_45478;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_45478;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_45478;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45478;
  }
  ldv_45478: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_45485;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_45485;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_45485;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_45485;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45485;
  }
  ldv_45485: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_45492;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_45492;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45492;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45492;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45492;
  }
  ldv_45492: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_45499;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_45499;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_45499;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_45499;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45499;
  }
  ldv_45499: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_45506;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_45506;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45506;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45506;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45506;
  }
  ldv_45506: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_45516;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_45516;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_45516;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_45516;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45516;
  }
  ldv_45516: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_45523;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_45523;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45523;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45523;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45523;
  }
  ldv_45523: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_45533;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_45533;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_45533;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_45533;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45533;
  }
  ldv_45533: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_45540;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_45540;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45540;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45540;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45540;
  }
  ldv_45540: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_45550;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_45550;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_45550;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_45550;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45550;
  }
  ldv_45550: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_45557;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_45557;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_45557;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_45557;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45557;
  }
  ldv_45557: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  return (tags);
}
}
#line 102
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 102 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 100
  tmp = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p = (void *)tmp;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p) = 33U;
#line 100
  goto ldv_45645;
  case 2UL: 
#line 100
  put_unaligned_le16(33, __gu_p);
#line 100
  goto ldv_45645;
  case 4UL: 
#line 100
  put_unaligned_le32(33U, __gu_p);
#line 100
  goto ldv_45645;
  case 8UL: 
#line 100
  put_unaligned_le64(33ULL, __gu_p);
#line 100
  goto ldv_45645;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45645;
  }
  ldv_45645: 
#line 100
  tmp___0 = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p___0 = (void *)tmp___0;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___0) = 4U;
#line 100
  goto ldv_45652;
  case 2UL: 
#line 100
  put_unaligned_le16(4, __gu_p___0);
#line 100
  goto ldv_45652;
  case 4UL: 
#line 100
  put_unaligned_le32(4U, __gu_p___0);
#line 100
  goto ldv_45652;
  case 8UL: 
#line 100
  put_unaligned_le64(4ULL, __gu_p___0);
#line 100
  goto ldv_45652;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45652;
  }
  ldv_45652: 
#line 100
  __gu_p___1 = (void *)tags;
#line 100
  switch (4UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 100
  goto ldv_45659;
  case 2UL: 
#line 100
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 100
  goto ldv_45659;
  case 4UL: 
#line 100
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45659;
  case 8UL: 
#line 100
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45659;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45659;
  }
  ldv_45659: 
#line 100
  tags = tags + 4U;
#line 100
  return (tags);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 179
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 183
  envp[0] = (char *)"HOME=/";
#line 183
  envp[1] = (char *)"TERM=linux";
#line 183
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 183
  envp[3] = 0;
#line 183
  envp[4] = 0;
#line 183
  envp[5] = 0;
#line 191
  argv[0] = (char *)(& usermode_helper);
#line 191
  argv[1] = cmd;
#line 191
  argv[2] = (char *)(& mb);
#line 191
  argv[3] = 0;
#line 194
  tmp = mdev_to_minor(mdev);
#line 194
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 196
  tmp___0 = get_net_conf(mdev);
#line 196
  if (tmp___0 != 0) {
#line 197
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 199
    afs = (char *)"ipv6";
#line 200
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 202
    goto ldv_45980;
    case 2: 
#line 204
    afs = (char *)"ipv4";
#line 205
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 207
    goto ldv_45980;
    default: 
#line 209
    afs = (char *)"ssocks";
#line 210
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_45980: 
#line 213
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 214
    envp[3] = (char *)(& af);
#line 215
    envp[4] = (char *)(& ad);
#line 216
    put_net_conf(mdev);
  } else {

  }
#line 219
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 221
  drbd_bcast_ev_helper(mdev, cmd);
#line 222
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 223
  if (ret != 0) {
#line 224
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 228
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 232
  if (ret < 0) {
#line 233
    ret = 0;
  } else {

  }
#line 235
  return (ret);
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 245
  if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            245);
  } else {

  }
#line 247
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 247
  if (tmp != 0) {
#line 248
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 249
    put_ldev(mdev);
  } else {
#line 251
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 252
    return ((enum drbd_disk_state )mdev->state.ldv_35127.pdsk);
  }
#line 255
  if ((unsigned int )fp == 2U) {
#line 256
    val.i = 0U;
#line 256
    val.ldv_35127.susp = 1U;
#line 256
    mask.i = 0U;
#line 256
    mask.ldv_35127.susp = 1U;
#line 256
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 258
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 260
  switch ((r >> 8) & 255) {
  case 3: 
#line 262
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 263
  nps = D_INCONSISTENT;
#line 264
  goto ldv_45995;
  case 4: 
#line 266
  ex_to_string = (char *)"peer was fenced";
#line 267
  nps = D_OUTDATED;
#line 268
  goto ldv_45995;
  case 5: ;
#line 270
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 272
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 273
    nps = D_OUTDATED;
  } else {
#line 275
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 276
    nps = (enum drbd_disk_state )mdev->state.ldv_35127.pdsk;
  }
#line 278
  goto ldv_45995;
  case 6: 
#line 282
  ex_to_string = (char *)"peer is active";
#line 283
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 284
  nps = D_UNKNOWN;
#line 285
  val___0.i = 0U;
#line 285
  val___0.ldv_35127.disk = 5U;
#line 285
  mask___0.i = 0U;
#line 285
  mask___0.ldv_35127.disk = 15U;
#line 285
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 286
  goto ldv_45995;
  case 7: ;
#line 288
  if ((unsigned int )fp != 2U) {
#line 289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 290
  ex_to_string = (char *)"peer was stonithed";
#line 291
  nps = D_OUTDATED;
#line 292
  goto ldv_45995;
  default: 
#line 295
  nps = D_UNKNOWN;
#line 296
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 297
  return (nps);
  }
  ldv_45995: 
#line 300
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
#line 302
  return (nps);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 308
  max_tries = 4;
#line 309
  r = 0;
#line 310
  try = 0;
#line 311
  forced = 0;
#line 315
  if ((unsigned int )new_role == 1U) {
#line 316
    request_ping(mdev);
  } else {

  }
#line 318
  ldv_mutex_lock_185(& mdev->state_mutex);
#line 320
  mask.i = 0U;
#line 320
  mask.ldv_35127.role = 3U;
#line 321
  val.i = 0U;
#line 321
  val.ldv_35127.role = (unsigned char )new_role;
#line 323
  goto ldv_46017;
  ldv_46020: 
#line 324
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 328
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 329
    val.ldv_35127.pdsk = 0U;
#line 330
    mask.ldv_35127.pdsk = 0U;
#line 331
    goto ldv_46017;
  } else {

  }
#line 334
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35127.disk <= 7 && (int )mdev->state.ldv_35127.disk > 3)) {
#line 337
    mask.ldv_35127.disk = 15U;
#line 338
    val.ldv_35127.disk = 8U;
#line 339
    forced = 1;
#line 340
    goto ldv_46017;
  } else {

  }
#line 343
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1821UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 345
    if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 345
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              345);
    } else {

    }
#line 346
    nps = drbd_try_outdate_peer(mdev);
#line 348
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 349
      val.ldv_35127.disk = 8U;
#line 350
      mask.ldv_35127.disk = 15U;
    } else {

    }
#line 353
    val.ldv_35127.pdsk = (unsigned char )nps;
#line 354
    mask.ldv_35127.pdsk = 15U;
#line 356
    goto ldv_46017;
  } else {

  }
#line 359
  if (r == 2) {
#line 360
    goto fail;
  } else {

  }
#line 361
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 362
    nps = drbd_try_outdate_peer(mdev);
#line 364
    if (force != 0 && (unsigned int )nps > 5U) {
#line 365
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 366
      nps = D_OUTDATED;
    } else {

    }
#line 369
    mask.ldv_35127.pdsk = 15U;
#line 370
    val.ldv_35127.pdsk = (unsigned char )nps;
#line 372
    goto ldv_46017;
  } else {

  }
#line 374
  if (r == -1) {
#line 377
    tmp = get_current();
#line 377
    tmp->state = 1L;
#line 378
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 379
    if (try < max_tries) {
#line 380
      try = max_tries + -1;
    } else {

    }
#line 381
    goto ldv_46017;
  } else {

  }
#line 383
  if (r <= 0) {
#line 384
    r = _drbd_request_state(mdev, mask, val, 6);
#line 386
    if (r <= 0) {
#line 387
      goto fail;
    } else {

    }
  } else {

  }
#line 389
  goto ldv_46019;
  ldv_46017: 
#line 323
  tmp___0 = try;
#line 323
  try = try + 1;
#line 323
  if (tmp___0 < max_tries) {
#line 324
    goto ldv_46020;
  } else {

  }
  ldv_46019: ;
#line 392
  if (r <= 0) {
#line 393
    goto fail;
  } else {

  }
#line 395
  if (forced != 0) {
#line 396
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 399
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
  if (tmp___1 == 0) {
#line 399
    goto ldv_46021;
  } else {

  }
#line 399
  tmp___2 = get_current();
#line 399
  __wait.flags = 0U;
#line 399
  __wait.private = (void *)tmp___2;
#line 399
  __wait.func = & autoremove_wake_function;
#line 399
  __wait.task_list.next = & __wait.task_list;
#line 399
  __wait.task_list.prev = & __wait.task_list;
  ldv_46024: 
#line 399
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 399
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
  if (tmp___3 == 0) {
#line 399
    goto ldv_46023;
  } else {

  }
#line 399
  schedule();
#line 399
  goto ldv_46024;
  ldv_46023: 
#line 399
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46021: ;
#line 401
  if ((unsigned int )new_role == 2U) {
#line 402
    set_disk_ro(mdev->vdisk, 1);
#line 403
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 403
    if (tmp___4 != 0) {
#line 404
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 405
      put_ldev(mdev);
    } else {

    }
  } else {
#line 408
    tmp___5 = get_net_conf(mdev);
#line 408
    if (tmp___5 != 0) {
#line 409
      (mdev->net_conf)->want_lose = 0U;
#line 410
      put_net_conf(mdev);
    } else {

    }
#line 412
    set_disk_ro(mdev->vdisk, 0);
#line 413
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 413
    if (tmp___6 != 0) {
#line 414
      if ((((int )mdev->state.ldv_35127.conn <= 9 || (int )mdev->state.ldv_35127.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 417
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 419
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 420
      put_ldev(mdev);
    } else {

    }
  }
#line 424
  if ((unsigned int )new_role == 2U) {
#line 424
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 424
    if (tmp___7 != 0) {
#line 425
      drbd_al_to_on_disk_bm(mdev);
#line 426
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 429
  if ((int )mdev->state.ldv_35127.conn > 8) {
#line 431
    if (forced != 0) {
#line 432
      drbd_send_uuids(mdev);
    } else {

    }
#line 433
    drbd_send_state(mdev);
  } else {

  }
#line 436
  drbd_md_sync(mdev);
#line 438
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 440
  ldv_mutex_unlock_186(& mdev->state_mutex);
#line 441
  return (r);
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 450
  memset((void *)(& primary_args), 0, 4UL);
#line 451
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 451
  if (tmp == 0) {
#line 452
    reply->ret_code = 126;
#line 453
    return (0);
  } else {

  }
#line 456
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 459
  return (0);
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 465
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 467
  return (0);
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 475
  md_size_sect = 0UL;
#line 476
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 479
  bdev->md.md_size_sect = 262144U;
#line 480
  tmp = drbd_md_ss__(mdev, bdev);
#line 480
  bdev->md.md_offset = (u64 )tmp;
#line 481
  bdev->md.al_offset = 8;
#line 482
  bdev->md.bm_offset = 72;
#line 483
  goto ldv_46042;
  case -2: 
#line 486
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 486
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 487
  bdev->md.md_offset = 0ULL;
#line 488
  bdev->md.al_offset = 8;
#line 489
  bdev->md.bm_offset = 72;
#line 490
  goto ldv_46042;
  case -1: ;
  case -3: 
#line 493
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 493
  bdev->md.md_offset = (u64 )tmp___1;
#line 495
  bdev->md.al_offset = -64;
#line 497
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 498
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 499
  md_size_sect = md_size_sect >> 15;
#line 500
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 504
  md_size_sect = md_size_sect + 72UL;
#line 506
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 508
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 509
  goto ldv_46042;
  }
  ldv_46042: ;
#line 512
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 516
  units[0] = 75;
#line 516
  units[1] = 77;
#line 516
  units[2] = 71;
#line 516
  units[3] = 84;
#line 516
  units[4] = 80;
#line 516
  units[5] = 69;
#line 517
  base = 0;
#line 518
  goto ldv_46053;
  ldv_46052: 
#line 520
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 521
  base = base + 1;
  ldv_46053: ;
#line 518
  if (size > 9999ULL) {
#line 519
    goto ldv_46052;
  } else {

  }
#line 523
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 525
  return (buf);
}
}
#line 541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 543
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 544
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 544
  if (tmp == 0) {
#line 544
    goto ldv_46058;
  } else {

  }
#line 544
  tmp___0 = get_current();
#line 544
  __wait.flags = 0U;
#line 544
  __wait.private = (void *)tmp___0;
#line 544
  __wait.func = & autoremove_wake_function;
#line 544
  __wait.task_list.next = & __wait.task_list;
#line 544
  __wait.task_list.prev = & __wait.task_list;
  ldv_46061: 
#line 544
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 544
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 544
  if (tmp___1 == 0) {
#line 544
    goto ldv_46060;
  } else {

  }
#line 544
  schedule();
#line 544
  goto ldv_46061;
  ldv_46060: 
#line 544
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46058: ;
#line 547
  return;
}
}
#line 547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 549
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 550
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 551
  return;
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 568
  rv = 0;
#line 579
  drbd_suspend_io(mdev);
#line 582
  tmp = lc_try_lock(mdev->act_log);
#line 582
  if (tmp != 0) {
#line 582
    goto ldv_46077;
  } else {

  }
#line 582
  tmp___0 = get_current();
#line 582
  __wait.flags = 0U;
#line 582
  __wait.private = (void *)tmp___0;
#line 582
  __wait.func = & autoremove_wake_function;
#line 582
  __wait.task_list.next = & __wait.task_list;
#line 582
  __wait.task_list.prev = & __wait.task_list;
  ldv_46080: 
#line 582
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 582
  tmp___1 = lc_try_lock(mdev->act_log);
#line 582
  if (tmp___1 != 0) {
#line 582
    goto ldv_46079;
  } else {

  }
#line 582
  schedule();
#line 582
  goto ldv_46080;
  ldv_46079: 
#line 582
  finish_wait(& mdev->al_wait, & __wait);
  ldv_46077: 
#line 584
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 585
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 586
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 589
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 591
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 593
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 593
  if (tmp___5 != size) {
#line 593
    goto _L;
  } else {
#line 593
    tmp___6 = drbd_bm_capacity(mdev);
#line 593
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 596
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 597
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 597
      if (tmp___3 != 0L) {
#line 599
        tmp___2 = drbd_bm_capacity(mdev);
#line 599
        size = tmp___2 >> 1;
#line 600
        if (size == 0UL) {
#line 601
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 604
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 608
        rv = dev_size_error;
      } else {

      }
#line 611
      drbd_set_my_capacity(mdev, size);
#line 612
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 613
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 613
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 616
  if ((int )rv == -1) {
#line 617
    goto out;
  } else {

  }
#line 619
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 621
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 621
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 624
  if (la_size_changed != 0 || md_moved != 0) {
#line 625
    drbd_al_shrink(mdev);
#line 626
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 629
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 629
    rv = (enum determine_dev_size )tmp___8;
#line 630
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 633
  if (size > la_size) {
#line 634
    rv = grew;
  } else {

  }
#line 635
  if (size < la_size) {
#line 636
    rv = shrunk;
  } else {

  }
  out: 
#line 638
  lc_unlock(mdev->act_log);
#line 639
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 640
  drbd_resume_io(mdev);
#line 642
  return (rv);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 648
  p_size = mdev->p_size;
#line 649
  la_size = (sector_t )bdev->md.la_size_sect;
#line 651
  u_size = (sector_t )bdev->dc.disk_size;
#line 652
  size = 0UL;
#line 654
  m_size = drbd_get_max_capacity___1(bdev);
#line 656
  if ((int )mdev->state.ldv_35127.conn <= 9 && assume_peer_has_space != 0) {
#line 657
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 658
    p_size = m_size;
  } else {

  }
#line 661
  if (p_size != 0UL && m_size != 0UL) {
#line 662
    __min1 = p_size;
#line 662
    __min2 = m_size;
#line 662
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 664
  if (la_size != 0UL) {
#line 665
    size = la_size;
#line 666
    if (m_size != 0UL && m_size < size) {
#line 667
      size = m_size;
    } else {

    }
#line 668
    if (p_size != 0UL && p_size < size) {
#line 669
      size = p_size;
    } else {

    }
  } else {
#line 671
    if (m_size != 0UL) {
#line 672
      size = m_size;
    } else {

    }
#line 673
    if (p_size != 0UL) {
#line 674
      size = p_size;
    } else {

    }
  }
#line 678
  if (size == 0UL) {
#line 679
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 681
  if (u_size != 0UL) {
#line 682
    if (u_size > size) {
#line 683
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 686
      size = u_size;
    }
  } else {

  }
#line 689
  return (size);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 707
  _b = mdev->sync_conf.al_extents <= 6;
#line 707
  if (_b != 0) {
#line 707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            707);
  } else {

  }
#line 707
  if (_b != 0) {
#line 708
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 710
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 712
    return (0);
  } else {

  }
#line 714
  in_use = 0U;
#line 715
  t = mdev->act_log;
#line 716
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 719
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 720
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 721
    return (-12);
  } else {

  }
#line 723
  spin_lock_irq(& mdev->al_lock);
#line 724
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 725
    i = 0;
#line 725
    goto ldv_46108;
    ldv_46107: 
#line 726
    e = lc_element_by_index(t, (unsigned int )i);
#line 727
    if (e->refcnt != 0U) {
#line 728
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 730
    in_use = e->refcnt + in_use;
#line 725
    i = i + 1;
    ldv_46108: ;
#line 725
    if ((unsigned int )i < t->nr_elements) {
#line 726
      goto ldv_46107;
    } else {

    }

  } else {

  }
#line 733
  if (in_use == 0U) {
#line 734
    mdev->act_log = n;
  } else {

  }
#line 735
  spin_unlock_irq(& mdev->al_lock);
#line 736
  if (in_use != 0U) {
#line 737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 738
    lc_destroy(n);
#line 739
    return (-16);
  } else
#line 741
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 742
    lc_destroy(t);
  } else {

  }
#line 744
  drbd_md_mark_dirty(mdev);
#line 745
  return (0);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 750
  q = mdev->rq_queue;
#line 751
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 752
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 754
  tmp = queue_max_sectors(b);
#line 754
  tmp___0 = queue_logical_block_size(b);
#line 754
  _min1 = tmp * (unsigned int )tmp___0;
#line 754
  _min2 = max_seg_s;
#line 754
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 756
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 757
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 758
  blk_queue_max_segment_size(q, max_seg_s);
#line 759
  blk_queue_logical_block_size(q, 512);
#line 760
  blk_queue_segment_boundary(q, 4095UL);
#line 761
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 763
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 764
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Backing device\'s merge_bvec_fn() = %p\n",
             b->merge_bvec_fn);
  } else {

  }
#line 766
  tmp___1 = queue_max_segment_size(q);
#line 766
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 768
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 769
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 772
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 774
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 784
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 784
  if (tmp == 0) {
#line 784
    goto ldv_46123;
  } else {

  }
#line 784
  tmp___0 = get_current();
#line 784
  __wait.flags = 0U;
#line 784
  __wait.private = (void *)tmp___0;
#line 784
  __wait.func = & autoremove_wake_function;
#line 784
  __wait.task_list.next = & __wait.task_list;
#line 784
  __wait.task_list.prev = & __wait.task_list;
  ldv_46126: 
#line 784
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 784
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 784
  if (tmp___1 == 0) {
#line 784
    goto ldv_46125;
  } else {

  }
#line 784
  schedule();
#line 784
  goto ldv_46126;
  ldv_46125: 
#line 784
  finish_wait(& mdev->state_wait, & __wait);
  ldv_46123: 
#line 785
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 785
  if (tmp___2 == 0) {
#line 785
    goto ldv_46127;
  } else {

  }
#line 785
  tmp___3 = get_current();
#line 785
  __wait___0.flags = 0U;
#line 785
  __wait___0.private = (void *)tmp___3;
#line 785
  __wait___0.func = & autoremove_wake_function;
#line 785
  __wait___0.task_list.next = & __wait___0.task_list;
#line 785
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_46130: 
#line 785
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 785
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 785
  if (tmp___4 == 0) {
#line 785
    goto ldv_46129;
  } else {

  }
#line 785
  schedule();
#line 785
  goto ldv_46130;
  ldv_46129: 
#line 785
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_46127: 
#line 786
  drbd_thread_start(& mdev->worker);
#line 787
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 794
  spin_lock_irq(& mdev->req_lock);
#line 795
  if (((unsigned int )*((unsigned char *)mdev + 1821UL) == 0U && (unsigned int )*((unsigned short *)mdev + 910UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 798
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 799
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 801
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 802
  spin_unlock_irq(& mdev->req_lock);
#line 803
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned short tmp___17 ;
  struct page *page ;
  struct page *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  sector_t tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 815
  nbc = 0;
#line 817
  resync_lru = 0;
#line 820
  cp_discovered = 0;
#line 823
  drbd_reconfig_start(mdev);
#line 826
  if ((int )mdev->state.ldv_35127.disk > 0) {
#line 827
    retcode = ERR_DISK_CONFIGURED;
#line 828
    goto fail;
  } else {

  }
#line 832
  tmp = kzalloc___2(408UL, 208U);
#line 832
  nbc = (struct drbd_backing_dev *)tmp;
#line 833
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 834
    retcode = ERR_NOMEM;
#line 835
    goto fail;
  } else {

  }
#line 838
  nbc->dc.disk_size = 0ULL;
#line 839
  nbc->dc.on_io_error = 0;
#line 840
  nbc->dc.fencing = 0;
#line 841
  nbc->dc.max_bio_bvecs = 0;
#line 843
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 843
  if (tmp___0 == 0) {
#line 844
    retcode = ERR_MANDATORY_TAG;
#line 845
    goto fail;
  } else {

  }
#line 848
  if (nbc->dc.meta_dev_idx < -3) {
#line 849
    retcode = ERR_MD_IDX_INVALID;
#line 850
    goto fail;
  } else {

  }
#line 853
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 854
  tmp___2 = IS_ERR((void const   *)nbc->lo_file);
#line 854
  if (tmp___2 != 0L) {
#line 855
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 855
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___1);
#line 857
    nbc->lo_file = 0;
#line 858
    retcode = ERR_OPEN_DISK;
#line 859
    goto fail;
  } else {

  }
#line 862
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 864
  if (((int )inode->i_mode & 61440) != 24576) {
#line 865
    retcode = ERR_DISK_NOT_BDEV;
#line 866
    goto fail;
  } else {

  }
#line 869
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 870
  tmp___4 = IS_ERR((void const   *)nbc->md_file);
#line 870
  if (tmp___4 != 0L) {
#line 871
    tmp___3 = PTR_ERR((void const   *)nbc->md_file);
#line 871
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___3);
#line 873
    nbc->md_file = 0;
#line 874
    retcode = ERR_OPEN_MD_DISK;
#line 875
    goto fail;
  } else {

  }
#line 878
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 880
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 881
    retcode = ERR_MD_NOT_BDEV;
#line 882
    goto fail;
  } else {

  }
#line 885
  nbc->backing_bdev = inode->ldv_23058.i_bdev;
#line 886
  tmp___5 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 886
  if (tmp___5 != 0) {
#line 887
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 892
    retcode = ERR_BDCLAIM_DISK;
#line 893
    goto fail;
  } else {

  }
#line 896
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 899
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 900
    retcode = ERR_NOMEM;
#line 901
    goto release_bdev_fail;
  } else {

  }
#line 911
  nbc->md_bdev = inode2->ldv_23058.i_bdev;
#line 912
  tmp___6 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 912
  if (tmp___6 != 0) {
#line 914
    retcode = ERR_BDCLAIM_MD_DISK;
#line 915
    goto release_bdev_fail;
  } else {

  }
#line 918
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 921
    retcode = ERR_MD_IDX_INVALID;
#line 922
    goto release_bdev2_fail;
  } else {

  }
#line 926
  drbd_md_set_sector_offsets(mdev, nbc);
#line 928
  tmp___8 = drbd_get_max_capacity___1(nbc);
#line 928
  if ((unsigned long long )tmp___8 < nbc->dc.disk_size) {
#line 929
    tmp___7 = drbd_get_max_capacity___1(nbc);
#line 929
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___7, nbc->dc.disk_size);
#line 932
    retcode = ERR_DISK_TO_SMALL;
#line 933
    goto release_bdev2_fail;
  } else {

  }
#line 936
  if (nbc->dc.meta_dev_idx < 0) {
#line 937
    max_possible_sectors = 34359738368UL;
#line 939
    min_md_device_sectors = 2048UL;
  } else {
#line 941
    max_possible_sectors = 8587575296UL;
#line 942
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 945
  tmp___9 = drbd_get_capacity(nbc->md_bdev);
#line 945
  if (tmp___9 < min_md_device_sectors) {
#line 946
    retcode = ERR_MD_DISK_TO_SMALL;
#line 947
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 950
    goto release_bdev2_fail;
  } else {

  }
#line 955
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 955
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 955
  if (tmp___10 < tmp___11) {
#line 957
    retcode = ERR_DISK_TO_SMALL;
#line 958
    goto release_bdev2_fail;
  } else {

  }
#line 961
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 963
  if (nbc->known_size > max_possible_sectors) {
#line 964
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 967
    if (nbc->dc.meta_dev_idx >= 0) {
#line 968
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 972
  drbd_suspend_io(mdev);
#line 974
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 974
  if (tmp___12 == 0) {
#line 974
    goto ldv_46155;
  } else {

  }
#line 974
  tmp___13 = get_current();
#line 974
  __wait.flags = 0U;
#line 974
  __wait.private = (void *)tmp___13;
#line 974
  __wait.func = & autoremove_wake_function;
#line 974
  __wait.task_list.next = & __wait.task_list;
#line 974
  __wait.task_list.prev = & __wait.task_list;
  ldv_46158: 
#line 974
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 974
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 974
  if (tmp___14 == 0) {
#line 974
    goto ldv_46157;
  } else {

  }
#line 974
  schedule();
#line 974
  goto ldv_46158;
  ldv_46157: 
#line 974
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46155: 
#line 976
  drbd_flush_workqueue(mdev);
#line 978
  val.i = 0U;
#line 978
  val.ldv_35127.disk = 1U;
#line 978
  mask.i = 0U;
#line 978
  mask.ldv_35127.disk = 15U;
#line 978
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 978
  retcode = (enum drbd_ret_codes )tmp___15;
#line 979
  drbd_resume_io(mdev);
#line 980
  if ((unsigned int )retcode == 0U) {
#line 981
    goto release_bdev2_fail;
  } else {

  }
#line 983
  tmp___16 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 983
  if (tmp___16 == 0) {
#line 984
    goto force_diskless;
  } else {

  }
#line 986
  drbd_md_set_sector_offsets(mdev, nbc);
#line 989
  tmp___17 = bdev_logical_block_size(nbc->md_bdev);
#line 989
  logical_block_size = (int )tmp___17;
#line 990
  if (logical_block_size == 0) {
#line 991
    logical_block_size = 512;
  } else {

  }
#line 993
  if (logical_block_size != 512) {
#line 994
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 995
      tmp___18 = alloc_pages(16U, 0U);
#line 995
      page = tmp___18;
#line 996
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 997
        goto force_diskless_dec;
      } else {

      }
#line 999
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1001
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1003
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1007
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1008
    tmp___19 = drbd_bm_init(mdev);
#line 1008
    if (tmp___19 != 0) {
#line 1009
      retcode = ERR_NOMEM;
#line 1010
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1014
  tmp___20 = drbd_md_read(mdev, nbc);
#line 1014
  retcode = (enum drbd_ret_codes )tmp___20;
#line 1015
  if ((unsigned int )retcode != 101U) {
#line 1016
    goto force_diskless_dec;
  } else {

  }
#line 1018
  if (((int )mdev->state.ldv_35127.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1023
    retcode = ERR_DATA_NOT_CURRENT;
#line 1024
    goto force_diskless_dec;
  } else {

  }
#line 1028
  tmp___21 = drbd_check_al_size(mdev);
#line 1028
  if (tmp___21 != 0) {
#line 1029
    retcode = ERR_NOMEM;
#line 1030
    goto force_diskless_dec;
  } else {

  }
#line 1034
  tmp___22 = drbd_md_test_flag(nbc, 1);
#line 1034
  if (tmp___22 != 0) {
#line 1034
    tmp___23 = drbd_new_dev_size(mdev, nbc, 0);
#line 1034
    if ((unsigned long long )tmp___23 < nbc->md.la_size_sect) {
#line 1036
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1037
      retcode = ERR_DISK_TO_SMALL;
#line 1038
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1041
  tmp___24 = drbd_al_read_log(mdev, nbc);
#line 1041
  if (tmp___24 == 0) {
#line 1042
    retcode = ERR_IO_MD_DISK;
#line 1043
    goto force_diskless_dec;
  } else {

  }
#line 1048
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1049
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1051
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1057
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1057
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1057);
  } else {

  }
#line 1058
  mdev->ldev = nbc;
#line 1059
  mdev->resync = resync_lru;
#line 1060
  nbc = 0;
#line 1061
  resync_lru = 0;
#line 1063
  mdev->write_ordering = WO_bio_barrier;
#line 1064
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1066
  tmp___25 = drbd_md_test_flag(mdev->ldev, 64);
#line 1066
  if (tmp___25 != 0) {
#line 1067
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1069
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1071
  tmp___26 = drbd_md_test_flag(mdev->ldev, 2);
#line 1071
  if (tmp___26 != 0) {
#line 1072
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1073
    cp_discovered = 1;
  } else {

  }
#line 1076
  mdev->send_cnt = 0U;
#line 1077
  mdev->recv_cnt = 0U;
#line 1078
  mdev->read_cnt = 0U;
#line 1079
  mdev->writ_cnt = 0U;
#line 1081
  drbd_setup_queue_param(mdev, 32768U);
#line 1097
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1098
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 1098
    tmp___27 = drbd_md_test_flag(mdev->ldev, 2);
#line 1098
    if (tmp___27 != 0) {
#line 1098
      tmp___28 = drbd_md_test_flag(mdev->ldev, 4);
#line 1098
      if (tmp___28 == 0) {
#line 1101
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1103
  dd = drbd_determin_dev_size(mdev, 0);
#line 1104
  if ((int )dd == -1) {
#line 1105
    retcode = ERR_NOMEM_BITMAP;
#line 1106
    goto force_diskless_dec;
  } else
#line 1107
  if ((int )dd == 2) {
#line 1108
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1110
  tmp___31 = drbd_md_test_flag(mdev->ldev, 8);
#line 1110
  if (tmp___31 != 0) {
#line 1111
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1113
    tmp___29 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1113
    if (tmp___29 != 0) {
#line 1114
      retcode = ERR_IO_MD_DISK;
#line 1115
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1118
    tmp___30 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1118
    if (tmp___30 < 0) {
#line 1119
      retcode = ERR_IO_MD_DISK;
#line 1120
      goto force_diskless_dec;
    } else {

    }
  }
#line 1124
  if (cp_discovered != 0) {
#line 1125
    drbd_al_apply_to_bm(mdev);
#line 1126
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1129
  spin_lock_irq(& mdev->req_lock);
#line 1130
  os = mdev->state;
#line 1131
  ns.i = os.i;
#line 1137
  tmp___33 = drbd_md_test_flag(mdev->ldev, 1);
#line 1137
  if (tmp___33 != 0) {
#line 1138
    tmp___32 = drbd_md_test_flag(mdev->ldev, 16);
#line 1138
    if (tmp___32 != 0) {
#line 1139
      ns.ldv_35127.disk = 7U;
    } else {
#line 1141
      ns.ldv_35127.disk = 5U;
    }
  } else {
#line 1143
    ns.ldv_35127.disk = 4U;
  }
#line 1146
  tmp___34 = drbd_md_test_flag(mdev->ldev, 32);
#line 1146
  if (tmp___34 != 0) {
#line 1147
    ns.ldv_35127.pdsk = 5U;
  } else {

  }
#line 1149
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1151
    ns.ldv_35127.disk = 8U;
  } else {

  }
#line 1160
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1161
    mdev->new_state_tmp.i = ns.i;
#line 1162
    ns.i = os.i;
#line 1163
    ns.ldv_35127.disk = 3U;
#line 1168
    kfree((void const   *)mdev->p_uuid);
#line 1169
    mdev->p_uuid = 0;
  } else {

  }
#line 1172
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1173
  ns = mdev->state;
#line 1174
  spin_unlock_irq(& mdev->req_lock);
#line 1176
  if (rv <= 0) {
#line 1177
    goto force_diskless_dec;
  } else {

  }
#line 1179
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 1180
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1182
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1184
  drbd_md_mark_dirty(mdev);
#line 1185
  drbd_md_sync(mdev);
#line 1187
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1188
  put_ldev(mdev);
#line 1189
  reply->ret_code = (int )retcode;
#line 1190
  drbd_reconfig_done(mdev);
#line 1191
  return (0);
  force_diskless_dec: 
#line 1194
  put_ldev(mdev);
  force_diskless: 
#line 1196
  val___0.i = 0U;
#line 1196
  val___0.ldv_35127.disk = 0U;
#line 1196
  mask___0.i = 0U;
#line 1196
  mask___0.ldv_35127.disk = 15U;
#line 1196
  drbd_force_state(mdev, mask___0, val___0);
#line 1197
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1199
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1200
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1202
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1203
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1205
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1206
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1207
      fput(nbc->lo_file);
    } else {

    }
#line 1208
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1209
      fput(nbc->md_file);
    } else {

    }
#line 1210
    kfree((void const   *)nbc);
  } else {

  }
#line 1212
  lc_destroy(resync_lru);
#line 1214
  reply->ret_code = (int )retcode;
#line 1215
  drbd_reconfig_done(mdev);
#line 1216
  return (0);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1222
  val.i = 0U;
#line 1222
  val.ldv_35127.disk = 0U;
#line 1222
  mask.i = 0U;
#line 1222
  mask.ldv_35127.disk = 15U;
#line 1222
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1223
  return (0);
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1231
  new_conf = 0;
#line 1232
  tfm = 0;
#line 1233
  integrity_w_tfm = 0;
#line 1234
  integrity_r_tfm = 0;
#line 1235
  new_tl_hash = 0;
#line 1236
  new_ee_hash = 0;
#line 1239
  int_dig_out = 0;
#line 1240
  int_dig_in = 0;
#line 1241
  int_dig_vv = 0;
#line 1244
  drbd_reconfig_start(mdev);
#line 1246
  if ((int )mdev->state.ldv_35127.conn > 0) {
#line 1247
    retcode = ERR_NET_CONFIGURED;
#line 1248
    goto fail;
  } else {

  }
#line 1252
  tmp = kzalloc___2(532UL, 208U);
#line 1252
  new_conf = (struct net_conf *)tmp;
#line 1253
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1254
    retcode = ERR_NOMEM;
#line 1255
    goto fail;
  } else {

  }
#line 1258
  new_conf->timeout = 60;
#line 1259
  new_conf->try_connect_int = 10;
#line 1260
  new_conf->ping_int = 10;
#line 1261
  new_conf->max_epoch_size = 2048;
#line 1262
  new_conf->max_buffers = 2048;
#line 1263
  new_conf->unplug_watermark = 128;
#line 1264
  new_conf->sndbuf_size = 0;
#line 1265
  new_conf->rcvbuf_size = 0;
#line 1266
  new_conf->ko_count = 0;
#line 1267
  new_conf->after_sb_0p = 0;
#line 1268
  new_conf->after_sb_1p = 0;
#line 1269
  new_conf->after_sb_2p = 0;
#line 1270
  new_conf->want_lose = 0U;
#line 1271
  new_conf->two_primaries = 0U;
#line 1272
  new_conf->wire_protocol = 3;
#line 1273
  new_conf->ping_timeo = 5;
#line 1274
  new_conf->rr_conflict = 0;
#line 1276
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1276
  if (tmp___0 == 0) {
#line 1277
    retcode = ERR_MANDATORY_TAG;
#line 1278
    goto fail;
  } else {

  }
#line 1281
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1283
    retcode = ERR_NOT_PROTO_C;
#line 1284
    goto fail;
  } else {

  }
#line 1287
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1288
    retcode = ERR_DISCARD;
#line 1289
    goto fail;
  } else {

  }
#line 1292
  retcode = NO_ERROR;
#line 1294
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1295
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1296
  i = 0;
#line 1296
  goto ldv_46204;
  ldv_46203: 
#line 1297
  odev = minor_to_mdev((unsigned int )i);
#line 1298
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1299
    goto ldv_46202;
  } else {

  }
#line 1300
  tmp___3 = get_net_conf(odev);
#line 1300
  if (tmp___3 != 0) {
#line 1301
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1302
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1302
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1302
      if (tmp___1 == 0) {
#line 1304
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1306
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1307
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1307
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1307
      if (tmp___2 == 0) {
#line 1309
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1311
    put_net_conf(odev);
#line 1312
    if ((unsigned int )retcode != 101U) {
#line 1313
      goto fail;
    } else {

    }
  } else {

  }
  ldv_46202: 
#line 1296
  i = i + 1;
  ldv_46204: ;
#line 1296
  if ((unsigned int )i < minor_count) {
#line 1297
    goto ldv_46203;
  } else {

  }

#line 1317
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1318
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1320
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1321
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1321
    if (tmp___4 != 0L) {
#line 1322
      tfm = 0;
#line 1323
      retcode = ERR_AUTH_ALG;
#line 1324
      goto fail;
    } else {

    }
#line 1327
    tmp___5 = crypto_hash_tfm(tfm);
#line 1327
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1327
    if (tmp___6 == 0) {
#line 1328
      retcode = ERR_AUTH_ALG_ND;
#line 1329
      goto fail;
    } else {

    }
  } else {

  }
#line 1333
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1334
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1335
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1335
    if (tmp___7 != 0L) {
#line 1336
      integrity_w_tfm = 0;
#line 1337
      retcode = ERR_INTEGRITY_ALG;
#line 1338
      goto fail;
    } else {

    }
#line 1341
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1341
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1341
    if (tmp___9 == 0) {
#line 1342
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1343
      goto fail;
    } else {

    }
#line 1346
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1347
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1347
    if (tmp___10 != 0L) {
#line 1348
      integrity_r_tfm = 0;
#line 1349
      retcode = ERR_INTEGRITY_ALG;
#line 1350
      goto fail;
    } else {

    }
  } else {

  }
#line 1354
  ns = new_conf->max_epoch_size / 8;
#line 1355
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1356
    tmp___11 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1356
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1357
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1358
      retcode = ERR_NOMEM;
#line 1359
      goto fail;
    } else {

    }
  } else {

  }
#line 1363
  ns = new_conf->max_buffers / 8;
#line 1364
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1365
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1365
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1366
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1367
      retcode = ERR_NOMEM;
#line 1368
      goto fail;
    } else {

    }
  } else {

  }
#line 1372
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1374
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1375
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1375
    i = (int )tmp___13;
#line 1376
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1377
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1378
      retcode = ERR_NOMEM;
#line 1379
      goto fail;
    } else {

    }
#line 1381
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1382
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1383
      retcode = ERR_NOMEM;
#line 1384
      goto fail;
    } else {

    }
#line 1386
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1387
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1388
      retcode = ERR_NOMEM;
#line 1389
      goto fail;
    } else {

    }
  } else {

  }
#line 1393
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1394
    tmp___14 = drbd_bm_init(mdev);
#line 1394
    if (tmp___14 != 0) {
#line 1395
      retcode = ERR_NOMEM;
#line 1396
      goto fail;
    } else {

    }
  } else {

  }
#line 1400
  spin_lock_irq(& mdev->req_lock);
#line 1401
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1402
    retcode = ERR_NET_CONFIGURED;
#line 1403
    spin_unlock_irq(& mdev->req_lock);
#line 1404
    goto fail;
  } else {

  }
#line 1406
  mdev->net_conf = new_conf;
#line 1408
  mdev->send_cnt = 0U;
#line 1409
  mdev->recv_cnt = 0U;
#line 1411
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1412
    kfree((void const   *)mdev->tl_hash);
#line 1413
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1414
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1417
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1418
    kfree((void const   *)mdev->ee_hash);
#line 1419
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1420
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1423
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1424
  mdev->cram_hmac_tfm = tfm;
#line 1426
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1427
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1429
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1430
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1432
  kfree((void const   *)mdev->int_dig_out);
#line 1433
  kfree((void const   *)mdev->int_dig_in);
#line 1434
  kfree((void const   *)mdev->int_dig_vv);
#line 1435
  mdev->int_dig_out = int_dig_out;
#line 1436
  mdev->int_dig_in = int_dig_in;
#line 1437
  mdev->int_dig_vv = int_dig_vv;
#line 1438
  spin_unlock_irq(& mdev->req_lock);
#line 1440
  val.i = 0U;
#line 1440
  val.ldv_35127.conn = 2U;
#line 1440
  mask.i = 0U;
#line 1440
  mask.ldv_35127.conn = 31U;
#line 1440
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1440
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1442
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1443
  reply->ret_code = (int )retcode;
#line 1444
  drbd_reconfig_done(mdev);
#line 1445
  return (0);
  fail: 
#line 1448
  kfree((void const   *)int_dig_out);
#line 1449
  kfree((void const   *)int_dig_in);
#line 1450
  kfree((void const   *)int_dig_vv);
#line 1451
  crypto_free_hash(tfm);
#line 1452
  crypto_free_hash(integrity_w_tfm);
#line 1453
  crypto_free_hash(integrity_r_tfm);
#line 1454
  kfree((void const   *)new_tl_hash);
#line 1455
  kfree((void const   *)new_ee_hash);
#line 1456
  kfree((void const   *)new_conf);
#line 1458
  reply->ret_code = (int )retcode;
#line 1459
  drbd_reconfig_done(mdev);
#line 1460
  return (0);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1468
  val.i = 0U;
#line 1468
  val.ldv_35127.conn = 1U;
#line 1468
  mask.i = 0U;
#line 1468
  mask.ldv_35127.conn = 31U;
#line 1468
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1470
  if (retcode == 2) {
#line 1471
    goto done;
  } else
#line 1472
  if (retcode == -9) {
#line 1473
    goto done;
  } else
#line 1474
  if (retcode == -7) {
#line 1477
    val___0.i = 0U;
#line 1477
    val___0.ldv_35127.conn = 1U;
#line 1477
    val___0.ldv_35127.pdsk = 5U;
#line 1476
    mask___0.i = 0U;
#line 1476
    mask___0.ldv_35127.conn = 31U;
#line 1477
    mask___0.ldv_35127.pdsk = 15U;
#line 1477
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1478
  if (retcode == -10) {
#line 1481
    val___1.i = 0U;
#line 1481
    val___1.ldv_35127.conn = 1U;
#line 1481
    val___1.ldv_35127.disk = 5U;
#line 1480
    mask___1.i = 0U;
#line 1480
    mask___1.ldv_35127.conn = 31U;
#line 1481
    mask___1.ldv_35127.disk = 15U;
#line 1481
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1483
    if (retcode == -11 || retcode == -16) {
#line 1484
      val___2.i = 0U;
#line 1484
      val___2.ldv_35127.conn = 1U;
#line 1484
      mask___2.i = 0U;
#line 1484
      mask___2.ldv_35127.conn = 31U;
#line 1484
      drbd_force_state(mdev, mask___2, val___2);
#line 1485
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1489
  if (retcode <= 0) {
#line 1490
    goto fail;
  } else {

  }
#line 1492
  __ret = 0;
#line 1492
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 16U) {
#line 1492
    tmp = get_current();
#line 1492
    __wait.flags = 0U;
#line 1492
    __wait.private = (void *)tmp;
#line 1492
    __wait.func = & autoremove_wake_function;
#line 1492
    __wait.task_list.next = & __wait.task_list;
#line 1492
    __wait.task_list.prev = & __wait.task_list;
    ldv_46238: 
#line 1492
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1492
    if ((unsigned int )*((unsigned short *)mdev + 910UL) != 16U) {
#line 1492
      goto ldv_46236;
    } else {

    }
#line 1492
    tmp___0 = get_current();
#line 1492
    tmp___1 = signal_pending(tmp___0);
#line 1492
    if (tmp___1 == 0) {
#line 1492
      schedule();
#line 1492
      goto ldv_46237;
    } else {

    }
#line 1492
    __ret = -512;
#line 1492
    goto ldv_46236;
    ldv_46237: ;
#line 1492
    goto ldv_46238;
    ldv_46236: 
#line 1492
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1492
  if (__ret != 0) {
#line 1496
    retcode = 129;
#line 1497
    goto fail;
  } else {

  }
  done: 
#line 1501
  retcode = 101;
  fail: 
#line 1503
  drbd_md_sync(mdev);
#line 1504
  reply->ret_code = retcode;
#line 1505
  return (0);
}
}
#line 1508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1512
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1513
  if ((int )mdev->state.ldv_35127.role != (int )mdev->state.ldv_35127.peer) {
#line 1514
    iass = (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U;
  } else {
#line 1516
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1518
  if (iass != 0) {
#line 1519
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1521
    val.i = 0U;
#line 1521
    val.ldv_35127.conn = 15U;
#line 1521
    mask.i = 0U;
#line 1521
    mask.ldv_35127.conn = 31U;
#line 1521
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1523
  return;
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1528
  retcode = 101;
#line 1532
  memset((void *)(& rs), 0, 16UL);
#line 1533
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1533
  if (tmp == 0) {
#line 1534
    retcode = 126;
#line 1535
    goto fail;
  } else {

  }
#line 1538
  if ((int )mdev->state.ldv_35127.conn > 10) {
#line 1539
    retcode = 130;
#line 1540
    goto fail;
  } else {

  }
#line 1543
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1820UL) == 8U) {
#line 1545
    retcode = 131;
#line 1546
    goto fail;
  } else {

  }
#line 1549
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1549
  if (tmp___0 == 0) {
#line 1550
    retcode = 138;
#line 1551
    goto fail;
  } else {

  }
#line 1554
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1555
    retcode = 153;
#line 1556
    goto fail;
  } else {

  }
#line 1559
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1559
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1560
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1562
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1563
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1564
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1565
  drbd_md_sync(mdev);
#line 1566
  put_ldev(mdev);
#line 1567
  if ((int )dd == -1) {
#line 1568
    retcode = 140;
#line 1569
    goto fail;
  } else {

  }
#line 1572
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1573
    if ((int )dd == 2) {
#line 1574
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1576
    drbd_send_uuids(mdev);
#line 1577
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1581
  reply->ret_code = retcode;
#line 1582
  return (0);
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  int tmp___10 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  bool tmp___14 ;
  int tmp___15 ;

  {
#line 1588
  retcode = 101;
#line 1592
  verify_tfm = 0;
#line 1593
  csums_tfm = 0;
#line 1597
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1597
  if (tmp) {
#line 1597
    tmp___0 = 0;
  } else {
#line 1597
    tmp___0 = 1;
  }
#line 1597
  if (tmp___0) {
#line 1598
    retcode = 122;
#line 1599
    goto fail;
  } else {

  }
#line 1602
  if ((nlp->flags & 2) != 0) {
#line 1603
    memset((void *)(& sc), 0, 188UL);
#line 1604
    sc.rate = 250;
#line 1605
    sc.after = -1;
#line 1606
    sc.al_extents = 127;
  } else {
#line 1608
    __len = 188UL;
#line 1608
    if (__len > 63UL) {
#line 1608
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1608
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1610
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1610
  if (tmp___1 == 0) {
#line 1611
    retcode = 126;
#line 1612
    goto fail;
  } else {

  }
#line 1616
  rsr = (((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 336U;
#line 1621
  if (rsr != 0) {
#line 1621
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1621
    if (tmp___2 != 0) {
#line 1622
      retcode = 148;
#line 1623
      goto fail;
    } else {

    }
  } else {

  }
#line 1626
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1627
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1628
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1628
    if (tmp___3 != 0L) {
#line 1629
      csums_tfm = 0;
#line 1630
      retcode = 144;
#line 1631
      goto fail;
    } else {

    }
#line 1634
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1634
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1634
    if (tmp___5 == 0) {
#line 1635
      retcode = 145;
#line 1636
      goto fail;
    } else {

    }
  } else {

  }
#line 1641
  ovr = (unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U;
#line 1643
  if (ovr != 0) {
#line 1644
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1644
    if (tmp___6 != 0) {
#line 1645
      retcode = 149;
#line 1646
      goto fail;
    } else {

    }
  } else {

  }
#line 1650
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1651
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1652
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1652
    if (tmp___7 != 0L) {
#line 1653
      verify_tfm = 0;
#line 1654
      retcode = 146;
#line 1655
      goto fail;
    } else {

    }
#line 1658
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1658
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1658
    if (tmp___9 == 0) {
#line 1659
      retcode = 147;
#line 1660
      goto fail;
    } else {

    }
  } else {

  }
#line 1665
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1666
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1668
    if (err != 0) {
#line 1669
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1670
      retcode = 143;
#line 1671
      goto fail;
    } else {

    }
  } else {

  }
#line 1675
  _b = sc.rate <= 0;
#line 1675
  if (_b != 0) {
#line 1675
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1675);
  } else {

  }
#line 1675
  if (_b != 0) {
#line 1675
    sc.rate = 1;
  } else {

  }
#line 1676
  _b___0 = sc.al_extents <= 6;
#line 1676
  if (_b___0 != 0) {
#line 1676
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1676);
  } else {

  }
#line 1676
  if (_b___0 != 0) {
#line 1676
    sc.al_extents = 127;
  } else {

  }
#line 1678
  if (sc.al_extents > 3843) {
#line 1679
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1680
    sc.al_extents = 3843;
  } else {

  }
#line 1687
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1688
  if (retcode != 101) {
#line 1689
    goto fail;
  } else {

  }
#line 1693
  spin_lock(& mdev->peer_seq_lock);
#line 1694
  mdev->sync_conf = sc;
#line 1696
  if (rsr == 0) {
#line 1697
    crypto_free_hash(mdev->csums_tfm);
#line 1698
    mdev->csums_tfm = csums_tfm;
#line 1699
    csums_tfm = 0;
  } else {

  }
#line 1702
  if (ovr == 0) {
#line 1703
    crypto_free_hash(mdev->verify_tfm);
#line 1704
    mdev->verify_tfm = verify_tfm;
#line 1705
    verify_tfm = 0;
  } else {

  }
#line 1707
  spin_unlock(& mdev->peer_seq_lock);
#line 1709
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1709
  if (tmp___13 != 0) {
#line 1710
    tmp___10 = lc_try_lock(mdev->act_log);
#line 1710
    if (tmp___10 != 0) {
#line 1710
      goto ldv_46280;
    } else {

    }
#line 1710
    tmp___11 = get_current();
#line 1710
    __wait.flags = 0U;
#line 1710
    __wait.private = (void *)tmp___11;
#line 1710
    __wait.func = & autoremove_wake_function;
#line 1710
    __wait.task_list.next = & __wait.task_list;
#line 1710
    __wait.task_list.prev = & __wait.task_list;
    ldv_46283: 
#line 1710
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1710
    tmp___12 = lc_try_lock(mdev->act_log);
#line 1710
    if (tmp___12 != 0) {
#line 1710
      goto ldv_46282;
    } else {

    }
#line 1710
    schedule();
#line 1710
    goto ldv_46283;
    ldv_46282: 
#line 1710
    finish_wait(& mdev->al_wait, & __wait);
    ldv_46280: 
#line 1711
    drbd_al_shrink(mdev);
#line 1712
    err = drbd_check_al_size(mdev);
#line 1713
    lc_unlock(mdev->act_log);
#line 1714
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1716
    put_ldev(mdev);
#line 1717
    drbd_md_sync(mdev);
#line 1719
    if (err != 0) {
#line 1720
      retcode = 122;
#line 1721
      goto fail;
    } else {

    }
  } else {

  }
#line 1725
  if ((int )mdev->state.ldv_35127.conn > 9) {
#line 1726
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1728
  tmp___14 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1728
  if (tmp___14) {
#line 1728
    tmp___15 = 0;
  } else {
#line 1728
    tmp___15 = 1;
  }
#line 1728
  if (tmp___15) {
#line 1729
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1730
    drbd_calc_cpu_mask(mdev);
#line 1731
    mdev->receiver.reset_cpu_mask = 1;
#line 1732
    mdev->asender.reset_cpu_mask = 1;
#line 1733
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1736
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1738
  free_cpumask_var(new_cpu_mask);
#line 1739
  crypto_free_hash(csums_tfm);
#line 1740
  crypto_free_hash(verify_tfm);
#line 1741
  reply->ret_code = retcode;
#line 1742
  return (0);
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1750
  val.i = 0U;
#line 1750
  val.ldv_35127.conn = 12U;
#line 1750
  mask.i = 0U;
#line 1750
  mask.ldv_35127.conn = 31U;
#line 1750
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1752
  if (retcode <= 0 && retcode != -15) {
#line 1753
    val___0.i = 0U;
#line 1753
    val___0.ldv_35127.conn = 12U;
#line 1753
    mask___0.i = 0U;
#line 1753
    mask___0.ldv_35127.conn = 31U;
#line 1753
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1755
  goto ldv_46306;
  ldv_46305: 
#line 1756
  spin_lock_irq(& mdev->req_lock);
#line 1757
  if ((int )mdev->state.ldv_35127.conn <= 9) {
#line 1758
    __ns.i = mdev->state.i;
#line 1758
    __ns.ldv_35127.disk = 4U;
#line 1758
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1759
  spin_unlock_irq(& mdev->req_lock);
#line 1761
  if (retcode != -15) {
#line 1762
    goto ldv_46300;
  } else {

  }
#line 1764
  val___1.i = 0U;
#line 1764
  val___1.ldv_35127.conn = 12U;
#line 1764
  mask___1.i = 0U;
#line 1764
  mask___1.ldv_35127.conn = 31U;
#line 1764
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_46306: ;
#line 1755
  if (retcode == -15) {
#line 1756
    goto ldv_46305;
  } else {

  }
  ldv_46300: 
#line 1767
  reply->ret_code = retcode;
#line 1768
  return (0);
}
}
#line 1771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1775
  val.i = 0U;
#line 1775
  val.ldv_35127.conn = 11U;
#line 1775
  mask.i = 0U;
#line 1775
  mask.ldv_35127.conn = 31U;
#line 1775
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1777
  return (0);
}
}
#line 1780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1783
  retcode = 101;
#line 1785
  val.i = 0U;
#line 1785
  val.ldv_35127.user_isp = 1U;
#line 1785
  mask.i = 0U;
#line 1785
  mask.ldv_35127.user_isp = 1U;
#line 1785
  tmp = drbd_request_state(mdev, mask, val);
#line 1785
  if (tmp == 2) {
#line 1786
    retcode = 134;
  } else {

  }
#line 1788
  reply->ret_code = retcode;
#line 1789
  return (0);
}
}
#line 1792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1795
  retcode = 101;
#line 1797
  val.i = 0U;
#line 1797
  val.ldv_35127.user_isp = 0U;
#line 1797
  mask.i = 0U;
#line 1797
  mask.ldv_35127.user_isp = 1U;
#line 1797
  tmp = drbd_request_state(mdev, mask, val);
#line 1797
  if (tmp == 2) {
#line 1798
    retcode = 135;
  } else {

  }
#line 1800
  reply->ret_code = retcode;
#line 1801
  return (0);
}
}
#line 1804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1807
  val.i = 0U;
#line 1807
  val.ldv_35127.susp = 1U;
#line 1807
  mask.i = 0U;
#line 1807
  mask.ldv_35127.susp = 1U;
#line 1807
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1809
  return (0);
}
}
#line 1812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1815
  val.i = 0U;
#line 1815
  val.ldv_35127.susp = 0U;
#line 1815
  mask.i = 0U;
#line 1815
  mask.ldv_35127.susp = 1U;
#line 1815
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1816
  return (0);
}
}
#line 1819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1822
  val.i = 0U;
#line 1822
  val.ldv_35127.disk = 5U;
#line 1822
  mask.i = 0U;
#line 1822
  mask.ldv_35127.disk = 15U;
#line 1822
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1823
  return (0);
}
}
#line 1826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1831
  tl = (unsigned short *)(& reply->tag_list);
#line 1833
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1833
  if (tmp != 0) {
#line 1834
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1835
    put_ldev(mdev);
  } else {

  }
#line 1838
  tmp___0 = get_net_conf(mdev);
#line 1838
  if (tmp___0 != 0) {
#line 1839
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1840
    put_net_conf(mdev);
  } else {

  }
#line 1842
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1844
  tmp___1 = tl;
#line 1844
  tl = tl + 1;
#line 1844
  __gu_p = (void *)tmp___1;
#line 1844
  switch (2UL) {
  case 1UL: 
#line 1844
  *((u8 *)__gu_p) = 0U;
#line 1844
  goto ldv_46371;
  case 2UL: 
#line 1844
  put_unaligned_le16(0, __gu_p);
#line 1844
  goto ldv_46371;
  case 4UL: 
#line 1844
  put_unaligned_le32(0U, __gu_p);
#line 1844
  goto ldv_46371;
  case 8UL: 
#line 1844
  put_unaligned_le64(0ULL, __gu_p);
#line 1844
  goto ldv_46371;
  default: 
#line 1844
  __bad_unaligned_access_size();
#line 1844
  goto ldv_46371;
  }
  ldv_46371: ;
#line 1846
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1849 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1852
  tl = (unsigned short *)(& reply->tag_list);
#line 1853
  s = mdev->state;
#line 1857
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1860
  if ((int )s.ldv_35127.conn > 15 && (int )s.ldv_35127.conn <= 21) {
#line 1861
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1861
    if (tmp != 0) {
#line 1862
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1863
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1864
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1867
  tmp___0 = tl;
#line 1867
  tl = tl + 1;
#line 1867
  __gu_p = (void *)tmp___0;
#line 1867
  switch (2UL) {
  case 1UL: 
#line 1867
  *((u8 *)__gu_p) = 0U;
#line 1867
  goto ldv_46387;
  case 2UL: 
#line 1867
  put_unaligned_le16(0, __gu_p);
#line 1867
  goto ldv_46387;
  case 4UL: 
#line 1867
  put_unaligned_le32(0U, __gu_p);
#line 1867
  goto ldv_46387;
  case 8UL: 
#line 1867
  put_unaligned_le64(0ULL, __gu_p);
#line 1867
  goto ldv_46387;
  default: 
#line 1867
  __bad_unaligned_access_size();
#line 1867
  goto ldv_46387;
  }
  ldv_46387: ;
#line 1869
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1877
  tl = (unsigned short *)(& reply->tag_list);
#line 1879
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1879
  if (tmp != 0) {
#line 1880
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1881
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1882
    put_ldev(mdev);
  } else {

  }
#line 1884
  tmp___0 = tl;
#line 1884
  tl = tl + 1;
#line 1884
  __gu_p = (void *)tmp___0;
#line 1884
  switch (2UL) {
  case 1UL: 
#line 1884
  *((u8 *)__gu_p) = 0U;
#line 1884
  goto ldv_46400;
  case 2UL: 
#line 1884
  put_unaligned_le16(0, __gu_p);
#line 1884
  goto ldv_46400;
  case 4UL: 
#line 1884
  put_unaligned_le32(0U, __gu_p);
#line 1884
  goto ldv_46400;
  case 8UL: 
#line 1884
  put_unaligned_le64(0ULL, __gu_p);
#line 1884
  goto ldv_46400;
  default: 
#line 1884
  __bad_unaligned_access_size();
#line 1884
  goto ldv_46400;
  }
  ldv_46400: ;
#line 1886
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1901
  tl = (unsigned short *)(& reply->tag_list);
#line 1903
  if (*((unsigned int *)mdev + 455UL) != 40960U) {
#line 1903
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1903
    rv = tmp != 0;
  } else {
#line 1903
    rv = 2;
  }
#line 1906
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1907
  tmp___0 = tl;
#line 1907
  tl = tl + 1;
#line 1907
  __gu_p = (void *)tmp___0;
#line 1907
  switch (2UL) {
  case 1UL: 
#line 1907
  *((u8 *)__gu_p) = 0U;
#line 1907
  goto ldv_46414;
  case 2UL: 
#line 1907
  put_unaligned_le16(0, __gu_p);
#line 1907
  goto ldv_46414;
  case 4UL: 
#line 1907
  put_unaligned_le32(0U, __gu_p);
#line 1907
  goto ldv_46414;
  case 8UL: 
#line 1907
  put_unaligned_le64(0ULL, __gu_p);
#line 1907
  goto ldv_46414;
  default: 
#line 1907
  __bad_unaligned_access_size();
#line 1907
  goto ldv_46414;
  }
  ldv_46414: ;
#line 1909
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1916
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1919
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1919
  if (tmp == 0) {
#line 1920
    reply->ret_code = 126;
#line 1921
    return (0);
  } else {

  }
#line 1924
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1925
  val.i = 0U;
#line 1925
  val.ldv_35127.conn = 18U;
#line 1925
  mask.i = 0U;
#line 1925
  mask.ldv_35127.conn = 31U;
#line 1925
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1926
  return (0);
}
}
#line 1930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 1933
  retcode = 101;
#line 1934
  skip_initial_sync = 0;
#line 1939
  memset((void *)(& args), 0, 4UL);
#line 1940
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1940
  if (tmp == 0) {
#line 1941
    reply->ret_code = 126;
#line 1942
    return (0);
  } else {

  }
#line 1945
  ldv_mutex_lock_187(& mdev->state_mutex);
#line 1947
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1947
  if (tmp___0 == 0) {
#line 1948
    retcode = 138;
#line 1949
    goto out;
  } else {

  }
#line 1953
  if ((((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1955
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 1956
    skip_initial_sync = 1;
  } else
#line 1957
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1958
    retcode = 151;
#line 1959
    goto out_dec;
  } else {

  }
#line 1962
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1963
  drbd_uuid_new_current(mdev);
#line 1965
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1966
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1967
    if (err != 0) {
#line 1968
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 1969
      retcode = 118;
    } else {

    }
#line 1971
    if (skip_initial_sync != 0) {
#line 1972
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1973
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1974
      spin_lock_irq(& mdev->req_lock);
#line 1975
      __ns.i = mdev->state.i;
#line 1975
      __ns.ldv_35127.disk = 8U;
#line 1975
      __ns.ldv_35127.pdsk = 8U;
#line 1975
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1977
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1981
  drbd_md_sync(mdev);
  out_dec: 
#line 1983
  put_ldev(mdev);
  out: 
#line 1985
  ldv_mutex_unlock_188(& mdev->state_mutex);
#line 1987
  reply->ret_code = retcode;
#line 1988
  return (0);
}
}
#line 1991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1995
  if (nlp->drbd_minor >= minor_count) {
#line 1996
    return (0);
  } else {

  }
#line 1998
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 2000
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 2001
    disk = 0;
#line 2002
    mdev = drbd_new_device(nlp->drbd_minor);
#line 2004
    spin_lock_irq(& drbd_pp_lock);
#line 2005
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 2006
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 2007
      disk = mdev->vdisk;
#line 2008
      mdev = 0;
    } else {

    }
#line 2010
    spin_unlock_irq(& drbd_pp_lock);
#line 2012
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 2015
      add_disk(disk);
    } else {
#line 2017
      drbd_free_mdev(mdev);
    }
#line 2019
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 2022
  return (mdev);
}
}
#line 2032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2032
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1240}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2065
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2071
  reply_size = 34;
#line 2075
  tmp = try_module_get___0(& __this_module);
#line 2075
  if (tmp == 0) {
#line 2076
    printk("<3>drbd: try_module_get() failed!\n");
#line 2077
    return;
  } else {

  }
#line 2080
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2081
    retcode = 152;
#line 2082
    goto fail;
  } else {

  }
#line 2085
  mdev = ensure_mdev(nlp);
#line 2086
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2087
    retcode = 127;
#line 2088
    goto fail;
  } else {

  }
#line 2091
  if (nlp->packet_type > 26) {
#line 2092
    retcode = 137;
#line 2093
    goto fail;
  } else {

  }
#line 2096
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2099
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2100
    retcode = 137;
#line 2101
    goto fail;
  } else {

  }
#line 2104
  reply_size = cm->reply_body_size + reply_size;
#line 2107
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2107
  cn_reply = (struct cn_msg *)tmp___0;
#line 2108
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2109
    retcode = 122;
#line 2110
    goto fail;
  } else {

  }
#line 2112
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2114
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2116
  reply->minor = nlp->drbd_minor;
#line 2117
  reply->ret_code = 101;
#line 2120
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2122
  cn_reply->id = req->id;
#line 2123
  cn_reply->seq = req->seq;
#line 2124
  cn_reply->ack = req->ack + 1U;
#line 2125
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2126
  cn_reply->flags = 0U;
#line 2128
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2129
  if (rr != 0 && rr != -3) {
#line 2130
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2132
  kfree((void const   *)cn_reply);
#line 2133
  module_put(& __this_module);
#line 2134
  return;
  fail: 
#line 2136
  drbd_nl_send_reply(req, retcode);
#line 2137
  module_put(& __this_module);
#line 2138
  return;
}
}
#line 2140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2146
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2147
  len = (int )len < (int )l ? len : l;
#line 2148
  tmp = tl;
#line 2148
  tl = tl + 1;
#line 2148
  __gu_p = (void *)tmp;
#line 2148
  switch (2UL) {
  case 1UL: 
#line 2148
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2148
  goto ldv_46478;
  case 2UL: 
#line 2148
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2148
  goto ldv_46478;
  case 4UL: 
#line 2148
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2148
  goto ldv_46478;
  case 8UL: 
#line 2148
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2148
  goto ldv_46478;
  default: 
#line 2148
  __bad_unaligned_access_size();
#line 2148
  goto ldv_46478;
  }
  ldv_46478: 
#line 2149
  tmp___0 = tl;
#line 2149
  tl = tl + 1;
#line 2149
  __gu_p___0 = (void *)tmp___0;
#line 2149
  switch (2UL) {
  case 1UL: 
#line 2149
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2149
  goto ldv_46485;
  case 2UL: 
#line 2149
  put_unaligned_le16((int )len, __gu_p___0);
#line 2149
  goto ldv_46485;
  case 4UL: 
#line 2149
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2149
  goto ldv_46485;
  case 8UL: 
#line 2149
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2149
  goto ldv_46485;
  default: 
#line 2149
  __bad_unaligned_access_size();
#line 2149
  goto ldv_46485;
  }
  ldv_46485: 
#line 2150
  __len = (size_t )len;
#line 2150
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2151
  tl = tl + (unsigned long )len;
#line 2152
  if (nul_terminated != 0) {
#line 2153
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2154
  return (tl);
}
}
#line 2158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2160
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2160
  return (tmp);
}
}
#line 2164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2166
  tmp = strlen(str);
#line 2166
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2166
  return (tmp___0);
}
}
#line 2170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2172
  tmp = tl;
#line 2172
  tl = tl + 1;
#line 2172
  __gu_p = (void *)tmp;
#line 2172
  switch (2UL) {
  case 1UL: 
#line 2172
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2172
  goto ldv_46511;
  case 2UL: 
#line 2172
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2172
  goto ldv_46511;
  case 4UL: 
#line 2172
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2172
  goto ldv_46511;
  case 8UL: 
#line 2172
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2172
  goto ldv_46511;
  default: 
#line 2172
  __bad_unaligned_access_size();
#line 2172
  goto ldv_46511;
  }
  ldv_46511: ;
#line 2173
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2175
  tmp___0 = tl;
#line 2175
  tl = tl + 1;
#line 2175
  __gu_p___0 = (void *)tmp___0;
#line 2175
  switch (2UL) {
  case 1UL: 
#line 2175
  *((u8 *)__gu_p___0) = 4U;
#line 2175
  goto ldv_46519;
  case 2UL: 
#line 2175
  put_unaligned_le16(4, __gu_p___0);
#line 2175
  goto ldv_46519;
  case 4UL: 
#line 2175
  put_unaligned_le32(4U, __gu_p___0);
#line 2175
  goto ldv_46519;
  case 8UL: 
#line 2175
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2175
  goto ldv_46519;
  default: 
#line 2175
  __bad_unaligned_access_size();
#line 2175
  goto ldv_46519;
  }
  ldv_46519: 
#line 2176
  __gu_p___1 = (void *)tl;
#line 2176
  switch (4UL) {
  case 1UL: 
#line 2176
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2176
  goto ldv_46526;
  case 2UL: 
#line 2176
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2176
  goto ldv_46526;
  case 4UL: 
#line 2176
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2176
  goto ldv_46526;
  case 8UL: 
#line 2176
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2176
  goto ldv_46526;
  default: 
#line 2176
  __bad_unaligned_access_size();
#line 2176
  goto ldv_46526;
  }
  ldv_46526: 
#line 2177
  tl = tl + 4U;
#line 2178
  goto ldv_46531;
  case 16384U: 
#line 2180
  tmp___1 = tl;
#line 2180
  tl = tl + 1;
#line 2180
  __gu_p___2 = (void *)tmp___1;
#line 2180
  switch (2UL) {
  case 1UL: 
#line 2180
  *((u8 *)__gu_p___2) = 8U;
#line 2180
  goto ldv_46535;
  case 2UL: 
#line 2180
  put_unaligned_le16(8, __gu_p___2);
#line 2180
  goto ldv_46535;
  case 4UL: 
#line 2180
  put_unaligned_le32(8U, __gu_p___2);
#line 2180
  goto ldv_46535;
  case 8UL: 
#line 2180
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2180
  goto ldv_46535;
  default: 
#line 2180
  __bad_unaligned_access_size();
#line 2180
  goto ldv_46535;
  }
  ldv_46535: 
#line 2181
  __gu_p___3 = (void *)tl;
#line 2181
  switch (8UL) {
  case 1UL: 
#line 2181
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2181
  goto ldv_46542;
  case 2UL: 
#line 2181
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2181
  goto ldv_46542;
  case 4UL: 
#line 2181
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2181
  goto ldv_46542;
  case 8UL: 
#line 2181
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2181
  goto ldv_46542;
  default: 
#line 2181
  __bad_unaligned_access_size();
#line 2181
  goto ldv_46542;
  }
  ldv_46542: 
#line 2182
  tl = tl + 8U;
#line 2183
  goto ldv_46531;
  default: ;
  }
  ldv_46531: ;
#line 2188
  return (tl);
}
}
#line 2191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2197
  cn_reply = (struct cn_msg *)(& buffer);
#line 2198
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2200
  tl = (unsigned short *)(& reply->tag_list);
#line 2204
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2206
  tmp = tl;
#line 2206
  tl = tl + 1;
#line 2206
  __gu_p = (void *)tmp;
#line 2206
  switch (2UL) {
  case 1UL: 
#line 2206
  *((u8 *)__gu_p) = 0U;
#line 2206
  goto ldv_46558;
  case 2UL: 
#line 2206
  put_unaligned_le16(0, __gu_p);
#line 2206
  goto ldv_46558;
  case 4UL: 
#line 2206
  put_unaligned_le32(0U, __gu_p);
#line 2206
  goto ldv_46558;
  case 8UL: 
#line 2206
  put_unaligned_le64(0ULL, __gu_p);
#line 2206
  goto ldv_46558;
  default: 
#line 2206
  __bad_unaligned_access_size();
#line 2206
  goto ldv_46558;
  }
  ldv_46558: 
#line 2208
  cn_reply->id.idx = 8U;
#line 2209
  cn_reply->id.val = 1U;
#line 2211
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2211
  cn_reply->seq = (__u32 )tmp___0;
#line 2212
  cn_reply->ack = 0U;
#line 2213
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2215
  cn_reply->flags = 0U;
#line 2217
  reply->packet_type = 17;
#line 2218
  reply->minor = mdev_to_minor(mdev);
#line 2219
  reply->ret_code = 101;
#line 2221
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2222
  return;
}
}
#line 2224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2230
  cn_reply = (struct cn_msg *)(& buffer);
#line 2231
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2233
  tl = (unsigned short *)(& reply->tag_list);
#line 2237
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2238
  tmp = tl;
#line 2238
  tl = tl + 1;
#line 2238
  __gu_p = (void *)tmp;
#line 2238
  switch (2UL) {
  case 1UL: 
#line 2238
  *((u8 *)__gu_p) = 0U;
#line 2238
  goto ldv_46573;
  case 2UL: 
#line 2238
  put_unaligned_le16(0, __gu_p);
#line 2238
  goto ldv_46573;
  case 4UL: 
#line 2238
  put_unaligned_le32(0U, __gu_p);
#line 2238
  goto ldv_46573;
  case 8UL: 
#line 2238
  put_unaligned_le64(0ULL, __gu_p);
#line 2238
  goto ldv_46573;
  default: 
#line 2238
  __bad_unaligned_access_size();
#line 2238
  goto ldv_46573;
  }
  ldv_46573: 
#line 2240
  cn_reply->id.idx = 8U;
#line 2241
  cn_reply->id.val = 1U;
#line 2243
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2243
  cn_reply->seq = (__u32 )tmp___0;
#line 2244
  cn_reply->ack = 0U;
#line 2245
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2247
  cn_reply->flags = 0U;
#line 2249
  reply->packet_type = 20;
#line 2250
  reply->minor = mdev_to_minor(mdev);
#line 2251
  reply->ret_code = 101;
#line 2253
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2254
  return;
}
}
#line 2256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2267
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2268
    return;
  } else {

  }
#line 2269
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2270
    return;
  } else {

  }
#line 2278
  tmp = kmalloc___5(33026UL, 16U);
#line 2278
  cn_reply = (struct cn_msg *)tmp;
#line 2285
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2288
    return;
  } else {

  }
#line 2291
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2292
  tl = (unsigned short *)(& reply->tag_list);
#line 2294
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2295
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2296
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2297
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2298
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2300
  tmp___0 = tl;
#line 2300
  tl = tl + 1;
#line 2300
  __gu_p = (void *)tmp___0;
#line 2300
  switch (2UL) {
  case 1UL: 
#line 2300
  *((u8 *)__gu_p) = 50U;
#line 2300
  goto ldv_46593;
  case 2UL: 
#line 2300
  put_unaligned_le16(49202, __gu_p);
#line 2300
  goto ldv_46593;
  case 4UL: 
#line 2300
  put_unaligned_le32(49202U, __gu_p);
#line 2300
  goto ldv_46593;
  case 8UL: 
#line 2300
  put_unaligned_le64(49202ULL, __gu_p);
#line 2300
  goto ldv_46593;
  default: 
#line 2300
  __bad_unaligned_access_size();
#line 2300
  goto ldv_46593;
  }
  ldv_46593: 
#line 2301
  tmp___1 = tl;
#line 2301
  tl = tl + 1;
#line 2301
  __gu_p___0 = (void *)tmp___1;
#line 2301
  switch (2UL) {
  case 1UL: 
#line 2301
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2301
  goto ldv_46600;
  case 2UL: 
#line 2301
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2301
  goto ldv_46600;
  case 4UL: 
#line 2301
  put_unaligned_le32(e->size, __gu_p___0);
#line 2301
  goto ldv_46600;
  case 8UL: 
#line 2301
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2301
  goto ldv_46600;
  default: 
#line 2301
  __bad_unaligned_access_size();
#line 2301
  goto ldv_46600;
  }
  ldv_46600: 
#line 2303
  len = e->size;
#line 2304
  page = e->pages;
#line 2305
  goto ldv_46615;
  ldv_46614: 
#line 2306
  tmp___2 = kmap_atomic___0(page, KM_USER0);
#line 2306
  d = tmp___2;
#line 2307
  __min1 = len;
#line 2307
  __min2 = 4096U;
#line 2307
  l = __min1 < __min2 ? __min1 : __min2;
#line 2308
  __len = (size_t )l;
#line 2308
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2309
  kunmap_atomic_notypecheck___0(d, KM_USER0);
#line 2310
  tl = tl + (unsigned long )l;
#line 2311
  len = len - l;
#line 2305
  page = page_chain_next(page);
  ldv_46615: ;
#line 2305
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2305
    tmp___3 = page_chain_next(page);
#line 2305
    __builtin_prefetch((void const   *)tmp___3);
#line 2305
    if (1 != 0) {
#line 2306
      goto ldv_46614;
    } else {
#line 2308
      goto ldv_46616;
    }
  } else {

  }
  ldv_46616: 
#line 2313
  tmp___4 = tl;
#line 2313
  tl = tl + 1;
#line 2313
  __gu_p___1 = (void *)tmp___4;
#line 2313
  switch (2UL) {
  case 1UL: 
#line 2313
  *((u8 *)__gu_p___1) = 0U;
#line 2313
  goto ldv_46619;
  case 2UL: 
#line 2313
  put_unaligned_le16(0, __gu_p___1);
#line 2313
  goto ldv_46619;
  case 4UL: 
#line 2313
  put_unaligned_le32(0U, __gu_p___1);
#line 2313
  goto ldv_46619;
  case 8UL: 
#line 2313
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2313
  goto ldv_46619;
  default: 
#line 2313
  __bad_unaligned_access_size();
#line 2313
  goto ldv_46619;
  }
  ldv_46619: 
#line 2315
  cn_reply->id.idx = 8U;
#line 2316
  cn_reply->id.val = 1U;
#line 2318
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2318
  cn_reply->seq = (__u32 )tmp___5;
#line 2319
  cn_reply->ack = 0U;
#line 2320
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2322
  cn_reply->flags = 0U;
#line 2324
  reply->packet_type = 24;
#line 2325
  reply->minor = mdev_to_minor(mdev);
#line 2326
  reply->ret_code = 101;
#line 2328
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2329
  kfree((void const   *)cn_reply);
#line 2330
  return;
}
}
#line 2332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2338
  cn_reply = (struct cn_msg *)(& buffer);
#line 2339
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2341
  tl = (unsigned short *)(& reply->tag_list);
#line 2346
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2346
  if (tmp == 0) {
#line 2347
    return;
  } else {

  }
#line 2348
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2349
  put_ldev(mdev);
#line 2351
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2352
  tmp___0 = tl;
#line 2352
  tl = tl + 1;
#line 2352
  __gu_p = (void *)tmp___0;
#line 2352
  switch (2UL) {
  case 1UL: 
#line 2352
  *((u8 *)__gu_p) = 0U;
#line 2352
  goto ldv_46635;
  case 2UL: 
#line 2352
  put_unaligned_le16(0, __gu_p);
#line 2352
  goto ldv_46635;
  case 4UL: 
#line 2352
  put_unaligned_le32(0U, __gu_p);
#line 2352
  goto ldv_46635;
  case 8UL: 
#line 2352
  put_unaligned_le64(0ULL, __gu_p);
#line 2352
  goto ldv_46635;
  default: 
#line 2352
  __bad_unaligned_access_size();
#line 2352
  goto ldv_46635;
  }
  ldv_46635: 
#line 2354
  cn_reply->id.idx = 8U;
#line 2355
  cn_reply->id.val = 1U;
#line 2357
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2357
  cn_reply->seq = (__u32 )tmp___1;
#line 2358
  cn_reply->ack = 0U;
#line 2359
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2361
  cn_reply->flags = 0U;
#line 2363
  reply->packet_type = 23;
#line 2364
  reply->minor = mdev_to_minor(mdev);
#line 2365
  reply->ret_code = 101;
#line 2367
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2368
  return;
}
}
#line 2370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2373
  try = 10;
#line 2375
  cn_id_drbd.val = 1U;
  ldv_46647: 
#line 2377
  cn_id_drbd.idx = cn_idx;
#line 2378
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2379
  if (err == 0) {
#line 2380
    goto ldv_46646;
  } else {

  }
#line 2381
  cn_idx = cn_idx + 6977U;
#line 2382
  tmp = try;
#line 2382
  try = try - 1;
#line 2382
  if (tmp != 0) {
#line 2383
    goto ldv_46647;
  } else {

  }
  ldv_46646: ;
#line 2384
  if (err != 0) {
#line 2385
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2386
    return (err);
  } else {

  }
#line 2389
  return (0);
}
}
#line 2392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2396
  cn_id_drbd.idx = cn_idx;
#line 2397
  cn_id_drbd.val = 1U;
#line 2399
  cn_del_callback(& cn_id_drbd);
#line 2400
  return;
}
}
#line 2402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2405
  cn_reply = (struct cn_msg *)(& buffer);
#line 2406
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2410
  cn_reply->id = req->id;
#line 2412
  cn_reply->seq = req->seq;
#line 2413
  cn_reply->ack = req->ack + 1U;
#line 2414
  cn_reply->len = 12U;
#line 2415
  cn_reply->flags = 0U;
#line 2417
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2418
  reply->ret_code = ret_code;
#line 2420
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2421
  if (rr != 0 && rr != -3) {
#line 2422
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2423
  return;
}
}
#line 2425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_179(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2430
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2432
  mutex_lock(ldv_func_arg1);
#line 2433
  return;
}
}
#line 2435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_180(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2440
  tmp = mutex_trylock(ldv_func_arg1);
#line 2440
  ldv_func_res = tmp;
#line 2442
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2442
  return (tmp___0);
#line 2444
  return (ldv_func_res);
}
}
#line 2447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2452
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2454
  mutex_unlock(ldv_func_arg1);
#line 2455
  return;
}
}
#line 2457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_182(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2462
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2464
  mutex_lock(ldv_func_arg1);
#line 2465
  return;
}
}
#line 2467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2472
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2474
  mutex_unlock(ldv_func_arg1);
#line 2475
  return;
}
}
#line 2477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_184(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2482
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2484
  mutex_unlock(ldv_func_arg1);
#line 2485
  return;
}
}
#line 2487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2492
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2494
  mutex_lock(ldv_func_arg1);
#line 2495
  return;
}
}
#line 2497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2502
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2504
  mutex_unlock(ldv_func_arg1);
#line 2505
  return;
}
}
#line 2507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2512
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2514
  mutex_lock(ldv_func_arg1);
#line 2515
  return;
}
}
#line 2517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2522
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2524
  mutex_unlock(ldv_func_arg1);
#line 2525
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_mutex_of_device = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_mutex_of_device = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_mutex_of_device = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_mutex_of_device = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_mutex_of_device = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_mutex_of_device == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_mutex_of_device = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 766
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 773
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 775
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 777
  ldv_mutex_mutex_of_device = 1;
#line 779
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 781
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 782
  return;
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 788
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 788
    ldv_error();
  }
#line 790
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 790
    ldv_error();
  }
#line 792
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 792
    ldv_error();
  }
#line 794
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 794
    ldv_error();
  }
#line 796
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 796
    ldv_error();
  }
#line 797
  return;
}
}
