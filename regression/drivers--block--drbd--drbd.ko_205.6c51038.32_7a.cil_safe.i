/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 154 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 178 "include/linux/types.h"
typedef __u16 __be16;
#line 180 "include/linux/types.h"
typedef __u32 __be32;
#line 185 "include/linux/types.h"
typedef __u32 __wsum;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 202 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 50 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 70 "include/asm-generic/bug.h"
struct completion;
#line 71
struct pt_regs;
#line 289 "include/linux/kernel.h"
struct pid;
#line 639
struct task_struct;
#line 640
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2004_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2004_8 ldv_2004 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 280
struct page;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 288
struct file;
#line 301
struct seq_file;
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2215_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2230_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2231_14 {
   struct __anonstruct_ldv_2215_15 ldv_2215 ;
   struct __anonstruct_ldv_2230_16 ldv_2230 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2231_14 ldv_2231 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 320 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 145 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4863_20 {
   u64 rip ;
   u64 rdp ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4869_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4870_19 {
   struct __anonstruct_ldv_4863_20 ldv_4863 ;
   struct __anonstruct_ldv_4869_21 ldv_4869 ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4879_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4870_19 ldv_4870 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4879_22 ldv_4879 ;
};
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 421
struct kmem_cache;
#line 422
struct perf_event;
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 663 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 549 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5801_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5802_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5801_27 ldv_5801 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5802_26 ldv_5802 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 73
struct compat_timespec;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_30 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_31 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 74
struct pollfd;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_32 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6035_29 {
   struct __anonstruct_futex_30 futex ;
   struct __anonstruct_nanosleep_31 nanosleep ;
   struct __anonstruct_poll_32 poll ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6035_29 ldv_6035 ;
};
#line 51 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 397 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_33 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_33 seqlock_t;
#line 112 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 123 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 235 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 443
struct hlist_nulls_node;
#line 443 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 645 "include/linux/mmzone.h"
struct rw_semaphore;
#line 646 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 761
struct ctl_table;
#line 175 "include/linux/ioport.h"
struct device;
#line 54 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 288 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   unsigned char in_suspend : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 467 "include/linux/pm.h"
struct dev_power_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
   unsigned short ia32_compat ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 109 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 117 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 124 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 141 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 219
struct kernel_param;
#line 220 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 44 "include/linux/moduleparam.h"
struct kparam_string;
#line 44
struct kparam_array;
#line 44 "include/linux/moduleparam.h"
union __anonunion_ldv_11991_124 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 44 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11991_124 ldv_11991 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 398 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 778 "include/linux/rcupdate.h"
struct tracepoint;
#line 779 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 84 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 127 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 66
struct module_param_attrs;
#line 66 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 78
struct exception_table_entry;
#line 217
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 223 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 416
struct module_sect_attrs;
#line 416
struct module_notes_attrs;
#line 416
struct ftrace_event_call;
#line 416 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 38 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 39 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 53 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_125 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_125 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_126 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_126 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_127 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_127 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_128 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_128 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_129 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_129 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_130 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_130 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_131 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_131 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 142 "include/linux/if.h"
union __anonunion_ifs_ifsu_132 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 142 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_132 ifs_ifsu ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifrn_133 {
   char ifrn_name[16U] ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifru_134 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 160 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_133 ifr_ifrn ;
   union __anonunion_ifr_ifru_134 ifr_ifru ;
};
#line 224 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 124 "include/linux/if_ether.h"
struct prio_tree_node;
#line 124 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_13161_137 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13162_136 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13161_137 ldv_13161 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_13167_139 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13170_138 {
   struct __anonstruct_ldv_13167_139 ldv_13167 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13174_140 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_13162_136 ldv_13162 ;
   union __anonunion_ldv_13170_138 ldv_13170 ;
   union __anonunion_ldv_13174_140 ldv_13174 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_142 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_141 {
   struct __anonstruct_vm_set_142 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_141 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   atomic_t oom_disable_count ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_13532 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_13532 socket_state;
#line 179 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 180
struct pipe_inode_info;
#line 181
struct inode;
#line 182
struct net;
#line 199
struct fasync_struct;
#line 199 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 126 "include/linux/net.h"
struct proto_ops;
#line 126 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 152
struct kiocb;
#line 153 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 947
struct ctl_table_header;
#line 965 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 985 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1035 "include/linux/sysctl.h"
struct __anonstruct_ldv_14497_144 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1035 "include/linux/sysctl.h"
union __anonunion_ldv_14499_143 {
   struct __anonstruct_ldv_14497_144 ldv_14497 ;
   struct rcu_head rcu ;
};
#line 1035 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_14499_143 ldv_14499 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1074 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 118 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   int node ;
   unsigned int stat[19U] ;
};
#line 48 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 59 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 69 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 49 "include/linux/device.h"
struct device_attribute;
#line 49
struct driver_attribute;
#line 49 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 121
struct of_device_id;
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 155 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 216
struct device_type;
#line 255 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 306 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 333 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 394 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 403
struct dma_coherent_mem;
#line 403 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_power_domain *pwr_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct of_device_id  const  *of_match ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 458 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct file_ra_state;
#line 93
struct user_struct;
#line 94
struct writeback_control;
#line 173 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 190 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 874 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 161 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[3U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 452
struct net_device;
#line 453 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 253 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 254
struct sec_path;
#line 254 "include/linux/skbuff.h"
struct __anonstruct_ldv_19564_147 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_19565_146 {
   __wsum csum ;
   struct __anonstruct_ldv_19564_147 ldv_19564 ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_19595_148 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 254 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19565_146 ldv_19565 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19595_148 ldv_19595 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 444
struct dst_entry;
#line 479
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 301 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 381 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 303
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_150 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_150 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_153 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_154 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_155 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_156 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_157 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_151 {
   int _pad[28U] ;
   struct __anonstruct__kill_152 _kill ;
   struct __anonstruct__timer_153 _timer ;
   struct __anonstruct__rt_154 _rt ;
   struct __anonstruct__sigchld_155 _sigchld ;
   struct __anonstruct__sigfault_156 _sigfault ;
   struct __anonstruct__sigpoll_157 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_151 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_160 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_160 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_21901_161 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_162 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_163 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_21901_161 ldv_21901 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_162 type_data ;
   union __anonunion_payload_163 payload ;
};
#line 297
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 361
struct futex_pi_state;
#line 362
struct robust_list_head;
#line 363
struct bio_list;
#line 364
struct fs_struct;
#line 365
struct perf_event_context;
#line 366
struct blk_plug;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_164 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_164 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 405 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct autogroup;
#line 517
struct tty_struct;
#line 517
struct taskstats;
#line 517
struct tty_audit_buf;
#line 517 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 674 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 719
struct backing_dev_info;
#line 720
struct reclaim_state;
#line 721 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 738 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1014
struct io_context;
#line 1037
struct rq;
#line 1038 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1100 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1105 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1140 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1166
struct rt_rq;
#line 1166 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1190
struct mem_cgroup;
#line 1190 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1536
struct files_struct;
#line 1536
struct irqaction;
#line 1536
struct css_set;
#line 1536
struct compat_robust_list_head;
#line 1536 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 201 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 205 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 365 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 55 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 81 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 96 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 104 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 113 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 209 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 231 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 280 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 292 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 313 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 362 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_h_u_170 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_m_u_171 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_170 h_u ;
   union __anonunion_m_u_171 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 407 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 483 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_h_u_174 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_m_u_175 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_174 h_u ;
   union __anonunion_m_u_175 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 536 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 552 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 655 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 680 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 814
struct prot_inuse;
#line 815 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 78 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 83 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 90 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 96 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[80U] ;
};
#line 102 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 108
struct proc_dir_entry;
#line 108 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 67 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*default_mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 66 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 334 "include/linux/in.h"
union __anonunion_in6_u_176 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 334 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_176 in6_u ;
};
#line 340 "include/linux/netfilter.h"
struct bio;
#line 341
struct bio_integrity_payload;
#line 342
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 35 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 100 "include/linux/dcache.h"
struct dentry_operations;
#line 100
struct super_block;
#line 100 "include/linux/dcache.h"
union __anonunion_d_u_182 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 100 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_182 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 151 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 422 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 51 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 51 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 229 "include/linux/radix-tree.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 421 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 340 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 386 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 571 "include/linux/fs.h"
union __anonunion_arg_184 {
   char *buf ;
   void *data ;
};
#line 571 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_183 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_184 arg ;
   int error ;
};
#line 571 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_183 read_descriptor_t;
#line 574 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 623 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
   struct mutex unmap_mutex ;
};
#line 646
struct hd_struct;
#line 646
struct gendisk;
#line 646 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 717
struct posix_acl;
#line 718
struct inode_operations;
#line 718 "include/linux/fs.h"
union __anonunion_ldv_26714_185 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 718
struct file_lock;
#line 718
struct cdev;
#line 718 "include/linux/fs.h"
union __anonunion_ldv_26740_186 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 718 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   uid_t i_uid ;
   gid_t i_gid ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   spinlock_t i_lock ;
   unsigned int i_flags ;
   struct mutex i_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_26714_185 ldv_26714 ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   struct rw_semaphore i_alloc_sem ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_26740_186 ldv_26740 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 895 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 903 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 926 "include/linux/fs.h"
union __anonunion_f_u_187 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 926 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_187 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1057 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1058 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1063 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_189 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_188 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_189 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_188 fl_u ;
};
#line 1164 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1356
struct file_system_type;
#line 1356
struct super_operations;
#line 1356
struct xattr_handler;
#line 1356
struct mtd_info;
#line 1356 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
};
#line 1483 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1521
struct block_device_operations;
#line 1522 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1562 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  , unsigned int  ) ;
   int (*check_acl)(struct inode * , int  , unsigned int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1608 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_devname)(struct seq_file * , struct vfsmount * ) ;
   int (*show_path)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1789 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned int namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 374 "include/linux/netfilter.h"
struct ebt_table;
#line 375 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 100 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 33 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 91
struct vlan_group;
#line 92
struct netpoll_info;
#line 93
struct phy_device;
#line 94
struct wireless_dev;
#line 95
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 211
struct neighbour;
#line 212
struct neigh_parms;
#line 239 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 244 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 292 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 392
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 440 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 441 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 548
struct Qdisc;
#line 548 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   u32 (*ndo_fix_features)(struct net_device * , u32  ) ;
   int (*ndo_set_features)(struct net_device * , u32  ) ;
};
#line 995
struct iw_handler_def;
#line 995
struct iw_public_data;
#line 995
struct in_device;
#line 995
struct dn_dev;
#line 995
struct inet6_dev;
#line 995
struct cpu_rmap;
#line 995
struct pcpu_lstats;
#line 995
struct pcpu_tstats;
#line 995
struct pcpu_dstats;
#line 995 "include/linux/netdevice.h"
union __anonunion_ldv_30416_191 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 995
struct garp_port;
#line 995
struct rtnl_link_ops;
#line 995 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   u32 features ;
   u32 hw_features ;
   u32 wanted_features ;
   u32 vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned int priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_group *vlgrp ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_30416_191 ldv_30416 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
   int group ;
};
#line 1551
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 329 "include/linux/irq.h"
struct timer_rand_state;
#line 91 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char const   *name ;
   struct proc_dir_entry *dir ;
};
#line 327 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   unsigned long vma_pages ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 65 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 84 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
};
#line 83 "include/linux/security.h"
struct xfrm_policy;
#line 84
struct xfrm_state;
#line 105
struct request_sock;
#line 3041 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 815 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 127
struct neigh_table;
#line 127 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   int (*output)(struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 118 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 128 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 138 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct rcu_head rcu ;
};
#line 149 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32  ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 394
struct dn_route;
#line 394 "include/net/neighbour.h"
union __anonunion_ldv_36368_202 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 394 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   int flags ;
   union __anonunion_ldv_36368_202 ldv_36368 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_203 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_203 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_36565_204 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36573_205 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36580_206 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_36565_204 ldv_36565 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_36573_205 ldv_36573 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_36580_206 ldv_36580 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 167 "include/net/sock.h"
struct __anonstruct_sk_backlog_207 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 167 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_207 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 716
struct request_sock_ops;
#line 717
struct timewait_sock_ops;
#line 718
struct inet_hashinfo;
#line 719
struct raw_hashinfo;
#line 720
struct udp_table;
#line 720 "include/net/sock.h"
union __anonunion_h_208 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 720 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_208 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 178 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 191 "include/linux/drbd.h"
struct __anonstruct_ldv_37735_209 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 191 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_37735_209 ldv_37735 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_210 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_210 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_211 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_211 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 236 "include/net/inet_sock.h"
struct inet_peer;
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 144 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 151
struct disk_events;
#line 152
struct request_queue;
#line 152
struct blk_integrity;
#line 152 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 13 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 18 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 54
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 373 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41354_218 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct __anonstruct_flush_220 {
   unsigned int seq ;
   struct list_head list ;
};
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41361_219 {
   void *elevator_private[3U] ;
   struct __anonstruct_flush_220 flush ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_41354_218 ldv_41354 ;
   union __anonunion_ldv_41361_219 ldv_41361 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 24 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 27 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 28 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 29 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 32 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 33 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 34 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 62 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 70 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 82 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 195 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 196 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 197 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 198 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 199 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 207 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 209 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 210 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 211 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 212
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 219 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 225 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 234 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   signed char discard_zeroes_data ;
};
#line 262 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 856 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   unsigned int should_sort ;
};
#line 1168 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1188 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1189 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1190 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1191 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1192 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1250 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 98 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 107 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 139 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 151 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[2U] ;
   struct icmpv6_mib *icmpv6[2U] ;
   struct icmpv6msg_mib *icmpv6msg[2U] ;
};
#line 162 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 668 "include/net/ipv6.h"
union __anonunion_ldv_43488_226 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 668 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_43488_226 ldv_43488 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_43512_228 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_43514_227 {
   struct __anonstruct_ldv_43512_228 ldv_43512 ;
   struct rcu_head rcu ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_43514_227 ldv_43514 ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 316 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1531 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 485 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 509 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 524 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 530 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 573 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
};
#line 651
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 679
struct drbd_work;
#line 689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 693
struct drbd_tl_epoch;
#line 724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 766 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_45894_231 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_45894_231 ldv_45894 ;
};
#line 828
struct drbd_bitmap;
#line 829 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 884 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 144 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 924 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 931
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 937 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 943 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
};
#line 1145
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 145 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 152
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 355 "include/linux/drbd.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 57 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 1189
enum drbd_req_event;
#line 1189
enum drbd_req_event;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    resend = 21,
    fail_frozen_disk_io = 22,
    restart_frozen_disk_io = 23,
    nothing = 24
} ;
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 261
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 552
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 753
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1153
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1189
enum drbd_req_event;
#line 1189
enum drbd_req_event;
#line 1481
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 186 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 1189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1189
enum drbd_req_event;
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_232 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_232 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 193 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 294
enum drbd_uuid_index {
    UI_CURRENT = 0,
    UI_BITMAP = 1,
    UI_HISTORY_START = 2,
    UI_HISTORY_END = 3,
    UI_SIZE = 4,
    UI_FLAGS = 5,
    UI_EXTENDED_SIZE = 6
} ;
#line 1189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1189
enum drbd_req_event;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 2134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_32586 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 177 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef __u32 __le32;
#line 181 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 731 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 64 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 142 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 93 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    AFTER_LAST_ERR_CODE = 155
} ;
#line 310 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 348 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 131 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 140 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 1189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1189
enum drbd_req_event;
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 107 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 99 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 125 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2080: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 162
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 166
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 168
extern void mutex_unlock(struct mutex * ) ;
#line 171
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 52
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6056;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6056;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6056;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6056;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6056: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5802.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5802.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5802.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5802.rlock, flags);
#line 341
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 65
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 329 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 332 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 334
  tmp = alloc_pages_current(gfp_mask, order);
#line 334
  return (tmp);
}
}
#line 363
extern void __free_pages(struct page * , unsigned int  ) ;
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 141 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 221 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 255 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 270
  tmp___2 = __kmalloc(size, flags);
#line 270
  return (tmp___2);
}
}
#line 318 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 320
  tmp = kmalloc(size, flags | 32768U);
#line 320
  return (tmp);
}
}
#line 650 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 654
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 656
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 660
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 720 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 722
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 362 "include/linux/sched.h"
extern void schedule(void) ;
#line 2425
extern int _cond_resched(void) ;
#line 2281 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable();
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 67
  pagefault_enable();
#line 68
  return;
}
}
#line 214 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 217
extern void bio_put(struct bio * ) ;
#line 220
extern void bio_endio(struct bio * , int  ) ;
#line 229
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 906 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1172
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1268
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1269
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1408
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1409
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1410
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1411
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1412
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1413
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1415
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1418
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1420
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1421
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1422
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1423
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1424
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1425
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1427
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1428
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1429
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1430
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1432
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1433
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1434
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1435
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1438
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1441
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1444
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1445
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1447
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1462
rwlock_t global_state_lock ;
#line 1479
char *ppsize(char *buf , unsigned long long size ) ;
#line 1499
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1750 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1756
  _raw_read_lock(& global_state_lock);
#line 1757
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1758
  _raw_read_unlock(& global_state_lock);
#line 1760
  return (rv);
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1783
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1785
  if (forcedetach == 0) {
#line 1786
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1786
    if (tmp != 0) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1788
    goto ldv_46875;
  } else {

  }
  case 2: ;
  case 1: 
#line 1793
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  if ((int )mdev->state.ldv_37735.disk > 2) {
#line 1795
    __ns.i = mdev->state.i;
#line 1795
    __ns.ldv_37735.disk = 2U;
#line 1795
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1799
  goto ldv_46875;
  }
  ldv_46875: ;
#line 1802
  return;
}
}
#line 1812 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1815
  if (error != 0) {
#line 1817
    tmp = spinlock_check(& mdev->req_lock);
#line 1817
    flags = _raw_spin_lock_irqsave(tmp);
#line 1818
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1819
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1821
  return;
}
}
#line 1847 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1849
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1852
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1855
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2112
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2112
  i = tmp;
#line 2114
  if (i < 0) {
#line 2114
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2114);
  } else {

  }
#line 2115
  if (i == 0) {
#line 2116
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 0U) {
#line 2118
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2119
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 4U) {
#line 2121
      drbd_go_diskless(mdev);
    } else {

    }
#line 2122
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2124
  return;
}
}
#line 2127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2132
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 0U) {
#line 2133
    return (0);
  } else {

  }
#line 2135
  atomic_inc(& mdev->local_cnt);
#line 2136
  io_allowed = (unsigned int )mdev->state.ldv_37735.disk >= (unsigned int )mins;
#line 2137
  if (io_allowed == 0) {
#line 2138
    put_ldev(mdev);
  } else {

  }
#line 2139
  return (io_allowed);
}
}
#line 2385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2389
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2389
  if (tmp != 0) {
#line 2390
    return;
  } else {

  }
#line 2392
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2393
  if (r != 0) {
#line 2394
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2395
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2397
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 147
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 147
  return (tmp);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 153
  b = mdev->bitmap;
#line 154
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 154
  if (tmp == 0) {
#line 155
    return;
  } else {

  }
#line 156
  tmp___9 = get_current();
#line 156
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 156
    tmp___7 = get_current();
#line 156
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 156
      tmp___5 = get_current();
#line 156
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 156
        tmp___3 = get_current();
#line 156
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 156
        tmp___4 = (char *)"worker";
      }
#line 156
      tmp___6 = tmp___4;
    } else {
#line 156
      tmp___6 = (char *)"asender";
    }
#line 156
    tmp___8 = tmp___6;
  } else {
#line 156
    tmp___8 = (char *)"receiver";
  }
#line 156
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 162
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 168
  b = mdev->bitmap;
#line 171
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 172
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 173
    return;
  } else {

  }
#line 176
  tmp = ldv_mutex_trylock_7(& b->bm_change);
#line 176
  trylock_failed = tmp == 0;
#line 178
  if (trylock_failed != 0) {
#line 179
    tmp___9 = get_current();
#line 179
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 179
      tmp___7 = get_current();
#line 179
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 179
        tmp___5 = get_current();
#line 179
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 179
          tmp___3 = get_current();
#line 179
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 179
          tmp___4 = (char *)"worker";
        }
#line 179
        tmp___6 = tmp___4;
      } else {
#line 179
        tmp___6 = (char *)"asender";
      }
#line 179
      tmp___8 = tmp___6;
    } else {
#line 179
      tmp___8 = (char *)"receiver";
    }
#line 179
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 187
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 189
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 189
  if (tmp___10 != 0) {
#line 190
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 192
  b->bm_why = why;
#line 193
  b->bm_task = get_current();
#line 194
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 198
  b = mdev->bitmap;
#line 199
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 201
    return;
  } else {

  }
#line 204
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 204
  if (tmp == 0) {
#line 205
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 207
  b->bm_why = 0;
#line 208
  b->bm_task = 0;
#line 209
  ldv_mutex_unlock_9(& b->bm_change);
#line 210
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 219
  page_nr = offset >> 9;
#line 220
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 220
  if (tmp != 0L) {
#line 220
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (220), "i" (12UL));
    ldv_47146: ;
#line 220
    goto ldv_47146;
  } else {

  }
#line 221
  page = *(b->bm_pages + page_nr);
#line 223
  tmp___0 = __kmap_atomic(page);
#line 223
  return ((unsigned long *)tmp___0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 228
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 228
  return (tmp);
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 233
  __kunmap_atomic((void *)p_addr);
#line 234
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 238
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 263
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 264
    return;
  } else {

  }
#line 266
  i = 0UL;
#line 266
  goto ldv_47165;
  ldv_47164: ;
#line 267
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 268
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 271
    goto ldv_47163;
  } else {

  }
#line 273
  __free_pages(*(pages + i), 0U);
#line 274
  *(pages + i) = 0;
  ldv_47163: 
#line 266
  i = i + 1UL;
  ldv_47165: ;
#line 266
  if (i < number) {
#line 267
    goto ldv_47164;
  } else {

  }

#line 271
  return;
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 280
  if (v != 0) {
#line 281
    vfree((void const   *)ptr);
  } else {
#line 283
    kfree((void const   *)ptr);
  }
#line 284
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 291
  old_pages = b->bm_pages;
#line 293
  vmalloced = 0U;
#line 294
  have = b->bm_number_of_pages;
#line 296
  tmp = __builtin_expect(have == 0UL, 0L);
#line 296
  if (tmp != 0L) {
#line 296
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 296
    if (tmp___0 != 0L) {
#line 296
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (296), "i" (12UL));
      ldv_47182: ;
#line 296
      goto ldv_47182;
    } else {

    }
  } else {

  }
#line 297
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 297
  if (tmp___1 != 0L) {
#line 297
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 297
    if (tmp___2 != 0L) {
#line 297
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (297), "i" (12UL));
      ldv_47183: ;
#line 297
      goto ldv_47183;
    } else {

    }
  } else {

  }
#line 299
  if (have == want) {
#line 300
    return (old_pages);
  } else {

  }
#line 307
  bytes = (unsigned int )want * 8U;
#line 308
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 308
  new_pages = (struct page **)tmp___3;
#line 309
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 310
    tmp___4 = vmalloc((unsigned long )bytes);
#line 310
    new_pages = (struct page **)tmp___4;
#line 311
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 312
      return (0);
    } else {

    }
#line 313
    vmalloced = 1U;
  } else {

  }
#line 316
  memset((void *)new_pages, 0, (size_t )bytes);
#line 317
  if (want >= have) {
#line 318
    i = 0U;
#line 318
    goto ldv_47185;
    ldv_47184: 
#line 319
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 318
    i = i + 1U;
    ldv_47185: ;
#line 318
    if ((unsigned long )i < have) {
#line 319
      goto ldv_47184;
    } else {

    }

#line 320
    goto ldv_47188;
    ldv_47187: 
#line 321
    page = alloc_pages(131282U, 0U);
#line 322
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 323
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 324
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 325
      return (0);
    } else {

    }
#line 327
    *(new_pages + (unsigned long )i) = page;
#line 320
    i = i + 1U;
    ldv_47188: ;
#line 320
    if ((unsigned long )i < want) {
#line 321
      goto ldv_47187;
    } else {

    }

  } else {
#line 330
    i = 0U;
#line 330
    goto ldv_47191;
    ldv_47190: 
#line 331
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 330
    i = i + 1U;
    ldv_47191: ;
#line 330
    if ((unsigned long )i < want) {
#line 331
      goto ldv_47190;
    } else {

    }

  }
#line 337
  if (vmalloced != 0U) {
#line 338
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 340
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 342
  return (new_pages);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 351
  b = mdev->bitmap;
#line 352
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 352
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 352
  if (tmp != 0L) {
#line 352
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       352);
  } else {

  }
#line 352
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 353
  tmp___0 = kzalloc(408UL, 208U);
#line 353
  b = (struct drbd_bitmap *)tmp___0;
#line 354
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 355
    return (-12);
  } else {

  }
#line 356
  spinlock_check(& b->bm_lock);
#line 356
  __raw_spin_lock_init(& b->bm_lock.ldv_5802.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 357
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 358
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 360
  mdev->bitmap = b;
#line 362
  return (0);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 367
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 367
  if (_b != 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            367);
  } else {

  }
#line 367
  if (_b != 0) {
#line 367
    return (0UL);
  } else {

  }
#line 368
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 375
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 375
  if (_b != 0) {
#line 375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            375);
  } else {

  }
#line 375
  if (_b != 0) {
#line 375
    return;
  } else {

  }
#line 376
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 377
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 377
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 378
  kfree((void const   *)mdev->bitmap);
#line 379
  mdev->bitmap = 0;
#line 380
  return;
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 389
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 390
  w = b->bm_bits >> 6;
#line 391
  cleared = 0;
#line 394
  p_addr = bm_map_paddr(b, w);
#line 395
  bm = p_addr + (w & 511UL);
#line 396
  if (b->bm_words > w) {
#line 397
    tmp = hweight_long(*bm & ~ mask);
#line 397
    cleared = (int )tmp;
#line 398
    *bm = *bm & mask;
#line 399
    w = w + (size_t )1;
#line 399
    bm = bm + 1;
  } else {

  }
#line 402
  if (b->bm_words > w) {
#line 403
    tmp___0 = hweight_long(*bm);
#line 403
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 404
    *bm = 0UL;
  } else {

  }
#line 406
  bm_unmap(p_addr);
#line 407
  return (cleared);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 412
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 413
  w = b->bm_bits >> 6;
#line 416
  p_addr = bm_map_paddr(b, w);
#line 417
  bm = p_addr + (w & 511UL);
#line 418
  if (b->bm_words > w) {
#line 419
    *bm = *bm | ~ mask;
#line 420
    bm = bm + 1;
#line 420
    w = w + (size_t )1;
  } else {

  }
#line 423
  if (b->bm_words > w) {
#line 424
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 426
  bm_unmap(p_addr);
#line 427
  return;
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 431
  offset = 0UL;
#line 432
  bits = 0UL;
#line 435
  goto ldv_47247;
  ldv_47246: 
#line 436
  __min1 = b->bm_words - offset;
#line 436
  __min2 = 512UL;
#line 436
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 436
  i = do_now;
#line 437
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 438
  bm = p_addr + (offset & 511UL);
#line 439
  goto ldv_47243;
  ldv_47242: 
#line 444
  tmp = bm;
#line 444
  bm = bm + 1;
#line 444
  tmp___0 = hweight_long(*tmp);
#line 444
  bits = tmp___0 + bits;
  ldv_47243: 
#line 439
  tmp___1 = i;
#line 439
  i = i - 1UL;
#line 439
  if (tmp___1 != 0UL) {
#line 440
    goto ldv_47242;
  } else {

  }
#line 446
  __bm_unmap(p_addr, KM_USER0);
#line 447
  offset = offset + do_now;
#line 448
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                448, 0);
#line 448
  _cond_resched();
  ldv_47247: ;
#line 435
  if (b->bm_words > offset) {
#line 436
    goto ldv_47246;
  } else {

  }

#line 451
  return (bits);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 456
  tmp = __bm_count_bits(b, 0);
#line 456
  return (tmp);
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 461
  tmp = __bm_count_bits(b, 1);
#line 461
  return (tmp);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 472
  end = offset + len;
#line 474
  if (b->bm_words < end) {
#line 475
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 476
    return;
  } else {

  }
#line 479
  goto ldv_47270;
  ldv_47269: 
#line 480
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 480
  __min2 = end;
#line 480
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 481
  p_addr = bm_map_paddr(b, offset);
#line 482
  bm = p_addr + (offset & 511UL);
#line 483
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 484
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 486
    goto ldv_47268;
  } else {

  }
#line 488
  memset((void *)bm, c, do_now * 8UL);
#line 489
  bm_unmap(p_addr);
#line 490
  offset = offset + do_now;
  ldv_47270: ;
#line 479
  if (offset < end) {
#line 480
    goto ldv_47269;
  } else {

  }
  ldv_47268: ;
#line 484
  return;
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 504
  b = mdev->bitmap;
#line 507
  opages = 0;
#line 508
  err = 0;
#line 511
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 511
  if (_b != 0) {
#line 511
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            511);
  } else {

  }
#line 511
  if (_b != 0) {
#line 511
    return (-12);
  } else {

  }
#line 513
  drbd_bm_lock(mdev, (char *)"resize");
#line 515
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 518
  if (b->bm_dev_capacity == capacity) {
#line 519
    goto out;
  } else {

  }
#line 521
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 523
  if (capacity == 0UL) {
#line 524
    spin_lock_irq(& b->bm_lock);
#line 525
    opages = b->bm_pages;
#line 526
    onpages = b->bm_number_of_pages;
#line 527
    owords = b->bm_words;
#line 528
    b->bm_pages = 0;
#line 529
    tmp___2 = 0UL;
#line 529
    b->bm_dev_capacity = tmp___2;
#line 529
    tmp___1 = tmp___2;
#line 529
    b->bm_words = tmp___1;
#line 529
    tmp___0 = tmp___1;
#line 529
    b->bm_bits = tmp___0;
#line 529
    tmp = tmp___0;
#line 529
    b->bm_set = tmp;
#line 529
    b->bm_number_of_pages = tmp;
#line 534
    spin_unlock_irq(& b->bm_lock);
#line 535
    bm_free_pages(opages, onpages);
#line 536
    bm_vk_free((void *)opages, opages_vmalloced);
#line 537
    goto out;
  } else {

  }
#line 539
  bits = (capacity + 7UL) >> 3;
#line 546
  words = (bits + 63UL) >> 6;
#line 548
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 548
  if (tmp___3 != 0) {
#line 549
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              549);
    } else {

    }
#line 550
    put_ldev(mdev);
  } else {

  }
#line 554
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 555
  have = b->bm_number_of_pages;
#line 556
  if (want == have) {
#line 557
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 557
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              557);
    } else {

    }
#line 558
    npages = b->bm_pages;
  } else {
#line 560
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 560
    if (tmp___4 != 0) {
#line 561
      npages = 0;
    } else {
#line 563
      npages = bm_realloc_pages(b, want);
    }
  }
#line 566
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 567
    err = -12;
#line 568
    goto out;
  } else {

  }
#line 571
  spin_lock_irq(& b->bm_lock);
#line 572
  opages = b->bm_pages;
#line 573
  owords = b->bm_words;
#line 574
  obits = b->bm_bits;
#line 576
  growing = bits > obits;
#line 577
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 578
    bm_set_surplus(b);
  } else {

  }
#line 580
  b->bm_pages = npages;
#line 581
  b->bm_number_of_pages = want;
#line 582
  b->bm_bits = bits;
#line 583
  b->bm_words = words;
#line 584
  b->bm_dev_capacity = capacity;
#line 586
  if (growing != 0) {
#line 587
    if (set_new_bits != 0) {
#line 588
      bm_memset(b, owords, 255, words - owords);
#line 589
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 591
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 595
  if (want < have) {
#line 597
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 600
  p_addr = bm_map_paddr(b, words);
#line 601
  bm = p_addr + (words & 511UL);
#line 602
  *bm = 2205418087UL;
#line 603
  bm_unmap(p_addr);
#line 605
  bm_clear_surplus(b);
#line 607
  spin_unlock_irq(& b->bm_lock);
#line 608
  if ((unsigned long )opages != (unsigned long )npages) {
#line 609
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 610
  if (growing == 0) {
#line 611
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 615
  drbd_bm_unlock(mdev);
#line 616
  return (err);
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 629
  b = mdev->bitmap;
#line 633
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 633
  if (_b != 0) {
#line 633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            633);
  } else {

  }
#line 633
  if (_b != 0) {
#line 633
    return (0UL);
  } else {

  }
#line 634
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 634
  if (_b___0 != 0) {
#line 634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            634);
  } else {

  }
#line 634
  if (_b___0 != 0) {
#line 634
    return (0UL);
  } else {

  }
#line 636
  tmp = spinlock_check(& b->bm_lock);
#line 636
  flags = _raw_spin_lock_irqsave(tmp);
#line 637
  s = b->bm_set;
#line 638
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 640
  return (s);
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 647
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 647
  if (tmp == 0) {
#line 648
    return (0UL);
  } else {

  }
#line 649
  s = _drbd_bm_total_weight(mdev);
#line 650
  put_ldev(mdev);
#line 651
  return (s);
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 656
  b = mdev->bitmap;
#line 657
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 657
  if (_b != 0) {
#line 657
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            657);
  } else {

  }
#line 657
  if (_b != 0) {
#line 657
    return (0UL);
  } else {

  }
#line 658
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 658
  if (_b___0 != 0) {
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            658);
  } else {

  }
#line 658
  if (_b___0 != 0) {
#line 658
    return (0UL);
  } else {

  }
#line 660
  return (b->bm_words);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 665
  b = mdev->bitmap;
#line 666
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 666
  if (_b != 0) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            666);
  } else {

  }
#line 666
  if (_b != 0) {
#line 666
    return (0UL);
  } else {

  }
#line 668
  return (b->bm_bits);
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 679
  b = mdev->bitmap;
#line 684
  end = offset + number;
#line 686
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 686
  if (_b != 0) {
#line 686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            686);
  } else {

  }
#line 686
  if (_b != 0) {
#line 686
    return;
  } else {

  }
#line 687
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 687
  if (_b___0 != 0) {
#line 687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            687);
  } else {

  }
#line 687
  if (_b___0 != 0) {
#line 687
    return;
  } else {

  }
#line 688
  if (number == 0UL) {
#line 689
    return;
  } else {

  }
#line 690
  __ret_warn_on = b->bm_words <= offset;
#line 690
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 690
  if (tmp != 0L) {
#line 690
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       690);
  } else {

  }
#line 690
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 691
  __ret_warn_on___0 = b->bm_words < end;
#line 691
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 691
  if (tmp___0 != 0L) {
#line 691
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       691);
  } else {

  }
#line 691
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 693
  spin_lock_irq(& b->bm_lock);
#line 694
  goto ldv_47358;
  ldv_47357: 
#line 695
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
  __min2 = end;
#line 695
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
  p_addr = bm_map_paddr(b, offset);
#line 697
  bm = p_addr + (offset & 511UL);
#line 698
  offset = offset + do_now;
#line 699
  goto ldv_47355;
  ldv_47354: 
#line 700
  bits = hweight_long(*bm);
#line 701
  tmp___1 = buffer;
#line 701
  buffer = buffer + 1;
#line 701
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 702
  tmp___2 = bm;
#line 702
  bm = bm + 1;
#line 702
  *tmp___2 = word;
#line 703
  tmp___3 = hweight_long(word);
#line 703
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_47355: 
#line 699
  tmp___4 = do_now;
#line 699
  do_now = do_now - (size_t )1;
#line 699
  if (tmp___4 != 0UL) {
#line 700
    goto ldv_47354;
  } else {

  }
#line 705
  bm_unmap(p_addr);
  ldv_47358: ;
#line 694
  if (offset < end) {
#line 695
    goto ldv_47357;
  } else {

  }

#line 712
  if (b->bm_words == end) {
#line 713
    tmp___5 = bm_clear_surplus(b);
#line 713
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 715
  spin_unlock_irq(& b->bm_lock);
#line 716
  return;
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 724
  b = mdev->bitmap;
#line 728
  end = offset + number;
#line 730
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 730
  if (_b != 0) {
#line 730
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            730);
  } else {

  }
#line 730
  if (_b != 0) {
#line 730
    return;
  } else {

  }
#line 731
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 731
  if (_b___0 != 0) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            731);
  } else {

  }
#line 731
  if (_b___0 != 0) {
#line 731
    return;
  } else {

  }
#line 733
  spin_lock_irq(& b->bm_lock);
#line 734
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 742
    goto ldv_47383;
    ldv_47382: 
#line 743
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 743
    __min2 = end;
#line 743
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 744
    p_addr = bm_map_paddr(b, offset);
#line 745
    bm = p_addr + (offset & 511UL);
#line 746
    offset = offset + do_now;
#line 747
    goto ldv_47380;
    ldv_47379: 
#line 748
    tmp = buffer;
#line 748
    buffer = buffer + 1;
#line 748
    tmp___0 = bm;
#line 748
    bm = bm + 1;
#line 748
    *tmp = *tmp___0;
    ldv_47380: 
#line 747
    tmp___1 = do_now;
#line 747
    do_now = do_now - (size_t )1;
#line 747
    if (tmp___1 != 0UL) {
#line 748
      goto ldv_47379;
    } else {

    }
#line 749
    bm_unmap(p_addr);
    ldv_47383: ;
#line 742
    if (offset < end) {
#line 743
      goto ldv_47382;
    } else {

    }

  }
#line 752
  spin_unlock_irq(& b->bm_lock);
#line 753
  return;
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 758
  b = mdev->bitmap;
#line 759
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 759
  if (_b != 0) {
#line 759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            759);
  } else {

  }
#line 759
  if (_b != 0) {
#line 759
    return;
  } else {

  }
#line 760
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 760
  if (_b___0 != 0) {
#line 760
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            760);
  } else {

  }
#line 760
  if (_b___0 != 0) {
#line 760
    return;
  } else {

  }
#line 762
  spin_lock_irq(& b->bm_lock);
#line 763
  bm_memset(b, 0UL, 255, b->bm_words);
#line 764
  bm_clear_surplus(b);
#line 765
  b->bm_set = b->bm_bits;
#line 766
  spin_unlock_irq(& b->bm_lock);
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 772
  b = mdev->bitmap;
#line 773
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 773
  if (_b != 0) {
#line 773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            773);
  } else {

  }
#line 773
  if (_b != 0) {
#line 773
    return;
  } else {

  }
#line 774
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 774
  if (_b___0 != 0) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            774);
  } else {

  }
#line 774
  if (_b___0 != 0) {
#line 774
    return;
  } else {

  }
#line 776
  spin_lock_irq(& b->bm_lock);
#line 777
  bm_memset(b, 0UL, 0, b->bm_words);
#line 778
  b->bm_set = 0UL;
#line 779
  spin_unlock_irq(& b->bm_lock);
#line 780
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 784
  b = (struct drbd_bitmap *)bio->bi_private;
#line 785
  uptodate = (int )bio->bi_flags & 1;
#line 792
  if (error == 0 && uptodate == 0) {
#line 793
    error = -5;
  } else {

  }
#line 795
  if (error != 0) {
#line 798
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 800
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 800
  if (tmp != 0) {
#line 801
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 803
  bio_put(bio);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 809
  tmp = bio_alloc(208U, 1);
#line 809
  bio = tmp;
#line 811
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 813
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 817
  __min1 = 4096U;
#line 817
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 817
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 817
  len = __min1 < __min2 ? __min1 : __min2;
#line 820
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 821
  bio->bi_sector = on_disk_sector;
#line 822
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 823
  bio->bi_private = (void *)b;
#line 824
  bio->bi_end_io = & bm_async_io_complete;
#line 826
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 826
  if (tmp___1 != 0) {
#line 827
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 828
    bio_endio(bio, -5);
  } else {
#line 830
    submit_bio(rw, bio);
  }
#line 831
  return;
}
}
#line 870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char *tmp___6 ;

  {
#line 872
  b = mdev->bitmap;
#line 877
  err = 0;
#line 879
  tmp = bm_is_locked(b);
#line 879
  __ret_warn_on = tmp == 0;
#line 879
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 879
  if (tmp___0 != 0L) {
#line 879
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       879);
  } else {

  }
#line 879
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 883
  tmp___1 = drbd_bm_words(mdev);
#line 883
  bm_words = (int )tmp___1;
#line 884
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 890
  now = jiffies;
#line 891
  atomic_set(& b->bm_async_io, num_pages);
#line 892
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 895
  i = 0;
#line 895
  goto ldv_47435;
  ldv_47434: 
#line 896
  bm_page_io_async(mdev, b, i, rw);
#line 895
  i = i + 1;
  ldv_47435: ;
#line 895
  if (i < num_pages) {
#line 896
    goto ldv_47434;
  } else {

  }
#line 898
  tmp___2 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 898
  if (tmp___2 == 0) {
#line 898
    goto ldv_47437;
  } else {

  }
#line 898
  tmp___3 = get_current();
#line 898
  __wait.flags = 0U;
#line 898
  __wait.private = (void *)tmp___3;
#line 898
  __wait.func = & autoremove_wake_function;
#line 898
  __wait.task_list.next = & __wait.task_list;
#line 898
  __wait.task_list.prev = & __wait.task_list;
  ldv_47440: 
#line 898
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 898
  tmp___4 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 898
  if (tmp___4 == 0) {
#line 898
    goto ldv_47439;
  } else {

  }
#line 898
  schedule();
#line 898
  goto ldv_47440;
  ldv_47439: 
#line 898
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_47437: 
#line 900
  tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 900
  if (tmp___5 != 0) {
#line 901
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 902
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 903
    err = -5;
  } else {

  }
#line 906
  now = jiffies;
#line 907
  if (rw == 1) {
#line 911
    drbd_md_flush(mdev);
  } else {
#line 914
    b->bm_set = bm_count_bits_swap_endian(b);
#line 915
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 918
  now = b->bm_set;
#line 920
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 920
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___6, now);
#line 923
  return (err);
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 932
  tmp = bm_rw(mdev, 0);
#line 932
  return (tmp);
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 941
  tmp = bm_rw(mdev, 1);
#line 941
  return (tmp);
}
}
#line 953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 955
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 958
  err = 0;
#line 960
  ldv_mutex_lock_10(& mdev->md_io_mutex);
#line 961
  tmp = drbd_bm_words(mdev);
#line 961
  bm_words = (int )tmp;
#line 962
  offset = (int )(enr << 6);
#line 963
  _min1 = 64;
#line 963
  _min2 = bm_words - offset;
#line 963
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 964
  if (num_words <= 63) {
#line 965
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 965
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 966
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 966
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 968
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 968
  if (tmp___2 == 0) {
#line 970
    err = -5;
#line 971
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 974
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 975
    i = 0;
#line 975
    goto ldv_47463;
    ldv_47462: 
#line 976
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 975
    i = i + 1;
    ldv_47463: ;
#line 975
    if (i <= 3) {
#line 976
      goto ldv_47462;
    } else {

    }

  } else {

  }
#line 978
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 979
  ldv_mutex_unlock_11(& mdev->md_io_mutex);
#line 980
  return (err);
}
}
#line 990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 993
  b = mdev->bitmap;
#line 994
  i = 0xffffffffffffffffUL;
#line 998
  if (b->bm_bits < bm_fo) {
#line 999
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 1001
    goto ldv_47479;
    ldv_47478: 
#line 1003
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1004
    offset = bit_offset >> 6;
#line 1005
    p_addr = __bm_map_paddr(b, offset, km);
#line 1007
    if ((int )find_zero_bit != 0) {
#line 1008
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 1010
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 1012
    __bm_unmap(p_addr, km);
#line 1013
    if (i <= 32767UL) {
#line 1014
      i = bit_offset + i;
#line 1015
      if (b->bm_bits <= i) {
#line 1016
        goto ldv_47476;
      } else {

      }
#line 1017
      goto found;
    } else {

    }
#line 1019
    bm_fo = bit_offset + 32768UL;
    ldv_47479: ;
#line 1001
    if (b->bm_bits > bm_fo) {
#line 1002
      goto ldv_47478;
    } else {

    }
    ldv_47476: 
#line 1021
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1024
  return (i);
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 1030
  b = mdev->bitmap;
#line 1031
  i = 0xffffffffffffffffUL;
#line 1033
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1033
  if (_b != 0) {
#line 1033
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1033);
  } else {

  }
#line 1033
  if (_b != 0) {
#line 1033
    return (i);
  } else {

  }
#line 1034
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1034
  if (_b___0 != 0) {
#line 1034
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1034);
  } else {

  }
#line 1034
  if (_b___0 != 0) {
#line 1034
    return (i);
  } else {

  }
#line 1036
  spin_lock_irq(& b->bm_lock);
#line 1037
  tmp = bm_is_locked(b);
#line 1037
  if (tmp != 0) {
#line 1038
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1040
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1042
  spin_unlock_irq(& b->bm_lock);
#line 1043
  return (i);
}
}
#line 1046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1048
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1048
  return (tmp);
}
}
#line 1061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1064
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1064
  return (tmp);
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1070
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1070
  return (tmp);
}
}
#line 1079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1082
  b = mdev->bitmap;
#line 1083
  p_addr = 0;
#line 1085
  last_page_nr = 0xffffffffffffffffUL;
#line 1086
  c = 0;
#line 1088
  if (b->bm_bits <= e) {
#line 1089
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1091
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1093
  bitnr = s;
#line 1093
  goto ldv_47519;
  ldv_47518: 
#line 1094
  offset = bitnr >> 6;
#line 1095
  page_nr = offset >> 9;
#line 1096
  if (page_nr != last_page_nr) {
#line 1097
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1098
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1099
    p_addr = __bm_map_paddr(b, offset, km);
#line 1100
    last_page_nr = page_nr;
  } else {

  }
#line 1102
  if (val != 0) {
#line 1103
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1103
    c = (tmp == 0) + c;
  } else {
#line 1105
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1105
    c = c - (tmp___0 != 0);
  }
#line 1093
  bitnr = bitnr + 1UL;
  ldv_47519: ;
#line 1093
  if (bitnr <= e) {
#line 1094
    goto ldv_47518;
  } else {

  }

#line 1107
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1108
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1109
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1110
  return (c);
}
}
#line 1117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1121
  b = mdev->bitmap;
#line 1122
  c = 0;
#line 1124
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1124
  if (_b != 0) {
#line 1124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1124);
  } else {

  }
#line 1124
  if (_b != 0) {
#line 1124
    return (1);
  } else {

  }
#line 1125
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1125
  if (_b___0 != 0) {
#line 1125
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1125);
  } else {

  }
#line 1125
  if (_b___0 != 0) {
#line 1125
    return (0);
  } else {

  }
#line 1127
  tmp = spinlock_check(& b->bm_lock);
#line 1127
  flags = _raw_spin_lock_irqsave(tmp);
#line 1128
  tmp___0 = bm_is_locked(b);
#line 1128
  if (tmp___0 != 0) {
#line 1129
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1131
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1133
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1134
  return (c);
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1140
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1140
  return (tmp);
}
}
#line 1144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1146
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1146
  return (- tmp);
}
}
#line 1151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1156
  tmp = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1156
  paddr = (unsigned long *)tmp;
#line 1157
  i = first_word;
#line 1157
  goto ldv_47558;
  ldv_47557: 
#line 1158
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1158
  bits = (int )tmp___0;
#line 1159
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1160
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1157
  i = i + 1;
  ldv_47558: ;
#line 1157
  if (i < last_word) {
#line 1158
    goto ldv_47557;
  } else {

  }
#line 1162
  __kunmap_atomic((void *)paddr);
#line 1163
  return;
}
}
#line 1169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1179
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1180
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1187
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1189
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1190
    return;
  } else {

  }
#line 1196
  if (sl != 0UL) {
#line 1197
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1199
  first_page = (int )(sl >> 15);
#line 1200
  last_page = (int )(el >> 15);
#line 1204
  first_word = (int )(sl >> 6) & 511;
#line 1205
  last_word = 512;
#line 1208
  page_nr = first_page;
#line 1208
  goto ldv_47574;
  ldv_47573: 
#line 1209
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1210
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1210, 0);
#line 1210
  _cond_resched();
#line 1211
  first_word = 0;
#line 1208
  page_nr = page_nr + 1;
  ldv_47574: ;
#line 1208
  if (page_nr < last_page) {
#line 1209
    goto ldv_47573;
  } else {

  }
#line 1215
  last_word = (int )(el >> 6) & 511;
#line 1216
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1223
  if (el <= (unsigned long )e) {
#line 1224
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1225
  return;
}
}
#line 1234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1237
  b = mdev->bitmap;
#line 1241
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1241
  if (_b != 0) {
#line 1241
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1241);
  } else {

  }
#line 1241
  if (_b != 0) {
#line 1241
    return (0);
  } else {

  }
#line 1242
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1242
  if (_b___0 != 0) {
#line 1242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1242);
  } else {

  }
#line 1242
  if (_b___0 != 0) {
#line 1242
    return (0);
  } else {

  }
#line 1244
  tmp = spinlock_check(& b->bm_lock);
#line 1244
  flags = _raw_spin_lock_irqsave(tmp);
#line 1245
  tmp___0 = bm_is_locked(b);
#line 1245
  if (tmp___0 != 0) {
#line 1246
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1247
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1248
    offset = bitnr >> 6;
#line 1249
    p_addr = bm_map_paddr(b, offset);
#line 1250
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1250
    i = tmp___1 != 0;
#line 1251
    bm_unmap(p_addr);
  } else
#line 1252
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1253
    i = -1;
  } else {
#line 1255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1256
    i = 0;
  }
#line 1259
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1260
  return (i);
}
}
#line 1264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1267
  b = mdev->bitmap;
#line 1268
  p_addr = 0;
#line 1268
  page_nr = 0xffffffffffffffffUL;
#line 1270
  c = 0;
#line 1277
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1277
  if (_b != 0) {
#line 1277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1277);
  } else {

  }
#line 1277
  if (_b != 0) {
#line 1277
    return (1);
  } else {

  }
#line 1278
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1278
  if (_b___0 != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b___0 != 0) {
#line 1278
    return (1);
  } else {

  }
#line 1280
  tmp = spinlock_check(& b->bm_lock);
#line 1280
  flags = _raw_spin_lock_irqsave(tmp);
#line 1281
  tmp___0 = bm_is_locked(b);
#line 1281
  if (tmp___0 != 0) {
#line 1282
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1283
  bitnr = s;
#line 1283
  goto ldv_47616;
  ldv_47615: 
#line 1284
  w = bitnr >> 6;
#line 1285
  if (w >> 9 != page_nr) {
#line 1286
    page_nr = w >> 9;
#line 1287
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1288
      bm_unmap(p_addr);
    } else {

    }
#line 1289
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1291
  _b___1 = b->bm_bits <= bitnr;
#line 1291
  if (_b___1 != 0) {
#line 1291
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1291);
  } else {

  }
#line 1291
  if (_b___1 != 0) {
#line 1292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1294
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1294
    c = (tmp___1 != 0) + c;
  }
#line 1283
  bitnr = bitnr + 1UL;
  ldv_47616: ;
#line 1283
  if (bitnr <= (unsigned long )e) {
#line 1284
    goto ldv_47615;
  } else {

  }

#line 1297
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1298
    bm_unmap(p_addr);
  } else {

  }
#line 1299
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1300
  return (c);
}
}
#line 1318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1320
  b = mdev->bitmap;
#line 1325
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1325
  if (_b != 0) {
#line 1325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1325);
  } else {

  }
#line 1325
  if (_b != 0) {
#line 1325
    return (0);
  } else {

  }
#line 1326
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1326
  if (_b___0 != 0) {
#line 1326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1326);
  } else {

  }
#line 1326
  if (_b___0 != 0) {
#line 1326
    return (0);
  } else {

  }
#line 1328
  tmp = spinlock_check(& b->bm_lock);
#line 1328
  flags = _raw_spin_lock_irqsave(tmp);
#line 1329
  tmp___0 = bm_is_locked(b);
#line 1329
  if (tmp___0 != 0) {
#line 1330
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1332
  s = (int )(enr << 6);
#line 1333
  _min1 = (enr + 1UL) << 6;
#line 1333
  _min2 = b->bm_words;
#line 1333
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1334
  count = 0;
#line 1335
  if ((size_t )s < b->bm_words) {
#line 1336
    n = e - s;
#line 1337
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1338
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1339
    goto ldv_47642;
    ldv_47641: 
#line 1340
    tmp___1 = bm;
#line 1340
    bm = bm + 1;
#line 1340
    tmp___2 = hweight_long(*tmp___1);
#line 1340
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_47642: 
#line 1339
    tmp___3 = n;
#line 1339
    n = n - 1;
#line 1339
    if (tmp___3 != 0) {
#line 1340
      goto ldv_47641;
    } else {

    }
#line 1341
    bm_unmap(p_addr);
  } else {
#line 1343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1345
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1346
  return (count);
}
}
#line 1350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1352
  b = mdev->bitmap;
#line 1356
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1356
  if (_b != 0) {
#line 1356
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1356);
  } else {

  }
#line 1356
  if (_b != 0) {
#line 1356
    return (0UL);
  } else {

  }
#line 1357
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1357
  if (_b___0 != 0) {
#line 1357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1357);
  } else {

  }
#line 1357
  if (_b___0 != 0) {
#line 1357
    return (0UL);
  } else {

  }
#line 1359
  spin_lock_irq(& b->bm_lock);
#line 1360
  tmp = bm_is_locked(b);
#line 1360
  if (tmp != 0) {
#line 1361
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1362
  weight = b->bm_set;
#line 1364
  s = (int )((unsigned int )al_enr * 16U);
#line 1365
  __min1 = (size_t )(s + 16);
#line 1365
  __min2 = b->bm_words;
#line 1365
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1367
  if ((e + -1) >> 9 != s >> 9) {
#line 1367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1368);
  } else {

  }
#line 1369
  count = 0;
#line 1370
  if ((size_t )s < b->bm_words) {
#line 1371
    do_now = e - s;
#line 1371
    i = do_now;
#line 1372
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1373
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1374
    goto ldv_47666;
    ldv_47665: 
#line 1375
    tmp___0 = hweight_long(*bm);
#line 1375
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1376
    *bm = 0xffffffffffffffffUL;
#line 1377
    bm = bm + 1;
    ldv_47666: 
#line 1374
    tmp___1 = i;
#line 1374
    i = i - 1;
#line 1374
    if (tmp___1 != 0) {
#line 1375
      goto ldv_47665;
    } else {

    }
#line 1379
    bm_unmap(p_addr);
#line 1380
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1381
    if ((size_t )e == b->bm_words) {
#line 1382
      tmp___2 = bm_clear_surplus(b);
#line 1382
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1386
  weight = b->bm_set - weight;
#line 1387
  spin_unlock_irq(& b->bm_lock);
#line 1388
  return (weight);
}
}
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1396
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1398
  mutex_lock(ldv_func_arg1);
#line 1399
  return;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1406
  tmp = mutex_trylock(ldv_func_arg1);
#line 1406
  ldv_func_res = tmp;
#line 1408
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1408
  return (tmp___0);
#line 1410
  return (ldv_func_res);
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1418
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1420
  mutex_unlock(ldv_func_arg1);
#line 1421
  return;
}
}
#line 1423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1428
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1430
  mutex_lock(ldv_func_arg1);
#line 1431
  return;
}
}
#line 1433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1438
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1440
  mutex_unlock(ldv_func_arg1);
#line 1441
  return;
}
}
#line 1443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1448
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1450
  mutex_unlock(ldv_func_arg1);
#line 1451
  return;
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1458
  tmp = mutex_trylock(ldv_func_arg1);
#line 1458
  ldv_func_res = tmp;
#line 1460
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1460
  return (tmp___0);
#line 1462
  return (ldv_func_res);
}
}
#line 1465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1470
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1472
  mutex_lock(ldv_func_arg1);
#line 1473
  return;
}
}
#line 1475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1480
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1482
  mutex_unlock(ldv_func_arg1);
#line 1483
  return;
}
}
#line 1485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1490
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1492
  mutex_lock(ldv_func_arg1);
#line 1493
  return;
}
}
#line 1495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1500
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1502
  mutex_unlock(ldv_func_arg1);
#line 1503
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 96 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 290
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 291
char const   *drbd_role_str(enum drbd_role s ) ;
#line 292
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1111
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1113
  return (mdev);
}
}
#line 1467
int proc_details ;
#line 1606 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1607
struct file_operations  const  drbd_proc_fops ;
#line 2146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2159
  tmp = drbd_bm_total_weight(mdev);
#line 2159
  *bits_left = tmp - mdev->rs_failed;
#line 2162
  if (*bits_left > mdev->rs_total) {
#line 2168
    __asm__  volatile   ("": : : "memory");
#line 2169
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37735.conn);
#line 2169
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2172
    *per_mil_done = 0U;
  } else {
#line 2175
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2178
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2180
  return;
}
}
#line 2259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2261
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 96
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;

  {
#line 116
  stalled = 0;
#line 118
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 120
  x = (int )(res / 50U);
#line 121
  y = 20 - x;
#line 122
  seq_printf(seq, "\t[");
#line 123
  i = 1;
#line 123
  goto ldv_47138;
  ldv_47137: 
#line 124
  seq_printf(seq, "=");
#line 123
  i = i + 1;
  ldv_47138: ;
#line 123
  if (i < x) {
#line 124
    goto ldv_47137;
  } else {

  }
#line 125
  seq_printf(seq, ">");
#line 126
  i = 0;
#line 126
  goto ldv_47141;
  ldv_47140: 
#line 127
  seq_printf(seq, ".");
#line 126
  i = i + 1;
  ldv_47141: ;
#line 126
  if (i < y) {
#line 127
    goto ldv_47140;
  } else {

  }
#line 128
  seq_printf(seq, "] ");
#line 130
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 132
  if (mdev->rs_total > 1048576UL) {
#line 133
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 137
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 153
  i = (mdev->rs_last_mark + 2) % 8;
#line 154
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 155
  if (dt > 6000UL) {
#line 156
    stalled = 1;
  } else {

  }
#line 158
  if (dt == 0UL) {
#line 159
    dt = dt + 1UL;
  } else {

  }
#line 160
  db = mdev->rs_mark_left[i] - rs_left;
#line 161
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 163
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 167
  dbdt = db / dt << 2;
#line 168
  if (dbdt > 1000UL) {
#line 169
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 172
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 176
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 177
  if (dt == 0UL) {
#line 178
    dt = 1UL;
  } else {

  }
#line 179
  db = mdev->rs_total - rs_left;
#line 180
  dbdt = db / dt << 2;
#line 181
  if (dbdt > 1000UL) {
#line 182
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 185
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 187
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 272U) {
#line 188
    if (mdev->c_sync_rate > 1000) {
#line 189
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 192
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 194
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 195
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 199
  __mptr = (struct lc_element  const  *)e;
#line 199
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 201
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 204
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 209
  hole = 0;
#line 213
  write_ordering_chars[0] = 110;
#line 213
  write_ordering_chars[1] = 100;
#line 213
  write_ordering_chars[2] = 102;
#line 219
  tmp = drbd_buildtag();
#line 219
  seq_printf(seq, "version: 8.3.9 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 95, tmp);
#line 242
  i = 0;
#line 242
  goto ldv_47161;
  ldv_47160: 
#line 243
  mdev = minor_to_mdev((unsigned int )i);
#line 244
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 245
    hole = 1;
#line 246
    goto ldv_47159;
  } else {

  }
#line 248
  if (hole != 0) {
#line 249
    hole = 0;
#line 250
    seq_printf(seq, "\n");
  } else {

  }
#line 253
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37735.conn);
#line 255
  if (((unsigned int )*((unsigned short *)mdev + 998UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1997UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1996UL) == 2U) {
#line 258
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 260
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 260
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 260
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 260
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 260
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 260
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 260
    tmp___6 = is_susp(mdev->state);
#line 260
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.pdsk);
#line 260
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.disk);
#line 260
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_37735.peer);
#line 260
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_37735.role);
#line 260
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 1998UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 1998UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1998UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 291
    tmp___11 = drbd_bm_total_weight(mdev);
#line 291
    seq_printf(seq, " oos:%lu\n", tmp___11 << 2);
  }
#line 294
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 256U || (unsigned int )*((unsigned short *)mdev + 998UL) == 272U) {
#line 296
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 298
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 288U || (unsigned int )*((unsigned short *)mdev + 998UL) == 304U) {
#line 299
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 305
  if (proc_details > 0) {
#line 305
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 305
    if (tmp___12 != 0) {
#line 306
      lc_seq_printf_stats(seq, mdev->resync);
#line 307
      lc_seq_printf_stats(seq, mdev->act_log);
#line 308
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 311
  if (proc_details > 1) {
#line 312
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 313
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_47159: 
#line 242
  i = i + 1;
  ldv_47161: ;
#line 242
  if ((unsigned int )i < minor_count) {
#line 243
    goto ldv_47160;
  } else {

  }

#line 319
  return (0);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 324
  tmp = PDE((struct inode  const  *)inode);
#line 324
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 324
  return (tmp___0);
}
}
#line 345
void ldv_check_final_state(void) ;
#line 348
extern void ldv_check_return_value(int  ) ;
#line 354
void ldv_initialize(void) ;
#line 357
extern void ldv_handler_precall(void) ;
#line 360
extern int nondet_int(void) ;
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 398
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 388
  LDV_IN_INTERRUPT = 1;
#line 397
  ldv_initialize();
#line 401
  goto ldv_47192;
  ldv_47191: 
#line 405
  tmp = nondet_int();
#line 405
  switch (tmp) {
  case 0: ;
#line 410
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 415
    ldv_handler_precall();
#line 416
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 417
    ldv_check_return_value(res_drbd_proc_open_3);
#line 418
    if (res_drbd_proc_open_3 != 0) {
#line 419
      goto ldv_module_exit;
    } else {

    }
#line 420
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 426
  goto ldv_47189;
  default: ;
#line 427
  goto ldv_47189;
  }
  ldv_47189: ;
  ldv_47192: 
#line 401
  tmp___0 = nondet_int();
#line 401
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 403
    goto ldv_47191;
  } else {

  }

  ldv_module_exit: ;
#line 436
  ldv_check_final_state();
#line 439
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 448
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 450
  mutex_lock(ldv_func_arg1);
#line 451
  return;
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 458
  tmp = mutex_trylock(ldv_func_arg1);
#line 458
  ldv_func_res = tmp;
#line 460
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 460
  return (tmp___0);
#line 462
  return (ldv_func_res);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 470
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 472
  mutex_unlock(ldv_func_arg1);
#line 473
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 480
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 482
  mutex_lock(ldv_func_arg1);
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 490
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 492
  mutex_unlock(ldv_func_arg1);
#line 493
  return;
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 500
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 502
  mutex_unlock(ldv_func_arg1);
#line 503
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 260 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5392: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5802.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5802.rlock);
#line 326
  return;
}
}
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 346 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 346
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 346
  return (tmp);
}
}
#line 349 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 351
  tmp = PageTail(page);
#line 351
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 351
  if (tmp___0 != 0L) {
#line 352
    return (page->ldv_13170.first_page);
  } else {

  }
#line 353
  return (page);
}
}
#line 356 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 358
  tmp = compound_head(page);
#line 358
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 358
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18229: ;
#line 63
    goto ldv_18229;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18230: ;
#line 65
    goto ldv_18230;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18231: ;
#line 66
    goto ldv_18231;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 358 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 359
extern long schedule_timeout_interruptible(long  ) ;
#line 2071
extern void flush_signals(struct task_struct * ) ;
#line 2104
extern void force_sig(int  , struct task_struct * ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5802.ldv_5801.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 841 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 860
  return ((loff_t )inode->i_size);
}
}
#line 1093 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 225 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 650 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 964 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 966
  return (q->limits.max_segment_size);
}
}
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 676
  __asm__  volatile   ("": : : "memory");
#line 677
  return (thi->t_state);
}
}
#line 1116 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1118
  return (mdev->minor);
}
}
#line 1129 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1131
  ldv_mutex_lock_38(& mdev->data.mutex);
#line 1134
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1134
  if (tmp != 0L) {
#line 1135
    ldv_mutex_unlock_39(& mdev->data.mutex);
#line 1136
    return (0);
  } else {

  }
#line 1138
  return (1);
}
}
#line 1141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1143
  ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1144
  return;
}
}
#line 1168
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1177
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1179
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1198
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1202
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1207
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1215
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1221
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1223
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1225
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1228
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1230
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1234
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1240
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1243
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1246
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1247
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1250
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1261
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1460
wait_queue_head_t drbd_pp_wait ;
#line 1462 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1489
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1492
int drbd_worker(struct drbd_thread *thi ) ;
#line 1493
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1494
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1495
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1496
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1497
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1501
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1505
  if (mdev->ov_last_oos_size != 0UL) {
#line 1506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1510
  mdev->ov_last_oos_size = 0UL;
#line 1511
  return;
}
}
#line 1514
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1515
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1518
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1519
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1520
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1521
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1522
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1523
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1524
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1525
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1527
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1528
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1529
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1530
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1531
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1532
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1534
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1536
void resync_timer_fn(unsigned long data ) ;
#line 1539
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) ;
#line 1540
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1543
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1548
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1563 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1567
  if (level == 1) {
#line 1568
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1570
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1572
  return (err);
}
}
#line 1575 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1577
  val = 1;
#line 1578
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1580
  return;
}
}
#line 1582 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1584
  val = 0;
#line 1585
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1587
  return;
}
}
#line 1612
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1613
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1614
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1616
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1617
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1618
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1619
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1622
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1626
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1704 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1706
  return ((struct page *)page->ldv_13170.ldv_13167.private);
}
}
#line 1727 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1729
  page = e->pages;
#line 1730
  goto ldv_47469;
  ldv_47468: 
#line 1731
  tmp = page_count(page);
#line 1731
  if (tmp > 1) {
#line 1732
    return (1);
  } else {

  }
#line 1730
  page = page_chain_next(page);
  ldv_47469: ;
#line 1730
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1730
    tmp___0 = page_chain_next(page);
#line 1730
    __builtin_prefetch((void const   *)tmp___0);
#line 1730
    if (1 != 0) {
#line 1731
      goto ldv_47468;
    } else {
#line 1733
      goto ldv_47470;
    }
  } else {

  }
  ldv_47470: ;
#line 1734
  return (0);
}
}
#line 1738 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1740
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1740
  if (tmp == 0) {
#line 1740
    goto ldv_47474;
  } else {

  }
#line 1740
  tmp___0 = get_current();
#line 1740
  __wait.flags = 0U;
#line 1740
  __wait.private = (void *)tmp___0;
#line 1740
  __wait.func = & autoremove_wake_function;
#line 1740
  __wait.task_list.next = & __wait.task_list;
#line 1740
  __wait.task_list.prev = & __wait.task_list;
  ldv_47477: 
#line 1740
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1740
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1740
  if (tmp___1 == 0) {
#line 1740
    goto ldv_47476;
  } else {

  }
#line 1740
  schedule();
#line 1740
  goto ldv_47477;
  ldv_47476: 
#line 1740
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47474: ;
#line 1743
  return;
}
}
#line 1744 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1746
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1747
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1748
  return;
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1783
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1785
  if (forcedetach == 0) {
#line 1786
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1786
    if (tmp != 0) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1788
    goto ldv_47500;
  } else {

  }
  case 2: ;
  case 1: 
#line 1793
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  if ((int )mdev->state.ldv_37735.disk > 2) {
#line 1795
    __ns.i = mdev->state.i;
#line 1795
    __ns.ldv_37735.disk = 2U;
#line 1795
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1799
  goto ldv_47500;
  }
  ldv_47500: ;
#line 1802
  return;
}
}
#line 1860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1863
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1863
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1863
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1863
    tmp___0 = 0UL;
  }
#line 1863
  return (tmp___0);
}
}
#line 1942 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1945
  tmp = spinlock_check(& q->q_lock);
#line 1945
  flags = _raw_spin_lock_irqsave(tmp);
#line 1946
  list_add_tail(& w->list, & q->q);
#line 1947
  up(& q->s);
#line 1949
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1950
  return;
}
}
#line 1952 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1954
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1954
  if (tmp != 0) {
#line 1955
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1956
  return;
}
}
#line 1958 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1960
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1961
  wake_asender(mdev);
#line 1962
  return;
}
}
#line 1964 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1968
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1968
  return (tmp);
}
}
#line 1983 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1985
  _drbd_thread_stop(thi, 0, 1);
#line 1986
  return;
}
}
#line 2043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2045
  atomic_inc(& mdev->rs_pending_cnt);
#line 2046
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 269
  bio = bio_clone(bio_src, 16U);
#line 271
  req->private_bio = bio;
#line 273
  bio->bi_private = (void *)req;
#line 274
  bio->bi_end_io = & drbd_endio_pri;
#line 275
  bio->bi_next = 0;
#line 276
  return;
}
}
#line 320
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 322
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 329
  mdev = req->mdev;
#line 334
  rv = __req_mod(req, what, & m);
#line 335
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 336
    complete_master_bio(mdev, & m);
  } else {

  }
#line 338
  return (rv);
}
}
#line 344 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 347
  mdev = req->mdev;
#line 351
  spin_lock_irq(& mdev->req_lock);
#line 352
  rv = __req_mod(req, what, & m);
#line 353
  spin_unlock_irq(& mdev->req_lock);
#line 355
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 356
    complete_master_bio(mdev, & m);
  } else {

  }
#line 358
  return (rv);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 130
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 131
  md_io->error = error;
#line 133
  complete(& md_io->event);
#line 134
  return;
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 141
  flags = 0UL;
#line 142
  mdev = e->mdev;
#line 144
  if (e->ldv_45894.block_id == 0ULL) {
#line 144
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            144);
  } else {

  }
#line 146
  tmp = spinlock_check(& mdev->req_lock);
#line 146
  flags = _raw_spin_lock_irqsave(tmp);
#line 147
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 148
  list_del(& e->w.list);
#line 149
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 149
  if (tmp___0 != 0) {
#line 150
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 151
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 151
  if (tmp___1 != 0) {
#line 152
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 153
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 155
  drbd_queue_work(& mdev->data.work, & e->w);
#line 156
  put_ldev(mdev);
#line 157
  return;
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 163
  flags = 0UL;
#line 164
  mdev = e->mdev;
#line 170
  if (e->ldv_45894.block_id == 0ULL) {
#line 170
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            170);
  } else {

  }
#line 176
  e_sector = e->sector;
#line 177
  do_al_complete_io = (int )e->flags & 1;
#line 178
  is_syncer_req = e->ldv_45894.block_id == 0xffffffffffffffffULL;
#line 180
  tmp = spinlock_check(& mdev->req_lock);
#line 180
  flags = _raw_spin_lock_irqsave(tmp);
#line 181
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 182
  list_del(& e->w.list);
#line 183
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 190
  if (is_syncer_req != 0) {
#line 190
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 190
    do_wake = tmp___0;
  } else {
#line 190
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 190
    do_wake = tmp___1;
  }
#line 194
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 194
  if (tmp___2 != 0) {
#line 195
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 196
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 198
  if (is_syncer_req != 0) {
#line 199
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 201
  if (do_wake != 0) {
#line 202
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 204
  if (do_al_complete_io != 0) {
#line 205
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 207
  wake_asender(mdev);
#line 208
  put_ldev(mdev);
#line 209
  return;
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 216
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 217
  mdev = e->mdev;
#line 218
  uptodate = (int )bio->bi_flags & 1;
#line 219
  is_write = (int )bio->bi_rw & 1;
#line 221
  if (error != 0) {
#line 222
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 225
  if (error == 0 && uptodate == 0) {
#line 226
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 232
    error = -5;
  } else {

  }
#line 235
  if (error != 0) {
#line 236
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 238
  bio_put(bio);
#line 239
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 239
  if (tmp != 0) {
#line 240
    if (is_write != 0) {
#line 241
      drbd_endio_write_sec_final(e);
    } else {
#line 243
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 244
  return;
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 252
  req = (struct drbd_request *)bio->bi_private;
#line 253
  mdev = req->mdev;
#line 256
  uptodate = (int )bio->bi_flags & 1;
#line 258
  if (error == 0 && uptodate == 0) {
#line 259
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 264
    error = -5;
  } else {

  }
#line 268
  tmp = __builtin_expect(error != 0, 0L);
#line 268
  if (tmp != 0L) {
#line 269
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 257UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 275
    what = completed_ok;
  }
#line 277
  bio_put(req->private_bio);
#line 278
  tmp___0 = ERR_PTR((long )error);
#line 278
  req->private_bio = (struct bio *)tmp___0;
#line 281
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 281
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 282
  __req_mod(req, what, & m);
#line 283
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 285
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 286
    complete_master_bio(mdev, & m);
  } else {

  }
#line 287
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 291
  __mptr = (struct drbd_work  const  *)w;
#line 291
  req = (struct drbd_request *)__mptr;
#line 297
  spin_lock_irq(& mdev->req_lock);
#line 298
  if (cancel != 0 || *((unsigned int *)mdev + 499UL) != 65536U) {
#line 299
    _req_mod(req, read_retry_remote_canceled);
#line 300
    spin_unlock_irq(& mdev->req_lock);
#line 301
    return (1);
  } else {

  }
#line 303
  spin_unlock_irq(& mdev->req_lock);
#line 305
  tmp = w_send_read_req(mdev, w, 0);
#line 305
  return (tmp);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 310
  _b = cancel != 0;
#line 310
  if (_b != 0) {
#line 310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            310);
  } else {

  }
#line 310
  if (_b != 0) {
#line 310
    return (1);
  } else {

  }
#line 311
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 312
  return (1);
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 319
  page = e->pages;
#line 323
  desc.tfm = tfm;
#line 324
  desc.flags = 0U;
#line 326
  sg_init_table(& sg, 1U);
#line 327
  crypto_hash_init(& desc);
#line 329
  goto ldv_47949;
  ldv_47948: 
#line 331
  sg_set_page(& sg, page, 4096U, 0U);
#line 332
  crypto_hash_update(& desc, & sg, sg.length);
#line 333
  page = tmp;
  ldv_47949: 
#line 329
  tmp = page_chain_next(page);
#line 329
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 330
    goto ldv_47948;
  } else {

  }
#line 336
  len = e->size & 4095U;
#line 337
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 338
  crypto_hash_update(& desc, & sg, sg.length);
#line 339
  crypto_hash_final(& desc, (u8 *)digest);
#line 340
  return;
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 349
  desc.tfm = tfm;
#line 350
  desc.flags = 0U;
#line 352
  sg_init_table(& sg, 1U);
#line 353
  crypto_hash_init(& desc);
#line 355
  bvec = bio->bi_io_vec;
#line 355
  i = 0;
#line 355
  goto ldv_47962;
  ldv_47961: 
#line 356
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 357
  crypto_hash_update(& desc, & sg, sg.length);
#line 355
  bvec = bvec + 1;
#line 355
  i = i + 1;
  ldv_47962: ;
#line 355
  if ((int )bio->bi_vcnt > i) {
#line 356
    goto ldv_47961;
  } else {

  }
#line 359
  crypto_hash_final(& desc, (u8 *)digest);
#line 360
  return;
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 364
  __mptr = (struct drbd_work  const  *)w;
#line 364
  e = (struct drbd_epoch_entry *)__mptr;
#line 369
  if (e->ldv_45894.block_id != 2205466966ULL) {
#line 369
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            369);
  } else {

  }
#line 371
  tmp = __builtin_expect(cancel != 0, 0L);
#line 371
  if (tmp != 0L) {
#line 372
    drbd_free_some_ee(mdev, e, 0);
#line 373
    return (1);
  } else {

  }
#line 376
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 376
  if (tmp___1 != 0L) {
#line 377
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 377
    digest_size = (int )tmp___0;
#line 378
    digest = kmalloc((size_t )digest_size, 16U);
#line 379
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 380
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 382
      inc_rs_pending(mdev);
#line 383
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 389
      kfree((void const   *)digest);
    } else {
#line 391
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 392
      ok = 0;
    }
  } else {
#line 395
    ok = 1;
  }
#line 397
  drbd_free_some_ee(mdev, e, 0);
#line 399
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 399
  if (tmp___2 != 0L) {
#line 400
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 401
  return (ok);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 410
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 410
  if (tmp == 0) {
#line 411
    return (-5);
  } else {

  }
#line 413
  tmp___0 = drbd_rs_should_slow_down(mdev);
#line 413
  if (tmp___0 != 0) {
#line 414
    goto defer;
  } else {

  }
#line 418
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 419
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 420
    goto defer;
  } else {

  }
#line 422
  e->w.cb = & w_e_send_csum;
#line 423
  spin_lock_irq(& mdev->req_lock);
#line 424
  list_add(& e->w.list, & mdev->read_ee);
#line 425
  spin_unlock_irq(& mdev->req_lock);
#line 427
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 428
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 428
  if (tmp___1 == 0) {
#line 429
    return (0);
  } else {

  }
#line 434
  spin_lock_irq(& mdev->req_lock);
#line 435
  list_del(& e->w.list);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 438
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 440
  put_ldev(mdev);
#line 441
  return (-11);
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int queue ;
  int tmp ;

  {
#line 446
  mdev = (struct drbd_conf *)data;
#line 449
  queue = 1;
#line 450
  switch ((int )mdev->state.ldv_37735.conn) {
  case 18: 
#line 452
  mdev->resync_work.cb = & w_make_ov_request;
#line 453
  goto ldv_47988;
  case 17: 
#line 455
  mdev->resync_work.cb = & w_make_resync_request;
#line 456
  goto ldv_47988;
  default: 
#line 458
  queue = 0;
#line 459
  mdev->resync_work.cb = & w_resync_inactive;
  }
  ldv_47988: 
#line 463
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 463
  if (tmp != 0 && queue != 0) {
#line 464
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 465
  return;
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 471
  i = 0;
#line 471
  goto ldv_47997;
  ldv_47996: 
#line 472
  *(fb->values + (unsigned long )i) = value;
#line 471
  i = i + 1;
  ldv_47997: ;
#line 471
  if ((unsigned int )i < fb->size) {
#line 472
    goto ldv_47996;
  } else {

  }

#line 476
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 479
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 480
  tmp = fb->head_index;
#line 480
  fb->head_index = fb->head_index + 1U;
#line 480
  *(fb->values + (unsigned long )tmp) = value;
#line 482
  if (fb->head_index >= fb->size) {
#line 483
    fb->head_index = 0U;
  } else {

  }
#line 485
  return (ov);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 492
  i = 0;
#line 492
  goto ldv_48010;
  ldv_48009: 
#line 493
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 492
  i = i + 1;
  ldv_48010: ;
#line 492
  if ((unsigned int )i < fb->size) {
#line 493
    goto ldv_48009;
  } else {

  }

#line 497
  return;
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 507
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 507
  sect_in = (unsigned int )tmp;
#line 508
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 510
  spin_lock(& mdev->peer_seq_lock);
#line 512
  steps = (int )mdev->rs_plan_s.size;
#line 514
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 515
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 517
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 521
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 524
  cps = correction / steps;
#line 525
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 526
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 529
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 530
  spin_unlock(& mdev->peer_seq_lock);
#line 531
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 533
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 534
  if (req_sect < 0) {
#line 535
    req_sect = 0;
  } else {

  }
#line 537
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 538
  if (req_sect > max_sect) {
#line 539
    req_sect = max_sect;
  } else {

  }
#line 547
  return (req_sect);
}
}
#line 550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int rollback_i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned long tmp___15 ;

  {
#line 555
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 555
  capacity = tmp;
#line 559
  i = 0;
#line 561
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 561
  if (tmp___0 != 0L) {
#line 562
    return (1);
  } else {

  }
#line 564
  tmp___1 = __builtin_expect((int )mdev->state.ldv_37735.conn <= 9, 0L);
#line 564
  if (tmp___1 != 0L) {
#line 565
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 566
    return (0);
  } else {

  }
#line 569
  if ((unsigned int )*((unsigned short *)mdev + 998UL) != 272U) {
#line 570
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37735.conn);
#line 570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 573
  if (mdev->rs_total == 0UL) {
#line 575
    drbd_resync_finished(mdev);
#line 576
    return (1);
  } else {

  }
#line 579
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 579
  if (tmp___3 == 0) {
#line 584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 585
    mdev->resync_work.cb = & w_resync_inactive;
#line 586
    return (1);
  } else {

  }
#line 591
  if (mdev->agreed_pro_version <= 93) {
#line 591
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 591
    max_segment_size = (int )tmp___4;
  } else {
#line 591
    max_segment_size = mdev->agreed_pro_version <= 94 ? 32768 : 131072;
  }
#line 595
  if (mdev->rs_plan_s.size != 0U) {
#line 596
    tmp___5 = drbd_rs_controller(mdev);
#line 596
    number = tmp___5 >> 3;
#line 597
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 599
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 600
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 608
  tmp___6 = drbd_rs_should_slow_down(mdev);
#line 608
  if (tmp___6 != 0) {
#line 609
    goto requeue;
  } else {

  }
#line 611
  ldv_mutex_lock_41(& mdev->data.mutex);
#line 612
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 613
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 615
    mx = 1;
  }
#line 616
  ldv_mutex_unlock_42(& mdev->data.mutex);
#line 619
  if (number > mx) {
#line 620
    mx = number;
  } else {

  }
#line 623
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 624
  if (pe + number > mx) {
#line 625
    number = mx - pe;
  } else {

  }
#line 628
  i = 0;
#line 628
  goto ldv_48056;
  ldv_48055: 
#line 630
  ldv_mutex_lock_43(& mdev->data.mutex);
#line 631
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 632
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 633
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 635
    queued = 1;
#line 636
    sndbuf = 0;
  }
#line 638
  ldv_mutex_unlock_44(& mdev->data.mutex);
#line 639
  if (sndbuf / 2 < queued) {
#line 640
    goto requeue;
  } else {

  }
  next_sector: 
#line 643
  size = 4096;
#line 644
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 646
  if (bit == 0xffffffffffffffffUL) {
#line 647
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 648
    mdev->resync_work.cb = & w_resync_inactive;
#line 649
    put_ldev(mdev);
#line 650
    return (1);
  } else {

  }
#line 653
  sector = bit << 3;
#line 655
  tmp___7 = drbd_try_rs_begin_io(mdev, sector);
#line 655
  if (tmp___7 != 0) {
#line 656
    mdev->bm_resync_fo = bit;
#line 657
    goto requeue;
  } else {

  }
#line 659
  mdev->bm_resync_fo = bit + 1UL;
#line 661
  tmp___8 = drbd_bm_test_bit(mdev, bit);
#line 661
  tmp___9 = __builtin_expect(tmp___8 == 0, 0L);
#line 661
  if (tmp___9 != 0L) {
#line 662
    drbd_rs_complete_io(mdev, sector);
#line 663
    goto next_sector;
  } else {

  }
#line 673
  align = 1;
#line 674
  rollback_i = i;
  ldv_48044: ;
#line 676
  if (size + 4096 > max_segment_size) {
#line 677
    goto ldv_48043;
  } else {

  }
#line 680
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 681
    goto ldv_48043;
  } else {

  }
#line 684
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 685
    goto ldv_48043;
  } else {

  }
#line 691
  tmp___10 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 691
  if (tmp___10 != 1) {
#line 692
    goto ldv_48043;
  } else {

  }
#line 693
  bit = bit + 1UL;
#line 694
  size = size + 4096;
#line 695
  if (4096 << align <= size) {
#line 696
    align = align + 1;
  } else {

  }
#line 697
  i = i + 1;
#line 698
  goto ldv_48044;
  ldv_48043: ;
#line 701
  if (size > 4096) {
#line 702
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 706
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 707
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 708
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 709
    tmp___11 = read_for_csum(mdev, sector, size);
#line 709
    switch (tmp___11) {
    case -5: 
#line 711
    put_ldev(mdev);
#line 712
    return (0);
    case -11: 
#line 714
    drbd_rs_complete_io(mdev, sector);
#line 715
    mdev->bm_resync_fo = sector >> 3;
#line 716
    i = rollback_i;
#line 717
    goto requeue;
    case 0: ;
#line 720
    goto ldv_48048;
    default: 
#line 722
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (722), "i" (12UL));
    ldv_48050: ;
#line 722
    goto ldv_48050;
    }
    ldv_48048: ;
  } else {
#line 725
    inc_rs_pending(mdev);
#line 726
    tmp___14 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 726
    if (tmp___14 == 0) {
#line 728
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 729
      atomic_dec(& mdev->rs_pending_cnt);
#line 729
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 729
      if (tmp___13 < 0) {
#line 729
        tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 729
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 729, tmp___12);
      } else {

      }
#line 730
      put_ldev(mdev);
#line 731
      return (0);
    } else {

    }
  }
#line 628
  i = i + 1;
  ldv_48056: ;
#line 628
  if (i < number) {
#line 629
    goto ldv_48055;
  } else {

  }
#line 736
  tmp___15 = drbd_bm_bits(mdev);
#line 736
  if (mdev->bm_resync_fo >= tmp___15) {
#line 743
    mdev->resync_work.cb = & w_resync_inactive;
#line 744
    put_ldev(mdev);
#line 745
    return (1);
  } else {

  }
  requeue: 
#line 749
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 750
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 751
  put_ldev(mdev);
#line 752
  return (1);
}
}
#line 755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 759
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 759
  capacity = tmp;
#line 761
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 761
  if (tmp___0 != 0L) {
#line 762
    return (1);
  } else {

  }
#line 764
  tmp___1 = __builtin_expect((int )mdev->state.ldv_37735.conn <= 9, 0L);
#line 764
  if (tmp___1 != 0L) {
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 766
    return (0);
  } else {

  }
#line 769
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 770
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 770
  if (tmp___2 > number) {
#line 771
    goto requeue;
  } else {

  }
#line 773
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 773
  number = number - tmp___3;
#line 775
  sector = mdev->ov_position;
#line 776
  i = 0;
#line 776
  goto ldv_48074;
  ldv_48073: ;
#line 777
  if (sector >= capacity) {
#line 778
    mdev->resync_work.cb = & w_resync_inactive;
#line 779
    return (1);
  } else {

  }
#line 782
  size = 4096;
#line 784
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 784
  if (tmp___4 != 0) {
#line 785
    mdev->ov_position = sector;
#line 786
    goto requeue;
  } else {

  }
#line 789
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 790
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 792
  inc_rs_pending(mdev);
#line 793
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 793
  if (tmp___7 == 0) {
#line 794
    atomic_dec(& mdev->rs_pending_cnt);
#line 794
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 794
    if (tmp___6 < 0) {
#line 794
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 794
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 794, tmp___5);
    } else {

    }
#line 795
    return (0);
  } else {

  }
#line 797
  sector = sector + 8UL;
#line 776
  i = i + 1;
  ldv_48074: ;
#line 776
  if (i < number) {
#line 777
    goto ldv_48073;
  } else {

  }
#line 799
  mdev->ov_position = sector;
  requeue: 
#line 802
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 803
  return (1);
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 809
  kfree((void const   *)w);
#line 810
  ov_oos_print(mdev);
#line 811
  drbd_resync_finished(mdev);
#line 813
  return (1);
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 818
  kfree((void const   *)w);
#line 820
  drbd_resync_finished(mdev);
#line 822
  return (1);
}
}
#line 825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 827
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 828
  request_ping(mdev);
#line 829
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 829
  if (tmp != 0 || (int )mdev->state.ldv_37735.conn <= 9) {
#line 829
    goto ldv_48089;
  } else {

  }
#line 829
  tmp___0 = get_current();
#line 829
  __wait.flags = 0U;
#line 829
  __wait.private = (void *)tmp___0;
#line 829
  __wait.func = & autoremove_wake_function;
#line 829
  __wait.task_list.next = & __wait.task_list;
#line 829
  __wait.task_list.prev = & __wait.task_list;
  ldv_48092: 
#line 829
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 829
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 829
  if (tmp___1 != 0 || (int )mdev->state.ldv_37735.conn <= 9) {
#line 829
    goto ldv_48091;
  } else {

  }
#line 829
  schedule();
#line 829
  goto ldv_48092;
  ldv_48091: 
#line 829
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48089: ;
#line 832
  return;
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 839
  khelper_cmd = 0;
#line 844
  tmp___1 = drbd_rs_del_all(mdev);
#line 844
  if (tmp___1 != 0) {
#line 850
    tmp = get_current();
#line 850
    tmp->state = 1L;
#line 851
    schedule_timeout(25L);
#line 852
    tmp___0 = kmalloc(24UL, 32U);
#line 852
    w = (struct drbd_work *)tmp___0;
#line 853
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 854
      w->cb = & w_resync_finished;
#line 855
      drbd_queue_work(& mdev->data.work, w);
#line 856
      return (1);
    } else {

    }
#line 858
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 861
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 862
  if (dt == 0UL) {
#line 863
    dt = 1UL;
  } else {

  }
#line 864
  db = mdev->rs_total;
#line 865
  dbdt = db / dt << 2;
#line 866
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 868
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 868
  if (tmp___2 == 0) {
#line 869
    goto out;
  } else {

  }
#line 871
  ping_peer(mdev);
#line 873
  spin_lock_irq(& mdev->req_lock);
#line 874
  os = mdev->state;
#line 878
  if ((int )os.ldv_37735.conn <= 10) {
#line 879
    goto out_unlock;
  } else {

  }
#line 881
  ns = os;
#line 882
  ns.ldv_37735.conn = 10U;
#line 884
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 889
  n_oos = drbd_bm_total_weight(mdev);
#line 891
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 892
    if (n_oos != 0UL) {
#line 893
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 895
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 898
      if (mdev->rs_failed != n_oos) {
#line 898
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                898);
      } else {

      }
#line 900
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 901
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 903
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 904
        s = mdev->rs_same_csum;
#line 905
        t = mdev->rs_total;
#line 906
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 909
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 918
  if (mdev->rs_failed != 0UL) {
#line 919
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 921
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 922
      ns.ldv_37735.disk = 4U;
#line 923
      ns.ldv_37735.pdsk = 8U;
    } else {
#line 925
      ns.ldv_37735.disk = 8U;
#line 926
      ns.ldv_37735.pdsk = 4U;
    }
  } else {
#line 929
    ns.ldv_37735.disk = 8U;
#line 930
    ns.ldv_37735.pdsk = 8U;
#line 932
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 933
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 935
        i = 1;
#line 935
        goto ldv_48111;
        ldv_48110: 
#line 936
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 935
        i = i + 1;
        ldv_48111: ;
#line 935
        if (i <= 3) {
#line 936
          goto ldv_48110;
        } else {

        }
#line 937
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 938
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 940
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 944
    drbd_uuid_set_bm(mdev, 0ULL);
#line 946
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 950
      i___0 = 0;
#line 950
      goto ldv_48115;
      ldv_48114: 
#line 951
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 950
      i___0 = i___0 + 1;
      ldv_48115: ;
#line 950
      if (i___0 <= 3) {
#line 951
        goto ldv_48114;
      } else {

      }

    } else {

    }
  }
#line 955
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 957
  spin_unlock_irq(& mdev->req_lock);
#line 958
  put_ldev(mdev);
  out: 
#line 960
  mdev->rs_total = 0UL;
#line 961
  mdev->rs_failed = 0UL;
#line 962
  mdev->rs_paused = 0UL;
#line 963
  mdev->ov_start_sector = 0UL;
#line 965
  drbd_md_sync(mdev);
#line 967
  tmp___3 = test_and_clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 967
  if (tmp___3 != 0) {
#line 968
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap\n");
#line 969
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 972
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 973
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 975
  return (1);
}
}
#line 979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 981
  tmp = drbd_ee_has_active_page(e);
#line 981
  if (tmp != 0) {
#line 983
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 984
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 985
    atomic_sub(i, & mdev->pp_in_use);
#line 986
    spin_lock_irq(& mdev->req_lock);
#line 987
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 988
    spin_unlock_irq(& mdev->req_lock);
#line 989
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 991
    drbd_free_some_ee(mdev, e, 0);
  }
#line 992
  return;
}
}
#line 1000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1002
  __mptr = (struct drbd_work  const  *)w;
#line 1002
  e = (struct drbd_epoch_entry *)__mptr;
#line 1005
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1005
  if (tmp___1 != 0L) {
#line 1006
    drbd_free_some_ee(mdev, e, 0);
#line 1007
    atomic_dec(& mdev->unacked_cnt);
#line 1007
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1007
    if (tmp___0 < 0) {
#line 1007
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1007
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1007, tmp);
    } else {

    }
#line 1008
    return (1);
  } else {

  }
#line 1011
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1011
  if (tmp___3 != 0L) {
#line 1012
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1014
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1014
    if (tmp___2 != 0) {
#line 1015
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1018
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1021
  atomic_dec(& mdev->unacked_cnt);
#line 1021
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1021
  if (tmp___5 < 0) {
#line 1021
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1021, tmp___4);
  } else {

  }
#line 1023
  move_to_net_ee_or_free(mdev, e);
#line 1025
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1025
  if (tmp___6 != 0L) {
#line 1026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1027
  return (ok);
}
}
#line 1036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1038
  __mptr = (struct drbd_work  const  *)w;
#line 1038
  e = (struct drbd_epoch_entry *)__mptr;
#line 1041
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1041
  if (tmp___1 != 0L) {
#line 1042
    drbd_free_some_ee(mdev, e, 0);
#line 1043
    atomic_dec(& mdev->unacked_cnt);
#line 1043
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1043
    if (tmp___0 < 0) {
#line 1043
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1043
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1043, tmp);
    } else {

    }
#line 1044
    return (1);
  } else {

  }
#line 1047
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1047
  if (tmp___2 != 0) {
#line 1048
    drbd_rs_complete_io(mdev, e->sector);
#line 1049
    put_ldev(mdev);
  } else {

  }
#line 1052
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1052
  if (tmp___6 != 0L) {
#line 1053
    tmp___4 = __builtin_expect((int )mdev->state.ldv_37735.pdsk > 3, 1L);
#line 1053
    if (tmp___4 != 0L) {
#line 1054
      inc_rs_pending(mdev);
#line 1055
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 1057
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1057
      if (tmp___3 != 0) {
#line 1058
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 1060
      ok = 1;
    }
  } else {
#line 1063
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1063
    if (tmp___5 != 0) {
#line 1064
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1067
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1070
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 1073
  atomic_dec(& mdev->unacked_cnt);
#line 1073
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1073
  if (tmp___8 < 0) {
#line 1073
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1073
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1073, tmp___7);
  } else {

  }
#line 1075
  move_to_net_ee_or_free(mdev, e);
#line 1077
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1077
  if (tmp___9 != 0L) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1079
  return (ok);
}
}
#line 1082 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1084
  __mptr = (struct drbd_work  const  *)w;
#line 1084
  e = (struct drbd_epoch_entry *)__mptr;
#line 1087
  digest = 0;
#line 1088
  eq = 0;
#line 1090
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1090
  if (tmp___1 != 0L) {
#line 1091
    drbd_free_some_ee(mdev, e, 0);
#line 1092
    atomic_dec(& mdev->unacked_cnt);
#line 1092
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1092
    if (tmp___0 < 0) {
#line 1092
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1092
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1092, tmp);
    } else {

    }
#line 1093
    return (1);
  } else {

  }
#line 1096
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1096
  if (tmp___2 != 0) {
#line 1097
    drbd_rs_complete_io(mdev, e->sector);
#line 1098
    put_ldev(mdev);
  } else {

  }
#line 1101
  di = e->ldv_45894.digest;
#line 1103
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1103
  if (tmp___6 != 0L) {
#line 1107
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1108
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1108
      digest_size = (int )tmp___3;
#line 1109
      if (di->digest_size != digest_size) {
#line 1109
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1109);
      } else {

      }
#line 1110
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1112
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1113
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1114
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1114
      eq = tmp___4 == 0;
#line 1115
      kfree((void const   *)digest);
    } else {

    }
#line 1118
    if (eq != 0) {
#line 1119
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1119U);
#line 1121
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1122
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1124
      inc_rs_pending(mdev);
#line 1125
      e->ldv_45894.block_id = 0xffffffffffffffffULL;
#line 1126
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1127
      kfree((void const   *)di);
#line 1128
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1131
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1132
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1132
    if (tmp___5 != 0) {
#line 1133
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1136
  atomic_dec(& mdev->unacked_cnt);
#line 1136
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1136
  if (tmp___8 < 0) {
#line 1136
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1136, tmp___7);
  } else {

  }
#line 1137
  move_to_net_ee_or_free(mdev, e);
#line 1139
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1139
  if (tmp___9 != 0L) {
#line 1140
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1141
  return (ok);
}
}
#line 1144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1146
  __mptr = (struct drbd_work  const  *)w;
#line 1146
  e = (struct drbd_epoch_entry *)__mptr;
#line 1149
  ok = 1;
#line 1151
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1151
  if (tmp != 0L) {
#line 1152
    goto out;
  } else {

  }
#line 1154
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 0L);
#line 1154
  if (tmp___0 != 0L) {
#line 1155
    goto out;
  } else {

  }
#line 1157
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1157
  digest_size = (int )tmp___1;
#line 1159
  digest = kmalloc((size_t )digest_size, 16U);
#line 1160
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1161
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1162
    inc_rs_pending(mdev);
#line 1163
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1165
    if (ok == 0) {
#line 1166
      atomic_dec(& mdev->rs_pending_cnt);
#line 1166
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1166
      if (tmp___3 < 0) {
#line 1166
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1166
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1166, tmp___2);
      } else {

      }
    } else {

    }
#line 1167
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1171
  drbd_free_some_ee(mdev, e, 0);
#line 1173
  atomic_dec(& mdev->unacked_cnt);
#line 1173
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1173
  if (tmp___5 < 0) {
#line 1173
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1173, tmp___4);
  } else {

  }
#line 1175
  return (ok);
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1180
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1181
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1183
    mdev->ov_last_oos_start = sector;
#line 1184
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1186
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1186U);
#line 1187
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1188
  return;
}
}
#line 1190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1192
  __mptr = (struct drbd_work  const  *)w;
#line 1192
  e = (struct drbd_epoch_entry *)__mptr;
#line 1196
  eq = 0;
#line 1198
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1198
  if (tmp___1 != 0L) {
#line 1199
    drbd_free_some_ee(mdev, e, 0);
#line 1200
    atomic_dec(& mdev->unacked_cnt);
#line 1200
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
    if (tmp___0 < 0) {
#line 1200
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1200, tmp);
    } else {

    }
#line 1201
    return (1);
  } else {

  }
#line 1206
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1206
  if (tmp___2 != 0) {
#line 1207
    drbd_rs_complete_io(mdev, e->sector);
#line 1208
    put_ldev(mdev);
  } else {

  }
#line 1211
  di = e->ldv_45894.digest;
#line 1213
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1213
  if (tmp___6 != 0L) {
#line 1214
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1214
    digest_size = (int )tmp___3;
#line 1215
    digest = kmalloc((size_t )digest_size, 16U);
#line 1216
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1217
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1219
      if (di->digest_size != digest_size) {
#line 1219
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1219);
      } else {

      }
#line 1220
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1220
      eq = tmp___4 == 0;
#line 1221
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1224
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1225
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1225
    if (tmp___5 != 0) {
#line 1226
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1229
  atomic_dec(& mdev->unacked_cnt);
#line 1229
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1229
  if (tmp___8 < 0) {
#line 1229
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1229, tmp___7);
  } else {

  }
#line 1230
  if (eq == 0) {
#line 1231
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1233
    ov_oos_print(mdev);
  }
#line 1235
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1238
  drbd_free_some_ee(mdev, e, 0);
#line 1240
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1240
  if (mdev->ov_left == 0UL) {
#line 1241
    ov_oos_print(mdev);
#line 1242
    drbd_resync_finished(mdev);
  } else {

  }
#line 1245
  return (ok);
}
}
#line 1248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1250
  __mptr = (struct drbd_work  const  *)w;
#line 1250
  b = (struct drbd_wq_barrier *)__mptr;
#line 1251
  complete(& b->done);
#line 1252
  return (1);
}
}
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1257
  __mptr = (struct drbd_work  const  *)w;
#line 1257
  b = (struct drbd_tl_epoch *)__mptr;
#line 1258
  p = & mdev->data.sbuf.barrier;
#line 1259
  ok = 1;
#line 1266
  spin_lock_irq(& mdev->req_lock);
#line 1267
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_37735.conn <= 9) {
#line 1268
    cancel = 1;
  } else {

  }
#line 1269
  spin_unlock_irq(& mdev->req_lock);
#line 1270
  if (cancel != 0) {
#line 1271
    return (1);
  } else {

  }
#line 1273
  tmp = drbd_get_data_sock(mdev);
#line 1273
  if (tmp == 0) {
#line 1274
    return (0);
  } else {

  }
#line 1275
  p->barrier = b->br_number;
#line 1279
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1281
  drbd_put_data_sock(mdev);
#line 1283
  return (ok);
}
}
#line 1286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1288
  if (cancel != 0) {
#line 1289
    return (1);
  } else {

  }
#line 1290
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1290
  return (tmp);
}
}
#line 1299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1301
  __mptr = (struct drbd_work  const  *)w;
#line 1301
  req = (struct drbd_request *)__mptr;
#line 1304
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1304
  if (tmp != 0L) {
#line 1305
    req_mod(req, send_canceled);
#line 1306
    return (1);
  } else {

  }
#line 1309
  ok = drbd_send_dblock(mdev, req);
#line 1310
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1312
  return (ok);
}
}
#line 1321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1323
  __mptr = (struct drbd_work  const  *)w;
#line 1323
  req = (struct drbd_request *)__mptr;
#line 1326
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1326
  if (tmp != 0L) {
#line 1327
    req_mod(req, send_canceled);
#line 1328
    return (1);
  } else {

  }
#line 1331
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1334
  if (ok == 0) {
#line 1337
    if ((int )mdev->state.ldv_37735.conn > 9) {
#line 1338
      val.i = 0U;
#line 1338
      val.ldv_37735.conn = 5U;
#line 1338
      mask.i = 0U;
#line 1338
      mask.ldv_37735.conn = 31U;
#line 1338
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1340
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1342
  return (ok);
}
}
#line 1345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1347
  __mptr = (struct drbd_work  const  *)w;
#line 1347
  req = (struct drbd_request *)__mptr;
#line 1349
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1350
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1356
  drbd_req_make_private_bio(req, req->master_bio);
#line 1357
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1358
  generic_make_request(req->private_bio);
#line 1360
  return (1);
}
}
#line 1363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1365
  odev = mdev;
  ldv_48278: ;
#line 1368
  if (odev->sync_conf.after == -1) {
#line 1369
    return (1);
  } else {

  }
#line 1370
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1371
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1371
  if (_b != 0) {
#line 1371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1371);
  } else {

  }
#line 1371
  if (_b != 0) {
#line 1371
    return (1);
  } else {

  }
#line 1372
  if (((((int )odev->state.ldv_37735.conn > 15 && (int )odev->state.ldv_37735.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1998UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1998UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1998UL) != 0U) {
#line 1376
    return (0);
  } else {

  }
#line 1377
  goto ldv_48278;
}
}
#line 1386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1389
  rv = 0;
#line 1391
  i = 0;
#line 1391
  goto ldv_48289;
  ldv_48288: 
#line 1392
  odev = minor_to_mdev((unsigned int )i);
#line 1393
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1394
    goto ldv_48285;
  } else {

  }
#line 1395
  if ((unsigned int )*((unsigned short *)odev + 998UL) == 0U && (unsigned int )*((unsigned char *)odev + 1997UL) == 0U) {
#line 1396
    goto ldv_48285;
  } else {

  }
#line 1397
  tmp___0 = _drbd_may_sync_now(odev);
#line 1397
  if (tmp___0 == 0) {
#line 1398
    __ns.i = odev->state.i;
#line 1398
    __ns.ldv_37735.aftr_isp = 1U;
#line 1398
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1398
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_48285: 
#line 1391
  i = i + 1;
  ldv_48289: ;
#line 1391
  if ((unsigned int )i < minor_count) {
#line 1392
    goto ldv_48288;
  } else {

  }

#line 1402
  return (rv);
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1414
  rv = 0;
#line 1416
  i = 0;
#line 1416
  goto ldv_48301;
  ldv_48300: 
#line 1417
  odev = minor_to_mdev((unsigned int )i);
#line 1418
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1419
    goto ldv_48297;
  } else {

  }
#line 1420
  if ((unsigned int )*((unsigned short *)odev + 998UL) == 0U && (unsigned int )*((unsigned char *)odev + 1997UL) == 0U) {
#line 1421
    goto ldv_48297;
  } else {

  }
#line 1422
  if ((unsigned int )*((unsigned char *)odev + 1998UL) != 0U) {
#line 1423
    tmp___0 = _drbd_may_sync_now(odev);
#line 1423
    if (tmp___0 != 0) {
#line 1424
      __ns.i = odev->state.i;
#line 1424
      __ns.ldv_37735.aftr_isp = 0U;
#line 1424
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1424
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_48297: 
#line 1416
  i = i + 1;
  ldv_48301: ;
#line 1416
  if ((unsigned int )i < minor_count) {
#line 1417
    goto ldv_48300;
  } else {

  }

#line 1429
  return (rv);
}
}
#line 1432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1434
  _raw_write_lock_irq(& global_state_lock);
#line 1435
  _drbd_resume_next(mdev);
#line 1436
  _raw_write_unlock_irq(& global_state_lock);
#line 1437
  return;
}
}
#line 1439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1441
  _raw_write_lock_irq(& global_state_lock);
#line 1442
  _drbd_pause_after(mdev);
#line 1443
  _raw_write_unlock_irq(& global_state_lock);
#line 1444
  return;
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1450
  if (o_minor == -1) {
#line 1451
    return (101);
  } else {

  }
#line 1452
  if (o_minor < -1) {
#line 1453
    return (132);
  } else {
#line 1452
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1452
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1453
      return (132);
    } else {

    }
  }
#line 1456
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_48314: ;
#line 1458
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1459
    return (133);
  } else {

  }
#line 1462
  if (odev->sync_conf.after == -1) {
#line 1463
    return (101);
  } else {

  }
#line 1466
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1467
  goto ldv_48314;
}
}
#line 1470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1475
  _raw_write_lock_irq(& global_state_lock);
#line 1476
  retcode = sync_after_error(mdev, na);
#line 1477
  if (retcode == 101) {
#line 1478
    mdev->sync_conf.after = na;
    ldv_48321: 
#line 1480
    changes = _drbd_pause_after(mdev);
#line 1481
    tmp = _drbd_resume_next(mdev);
#line 1481
    changes = tmp | changes;
#line 1482
    if (changes != 0) {
#line 1483
      goto ldv_48321;
    } else {

    }

  } else {

  }
#line 1484
  _raw_write_unlock_irq(& global_state_lock);
#line 1485
  return (retcode);
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tw ;
  unsigned long tmp___1 ;
  unsigned long now ;
  int i ;
  char const   *tmp___2 ;

  {
#line 1501
  if ((int )mdev->state.ldv_37735.conn > 15) {
#line 1502
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1503
    return;
  } else {

  }
#line 1507
  drbd_rs_cancel_all(mdev);
#line 1509
  if ((unsigned int )side == 17U) {
#line 1513
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1514
    r = (r >> 8) & 255;
#line 1515
    if (r > 0) {
#line 1516
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1518
      val.i = 0U;
#line 1518
      val.ldv_37735.conn = 1U;
#line 1518
      mask.i = 0U;
#line 1518
      mask.ldv_37735.conn = 31U;
#line 1518
      drbd_force_state(mdev, mask, val);
#line 1519
      return;
    } else {

    }
  } else {

  }
#line 1523
  drbd_state_lock(mdev);
#line 1525
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1525
  if (tmp == 0) {
#line 1526
    drbd_state_unlock(mdev);
#line 1527
    return;
  } else {

  }
#line 1530
  if ((unsigned int )side == 17U) {
#line 1531
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1535
    get_random_bytes((void *)(& uuid), 8);
#line 1536
    drbd_uuid_set(mdev, 1, uuid);
#line 1537
    drbd_send_sync_uuid(mdev, uuid);
#line 1539
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 16U) {
#line 1539
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1539);
    } else {

    }
  }
#line 1542
  _raw_write_lock_irq(& global_state_lock);
#line 1543
  ns = mdev->state;
#line 1545
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1545
  ns.ldv_37735.aftr_isp = tmp___0 == 0;
#line 1547
  ns.ldv_37735.conn = (unsigned char )side;
#line 1549
  if ((unsigned int )side == 17U) {
#line 1550
    ns.ldv_37735.disk = 4U;
  } else {
#line 1552
    ns.ldv_37735.pdsk = 4U;
  }
#line 1554
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1555
  ns = mdev->state;
#line 1557
  if ((int )ns.ldv_37735.conn <= 9) {
#line 1558
    r = 0;
  } else {

  }
#line 1560
  if (r == 1) {
#line 1561
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1561
    tw = tmp___1;
#line 1562
    now = jiffies;
#line 1565
    mdev->rs_failed = 0UL;
#line 1566
    mdev->rs_paused = 0UL;
#line 1567
    mdev->rs_same_csum = 0UL;
#line 1568
    mdev->rs_last_events = 0;
#line 1569
    mdev->rs_last_sect_ev = 0;
#line 1570
    mdev->rs_total = tw;
#line 1571
    mdev->rs_start = now;
#line 1572
    i = 0;
#line 1572
    goto ldv_48338;
    ldv_48337: 
#line 1573
    mdev->rs_mark_left[i] = tw;
#line 1574
    mdev->rs_mark_time[i] = now;
#line 1572
    i = i + 1;
    ldv_48338: ;
#line 1572
    if (i <= 7) {
#line 1573
      goto ldv_48337;
    } else {

    }
#line 1576
    _drbd_pause_after(mdev);
  } else {

  }
#line 1578
  _raw_write_unlock_irq(& global_state_lock);
#line 1579
  put_ldev(mdev);
#line 1581
  if (r == 1) {
#line 1582
    tmp___2 = drbd_conn_str((enum drbd_conns )ns.ldv_37735.conn);
#line 1582
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___2, mdev->rs_total << 2, mdev->rs_total);
#line 1587
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1598
      if ((unsigned int )side == 16U) {
#line 1599
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1602
      drbd_resync_finished(mdev);
    } else {

    }
#line 1605
    atomic_set(& mdev->rs_sect_in, 0);
#line 1606
    atomic_set(& mdev->rs_sect_ev, 0);
#line 1607
    mdev->rs_in_flight = 0;
#line 1608
    mdev->rs_planed = 0;
#line 1609
    spin_lock(& mdev->peer_seq_lock);
#line 1610
    fifo_set(& mdev->rs_plan_s, 0);
#line 1611
    spin_unlock(& mdev->peer_seq_lock);
#line 1616
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1617
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1619
    drbd_md_sync(mdev);
  } else {

  }
#line 1621
  drbd_state_unlock(mdev);
#line 1622
  return;
}
}
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1626
  mdev = thi->mdev;
#line 1627
  w = 0;
#line 1628
  work_list.next = & work_list;
#line 1628
  work_list.prev = & work_list;
#line 1629
  intr = 0;
#line 1631
  tmp = mdev_to_minor(mdev);
#line 1631
  tmp___0 = get_current();
#line 1631
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1633
  goto ldv_48351;
  ldv_48361: 
#line 1634
  drbd_thread_current_set_cpu(mdev);
#line 1636
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1636
  if (tmp___1 != 0) {
#line 1637
    ldv_mutex_lock_45(& mdev->data.mutex);
#line 1638
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1639
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1640
    ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1642
    intr = down_interruptible(& mdev->data.work.s);
#line 1644
    ldv_mutex_lock_47(& mdev->data.mutex);
#line 1645
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1646
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1647
    ldv_mutex_unlock_48(& mdev->data.mutex);
  } else {

  }
#line 1650
  if (intr != 0) {
#line 1651
    if (intr != -4) {
#line 1651
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1651);
    } else {

    }
#line 1652
    tmp___2 = get_current();
#line 1652
    flush_signals(tmp___2);
#line 1653
    tmp___3 = get_t_state(thi);
#line 1653
    _b = (unsigned int )tmp___3 == 1U;
#line 1653
    if (_b != 0) {
#line 1653
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1653);
    } else {

    }
#line 1653
    if (_b != 0) {
#line 1654
      goto ldv_48351;
    } else {

    }
#line 1655
    goto ldv_48352;
  } else {

  }
#line 1658
  tmp___4 = get_t_state(thi);
#line 1658
  if ((unsigned int )tmp___4 != 1U) {
#line 1659
    goto ldv_48352;
  } else {

  }
#line 1664
  w = 0;
#line 1665
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1666
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1666
  _b___0 = tmp___5 != 0;
#line 1666
  if (_b___0 != 0) {
#line 1666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1666);
  } else {

  }
#line 1666
  if (_b___0 != 0) {
#line 1678
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1679
    goto ldv_48351;
  } else {

  }
#line 1681
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1681
  w = (struct drbd_work *)__mptr;
#line 1682
  list_del_init(& w->list);
#line 1683
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1685
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_37735.conn <= 9);
#line 1685
  if (tmp___6 == 0) {
#line 1687
    if ((int )mdev->state.ldv_37735.conn > 9) {
#line 1689
      val.i = 0U;
#line 1689
      val.ldv_37735.conn = 5U;
#line 1689
      mask.i = 0U;
#line 1689
      mask.ldv_37735.conn = 31U;
#line 1689
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_48351: 
#line 1633
  tmp___7 = get_t_state(thi);
#line 1633
  if ((unsigned int )tmp___7 == 1U) {
#line 1634
    goto ldv_48361;
  } else {

  }
  ldv_48352: 
#line 1692
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1692
  if (tmp___8 == 0) {
#line 1692
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1692);
  } else {

  }
#line 1693
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1693
  if (tmp___9 == 0) {
#line 1693
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1693);
  } else {

  }
#line 1695
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1696
  i = 0;
#line 1697
  goto ldv_48368;
  ldv_48367: 
#line 1698
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1699
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1701
  goto ldv_48365;
  ldv_48364: 
#line 1702
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1702
  w = (struct drbd_work *)__mptr___0;
#line 1703
  list_del_init(& w->list);
#line 1704
  (*(w->cb))(mdev, w, 1);
#line 1705
  i = i + 1;
  ldv_48365: 
#line 1701
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1701
  if (tmp___10 == 0) {
#line 1702
    goto ldv_48364;
  } else {

  }
#line 1708
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_48368: 
#line 1697
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1697
  if (tmp___11 == 0) {
#line 1698
    goto ldv_48367;
  } else {

  }
#line 1710
  sema_init(& mdev->data.work.s, 0);
#line 1716
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1718
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 0U || (unsigned int )*((unsigned short *)mdev + 998UL) != 0U) {
#line 1718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1718);
  } else {

  }
#line 1721
  drbd_thread_stop(& mdev->receiver);
#line 1722
  drbd_mdev_cleanup(mdev);
#line 1724
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1726
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1727
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1728
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1730
  return (0);
}
}
#line 1733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1738
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1740
  mutex_lock(ldv_func_arg1);
#line 1741
  return;
}
}
#line 1743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1748
  tmp = mutex_trylock(ldv_func_arg1);
#line 1748
  ldv_func_res = tmp;
#line 1750
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1750
  return (tmp___0);
#line 1752
  return (ldv_func_res);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1760
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1762
  mutex_unlock(ldv_func_arg1);
#line 1763
  return;
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1770
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1772
  mutex_lock(ldv_func_arg1);
#line 1773
  return;
}
}
#line 1775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1780
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1782
  mutex_unlock(ldv_func_arg1);
#line 1783
  return;
}
}
#line 1785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1790
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1792
  mutex_unlock(ldv_func_arg1);
#line 1793
  return;
}
}
#line 1795 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1800
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1802
  mutex_lock(ldv_func_arg1);
#line 1803
  return;
}
}
#line 1805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1810
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1812
  mutex_unlock(ldv_func_arg1);
#line 1813
  return;
}
}
#line 1815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1820
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1822
  mutex_lock(ldv_func_arg1);
#line 1823
  return;
}
}
#line 1825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1830
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1832
  mutex_unlock(ldv_func_arg1);
#line 1833
  return;
}
}
#line 1835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1840
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1842
  mutex_lock(ldv_func_arg1);
#line 1843
  return;
}
}
#line 1845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1850
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1852
  mutex_unlock(ldv_func_arg1);
#line 1853
  return;
}
}
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1860
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1862
  mutex_lock(ldv_func_arg1);
#line 1863
  return;
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1870
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1872
  mutex_unlock(ldv_func_arg1);
#line 1873
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 142 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 574 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 576
  h->next = 0;
#line 577
  h->pprev = 0;
#line 578
  return;
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 590 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 592
  next = n->next;
#line 593
  pprev = n->pprev;
#line 594
  *pprev = next;
#line 595
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 596
    next->pprev = pprev;
  } else {

  }
#line 597
  return;
}
}
#line 606 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 608
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 608
  if (tmp == 0) {
#line 609
    __hlist_del(n);
#line 610
    INIT_HLIST_NODE(n);
  } else {

  }
#line 612
  return;
}
}
#line 614 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 616
  first = h->first;
#line 617
  n->next = first;
#line 618
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 619
    first->pprev = & n->next;
  } else {

  }
#line 620
  h->first = n;
#line 621
  n->pprev = & h->first;
#line 622
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) ;
#line 52
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6079: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 280 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 351 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 364
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 237 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 239
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 241
extern void sock_release(struct socket * ) ;
#line 244
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 431 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18199: ;
#line 63
    goto ldv_18199;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18200: ;
#line 65
    goto ldv_18200;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18201: ;
#line 66
    goto ldv_18201;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 300 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 2362 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2364
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2364
  return (tmp);
}
}
#line 2388 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2390
  tmp = test_tsk_thread_flag(p, 2);
#line 2390
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2390
  return ((int )tmp___0);
}
}
#line 293 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 437 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 439
  disk->part0.nr_sects = size;
#line 440
  return;
}
}
#line 48 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 50
  __might_sleep("include/linux/highmem.h", 50, 0);
#line 51
  tmp = lowmem_page_address(page);
#line 51
  return (tmp);
}
}
#line 54 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 56
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 582 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 584
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 597
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 607 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 609
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1166
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1170
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1176
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1186
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1188
void tl_clear(struct drbd_conf *mdev ) ;
#line 1192
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1195
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1196
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1199
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1201
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1210
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1212
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1213
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1217
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1219
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1236
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1238
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1248
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1265
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1266
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1267
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1455
mempool_t *drbd_ee_mempool ;
#line 1457
struct page *drbd_pp_pool ;
#line 1458
spinlock_t drbd_pp_lock ;
#line 1459
int drbd_pp_vacant ;
#line 1480
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1482
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1483
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1484
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1485
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1488
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1542
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1552
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1554
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1558
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1559
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1591
  val = 1;
#line 1592
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1594
  return;
}
}
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1598
  val = 2;
#line 1599
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1601
  return;
}
}
#line 1603
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1615
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1641
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1727 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1729
  page = e->pages;
#line 1730
  goto ldv_47795;
  ldv_47794: 
#line 1731
  tmp = page_count(page);
#line 1731
  if (tmp > 1) {
#line 1732
    return (1);
  } else {

  }
#line 1730
  page = page_chain_next(page);
  ldv_47795: ;
#line 1730
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1730
    tmp___0 = page_chain_next(page);
#line 1730
    __builtin_prefetch((void const   *)tmp___0);
#line 1730
    if (1 != 0) {
#line 1731
      goto ldv_47794;
    } else {
#line 1733
      goto ldv_47796;
    }
  } else {

  }
  ldv_47796: ;
#line 1734
  return (0);
}
}
#line 1773 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1777
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1777
  return (tmp);
}
}
#line 1831 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1833
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1836
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1839
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1877
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1881
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1881
  if (tmp___1 != 0UL) {
#line 1881
    __min1 = 34359738368UL;
#line 1881
    tmp___0 = drbd_md_first_sector(bdev);
#line 1881
    __min2 = tmp___0;
#line 1881
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1881
    s = 0UL;
  }
#line 1884
  goto ldv_47867;
  case -2: 
#line 1886
  __min1___0 = 34359738368UL;
#line 1886
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1886
  __min2___0 = tmp___2;
#line 1886
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1889
  __min1___1 = s;
#line 1889
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1889
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1892
  goto ldv_47867;
  default: 
#line 1894
  __min1___2 = 8587575296UL;
#line 1894
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1894
  __min2___2 = tmp___3;
#line 1894
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47867: ;
#line 1897
  return (s);
}
}
#line 1931 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1934
  tmp = spinlock_check(& q->q_lock);
#line 1934
  flags = _raw_spin_lock_irqsave(tmp);
#line 1935
  list_add(& w->list, & q->q);
#line 1936
  up(& q->s);
#line 1938
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1939
  return;
}
}
#line 1971 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1974
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1974
  return (tmp);
}
}
#line 1977 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1980
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1980
  return (tmp);
}
}
#line 2062 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2064
  atomic_inc(& mdev->unacked_cnt);
#line 2065
  return;
}
}
#line 2078 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2080
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2080
  if (tmp != 0) {
#line 2081
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2082
  return;
}
}
#line 2090 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2094
  atomic_inc(& mdev->net_cnt);
#line 2095
  have_net_conf = (int )mdev->state.ldv_37735.conn > 1;
#line 2096
  if (have_net_conf == 0) {
#line 2097
    put_net_conf(mdev);
  } else {

  }
#line 2098
  return (have_net_conf);
}
}
#line 2336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2338
  mdev->ed_uuid = val;
#line 2339
  return;
}
}
#line 2341 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2348
  return ((int )a - (int )b);
}
}
#line 2357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2360
  spin_lock(& mdev->peer_seq_lock);
#line 2361
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2361
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2362
  mdev->peer_seq = m;
#line 2363
  spin_unlock(& mdev->peer_seq_lock);
#line 2364
  if (m == new_seq) {
#line 2365
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2366
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_48123: ;
#line 227
    goto ldv_48123;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_48128: ;
#line 236
    goto ldv_48128;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 250 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 253
  tmp = ar_hash_slot(mdev, sector);
#line 253
  slot = tmp;
#line 257
  n = slot->first;
#line 257
  goto ldv_48146;
  ldv_48145: ;
#line 258
  if ((unsigned long )req == (unsigned long )id) {
#line 259
    if (req->sector != sector) {
#line 259
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              259);
    } else {

    }
#line 260
    return (req);
  } else {

  }
#line 257
  n = n->next;
  ldv_48146: ;
#line 257
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 257
    __builtin_prefetch((void const   *)n->next);
#line 257
    if (1 != 0) {
#line 257
      __mptr = (struct hlist_node  const  *)n;
#line 257
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 257
      if (1 != 0) {
#line 258
        goto ldv_48145;
      } else {
#line 260
        goto ldv_48147;
      }
    } else {
#line 260
      goto ldv_48147;
    }
  } else {

  }
  ldv_48147: ;
#line 263
  return (0);
}
}
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 307
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_48199: ;
#line 162
  goto ldv_48199;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 114
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 116
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 117
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 136
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 136
  if (tmp___0 != 0L) {
#line 136
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (136), "i" (12UL));
    ldv_48279: ;
#line 136
    goto ldv_48279;
  } else {

  }
#line 137
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 137
  if (tmp___1 != 0L) {
#line 137
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (137), "i" (12UL));
    ldv_48280: ;
#line 137
    goto ldv_48280;
  } else {

  }
#line 139
  page = *head;
#line 141
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 142
    return (0);
  } else {

  }
#line 144
  goto ldv_48283;
  ldv_48282: 
#line 145
  tmp = page_chain_next(page);
#line 146
  n = n - 1;
#line 146
  if (n == 0) {
#line 147
    goto ldv_48281;
  } else {

  }
#line 148
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 151
  page = tmp;
  ldv_48283: ;
#line 144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    goto ldv_48282;
  } else {

  }
  ldv_48281: 
#line 155
  page->ldv_13170.ldv_13167.private = 0UL;
#line 157
  page = *head;
#line 158
  *head = tmp;
#line 159
  return (page);
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 168
  i = 1;
#line 169
  goto ldv_48291;
  ldv_48290: 
#line 170
  i = i + 1;
#line 170
  page = tmp;
  ldv_48291: 
#line 169
  tmp = page_chain_next(page);
#line 169
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 170
    goto ldv_48290;
  } else {

  }

#line 171
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 172
    *len = i;
  } else {

  }
#line 173
  return (page);
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 179
  i = 0;
#line 180
  goto ldv_48300;
  ldv_48299: 
#line 181
  put_page(page);
#line 182
  i = i + 1;
#line 180
  page = tmp;
  ldv_48300: ;
#line 180
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 180
    tmp = page_chain_next(page);
#line 180
    if (1 != 0) {
#line 181
      goto ldv_48299;
    } else {
#line 183
      goto ldv_48301;
    }
  } else {

  }
  ldv_48301: ;
#line 184
  return (i);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 192
  tmp = page_chain_tail(chain_first, 0);
#line 193
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 193
  if (tmp___0 != 0L) {
#line 193
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (193), "i" (12UL));
    ldv_48308: ;
#line 193
    goto ldv_48308;
  } else {

  }
#line 197
  chain_last->ldv_13170.ldv_13167.private = (unsigned long )*head;
#line 198
  *head = chain_first;
#line 199
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 203
  page = 0;
#line 204
  tmp = 0;
#line 205
  i = 0;
#line 209
  if (drbd_pp_vacant >= number) {
#line 210
    spin_lock(& drbd_pp_lock);
#line 211
    page = page_chain_del(& drbd_pp_pool, number);
#line 212
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 213
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 214
    spin_unlock(& drbd_pp_lock);
#line 215
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 216
      return (page);
    } else {

    }
  } else {

  }
#line 222
  i = 0;
#line 222
  goto ldv_48318;
  ldv_48317: 
#line 223
  tmp = alloc_pages(514U, 0U);
#line 224
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 225
    goto ldv_48316;
  } else {

  }
#line 226
  tmp->ldv_13170.ldv_13167.private = (unsigned long )page;
#line 227
  page = tmp;
#line 222
  i = i + 1;
  ldv_48318: ;
#line 222
  if (i < number) {
#line 223
    goto ldv_48317;
  } else {

  }
  ldv_48316: ;
#line 230
  if (i == number) {
#line 231
    return (page);
  } else {

  }
#line 236
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 237
    tmp = page_chain_tail(page, 0);
#line 238
    spin_lock(& drbd_pp_lock);
#line 239
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 240
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 241
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 243
  return (0);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 256
  le = mdev->net_ee.next;
#line 256
  tle = le->next;
#line 256
  goto ldv_48330;
  ldv_48329: 
#line 257
  __mptr = (struct list_head  const  *)le;
#line 257
  e = (struct drbd_epoch_entry *)__mptr;
#line 258
  tmp = drbd_ee_has_active_page___0(e);
#line 258
  if (tmp != 0) {
#line 259
    goto ldv_48328;
  } else {

  }
#line 260
  list_move(le, to_be_freed);
#line 256
  le = tle;
#line 256
  tle = le->next;
  ldv_48330: ;
#line 256
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 257
    goto ldv_48329;
  } else {

  }
  ldv_48328: ;
#line 261
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 266
  reclaimed.next = & reclaimed;
#line 266
  reclaimed.prev = & reclaimed;
#line 269
  spin_lock_irq(& mdev->req_lock);
#line 270
  reclaim_net_ee(mdev, & reclaimed);
#line 271
  spin_unlock_irq(& mdev->req_lock);
#line 273
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 273
  e = (struct drbd_epoch_entry *)__mptr;
#line 273
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 273
  goto ldv_48344;
  ldv_48343: 
#line 274
  drbd_free_some_ee(mdev, e, 1);
#line 273
  e = t;
#line 273
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48344: ;
#line 273
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 274
    goto ldv_48343;
  } else {

  }

#line 278
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 291
  page = 0;
#line 292
  tmp = get_current();
#line 292
  wait.flags = 0U;
#line 292
  wait.private = (void *)tmp;
#line 292
  wait.func = & autoremove_wake_function;
#line 292
  wait.task_list.next = & wait.task_list;
#line 292
  wait.task_list.prev = & wait.task_list;
#line 296
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 296
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 297
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 299
  goto ldv_48355;
  ldv_48354: 
#line 300
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 302
  drbd_kick_lo_and_reclaim_net(mdev);
#line 304
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 306
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 307
      goto ldv_48353;
    } else {

    }
  } else {

  }
#line 310
  if (! retry) {
#line 311
    goto ldv_48353;
  } else {

  }
#line 313
  tmp___2 = get_current();
#line 313
  tmp___3 = signal_pending(tmp___2);
#line 313
  if (tmp___3 != 0) {
#line 314
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 315
    goto ldv_48353;
  } else {

  }
#line 318
  schedule();
  ldv_48355: ;
#line 299
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 300
    goto ldv_48354;
  } else {

  }
  ldv_48353: 
#line 320
  finish_wait(& drbd_pp_wait, & wait);
#line 322
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 323
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 324
  return (page);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 333
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 336
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 337
    i = page_chain_free(page);
  } else {
#line 340
    tmp = page_chain_tail(page, & i);
#line 341
    spin_lock(& drbd_pp_lock);
#line 342
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 343
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 344
    spin_unlock(& drbd_pp_lock);
  }
#line 346
  i = atomic_sub_return(i, a);
#line 347
  if (i < 0) {
#line 348
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 350
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 351
  return;
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 376
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 378
  tmp = drbd_insert_fault(mdev, 8U);
#line 378
  if (tmp != 0) {
#line 379
    return (0);
  } else {

  }
#line 381
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 381
  e = (struct drbd_epoch_entry *)tmp___0;
#line 382
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 383
    if ((gfp_mask & 512U) == 0U) {
#line 384
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 385
    return (0);
  } else {

  }
#line 388
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 389
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 390
    goto fail;
  } else {

  }
#line 392
  INIT_HLIST_NODE(& e->colision);
#line 393
  e->epoch = 0;
#line 394
  e->mdev = mdev;
#line 395
  e->pages = page;
#line 396
  atomic_set(& e->pending_bios, 0);
#line 397
  e->size = data_size;
#line 398
  e->flags = 0UL;
#line 399
  e->sector = sector;
#line 400
  e->ldv_45894.block_id = id;
#line 402
  return (e);
  fail: 
#line 405
  mempool_free((void *)e, drbd_ee_mempool);
#line 406
  return (0);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 411
  if ((e->flags & 16UL) != 0UL) {
#line 412
    kfree((void const   *)e->ldv_45894.digest);
  } else {

  }
#line 413
  drbd_pp_free(mdev, e->pages, is_net);
#line 414
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 414
  if (tmp != 0) {
#line 414
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            414);
  } else {

  }
#line 415
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 415
  if (tmp___0 == 0) {
#line 415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            415);
  } else {

  }
#line 416
  mempool_free((void *)e, drbd_ee_mempool);
#line 417
  return;
}
}
#line 419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 421
  work_list.next = & work_list;
#line 421
  work_list.prev = & work_list;
#line 423
  count = 0;
#line 424
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 426
  spin_lock_irq(& mdev->req_lock);
#line 427
  list_splice_init(list, & work_list);
#line 428
  spin_unlock_irq(& mdev->req_lock);
#line 430
  __mptr = (struct list_head  const  *)work_list.next;
#line 430
  e = (struct drbd_epoch_entry *)__mptr;
#line 430
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 430
  goto ldv_48396;
  ldv_48395: 
#line 431
  drbd_free_some_ee(mdev, e, is_net);
#line 432
  count = count + 1;
#line 430
  e = t;
#line 430
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48396: ;
#line 430
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 431
    goto ldv_48395;
  } else {

  }

#line 434
  return (count);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 449
  work_list.next = & work_list;
#line 449
  work_list.prev = & work_list;
#line 450
  reclaimed.next = & reclaimed;
#line 450
  reclaimed.prev = & reclaimed;
#line 452
  ok = (int )mdev->state.ldv_37735.conn > 8;
#line 454
  spin_lock_irq(& mdev->req_lock);
#line 455
  reclaim_net_ee(mdev, & reclaimed);
#line 456
  list_splice_init(& mdev->done_ee, & work_list);
#line 457
  spin_unlock_irq(& mdev->req_lock);
#line 459
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 459
  e = (struct drbd_epoch_entry *)__mptr;
#line 459
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 459
  goto ldv_48413;
  ldv_48412: 
#line 460
  drbd_free_some_ee(mdev, e, 1);
#line 459
  e = t;
#line 459
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48413: ;
#line 459
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 460
    goto ldv_48412;
  } else {

  }
#line 466
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 466
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 466
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 466
  goto ldv_48422;
  ldv_48421: 
#line 468
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 468
  ok = tmp != 0 && ok != 0;
#line 469
  drbd_free_some_ee(mdev, e, 0);
#line 466
  e = t;
#line 466
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_48422: ;
#line 466
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 467
    goto ldv_48421;
  } else {

  }
#line 471
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 473
  return (ok);
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 478
  tmp = get_current();
#line 478
  wait.flags = 0U;
#line 478
  wait.private = (void *)tmp;
#line 478
  wait.func = & autoremove_wake_function;
#line 478
  wait.task_list.next = & wait.task_list;
#line 478
  wait.task_list.prev = & wait.task_list;
#line 482
  goto ldv_48430;
  ldv_48429: 
#line 483
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 484
  spin_unlock_irq(& mdev->req_lock);
#line 485
  io_schedule();
#line 486
  finish_wait(& mdev->ee_wait, & wait);
#line 487
  spin_lock_irq(& mdev->req_lock);
  ldv_48430: 
#line 482
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 482
  if (tmp___0 == 0) {
#line 483
    goto ldv_48429;
  } else {

  }

#line 487
  return;
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 493
  spin_lock_irq(& mdev->req_lock);
#line 494
  _drbd_wait_ee_list_empty(mdev, head);
#line 495
  spin_unlock_irq(& mdev->req_lock);
#line 496
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 503
  sk = sock->sk;
#line 504
  err = 0;
#line 506
  *what = "listen";
#line 507
  err = (*((sock->ops)->listen))(sock, 5);
#line 508
  if (err < 0) {
#line 509
    goto out;
  } else {

  }
#line 511
  *what = "sock_create_lite";
#line 512
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 514
  if (err < 0) {
#line 515
    goto out;
  } else {

  }
#line 517
  *what = "accept";
#line 518
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 519
  if (err < 0) {
#line 520
    sock_release(*newsock);
#line 521
    *newsock = 0;
#line 522
    goto out;
  } else {

  }
#line 524
  (*newsock)->ops = sock->ops;
  out: ;
#line 527
  return (err);
}
}
#line 530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 534
  iov.iov_base = buf;
#line 534
  iov.iov_len = size;
#line 538
  msg.msg_name = 0;
#line 538
  msg.msg_namelen = 0;
#line 538
  msg.msg_iov = (struct iovec *)(& iov);
#line 538
  msg.msg_iovlen = 1UL;
#line 538
  msg.msg_control = 0;
#line 538
  msg.msg_controllen = 0UL;
#line 538
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 545
  tmp = current_thread_info___0();
#line 545
  oldfs = tmp->addr_limit;
#line 546
  tmp___0 = current_thread_info___0();
#line 546
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 546
  tmp___0->addr_limit = __constr_expr_0;
#line 547
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 548
  tmp___1 = current_thread_info___0();
#line 548
  tmp___1->addr_limit = oldfs;
#line 550
  return (rv);
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 556
  iov.iov_base = buf;
#line 556
  iov.iov_len = size;
#line 560
  msg.msg_name = 0;
#line 560
  msg.msg_namelen = 0;
#line 560
  msg.msg_iov = (struct iovec *)(& iov);
#line 560
  msg.msg_iovlen = 1UL;
#line 560
  msg.msg_control = 0;
#line 560
  msg.msg_controllen = 0UL;
#line 560
  msg.msg_flags = 16640U;
#line 567
  tmp = current_thread_info___0();
#line 567
  oldfs = tmp->addr_limit;
#line 568
  tmp___0 = current_thread_info___0();
#line 568
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 568
  tmp___0->addr_limit = __constr_expr_0;
  ldv_48468: 
#line 571
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 572
  if ((size_t )rv == size) {
#line 573
    goto ldv_48467;
  } else {

  }
#line 580
  if (rv < 0) {
#line 581
    if (rv == -104) {
#line 582
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 583
    if (rv != -512) {
#line 584
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 585
    goto ldv_48467;
  } else
#line 586
  if (rv == 0) {
#line 587
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 588
    goto ldv_48467;
  } else {
#line 594
    goto ldv_48467;
  }
#line 596
  goto ldv_48468;
  ldv_48467: 
#line 598
  tmp___1 = current_thread_info___0();
#line 598
  tmp___1->addr_limit = oldfs;
#line 600
  if ((size_t )rv != size) {
#line 601
    val.i = 0U;
#line 601
    val.ldv_37735.conn = 4U;
#line 601
    mask.i = 0U;
#line 601
    mask.ldv_37735.conn = 31U;
#line 601
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 603
  return (rv);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 615
  if (snd != 0U) {
#line 616
    (sock->sk)->sk_sndbuf = (int )snd;
#line 617
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 619
  if (rcv != 0U) {
#line 620
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 621
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 623
  return;
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 631
  disconnect_on_error = 1;
#line 633
  tmp = get_net_conf(mdev);
#line 633
  if (tmp == 0) {
#line 634
    return (0);
  } else {

  }
#line 636
  what = "sock_create_kern";
#line 637
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 639
  if (err < 0) {
#line 640
    sock = 0;
#line 641
    goto out;
  } else {

  }
#line 644
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 644
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 644
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 646
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 656
  __min1 = (mdev->net_conf)->my_addr_len;
#line 656
  __min2 = 28;
#line 656
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 656
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 658
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 659
    src_in6.sin6_port = 0U;
  } else {
#line 661
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 663
  what = "bind before connect";
#line 664
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 667
  if (err < 0) {
#line 668
    goto out;
  } else {

  }
#line 672
  disconnect_on_error = 0;
#line 673
  what = "connect";
#line 674
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 679
  if (err < 0) {
#line 680
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 681
      sock_release(sock);
#line 682
      sock = 0;
    } else {

    }
#line 684
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 691
    disconnect_on_error = 0;
#line 692
    goto ldv_48505;
    default: 
#line 694
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_48505: ;
#line 696
    if (disconnect_on_error != 0) {
#line 697
      val.i = 0U;
#line 697
      val.ldv_37735.conn = 1U;
#line 697
      mask.i = 0U;
#line 697
      mask.ldv_37735.conn = 31U;
#line 697
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 699
  put_net_conf(mdev);
#line 700
  return (sock);
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 706
  s_estab = 0;
#line 709
  tmp = get_net_conf(mdev);
#line 709
  if (tmp == 0) {
#line 710
    return (0);
  } else {

  }
#line 712
  what = "sock_create_kern";
#line 713
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 715
  if (err != 0) {
#line 716
    s_listen = 0;
#line 717
    goto out;
  } else {

  }
#line 720
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 721
  tmp___0 = random32();
#line 721
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 723
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 724
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 725
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 726
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 729
  what = "bind before listen";
#line 730
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 733
  if (err < 0) {
#line 734
    goto out;
  } else {

  }
#line 736
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 739
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 740
    sock_release(s_listen);
  } else {

  }
#line 741
  if (err < 0) {
#line 742
    if ((err != -11 && err != -4) && err != -512) {
#line 743
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 744
      val.i = 0U;
#line 744
      val.ldv_37735.conn = 1U;
#line 744
      mask.i = 0U;
#line 744
      mask.ldv_37735.conn = 31U;
#line 744
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 747
  put_net_conf(mdev);
#line 749
  return (s_estab);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 755
  h = & mdev->data.sbuf.header.h80;
#line 757
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 757
  return (tmp);
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 762
  h = & mdev->data.rbuf.header.h80;
#line 765
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 767
  if (rr == 8 && h->magic == 1728214147U) {
#line 768
    tmp = __fswab16((int )h->command);
#line 768
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 770
  return (65535);
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 783
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 784
    return (0);
  } else {

  }
#line 786
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 788
  if (rr > 0 || rr == -11) {
#line 789
    return (1);
  } else {
#line 791
    sock_release(*sock);
#line 792
    *sock = 0;
#line 793
    return (0);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  enum drbd_packets tmp___3 ;
  u32 tmp___4 ;
  struct task_struct *tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  int tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 810
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            810);
  } else {

  }
#line 812
  val.i = 0U;
#line 812
  val.ldv_37735.conn = 8U;
#line 812
  mask.i = 0U;
#line 812
  mask.ldv_37735.conn = 31U;
#line 812
  tmp = drbd_request_state(mdev, mask, val);
#line 812
  if (tmp <= 0) {
#line 813
    return (-2);
  } else {

  }
#line 815
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 817
  sock = 0;
#line 818
  msock = 0;
  ldv_48564: 
#line 821
  try = 0;
  ldv_48556: 
#line 823
  s = drbd_try_connect(mdev);
#line 824
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 825
    goto ldv_48555;
  } else {
#line 824
    try = try + 1;
#line 824
    if (try > 2) {
#line 825
      goto ldv_48555;
    } else {

    }
  }
#line 827
  tmp___0 = get_current();
#line 827
  tmp___0->state = 1L;
#line 828
  schedule_timeout(25L);
#line 829
  goto ldv_48556;
  ldv_48555: ;
#line 831
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 832
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 833
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 834
      sock = s;
#line 835
      s = 0;
    } else
#line 836
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 837
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 838
      msock = s;
#line 839
      s = 0;
    } else {
#line 841
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 842
      goto out_release_sockets;
    }
  } else {

  }
#line 846
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 847
    tmp___1 = get_current();
#line 847
    tmp___1->state = 1L;
#line 848
    schedule_timeout(25L);
#line 849
    ok = drbd_socket_okay(mdev, & sock);
#line 850
    tmp___2 = drbd_socket_okay(mdev, & msock);
#line 850
    ok = tmp___2 != 0 && ok != 0;
#line 851
    if (ok != 0) {
#line 852
      goto ldv_48558;
    } else {

    }
  } else {

  }
  retry: 
#line 856
  s = drbd_wait_for_connect(mdev);
#line 857
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 858
    tmp___3 = drbd_recv_fp(mdev, s);
#line 858
    try = (int )tmp___3;
#line 859
    drbd_socket_okay(mdev, & sock);
#line 860
    drbd_socket_okay(mdev, & msock);
#line 861
    switch (try) {
    case 65522: ;
#line 863
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 864
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 865
      sock_release(sock);
    } else {

    }
#line 867
    sock = s;
#line 868
    goto ldv_48561;
    case 65521: ;
#line 870
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 871
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 872
      sock_release(msock);
    } else {

    }
#line 874
    msock = s;
#line 875
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 876
    goto ldv_48561;
    default: 
#line 878
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 879
    sock_release(s);
#line 880
    tmp___4 = random32();
#line 880
    if ((int )tmp___4 & 1) {
#line 881
      goto retry;
    } else {

    }
    }
    ldv_48561: ;
  } else {

  }
#line 885
  if ((int )mdev->state.ldv_37735.conn <= 1) {
#line 886
    goto out_release_sockets;
  } else {

  }
#line 887
  tmp___7 = get_current();
#line 887
  tmp___8 = signal_pending(tmp___7);
#line 887
  if (tmp___8 != 0) {
#line 888
    tmp___5 = get_current();
#line 888
    flush_signals(tmp___5);
#line 889
    __asm__  volatile   ("": : : "memory");
#line 890
    tmp___6 = get_t_state(& mdev->receiver);
#line 890
    if ((unsigned int )tmp___6 == 2U) {
#line 891
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 894
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 895
    ok = drbd_socket_okay(mdev, & sock);
#line 896
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 896
    ok = tmp___9 != 0 && ok != 0;
#line 897
    if (ok != 0) {
#line 898
      goto ldv_48558;
    } else {

    }
  } else {

  }
#line 900
  goto ldv_48564;
  ldv_48558: 
#line 902
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 903
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 905
  (sock->sk)->sk_allocation = 16U;
#line 906
  (msock->sk)->sk_allocation = 16U;
#line 908
  (sock->sk)->sk_priority = 4U;
#line 909
  (msock->sk)->sk_priority = 6U;
#line 916
  tmp___10 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 916
  (sock->sk)->sk_rcvtimeo = tmp___10;
#line 916
  (sock->sk)->sk_sndtimeo = tmp___10;
#line 919
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 920
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 924
  drbd_tcp_nodelay(sock);
#line 925
  drbd_tcp_nodelay(msock);
#line 927
  mdev->data.socket = sock;
#line 928
  mdev->meta.socket = msock;
#line 929
  mdev->last_received = jiffies;
#line 931
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 931
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            931);
  } else {

  }
#line 933
  h = drbd_do_handshake(mdev);
#line 934
  if (h <= 0) {
#line 935
    return (h);
  } else {

  }
#line 937
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 939
    tmp___11 = drbd_do_auth(mdev);
#line 939
    switch (tmp___11) {
    case -1: 
#line 941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 942
    return (-1);
    case 0: 
#line 944
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 945
    return (0);
    }
  } else {

  }
#line 949
  val___0.i = 0U;
#line 949
  val___0.ldv_37735.conn = 9U;
#line 949
  mask___0.i = 0U;
#line 949
  mask___0.ldv_37735.conn = 31U;
#line 949
  tmp___12 = drbd_request_state(mdev, mask___0, val___0);
#line 949
  if (tmp___12 <= 0) {
#line 950
    return (0);
  } else {

  }
#line 952
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 953
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 955
  atomic_set(& mdev->packet_seq, 0);
#line 956
  mdev->peer_seq = 0U;
#line 958
  drbd_thread_start(& mdev->asender);
#line 960
  if (mdev->agreed_pro_version <= 94) {
#line 960
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 960
    if (tmp___13 != 0) {
#line 961
      drbd_setup_queue_param(mdev, 32768U);
#line 962
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 965
  tmp___14 = drbd_send_protocol(mdev);
#line 965
  if (tmp___14 == 0) {
#line 966
    return (-1);
  } else {

  }
#line 967
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 968
  drbd_send_sizes(mdev, 0, 0);
#line 969
  drbd_send_uuids(mdev);
#line 970
  drbd_send_state(mdev);
#line 971
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 972
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 974
  return (1);
  out_release_sockets: ;
#line 977
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 978
    sock_release(sock);
  } else {

  }
#line 979
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 980
    sock_release(msock);
  } else {

  }
#line 981
  return (-1);
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u16 tmp___4 ;
  __u16 tmp___5 ;
  __u32 tmp___6 ;
  long tmp___7 ;

  {
#line 986
  h = & mdev->data.rbuf.header;
#line 989
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 990
  tmp = __builtin_expect(r != 8, 0L);
#line 990
  if (tmp != 0L) {
#line 991
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 992
    return (0);
  } else {

  }
#line 995
  tmp___7 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 995
  if (tmp___7 != 0L) {
#line 996
    tmp___0 = __fswab16((int )h->h80.command);
#line 996
    *cmd = (enum drbd_packets )tmp___0;
#line 997
    tmp___1 = __fswab16((int )h->h80.length);
#line 997
    *packet_size = (unsigned int )tmp___1;
  } else
#line 998
  if ((unsigned int )h->h95.magic == 23171U) {
#line 999
    tmp___2 = __fswab16((int )h->h95.command);
#line 999
    *cmd = (enum drbd_packets )tmp___2;
#line 1000
    tmp___3 = __fswab32(h->h95.length);
#line 1000
    *packet_size = tmp___3;
  } else {
#line 1002
    tmp___4 = __fswab16((int )h->h80.length);
#line 1002
    tmp___5 = __fswab16((int )h->h80.command);
#line 1002
    tmp___6 = __fswab32(h->h80.magic);
#line 1002
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___6, (int )tmp___5, (int )tmp___4);
#line 1006
    return (0);
  }
#line 1008
  mdev->last_received = jiffies;
#line 1010
  return (1);
}
}
#line 1013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1017
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1017
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1017
    if (tmp != 0) {
#line 1018
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1020
      if (rv != 0) {
#line 1021
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1025
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1027
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1029
  return;
}
}
#line 1037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1043
  rv = FE_STILL_LIVE;
#line 1045
  spin_lock(& mdev->epoch_lock);
  ldv_48601: 
#line 1047
  next_epoch = 0;
#line 1049
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1051
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1053
  atomic_dec(& epoch->active);
#line 1054
  goto ldv_48591;
  case 1U: 
#line 1056
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1057
  goto ldv_48591;
  case 2U: ;
#line 1060
  goto ldv_48591;
  }
  ldv_48591: ;
#line 1063
  if (epoch_size != 0) {
#line 1063
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1063
    if (tmp___1 == 0) {
#line 1063
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1063
      if (tmp___2 != 0) {
#line 1066
        if (((unsigned int )ev & 32U) == 0U) {
#line 1067
          spin_unlock(& mdev->epoch_lock);
#line 1068
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1069
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1071
        atomic_dec(& mdev->unacked_cnt);
#line 1071
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1071
        if (tmp___0 < 0) {
#line 1071
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1071
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1071, tmp);
        } else {

        }
#line 1073
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1074
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1074
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1075
          list_del(& epoch->list);
#line 1076
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1077
          mdev->epochs = mdev->epochs - 1U;
#line 1078
          kfree((void const   *)epoch);
#line 1080
          if ((unsigned int )rv == 0U) {
#line 1081
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1083
          epoch->flags = 0UL;
#line 1084
          atomic_set(& epoch->epoch_size, 0);
#line 1086
          if ((unsigned int )rv == 0U) {
#line 1087
            rv = FE_RECYCLED;
          } else {

          }
#line 1088
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1092
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1093
    goto ldv_48600;
  } else {

  }
#line 1095
  epoch = next_epoch;
#line 1096
  goto ldv_48601;
  ldv_48600: 
#line 1098
  spin_unlock(& mdev->epoch_lock);
#line 1100
  return (rv);
}
}
#line 1108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1111
  write_ordering_str[0] = (char *)"none";
#line 1111
  write_ordering_str[1] = (char *)"drain";
#line 1111
  write_ordering_str[2] = (char *)"flush";
#line 1117
  pwo = mdev->write_ordering;
#line 1118
  _min1 = pwo;
#line 1118
  _min2 = wo;
#line 1118
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1119
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1120
    wo = WO_drain_io;
  } else {

  }
#line 1121
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1122
    wo = WO_none;
  } else {

  }
#line 1123
  mdev->write_ordering = wo;
#line 1124
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1125
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1126
  return;
}
}
#line 1135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1138
  bios = 0;
#line 1140
  page = e->pages;
#line 1141
  sector = e->sector;
#line 1142
  ds = e->size;
#line 1143
  n_bios = 0U;
#line 1144
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1151
  bio = bio_alloc(16U, (int )nr_pages);
#line 1152
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1153
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1154
    goto fail;
  } else {

  }
#line 1157
  bio->bi_sector = sector;
#line 1158
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1159
  bio->bi_rw = (unsigned long )rw;
#line 1160
  bio->bi_private = (void *)e;
#line 1161
  bio->bi_end_io = & drbd_endio_sec;
#line 1163
  bio->bi_next = bios;
#line 1164
  bios = bio;
#line 1165
  n_bios = n_bios + 1U;
#line 1167
  goto ldv_48633;
  ldv_48632: 
#line 1168
  __min1 = ds;
#line 1168
  __min2 = 4096U;
#line 1168
  len = __min1 < __min2 ? __min1 : __min2;
#line 1169
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1169
  if (tmp___0 == 0) {
#line 1171
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1171
    if (tmp != 0L) {
#line 1171
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1171), "i" (12UL));
      ldv_48631: ;
#line 1171
      goto ldv_48631;
    } else {

    }
#line 1172
    goto next_bio;
  } else {

  }
#line 1174
  ds = ds - len;
#line 1175
  sector = (sector_t )(len >> 9) + sector;
#line 1176
  nr_pages = nr_pages - 1U;
#line 1167
  page = page_chain_next(page);
  ldv_48633: ;
#line 1167
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1167
    tmp___1 = page_chain_next(page);
#line 1167
    __builtin_prefetch((void const   *)tmp___1);
#line 1167
    if (1 != 0) {
#line 1168
      goto ldv_48632;
    } else {
#line 1170
      goto ldv_48634;
    }
  } else {

  }
  ldv_48634: ;
#line 1178
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1178);
  } else {

  }
#line 1179
  if (ds != 0U) {
#line 1179
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1179);
  } else {

  }
#line 1181
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_48635: 
#line 1183
  bio = bios;
#line 1184
  bios = bios->bi_next;
#line 1185
  bio->bi_next = 0;
#line 1187
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1188
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1189
    goto ldv_48635;
  } else {

  }

#line 1189
  return (0);
  fail: ;
#line 1192
  goto ldv_48638;
  ldv_48637: 
#line 1193
  bio = bios;
#line 1194
  bios = bios->bi_next;
#line 1195
  bio_put(bio);
  ldv_48638: ;
#line 1192
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1193
    goto ldv_48637;
  } else {

  }

#line 1197
  return (-12);
}
}
#line 1200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1203
  p = & mdev->data.rbuf.barrier;
#line 1206
  inc_unacked(mdev);
#line 1208
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1209
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1209
  rv = (int )tmp;
#line 1216
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1218
  if (rv == 2) {
#line 1219
    return (1);
  } else {

  }
#line 1223
  tmp___0 = kmalloc(40UL, 16U);
#line 1223
  epoch = (struct drbd_epoch *)tmp___0;
#line 1224
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1225
    goto ldv_48649;
  } else {
#line 1227
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1232
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1233
  drbd_flush(mdev);
#line 1235
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1235
  if (tmp___2 != 0) {
#line 1236
    tmp___1 = kmalloc(40UL, 16U);
#line 1236
    epoch = (struct drbd_epoch *)tmp___1;
#line 1237
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1238
      goto ldv_48649;
    } else {

    }
  } else {

  }
#line 1241
  epoch = mdev->current_epoch;
#line 1242
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1242
  if (tmp___3 == 0) {
#line 1242
    goto ldv_48652;
  } else {

  }
#line 1242
  tmp___4 = get_current();
#line 1242
  __wait.flags = 0U;
#line 1242
  __wait.private = (void *)tmp___4;
#line 1242
  __wait.func = & autoremove_wake_function;
#line 1242
  __wait.task_list.next = & __wait.task_list;
#line 1242
  __wait.task_list.prev = & __wait.task_list;
  ldv_48655: 
#line 1242
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1242
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1242
  if (tmp___5 == 0) {
#line 1242
    goto ldv_48654;
  } else {

  }
#line 1242
  schedule();
#line 1242
  goto ldv_48655;
  ldv_48654: 
#line 1242
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_48652: 
#line 1244
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1244
  if (tmp___6 != 0) {
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1244);
  } else {

  }
#line 1245
  if (epoch->flags != 0UL) {
#line 1245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1245);
  } else {

  }
#line 1247
  return (1);
  default: 
#line 1249
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1250
  return (0);
  }
  ldv_48649: 
#line 1253
  epoch->flags = 0UL;
#line 1254
  atomic_set(& epoch->epoch_size, 0);
#line 1255
  atomic_set(& epoch->active, 0);
#line 1257
  spin_lock(& mdev->epoch_lock);
#line 1258
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1258
  if (tmp___7 != 0) {
#line 1259
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1260
    mdev->current_epoch = epoch;
#line 1261
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1264
    kfree((void const   *)epoch);
  }
#line 1266
  spin_unlock(& mdev->epoch_lock);
#line 1268
  return (1);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1276
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1276
  capacity = tmp;
#line 1280
  dig_in = mdev->int_dig_in;
#line 1281
  dig_vv = mdev->int_dig_vv;
#line 1284
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1284
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1284
    dgs = (int )tmp___0;
  } else {
#line 1284
    dgs = 0;
  }
#line 1287
  if (dgs != 0) {
#line 1288
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1289
    if (rr != dgs) {
#line 1290
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1292
      return (0);
    } else {

    }
  } else {

  }
#line 1296
  data_size = data_size - dgs;
#line 1298
  _b = (data_size & 511) != 0;
#line 1298
  if (_b != 0) {
#line 1298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1298);
  } else {

  }
#line 1298
  if (_b != 0) {
#line 1298
    return (0);
  } else {

  }
#line 1299
  _b___0 = (unsigned int )data_size > 131072U;
#line 1299
  if (_b___0 != 0) {
#line 1299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1299);
  } else {

  }
#line 1299
  if (_b___0 != 0) {
#line 1299
    return (0);
  } else {

  }
#line 1303
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1304
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1307
    return (0);
  } else {

  }
#line 1313
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1314
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1315
    return (0);
  } else {

  }
#line 1317
  ds = data_size;
#line 1318
  page = e->pages;
#line 1319
  goto ldv_48683;
  ldv_48682: 
#line 1320
  __min1 = ds;
#line 1320
  __min2 = 4096;
#line 1320
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1321
  tmp___1 = kmap(page);
#line 1321
  data = (unsigned long *)tmp___1;
#line 1322
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1323
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1323
  if (tmp___2 != 0) {
#line 1324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1325
    *data = ~ *data;
  } else {

  }
#line 1327
  kunmap(page);
#line 1328
  if ((unsigned int )rr != len) {
#line 1329
    drbd_free_some_ee(mdev, e, 0);
#line 1330
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1332
    return (0);
  } else {

  }
#line 1334
  ds = ds - rr;
#line 1319
  page = page_chain_next(page);
  ldv_48683: ;
#line 1319
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1319
    tmp___3 = page_chain_next(page);
#line 1319
    __builtin_prefetch((void const   *)tmp___3);
#line 1319
    if (1 != 0) {
#line 1320
      goto ldv_48682;
    } else {
#line 1322
      goto ldv_48684;
    }
  } else {

  }
  ldv_48684: ;
#line 1337
  if (dgs != 0) {
#line 1338
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1339
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1339
    if (tmp___4 != 0) {
#line 1340
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1341
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1343
      drbd_free_some_ee(mdev, e, 0);
#line 1344
      return (0);
    } else {

    }
  } else {

  }
#line 1347
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1348
  return (e);
}
}
#line 1354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1357
  rv = 1;
#line 1360
  if (data_size == 0) {
#line 1361
    return (1);
  } else {

  }
#line 1363
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1365
  data = kmap(page);
#line 1366
  goto ldv_48704;
  ldv_48703: 
#line 1367
  __min1 = data_size;
#line 1367
  __min2 = 4096;
#line 1367
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1368
  __min1___1 = data_size;
#line 1368
  __min2___1 = 4096;
#line 1368
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1369
    rv = 0;
#line 1371
    __min1___0 = data_size;
#line 1371
    __min2___0 = 4096;
#line 1371
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1372
    goto ldv_48702;
  } else {

  }
#line 1374
  data_size = data_size - rr;
  ldv_48704: ;
#line 1366
  if (data_size != 0) {
#line 1367
    goto ldv_48703;
  } else {

  }
  ldv_48702: 
#line 1376
  kunmap(page);
#line 1377
  drbd_pp_free(mdev, page, 0);
#line 1378
  return (rv);
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1387
  dig_in = mdev->int_dig_in;
#line 1388
  dig_vv = mdev->int_dig_vv;
#line 1390
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1390
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1390
    dgs = (int )tmp;
  } else {
#line 1390
    dgs = 0;
  }
#line 1393
  if (dgs != 0) {
#line 1394
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1395
    if (rr != dgs) {
#line 1396
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1398
      return (0);
    } else {

    }
  } else {

  }
#line 1402
  data_size = data_size - dgs;
#line 1406
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1408
  bio = req->master_bio;
#line 1409
  if (bio->bi_sector != sector) {
#line 1409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1409);
  } else {

  }
#line 1411
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1411
  i = (int )bio->bi_idx;
#line 1411
  goto ldv_48723;
  ldv_48722: 
#line 1412
  __min1 = data_size;
#line 1412
  __min2 = (int )bvec->bv_len;
#line 1412
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1413
  tmp___0 = kmap(bvec->bv_page);
#line 1413
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1416
  kunmap(bvec->bv_page);
#line 1417
  if (rr != expect) {
#line 1418
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1421
    return (0);
  } else {

  }
#line 1423
  data_size = data_size - rr;
#line 1411
  bvec = bvec + 1;
#line 1411
  i = i + 1;
  ldv_48723: ;
#line 1411
  if ((int )bio->bi_vcnt > i) {
#line 1412
    goto ldv_48722;
  } else {

  }

#line 1426
  if (dgs != 0) {
#line 1427
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1428
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1428
    if (tmp___1 != 0) {
#line 1429
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1430
      return (0);
    } else {

    }
  } else {

  }
#line 1434
  if (data_size != 0) {
#line 1434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1434);
  } else {

  }
#line 1435
  return (1);
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1442
  e = (struct drbd_epoch_entry *)w;
#line 1443
  sector = e->sector;
#line 1446
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1446
  if (tmp == 0) {
#line 1446
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1446);
  } else {

  }
#line 1448
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1448
  if (tmp___0 != 0L) {
#line 1449
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1449U);
#line 1450
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1453
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1455
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1457
  atomic_dec(& mdev->unacked_cnt);
#line 1457
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1457
  if (tmp___2 < 0) {
#line 1457
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1457, tmp___1);
  } else {

  }
#line 1459
  return (ok);
}
}
#line 1462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1466
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1467
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1468
    goto fail;
  } else {

  }
#line 1470
  atomic_dec(& mdev->rs_pending_cnt);
#line 1470
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1470
  if (tmp___0 < 0) {
#line 1470
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1470, tmp);
  } else {

  }
#line 1472
  inc_unacked(mdev);
#line 1476
  e->w.cb = & e_end_resync_block;
#line 1478
  spin_lock_irq(& mdev->req_lock);
#line 1479
  list_add(& e->w.list, & mdev->sync_ee);
#line 1480
  spin_unlock_irq(& mdev->req_lock);
#line 1482
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1483
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1483
  if (tmp___1 == 0) {
#line 1484
    return (1);
  } else {

  }
#line 1489
  spin_lock_irq(& mdev->req_lock);
#line 1490
  list_del(& e->w.list);
#line 1491
  spin_unlock_irq(& mdev->req_lock);
#line 1493
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1495
  put_ldev(mdev);
#line 1496
  return (0);
}
}
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1504
  p = & mdev->data.rbuf.data;
#line 1506
  tmp = __fswab64(p->sector);
#line 1506
  sector = (sector_t )tmp;
#line 1508
  spin_lock_irq(& mdev->req_lock);
#line 1509
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1510
  spin_unlock_irq(& mdev->req_lock);
#line 1511
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1511
  if (tmp___0 != 0L) {
#line 1512
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1513
    return (0);
  } else {

  }
#line 1519
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1521
  if (ok != 0) {
#line 1522
    req_mod(req, data_received);
  } else {

  }
#line 1527
  return (ok);
}
}
#line 1530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1534
  p = & mdev->data.rbuf.data;
#line 1536
  tmp = __fswab64(p->sector);
#line 1536
  sector = (sector_t )tmp;
#line 1537
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1537
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1537);
  } else {

  }
#line 1539
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1539
  if (tmp___1 != 0) {
#line 1543
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1545
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1545
    if (tmp___0 != 0) {
#line 1546
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1548
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1550
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1553
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1555
  return (ok);
}
}
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1563
  e = (struct drbd_epoch_entry *)w;
#line 1564
  sector = e->sector;
#line 1565
  ok = 1;
#line 1567
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1568
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1568
    if (tmp___0 != 0L) {
#line 1569
      pcmd = ((int )mdev->state.ldv_37735.conn > 15 && (int )mdev->state.ldv_37735.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1573
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1573
      ok = tmp & ok;
#line 1574
      if (pcmd == 23) {
#line 1575
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1575U);
      } else {

      }
    } else {
#line 1577
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1581
    atomic_dec(& mdev->unacked_cnt);
#line 1581
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1581
    if (tmp___2 < 0) {
#line 1581
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1581
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1581, tmp___1);
    } else {

    }
  } else {

  }
#line 1585
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1586
    spin_lock_irq(& mdev->req_lock);
#line 1587
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1587
    if (tmp___3 != 0) {
#line 1587
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1587);
    } else {

    }
#line 1588
    hlist_del_init(& e->colision);
#line 1589
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1591
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1591
    if (tmp___4 == 0) {
#line 1591
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1591);
    } else {

    }
  }
#line 1594
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1596
  return (ok);
}
}
#line 1599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1601
  e = (struct drbd_epoch_entry *)w;
#line 1602
  ok = 1;
#line 1604
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1604);
  } else {

  }
#line 1605
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1607
  spin_lock_irq(& mdev->req_lock);
#line 1608
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1608
  if (tmp != 0) {
#line 1608
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1608);
  } else {

  }
#line 1609
  hlist_del_init(& e->colision);
#line 1610
  spin_unlock_irq(& mdev->req_lock);
#line 1612
  atomic_dec(& mdev->unacked_cnt);
#line 1612
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1612
  if (tmp___1 < 0) {
#line 1612
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1612
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1612, tmp___0);
  } else {

  }
#line 1614
  return (ok);
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1640
  tmp = get_current();
#line 1640
  wait.flags = 0U;
#line 1640
  wait.private = (void *)tmp;
#line 1640
  wait.func = & autoremove_wake_function;
#line 1640
  wait.task_list.next = & wait.task_list;
#line 1640
  wait.task_list.prev = & wait.task_list;
#line 1643
  ret = 0;
#line 1644
  spin_lock(& mdev->peer_seq_lock);
  ldv_48799: 
#line 1646
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1647
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1647
  if (tmp___0 <= 0) {
#line 1648
    goto ldv_48798;
  } else {

  }
#line 1649
  tmp___1 = get_current();
#line 1649
  tmp___2 = signal_pending(tmp___1);
#line 1649
  if (tmp___2 != 0) {
#line 1650
    ret = -512;
#line 1651
    goto ldv_48798;
  } else {

  }
#line 1653
  p_seq = mdev->peer_seq;
#line 1654
  spin_unlock(& mdev->peer_seq_lock);
#line 1655
  timeout = schedule_timeout(7500L);
#line 1656
  spin_lock(& mdev->peer_seq_lock);
#line 1657
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1658
    ret = -110;
#line 1659
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1660
    goto ldv_48798;
  } else {

  }
#line 1662
  goto ldv_48799;
  ldv_48798: 
#line 1663
  finish_wait(& mdev->seq_wait, & wait);
#line 1664
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1665
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1666
  spin_unlock(& mdev->peer_seq_lock);
#line 1667
  return (ret);
}
}
#line 1670 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long write_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1672
  if (mdev->agreed_pro_version > 94) {
#line 1673
    return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 4096 : 0)) | ((dpf & 32U) != 0U ? 4096 : 0)) | ((int )dpf & 64)));
  } else {
#line 1678
    return ((dpf & 2U) != 0U ? 16UL : 0UL);
  }
}
}
#line 1682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  __u32 tmp___4 ;
  unsigned long tmp___5 ;
  int size ;
  int discard ;
  int tmp___6 ;
  wait_queue_t wait ;
  struct task_struct *tmp___7 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___8 ;
  long tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  struct hlist_head *tmp___12 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;

  {
#line 1686
  p = & mdev->data.rbuf.data;
#line 1687
  rw = 1;
#line 1690
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1690
  if (tmp___2 == 0) {
#line 1691
    tmp = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1691
    if (tmp != 0) {
#line 1692
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1694
    spin_lock(& mdev->peer_seq_lock);
#line 1695
    tmp___0 = __fswab32(p->seq_num);
#line 1695
    if (mdev->peer_seq + 1U == tmp___0) {
#line 1696
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1697
    spin_unlock(& mdev->peer_seq_lock);
#line 1699
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1700
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1701
    tmp___1 = drbd_drain_block(mdev, (int )data_size);
#line 1701
    return (tmp___1);
  } else {

  }
#line 1709
  tmp___3 = __fswab64(p->sector);
#line 1709
  sector = (sector_t )tmp___3;
#line 1710
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1711
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1712
    put_ldev(mdev);
#line 1713
    return (0);
  } else {

  }
#line 1716
  e->w.cb = & e_end_block;
#line 1718
  spin_lock(& mdev->epoch_lock);
#line 1719
  e->epoch = mdev->current_epoch;
#line 1720
  atomic_inc(& (e->epoch)->epoch_size);
#line 1721
  atomic_inc(& (e->epoch)->active);
#line 1722
  spin_unlock(& mdev->epoch_lock);
#line 1724
  tmp___4 = __fswab32(p->dp_flags);
#line 1724
  dp_flags = tmp___4;
#line 1725
  tmp___5 = write_flags_to_bio(mdev, dp_flags);
#line 1725
  rw = (int )((unsigned int )tmp___5 | (unsigned int )rw);
#line 1727
  if ((dp_flags & 4U) != 0U) {
#line 1728
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1731
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1732
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1736
    size = (int const   )e->size;
#line 1737
    tmp___6 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1737
    discard = tmp___6;
#line 1738
    tmp___7 = get_current();
#line 1738
    wait.flags = 0U;
#line 1738
    wait.private = (void *)tmp___7;
#line 1738
    wait.func = & autoremove_wake_function;
#line 1738
    wait.task_list.next = & wait.task_list;
#line 1738
    wait.task_list.prev = & wait.task_list;
#line 1744
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1744
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1744);
    } else {

    }
#line 1745
    tmp___8 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1745
    if (tmp___8 != 0L) {
#line 1745
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1745), "i" (12UL));
      ldv_48822: ;
#line 1745
      goto ldv_48822;
    } else {

    }
#line 1746
    tmp___9 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1746
    if (tmp___9 != 0L) {
#line 1746
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1746), "i" (12UL));
      ldv_48823: ;
#line 1746
      goto ldv_48823;
    } else {

    }
#line 1782
    tmp___10 = __fswab32(p->seq_num);
#line 1782
    tmp___11 = drbd_wait_peer_seq(mdev, tmp___10);
#line 1782
    if (tmp___11 != 0) {
#line 1783
      goto out_interrupted;
    } else {

    }
#line 1785
    spin_lock_irq(& mdev->req_lock);
#line 1787
    tmp___12 = ee_hash_slot(mdev, sector);
#line 1787
    hlist_add_head(& e->colision, tmp___12);
#line 1790
    slot = tl_hash_slot(mdev, sector);
#line 1791
    first = 1;
    ldv_48835: 
#line 1793
    have_unacked = 0;
#line 1794
    have_conflict = 0;
#line 1795
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1797
    n = slot->first;
#line 1797
    goto ldv_48832;
    ldv_48831: 
#line 1798
    tmp___15 = overlaps(i->sector, (int )i->size, sector, size);
#line 1798
    if (tmp___15 != 0) {
#line 1801
      if (first != 0) {
#line 1802
        tmp___13 = get_current();
#line 1802
        tmp___14 = get_current();
#line 1802
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___14->comm), tmp___13->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1807
      if ((i->rq_state & 8UL) != 0UL) {
#line 1808
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1809
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1797
    n = n->next;
    ldv_48832: ;
#line 1797
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1797
      __builtin_prefetch((void const   *)n->next);
#line 1797
      if (1 != 0) {
#line 1797
        __mptr = (struct hlist_node  const  *)n;
#line 1797
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1797
        if (1 != 0) {
#line 1798
          goto ldv_48831;
        } else {
#line 1800
          goto ldv_48833;
        }
      } else {
#line 1800
        goto ldv_48833;
      }
    } else {

    }
    ldv_48833: ;
#line 1813
    if (have_conflict == 0) {
#line 1814
      goto ldv_48834;
    } else {

    }
#line 1817
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1818
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1820
      inc_unacked(mdev);
#line 1821
      e->w.cb = & e_send_discard_ack;
#line 1822
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1824
      spin_unlock_irq(& mdev->req_lock);
#line 1829
      put_ldev(mdev);
#line 1830
      wake_asender(mdev);
#line 1831
      finish_wait(& mdev->misc_wait, & wait);
#line 1832
      return (1);
    } else {

    }
#line 1835
    tmp___16 = get_current();
#line 1835
    tmp___17 = signal_pending(tmp___16);
#line 1835
    if (tmp___17 != 0) {
#line 1836
      hlist_del_init(& e->colision);
#line 1838
      spin_unlock_irq(& mdev->req_lock);
#line 1840
      finish_wait(& mdev->misc_wait, & wait);
#line 1841
      goto out_interrupted;
    } else {

    }
#line 1844
    spin_unlock_irq(& mdev->req_lock);
#line 1845
    if (first != 0) {
#line 1846
      first = 0;
#line 1847
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1849
    if (discard != 0) {
#line 1852
      if (have_unacked != 0) {
#line 1852
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1852);
      } else {

      }
    } else {

    }
#line 1854
    schedule();
#line 1855
    spin_lock_irq(& mdev->req_lock);
#line 1856
    goto ldv_48835;
    ldv_48834: 
#line 1857
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1860
  list_add(& e->w.list, & mdev->active_ee);
#line 1861
  spin_unlock_irq(& mdev->req_lock);
#line 1863
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1865
  inc_unacked(mdev);
#line 1868
  goto ldv_48837;
  case 2: 
#line 1872
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1873
  goto ldv_48837;
  case 1: ;
#line 1876
  goto ldv_48837;
  }
  ldv_48837: ;
#line 1879
  if ((int )mdev->state.ldv_37735.pdsk <= 3) {
#line 1881
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1881U);
#line 1882
    e->flags = e->flags | 1UL;
#line 1883
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1884
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1887
  tmp___18 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1887
  if (tmp___18 == 0) {
#line 1888
    return (1);
  } else {

  }
#line 1893
  spin_lock_irq(& mdev->req_lock);
#line 1894
  list_del(& e->w.list);
#line 1895
  hlist_del_init(& e->colision);
#line 1896
  spin_unlock_irq(& mdev->req_lock);
#line 1897
  if ((int )e->flags & 1) {
#line 1898
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1904
  put_ldev(mdev);
#line 1905
  drbd_free_some_ee(mdev, e, 0);
#line 1906
  return (0);
}
}
#line 1920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  int curr_events ;
  int throttle ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___0 ;

  {
#line 1922
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1925
  throttle = 0;
#line 1928
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1929
    return (0);
  } else {

  }
#line 1931
  res = 0UL;
#line 1931
  _cpu = 4294967295U;
#line 1931
  goto ldv_48856;
  ldv_48855: 
#line 1931
  __vpp_verify = 0;
#line 1931
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1931
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_48856: 
#line 1931
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1931
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1932
    goto ldv_48855;
  } else {

  }
#line 1932
  res___0 = 0UL;
#line 1932
  _cpu___0 = 4294967295U;
#line 1932
  goto ldv_48866;
  ldv_48865: 
#line 1932
  __vpp_verify___0 = 0;
#line 1932
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1932
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_48866: 
#line 1932
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1932
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1933
    goto ldv_48865;
  } else {

  }
#line 1932
  tmp = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1932
  curr_events = ((int )res + (int )res___0) - tmp;
#line 1934
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1938
    mdev->rs_last_events = curr_events;
#line 1942
    i = (mdev->rs_last_mark + 6) % 8;
#line 1943
    tmp___0 = drbd_bm_total_weight(mdev);
#line 1943
    rs_left = tmp___0 - mdev->rs_failed;
#line 1945
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1946
    if (dt == 0UL) {
#line 1947
      dt = dt + 1UL;
    } else {

    }
#line 1948
    db = mdev->rs_mark_left[i] - rs_left;
#line 1949
    dbdt = db / dt << 2;
#line 1951
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1952
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1954
  return (throttle);
}
}
#line 1958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1961
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1961
  capacity = tmp;
#line 1963
  di = 0;
#line 1966
  p = & mdev->data.rbuf.block_req;
#line 1968
  tmp___0 = __fswab64(p->sector);
#line 1968
  sector = (sector_t )tmp___0;
#line 1969
  tmp___1 = __fswab32(p->blksize);
#line 1969
  size = (int )tmp___1;
#line 1971
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1972, (unsigned long long )sector, size);
#line 1974
    return (0);
  } else {

  }
#line 1976
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1977
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1977, (unsigned long long )sector, size);
#line 1979
    return (0);
  } else {

  }
#line 1982
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1982
  if (tmp___7 == 0) {
#line 1983
    verb = 1;
#line 1984
    switch ((unsigned int )cmd) {
    case 8U: 
#line 1986
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 1987
    goto ldv_48885;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 1991
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 1992
    goto ldv_48885;
    case 31U: 
#line 1994
    verb = 0;
#line 1995
    atomic_dec(& mdev->rs_pending_cnt);
#line 1995
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1995
    if (tmp___3 < 0) {
#line 1995
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1995
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 1995, tmp___2);
    } else {

    }
#line 1996
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 1997
    goto ldv_48885;
    default: 
#line 1999
    tmp___4 = cmdname(cmd);
#line 1999
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_48885: ;
#line 2002
    if (verb != 0) {
#line 2002
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2002
      if (tmp___5 != 0) {
#line 2003
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2007
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2007
    return (tmp___6);
  } else {

  }
#line 2013
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2014
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2015
    put_ldev(mdev);
#line 2016
    return (0);
  } else {

  }
#line 2019
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2021
  e->w.cb = & w_e_end_data_req;
#line 2022
  fault_type = 5U;
#line 2024
  goto submit;
  case 9U: 
#line 2027
  e->w.cb = & w_e_end_rsdata_req;
#line 2028
  fault_type = 3U;
#line 2029
  goto ldv_48898;
  case 31U: ;
  case 33U: 
#line 2033
  fault_type = 3U;
#line 2034
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2034
  di = (struct digest_info *)tmp___8;
#line 2035
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2036
    goto out_free_e;
  } else {

  }
#line 2038
  di->digest_size = (int )digest_size;
#line 2039
  di->digest = (void *)di + 16U;
#line 2041
  e->ldv_45894.digest = di;
#line 2042
  e->flags = e->flags | 16UL;
#line 2044
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2044
  if ((unsigned int )tmp___9 != digest_size) {
#line 2045
    goto out_free_e;
  } else {

  }
#line 2047
  if ((unsigned int )cmd == 33U) {
#line 2048
    if (mdev->agreed_pro_version <= 88) {
#line 2048
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2048);
    } else {

    }
#line 2049
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2050
  if ((unsigned int )cmd == 31U) {
#line 2051
    e->w.cb = & w_e_end_ov_reply;
#line 2052
    atomic_dec(& mdev->rs_pending_cnt);
#line 2052
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2052
    if (tmp___11 < 0) {
#line 2052
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2052
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2052, tmp___10);
    } else {

    }
#line 2055
    goto submit_for_resync;
  } else {

  }
#line 2057
  goto ldv_48898;
  case 30U: ;
#line 2060
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2062
    mdev->ov_start_sector = sector;
#line 2063
    mdev->ov_position = sector;
#line 2064
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2065
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2068
  e->w.cb = & w_e_end_ov_req;
#line 2069
  fault_type = 3U;
#line 2070
  goto ldv_48898;
  default: 
#line 2073
  tmp___12 = cmdname(cmd);
#line 2073
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___12);
#line 2075
  fault_type = 10U;
#line 2076
  goto out_free_e;
  }
  ldv_48898: ;
#line 2101
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) != 4U) {
#line 2101
    tmp___13 = drbd_rs_should_slow_down(mdev);
#line 2101
    if (tmp___13 != 0) {
#line 2102
      msleep(100U);
    } else {

    }
  } else {

  }
#line 2103
  tmp___14 = drbd_rs_begin_io(mdev, e->sector);
#line 2103
  if (tmp___14 != 0) {
#line 2104
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2107
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2110
  inc_unacked(mdev);
#line 2111
  spin_lock_irq(& mdev->req_lock);
#line 2112
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2113
  spin_unlock_irq(& mdev->req_lock);
#line 2115
  tmp___15 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2115
  if (tmp___15 == 0) {
#line 2116
    return (1);
  } else {

  }
#line 2121
  spin_lock_irq(& mdev->req_lock);
#line 2122
  list_del(& e->w.list);
#line 2123
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2127
  put_ldev(mdev);
#line 2128
  drbd_free_some_ee(mdev, e, 0);
#line 2129
  return (0);
}
}
#line 2132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2134
  rv = -100;
#line 2137
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2138
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2140
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2141
  ch_self = mdev->comm_bm_set;
#line 2143
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2147
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2148
  goto ldv_48919;
  case 0: ;
#line 2150
  goto ldv_48919;
  case 1: ;
#line 2152
  if (self == 0 && peer == 1) {
#line 2153
    rv = -1;
#line 2154
    goto ldv_48919;
  } else {

  }
#line 2156
  if (self == 1 && peer == 0) {
#line 2157
    rv = 1;
#line 2158
    goto ldv_48919;
  } else {

  }
  case 2: ;
#line 2162
  if (self == 0 && peer == 1) {
#line 2163
    rv = 1;
#line 2164
    goto ldv_48919;
  } else {

  }
#line 2166
  if (self == 1 && peer == 0) {
#line 2167
    rv = -1;
#line 2168
    goto ldv_48919;
  } else {

  }
#line 2171
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2174
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2175
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2175
    rv = tmp != 0 ? -1 : 1;
#line 2177
    goto ldv_48919;
  } else {
#line 2179
    if (ch_peer == 0UL) {
#line 2179
      rv = 1;
#line 2179
      goto ldv_48919;
    } else {

    }
#line 2180
    if (ch_self == 0UL) {
#line 2180
      rv = -1;
#line 2180
      goto ldv_48919;
    } else {

    }
  }
#line 2182
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2183
    goto ldv_48919;
  } else {

  }
  case 4: ;
#line 2185
  if (ch_self < ch_peer) {
#line 2186
    rv = -1;
  } else
#line 2187
  if (ch_self > ch_peer) {
#line 2188
    rv = 1;
  } else {
#line 2191
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2191
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2193
  goto ldv_48919;
  case 5: 
#line 2195
  rv = -1;
#line 2196
  goto ldv_48919;
  case 6: 
#line 2198
  rv = 1;
  }
  ldv_48919: ;
#line 2201
  return (rv);
}
}
#line 2204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2206
  rv = -100;
#line 2208
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2209
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2211
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2217
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2218
  goto ldv_48939;
  case 0: ;
#line 2220
  goto ldv_48939;
  case 7: 
#line 2222
  hg = drbd_asb_recover_0p(mdev);
#line 2223
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 2U) {
#line 2224
    rv = hg;
  } else {

  }
#line 2225
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 2226
    rv = hg;
  } else {

  }
#line 2227
  goto ldv_48939;
  case 10: 
#line 2229
  rv = drbd_asb_recover_0p(mdev);
#line 2230
  goto ldv_48939;
  case 8: ;
#line 2232
  return ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U ? 1 : -1);
  case 9: 
#line 2234
  hg = drbd_asb_recover_0p(mdev);
#line 2235
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 2236
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2240
    val.i = 0U;
#line 2240
    val.ldv_37735.role = 2U;
#line 2240
    mask.i = 0U;
#line 2240
    mask.ldv_37735.role = 3U;
#line 2240
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2241
    if (self != 1) {
#line 2242
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2244
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2245
      rv = hg;
    }
  } else {
#line 2248
    rv = hg;
  }
  }
  ldv_48939: ;
#line 2251
  return (rv);
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2256
  rv = -100;
#line 2258
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2259
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2261
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2269
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2270
  goto ldv_48963;
  case 10: 
#line 2272
  rv = drbd_asb_recover_0p(mdev);
#line 2273
  goto ldv_48963;
  case 0: ;
#line 2275
  goto ldv_48963;
  case 9: 
#line 2277
  hg = drbd_asb_recover_0p(mdev);
#line 2278
  if (hg == -1) {
#line 2282
    val.i = 0U;
#line 2282
    val.ldv_37735.role = 2U;
#line 2282
    mask.i = 0U;
#line 2282
    mask.ldv_37735.role = 3U;
#line 2282
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2283
    if (self != 1) {
#line 2284
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2286
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2287
      rv = hg;
    }
  } else {
#line 2290
    rv = hg;
  }
  }
  ldv_48963: ;
#line 2293
  return (rv);
}
}
#line 2296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2299
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2300
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2301
    return;
  } else {

  }
#line 2303
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2304
  return;
}
}
#line 2323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2328
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2329
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2331
  *rule_nr = 10;
#line 2332
  if (self == 4ULL && peer == 4ULL) {
#line 2333
    return (0);
  } else {

  }
#line 2335
  *rule_nr = 20;
#line 2336
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2338
    return (-2);
  } else {

  }
#line 2340
  *rule_nr = 30;
#line 2341
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2343
    return (2);
  } else {

  }
#line 2345
  if (self == peer) {
#line 2348
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2350
      if (mdev->agreed_pro_version <= 90) {
#line 2351
        return (-1001);
      } else {

      }
#line 2353
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2355
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2356
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2358
        if ((int )mdev->state.ldv_37735.disk > 2) {
#line 2358
          tmp = drbd_bm_total_weight(mdev);
#line 2358
          tmp___0 = (u64 )tmp;
        } else {
#line 2358
          tmp___0 = 0ULL;
        }
#line 2358
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2360
        *rule_nr = 34;
      } else {
#line 2362
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2363
        *rule_nr = 36;
      }
#line 2366
      return (1);
    } else {

    }
#line 2369
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2371
      if (mdev->agreed_pro_version <= 90) {
#line 2372
        return (-1001);
      } else {

      }
#line 2374
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2376
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2378
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2379
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2380
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2382
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2383
        *rule_nr = 35;
      } else {
#line 2385
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2386
        *rule_nr = 37;
      }
#line 2389
      return (-1);
    } else {

    }
#line 2393
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2393
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2397
    *rule_nr = 40;
#line 2399
    switch (rct) {
    case 0: ;
#line 2400
    return (0);
    case 1: ;
#line 2401
    return (1);
    case 2: ;
#line 2402
    return (-1);
    case 3: 
#line 2404
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2405
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2409
  *rule_nr = 50;
#line 2410
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2411
  if (self == peer) {
#line 2412
    return (-1);
  } else {

  }
#line 2414
  *rule_nr = 51;
#line 2415
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2416
  if (self == peer) {
#line 2417
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2418
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2419
    if (self == peer) {
#line 2423
      if (mdev->agreed_pro_version <= 90) {
#line 2424
        return (-1001);
      } else {

      }
#line 2426
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2427
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2428
      return (-1);
    } else {

    }
  } else {

  }
#line 2432
  *rule_nr = 60;
#line 2433
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2434
  i = 2;
#line 2434
  goto ldv_48993;
  ldv_48992: 
#line 2435
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2436
  if (self == peer) {
#line 2437
    return (-2);
  } else {

  }
#line 2434
  i = i + 1;
  ldv_48993: ;
#line 2434
  if (i <= 3) {
#line 2435
    goto ldv_48992;
  } else {

  }
#line 2440
  *rule_nr = 70;
#line 2441
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2442
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2443
  if (self == peer) {
#line 2444
    return (1);
  } else {

  }
#line 2446
  *rule_nr = 71;
#line 2447
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2448
  if (self == peer) {
#line 2449
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2450
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2451
    if (self == peer) {
#line 2455
      if (mdev->agreed_pro_version <= 90) {
#line 2456
        return (-1001);
      } else {

      }
#line 2458
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2459
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2461
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2463
      if ((int )mdev->state.ldv_37735.disk > 2) {
#line 2463
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2463
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2463
        tmp___3 = 0ULL;
      }
#line 2463
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2466
      return (1);
    } else {

    }
  } else {

  }
#line 2471
  *rule_nr = 80;
#line 2472
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2473
  i = 2;
#line 2473
  goto ldv_48996;
  ldv_48995: 
#line 2474
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2475
  if (self == peer) {
#line 2476
    return (2);
  } else {

  }
#line 2473
  i = i + 1;
  ldv_48996: ;
#line 2473
  if (i <= 3) {
#line 2474
    goto ldv_48995;
  } else {

  }
#line 2479
  *rule_nr = 90;
#line 2480
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2481
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2482
  if (self == peer && self != 0ULL) {
#line 2483
    return (100);
  } else {

  }
#line 2485
  *rule_nr = 100;
#line 2486
  i = 2;
#line 2486
  goto ldv_49002;
  ldv_49001: 
#line 2487
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2488
  j = 2;
#line 2488
  goto ldv_48999;
  ldv_48998: 
#line 2489
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2490
  if (self == peer) {
#line 2491
    return (-100);
  } else {

  }
#line 2488
  j = j + 1;
  ldv_48999: ;
#line 2488
  if (j <= 3) {
#line 2489
    goto ldv_48998;
  } else {

  }
#line 2486
  i = i + 1;
  ldv_49002: ;
#line 2486
  if (i <= 3) {
#line 2487
    goto ldv_49001;
  } else {

  }

#line 2495
  return (-1000);
}
}
#line 2501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2505
  rv = C_MASK;
#line 2508
  mydisk = (enum drbd_disk_state )mdev->state.ldv_37735.disk;
#line 2509
  if ((unsigned int )mydisk == 3U) {
#line 2510
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_37735.disk;
  } else {

  }
#line 2512
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2513
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2514
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2517
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2519
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2521
  if (hg == -1000) {
#line 2522
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2523
    return (C_MASK);
  } else {

  }
#line 2525
  if (hg == -1001) {
#line 2526
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2527
    return (C_MASK);
  } else {

  }
#line 2530
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2532
    if (hg == -100) {
#line 2532
      tmp = 1;
    } else {
#line 2532
      __x___0 = hg;
#line 2532
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2532
      if (ret == 2L) {
#line 2532
        tmp = 1;
      } else {
#line 2532
        tmp = 0;
      }
    }
#line 2532
    f = tmp;
#line 2533
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2534
    if (f != 0) {
#line 2535
      hg = hg * 2;
    } else {

    }
#line 2536
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2540
  __x___2 = hg;
#line 2540
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2540
  if (ret___0 == 100L) {
#line 2541
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2543
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2544
    pcount = ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2546
    forced = hg == -100;
#line 2548
    switch (pcount) {
    case 0: 
#line 2550
    hg = drbd_asb_recover_0p(mdev);
#line 2551
    goto ldv_49025;
    case 1: 
#line 2553
    hg = drbd_asb_recover_1p(mdev);
#line 2554
    goto ldv_49025;
    case 2: 
#line 2556
    hg = drbd_asb_recover_2p(mdev);
#line 2557
    goto ldv_49025;
    }
    ldv_49025: 
#line 2559
    __x___4 = hg;
#line 2559
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2559
    if (ret___1 <= 99L) {
#line 2560
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2563
      if (forced != 0) {
#line 2564
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2566
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2571
  if (hg == -100) {
#line 2572
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2573
      hg = -1;
    } else {

    }
#line 2574
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2575
      hg = 1;
    } else {

    }
#line 2577
    __x___6 = hg;
#line 2577
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2577
    if (ret___2 <= 99L) {
#line 2578
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2583
  if (hg == -100) {
#line 2588
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2589
    drbd_khelper(mdev, (char *)"split-brain");
#line 2590
    return (C_MASK);
  } else {

  }
#line 2593
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2595
    return (C_MASK);
  } else {

  }
#line 2598
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) && (int )mdev->state.ldv_37735.disk > 6) {
#line 2600
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2602
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2605
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2606
    return (C_MASK);
    case 10: 
#line 2608
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2613
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2613
    goto _L;
  } else {
#line 2613
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2613
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2614
      if (hg == 0) {
#line 2615
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2617
        __x___8 = hg;
#line 2617
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2617
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2617
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2620
      return (C_MASK);
    } else {

    }
  }
#line 2623
  __x___10 = hg;
#line 2623
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2623
  if (ret___4 > 1L) {
#line 2624
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2625
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2625
    if (tmp___2 != 0) {
#line 2626
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2629
  if (hg > 0) {
#line 2630
    rv = C_WF_BITMAP_S;
  } else
#line 2631
  if (hg < 0) {
#line 2632
    rv = C_WF_BITMAP_T;
  } else {
#line 2634
    rv = C_CONNECTED;
#line 2635
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2635
    if (tmp___4 != 0UL) {
#line 2636
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2636
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2641
  return (rv);
}
}
#line 2645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2648
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2650
    return (0);
  } else {

  }
#line 2653
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2655
    return (1);
  } else {

  }
#line 2658
  if ((unsigned int )peer == (unsigned int )self) {
#line 2659
    return (0);
  } else {

  }
#line 2662
  return (1);
}
}
#line 2665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2667
  p = & mdev->data.rbuf.protocol;
#line 2670
  p_integrity_alg[0] = '\000';
#line 2670
  tmp = 1U;
#line 2670
  while (1) {
#line 2670
    if (tmp >= 64U) {
#line 2670
      break;
    } else {

    }
#line 2670
    p_integrity_alg[tmp] = (char)0;
#line 2670
    tmp = tmp + 1U;
  }
#line 2672
  tmp___0 = __fswab32(p->protocol);
#line 2672
  p_proto = (int )tmp___0;
#line 2673
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2673
  p_after_sb_0p = (int )tmp___1;
#line 2674
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2674
  p_after_sb_1p = (int )tmp___2;
#line 2675
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2675
  p_after_sb_2p = (int )tmp___3;
#line 2676
  tmp___4 = __fswab32(p->two_primaries);
#line 2676
  p_two_primaries = (int )tmp___4;
#line 2677
  tmp___5 = __fswab32(p->conn_flags);
#line 2677
  cf = (int )tmp___5;
#line 2678
  p_want_lose = cf & 1;
#line 2680
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2682
  if ((cf & 2) != 0) {
#line 2683
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2685
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2687
    goto disconnect;
  } else {

  }
#line 2690
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2690
  if (tmp___6 != 0) {
#line 2691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2692
    goto disconnect;
  } else {

  }
#line 2695
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2695
  if (tmp___7 != 0) {
#line 2696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2697
    goto disconnect;
  } else {

  }
#line 2700
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2700
  if (tmp___8 != 0) {
#line 2701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2702
    goto disconnect;
  } else {

  }
#line 2705
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2707
    goto disconnect;
  } else {

  }
#line 2710
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2712
    goto disconnect;
  } else {

  }
#line 2715
  if (mdev->agreed_pro_version > 86) {
#line 2716
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2718
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2718
    if ((unsigned int )tmp___9 != data_size) {
#line 2719
      return (0);
    } else {

    }
#line 2721
    p_integrity_alg[63] = 0;
#line 2722
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2722
    if (tmp___10 != 0) {
#line 2723
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2724
      goto disconnect;
    } else {

    }
#line 2726
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2730
  return (1);
  disconnect: 
#line 2733
  val.i = 0U;
#line 2733
  val.ldv_37735.conn = 1U;
#line 2733
  mask.i = 0U;
#line 2733
  mask.ldv_37735.conn = 31U;
#line 2733
  drbd_force_state(mdev, mask, val);
#line 2734
  return (0);
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2747
  if ((int )((signed char )*alg) == 0) {
#line 2748
    return (0);
  } else {

  }
#line 2750
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2751
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2751
  if (tmp___0 != 0L) {
#line 2752
    tmp = PTR_ERR((void const   *)tfm);
#line 2752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2754
    return (tfm);
  } else {

  }
#line 2756
  tmp___2 = crypto_hash_tfm(tfm);
#line 2756
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2756
  if (tmp___3 == 0) {
#line 2757
    crypto_free_hash(tfm);
#line 2758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2759
    tmp___1 = ERR_PTR(-22L);
#line 2759
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2761
  return (tfm);
}
}
#line 2764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2766
  ok = 1;
#line 2767
  p = & mdev->data.rbuf.rs_param_95;
#line 2769
  verify_tfm = 0;
#line 2770
  csums_tfm = 0;
#line 2771
  apv = mdev->agreed_pro_version;
#line 2772
  rs_plan_s = 0;
#line 2773
  fifo_size = 0;
#line 2775
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2781
  if (packet_size > exp_max_sz) {
#line 2782
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2784
    return (0);
  } else {

  }
#line 2787
  if (apv <= 88) {
#line 2788
    header_size = 4U;
#line 2789
    data_size = packet_size - header_size;
  } else
#line 2790
  if (apv <= 94) {
#line 2791
    header_size = 132U;
#line 2792
    data_size = packet_size - header_size;
#line 2793
    if (data_size != 0U) {
#line 2793
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2793);
    } else {

    }
  } else {
#line 2795
    header_size = 148U;
#line 2796
    data_size = packet_size - header_size;
#line 2797
    if (data_size != 0U) {
#line 2797
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2797);
    } else {

    }
  }
#line 2801
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2803
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2803
  if ((unsigned int )tmp != header_size) {
#line 2804
    return (0);
  } else {

  }
#line 2806
  tmp___0 = __fswab32(p->rate);
#line 2806
  mdev->sync_conf.rate = (int )tmp___0;
#line 2808
  if (apv > 87) {
#line 2809
    if (apv == 88) {
#line 2810
      if (data_size > 64U) {
#line 2811
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2814
        return (0);
      } else {

      }
#line 2817
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2817
      if ((unsigned int )tmp___1 != data_size) {
#line 2818
        return (0);
      } else {

      }
#line 2822
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2822
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2822);
      } else {

      }
#line 2823
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2828
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2828
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2828);
      } else {

      }
#line 2829
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2829
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2829);
      } else {

      }
#line 2830
      p->verify_alg[63] = 0;
#line 2831
      p->csums_alg[63] = 0;
    }
#line 2834
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2834
    if (tmp___3 != 0) {
#line 2835
      if ((unsigned int )*((unsigned short *)mdev + 998UL) == 144U) {
#line 2836
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2838
        goto disconnect;
      } else {

      }
#line 2840
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2842
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2842
      if (tmp___2 != 0L) {
#line 2843
        verify_tfm = 0;
#line 2844
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2848
    if (apv > 88) {
#line 2848
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2848
      if (tmp___5 != 0) {
#line 2849
        if ((unsigned int )*((unsigned short *)mdev + 998UL) == 144U) {
#line 2850
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2852
          goto disconnect;
        } else {

        }
#line 2854
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2856
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2856
        if (tmp___4 != 0L) {
#line 2857
          csums_tfm = 0;
#line 2858
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2862
    if (apv > 94) {
#line 2863
      tmp___6 = __fswab32(p->rate);
#line 2863
      mdev->sync_conf.rate = (int )tmp___6;
#line 2864
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2864
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2865
      tmp___8 = __fswab32(p->c_delay_target);
#line 2865
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2866
      tmp___9 = __fswab32(p->c_fill_target);
#line 2866
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2867
      tmp___10 = __fswab32(p->c_max_rate);
#line 2867
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2869
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2870
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2871
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2871
        rs_plan_s = (int *)tmp___11;
#line 2872
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2873
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2874
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2879
    spin_lock(& mdev->peer_seq_lock);
#line 2881
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2882
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2883
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2883
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2884
      crypto_free_hash(mdev->verify_tfm);
#line 2885
      mdev->verify_tfm = verify_tfm;
#line 2886
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2888
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2889
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2890
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2890
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2891
      crypto_free_hash(mdev->csums_tfm);
#line 2892
      mdev->csums_tfm = csums_tfm;
#line 2893
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2895
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2896
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2897
      mdev->rs_plan_s.values = rs_plan_s;
#line 2898
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2899
      mdev->rs_planed = 0;
    } else {

    }
#line 2901
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2904
  return (ok);
  disconnect: 
#line 2908
  crypto_free_hash(csums_tfm);
#line 2910
  crypto_free_hash(verify_tfm);
#line 2911
  val.i = 0U;
#line 2911
  val.ldv_37735.conn = 1U;
#line 2911
  mask.i = 0U;
#line 2911
  mask.ldv_37735.conn = 31U;
#line 2911
  drbd_force_state(mdev, mask, val);
#line 2912
  return (0);
}
}
#line 2915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2917
  return;
}
}
#line 2922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2926
  if (a == 0UL || b == 0UL) {
#line 2927
    return;
  } else {

  }
#line 2928
  d = a > b ? a - b : b - a;
#line 2929
  if (a >> 3 < d || b >> 3 < d) {
#line 2930
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2932
  return;
}
}
#line 2934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 2936
  p = & mdev->data.rbuf.sizes;
#line 2937
  dd = 0;
#line 2940
  ldsc = 0;
#line 2943
  tmp = __fswab64(p->d_size);
#line 2943
  p_size = (sector_t )tmp;
#line 2944
  tmp___0 = __fswab64(p->u_size);
#line 2944
  p_usize = (sector_t )tmp___0;
#line 2946
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1997UL) == 0U) {
#line 2947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2948
    val.i = 0U;
#line 2948
    val.ldv_37735.conn = 1U;
#line 2948
    mask.i = 0U;
#line 2948
    mask.ldv_37735.conn = 31U;
#line 2948
    drbd_force_state(mdev, mask, val);
#line 2949
    return (0);
  } else {

  }
#line 2954
  mdev->p_size = p_size;
#line 2956
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2956
  if (tmp___6 != 0) {
#line 2957
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 2957
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 2959
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2964
    if ((unsigned int )*((unsigned short *)mdev + 998UL) == 144U) {
#line 2965
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2965
      __y = p_usize;
#line 2965
      if (__x != 0UL) {
#line 2965
        if (__y != 0UL) {
#line 2965
          _min1 = __x;
#line 2965
          _min2 = __y;
#line 2965
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 2965
          tmp___2 = __x;
        }
#line 2965
        tmp___3 = tmp___2;
      } else {
#line 2965
        tmp___3 = __y;
      }
#line 2965
      p_usize = tmp___3;
    } else {

    }
#line 2968
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2970
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2971
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2972
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2978
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2978
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 2978
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_37735.disk > 4) && (int )mdev->state.ldv_37735.conn <= 9) {
#line 2982
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 2983
      val___0.i = 0U;
#line 2983
      val___0.ldv_37735.conn = 1U;
#line 2983
      mask___0.i = 0U;
#line 2983
      mask___0.ldv_37735.conn = 31U;
#line 2983
      drbd_force_state(mdev, mask___0, val___0);
#line 2984
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2985
      put_ldev(mdev);
#line 2986
      return (0);
    } else {

    }
#line 2988
    put_ldev(mdev);
  } else {

  }
#line 2992
  tmp___7 = __fswab16((int )p->dds_flags);
#line 2992
  ddsf = (enum dds_flags )tmp___7;
#line 2993
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2993
  if (tmp___8 != 0) {
#line 2994
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 2995
    put_ldev(mdev);
#line 2996
    if ((int )dd == -1) {
#line 2997
      return (0);
    } else {

    }
#line 2998
    drbd_md_sync(mdev);
  } else {
#line 3001
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3004
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3004
  if (tmp___13 != 0) {
#line 3005
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3005
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3006
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3007
      ldsc = 1;
    } else {

    }
#line 3010
    if (mdev->agreed_pro_version <= 93) {
#line 3011
      tmp___10 = __fswab32(p->max_segment_size);
#line 3011
      max_seg_s = tmp___10;
    } else
#line 3012
    if (mdev->agreed_pro_version == 94) {
#line 3013
      max_seg_s = 32768U;
    } else {
#line 3015
      max_seg_s = 131072U;
    }
#line 3017
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3017
    if (tmp___11 != max_seg_s) {
#line 3018
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3020
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3020
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3021
    put_ldev(mdev);
  } else {

  }
#line 3024
  if ((int )mdev->state.ldv_37735.conn > 9) {
#line 3025
    tmp___14 = __fswab64(p->c_size);
#line 3025
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3025
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3029
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3031
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3031
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 998UL) == 160U)) {
#line 3033
      if ((int )mdev->state.ldv_37735.pdsk > 3 && (int )mdev->state.ldv_37735.disk > 3) {
#line 3035
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3036
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3038
          resync_after_online_grow(mdev);
        }
      } else {
#line 3040
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3044
  return (1);
}
}
#line 3047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 3049
  p = & mdev->data.rbuf.uuids;
#line 3053
  tmp = kmalloc(48UL, 16U);
#line 3053
  p_uuid = (u64 *)tmp;
#line 3055
  i = 0;
#line 3055
  goto ldv_49144;
  ldv_49143: 
#line 3056
  tmp___0 = __fswab64(p->uuid[i]);
#line 3056
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3055
  i = i + 1;
  ldv_49144: ;
#line 3055
  if (i <= 5) {
#line 3056
    goto ldv_49143;
  } else {

  }
#line 3058
  kfree((void const   *)mdev->p_uuid);
#line 3059
  mdev->p_uuid = p_uuid;
#line 3061
  if ((((int )mdev->state.ldv_37735.conn <= 9 && (int )mdev->state.ldv_37735.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3067
    val.i = 0U;
#line 3067
    val.ldv_37735.conn = 1U;
#line 3067
    mask.i = 0U;
#line 3067
    mask.ldv_37735.conn = 31U;
#line 3067
    drbd_force_state(mdev, mask, val);
#line 3068
    return (0);
  } else {

  }
#line 3071
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3071
  if (tmp___1 != 0) {
#line 3072
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 998UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3077
    if (skip_initial_sync != 0) {
#line 3078
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3079
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3081
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3082
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3083
      __ns.i = mdev->state.i;
#line 3083
      __ns.ldv_37735.disk = 8U;
#line 3083
      __ns.ldv_37735.pdsk = 8U;
#line 3083
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3085
      drbd_md_sync(mdev);
    } else {

    }
#line 3087
    put_ldev(mdev);
  } else
#line 3088
  if ((int )mdev->state.ldv_37735.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 3092
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3099
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3099
  if (tmp___2 == 0) {
#line 3099
    goto ldv_49153;
  } else {

  }
#line 3099
  tmp___3 = get_current();
#line 3099
  __wait.flags = 0U;
#line 3099
  __wait.private = (void *)tmp___3;
#line 3099
  __wait.func = & autoremove_wake_function;
#line 3099
  __wait.task_list.next = & __wait.task_list;
#line 3099
  __wait.task_list.prev = & __wait.task_list;
  ldv_49156: 
#line 3099
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3099
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3099
  if (tmp___4 == 0) {
#line 3099
    goto ldv_49155;
  } else {

  }
#line 3099
  schedule();
#line 3099
  goto ldv_49156;
  ldv_49155: 
#line 3099
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49153: ;
#line 3100
  if ((int )mdev->state.ldv_37735.conn > 9 && (int )mdev->state.ldv_37735.disk <= 3) {
#line 3101
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3103
  return (1);
}
}
#line 3110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3114
  c_tab[0] = 0;
#line 3114
  c_tab[1] = C_TEAR_DOWN;
#line 3114
  c_tab[2] = 0;
#line 3114
  c_tab[3] = 0;
#line 3114
  c_tab[4] = 0;
#line 3114
  c_tab[5] = 0;
#line 3114
  c_tab[6] = 0;
#line 3114
  c_tab[7] = 0;
#line 3114
  c_tab[8] = 0;
#line 3114
  c_tab[9] = 0;
#line 3114
  c_tab[10] = C_CONNECTED;
#line 3114
  c_tab[11] = C_STARTING_SYNC_T;
#line 3114
  c_tab[12] = C_STARTING_SYNC_S;
#line 3114
  c_tab[13] = 0;
#line 3114
  c_tab[14] = 0;
#line 3114
  c_tab[15] = 0;
#line 3114
  c_tab[16] = 0;
#line 3114
  c_tab[17] = 0;
#line 3114
  c_tab[18] = C_VERIFY_T;
#line 3114
  c_tab[19] = 0;
#line 3114
  c_tab[20] = 0;
#line 3114
  c_tab[21] = 0;
#line 3114
  c_tab[22] = 0;
#line 3114
  c_tab[23] = 0;
#line 3114
  c_tab[24] = 0;
#line 3114
  c_tab[25] = 0;
#line 3114
  c_tab[26] = 0;
#line 3114
  c_tab[27] = 0;
#line 3114
  c_tab[28] = 0;
#line 3114
  c_tab[29] = 0;
#line 3114
  c_tab[30] = 0;
#line 3114
  c_tab[31] = C_MASK;
#line 3124
  ms.i = ps.i;
#line 3126
  ms.ldv_37735.conn = (unsigned char )c_tab[(int )ps.ldv_37735.conn];
#line 3127
  ms.ldv_37735.peer = ps.ldv_37735.role;
#line 3128
  ms.ldv_37735.role = ps.ldv_37735.peer;
#line 3129
  ms.ldv_37735.pdsk = ps.ldv_37735.disk;
#line 3130
  ms.ldv_37735.disk = ps.ldv_37735.pdsk;
#line 3131
  ms.ldv_37735.peer_isp = (unsigned char )((int )ps.ldv_37735.aftr_isp | (int )ps.ldv_37735.user_isp);
#line 3133
  return (ms);
}
}
#line 3136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3138
  p = & mdev->data.rbuf.req_state;
#line 3142
  tmp = __fswab32(p->mask);
#line 3142
  mask.i = tmp;
#line 3143
  tmp___0 = __fswab32(p->val);
#line 3143
  val.i = tmp___0;
#line 3145
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3145
  if (tmp___1 != 0) {
#line 3145
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3145
    if (tmp___2 != 0) {
#line 3147
      drbd_send_sr_reply(mdev, -19);
#line 3148
      return (1);
    } else {

    }
  } else {

  }
#line 3151
  mask = convert_state(mask);
#line 3152
  val = convert_state(val);
#line 3154
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3156
  drbd_send_sr_reply(mdev, rv);
#line 3157
  drbd_md_sync(mdev);
#line 3159
  return (1);
}
}
#line 3162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3164
  p = & mdev->data.rbuf.state;
#line 3170
  tmp = __fswab32(p->state);
#line 3170
  peer_state.i = tmp;
#line 3172
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_37735.disk;
#line 3173
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3174
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3175
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3175
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3178
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3180
  ns = mdev->state;
#line 3180
  os = ns;
#line 3181
  spin_unlock_irq(& mdev->req_lock);
#line 3185
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_37735.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3193
    if ((int )peer_state.ldv_37735.conn > 10 && (int )peer_state.ldv_37735.conn <= 15) {
#line 3195
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3200
    if ((int )os.ldv_37735.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3202
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3202
      if (tmp___1 <= mdev->rs_failed) {
#line 3203
        drbd_resync_finished(mdev);
      } else {

      }
#line 3204
      return (1);
    } else {

    }
  } else {

  }
#line 3213
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_37735.conn > 16) {
#line 3215
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3217
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3218
    ns.ldv_37735.conn = 10U;
  } else {

  }
#line 3220
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_37735.disk > 2) {
#line 3220
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3220
    if (tmp___5 != 0) {
#line 3225
      cr = (int )os.ldv_37735.conn <= 9;
#line 3228
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3233
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3233
      cr = tmp___2 | cr;
#line 3236
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_37735.conn > 10 && (int )peer_state.ldv_37735.conn <= 14)) | cr;
#line 3240
      if (cr != 0) {
#line 3241
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_37735.role,
                                      real_peer_disk);
#line 3241
        ns.ldv_37735.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3243
      put_ldev(mdev);
#line 3244
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3245
        ns.ldv_37735.conn = 10U;
#line 3246
        if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 6U) {
#line 3247
          val.i = 0U;
#line 3247
          val.ldv_37735.disk = 2U;
#line 3247
          mask.i = 0U;
#line 3247
          mask.ldv_37735.disk = 15U;
#line 3247
          drbd_force_state(mdev, mask, val);
        } else
#line 3248
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3249
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3250
          peer_state.ldv_37735.disk = 0U;
#line 3251
          real_peer_disk = D_DISKLESS;
        } else {
#line 3253
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3253
          if (tmp___4 != 0) {
#line 3254
            return (0);
          } else {

          }
#line 3255
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3255
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3255);
          } else {

          }
#line 3256
          val___0.i = 0U;
#line 3256
          val___0.ldv_37735.conn = 1U;
#line 3256
          mask___0.i = 0U;
#line 3256
          mask___0.ldv_37735.conn = 31U;
#line 3256
          drbd_force_state(mdev, mask___0, val___0);
#line 3257
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3262
  spin_lock_irq(& mdev->req_lock);
#line 3263
  if (mdev->state.i != os.i) {
#line 3264
    goto retry;
  } else {

  }
#line 3265
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3266
  ns.ldv_37735.peer = peer_state.ldv_37735.role;
#line 3267
  ns.ldv_37735.pdsk = (unsigned char )real_peer_disk;
#line 3268
  ns.ldv_37735.peer_isp = (unsigned char )((int )peer_state.ldv_37735.aftr_isp | (int )peer_state.ldv_37735.user_isp);
#line 3269
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3270
    ns.ldv_37735.disk = mdev->new_state_tmp.ldv_37735.disk;
  } else {

  }
#line 3271
  cs_flags = (enum chg_state_flags )(((int )os.ldv_37735.conn > 9 || (int )ns.ldv_37735.conn <= 9) + 2);
#line 3272
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3272
    tmp___6 = is_susp(ns);
#line 3272
    if (tmp___6 != 0) {
#line 3272
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3272
        if ((int )os.ldv_37735.conn <= 9) {
#line 3272
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3272
          if (tmp___7 != 0) {
#line 3276
            spin_unlock_irq(& mdev->req_lock);
#line 3277
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3278
            tl_clear(mdev);
#line 3279
            drbd_uuid_new_current(mdev);
#line 3280
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3281
            val___1.i = 0U;
#line 3281
            val___1.ldv_37735.conn = 6U;
#line 3281
            val___1.ldv_37735.susp = 0U;
#line 3281
            mask___1.i = 0U;
#line 3281
            mask___1.ldv_37735.conn = 31U;
#line 3281
            mask___1.ldv_37735.susp = 1U;
#line 3281
            drbd_force_state(mdev, mask___1, val___1);
#line 3282
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3284
  rv = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3285
  ns = mdev->state;
#line 3286
  spin_unlock_irq(& mdev->req_lock);
#line 3288
  if (rv <= 0) {
#line 3289
    val___2.i = 0U;
#line 3289
    val___2.ldv_37735.conn = 1U;
#line 3289
    mask___2.i = 0U;
#line 3289
    mask___2.ldv_37735.conn = 31U;
#line 3289
    drbd_force_state(mdev, mask___2, val___2);
#line 3290
    return (0);
  } else {

  }
#line 3293
  if ((int )os.ldv_37735.conn > 9) {
#line 3294
    if (((int )ns.ldv_37735.conn > 10 && (int )peer_state.ldv_37735.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3299
      drbd_send_uuids(mdev);
#line 3300
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3304
  (mdev->net_conf)->want_lose = 0U;
#line 3306
  drbd_md_sync(mdev);
#line 3308
  return (1);
}
}
#line 3311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3313
  p = & mdev->data.rbuf.rs_uuid;
#line 3315
  if (((unsigned int )*((unsigned short *)mdev + 998UL) == 240U || (int )mdev->state.ldv_37735.conn <= 9) || (int )mdev->state.ldv_37735.disk <= 2) {
#line 3315
    goto ldv_49207;
  } else {

  }
#line 3315
  tmp = get_current();
#line 3315
  __wait.flags = 0U;
#line 3315
  __wait.private = (void *)tmp;
#line 3315
  __wait.func = & autoremove_wake_function;
#line 3315
  __wait.task_list.next = & __wait.task_list;
#line 3315
  __wait.task_list.prev = & __wait.task_list;
  ldv_49210: 
#line 3315
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3315
  if (((unsigned int )*((unsigned short *)mdev + 998UL) == 240U || (int )mdev->state.ldv_37735.conn <= 9) || (int )mdev->state.ldv_37735.disk <= 2) {
#line 3315
    goto ldv_49209;
  } else {

  }
#line 3315
  schedule();
#line 3315
  goto ldv_49210;
  ldv_49209: 
#line 3315
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49207: 
#line 3324
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3324
  if (tmp___1 != 0) {
#line 3325
    tmp___0 = __fswab64(p->uuid);
#line 3325
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3326
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3328
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3330
    put_ldev(mdev);
  } else {
#line 3332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3334
  return (1);
}
}
#line 3340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3343
  __min1 = 511UL;
#line 3343
  __min2 = c->bm_words - c->word_offset;
#line 3343
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3344
  want = num_words * 8U;
#line 3346
  if (want != data_size) {
#line 3347
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3348
    return (FAILED);
  } else {

  }
#line 3350
  if (want == 0U) {
#line 3351
    return (DONE);
  } else {

  }
#line 3352
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3352
  if ((unsigned int )tmp != want) {
#line 3353
    return (FAILED);
  } else {

  }
#line 3355
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3357
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3358
  c->bit_offset = c->word_offset * 64UL;
#line 3359
  if (c->bit_offset > c->bm_bits) {
#line 3360
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3362
  return (OK);
}
}
#line 3366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3374
  s = c->bit_offset;
#line 3376
  tmp___0 = __fswab16((int )p->head.length);
#line 3376
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3377
  tmp___1 = DCBP_get_start(p);
#line 3377
  toggle = tmp___1;
#line 3381
  tmp___2 = DCBP_get_pad_bits(p);
#line 3381
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3383
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3384
  if (bits < 0) {
#line 3385
    return (FAILED);
  } else {

  }
#line 3387
  have = bits;
#line 3387
  goto ldv_49243;
  ldv_49242: 
#line 3388
  bits = vli_decode_bits(& rl, look_ahead);
#line 3389
  if (bits <= 0) {
#line 3390
    return (FAILED);
  } else {

  }
#line 3392
  if (toggle != 0) {
#line 3393
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3394
    if (c->bm_bits <= e) {
#line 3395
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3396
      return (FAILED);
    } else {

    }
#line 3398
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3401
  if (have < bits) {
#line 3402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3406
    return (FAILED);
  } else {

  }
#line 3408
  look_ahead = look_ahead >> bits;
#line 3409
  have = have - bits;
#line 3411
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3412
  if (bits < 0) {
#line 3413
    return (FAILED);
  } else {

  }
#line 3414
  look_ahead = (tmp << have) | look_ahead;
#line 3415
  have = have + bits;
#line 3387
  s = (unsigned long )((unsigned long long )s + rl);
#line 3387
  toggle = toggle == 0;
  ldv_49243: ;
#line 3387
  if (have > 0) {
#line 3388
    goto ldv_49242;
  } else {

  }
#line 3418
  c->bit_offset = s;
#line 3419
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3421
  return (c->bm_bits == s);
}
}
#line 3425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3429
  tmp___0 = DCBP_get_code(p);
#line 3429
  if ((unsigned int )tmp___0 == 2U) {
#line 3430
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3430
    return (tmp);
  } else {

  }
#line 3436
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3437
  val.i = 0U;
#line 3437
  val.ldv_37735.conn = 6U;
#line 3437
  mask.i = 0U;
#line 3437
  mask.ldv_37735.conn = 31U;
#line 3437
  drbd_force_state(mdev, mask, val);
#line 3438
  return (FAILED);
}
}
#line 3441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3445
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3448
  total = c->bytes[0] + c->bytes[1];
#line 3452
  if (total == 0U) {
#line 3453
    return;
  } else {

  }
#line 3456
  if (total >= plain) {
#line 3457
    return;
  } else {

  }
#line 3460
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3463
  if (r > 1000U) {
#line 3464
    r = 1000U;
  } else {

  }
#line 3466
  r = 1000U - r;
#line 3467
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3468
  return;
}
}
#line 3483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  struct p_header80 *h ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3488
  ok = 0;
#line 3489
  h = & mdev->data.rbuf.header.h80;
#line 3491
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3491
  if (tmp == 0) {
#line 3491
    goto ldv_49272;
  } else {

  }
#line 3491
  tmp___0 = get_current();
#line 3491
  __wait.flags = 0U;
#line 3491
  __wait.private = (void *)tmp___0;
#line 3491
  __wait.func = & autoremove_wake_function;
#line 3491
  __wait.task_list.next = & __wait.task_list;
#line 3491
  __wait.task_list.prev = & __wait.task_list;
  ldv_49275: 
#line 3491
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3491
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3491
  if (tmp___1 == 0) {
#line 3491
    goto ldv_49274;
  } else {

  }
#line 3491
  schedule();
#line 3491
  goto ldv_49275;
  ldv_49274: 
#line 3491
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49272: 
#line 3493
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3497
  tmp___2 = __get_free_pages(16U, 0U);
#line 3497
  buffer = (void *)tmp___2;
#line 3498
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3499
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3500
    goto out;
  } else {

  }
#line 3503
  tmp___3 = drbd_bm_bits(mdev);
#line 3503
  tmp___4 = drbd_bm_words(mdev);
#line 3503
  __constr_expr_0.bm_bits = tmp___3;
#line 3503
  __constr_expr_0.bm_words = tmp___4;
#line 3503
  __constr_expr_0.bit_offset = 0UL;
#line 3503
  __constr_expr_0.word_offset = 0UL;
#line 3503
  __constr_expr_0.packets[0] = 0U;
#line 3503
  __constr_expr_0.packets[1] = 0U;
#line 3503
  __constr_expr_0.bytes[0] = 0U;
#line 3503
  __constr_expr_0.bytes[1] = 0U;
#line 3503
  c = __constr_expr_0;
  ldv_49284: ;
#line 3509
  if ((unsigned int )cmd == 4U) {
#line 3510
    ret = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3511
  if ((unsigned int )cmd == 36U) {
#line 3516
    if (data_size > 4088U) {
#line 3517
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3518
      goto out;
    } else {

    }
#line 3521
    p = (struct p_compressed_bm *)buffer;
#line 3522
    __len = 8UL;
#line 3522
    if (__len > 63UL) {
#line 3522
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3522
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3523
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3523
    if ((unsigned int )tmp___5 != data_size) {
#line 3524
      goto out;
    } else {

    }
#line 3525
    if (data_size <= 1U) {
#line 3526
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3527
      return (2);
    } else {

    }
#line 3529
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3531
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3532
    goto out;
  }
#line 3535
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3536
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3538
  if ((unsigned int )ret != 0U) {
#line 3539
    goto ldv_49283;
  } else {

  }
#line 3541
  tmp___6 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3541
  if (tmp___6 == 0) {
#line 3542
    goto out;
  } else {

  }
#line 3543
  if ((unsigned int )ret == 0U) {
#line 3544
    goto ldv_49284;
  } else {

  }
  ldv_49283: ;
#line 3544
  if ((unsigned int )ret == 2U) {
#line 3545
    goto out;
  } else {

  }
#line 3547
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3549
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 224U) {
#line 3550
    tmp___7 = drbd_send_bitmap(mdev);
#line 3550
    ok = tmp___7 == 0;
#line 3551
    if (ok == 0) {
#line 3552
      goto out;
    } else {

    }
#line 3554
    val.i = 0U;
#line 3554
    val.ldv_37735.conn = 15U;
#line 3554
    mask.i = 0U;
#line 3554
    mask.ldv_37735.conn = 31U;
#line 3554
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3555
    if (ok != 1) {
#line 3555
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3555);
    } else {

    }
  } else
#line 3556
  if ((unsigned int )*((unsigned short *)mdev + 998UL) != 208U) {
#line 3559
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37735.conn);
#line 3559
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3563
  ok = 1;
  out: 
#line 3565
  drbd_bm_unlock(mdev);
#line 3566
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 998UL) == 208U) {
#line 3567
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3568
  free_pages((unsigned long )buffer, 0U);
#line 3569
  return (ok);
}
}
#line 3572 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3578
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3581
  size = (int )data_size;
#line 3582
  goto ldv_49306;
  ldv_49305: 
#line 3583
  __min1 = size;
#line 3583
  __min2 = 128;
#line 3583
  want = __min1 < __min2 ? __min1 : __min2;
#line 3584
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3585
  _b = r <= 0;
#line 3585
  if (_b != 0) {
#line 3585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3585);
  } else {

  }
#line 3585
  if (_b != 0) {
#line 3585
    goto ldv_49304;
  } else {

  }
#line 3586
  size = size - r;
  ldv_49306: ;
#line 3582
  if (size > 0) {
#line 3583
    goto ldv_49305;
  } else {

  }
  ldv_49304: ;
#line 3588
  return (size == 0);
}
}
#line 3591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3595
  drbd_tcp_quickack(mdev->data.socket);
#line 3597
  return (1);
}
}
#line 3608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[41U]  = 
#line 3608
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 0UL, 0}};
#line 3642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3644
  header = & mdev->data.rbuf.header;
#line 3650
  goto ldv_49331;
  ldv_49330: 
#line 3651
  drbd_thread_current_set_cpu(mdev);
#line 3652
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3652
  if (tmp == 0) {
#line 3653
    goto err_out;
  } else {

  }
#line 3655
  tmp___0 = __builtin_expect((unsigned int )cmd > 39U, 0L);
#line 3655
  if (tmp___0 != 0L) {
#line 3656
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3657
    goto err_out;
  } else {
#line 3655
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3655
    if (tmp___1 != 0L) {
#line 3656
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3657
      goto err_out;
    } else {

    }
  }
#line 3660
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3661
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3662
    tmp___2 = cmdname(cmd);
#line 3662
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3663
    goto err_out;
  } else {

  }
#line 3666
  if (shs != 0UL) {
#line 3667
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3668
    tmp___3 = __builtin_expect((size_t )rv != shs, 0L);
#line 3668
    if (tmp___3 != 0L) {
#line 3669
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
              rv);
#line 3670
      goto err_out;
    } else {

    }
  } else {

  }
#line 3674
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3676
  tmp___5 = __builtin_expect(rv == 0, 0L);
#line 3676
  if (tmp___5 != 0L) {
#line 3677
    tmp___4 = cmdname(cmd);
#line 3677
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___4, packet_size);
#line 3679
    goto err_out;
  } else {

  }
  ldv_49331: 
#line 3650
  tmp___6 = get_t_state(& mdev->receiver);
#line 3650
  if ((unsigned int )tmp___6 == 1U) {
#line 3651
    goto ldv_49330;
  } else {

  }

#line 3683
  if (0) {
    err_out: 
#line 3685
    val.i = 0U;
#line 3685
    val.ldv_37735.conn = 6U;
#line 3685
    mask.i = 0U;
#line 3685
    mask.ldv_37735.conn = 31U;
#line 3685
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3689
  drbd_md_sync(mdev);
#line 3690
  return;
}
}
#line 3692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3696
  barr.w.cb = & w_prev_work_done;
#line 3697
  init_completion(& barr.done);
#line 3698
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3699
  wait_for_completion(& barr.done);
#line 3700
  return;
}
}
#line 3702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3706
  spin_lock_irq(& mdev->req_lock);
#line 3708
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 998UL) != 0U) {
#line 3709
    spin_unlock_irq(& mdev->req_lock);
#line 3710
    return;
  } else {

  }
#line 3713
  h = mdev->ee_hash;
#line 3713
  goto ldv_49346;
  ldv_49345: ;
#line 3714
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3715
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3713
  h = h + 1;
  ldv_49346: ;
#line 3713
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3714
    goto ldv_49345;
  } else {

  }
#line 3717
  kfree((void const   *)mdev->ee_hash);
#line 3718
  mdev->ee_hash = 0;
#line 3719
  mdev->ee_hash_s = 0U;
#line 3722
  h = mdev->tl_hash;
#line 3722
  goto ldv_49349;
  ldv_49348: ;
#line 3723
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3722
  h = h + 1;
  ldv_49349: ;
#line 3722
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3723
    goto ldv_49348;
  } else {

  }
#line 3726
  kfree((void const   *)mdev->tl_hash);
#line 3727
  mdev->tl_hash = 0;
#line 3728
  mdev->tl_hash_s = 0U;
#line 3729
  spin_unlock_irq(& mdev->req_lock);
#line 3730
  return;
}
}
#line 3732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3736
  rv = 0;
#line 3739
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 0U) {
#line 3740
    return;
  } else {

  }
#line 3741
  if ((int )mdev->state.ldv_37735.conn > 7) {
#line 3742
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37735.conn);
#line 3742
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3746
  drbd_thread_stop(& mdev->asender);
#line 3747
  drbd_free_sock(mdev);
#line 3750
  spin_lock_irq(& mdev->req_lock);
#line 3751
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3752
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3753
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3754
  spin_unlock_irq(& mdev->req_lock);
#line 3766
  drbd_rs_cancel_all(mdev);
#line 3767
  mdev->rs_total = 0UL;
#line 3768
  mdev->rs_failed = 0UL;
#line 3769
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3770
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3773
  del_timer_sync(& mdev->resync_timer);
#line 3774
  resync_timer_fn((unsigned long )mdev);
#line 3779
  drbd_flush_workqueue(mdev);
#line 3783
  drbd_process_done_ee(mdev);
#line 3785
  kfree((void const   *)mdev->p_uuid);
#line 3786
  mdev->p_uuid = 0;
#line 3788
  tmp___0 = is_susp(mdev->state);
#line 3788
  if (tmp___0 == 0) {
#line 3789
    tl_clear(mdev);
  } else {

  }
#line 3791
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3793
  drbd_md_sync(mdev);
#line 3795
  fp = FP_DONT_CARE;
#line 3796
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3796
  if (tmp___1 != 0) {
#line 3797
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3798
    put_ldev(mdev);
  } else {

  }
#line 3801
  if (((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_37735.pdsk > 5) {
#line 3802
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3804
  spin_lock_irq(& mdev->req_lock);
#line 3805
  os = mdev->state;
#line 3806
  if ((int )os.ldv_37735.conn > 1) {
#line 3808
    ns = os;
#line 3809
    ns.ldv_37735.conn = 2U;
#line 3810
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3812
  spin_unlock_irq(& mdev->req_lock);
#line 3814
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3815
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3815
    if (tmp___2 == 0) {
#line 3815
      goto ldv_49359;
    } else {

    }
#line 3815
    tmp___3 = get_current();
#line 3815
    __wait.flags = 0U;
#line 3815
    __wait.private = (void *)tmp___3;
#line 3815
    __wait.func = & autoremove_wake_function;
#line 3815
    __wait.task_list.next = & __wait.task_list;
#line 3815
    __wait.task_list.prev = & __wait.task_list;
    ldv_49362: 
#line 3815
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3815
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3815
    if (tmp___4 == 0) {
#line 3815
      goto ldv_49361;
    } else {

    }
#line 3815
    schedule();
#line 3815
    goto ldv_49362;
    ldv_49361: 
#line 3815
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_49359: 
#line 3817
    tmp___8 = is_susp(mdev->state);
#line 3817
    if (tmp___8 == 0) {
#line 3820
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3820
      if (tmp___5 == 0) {
#line 3820
        goto ldv_49363;
      } else {

      }
#line 3820
      tmp___6 = get_current();
#line 3820
      __wait___0.flags = 0U;
#line 3820
      __wait___0.private = (void *)tmp___6;
#line 3820
      __wait___0.func = & autoremove_wake_function;
#line 3820
      __wait___0.task_list.next = & __wait___0.task_list;
#line 3820
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49366: 
#line 3820
      prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3820
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3820
      if (tmp___7 == 0) {
#line 3820
        goto ldv_49365;
      } else {

      }
#line 3820
      schedule();
#line 3820
      goto ldv_49366;
      ldv_49365: 
#line 3820
      finish_wait(& mdev->misc_wait, & __wait___0);
      ldv_49363: 
#line 3821
      drbd_free_tl_hash(mdev);
    } else {

    }
#line 3824
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3825
    mdev->cram_hmac_tfm = 0;
#line 3827
    kfree((void const   *)mdev->net_conf);
#line 3828
    mdev->net_conf = 0;
#line 3829
    val.i = 0U;
#line 3829
    val.ldv_37735.conn = 0U;
#line 3829
    mask.i = 0U;
#line 3829
    mask.ldv_37735.conn = 31U;
#line 3829
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3839
  tmp___9 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3839
  i = (unsigned int )tmp___9;
#line 3840
  if (i != 0U) {
#line 3841
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3842
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3842
  i = (unsigned int )tmp___10;
#line 3843
  if (i != 0U) {
#line 3844
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3845
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3845
  i = (unsigned int )tmp___11;
#line 3846
  if (i != 0U) {
#line 3847
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3849
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3849
  if (tmp___12 == 0) {
#line 3849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3849);
  } else {

  }
#line 3850
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3850
  if (tmp___13 == 0) {
#line 3850
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3850);
  } else {

  }
#line 3851
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3851
  if (tmp___14 == 0) {
#line 3851
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3851);
  } else {

  }
#line 3852
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3852
  if (tmp___15 == 0) {
#line 3852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3852);
  } else {

  }
#line 3855
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3856
  tmp___16 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3856
  if (tmp___16 == 0) {
#line 3856
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3856);
  } else {

  }
#line 3857
  return;
}
}
#line 3868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3871
  p = & mdev->data.sbuf.handshake;
#line 3874
  tmp = ldv_mutex_lock_interruptible_69(& mdev->data.mutex);
#line 3874
  if (tmp != 0) {
#line 3875
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3876
    return (0);
  } else {

  }
#line 3879
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3880
    ldv_mutex_unlock_70(& mdev->data.mutex);
#line 3881
    return (0);
  } else {

  }
#line 3884
  memset((void *)p, 0, 80UL);
#line 3885
  p->protocol_min = 1442840576U;
#line 3886
  p->protocol_max = 1593835520U;
#line 3887
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3889
  ldv_mutex_unlock_71(& mdev->data.mutex);
#line 3890
  return (ok);
}
}
#line 3900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 3903
  p = & mdev->data.rbuf.handshake;
#line 3904
  expect = 72;
#line 3909
  rv = drbd_send_handshake(mdev);
#line 3910
  if (rv == 0) {
#line 3911
    return (0);
  } else {

  }
#line 3913
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 3914
  if (rv == 0) {
#line 3915
    return (0);
  } else {

  }
#line 3917
  if ((unsigned int )cmd != 65534U) {
#line 3918
    tmp = cmdname(cmd);
#line 3918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 3920
    return (-1);
  } else {

  }
#line 3923
  if ((unsigned int )expect != length) {
#line 3924
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 3926
    return (-1);
  } else {

  }
#line 3929
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3931
  if (rv != expect) {
#line 3932
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 3933
    return (0);
  } else {

  }
#line 3936
  tmp___0 = __fswab32(p->protocol_min);
#line 3936
  p->protocol_min = tmp___0;
#line 3937
  tmp___1 = __fswab32(p->protocol_max);
#line 3937
  p->protocol_max = tmp___1;
#line 3938
  if (p->protocol_max == 0U) {
#line 3939
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3941
  if (p->protocol_min > 95U || p->protocol_max <= 85U) {
#line 3943
    goto incompat;
  } else {

  }
#line 3945
  __min1 = 95;
#line 3945
  __min2 = (int )p->protocol_max;
#line 3945
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3947
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 3950
  return (1);
  incompat: 
#line 3953
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 95, p->protocol_min, p->protocol_max);
#line 3957
  return (-1);
}
}
#line 3976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 3980
  response = 0;
#line 3981
  right_response = 0;
#line 3982
  peers_ch = 0;
#line 3983
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3983
  key_len = (unsigned int )tmp;
#line 3990
  desc.tfm = mdev->cram_hmac_tfm;
#line 3991
  desc.flags = 0U;
#line 3993
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3995
  if (rv != 0) {
#line 3996
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 3997
    rv = -1;
#line 3998
    goto fail;
  } else {

  }
#line 4001
  get_random_bytes((void *)(& my_challenge), 64);
#line 4003
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4004
  if (rv == 0) {
#line 4005
    goto fail;
  } else {

  }
#line 4007
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4008
  if (rv == 0) {
#line 4009
    goto fail;
  } else {

  }
#line 4011
  if ((unsigned int )cmd != 16U) {
#line 4012
    tmp___0 = cmdname(cmd);
#line 4012
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4014
    rv = 0;
#line 4015
    goto fail;
  } else {

  }
#line 4018
  if (length > 128U) {
#line 4019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4020
    rv = -1;
#line 4021
    goto fail;
  } else {

  }
#line 4024
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4024
  peers_ch = (char *)tmp___1;
#line 4025
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4027
    rv = -1;
#line 4028
    goto fail;
  } else {

  }
#line 4031
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4033
  if ((unsigned int )rv != length) {
#line 4034
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4035
    rv = 0;
#line 4036
    goto fail;
  } else {

  }
#line 4039
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4040
  tmp___2 = kmalloc((size_t )resp_size, 16U);
#line 4040
  response = (char *)tmp___2;
#line 4041
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4043
    rv = -1;
#line 4044
    goto fail;
  } else {

  }
#line 4047
  sg_init_table(& sg, 1U);
#line 4048
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4050
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4051
  if (rv != 0) {
#line 4052
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4053
    rv = -1;
#line 4054
    goto fail;
  } else {

  }
#line 4057
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4058
  if (rv == 0) {
#line 4059
    goto fail;
  } else {

  }
#line 4061
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4062
  if (rv == 0) {
#line 4063
    goto fail;
  } else {

  }
#line 4065
  if ((unsigned int )cmd != 17U) {
#line 4066
    tmp___3 = cmdname(cmd);
#line 4066
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (unsigned int )cmd);
#line 4068
    rv = 0;
#line 4069
    goto fail;
  } else {

  }
#line 4072
  if (length != resp_size) {
#line 4073
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4074
    rv = 0;
#line 4075
    goto fail;
  } else {

  }
#line 4078
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4080
  if ((unsigned int )rv != resp_size) {
#line 4081
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4082
    rv = 0;
#line 4083
    goto fail;
  } else {

  }
#line 4086
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4086
  right_response = (char *)tmp___4;
#line 4087
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4088
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4089
    rv = -1;
#line 4090
    goto fail;
  } else {

  }
#line 4093
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4095
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4096
  if (rv != 0) {
#line 4097
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4098
    rv = -1;
#line 4099
    goto fail;
  } else {

  }
#line 4102
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4102
  rv = tmp___5 == 0;
#line 4104
  if (rv != 0) {
#line 4105
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4108
    rv = -1;
  }
  fail: 
#line 4111
  kfree((void const   *)peers_ch);
#line 4112
  kfree((void const   *)response);
#line 4113
  kfree((void const   *)right_response);
#line 4115
  return (rv);
}
}
#line 4119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4121
  mdev = thi->mdev;
#line 4122
  tmp = mdev_to_minor(mdev);
#line 4122
  minor = tmp;
#line 4125
  tmp___0 = get_current();
#line 4125
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4127
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_49413: 
#line 4130
  h = drbd_connect(mdev);
#line 4131
  if (h == 0) {
#line 4132
    drbd_disconnect(mdev);
#line 4133
    tmp___1 = get_current();
#line 4133
    tmp___1->state = 1L;
#line 4134
    schedule_timeout(250L);
  } else {

  }
#line 4136
  if (h == -1) {
#line 4137
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4138
    val.i = 0U;
#line 4138
    val.ldv_37735.conn = 1U;
#line 4138
    mask.i = 0U;
#line 4138
    mask.ldv_37735.conn = 31U;
#line 4138
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4140
  if (h == 0) {
#line 4141
    goto ldv_49413;
  } else {

  }

#line 4142
  if (h > 0) {
#line 4143
    tmp___2 = get_net_conf(mdev);
#line 4143
    if (tmp___2 != 0) {
#line 4144
      drbdd(mdev);
#line 4145
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4149
  drbd_disconnect(mdev);
#line 4151
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4152
  return (0);
}
}
#line 4157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4159
  p = (struct p_req_state_reply *)h;
#line 4161
  tmp = __fswab32(p->retcode);
#line 4161
  retcode = (int )tmp;
#line 4163
  if (retcode > 0) {
#line 4164
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4166
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4167
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4170
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4172
  return (1);
}
}
#line 4175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4177
  tmp = drbd_send_ping_ack(mdev);
#line 4177
  return (tmp);
}
}
#line 4181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4184
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4185
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4185
  if (tmp == 0) {
#line 4186
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4188
  return (1);
}
}
#line 4191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4193
  p = (struct p_block_ack *)h;
#line 4194
  tmp = __fswab64(p->sector);
#line 4194
  sector = (sector_t )tmp;
#line 4195
  tmp___0 = __fswab32(p->blksize);
#line 4195
  blksize = (int )tmp___0;
#line 4197
  if (mdev->agreed_pro_version <= 88) {
#line 4197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4197);
  } else {

  }
#line 4199
  tmp___1 = __fswab32(p->seq_num);
#line 4199
  update_peer_seq(mdev, tmp___1);
#line 4201
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4201
  if (tmp___2 != 0) {
#line 4202
    drbd_rs_complete_io(mdev, sector);
#line 4203
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4203U);
#line 4205
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4206
    put_ldev(mdev);
  } else {

  }
#line 4208
  atomic_dec(& mdev->rs_pending_cnt);
#line 4208
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4208
  if (tmp___4 < 0) {
#line 4208
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4208, tmp___3);
  } else {

  }
#line 4209
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4211
  return (1);
}
}
#line 4216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4219
  tmp = tl_hash_slot(mdev, sector);
#line 4219
  slot = tmp;
#line 4223
  n = slot->first;
#line 4223
  goto ldv_49454;
  ldv_49453: ;
#line 4224
  if ((unsigned long )req == (unsigned long )id) {
#line 4225
    if (req->sector != sector) {
#line 4226
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4230
      goto ldv_49452;
    } else {

    }
#line 4232
    return (req);
  } else {

  }
#line 4223
  n = n->next;
  ldv_49454: ;
#line 4223
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4223
    __builtin_prefetch((void const   *)n->next);
#line 4223
    if (1 != 0) {
#line 4223
      __mptr = (struct hlist_node  const  *)n;
#line 4223
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4223
      if (1 != 0) {
#line 4224
        goto ldv_49453;
      } else {
#line 4226
        goto ldv_49452;
      }
    } else {
#line 4226
      goto ldv_49452;
    }
  } else {

  }
  ldv_49452: 
#line 4235
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4237
  return (0);
}
}
#line 4243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4250
  spin_lock_irq(& mdev->req_lock);
#line 4251
  req = (*validator)(mdev, id, sector);
#line 4252
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4252
  if (tmp != 0L) {
#line 4253
    spin_unlock_irq(& mdev->req_lock);
#line 4254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4255
    return (0);
  } else {

  }
#line 4257
  __req_mod(req, what, & m);
#line 4258
  spin_unlock_irq(& mdev->req_lock);
#line 4260
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4261
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4262
  return (1);
}
}
#line 4265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4267
  p = (struct p_block_ack *)h;
#line 4268
  tmp = __fswab64(p->sector);
#line 4268
  sector = (sector_t )tmp;
#line 4269
  tmp___0 = __fswab32(p->blksize);
#line 4269
  blksize = (int )tmp___0;
#line 4272
  tmp___1 = __fswab32(p->seq_num);
#line 4272
  update_peer_seq(mdev, tmp___1);
#line 4274
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4275
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4275U);
#line 4276
    atomic_dec(& mdev->rs_pending_cnt);
#line 4276
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4276
    if (tmp___3 < 0) {
#line 4276
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4276
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4276, tmp___2);
    } else {

    }
#line 4277
    return (1);
  } else {

  }
#line 4279
  tmp___4 = __fswab16((int )h->command);
#line 4279
  switch ((int )tmp___4) {
  case 23: ;
#line 4281
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4281
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4281);
  } else {

  }
#line 4282
  what = write_acked_by_peer_and_sis;
#line 4283
  goto ldv_49482;
  case 22: ;
#line 4285
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4285);
  } else {

  }
#line 4286
  what = write_acked_by_peer;
#line 4287
  goto ldv_49482;
  case 21: ;
#line 4289
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4289);
  } else {

  }
#line 4290
  what = recv_acked_by_peer;
#line 4291
  goto ldv_49482;
  case 24: ;
#line 4293
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4293);
  } else {

  }
#line 4294
  what = conflict_discarded_by_peer;
#line 4295
  goto ldv_49482;
  default: 
#line 4297
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4297);
#line 4298
  return (0);
  }
  ldv_49482: 
#line 4301
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4301
  return (tmp___5);
}
}
#line 4305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4307
  p = (struct p_block_ack *)h;
#line 4308
  tmp = __fswab64(p->sector);
#line 4308
  sector = (sector_t )tmp;
#line 4310
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4310
  if (tmp___0 != 0) {
#line 4311
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4313
  tmp___1 = __fswab32(p->seq_num);
#line 4313
  update_peer_seq(mdev, tmp___1);
#line 4315
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4316
    tmp___2 = __fswab32(p->blksize);
#line 4316
    size = (int )tmp___2;
#line 4317
    atomic_dec(& mdev->rs_pending_cnt);
#line 4317
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4317
    if (tmp___4 < 0) {
#line 4317
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4317
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4317, tmp___3);
    } else {

    }
#line 4318
    drbd_rs_failed_io(mdev, sector, size);
#line 4319
    return (1);
  } else {

  }
#line 4321
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4321
  return (tmp___5);
}
}
#line 4325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4327
  p = (struct p_block_ack *)h;
#line 4328
  tmp = __fswab64(p->sector);
#line 4328
  sector = (sector_t )tmp;
#line 4330
  tmp___0 = __fswab32(p->seq_num);
#line 4330
  update_peer_seq(mdev, tmp___0);
#line 4331
  tmp___1 = __fswab32(p->blksize);
#line 4331
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4334
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4334
  return (tmp___2);
}
}
#line 4338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4342
  p = (struct p_block_ack *)h;
#line 4344
  tmp = __fswab64(p->sector);
#line 4344
  sector = (sector_t )tmp;
#line 4345
  tmp___0 = __fswab32(p->blksize);
#line 4345
  size = (int )tmp___0;
#line 4347
  tmp___1 = __fswab32(p->seq_num);
#line 4347
  update_peer_seq(mdev, tmp___1);
#line 4349
  atomic_dec(& mdev->rs_pending_cnt);
#line 4349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4349
  if (tmp___3 < 0) {
#line 4349
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4349
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4349, tmp___2);
  } else {

  }
#line 4351
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4351
  if (tmp___4 != 0) {
#line 4352
    drbd_rs_complete_io(mdev, sector);
#line 4353
    drbd_rs_failed_io(mdev, sector, size);
#line 4354
    put_ldev(mdev);
  } else {

  }
#line 4357
  return (1);
}
}
#line 4360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4362
  p = (struct p_barrier_ack *)h;
#line 4364
  tmp = __fswab32(p->set_size);
#line 4364
  tl_release(mdev, p->barrier, tmp);
#line 4366
  return (1);
}
}
#line 4369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4371
  p = (struct p_block_ack *)h;
#line 4376
  tmp = __fswab64(p->sector);
#line 4376
  sector = (sector_t )tmp;
#line 4377
  tmp___0 = __fswab32(p->blksize);
#line 4377
  size = (int )tmp___0;
#line 4379
  tmp___1 = __fswab32(p->seq_num);
#line 4379
  update_peer_seq(mdev, tmp___1);
#line 4381
  tmp___2 = __fswab64(p->block_id);
#line 4381
  if (tmp___2 == 4712ULL) {
#line 4382
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4384
    ov_oos_print(mdev);
  }
#line 4386
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4386
  if (tmp___3 == 0) {
#line 4387
    return (1);
  } else {

  }
#line 4389
  drbd_rs_complete_io(mdev, sector);
#line 4390
  atomic_dec(& mdev->rs_pending_cnt);
#line 4390
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4390
  if (tmp___5 < 0) {
#line 4390
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4390, tmp___4);
  } else {

  }
#line 4392
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4392
  if (mdev->ov_left == 0UL) {
#line 4393
    tmp___6 = kmalloc(24UL, 16U);
#line 4393
    w = (struct drbd_work *)tmp___6;
#line 4394
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4395
      w->cb = & w_ov_finished;
#line 4396
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4398
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4399
      ov_oos_print(mdev);
#line 4400
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4403
  put_ldev(mdev);
#line 4404
  return (1);
}
}
#line 4407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4409
  return (1);
}
}
#line 4417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4419
  asender_tbl[0].pkt_size = 0UL;
#line 4419
  asender_tbl[0].process = 0;
#line 4419
  asender_tbl[1].pkt_size = 0UL;
#line 4419
  asender_tbl[1].process = 0;
#line 4419
  asender_tbl[2].pkt_size = 0UL;
#line 4419
  asender_tbl[2].process = 0;
#line 4419
  asender_tbl[3].pkt_size = 0UL;
#line 4419
  asender_tbl[3].process = 0;
#line 4419
  asender_tbl[4].pkt_size = 0UL;
#line 4419
  asender_tbl[4].process = 0;
#line 4419
  asender_tbl[5].pkt_size = 0UL;
#line 4419
  asender_tbl[5].process = 0;
#line 4419
  asender_tbl[6].pkt_size = 0UL;
#line 4419
  asender_tbl[6].process = 0;
#line 4419
  asender_tbl[7].pkt_size = 0UL;
#line 4419
  asender_tbl[7].process = 0;
#line 4419
  asender_tbl[8].pkt_size = 0UL;
#line 4419
  asender_tbl[8].process = 0;
#line 4419
  asender_tbl[9].pkt_size = 0UL;
#line 4419
  asender_tbl[9].process = 0;
#line 4419
  asender_tbl[10].pkt_size = 0UL;
#line 4419
  asender_tbl[10].process = 0;
#line 4419
  asender_tbl[11].pkt_size = 0UL;
#line 4419
  asender_tbl[11].process = 0;
#line 4419
  asender_tbl[12].pkt_size = 0UL;
#line 4419
  asender_tbl[12].process = 0;
#line 4419
  asender_tbl[13].pkt_size = 0UL;
#line 4419
  asender_tbl[13].process = 0;
#line 4419
  asender_tbl[14].pkt_size = 0UL;
#line 4419
  asender_tbl[14].process = 0;
#line 4419
  asender_tbl[15].pkt_size = 0UL;
#line 4419
  asender_tbl[15].process = 0;
#line 4419
  asender_tbl[16].pkt_size = 0UL;
#line 4419
  asender_tbl[16].process = 0;
#line 4419
  asender_tbl[17].pkt_size = 0UL;
#line 4419
  asender_tbl[17].process = 0;
#line 4419
  asender_tbl[18].pkt_size = 0UL;
#line 4419
  asender_tbl[18].process = 0;
#line 4419
  asender_tbl[19].pkt_size = 8UL;
#line 4419
  asender_tbl[19].process = & got_Ping;
#line 4419
  asender_tbl[20].pkt_size = 8UL;
#line 4419
  asender_tbl[20].process = & got_PingAck;
#line 4419
  asender_tbl[21].pkt_size = 32UL;
#line 4419
  asender_tbl[21].process = & got_BlockAck;
#line 4419
  asender_tbl[22].pkt_size = 32UL;
#line 4419
  asender_tbl[22].process = & got_BlockAck;
#line 4419
  asender_tbl[23].pkt_size = 32UL;
#line 4419
  asender_tbl[23].process = & got_BlockAck;
#line 4419
  asender_tbl[24].pkt_size = 32UL;
#line 4419
  asender_tbl[24].process = & got_BlockAck;
#line 4419
  asender_tbl[25].pkt_size = 32UL;
#line 4419
  asender_tbl[25].process = & got_NegAck;
#line 4419
  asender_tbl[26].pkt_size = 32UL;
#line 4419
  asender_tbl[26].process = & got_NegDReply;
#line 4419
  asender_tbl[27].pkt_size = 32UL;
#line 4419
  asender_tbl[27].process = & got_NegRSDReply;
#line 4419
  asender_tbl[28].pkt_size = 16UL;
#line 4419
  asender_tbl[28].process = & got_BarrierAck;
#line 4419
  asender_tbl[29].pkt_size = 12UL;
#line 4419
  asender_tbl[29].process = & got_RqSReply;
#line 4419
  asender_tbl[30].pkt_size = 0UL;
#line 4419
  asender_tbl[30].process = 0;
#line 4419
  asender_tbl[31].pkt_size = 0UL;
#line 4419
  asender_tbl[31].process = 0;
#line 4419
  asender_tbl[32].pkt_size = 32UL;
#line 4419
  asender_tbl[32].process = & got_OVResult;
#line 4419
  asender_tbl[33].pkt_size = 0UL;
#line 4419
  asender_tbl[33].process = 0;
#line 4419
  asender_tbl[34].pkt_size = 32UL;
#line 4419
  asender_tbl[34].process = & got_IsInSync;
#line 4419
  asender_tbl[35].pkt_size = 0UL;
#line 4419
  asender_tbl[35].process = 0;
#line 4419
  asender_tbl[36].pkt_size = 0UL;
#line 4419
  asender_tbl[36].process = 0;
#line 4419
  asender_tbl[37].pkt_size = 0UL;
#line 4419
  asender_tbl[37].process = 0;
#line 4419
  asender_tbl[38].pkt_size = 0UL;
#line 4419
  asender_tbl[38].process = 0;
#line 4419
  asender_tbl[39].pkt_size = 16UL;
#line 4419
  asender_tbl[39].process = & got_skip;
#line 4419
  asender_tbl[40].pkt_size = 0UL;
#line 4419
  asender_tbl[40].process = 0;
#line 4439
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4440
    return (0);
  } else {

  }
#line 4441
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  enum drbd_thread_state tmp___23 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4446
  mdev = thi->mdev;
#line 4447
  h = & mdev->meta.rbuf.header.h80;
#line 4448
  cmd = 0;
#line 4451
  buf = (void *)h;
#line 4452
  received = 0;
#line 4453
  expect = 8;
#line 4456
  tmp = mdev_to_minor(mdev);
#line 4456
  tmp___0 = get_current();
#line 4456
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4458
  tmp___1 = get_current();
#line 4458
  tmp___1->policy = 2U;
#line 4459
  tmp___2 = get_current();
#line 4459
  tmp___2->rt_priority = 2U;
#line 4461
  goto ldv_49564;
  ldv_49568: 
#line 4462
  drbd_thread_current_set_cpu(mdev);
#line 4463
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4463
  if (tmp___4 != 0) {
#line 4464
    tmp___3 = drbd_send_ping(mdev);
#line 4464
    _b = tmp___3 == 0;
#line 4464
    if (_b != 0) {
#line 4464
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4464);
    } else {

    }
#line 4464
    if (_b != 0) {
#line 4464
      goto reconnect;
    } else {

    }
#line 4465
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4471
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4471
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4471
    if (tmp___5 > 3) {
#line 4473
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_49563: 
#line 4475
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4476
  tmp___6 = get_current();
#line 4476
  flush_signals(tmp___6);
#line 4477
  tmp___7 = drbd_process_done_ee(mdev);
#line 4477
  if (tmp___7 == 0) {
#line 4478
    goto reconnect;
  } else {

  }
#line 4480
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4481
  spin_lock_irq(& mdev->req_lock);
#line 4482
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4483
  spin_unlock_irq(& mdev->req_lock);
#line 4487
  if (empty != 0) {
#line 4488
    goto ldv_49562;
  } else {

  }
#line 4489
  goto ldv_49563;
  ldv_49562: ;
#line 4491
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4492
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4495
  tmp___8 = get_current();
#line 4495
  tmp___9 = signal_pending(tmp___8);
#line 4495
  if (tmp___9 != 0) {
#line 4496
    goto ldv_49564;
  } else {

  }
#line 4498
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4500
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4502
  tmp___10 = get_current();
#line 4502
  flush_signals(tmp___10);
#line 4514
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4514
  if (tmp___11 != 0L) {
#line 4515
    received = received + rv;
#line 4516
    buf = buf + (unsigned long )rv;
  } else
#line 4517
  if (rv == 0) {
#line 4518
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4519
    goto reconnect;
  } else
#line 4520
  if (rv == -11) {
#line 4521
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4523
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4524
      goto reconnect;
    } else {

    }
#line 4526
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4527
    goto ldv_49564;
  } else
#line 4528
  if (rv == -4) {
#line 4529
    goto ldv_49564;
  } else {
#line 4531
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4532
    goto reconnect;
  }
#line 4535
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4536
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4536
    if (tmp___15 != 0L) {
#line 4537
      tmp___12 = __fswab16((int )h->length);
#line 4537
      tmp___13 = __fswab16((int )h->command);
#line 4537
      tmp___14 = __fswab32(h->magic);
#line 4537
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4541
      goto reconnect;
    } else {

    }
#line 4543
    tmp___16 = __fswab16((int )h->command);
#line 4543
    cmd = get_asender_cmd((int )tmp___16);
#line 4544
    tmp___17 = __fswab16((int )h->length);
#line 4544
    len = (int )tmp___17;
#line 4545
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4545
    if (tmp___21 != 0L) {
#line 4546
      tmp___18 = __fswab16((int )h->length);
#line 4546
      tmp___19 = __fswab16((int )h->command);
#line 4546
      tmp___20 = __fswab32(h->magic);
#line 4546
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4550
      goto disconnect;
    } else {

    }
#line 4552
    expect = (int )cmd->pkt_size;
#line 4553
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4553
    if (_b___0 != 0) {
#line 4553
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4553);
    } else {

    }
#line 4553
    if (_b___0 != 0) {
#line 4554
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4556
  if (received == expect) {
#line 4557
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4557
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4557);
    } else {

    }
#line 4558
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4558
    if (tmp___22 == 0) {
#line 4559
      goto reconnect;
    } else {

    }
#line 4561
    buf = (void *)h;
#line 4562
    received = 0;
#line 4563
    expect = 8;
#line 4564
    cmd = 0;
  } else {

  }
  ldv_49564: 
#line 4461
  tmp___23 = get_t_state(thi);
#line 4461
  if ((unsigned int )tmp___23 == 1U) {
#line 4462
    goto ldv_49568;
  } else {

  }

#line 4568
  if (0) {
    reconnect: 
#line 4570
    val.i = 0U;
#line 4570
    val.ldv_37735.conn = 5U;
#line 4570
    mask.i = 0U;
#line 4570
    mask.ldv_37735.conn = 31U;
#line 4570
    drbd_force_state(mdev, mask, val);
#line 4571
    drbd_md_sync(mdev);
  } else {

  }
#line 4573
  if (0) {
    disconnect: 
#line 4575
    val___0.i = 0U;
#line 4575
    val___0.ldv_37735.conn = 1U;
#line 4575
    mask___0.i = 0U;
#line 4575
    mask___0.ldv_37735.conn = 31U;
#line 4575
    drbd_force_state(mdev, mask___0, val___0);
#line 4576
    drbd_md_sync(mdev);
  } else {

  }
#line 4578
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4580
  if ((int )mdev->state.ldv_37735.conn > 9) {
#line 4580
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4580);
  } else {

  }
#line 4581
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4583
  return (0);
}
}
#line 4623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4635
  LDV_IN_INTERRUPT = 1;
#line 4644
  ldv_initialize();
#line 4646
  goto ldv_49597;
  ldv_49596: 
#line 4649
  tmp = nondet_int();
#line 4649
  switch (tmp) {
  default: ;
#line 4651
  goto ldv_49595;
  }
  ldv_49595: ;
  ldv_49597: 
#line 4646
  tmp___0 = nondet_int();
#line 4646
  if (tmp___0 != 0) {
#line 4647
    goto ldv_49596;
  } else {

  }


#line 4660
  ldv_check_final_state();
#line 4663
  return;
}
}
#line 4667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4672
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4674
  mutex_lock(ldv_func_arg1);
#line 4675
  return;
}
}
#line 4677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4682
  tmp = mutex_trylock(ldv_func_arg1);
#line 4682
  ldv_func_res = tmp;
#line 4684
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4684
  return (tmp___0);
#line 4686
  return (ldv_func_res);
}
}
#line 4689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4694
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4696
  mutex_unlock(ldv_func_arg1);
#line 4697
  return;
}
}
#line 4699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4704
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4706
  mutex_lock(ldv_func_arg1);
#line 4707
  return;
}
}
#line 4709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4714
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4716
  mutex_unlock(ldv_func_arg1);
#line 4717
  return;
}
}
#line 4719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4724
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4726
  mutex_unlock(ldv_func_arg1);
#line 4727
  return;
}
}
#line 4729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4734
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4734
  ldv_func_res = tmp;
#line 4736
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4736
  return (tmp___0);
#line 4738
  return (ldv_func_res);
}
}
#line 4741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4746
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4748
  mutex_unlock(ldv_func_arg1);
#line 4749
  return;
}
}
#line 4751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4756
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4758
  mutex_unlock(ldv_func_arg1);
#line 4759
  return;
}
}
#line 599 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 601
  __hlist_del(n);
#line 602
  n->next = 0xdead000000100100UL;
#line 603
  n->pprev = 0xdead000000200200UL;
#line 604
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 99 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 


  {
#line 101
  return;
}
}
#line 173
extern struct lockdep_map rcu_lock_map ;
#line 559 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 561
  __rcu_read_lock();
#line 563
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 565
  return;
}
}
#line 581 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 583
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 585
  __rcu_read_lock();
#line 586
  return;
}
}
#line 194 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 196
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 196
  if (tmp != 0L) {
#line 197
    if (part->partno != 0) {
#line 198
      __mptr = (struct device  const  *)part->__dev.parent;
#line 198
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 200
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 200
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 202
  return (0);
}
}
#line 371 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 373
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 374
  if (part->partno != 0) {
#line 375
    tmp = part_to_disk(part);
#line 375
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 376
  return;
}
}
#line 378 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 380
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 381
  if (part->partno != 0) {
#line 382
    tmp = part_to_disk(part);
#line 382
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 383
  return;
}
}
#line 404
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 208 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 209
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1191
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1454
mempool_t *drbd_request_mempool ;
#line 1470
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1472
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1783
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1785
  if (forcedetach == 0) {
#line 1786
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1786
    if (tmp != 0) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1788
    goto ldv_46855;
  } else {

  }
  case 2: ;
  case 1: 
#line 1793
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  if ((int )mdev->state.ldv_37735.disk > 2) {
#line 1795
    __ns.i = mdev->state.i;
#line 1795
    __ns.ldv_37735.disk = 2U;
#line 1795
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1799
  goto ldv_46855;
  }
  ldv_46855: ;
#line 1802
  return;
}
}
#line 2020 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2022
  atomic_inc(& mdev->ap_pending_cnt);
#line 2023
  return;
}
}
#line 2186 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2188
  mxb = 1000000;
#line 2189
  tmp = get_net_conf(mdev);
#line 2189
  if (tmp != 0) {
#line 2190
    mxb = (mdev->net_conf)->max_buffers;
#line 2191
    put_net_conf(mdev);
  } else {

  }
#line 2193
  return (mxb);
}
}
#line 2196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2202
  switch ((unsigned int )s.ldv_37735.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2215
  goto ldv_47011;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2234
  return (0);
  }
  ldv_47011: ;
#line 2237
  switch ((unsigned int )s.ldv_37735.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2244
  goto ldv_47031;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2253
  return (0);
  }
  ldv_47031: ;
#line 2256
  return (1);
}
}
#line 2264 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2266
  tmp = drbd_get_max_buffers(mdev);
#line 2266
  mxb = tmp;
#line 2268
  tmp___0 = is_susp(mdev->state);
#line 2268
  if (tmp___0 != 0) {
#line 2269
    return (0);
  } else {

  }
#line 2270
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2270
  if (tmp___1 != 0) {
#line 2271
    return (0);
  } else {

  }
#line 2278
  tmp___2 = drbd_state_is_stable(mdev->state);
#line 2278
  if (tmp___2 == 0) {
#line 2279
    return (0);
  } else {

  }
#line 2283
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2283
  if (tmp___3 > mxb) {
#line 2284
    return (0);
  } else {

  }
#line 2285
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2285
  if (tmp___4 != 0) {
#line 2286
    return (0);
  } else {

  }
#line 2287
  return (1);
}
}
#line 2293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2297
  tmp = get_current();
#line 2297
  wait.flags = 0U;
#line 2297
  wait.private = (void *)tmp;
#line 2297
  wait.func = & autoremove_wake_function;
#line 2297
  wait.task_list.next = & wait.task_list;
#line 2297
  wait.task_list.prev = & wait.task_list;
#line 2307
  spin_lock_irq(& mdev->req_lock);
#line 2308
  goto ldv_47050;
  ldv_47049: 
#line 2309
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2310
  spin_unlock_irq(& mdev->req_lock);
#line 2311
  schedule();
#line 2312
  finish_wait(& mdev->misc_wait, & wait);
#line 2313
  spin_lock_irq(& mdev->req_lock);
  ldv_47050: 
#line 2308
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2308
  if (tmp___0 == 0) {
#line 2309
    goto ldv_47049;
  } else {

  }
#line 2315
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2316
  spin_unlock_irq(& mdev->req_lock);
#line 2317
  return;
}
}
#line 2319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2321
  tmp = drbd_get_max_buffers(mdev);
#line 2321
  mxb = tmp;
#line 2322
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2322
  ap_bio = tmp___0;
#line 2324
  if (ap_bio < 0) {
#line 2324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2324);
  } else {

  }
#line 2328
  if (ap_bio < mxb) {
#line 2329
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2330
  if (ap_bio == 0) {
#line 2330
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2330
    if (tmp___2 != 0) {
#line 2331
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2331
      if (tmp___1 == 0) {
#line 2332
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2333
  return;
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_47152: ;
#line 227
    goto ldv_47152;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_47157: ;
#line 236
    goto ldv_47157;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 281
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 281
  req = (struct drbd_request *)tmp;
#line 283
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 283
  if (tmp___0 != 0L) {
#line 284
    drbd_req_make_private_bio(req, bio_src);
#line 286
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 287
    req->mdev = mdev;
#line 288
    req->master_bio = bio_src;
#line 289
    req->epoch = 0U;
#line 290
    req->sector = bio_src->bi_sector;
#line 291
    req->size = bio_src->bi_size;
#line 292
    req->start_time = jiffies;
#line 293
    INIT_HLIST_NODE(& req->colision);
#line 294
    INIT_LIST_HEAD(& req->tl_requests);
#line 295
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 297
  return (req);
}
}
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 302
  mempool_free((void *)req, drbd_request_mempool);
#line 303
  return;
}
}
#line 318
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47232;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47232;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47232;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47232;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_47232: 
#line 94
  cpu = pfo_ret__;
#line 95
  __vpp_verify = 0;
#line 95
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 95
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 95
  if ((mdev->vdisk)->part0.partno != 0) {
#line 95
    __vpp_verify___0 = 0;
#line 95
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 95
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 95
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 96
  __vpp_verify___1 = 0;
#line 96
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___2 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 97
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 98
  rcu_read_unlock();
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 104
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 105
  duration = (unsigned long )jiffies - req->start_time;
#line 107
  rcu_read_lock();
#line 107
  switch (4UL) {
  case 1UL: 
#line 107
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47265;
  case 2UL: 
#line 107
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47265;
  case 4UL: 
#line 107
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47265;
  case 8UL: 
#line 107
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47265;
  default: 
#line 107
  __bad_percpu_size();
  }
  ldv_47265: 
#line 107
  cpu = pfo_ret__;
#line 108
  __vpp_verify = 0;
#line 108
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 108
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 108
  if ((mdev->vdisk)->part0.partno != 0) {
#line 108
    __vpp_verify___0 = 0;
#line 108
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 108
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 108
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 109
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 110
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 111
  rcu_read_unlock();
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 116
  s = req->rq_state;
#line 124
  list_del(& req->tl_requests);
#line 129
  if ((int )rw == 1) {
#line 134
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 135
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             135U);
    } else {

    }
#line 137
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 138
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         138U);
    } else {

    }
#line 150
    if ((s & 7UL) != 0UL) {
#line 151
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 151
      if (tmp___0 != 0) {
#line 152
        if ((s & 2048UL) != 0UL) {
#line 153
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 154
        put_ldev(mdev);
      } else {
#line 155
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 155
        if (tmp != 0) {
#line 156
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 163
  drbd_req_free(req);
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 175
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 175
  if (tmp != 0) {
#line 176
    return;
  } else {

  }
#line 178
  b = mdev->newest_tle;
#line 179
  b->w.cb = & w_send_barrier;
#line 184
  inc_ap_pending(mdev);
#line 185
  drbd_queue_work(& mdev->data.work, & b->w);
#line 186
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 187
  return;
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 192
  s = req->rq_state;
#line 200
  if ((int )mdev->state.ldv_37735.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 202
    queue_barrier(mdev);
  } else {

  }
#line 207
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 208
    sector = req->sector;
#line 209
    size = (int const   )req->size;
#line 215
    slot = tl_hash_slot___0(mdev, sector);
#line 216
    n = slot->first;
#line 216
    goto ldv_47308;
    ldv_47307: 
#line 217
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 217
    if (tmp != 0) {
#line 218
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 216
    n = n->next;
    ldv_47308: ;
#line 216
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 216
      __builtin_prefetch((void const   *)n->next);
#line 216
      if (1 != 0) {
#line 216
        __mptr = (struct hlist_node  const  *)n;
#line 216
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 216
        if (1 != 0) {
#line 217
          goto ldv_47307;
        } else {
#line 219
          goto ldv_47309;
        }
      } else {
#line 219
        goto ldv_47309;
      }
    } else {

    }
    ldv_47309: 
#line 239
    slot = ee_hash_slot___0(mdev, req->sector);
#line 240
    n = slot->first;
#line 240
    goto ldv_47316;
    ldv_47315: 
#line 241
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 241
    if (tmp___0 != 0) {
#line 242
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 243
      goto ldv_47314;
    } else {

    }
#line 240
    n = n->next;
    ldv_47316: ;
#line 240
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 240
      __builtin_prefetch((void const   *)n->next);
#line 240
      if (1 != 0) {
#line 240
        __mptr___0 = (struct hlist_node  const  *)n;
#line 240
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 240
        if (1 != 0) {
#line 241
          goto ldv_47315;
        } else {
#line 243
          goto ldv_47314;
        }
      } else {
#line 243
        goto ldv_47314;
      }
    } else {

    }
    ldv_47314: ;
  } else {

  }
#line 246
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 253
  bio_endio(m->bio, m->error);
#line 254
  dec_ap_bio(mdev);
#line 255
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 265
  s = req->rq_state;
#line 266
  mdev = req->mdev;
#line 268
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 279
  if ((s & 16UL) != 0UL) {
#line 280
    return;
  } else {

  }
#line 281
  if ((s & 8UL) != 0UL) {
#line 282
    return;
  } else {

  }
#line 283
  if ((int )s & 1) {
#line 284
    return;
  } else {

  }
#line 286
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 308
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 309
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 309
    error = (int )tmp;
#line 313
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 313
    if (tmp___0 == 0) {
#line 314
      hlist_del(& req->colision);
    } else
#line 316
    if ((s & 440UL) != 0UL) {
#line 316
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              316);
    } else {

    }
#line 319
    if (rw == 1) {
#line 320
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 323
    _drbd_end_io_acct(mdev, req);
#line 325
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 326
    m->bio = req->master_bio;
#line 327
    req->master_bio = 0;
  } else {

  }
#line 330
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 335
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 336
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 343
  mdev = req->mdev;
#line 345
  tmp = is_susp(mdev->state);
#line 345
  if (tmp == 0) {
#line 346
    _req_may_be_done(req, m);
  } else {

  }
#line 347
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 374
  mdev = req->mdev;
#line 375
  sector = req->sector;
#line 376
  size = (int const   )req->size;
#line 382
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 382
  if (tmp == 0) {
#line 382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            382);
  } else {

  }
#line 384
  tmp___0 = get_net_conf(mdev);
#line 384
  if (tmp___0 == 0) {
#line 385
    return (0);
  } else {

  }
#line 388
  _b = mdev->tl_hash_s == 0U;
#line 388
  if (_b != 0) {
#line 388
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            388);
  } else {

  }
#line 388
  if (_b != 0) {
#line 389
    goto out_no_conflict;
  } else {

  }
#line 390
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 390
  if (tmp___1 != 0L) {
#line 390
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (390), "i" (12UL));
    ldv_47349: ;
#line 390
    goto ldv_47349;
  } else {

  }
#line 393
  slot = tl_hash_slot___0(mdev, sector);
#line 394
  n = slot->first;
#line 394
  goto ldv_47356;
  ldv_47355: 
#line 395
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 395
  if (tmp___4 != 0) {
#line 396
    tmp___2 = get_current();
#line 396
    tmp___3 = get_current();
#line 396
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 402
    goto out_conflict;
  } else {

  }
#line 394
  n = n->next;
  ldv_47356: ;
#line 394
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 394
    __builtin_prefetch((void const   *)n->next);
#line 394
    if (1 != 0) {
#line 394
      __mptr = (struct hlist_node  const  *)n;
#line 394
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 394
      if (1 != 0) {
#line 395
        goto ldv_47355;
      } else {
#line 397
        goto ldv_47357;
      }
    } else {
#line 397
      goto ldv_47357;
    }
  } else {

  }
  ldv_47357: ;
#line 406
  if (mdev->ee_hash_s != 0U) {
#line 408
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 408
    if (tmp___5 != 0L) {
#line 408
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (408), "i" (12UL));
      ldv_47358: ;
#line 408
      goto ldv_47358;
    } else {

    }
#line 411
    slot = ee_hash_slot___0(mdev, sector);
#line 412
    n = slot->first;
#line 412
    goto ldv_47364;
    ldv_47363: 
#line 413
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 413
    if (tmp___8 != 0) {
#line 414
      tmp___6 = get_current();
#line 414
      tmp___7 = get_current();
#line 414
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 420
      goto out_conflict;
    } else {

    }
#line 412
    n = n->next;
    ldv_47364: ;
#line 412
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 412
      __builtin_prefetch((void const   *)n->next);
#line 412
      if (1 != 0) {
#line 412
        __mptr___0 = (struct hlist_node  const  *)n;
#line 412
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 412
        if (1 != 0) {
#line 413
          goto ldv_47363;
        } else {
#line 415
          goto ldv_47365;
        }
      } else {
#line 415
        goto ldv_47365;
      }
    } else {

    }
    ldv_47365: ;
  } else {

  }
  out_no_conflict: 
#line 429
  put_net_conf(mdev);
#line 430
  return (0);
  out_conflict: 
#line 433
  put_net_conf(mdev);
#line 434
  return (1);
}
}
#line 449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 452
  mdev = req->mdev;
#line 453
  rv = 0;
#line 454
  m->bio = 0;
#line 456
  switch ((unsigned int )what) {
  default: 
#line 458
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          458);
#line 459
  goto ldv_47374;
  case 1U: ;
#line 470
  if ((req->rq_state & 504UL) != 0UL) {
#line 470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            470);
  } else {

  }
#line 471
  req->rq_state = req->rq_state | 8UL;
#line 472
  inc_ap_pending(mdev);
#line 473
  goto ldv_47374;
  case 2U: ;
#line 477
  if ((req->rq_state & 7UL) != 0UL) {
#line 477
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            477);
  } else {

  }
#line 478
  req->rq_state = req->rq_state | 1UL;
#line 479
  goto ldv_47374;
  case 20U: ;
#line 482
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 483
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 485
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 487
  req->rq_state = req->rq_state | 6UL;
#line 488
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 490
  _req_may_be_done_not_susp(req, m);
#line 491
  put_ldev(mdev);
#line 492
  goto ldv_47374;
  case 19U: 
#line 495
  req->rq_state = req->rq_state | 2UL;
#line 496
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 498
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 499
  _req_may_be_done_not_susp(req, m);
#line 500
  put_ldev(mdev);
#line 501
  goto ldv_47374;
  case 18U: 
#line 505
  req->rq_state = req->rq_state | 2UL;
#line 506
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 507
  _req_may_be_done_not_susp(req, m);
#line 508
  put_ldev(mdev);
#line 509
  goto ldv_47374;
  case 17U: 
#line 512
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         512U);
#line 514
  req->rq_state = req->rq_state | 2UL;
#line 515
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 517
  if ((req->rq_state & 504UL) != 0UL) {
#line 517
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            517);
  } else {

  }
#line 519
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 520
  put_ldev(mdev);
#line 524
  if (*((unsigned int *)mdev + 499UL) != 65536U) {
#line 525
    _req_may_be_done_not_susp(req, m);
#line 526
    goto ldv_47374;
  } else {

  }
#line 530
  req->rq_state = req->rq_state | 8UL;
#line 531
  inc_ap_pending(mdev);
  case 4U: 
#line 544
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 544
  hlist_add_head(& req->colision, tmp);
#line 546
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 548
  if ((req->rq_state & 8UL) == 0UL) {
#line 548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            548);
  } else {

  }
#line 549
  req->rq_state = req->rq_state | 16UL;
#line 550
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 553
  drbd_queue_work(& mdev->data.work, & req->w);
#line 554
  goto ldv_47374;
  case 3U: 
#line 560
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 560
  hlist_add_head(& req->colision, tmp___0);
#line 580
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 584
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 584
  if (tmp___1 != 0) {
#line 584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            584);
  } else {

  }
#line 586
  req->epoch = (mdev->newest_tle)->br_number;
#line 589
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 592
  if ((req->rq_state & 8UL) == 0UL) {
#line 592
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            592);
  } else {

  }
#line 593
  req->rq_state = req->rq_state | 16UL;
#line 594
  req->w.cb = & w_send_dblock;
#line 595
  drbd_queue_work(& mdev->data.work, & req->w);
#line 598
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 599
    queue_barrier(mdev);
  } else {

  }
#line 601
  goto ldv_47374;
  case 5U: ;
  case 6U: 
#line 608
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 611
  _req_may_be_done_not_susp(req, m);
#line 612
  goto ldv_47374;
  case 7U: ;
#line 616
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 620
    if ((req->rq_state & 8UL) != 0UL) {
#line 621
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 621
      if (tmp___2 != 0) {
#line 621
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 621
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 621
      if (tmp___4 < 0) {
#line 621
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 621
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 621, tmp___3);
      } else {

      }
#line 622
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 623
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 629
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 630
  req->rq_state = req->rq_state | 32UL;
#line 636
  _req_may_be_done_not_susp(req, m);
#line 637
  goto ldv_47374;
  case 9U: 
#line 640
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 645
  if ((req->rq_state & 8UL) != 0UL) {
#line 646
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 646
    if (tmp___5 != 0) {
#line 646
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 646
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
    if (tmp___7 < 0) {
#line 646
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 646, tmp___6);
    } else {

    }
  } else {

  }
#line 647
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 648
  req->rq_state = req->rq_state | 64UL;
#line 651
  if ((req->rq_state & 16UL) == 0UL) {
#line 652
    _req_may_be_done(req, m);
  } else {

  }
#line 653
  goto ldv_47374;
  case 12U: 
#line 656
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 661
  if ((unsigned int )what == 13U) {
#line 662
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 665
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 683
  req->rq_state = req->rq_state | 128UL;
#line 684
  if ((req->rq_state & 8UL) == 0UL) {
#line 684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            684);
  } else {

  }
#line 685
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 685
  if (tmp___8 != 0) {
#line 685
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 685
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
  if (tmp___10 < 0) {
#line 685
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 685, tmp___9);
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 687
  _req_may_be_done_not_susp(req, m);
#line 688
  goto ldv_47374;
  case 14U: ;
#line 692
  if ((req->rq_state & 8UL) != 0UL) {
#line 693
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 693
    if (tmp___11 != 0) {
#line 693
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 693
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
    if (tmp___13 < 0) {
#line 693
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 693, tmp___12);
    } else {

    }
  } else {

  }
#line 694
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 696
  req->rq_state = req->rq_state | 64UL;
#line 697
  _req_may_be_done_not_susp(req, m);
#line 699
  goto ldv_47374;
  case 22U: ;
#line 702
  if ((req->rq_state & 2UL) == 0UL) {
#line 703
    goto ldv_47374;
  } else {

  }
#line 705
  _req_may_be_done(req, m);
#line 706
  goto ldv_47374;
  case 23U: ;
#line 709
  if ((req->rq_state & 2UL) == 0UL) {
#line 710
    goto ldv_47374;
  } else {

  }
#line 712
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 714
  rv = 2;
#line 715
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 716
    rv = 1;
  } else {

  }
#line 718
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 719
  req->w.cb = & w_restart_disk_io;
#line 720
  drbd_queue_work(& mdev->data.work, & req->w);
#line 721
  goto ldv_47374;
  case 21U: ;
#line 728
  if ((req->rq_state & 128UL) == 0UL) {
#line 729
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 730
      drbd_queue_work(& mdev->data.work, & req->w);
#line 731
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 733
    goto ldv_47374;
  } else {

  }
  case 15U: ;
#line 738
  if ((req->rq_state & 1024UL) == 0UL) {
#line 739
    goto ldv_47374;
  } else {

  }
#line 741
  if ((req->rq_state & 8UL) != 0UL) {
#line 745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 746
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 748
  if ((req->rq_state & 32UL) == 0UL) {
#line 748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            748);
  } else {

  }
#line 749
  req->rq_state = req->rq_state | 64UL;
#line 750
  _req_may_be_done(req, m);
#line 751
  goto ldv_47374;
  case 16U: ;
#line 754
  if ((req->rq_state & 8UL) == 0UL) {
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            754);
  } else {

  }
#line 755
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 755
  if (tmp___14 != 0) {
#line 755
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 755
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 755
  if (tmp___16 < 0) {
#line 755
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 755
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 755, tmp___15);
  } else {

  }
#line 756
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 757
  req->rq_state = req->rq_state | 192UL;
#line 758
  _req_may_be_done_not_susp(req, m);
#line 759
  goto ldv_47374;
  }
  ldv_47374: ;
#line 762
  return (rv);
}
}
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 777
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 16U) {
#line 778
    return (1);
  } else {

  }
#line 779
  if ((int )mdev->state.ldv_37735.disk > 4) {
#line 780
    return (0);
  } else {

  }
#line 781
  if ((int )mdev->state.ldv_37735.disk <= 3) {
#line 782
    return (0);
  } else {

  }
#line 784
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 785
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 787
  if (sector >= nr_sectors) {
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            787);
  } else {

  }
#line 788
  if (esector >= nr_sectors) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            788);
  } else {

  }
#line 790
  sbnr = sector >> 3;
#line 791
  ebnr = esector >> 3;
#line 793
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 793
  return (tmp == 0);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 798
  rw = (int const   )bio->bi_rw & (int const   )257;
#line 799
  size = (int const   )bio->bi_size;
#line 800
  sector = bio->bi_sector;
#line 801
  b = 0;
#line 804
  err = -5;
#line 805
  ret = 0;
#line 808
  req = drbd_req_new(mdev, bio);
#line 809
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 810
    dec_ap_bio(mdev);
#line 813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 814
    bio_endio(bio, -12);
#line 815
    return (0);
  } else {

  }
#line 818
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 819
  if (local == 0) {
#line 820
    bio_put(req->private_bio);
#line 821
    req->private_bio = 0;
  } else {

  }
#line 823
  if (rw == 1) {
#line 824
    remote = 1;
  } else {
#line 827
    if (local != 0) {
#line 828
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 828
      if (tmp == 0) {
#line 834
        local = 0;
#line 835
        bio_put(req->private_bio);
#line 836
        req->private_bio = 0;
#line 837
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 840
    remote = local == 0 && (int )mdev->state.ldv_37735.pdsk > 7;
  }
#line 851
  if ((rw == 256 && (int )mdev->state.ldv_37735.disk > 3) && local == 0) {
#line 852
    err = -11;
#line 853
    goto fail_and_free_req;
  } else {

  }
#line 861
  if (rw == 1 && local != 0) {
#line 861
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 861
    if (tmp___0 == 0) {
#line 862
      req->rq_state = req->rq_state | 2048UL;
#line 863
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 866
  remote = remote != 0 && (*((unsigned int *)mdev + 499UL) == 65536U || (*((unsigned int *)mdev + 499UL) == 32768U && (int )mdev->state.ldv_37735.conn > 9));
#line 870
  if (local == 0 && remote == 0) {
#line 870
    tmp___2 = is_susp(mdev->state);
#line 870
    if (tmp___2 == 0) {
#line 871
      tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 871
      if (tmp___1 != 0) {
#line 872
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 873
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 882
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 882
    tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 882
    if (tmp___4 != 0) {
      allocate_barrier: 
#line 886
      tmp___3 = kmalloc(56UL, 16U);
#line 886
      b = (struct drbd_tl_epoch *)tmp___3;
#line 887
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 888
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 889
        err = -12;
#line 890
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 895
  spin_lock_irq(& mdev->req_lock);
#line 897
  tmp___5 = is_susp(mdev->state);
#line 897
  if (tmp___5 != 0) {
#line 902
    ret = 1;
#line 903
    spin_unlock_irq(& mdev->req_lock);
#line 904
    goto fail_free_complete;
  } else {

  }
#line 907
  if (remote != 0) {
#line 908
    remote = *((unsigned int *)mdev + 499UL) == 65536U || (*((unsigned int *)mdev + 499UL) == 32768U && (int )mdev->state.ldv_37735.conn > 9);
#line 911
    if (remote == 0) {
#line 912
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 913
    if (local == 0 && remote == 0) {
#line 914
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 915
      spin_unlock_irq(& mdev->req_lock);
#line 916
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 920
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 921
    mdev->unused_spare_tle = b;
#line 922
    b = 0;
  } else {

  }
#line 924
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 924
    tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 924
    if (tmp___6 != 0) {
#line 929
      spin_unlock_irq(& mdev->req_lock);
#line 930
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 935
  _drbd_start_io_acct(mdev, req, bio);
#line 947
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 947
    tmp___8 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 947
    if (tmp___8 != 0) {
#line 949
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 950
      mdev->unused_spare_tle = 0;
    } else {
#line 947
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 952
  if (remote != 0 && rw == 1) {
#line 952
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 952
    if (tmp___7 != 0) {
#line 952
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              953);
    } else {

    }
  } else {

  }
#line 971
  if (remote != 0) {
#line 972
    _req_mod(req, to_be_send);
  } else {

  }
#line 973
  if (local != 0) {
#line 974
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 979
  if (rw == 1) {
#line 979
    tmp___9 = _req_conflicts(req);
#line 979
    if (tmp___9 != 0) {
#line 980
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 982
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 986
  if (remote != 0) {
#line 991
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 995
  spin_unlock_irq(& mdev->req_lock);
#line 996
  kfree((void const   *)b);
#line 998
  if (local != 0) {
#line 999
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1006
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1006
    if (tmp___11 != 0) {
#line 1007
      tmp___10 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1007
      if (tmp___10 != 0) {
#line 1010
        bio_endio(req->private_bio, -5);
      } else {
#line 1012
        generic_make_request(req->private_bio);
      }
#line 1013
      put_ldev(mdev);
    } else {
#line 1015
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1018
  return (0);
  fail_conflicting: 
#line 1027
  _drbd_end_io_acct(mdev, req);
#line 1028
  spin_unlock_irq(& mdev->req_lock);
#line 1029
  if (remote != 0) {
#line 1030
    tmp___12 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1030
    if (tmp___12 != 0) {
#line 1030
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1030
    tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1030
    if (tmp___14 < 0) {
#line 1030
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1030
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1030, tmp___13);
    } else {

    }
  } else {

  }
#line 1033
  err = 0;
  fail_free_complete: ;
#line 1036
  if (rw == 1 && local != 0) {
#line 1037
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1039
  if (local != 0) {
#line 1040
    bio_put(req->private_bio);
#line 1041
    req->private_bio = 0;
#line 1042
    put_ldev(mdev);
  } else {

  }
#line 1044
  if (ret == 0) {
#line 1045
    bio_endio(bio, err);
  } else {

  }
#line 1047
  drbd_req_free(req);
#line 1048
  dec_ap_bio(mdev);
#line 1049
  kfree((void const   *)b);
#line 1051
  return (ret);
}
}
#line 1059 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1061
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1063
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1063
    if (tmp___1 != 0) {
#line 1064
      tmp = get_current();
#line 1064
      tmp___0 = get_current();
#line 1064
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1070
    return (1);
  } else {

  }
#line 1073
  return (0);
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1079
  mdev = (struct drbd_conf *)q->queuedata;
#line 1081
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1081
  if (tmp != 0) {
#line 1082
    bio_endio(bio, -1);
#line 1083
    return (0);
  } else {

  }
#line 1089
  if (bio->bi_size == 0U) {
#line 1089
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1089);
  } else {

  }
#line 1090
  if ((bio->bi_size & 511U) != 0U) {
#line 1090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1090);
  } else {

  }
#line 1091
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1091);
  } else {

  }
#line 1095
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1096
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1098
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1098
  if (tmp___1 != 0L) {
#line 1099
    inc_ap_bio(mdev, 1);
#line 1100
    tmp___0 = drbd_make_request_common(mdev, bio);
#line 1100
    return (tmp___0);
  } else {

  }
#line 1105
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1107
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1111
    bio_endio(bio, -22);
  } else {
#line 1123
    sect = bio->bi_sector;
#line 1124
    sps = 256;
#line 1125
    mask = sps + -1;
#line 1126
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1127
    bp = bio_split(bio, (int )first_sectors);
#line 1138
    inc_ap_bio(mdev, 3);
#line 1140
    if (s_enr + 1U != e_enr) {
#line 1140
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1140);
    } else {

    }
#line 1142
    goto ldv_47462;
    ldv_47461: 
#line 1143
    inc_ap_bio(mdev, 1);
    ldv_47462: 
#line 1142
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1);
#line 1142
    if (tmp___2 != 0) {
#line 1143
      goto ldv_47461;
    } else {

    }

#line 1145
    goto ldv_47465;
    ldv_47464: 
#line 1146
    inc_ap_bio(mdev, 1);
    ldv_47465: 
#line 1145
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2);
#line 1145
    if (tmp___3 != 0) {
#line 1146
      goto ldv_47464;
    } else {

    }
#line 1148
    dec_ap_bio(mdev);
#line 1150
    bio_pair_release(bp);
  }
#line 1152
  return (0);
}
}
#line 1168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1170
  mdev = (struct drbd_conf *)q->queuedata;
#line 1171
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1173
  bio_size = bvm->bi_size;
#line 1176
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1178
  if (limit < 0) {
#line 1179
    limit = 0;
  } else {

  }
#line 1180
  if (bio_size == 0U) {
#line 1181
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1182
      limit = (int )bvec->bv_len;
    } else
#line 1183
    if (limit != 0) {
#line 1183
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1183
      if (tmp != 0) {
#line 1184
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1186
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1187
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1188
          _min1 = limit;
#line 1188
          _min2 = backing_limit;
#line 1188
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1190
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1192
  return (limit);
}
}
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1200
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1202
  mutex_lock(ldv_func_arg1);
#line 1203
  return;
}
}
#line 1205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = mutex_trylock(ldv_func_arg1);
#line 1210
  ldv_func_res = tmp;
#line 1212
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1212
  return (tmp___0);
#line 1214
  return (ldv_func_res);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1222
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1224
  mutex_unlock(ldv_func_arg1);
#line 1225
  return;
}
}
#line 1227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1232
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1234
  mutex_lock(ldv_func_arg1);
#line 1235
  return;
}
}
#line 1237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1242
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1244
  mutex_unlock(ldv_func_arg1);
#line 1245
  return;
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1252
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1254
  mutex_unlock(ldv_func_arg1);
#line 1255
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 130
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) ;
#line 162
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 46
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 645 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 361 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;

  {
#line 371
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 371
  tmp___0 = PageTail(page);
#line 371
  tmp___1 = __builtin_expect(tmp < (tmp___0 == 0), 0L);
#line 371
  if (tmp___1 != 0L) {
#line 371
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (371), "i" (12UL));
    ldv_16987: ;
#line 371
    goto ldv_16987;
  } else {

  }
#line 372
  atomic_inc(& page->_count);
#line 377
  tmp___4 = PageTail(page);
#line 377
  tmp___5 = __builtin_expect(tmp___4 != 0, 0L);
#line 377
  if (tmp___5 != 0L) {
#line 383
    tmp___2 = atomic_read((atomic_t const   *)(& (page->ldv_13170.first_page)->_count));
#line 383
    tmp___3 = __builtin_expect(tmp___2 <= 0, 0L);
#line 383
    if (tmp___3 != 0L) {
#line 383
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                           "i" (383), "i" (12UL));
      ldv_16988: ;
#line 383
      goto ldv_16988;
    } else {

    }
#line 384
    atomic_inc(& (page->ldv_13170.first_page)->_count);
  } else {

  }
#line 386
  return;
}
}
#line 715 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 717
  return ((bdev->bd_disk)->queue);
}
}
#line 969 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 971
  retval = 512;
#line 973
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 974
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 976
  return ((unsigned short )retval);
}
}
#line 979 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 981
  tmp = bdev_get_queue(bdev);
#line 981
  tmp___0 = queue_logical_block_size(tmp);
#line 981
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1630
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1631
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1632
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1640
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1783
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1785
  if (forcedetach == 0) {
#line 1786
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1786
    if (tmp != 0) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1788
    goto ldv_46888;
  } else {

  }
  case 2: ;
  case 1: 
#line 1793
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  if ((int )mdev->state.ldv_37735.disk > 2) {
#line 1795
    __ns.i = mdev->state.i;
#line 1795
    __ns.ldv_37735.disk = 2U;
#line 1795
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1799
  goto ldv_46888;
  }
  ldv_46888: ;
#line 1802
  return;
}
}
#line 1812 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1815
  if (error != 0) {
#line 1817
    tmp = spinlock_check(& mdev->req_lock);
#line 1817
    flags = _raw_spin_lock_irqsave(tmp);
#line 1818
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1819
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1821
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 132
  md_io.mdev = mdev;
#line 133
  init_completion(& md_io.event);
#line 134
  md_io.error = 0;
#line 136
  if (rw & 1) {
#line 136
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 136
    if (tmp == 0) {
#line 137
      rw = rw | 4096;
    } else {

    }
  } else {

  }
#line 138
  rw = rw | 16;
#line 140
  bio = bio_alloc(16U, 1);
#line 141
  bio->bi_bdev = bdev->md_bdev;
#line 142
  bio->bi_sector = sector;
#line 143
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 143
  ok = tmp___0 == size;
#line 144
  if (ok == 0) {
#line 145
    goto out;
  } else {

  }
#line 146
  bio->bi_private = (void *)(& md_io);
#line 147
  bio->bi_end_io = & drbd_md_io_complete;
#line 148
  bio->bi_rw = (unsigned long )rw;
#line 150
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 150
  if (tmp___1 != 0) {
#line 151
    bio_endio(bio, -5);
  } else {
#line 153
    submit_bio(rw, bio);
  }
#line 154
  wait_for_completion(& md_io.event);
#line 155
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 158
  bio_put(bio);
#line 159
  return (ok);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 166
  offset = 0;
#line 167
  iop = mdev->md_io_page;
#line 169
  tmp = ldv_mutex_is_locked_99(& mdev->md_io_mutex);
#line 169
  if (tmp == 0) {
#line 169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            169);
  } else {

  }
#line 171
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 171
  if (tmp___0 != 0L) {
#line 171
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (171), "i" (12UL));
    ldv_47192: ;
#line 171
    goto ldv_47192;
  } else {

  }
#line 173
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 173
  logical_block_size = (int )tmp___1;
#line 174
  if (logical_block_size == 0) {
#line 175
    logical_block_size = 512;
  } else {

  }
#line 178
  if (logical_block_size != 512) {
#line 179
    mask = logical_block_size / 512 + -1;
#line 180
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 180
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              180);
    } else {

    }
#line 181
    if ((mask + 1) * 512 != logical_block_size) {
#line 181
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              181);
    } else {

    }
#line 182
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 183
    sector = (sector_t )(~ mask) & sector;
#line 184
    iop = mdev->md_io_tmpp;
#line 186
    if (rw & 1) {
#line 189
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 189
      p = tmp___2;
#line 190
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 190
      hp = tmp___3;
#line 192
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 195
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 195
      if (tmp___4 != 0L) {
#line 196
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 199
        return (0);
      } else {

      }
#line 202
      __len = 512UL;
#line 202
      if (__len > 63UL) {
#line 202
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 202
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 206
  tmp___7 = drbd_md_first_sector(bdev);
#line 206
  if (tmp___7 > sector) {
#line 208
    tmp___5 = get_current();
#line 208
    tmp___6 = get_current();
#line 208
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 206
    tmp___8 = drbd_md_last_sector(bdev);
#line 206
    if (tmp___8 < sector) {
#line 208
      tmp___5 = get_current();
#line 208
      tmp___6 = get_current();
#line 208
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 212
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 213
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 213
  if (tmp___9 != 0L) {
#line 214
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 216
    return (0);
  } else {

  }
#line 219
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 220
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 220
    p___0 = tmp___10;
#line 221
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 221
    hp___0 = tmp___11;
#line 223
    __len___0 = 512UL;
#line 223
    if (__len___0 > 63UL) {
#line 223
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 223
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 226
  return (ok);
}
}
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 233
  al_flags = 0UL;
#line 235
  spin_lock_irq(& mdev->al_lock);
#line 236
  tmp = lc_find(mdev->resync, enr / 4U);
#line 237
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 237
  if (tmp___1 != 0L) {
#line 238
    __mptr = (struct lc_element  const  *)tmp;
#line 238
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 239
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 239
    if (tmp___0 != 0) {
#line 240
      spin_unlock_irq(& mdev->al_lock);
#line 241
      return (0);
    } else {

    }
  } else {

  }
#line 244
  al_ext = lc_get(mdev->act_log, enr);
#line 245
  al_flags = (mdev->act_log)->flags;
#line 246
  spin_unlock_irq(& mdev->al_lock);
#line 257
  return (al_ext);
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 262
  enr = (unsigned int )(sector >> 13);
#line 266
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 266
  if (tmp <= 0) {
#line 266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            266);
  } else {

  }
#line 268
  al_ext = _al_get(mdev, enr);
#line 268
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 268
    goto ldv_47221;
  } else {

  }
#line 268
  tmp___0 = get_current();
#line 268
  __wait.flags = 0U;
#line 268
  __wait.private = (void *)tmp___0;
#line 268
  __wait.func = & autoremove_wake_function;
#line 268
  __wait.task_list.next = & __wait.task_list;
#line 268
  __wait.task_list.prev = & __wait.task_list;
  ldv_47224: 
#line 268
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 268
  al_ext = _al_get(mdev, enr);
#line 268
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 268
    goto ldv_47223;
  } else {

  }
#line 268
  schedule();
#line 268
  goto ldv_47224;
  ldv_47223: 
#line 268
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47221: ;
#line 270
  if (al_ext->lc_number != enr) {
#line 277
    init_completion(& al_work.event);
#line 278
    al_work.al_ext = al_ext;
#line 279
    al_work.enr = enr;
#line 280
    al_work.old_enr = al_ext->lc_number;
#line 281
    al_work.w.cb = & w_al_write_transaction;
#line 282
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 283
    wait_for_completion(& al_work.event);
#line 285
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 287
    spin_lock_irq(& mdev->al_lock);
#line 288
    lc_changed(mdev->act_log, al_ext);
#line 289
    spin_unlock_irq(& mdev->al_lock);
#line 290
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 296
  enr = (unsigned int )(sector >> 13);
#line 300
  tmp = spinlock_check(& mdev->al_lock);
#line 300
  flags = _raw_spin_lock_irqsave(tmp);
#line 302
  extent = lc_find(mdev->act_log, enr);
#line 304
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 305
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 306
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 307
    return;
  } else {

  }
#line 310
  tmp___0 = lc_put(mdev->act_log, extent);
#line 310
  if (tmp___0 == 0U) {
#line 311
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 313
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 314
  return;
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 319
  __mptr = (struct drbd_work  const  *)w;
#line 319
  aw = (struct update_al_work *)__mptr;
#line 320
  updated = aw->al_ext;
#line 321
  new_enr = aw->enr;
#line 322
  evicted = aw->old_enr;
#line 327
  xor_sum = 0U;
#line 329
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 329
  if (tmp___0 == 0) {
#line 330
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.disk);
#line 330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 333
    complete(& ((struct update_al_work *)w)->event);
#line 334
    return (1);
  } else {

  }
#line 342
  if ((int )mdev->state.ldv_37735.conn <= 9 && evicted != 4294967295U) {
#line 343
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 346
  if ((int )mdev->state.ldv_37735.disk <= 3) {
#line 347
    tmp___1 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.disk);
#line 347
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___1, evicted, new_enr);
#line 350
    complete(& ((struct update_al_work *)w)->event);
#line 351
    put_ldev(mdev);
#line 352
    return (1);
  } else {

  }
#line 355
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 356
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 356
  buffer = (struct al_transaction *)tmp___2;
#line 358
  buffer->magic = 1728214147U;
#line 359
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 359
  buffer->tr_number = tmp___3;
#line 361
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 361
  n = (int )tmp___4;
#line 363
  tmp___5 = __fswab32((__u32 )n);
#line 363
  buffer->updates[0].pos = tmp___5;
#line 364
  tmp___6 = __fswab32(new_enr);
#line 364
  buffer->updates[0].extent = tmp___6;
#line 366
  xor_sum = xor_sum ^ new_enr;
#line 368
  __min1 = 61;
#line 368
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 368
  mx = __min1 < __min2 ? __min1 : __min2;
#line 370
  i = 0;
#line 370
  goto ldv_47258;
  ldv_47257: 
#line 371
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 372
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 372
  extent_nr = tmp___7->lc_number;
#line 373
  tmp___8 = __fswab32(idx);
#line 373
  buffer->updates[i + 1].pos = tmp___8;
#line 374
  tmp___9 = __fswab32(extent_nr);
#line 374
  buffer->updates[i + 1].extent = tmp___9;
#line 375
  xor_sum = xor_sum ^ extent_nr;
#line 370
  i = i + 1;
  ldv_47258: ;
#line 370
  if (i < mx) {
#line 371
    goto ldv_47257;
  } else {

  }

#line 377
  goto ldv_47261;
  ldv_47260: 
#line 378
  buffer->updates[i + 1].pos = 4294967295U;
#line 379
  buffer->updates[i + 1].extent = 4294967295U;
#line 380
  xor_sum = ~ xor_sum;
#line 377
  i = i + 1;
  ldv_47261: ;
#line 377
  if (i <= 60) {
#line 378
    goto ldv_47260;
  } else {

  }
#line 382
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 383
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 384
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 386
  tmp___10 = __fswab32(xor_sum);
#line 386
  buffer->xor_sum = tmp___10;
#line 388
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 391
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 391
  if (tmp___11 == 0) {
#line 392
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 394
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 394
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 396
    mdev->al_tr_pos = 0;
  } else {

  }
#line 398
  if (mdev->al_tr_pos > 63) {
#line 398
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            398);
  } else {

  }
#line 399
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 401
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 403
  complete(& ((struct update_al_work *)w)->event);
#line 404
  put_ldev(mdev);
#line 406
  return (1);
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 425
  xor_sum = 0U;
#line 427
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 431
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 431
  if (tmp == 0) {
#line 432
    return (-1);
  } else {

  }
#line 434
  tmp___0 = __fswab32(b->magic);
#line 434
  rv = tmp___0 == 2205418087U;
#line 436
  i = 0;
#line 436
  goto ldv_47275;
  ldv_47274: 
#line 437
  tmp___1 = __fswab32(b->updates[i].extent);
#line 437
  xor_sum = tmp___1 ^ xor_sum;
#line 436
  i = i + 1;
  ldv_47275: ;
#line 436
  if (i <= 61) {
#line 437
    goto ldv_47274;
  } else {

  }
#line 438
  tmp___2 = __fswab32(b->xor_sum);
#line 438
  rv = (tmp___2 == xor_sum) & rv;
#line 440
  return (rv);
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 456
  active_extents = 0;
#line 457
  transactions = 0;
#line 458
  found_valid = 0;
#line 459
  from = 0;
#line 460
  to = 0;
#line 461
  from_tnr = 0U;
#line 462
  to_tnr = 0U;
#line 465
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 470
  ldv_mutex_lock_102(& mdev->md_io_mutex);
#line 471
  tmp = lowmem_page_address(mdev->md_io_page);
#line 471
  buffer = (struct al_transaction *)tmp;
#line 474
  i = 0;
#line 474
  goto ldv_47295;
  ldv_47294: 
#line 475
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 476
  if (rv == 0) {
#line 477
    goto ldv_47293;
  } else {

  }
#line 478
  if (rv == -1) {
#line 479
    ldv_mutex_unlock_103(& mdev->md_io_mutex);
#line 480
    return (0);
  } else {

  }
#line 482
  tmp___0 = __fswab32(buffer->tr_number);
#line 482
  cnr = tmp___0;
#line 484
  found_valid = found_valid + 1;
#line 484
  if (found_valid == 1) {
#line 485
    from = i;
#line 486
    to = i;
#line 487
    from_tnr = cnr;
#line 488
    to_tnr = cnr;
#line 489
    goto ldv_47293;
  } else {

  }
#line 491
  if ((int )cnr - (int )from_tnr < 0) {
#line 492
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 492
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              492);
    } else {

    }
#line 493
    from = i;
#line 494
    from_tnr = cnr;
  } else {

  }
#line 496
  if ((int )cnr - (int )to_tnr > 0) {
#line 497
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 497
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              497);
    } else {

    }
#line 498
    to = i;
#line 499
    to_tnr = cnr;
  } else {

  }
  ldv_47293: 
#line 474
  i = i + 1;
  ldv_47295: ;
#line 474
  if (i <= mx) {
#line 475
    goto ldv_47294;
  } else {

  }

#line 503
  if (found_valid == 0) {
#line 504
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 505
    ldv_mutex_unlock_104(& mdev->md_io_mutex);
#line 506
    return (1);
  } else {

  }
#line 511
  i = from;
  ldv_47310: 
#line 517
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 518
  _b = rv == 0;
#line 518
  if (_b != 0) {
#line 518
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            518);
  } else {

  }
#line 518
  if (_b != 0) {
#line 518
    goto cancel;
  } else {

  }
#line 519
  if (rv == -1) {
#line 520
    ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 521
    return (0);
  } else {

  }
#line 524
  tmp___1 = __fswab32(buffer->tr_number);
#line 524
  trn = tmp___1;
#line 526
  spin_lock_irq(& mdev->al_lock);
#line 532
  j = 61;
#line 532
  goto ldv_47307;
  ldv_47306: 
#line 533
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 533
  pos = (int )tmp___2;
#line 534
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 534
  extent_nr = tmp___3;
#line 536
  if (extent_nr == 4294967295U) {
#line 537
    goto ldv_47305;
  } else {

  }
#line 539
  lc_set(mdev->act_log, extent_nr, pos);
#line 540
  active_extents = active_extents + 1;
  ldv_47305: 
#line 532
  j = j - 1;
  ldv_47307: ;
#line 532
  if (j >= 0) {
#line 533
    goto ldv_47306;
  } else {

  }
#line 542
  spin_unlock_irq(& mdev->al_lock);
#line 544
  transactions = transactions + 1;
  cancel: ;
#line 547
  if (i == to) {
#line 548
    goto ldv_47309;
  } else {

  }
#line 549
  i = i + 1;
#line 550
  if (i > mx) {
#line 551
    i = 0;
  } else {

  }
#line 552
  goto ldv_47310;
  ldv_47309: 
#line 554
  mdev->al_tr_number = to_tnr + 1U;
#line 555
  mdev->al_tr_pos = to;
#line 556
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 556
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 558
    mdev->al_tr_pos = 0;
  } else {

  }
#line 561
  ldv_mutex_unlock_106(& mdev->md_io_mutex);
#line 563
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 566
  return (1);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 571
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 572
  mdev = wc->mdev;
#line 574
  uptodate = (int )bio->bi_flags & 1;
#line 579
  if (error == 0 && uptodate == 0) {
#line 580
    error = -5;
  } else {

  }
#line 582
  drbd_chk_io_error____0(mdev, error, 1, "atodb_endio");
#line 583
  if (error != 0 && wc->error == 0) {
#line 584
    wc->error = error;
  } else {

  }
#line 586
  tmp = atomic_dec_and_test(& wc->count);
#line 586
  if (tmp != 0) {
#line 587
    complete(& wc->io_done);
  } else {

  }
#line 589
  page = (bio->bi_io_vec)->bv_page;
#line 590
  put_page(page);
#line 591
  bio_put(bio);
#line 592
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 593
  put_ldev(mdev);
#line 594
  return;
}
}
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 609
  page_offset___0 = 4096U;
#line 611
  i = 0;
#line 612
  err = -12;
#line 616
  enr = enr & 4294967288U;
#line 617
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 620
  if ((on_disk_sector & 7UL) != 0UL) {
#line 620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            620);
  } else {

  }
#line 629
  goto ldv_47334;
  ldv_47333: ;
#line 630
  if (bio->bi_sector == on_disk_sector) {
#line 631
    return (0);
  } else {

  }
#line 632
  i = i + 1;
  ldv_47334: 
#line 629
  bio = *(bios + (unsigned long )i);
#line 629
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 630
    goto ldv_47333;
  } else {

  }
#line 637
  bio = bio_alloc(208U, 1);
#line 638
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 639
    return (-12);
  } else {

  }
#line 641
  if (i > 0) {
#line 642
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 643
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 644
    page = prev_bv->bv_page;
  } else {

  }
#line 646
  if (page_offset___0 == 4096U) {
#line 647
    page = alloc_pages(2U, 0U);
#line 648
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 649
      goto out_bio_put;
    } else {

    }
#line 650
    page_offset___0 = 0U;
  } else {
#line 652
    get_page(page);
  }
#line 655
  offset = (int )(enr << 6);
#line 656
  tmp = kmap(page);
#line 657
  __min1 = 512UL;
#line 657
  tmp___0 = drbd_bm_words(mdev);
#line 657
  __min2 = tmp___0 - (size_t )offset;
#line 657
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 659
  kunmap(page);
#line 661
  bio->bi_private = (void *)wc;
#line 662
  bio->bi_end_io = & atodb_endio;
#line 663
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 664
  bio->bi_sector = on_disk_sector;
#line 666
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 666
  if (tmp___1 != 4096) {
#line 667
    goto out_put_page;
  } else {

  }
#line 669
  atomic_inc(& wc->count);
#line 675
  atomic_inc(& mdev->local_cnt);
#line 677
  *(bios + (unsigned long )i) = bio;
#line 679
  return (0);
  out_put_page: 
#line 682
  err = -22;
#line 683
  put_page(page);
  out_bio_put: 
#line 685
  bio_put(bio);
#line 686
  return (err);
}
}
#line 696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct lc_element *tmp___8 ;

  {
#line 703
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 703
  _b = tmp == 0;
#line 703
  if (_b != 0) {
#line 703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            703);
  } else {

  }
#line 703
  if (_b != 0) {
#line 704
    return;
  } else {

  }
#line 706
  tmp___0 = lc_try_lock(mdev->act_log);
#line 706
  if (tmp___0 != 0) {
#line 706
    goto ldv_47353;
  } else {

  }
#line 706
  tmp___1 = get_current();
#line 706
  __wait.flags = 0U;
#line 706
  __wait.private = (void *)tmp___1;
#line 706
  __wait.func = & autoremove_wake_function;
#line 706
  __wait.task_list.next = & __wait.task_list;
#line 706
  __wait.task_list.prev = & __wait.task_list;
  ldv_47356: 
#line 706
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 706
  tmp___2 = lc_try_lock(mdev->act_log);
#line 706
  if (tmp___2 != 0) {
#line 706
    goto ldv_47355;
  } else {

  }
#line 706
  schedule();
#line 706
  goto ldv_47356;
  ldv_47355: 
#line 706
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47353: 
#line 708
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 711
  tmp___3 = kzalloc((unsigned long )nr_elements * 8UL, 208U);
#line 711
  bios = (struct bio **)tmp___3;
#line 712
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 713
    goto submit_one_by_one;
  } else {

  }
#line 715
  atomic_set(& wc.count, 0);
#line 716
  init_completion(& wc.io_done);
#line 717
  wc.mdev = mdev;
#line 718
  wc.error = 0;
#line 720
  i = 0;
#line 720
  goto ldv_47361;
  ldv_47360: 
#line 721
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 721
  enr = tmp___4->lc_number;
#line 722
  if (enr == 4294967295U) {
#line 723
    goto ldv_47358;
  } else {

  }
#line 725
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 725
  if (tmp___5 != 0) {
#line 728
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_47358: 
#line 720
  i = i + 1;
  ldv_47361: ;
#line 720
  if (i < nr_elements) {
#line 721
    goto ldv_47360;
  } else {

  }
#line 732
  lc_unlock(mdev->act_log);
#line 733
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 736
  i = 0;
#line 736
  goto ldv_47365;
  ldv_47364: ;
#line 737
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 738
    goto ldv_47363;
  } else {

  }
#line 739
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 739
  if (tmp___6 != 0) {
#line 740
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 741
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 743
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 736
  i = i + 1;
  ldv_47365: ;
#line 736
  if (i < nr_elements) {
#line 737
    goto ldv_47364;
  } else {

  }
  ldv_47363: 
#line 748
  drbd_md_flush(mdev);
#line 756
  tmp___7 = atomic_read((atomic_t const   *)(& wc.count));
#line 756
  if (tmp___7 != 0) {
#line 757
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 759
  put_ldev(mdev);
#line 761
  kfree((void const   *)bios);
#line 762
  return;
  free_bios_submit_one_by_one: 
#line 766
  i = 0;
#line 766
  goto ldv_47367;
  ldv_47366: 
#line 767
  bio_endio(*(bios + (unsigned long )i), 0);
#line 766
  i = i + 1;
  ldv_47367: ;
#line 766
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 767
    goto ldv_47366;
  } else {

  }
#line 769
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 772
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 774
  i = 0;
#line 774
  goto ldv_47371;
  ldv_47370: 
#line 775
  tmp___8 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 775
  enr = tmp___8->lc_number;
#line 776
  if (enr == 4294967295U) {
#line 777
    goto ldv_47369;
  } else {

  }
#line 780
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_47369: 
#line 774
  i = i + 1;
  ldv_47371: ;
#line 774
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 775
    goto ldv_47370;
  } else {

  }
#line 783
  lc_unlock(mdev->act_log);
#line 784
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 785
  put_ldev(mdev);
#line 786
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 795
  add = 0UL;
#line 799
  tmp___0 = lc_try_lock(mdev->act_log);
#line 799
  if (tmp___0 != 0) {
#line 799
    goto ldv_47381;
  } else {

  }
#line 799
  tmp___1 = get_current();
#line 799
  __wait.flags = 0U;
#line 799
  __wait.private = (void *)tmp___1;
#line 799
  __wait.func = & autoremove_wake_function;
#line 799
  __wait.task_list.next = & __wait.task_list;
#line 799
  __wait.task_list.prev = & __wait.task_list;
  ldv_47384: 
#line 799
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 799
  tmp___2 = lc_try_lock(mdev->act_log);
#line 799
  if (tmp___2 != 0) {
#line 799
    goto ldv_47383;
  } else {

  }
#line 799
  schedule();
#line 799
  goto ldv_47384;
  ldv_47383: 
#line 799
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47381: 
#line 801
  i = 0;
#line 801
  goto ldv_47389;
  ldv_47388: 
#line 802
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 802
  enr = tmp___3->lc_number;
#line 803
  if (enr == 4294967295U) {
#line 804
    goto ldv_47385;
  } else {

  }
#line 805
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 805
  tmp = (int )tmp___4;
#line 806
  descriptor.modname = "drbd";
#line 806
  descriptor.function = "drbd_al_apply_to_bm";
#line 806
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 806
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 806
  descriptor.lineno = 806U;
#line 806
  descriptor.flags = 0U;
#line 806
  descriptor.enabled = (char)0;
#line 806
  tmp___5 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 806
  if (tmp___5 != 0L) {
#line 806
    dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "AL: set %d bits in extent %u\n",
               tmp, enr);
  } else {

  }
#line 807
  add = (unsigned long )tmp + add;
  ldv_47385: 
#line 801
  i = i + 1;
  ldv_47389: ;
#line 801
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 802
    goto ldv_47388;
  } else {

  }
#line 810
  lc_unlock(mdev->act_log);
#line 811
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 813
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 813
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 814
  return;
}
}
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 821
  spin_lock_irq(& mdev->al_lock);
#line 822
  rv = al_ext->refcnt == 0U;
#line 823
  tmp = __builtin_expect(rv != 0, 1L);
#line 823
  if (tmp != 0L) {
#line 824
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 825
  spin_unlock_irq(& mdev->al_lock);
#line 827
  return (rv);
}
}
#line 839 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 844
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 844
  if (tmp == 0) {
#line 844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            844);
  } else {

  }
#line 846
  i = 0;
#line 846
  goto ldv_47407;
  ldv_47406: 
#line 847
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 848
  if (al_ext->lc_number == 4294967295U) {
#line 849
    goto ldv_47401;
  } else {

  }
#line 850
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 850
  if (tmp___0 != 0) {
#line 850
    goto ldv_47402;
  } else {

  }
#line 850
  tmp___1 = get_current();
#line 850
  __wait.flags = 0U;
#line 850
  __wait.private = (void *)tmp___1;
#line 850
  __wait.func = & autoremove_wake_function;
#line 850
  __wait.task_list.next = & __wait.task_list;
#line 850
  __wait.task_list.prev = & __wait.task_list;
  ldv_47405: 
#line 850
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 850
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 850
  if (tmp___2 != 0) {
#line 850
    goto ldv_47404;
  } else {

  }
#line 850
  schedule();
#line 850
  goto ldv_47405;
  ldv_47404: 
#line 850
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47402: ;
  ldv_47401: 
#line 846
  i = i + 1;
  ldv_47407: ;
#line 846
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 847
    goto ldv_47406;
  } else {

  }
#line 853
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 854
  return;
}
}
#line 856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 858
  __mptr = (struct drbd_work  const  *)w;
#line 858
  udw = (struct update_odbm_work *)__mptr;
#line 860
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 860
  if (tmp___0 == 0) {
#line 861
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 861
    if (tmp != 0) {
#line 862
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 863
    kfree((void const   *)udw);
#line 864
    return (1);
  } else {

  }
#line 867
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 868
  put_ldev(mdev);
#line 870
  kfree((void const   *)udw);
#line 872
  tmp___1 = drbd_bm_total_weight(mdev);
#line 872
  if (tmp___1 <= mdev->rs_failed) {
#line 873
    switch ((int )mdev->state.ldv_37735.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 876
    drbd_resync_finished(mdev);
    default: ;
#line 879
    goto ldv_47423;
    }
    ldv_47423: ;
  } else {

  }
#line 882
  drbd_bcast_sync_progress(mdev);
#line 884
  return (1);
}
}
#line 894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 902
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 902
  if (tmp == 0) {
#line 902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            902);
  } else {

  }
#line 906
  enr = (unsigned int )(sector >> 15);
#line 908
  e = lc_get(mdev->resync, enr);
#line 909
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 910
    __mptr = (struct lc_element  const  *)e;
#line 910
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 911
    if (ext->lce.lc_number == enr) {
#line 912
      if (success != 0) {
#line 913
        ext->rs_left = ext->rs_left - count;
      } else {
#line 915
        ext->rs_failed = ext->rs_failed + count;
      }
#line 916
      if (ext->rs_left < ext->rs_failed) {
#line 917
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 922
        dump_stack();
#line 924
        lc_put(mdev->resync, & ext->lce);
#line 925
        val.i = 0U;
#line 925
        val.ldv_37735.conn = 1U;
#line 925
        mask.i = 0U;
#line 925
        mask.ldv_37735.conn = 31U;
#line 925
        drbd_force_state(mdev, mask, val);
#line 926
        return;
      } else {

      }
    } else {
#line 935
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 935
      rs_left = tmp___0;
#line 936
      if (ext->flags != 0UL) {
#line 937
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 941
        ext->flags = 0UL;
      } else {

      }
#line 943
      if (ext->rs_failed != 0) {
#line 944
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 947
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 949
      ext->rs_left = rs_left;
#line 950
      ext->rs_failed = success == 0 ? count : 0;
#line 951
      lc_changed(mdev->resync, & ext->lce);
    }
#line 953
    lc_put(mdev->resync, & ext->lce);
#line 956
    if (ext->rs_left == ext->rs_failed) {
#line 957
      ext->rs_failed = 0;
#line 959
      tmp___1 = kmalloc(32UL, 32U);
#line 959
      udw = (struct update_odbm_work *)tmp___1;
#line 960
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 961
        udw->enr = ext->lce.lc_number;
#line 962
        udw->w.cb = & w_update_odbm;
#line 963
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 965
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 966
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 974
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long now ;
  unsigned long last ;
  int next ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 989
  count = 0UL;
#line 991
  wake_up = 0;
#line 994
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 995
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 997
    return;
  } else {

  }
#line 999
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1000
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1002
  _b = sector >= nr_sectors;
#line 1002
  if (_b != 0) {
#line 1002
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1002);
  } else {

  }
#line 1002
  if (_b != 0) {
#line 1002
    return;
  } else {

  }
#line 1003
  _b___0 = esector >= nr_sectors;
#line 1003
  if (_b___0 != 0) {
#line 1003
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1003);
  } else {

  }
#line 1003
  if (_b___0 != 0) {
#line 1003
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1005
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1010
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1010
  if (tmp != 0L) {
#line 1011
    return;
  } else {

  }
#line 1012
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1012
  if (tmp___0 != 0L) {
#line 1013
    ebnr = lbnr;
  } else {
#line 1015
    ebnr = (esector - 7UL) >> 3;
  }
#line 1016
  sbnr = (sector + 7UL) >> 3;
#line 1018
  if (sbnr > ebnr) {
#line 1019
    return;
  } else {

  }
#line 1025
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1025
  count = (unsigned long )tmp___1;
#line 1026
  if (count != 0UL) {
#line 1026
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1026
    if (tmp___4 != 0) {
#line 1027
      now = jiffies;
#line 1028
      last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 1029
      next = (mdev->rs_last_mark + 1) % 8;
#line 1030
      if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 1031
        tmp___2 = drbd_bm_total_weight(mdev);
#line 1031
        tw = tmp___2;
#line 1032
        if ((mdev->rs_mark_left[mdev->rs_last_mark] != tw && (unsigned int )*((unsigned short *)mdev + 998UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 998UL) != 320U) {
#line 1035
          mdev->rs_mark_time[next] = now;
#line 1036
          mdev->rs_mark_left[next] = tw;
#line 1037
          mdev->rs_last_mark = next;
        } else {

        }
      } else {

      }
#line 1040
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 1040
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 1041
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1042
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1046
      wake_up = 1;
#line 1047
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1049
  if (wake_up != 0) {
#line 1050
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1051
  return;
}
}
#line 1061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1069
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1070
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1072
    return;
  } else {

  }
#line 1075
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1075
  if (tmp == 0) {
#line 1076
    return;
  } else {

  }
#line 1078
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1079
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1081
  _b = sector >= nr_sectors;
#line 1081
  if (_b != 0) {
#line 1081
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1081);
  } else {

  }
#line 1081
  if (_b != 0) {
#line 1082
    goto out;
  } else {

  }
#line 1083
  _b___0 = esector >= nr_sectors;
#line 1083
  if (_b___0 != 0) {
#line 1083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1083);
  } else {

  }
#line 1083
  if (_b___0 != 0) {
#line 1084
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1086
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1090
  sbnr = sector >> 3;
#line 1091
  ebnr = esector >> 3;
#line 1095
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1095
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1096
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1096
  count = (unsigned int )tmp___1;
#line 1098
  enr = (unsigned int )(sector >> 15);
#line 1099
  e = lc_find(mdev->resync, enr);
#line 1100
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1101
    __mptr = (struct lc_element  const  *)e;
#line 1101
    __mptr___0 = (struct lc_element  const  *)e;
#line 1101
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1102
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1105
  put_ldev(mdev);
#line 1106
  return;
}
}
#line 1109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1113
  wakeup = 0;
#line 1116
  spin_lock_irq(& mdev->al_lock);
#line 1117
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1118
    spin_unlock_irq(& mdev->al_lock);
#line 1119
    return (0);
  } else {

  }
#line 1121
  e = lc_get(mdev->resync, enr);
#line 1122
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1122
    __mptr = (struct lc_element  const  *)e;
#line 1122
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1122
    bm_ext = 0;
  }
#line 1123
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1124
    if (bm_ext->lce.lc_number != enr) {
#line 1125
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1126
      bm_ext->rs_failed = 0;
#line 1127
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1128
      wakeup = 1;
    } else {

    }
#line 1130
    if (bm_ext->lce.refcnt == 1U) {
#line 1131
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1132
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1134
  rs_flags = (mdev->resync)->flags;
#line 1135
  spin_unlock_irq(& mdev->al_lock);
#line 1136
  if (wakeup != 0) {
#line 1137
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1139
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1140
    if ((rs_flags & 4UL) != 0UL) {
#line 1141
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1143
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1143
    if (tmp != 0L) {
#line 1143
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1143), "i" (12UL));
      ldv_47511: ;
#line 1143
      goto ldv_47511;
    } else {

    }
  } else {

  }
#line 1146
  return (bm_ext);
}
}
#line 1149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1152
  rv = 0;
#line 1154
  spin_lock_irq(& mdev->al_lock);
#line 1155
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1155
  if (tmp != 0L) {
#line 1156
    rv = 1;
  } else {
#line 1158
    al_ext = lc_find(mdev->act_log, enr);
#line 1159
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1160
      if (al_ext->refcnt != 0U) {
#line 1161
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1164
  spin_unlock_irq(& mdev->al_lock);
#line 1171
  return (rv);
}
}
#line 1181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1183
  enr = (unsigned int )(sector >> 15);
#line 1187
  __ret = 0;
#line 1187
  bm_ext = _bme_get(mdev, enr);
#line 1187
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1187
    tmp = get_current();
#line 1187
    __wait.flags = 0U;
#line 1187
    __wait.private = (void *)tmp;
#line 1187
    __wait.func = & autoremove_wake_function;
#line 1187
    __wait.task_list.next = & __wait.task_list;
#line 1187
    __wait.task_list.prev = & __wait.task_list;
    ldv_47530: 
#line 1187
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1187
    bm_ext = _bme_get(mdev, enr);
#line 1187
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1187
      goto ldv_47528;
    } else {

    }
#line 1187
    tmp___0 = get_current();
#line 1187
    tmp___1 = signal_pending(tmp___0);
#line 1187
    if (tmp___1 == 0) {
#line 1187
      schedule();
#line 1187
      goto ldv_47529;
    } else {

    }
#line 1187
    __ret = -512;
#line 1187
    goto ldv_47528;
    ldv_47529: ;
#line 1187
    goto ldv_47530;
    ldv_47528: 
#line 1187
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1187
  sig = __ret;
#line 1189
  if (sig != 0) {
#line 1190
    return (-4);
  } else {

  }
#line 1192
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1192
  if (tmp___2 != 0) {
#line 1193
    return (0);
  } else {

  }
#line 1195
  i = 0;
#line 1195
  goto ldv_47539;
  ldv_47538: 
#line 1196
  __ret___0 = 0;
#line 1196
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1196
  if (tmp___7 != 0) {
#line 1196
    tmp___3 = get_current();
#line 1196
    __wait___0.flags = 0U;
#line 1196
    __wait___0.private = (void *)tmp___3;
#line 1196
    __wait___0.func = & autoremove_wake_function;
#line 1196
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1196
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_47536: 
#line 1196
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1196
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1196
    if (tmp___4 == 0) {
#line 1196
      goto ldv_47534;
    } else {

    }
#line 1196
    tmp___5 = get_current();
#line 1196
    tmp___6 = signal_pending(tmp___5);
#line 1196
    if (tmp___6 == 0) {
#line 1196
      schedule();
#line 1196
      goto ldv_47535;
    } else {

    }
#line 1196
    __ret___0 = -512;
#line 1196
    goto ldv_47534;
    ldv_47535: ;
#line 1196
    goto ldv_47536;
    ldv_47534: 
#line 1196
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1196
  sig = __ret___0;
#line 1198
  if (sig != 0) {
#line 1199
    spin_lock_irq(& mdev->al_lock);
#line 1200
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1200
    if (tmp___8 == 0U) {
#line 1201
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1202
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1203
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1205
    spin_unlock_irq(& mdev->al_lock);
#line 1206
    return (-4);
  } else {

  }
#line 1195
  i = i + 1;
  ldv_47539: ;
#line 1195
  if (i <= 3) {
#line 1196
    goto ldv_47538;
  } else {

  }
#line 1209
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1210
  return (0);
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1224
  enr = (unsigned int )(sector >> 15);
#line 1225
  al_enr = enr * 4U;
#line 1230
  spin_lock_irq(& mdev->al_lock);
#line 1231
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1245
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1246
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1246
      __mptr = (struct lc_element  const  *)e;
#line 1246
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1246
      bm_ext = 0;
    }
#line 1247
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1248
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1248
      if (tmp != 0) {
#line 1248
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1248);
      } else {

      }
#line 1249
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1249
      if (tmp___0 == 0) {
#line 1249
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1249);
      } else {

      }
#line 1250
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1251
      mdev->resync_wenr = 4294967295U;
#line 1252
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1252
      if (tmp___1 == 0U) {
#line 1253
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1254
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1256
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1260
  e = lc_try_get(mdev->resync, enr);
#line 1261
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1261
    __mptr___0 = (struct lc_element  const  *)e;
#line 1261
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1261
    bm_ext = 0;
  }
#line 1262
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1263
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1263
    if (tmp___2 != 0) {
#line 1264
      goto proceed;
    } else {

    }
#line 1265
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1265
    if (tmp___3 == 0) {
#line 1266
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1272
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1273
      if (bm_ext->lce.refcnt == 0U) {
#line 1273
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1273);
      } else {

      }
    }
#line 1275
    goto check_al;
  } else {
#line 1278
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1279
      goto try_again;
    } else {

    }
#line 1281
    e = lc_get(mdev->resync, enr);
#line 1282
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1282
      __mptr___1 = (struct lc_element  const  *)e;
#line 1282
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1282
      bm_ext = 0;
    }
#line 1283
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1284
      rs_flags = (mdev->resync)->flags;
#line 1285
      if ((rs_flags & 4UL) != 0UL) {
#line 1286
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1288
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1288
      if (tmp___4 != 0L) {
#line 1288
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1288), "i" (12UL));
        ldv_47560: ;
#line 1288
        goto ldv_47560;
      } else {

      }
#line 1289
      goto try_again;
    } else {

    }
#line 1291
    if (bm_ext->lce.lc_number != enr) {
#line 1292
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1293
      bm_ext->rs_failed = 0;
#line 1294
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1295
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1296
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1296
      if (tmp___5 != 0) {
#line 1296
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1296);
      } else {

      }
    } else {

    }
#line 1298
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1299
    if (bm_ext->lce.refcnt != 1U) {
#line 1299
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1299);
    } else {

    }
#line 1300
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1301
    goto check_al;
  }
  check_al: 
#line 1304
  i = 0;
#line 1304
  goto ldv_47562;
  ldv_47561: 
#line 1305
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1305
  if (tmp___6 != 0L) {
#line 1306
    goto try_again;
  } else {

  }
#line 1307
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1307
  if (tmp___7 != 0) {
#line 1308
    goto try_again;
  } else {

  }
#line 1304
  i = i + 1;
  ldv_47562: ;
#line 1304
  if (i <= 3) {
#line 1305
    goto ldv_47561;
  } else {

  }
#line 1310
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1312
  mdev->resync_wenr = 4294967295U;
#line 1313
  spin_unlock_irq(& mdev->al_lock);
#line 1314
  return (0);
  try_again: ;
#line 1317
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1318
    mdev->resync_wenr = enr;
  } else {

  }
#line 1319
  spin_unlock_irq(& mdev->al_lock);
#line 1320
  return (-11);
}
}
#line 1323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1325
  enr = (unsigned int )(sector >> 15);
#line 1330
  tmp = spinlock_check(& mdev->al_lock);
#line 1330
  flags = _raw_spin_lock_irqsave(tmp);
#line 1331
  e = lc_find(mdev->resync, enr);
#line 1332
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1332
    __mptr = (struct lc_element  const  *)e;
#line 1332
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1332
    bm_ext = 0;
  }
#line 1333
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1334
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1335
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1335
    if (tmp___0 != 0) {
#line 1336
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1337
    return;
  } else {

  }
#line 1340
  if (bm_ext->lce.refcnt == 0U) {
#line 1341
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1345
    return;
  } else {

  }
#line 1348
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1348
  if (tmp___1 == 0U) {
#line 1349
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1350
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1351
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1352
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1355
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1356
  return;
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1364
  spin_lock_irq(& mdev->al_lock);
#line 1366
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1366
  if (tmp != 0) {
#line 1367
    lc_reset(mdev->resync);
#line 1368
    put_ldev(mdev);
  } else {

  }
#line 1370
  mdev->resync_locked = 0U;
#line 1371
  mdev->resync_wenr = 4294967295U;
#line 1372
  spin_unlock_irq(& mdev->al_lock);
#line 1373
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1374
  return;
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1389
  spin_lock_irq(& mdev->al_lock);
#line 1391
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1391
  if (tmp___3 != 0) {
#line 1393
    i = 0;
#line 1393
    goto ldv_47591;
    ldv_47590: 
#line 1394
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1395
    __mptr = (struct lc_element  const  *)e;
#line 1395
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1396
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1397
      goto ldv_47589;
    } else {

    }
#line 1398
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1399
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1402
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1402
      if (tmp != 0) {
#line 1402
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1402);
      } else {

      }
#line 1403
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1403
      if (tmp___0 == 0) {
#line 1403
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1403);
      } else {

      }
#line 1404
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1405
      mdev->resync_wenr = 4294967295U;
#line 1406
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1408
    if (bm_ext->lce.refcnt != 0U) {
#line 1409
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1411
      put_ldev(mdev);
#line 1412
      spin_unlock_irq(& mdev->al_lock);
#line 1413
      return (-11);
    } else {

    }
#line 1415
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1415
    if (tmp___1 != 0) {
#line 1415
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1415);
    } else {

    }
#line 1416
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1416
    if (tmp___2 != 0) {
#line 1416
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1416);
    } else {

    }
#line 1417
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_47589: 
#line 1393
    i = i + 1;
    ldv_47591: ;
#line 1393
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1394
      goto ldv_47590;
    } else {

    }

#line 1419
    if ((mdev->resync)->used != 0U) {
#line 1419
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1419);
    } else {

    }
#line 1420
    put_ldev(mdev);
  } else {

  }
#line 1422
  spin_unlock_irq(& mdev->al_lock);
#line 1424
  return (0);
}
}
#line 1433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1439
  wake_up = 0;
#line 1441
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1444
    return;
  } else {

  }
#line 1446
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1447
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1449
  _b = sector >= nr_sectors;
#line 1449
  if (_b != 0) {
#line 1449
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1449);
  } else {

  }
#line 1449
  if (_b != 0) {
#line 1449
    return;
  } else {

  }
#line 1450
  _b___0 = esector >= nr_sectors;
#line 1450
  if (_b___0 != 0) {
#line 1450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1450);
  } else {

  }
#line 1450
  if (_b___0 != 0) {
#line 1450
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1452
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1457
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1457
  if (tmp != 0L) {
#line 1458
    return;
  } else {

  }
#line 1459
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1459
  if (tmp___0 != 0L) {
#line 1460
    ebnr = lbnr;
  } else {
#line 1462
    ebnr = (esector - 7UL) >> 3;
  }
#line 1463
  sbnr = (sector + 7UL) >> 3;
#line 1465
  if (sbnr > ebnr) {
#line 1466
    return;
  } else {

  }
#line 1472
  spin_lock_irq(& mdev->al_lock);
#line 1473
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1473
  count = (unsigned long )tmp___1;
#line 1474
  if (count != 0UL) {
#line 1475
    mdev->rs_failed = mdev->rs_failed + count;
#line 1477
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1477
    if (tmp___2 != 0) {
#line 1478
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1479
      put_ldev(mdev);
    } else {

    }
#line 1484
    wake_up = 1;
  } else {

  }
#line 1486
  spin_unlock_irq(& mdev->al_lock);
#line 1487
  if (wake_up != 0) {
#line 1488
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1489
  return;
}
}
#line 1491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1496
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1498
  mutex_lock(ldv_func_arg1);
#line 1499
  return;
}
}
#line 1501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1506
  tmp = mutex_trylock(ldv_func_arg1);
#line 1506
  ldv_func_res = tmp;
#line 1508
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1508
  return (tmp___0);
#line 1510
  return (ldv_func_res);
}
}
#line 1513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1518
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1520
  mutex_unlock(ldv_func_arg1);
#line 1521
  return;
}
}
#line 1523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1528
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1530
  mutex_lock(ldv_func_arg1);
#line 1531
  return;
}
}
#line 1533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1538
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1540
  mutex_unlock(ldv_func_arg1);
#line 1541
  return;
}
}
#line 1543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1548
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1550
  mutex_unlock(ldv_func_arg1);
#line 1551
  return;
}
}
#line 1553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1558
  tmp = mutex_is_locked(lock);
#line 1558
  ldv_func_res = tmp;
#line 1560
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1560
  return (tmp___0);
#line 1562
  return (ldv_func_res);
}
}
#line 1565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1570
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1572
  mutex_lock(ldv_func_arg1);
#line 1573
  return;
}
}
#line 1575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1580
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1582
  mutex_unlock(ldv_func_arg1);
#line 1583
  return;
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1590
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1592
  mutex_lock(ldv_func_arg1);
#line 1593
  return;
}
}
#line 1595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1600
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1602
  mutex_unlock(ldv_func_arg1);
#line 1603
  return;
}
}
#line 1605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1610
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1612
  mutex_unlock(ldv_func_arg1);
#line 1613
  return;
}
}
#line 1615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1620
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1622
  mutex_unlock(ldv_func_arg1);
#line 1623
  return;
}
}
#line 1625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1630
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1632
  mutex_unlock(ldv_func_arg1);
#line 1633
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 548 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 211
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 215
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 219
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 223
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) ;
#line 75
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 79
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6163: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 210
extern int del_timer(struct timer_list * ) ;
#line 227 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 189 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 243 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 245
  return (1);
}
}
#line 94 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 89
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 89
  if (tmp != 0L) {
#line 89
    goto do_trace;
  } else {

  }
#line 89
  return;
  do_trace: 
#line 89
  __rcu_read_lock();
#line 89
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
  tmp___0 = debug_lockdep_rcu_enabled();
#line 89
  if (tmp___0 != 0 && ! __warned) {
#line 89
    tmp___1 = rcu_read_lock_sched_held();
#line 89
    if (tmp___1 == 0 && 1) {
#line 89
      __warned = 1;
#line 89
      lockdep_rcu_dereference("include/trace/events/module.h", 94);
    } else {

    }
  } else {

  }
#line 89
  it_func_ptr = _________p1;
#line 89
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_12426: 
#line 89
    it_func = it_func_ptr->func;
#line 89
    __data = it_func_ptr->data;
#line 89
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 89
    it_func_ptr = it_func_ptr + 1;
#line 89
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
      goto ldv_12426;
    } else {

    }

  } else {

  }
#line 89
  __rcu_read_lock();
#line 91
  return;
}
}
#line 433 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 435
  return ((unsigned int )mod->state != 2U);
}
}
#line 515 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 517
  ret = 1;
#line 519
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 522
    tmp = module_is_live(module);
#line 522
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 522
    if (tmp___0 != 0L) {
#line 523
      __vpp_verify = 0;
#line 523
      switch (4UL) {
      case 1UL: 
#line 523
      pao_ID__ = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12797;
      case 2UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12797;
      case 4UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12797;
      case 8UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12797;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12797: ;
#line 523
      goto ldv_12802;
      case 2UL: 
#line 523
      pao_ID_____0 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12808;
      case 2UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12808;
      case 4UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12808;
      case 8UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12808;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12808: ;
#line 523
      goto ldv_12802;
      case 4UL: 
#line 523
      pao_ID_____1 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12818;
      case 2UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12818;
      case 4UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12818;
      case 8UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12818;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12818: ;
#line 523
      goto ldv_12802;
      case 8UL: 
#line 523
      pao_ID_____2 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12828;
      case 2UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12828;
      case 4UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12828;
      case 8UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12828;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12828: ;
#line 523
      goto ldv_12802;
      default: 
#line 523
      __bad_size_call_parameter();
#line 523
      goto ldv_12802;
      }
      ldv_12802: ;
#line 524
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 526
      ret = 0;
    }
  } else {

  }
#line 530
  return (ret);
}
}
#line 533
extern void module_put(struct module * ) ;
#line 254 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 278
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 206 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 206
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 206
  return (tmp);
}
}
#line 1808 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2059
extern int wake_up_process(struct task_struct * ) ;
#line 2013 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2014
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2015
extern struct block_device *bdget(dev_t  ) ;
#line 2019
extern void bdput(struct block_device * ) ;
#line 2055
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 408 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 413
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 606
extern struct gendisk *alloc_disk(int  ) ;
#line 608
extern void put_disk(struct gendisk * ) ;
#line 255 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 257
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 258
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 258
    return (tmp);
  } else {

  }
#line 259
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 805 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 806
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 807
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 811
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 839
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 853
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 590
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 590
  if (tmp != 0L) {
#line 590
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (590), "i" (12UL));
    ldv_46604: ;
#line 590
    goto ldv_46604;
  } else {

  }
#line 591
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 592
  return;
}
}
#line 601 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 603
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 604
  return;
}
}
#line 613 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 615
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 615
  if (tmp != 0L) {
#line 615
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (615), "i" (12UL));
    ldv_46619: ;
#line 615
    goto ldv_46619;
  } else {

  }
#line 616
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 617
  return;
}
}
#line 1129 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1131
  ldv_mutex_lock_124(& mdev->data.mutex);
#line 1134
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1134
  if (tmp != 0L) {
#line 1135
    ldv_mutex_unlock_125(& mdev->data.mutex);
#line 1136
    return (0);
  } else {

  }
#line 1138
  return (1);
}
}
#line 1141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1143
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 1144
  return;
}
}
#line 1165
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1174
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1180
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1185
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1190
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 1193
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1197
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1237
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1239
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1244
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1251
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1252
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1253
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1255
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1450 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1451 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1452 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1454 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1455 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1459 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1464
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1465
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1467 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1477
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1478
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1637
void drbd_nl_cleanup(void) ;
#line 1638
int drbd_nl_init(void) ;
#line 1639
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1738 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1740
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1740
  if (tmp == 0) {
#line 1740
    goto ldv_47668;
  } else {

  }
#line 1740
  tmp___0 = get_current();
#line 1740
  __wait.flags = 0U;
#line 1740
  __wait.private = (void *)tmp___0;
#line 1740
  __wait.func = & autoremove_wake_function;
#line 1740
  __wait.task_list.next = & __wait.task_list;
#line 1740
  __wait.task_list.prev = & __wait.task_list;
  ldv_47671: 
#line 1740
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1740
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1740
  if (tmp___1 == 0) {
#line 1740
    goto ldv_47670;
  } else {

  }
#line 1740
  schedule();
#line 1740
  goto ldv_47671;
  ldv_47670: 
#line 1740
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47668: ;
#line 1743
  return;
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1783
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1785
  if (forcedetach == 0) {
#line 1786
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1786
    if (tmp != 0) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1788
    goto ldv_47694;
  } else {

  }
  case 2: ;
  case 1: 
#line 1793
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  if ((int )mdev->state.ldv_37735.disk > 2) {
#line 1795
    __ns.i = mdev->state.i;
#line 1795
    __ns.ldv_37735.disk = 2U;
#line 1795
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1799
  goto ldv_47694;
  }
  ldv_47694: ;
#line 1802
  return;
}
}
#line 1812 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1815
  if (error != 0) {
#line 1817
    tmp = spinlock_check(& mdev->req_lock);
#line 1817
    flags = _raw_spin_lock_irqsave(tmp);
#line 1818
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1819
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1821
  return;
}
}
#line 1874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1877
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1881
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1881
  if (tmp___1 != 0UL) {
#line 1881
    __min1 = 34359738368UL;
#line 1881
    tmp___0 = drbd_md_first_sector(bdev);
#line 1881
    __min2 = tmp___0;
#line 1881
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1881
    s = 0UL;
  }
#line 1884
  goto ldv_47735;
  case -2: 
#line 1886
  __min1___0 = 34359738368UL;
#line 1886
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1886
  __min2___0 = tmp___2;
#line 1886
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1889
  __min1___1 = s;
#line 1889
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1889
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1892
  goto ldv_47735;
  default: 
#line 1894
  __min1___2 = 8587575296UL;
#line 1894
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1894
  __min2___2 = tmp___3;
#line 1894
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47735: ;
#line 1897
  return (s);
}
}
#line 1905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1908
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1910
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1916
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1917
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1917
    if (tmp != 0) {
#line 1918
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1919
      dump_stack();
    } else {

    }
#line 1921
    return (0UL);
  } else {

  }
#line 1923
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1923
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1926
  return (0UL);
  }
}
}
#line 1988 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1990
  _drbd_thread_stop(thi, 0, 0);
#line 1991
  return;
}
}
#line 1993 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1995
  _drbd_thread_stop(thi, 1, 0);
#line 1996
  return;
}
}
#line 2196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2202
  switch ((unsigned int )s.ldv_37735.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2215
  goto ldv_47850;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2234
  return (0);
  }
  ldv_47850: ;
#line 2237
  switch ((unsigned int )s.ldv_37735.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2244
  goto ldv_47870;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2253
  return (0);
  }
  ldv_47870: ;
#line 2256
  return (1);
}
}
#line 2264 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2266
  tmp = drbd_get_max_buffers(mdev);
#line 2266
  mxb = tmp;
#line 2268
  tmp___0 = is_susp(mdev->state);
#line 2268
  if (tmp___0 != 0) {
#line 2269
    return (0);
  } else {

  }
#line 2270
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2270
  if (tmp___1 != 0) {
#line 2271
    return (0);
  } else {

  }
#line 2278
  tmp___2 = drbd_state_is_stable___0(mdev->state);
#line 2278
  if (tmp___2 == 0) {
#line 2279
    return (0);
  } else {

  }
#line 2283
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2283
  if (tmp___3 > mxb) {
#line 2284
    return (0);
  } else {

  }
#line 2285
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2285
  if (tmp___4 != 0) {
#line 2286
    return (0);
  } else {

  }
#line 2287
  return (1);
}
}
#line 2368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2370
  sk = (mdev->data.socket)->sk;
#line 2371
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2372
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2373
  return;
}
}
#line 2375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2382
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_48100;
  ldv_48099: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_48100: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_48099;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 137
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 182
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 211
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 253
  tmp = kmalloc(56UL, 208U);
#line 253
  b = (struct drbd_tl_epoch *)tmp;
#line 254
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 255
    return (0);
  } else {

  }
#line 256
  INIT_LIST_HEAD(& b->requests);
#line 257
  INIT_LIST_HEAD(& b->w.list);
#line 258
  b->next = 0;
#line 259
  b->br_number = 4711U;
#line 260
  b->n_writes = 0;
#line 261
  b->w.cb = 0;
#line 263
  mdev->oldest_tle = b;
#line 264
  mdev->newest_tle = b;
#line 265
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 267
  mdev->tl_hash = 0;
#line 268
  mdev->tl_hash_s = 0U;
#line 270
  return (1);
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 275
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            275);
  } else {

  }
#line 276
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 276
  if (tmp == 0) {
#line 276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            276);
  } else {

  }
#line 277
  kfree((void const   *)mdev->oldest_tle);
#line 278
  mdev->oldest_tle = 0;
#line 279
  kfree((void const   *)mdev->unused_spare_tle);
#line 280
  mdev->unused_spare_tle = 0;
#line 281
  kfree((void const   *)mdev->tl_hash);
#line 282
  mdev->tl_hash = 0;
#line 283
  mdev->tl_hash_s = 0U;
#line 284
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 297
  INIT_LIST_HEAD(& new->requests);
#line 298
  INIT_LIST_HEAD(& new->w.list);
#line 299
  new->w.cb = 0;
#line 300
  new->next = 0;
#line 301
  new->n_writes = 0;
#line 303
  newest_before = mdev->newest_tle;
#line 306
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 307
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 308
    (mdev->newest_tle)->next = new;
#line 309
    mdev->newest_tle = new;
  } else {

  }
#line 311
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 330
  spin_lock_irq(& mdev->req_lock);
#line 332
  b = mdev->oldest_tle;
#line 335
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 338
    goto bail;
  } else {

  }
#line 340
  if (b->br_number != barrier_nr) {
#line 341
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 343
    goto bail;
  } else {

  }
#line 345
  if ((unsigned int )b->n_writes != set_size) {
#line 346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 348
    goto bail;
  } else {

  }
#line 352
  le = b->requests.next;
#line 352
  tle = le->next;
#line 352
  goto ldv_48328;
  ldv_48327: 
#line 353
  __mptr = (struct list_head  const  *)le;
#line 353
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 354
  _req_mod(r, barrier_acked);
#line 352
  le = tle;
#line 352
  tle = le->next;
  ldv_48328: ;
#line 352
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 353
    goto ldv_48327;
  } else {

  }
#line 369
  list_del_init(& b->requests);
#line 371
  nob = b->next;
#line 372
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 372
  if (tmp != 0) {
#line 373
    _tl_add_barrier(mdev, b);
#line 374
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 375
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 379
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 379
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              379);
    } else {

    }
#line 380
    mdev->oldest_tle = nob;
#line 381
    kfree((void const   *)b);
  }
#line 384
  spin_unlock_irq(& mdev->req_lock);
#line 385
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 385
  if (tmp___0 != 0) {
#line 385
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 385
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 385
  if (tmp___2 < 0) {
#line 385
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 385, tmp___1);
  } else {

  }
#line 387
  return;
  bail: 
#line 390
  spin_unlock_irq(& mdev->req_lock);
#line 391
  val.i = 0U;
#line 391
  val.ldv_37735.conn = 6U;
#line 391
  mask.i = 0U;
#line 391
  mask.ldv_37735.conn = 31U;
#line 391
  drbd_force_state(mdev, mask, val);
#line 393
  return;
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 409
  b = mdev->oldest_tle;
#line 410
  pn = & mdev->oldest_tle;
#line 411
  goto ldv_48363;
  ldv_48362: 
#line 412
  n_writes = 0;
#line 413
  n_reads = 0;
#line 414
  INIT_LIST_HEAD(& carry_reads);
#line 415
  le = b->requests.next;
#line 415
  tle = le->next;
#line 415
  goto ldv_48355;
  ldv_48354: 
#line 416
  __mptr = (struct list_head  const  *)le;
#line 416
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 417
  rv = _req_mod(req, what);
#line 419
  n_writes = (rv & 1) + n_writes;
#line 420
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 415
  le = tle;
#line 415
  tle = le->next;
  ldv_48355: ;
#line 415
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 416
    goto ldv_48354;
  } else {

  }
#line 422
  tmp = b->next;
#line 424
  if (n_writes != 0) {
#line 425
    if ((unsigned int )what == 21U) {
#line 426
      b->n_writes = n_writes;
#line 427
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 428
        b->w.cb = & w_send_barrier;
#line 429
        inc_ap_pending(mdev);
#line 430
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 433
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 435
    pn = & b->next;
  } else {
#line 437
    if (n_reads != 0) {
#line 438
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 441
    list_del(& b->requests);
#line 446
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 447
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 447
      if (tmp___0 != 0) {
#line 447
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 447
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 447
      if (tmp___2 < 0) {
#line 447
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 447
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 447, tmp___1);
      } else {

      }
    } else {

    }
#line 449
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 451
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 451
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                451);
      } else {

      }
#line 452
      INIT_LIST_HEAD(& b->requests);
#line 453
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 454
      INIT_LIST_HEAD(& b->w.list);
#line 455
      b->w.cb = 0;
#line 456
      b->br_number = random32();
#line 457
      b->n_writes = 0;
#line 459
      *pn = b;
#line 460
      goto ldv_48361;
    } else {

    }
#line 462
    *pn = tmp;
#line 463
    kfree((void const   *)b);
  }
#line 465
  b = tmp;
#line 466
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_48363: ;
#line 411
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 412
    goto ldv_48362;
  } else {

  }
  ldv_48361: ;
#line 416
  return;
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 484
  spin_lock_irq(& mdev->req_lock);
#line 486
  _tl_restart(mdev, connection_lost_while_pending);
#line 489
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 489
  if (tmp == 0) {
#line 489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            489);
  } else {

  }
#line 492
  le = mdev->out_of_sequence_requests.next;
#line 492
  tle = le->next;
#line 492
  goto ldv_48373;
  ldv_48372: 
#line 493
  __mptr = (struct list_head  const  *)le;
#line 493
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 496
  _req_mod(r, connection_lost_while_pending);
#line 492
  le = tle;
#line 492
  tle = le->next;
  ldv_48373: ;
#line 492
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 493
    goto ldv_48372;
  } else {

  }
#line 500
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 502
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 504
  spin_unlock_irq(& mdev->req_lock);
#line 505
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 509
  spin_lock_irq(& mdev->req_lock);
#line 510
  _tl_restart(mdev, what);
#line 511
  spin_unlock_irq(& mdev->req_lock);
#line 512
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 523
  return (((((int )os.ldv_37735.conn > 9 && (int )ns.ldv_37735.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_37735.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 539
  tmp = spinlock_check(& mdev->req_lock);
#line 539
  flags = _raw_spin_lock_irqsave(tmp);
#line 540
  os = mdev->state;
#line 541
  ns.i = (os.i & ~ mask.i) | val.i;
#line 542
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 543
  ns = mdev->state;
#line 544
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 546
  return (rv);
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 558
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 559
  return;
}
}
#line 561
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 562
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 564
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 566
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 576
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 576
  if (tmp != 0) {
#line 577
    return (SS_CW_SUCCESS);
  } else {

  }
#line 579
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 579
  if (tmp___0 != 0) {
#line 580
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 582
  rv = 0;
#line 583
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 583
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 584
  os = mdev->state;
#line 585
  ns.i = (os.i & ~ mask.i) | val.i;
#line 586
  ns = sanitize_state(mdev, os, ns, 0);
#line 588
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 588
  if (tmp___2 == 0) {
#line 589
    rv = 4;
  } else {

  }
#line 590
  if (rv == 0) {
#line 591
    rv = is_valid_state(mdev, ns);
#line 592
    if (rv == 1) {
#line 593
      rv = is_valid_state_transition(mdev, ns, os);
#line 594
      if (rv == 1) {
#line 595
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 598
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 600
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 622
  init_completion(& done);
#line 624
  if (((unsigned int )f & 8U) != 0U) {
#line 625
    ldv_mutex_lock_127(& mdev->state_mutex);
  } else {

  }
#line 627
  tmp = spinlock_check(& mdev->req_lock);
#line 627
  flags = _raw_spin_lock_irqsave(tmp);
#line 628
  os = mdev->state;
#line 629
  ns.i = (os.i & ~ mask.i) | val.i;
#line 630
  ns = sanitize_state(mdev, os, ns, 0);
#line 632
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 632
  if (tmp___5 != 0) {
#line 633
    rv = is_valid_state(mdev, ns);
#line 634
    if (rv == 1) {
#line 635
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 636
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 638
    if (rv <= 0) {
#line 639
      if (((unsigned int )f & 2U) != 0U) {
#line 640
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 641
      goto abort;
    } else {

    }
#line 644
    drbd_state_lock___0(mdev);
#line 645
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 645
    if (tmp___0 == 0) {
#line 646
      drbd_state_unlock(mdev);
#line 647
      rv = -10;
#line 648
      if (((unsigned int )f & 2U) != 0U) {
#line 649
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 650
      goto abort;
    } else {

    }
#line 653
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 653
    rv = (int )tmp___1;
#line 653
    if (rv != 0) {
#line 653
      goto ldv_48445;
    } else {

    }
#line 653
    tmp___2 = get_current();
#line 653
    __wait.flags = 0U;
#line 653
    __wait.private = (void *)tmp___2;
#line 653
    __wait.func = & autoremove_wake_function;
#line 653
    __wait.task_list.next = & __wait.task_list;
#line 653
    __wait.task_list.prev = & __wait.task_list;
    ldv_48448: 
#line 653
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 653
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 653
    rv = (int )tmp___3;
#line 653
    if (rv != 0) {
#line 653
      goto ldv_48447;
    } else {

    }
#line 653
    schedule();
#line 653
    goto ldv_48448;
    ldv_48447: 
#line 653
    finish_wait(& mdev->state_wait, & __wait);
    ldv_48445: ;
#line 656
    if (rv <= 0) {
#line 657
      drbd_state_unlock(mdev);
#line 658
      if (((unsigned int )f & 2U) != 0U) {
#line 659
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 660
      goto abort;
    } else {

    }
#line 662
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 662
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 663
    os = mdev->state;
#line 664
    ns.i = (os.i & ~ mask.i) | val.i;
#line 665
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 666
    drbd_state_unlock(mdev);
  } else {
#line 668
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 671
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 673
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 674
    tmp___6 = get_current();
#line 674
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 674
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              674);
    } else {

    }
#line 675
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 679
  if (((unsigned int )f & 8U) != 0U) {
#line 680
    ldv_mutex_unlock_128(& mdev->state_mutex);
  } else {

  }
#line 682
  return (rv);
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 700
  rv = drbd_req_state(mdev, mask, val, f);
#line 700
  if (rv != -18) {
#line 700
    goto ldv_48459;
  } else {

  }
#line 700
  tmp = get_current();
#line 700
  __wait.flags = 0U;
#line 700
  __wait.private = (void *)tmp;
#line 700
  __wait.func = & autoremove_wake_function;
#line 700
  __wait.task_list.next = & __wait.task_list;
#line 700
  __wait.task_list.prev = & __wait.task_list;
  ldv_48462: 
#line 700
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 700
  rv = drbd_req_state(mdev, mask, val, f);
#line 700
  if (rv != -18) {
#line 700
    goto ldv_48461;
  } else {

  }
#line 700
  schedule();
#line 700
  goto ldv_48462;
  ldv_48461: 
#line 700
  finish_wait(& mdev->state_wait, & __wait);
  ldv_48459: ;
#line 703
  return (rv);
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 708
  tmp = is_susp(ns);
#line 708
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37735.pdsk);
#line 708
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37735.disk);
#line 708
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_37735.peer);
#line 708
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37735.role);
#line 708
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_37735.conn);
#line 708
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 725
  if (err == -18) {
#line 726
    return;
  } else {

  }
#line 727
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 727
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 728
  print_st(mdev, (char *)" state", os);
#line 729
  print_st(mdev, (char *)"wanted", ns);
#line 730
  return;
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  rv = 1;
#line 760
  fp = FP_DONT_CARE;
#line 761
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 761
  if (tmp != 0) {
#line 762
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 763
    put_ldev(mdev);
  } else {

  }
#line 766
  tmp___0 = get_net_conf(mdev);
#line 766
  if (tmp___0 != 0) {
#line 767
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 769
      rv = -1;
    } else {

    }
#line 770
    put_net_conf(mdev);
  } else {

  }
#line 773
  if (rv <= 0) {

  } else
#line 775
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 776
    rv = -12;
  } else
#line 778
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37735.conn <= 9) && (int )ns.ldv_37735.disk <= 7) {
#line 779
    rv = -2;
  } else
#line 781
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_37735.conn <= 9) && (int )ns.ldv_37735.pdsk > 5) {
#line 783
    rv = -7;
  } else
#line 785
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37735.disk <= 4) && (int )ns.ldv_37735.pdsk <= 4) {
#line 786
    rv = -2;
  } else
#line 788
  if ((int )ns.ldv_37735.conn > 10 && (int )ns.ldv_37735.disk <= 3) {
#line 789
    rv = -4;
  } else
#line 791
  if ((int )ns.ldv_37735.conn > 10 && (int )ns.ldv_37735.pdsk <= 3) {
#line 792
    rv = -5;
  } else
#line 794
  if (((int )ns.ldv_37735.conn > 10 && (int )ns.ldv_37735.disk <= 7) && (int )ns.ldv_37735.pdsk <= 7) {
#line 795
    rv = -2;
  } else
#line 797
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 802
    rv = -6;
  } else
#line 804
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 806
    rv = -14;
  } else
#line 808
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 810
    rv = -17;
  } else {

  }
#line 812
  return (rv);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 824
  rv = 1;
#line 826
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_37735.conn > 10) {
#line 828
    rv = -8;
  } else {

  }
#line 830
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 831
    rv = -9;
  } else {

  }
#line 833
  if ((int )ns.ldv_37735.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 834
    rv = -11;
  } else {

  }
#line 836
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_37735.conn <= 1) {
#line 837
    rv = -13;
  } else {

  }
#line 839
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_37735.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 840
    rv = -16;
  } else {

  }
#line 842
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 843
    rv = -18;
  } else {

  }
#line 845
  if ((int )ns.ldv_37735.conn == (int )os.ldv_37735.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 846
    rv = -18;
  } else {

  }
#line 848
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_37735.conn <= 9) {
#line 849
    rv = -15;
  } else {

  }
#line 851
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_37735.conn != (int )os.ldv_37735.conn) && (int )os.ldv_37735.conn > 10) {
#line 853
    rv = -8;
  } else {

  }
#line 855
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_37735.conn <= 9) {
#line 857
    rv = -15;
  } else {

  }
#line 859
  return (rv);
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 877
  fp = FP_DONT_CARE;
#line 878
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 878
  if (tmp != 0) {
#line 879
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 880
    put_ldev(mdev);
  } else {

  }
#line 884
  if (((int )ns.ldv_37735.conn > 2 && (int )ns.ldv_37735.conn <= 7) && (int )os.ldv_37735.conn <= 1) {
#line 886
    ns.ldv_37735.conn = os.ldv_37735.conn;
  } else {

  }
#line 890
  if (((((int )os.ldv_37735.conn > 2 && (int )os.ldv_37735.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_37735.conn <= 7) {
#line 892
    ns.ldv_37735.conn = os.ldv_37735.conn;
  } else {

  }
#line 895
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 896
    ns.ldv_37735.disk = 0U;
  } else {

  }
#line 900
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 901
    ns.ldv_37735.disk = 0U;
  } else {

  }
#line 904
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 905
    ns.ldv_37735.conn = os.ldv_37735.conn;
  } else {

  }
#line 907
  if ((int )ns.ldv_37735.conn <= 9) {
#line 908
    ns.ldv_37735.peer_isp = 0U;
#line 909
    ns.ldv_37735.peer = 0U;
#line 910
    if ((int )ns.ldv_37735.pdsk > 6 || (int )ns.ldv_37735.pdsk <= 3) {
#line 911
      ns.ldv_37735.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 915
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 916
    ns.ldv_37735.aftr_isp = 0U;
  } else {

  }
#line 919
  if (((int )os.ldv_37735.conn > 10 && (int )ns.ldv_37735.conn > 10) && ((int )ns.ldv_37735.disk <= 2 || (int )ns.ldv_37735.pdsk <= 2)) {
#line 921
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 922
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 925
    ns.ldv_37735.conn = 10U;
  } else {

  }
#line 928
  if ((int )ns.ldv_37735.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 931
    switch ((int )ns.ldv_37735.conn) {
    case 14: ;
    case 21: 
#line 934
    ns.ldv_37735.disk = 5U;
#line 935
    goto ldv_48495;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 940
    ns.ldv_37735.disk = 8U;
#line 941
    goto ldv_48495;
    case 17: 
#line 943
    ns.ldv_37735.disk = 4U;
#line 944
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 945
    goto ldv_48495;
    }
    ldv_48495: ;
#line 947
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 948
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 951
  if ((int )ns.ldv_37735.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 953
    switch ((int )ns.ldv_37735.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 958
    ns.ldv_37735.pdsk = 8U;
#line 959
    goto ldv_48505;
    case 13: ;
    case 20: 
#line 965
    ns.ldv_37735.pdsk = (int )os.ldv_37735.pdsk > 0 && (int )os.ldv_37735.pdsk <= 4 ? os.ldv_37735.pdsk : 5U;
#line 968
    goto ldv_48505;
    case 16: 
#line 970
    ns.ldv_37735.pdsk = 4U;
#line 971
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 972
    goto ldv_48505;
    }
    ldv_48505: ;
#line 974
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 975
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 979
  if ((int )ns.ldv_37735.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 979
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 979
    if (tmp___0 != 0) {
#line 981
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 982
        ns.ldv_37735.disk = mdev->new_state_tmp.ldv_37735.disk;
#line 983
        ns.ldv_37735.pdsk = mdev->new_state_tmp.ldv_37735.pdsk;
      } else {
#line 985
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 986
        ns.ldv_37735.disk = 0U;
#line 987
        ns.ldv_37735.pdsk = 6U;
      }
#line 989
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 992
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37735.conn <= 9) && (int )ns.ldv_37735.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37735.conn > 9) || (int )os.ldv_37735.pdsk <= 5)) {
#line 995
    ns.ldv_37735.susp_fen = 1U;
  } else {

  }
#line 997
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37735.disk <= 7) && (int )ns.ldv_37735.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37735.disk > 7) || (int )os.ldv_37735.pdsk > 7)) {
#line 1000
    ns.ldv_37735.susp_nod = 1U;
  } else {

  }
#line 1002
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1003
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1004
      ns.ldv_37735.conn = 20U;
    } else {

    }
#line 1005
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1006
      ns.ldv_37735.conn = 21U;
    } else {

    }
  } else {
#line 1008
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1009
      ns.ldv_37735.conn = 16U;
    } else {

    }
#line 1010
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1011
      ns.ldv_37735.conn = 17U;
    } else {

    }
  }
#line 1014
  return (ns);
}
}
#line 1018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1020
  if ((unsigned int )cs == 19U) {
#line 1026
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1028
    bit = mdev->ov_start_sector >> 3;
#line 1029
    if (mdev->rs_total <= bit) {
#line 1030
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 1032
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1034
  return;
}
}
#line 1036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1038
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1038
  if (tmp != 0) {
#line 1039
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1040
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  int tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 1056
  rv = 1;
#line 1057
  warn_sync_abort = 0;
#line 1060
  os = mdev->state;
#line 1062
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1064
  if (ns.i == os.i) {
#line 1065
    return (2);
  } else {

  }
#line 1067
  if (((unsigned int )flags & 1U) == 0U) {
#line 1071
    rv = is_valid_state(mdev, ns);
#line 1072
    if (rv <= 0) {
#line 1076
      tmp = is_valid_state(mdev, os);
#line 1076
      if (tmp == rv) {
#line 1077
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1079
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1082
  if (rv <= 0) {
#line 1083
    if (((unsigned int )flags & 2U) != 0U) {
#line 1084
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1085
    return (rv);
  } else {

  }
#line 1088
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1089
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1093
  pbp = (char *)(& pb);
#line 1094
  *pbp = 0;
#line 1095
  if ((int )ns.ldv_37735.role != (int )os.ldv_37735.role) {
#line 1095
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_37735.role);
#line 1095
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_37735.role);
#line 1095
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1095
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1096
  if ((int )ns.ldv_37735.peer != (int )os.ldv_37735.peer) {
#line 1096
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37735.peer);
#line 1096
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_37735.peer);
#line 1096
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1096
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1097
  if ((int )ns.ldv_37735.conn != (int )os.ldv_37735.conn) {
#line 1097
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_37735.conn);
#line 1097
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_37735.conn);
#line 1097
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1097
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1098
  if ((int )ns.ldv_37735.disk != (int )os.ldv_37735.disk) {
#line 1098
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37735.disk);
#line 1098
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_37735.disk);
#line 1098
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1098
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1099
  if ((int )ns.ldv_37735.pdsk != (int )os.ldv_37735.pdsk) {
#line 1099
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37735.pdsk);
#line 1099
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_37735.pdsk);
#line 1099
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1099
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1100
  tmp___18 = is_susp(ns);
#line 1100
  tmp___19 = is_susp(os);
#line 1100
  if (tmp___18 != tmp___19) {
#line 1101
    tmp___15 = is_susp(ns);
#line 1101
    tmp___16 = is_susp(os);
#line 1101
    tmp___17 = sprintf(pbp, "susp( %s -> %s ) ", tmp___16 != 0 ? (char *)"1" : (char *)"0",
                       tmp___15 != 0 ? (char *)"1" : (char *)"0");
#line 1101
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1104
  if ((int )ns.ldv_37735.aftr_isp != (int )os.ldv_37735.aftr_isp) {
#line 1104
    tmp___20 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1104
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1105
  if ((int )ns.ldv_37735.peer_isp != (int )os.ldv_37735.peer_isp) {
#line 1105
    tmp___21 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1105
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1106
  if ((int )ns.ldv_37735.user_isp != (int )os.ldv_37735.user_isp) {
#line 1106
    tmp___22 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1106
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1107
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1118
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1118
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1118
    if (tmp___23 == 0) {
#line 1122
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1128
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1130
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1132
  mdev->state = ns;
#line 1133
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1134
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1137
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_37735.conn <= 9) {
#line 1139
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1141
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1145
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1147
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1148
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1150
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1151
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1154
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1156
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1157
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1160
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1162
    now = jiffies;
#line 1165
    mdev->ov_position = 0UL;
#line 1166
    mdev->rs_total = drbd_bm_bits(mdev);
#line 1167
    if (mdev->agreed_pro_version > 89) {
#line 1168
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_37735.conn);
    } else {
#line 1170
      mdev->ov_start_sector = 0UL;
    }
#line 1171
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1173
    mdev->rs_start = now;
#line 1174
    mdev->rs_last_events = 0;
#line 1175
    mdev->rs_last_sect_ev = 0;
#line 1176
    mdev->ov_last_oos_size = 0UL;
#line 1177
    mdev->ov_last_oos_start = 0UL;
#line 1179
    i = 0;
#line 1179
    goto ldv_48532;
    ldv_48531: 
#line 1180
    mdev->rs_mark_left[i] = mdev->rs_total;
#line 1181
    mdev->rs_mark_time[i] = now;
#line 1179
    i = i + 1;
    ldv_48532: ;
#line 1179
    if (i <= 7) {
#line 1180
      goto ldv_48531;
    } else {

    }

#line 1184
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1185
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1187
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1191
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1191
  if (tmp___25 != 0) {
#line 1192
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1196
    tmp___24 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1196
    if (tmp___24 != 0) {
#line 1197
      mdf = mdf | 64U;
    } else {

    }
#line 1198
    if ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U || ((int )mdev->state.ldv_37735.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 4U)) {
#line 1200
      mdf = mdf | 2U;
    } else {

    }
#line 1201
    if ((int )mdev->state.ldv_37735.conn > 9) {
#line 1202
      mdf = mdf | 4U;
    } else {

    }
#line 1203
    if ((int )mdev->state.ldv_37735.disk > 4) {
#line 1204
      mdf = mdf | 1U;
    } else {

    }
#line 1205
    if ((int )mdev->state.ldv_37735.disk > 5) {
#line 1206
      mdf = mdf | 16U;
    } else {

    }
#line 1207
    if ((int )mdev->state.ldv_37735.pdsk <= 5 && (int )mdev->state.ldv_37735.pdsk > 3) {
#line 1208
      mdf = mdf | 32U;
    } else {

    }
#line 1209
    if ((mdev->ldev)->md.flags != mdf) {
#line 1210
      (mdev->ldev)->md.flags = mdf;
#line 1211
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1213
    if ((int )os.ldv_37735.disk <= 6 && (int )ns.ldv_37735.disk > 6) {
#line 1214
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1215
    put_ldev(mdev);
  } else {

  }
#line 1219
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1221
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1224
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1225
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1228
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1229
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1232
  if (((int )os.ldv_37735.conn > 7 && (int )ns.ldv_37735.conn <= 7) && (int )ns.ldv_37735.conn > 2) {
#line 1234
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1237
  if ((int )os.ldv_37735.conn <= 9 && (int )ns.ldv_37735.conn > 9) {
#line 1238
    drbd_resume_al(mdev);
  } else {

  }
#line 1240
  tmp___26 = kmalloc(48UL, 32U);
#line 1240
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1241
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1242
    ascw->os = os;
#line 1243
    ascw->ns = ns;
#line 1244
    ascw->flags = flags;
#line 1245
    ascw->w.cb = & w_after_state_ch;
#line 1246
    ascw->done = done;
#line 1247
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1249
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1252
  return (rv);
}
}
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1258
  __mptr = (struct drbd_work  const  *)w;
#line 1258
  ascw = (struct after_state_chg_work *)__mptr;
#line 1259
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1260
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1261
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1261
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1261);
    } else {

    }
#line 1262
    complete(ascw->done);
  } else {

  }
#line 1264
  kfree((void const   *)ascw);
#line 1266
  return (1);
}
}
#line 1269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1271
  if (rv != 0) {
#line 1272
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1273
    val.i = 0U;
#line 1273
    val.ldv_37735.conn = 10U;
#line 1273
    mask.i = 0U;
#line 1273
    mask.ldv_37735.conn = 31U;
#line 1273
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1274
    return;
  } else {

  }
#line 1277
  switch ((int )mdev->state.ldv_37735.conn) {
  case 12: 
#line 1279
  val___0.i = 0U;
#line 1279
  val___0.ldv_37735.conn = 15U;
#line 1279
  mask___0.i = 0U;
#line 1279
  mask___0.ldv_37735.conn = 31U;
#line 1279
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1280
  goto ldv_48556;
  case 11: 
#line 1282
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1283
  goto ldv_48556;
  }
  ldv_48556: ;
#line 1286
  return;
}
}
#line 1294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 1298
  what = nothing;
#line 1299
  nsm.i = 4294967295U;
#line 1301
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1302
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1303
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1304
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1307
  fp = FP_DONT_CARE;
#line 1308
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1308
  if (tmp != 0) {
#line 1309
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1310
    put_ldev(mdev);
  } else {

  }
#line 1314
  drbd_bcast_state(mdev, ns);
#line 1316
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37735.disk > 7) || (int )os.ldv_37735.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37735.disk <= 7) && (int )ns.ldv_37735.pdsk <= 7)) {
#line 1318
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1323
  nsm.i = 4294967295U;
#line 1324
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1325
    if ((int )os.ldv_37735.conn <= 9 && (int )ns.ldv_37735.conn > 9) {
#line 1326
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1327
        what = resend;
#line 1327
        nsm.ldv_37735.susp_nod = 0U;
      } else {
#line 1329
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unexpected Resynd going on!\n");
      }
    } else {

    }
#line 1332
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_37735.disk > 1) {
#line 1333
      what = restart_frozen_disk_io;
#line 1333
      nsm.ldv_37735.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1337
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1339
    if ((int )os.ldv_37735.pdsk > 5 && (int )ns.ldv_37735.pdsk <= 5) {
#line 1340
      tl_clear(mdev);
#line 1341
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1341
      if (tmp___0 != 0) {
#line 1342
        drbd_uuid_new_current(mdev);
#line 1343
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1345
      spin_lock_irq(& mdev->req_lock);
#line 1346
      __ns.i = mdev->state.i;
#line 1346
      __ns.ldv_37735.susp_fen = 0U;
#line 1346
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1347
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1350
    if ((int )os.ldv_37735.conn <= 9 && (int )ns.ldv_37735.conn > 9) {
#line 1351
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1352
      what = resend;
#line 1353
      nsm.ldv_37735.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1357
  if ((unsigned int )what != 24U) {
#line 1358
    spin_lock_irq(& mdev->req_lock);
#line 1359
    _tl_restart(mdev, what);
#line 1360
    nsm.i = nsm.i & mdev->state.i;
#line 1361
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1362
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1366
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_37735.pdsk > 0) {
#line 1367
    drbd_send_uuids(mdev);
#line 1368
    drbd_send_state(mdev);
  } else {

  }
#line 1370
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1371
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1374
  if ((((int )os.ldv_37735.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_37735.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1380
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1380
    if (tmp___2 != 0) {
#line 1381
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_37735.disk > 7) {
#line 1383
        tmp___1 = is_susp(mdev->state);
#line 1383
        if (tmp___1 != 0) {
#line 1384
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1386
          drbd_uuid_new_current(mdev);
#line 1387
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1390
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1394
  if ((int )ns.ldv_37735.pdsk <= 3) {
#line 1394
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1394
    if (tmp___3 != 0) {
#line 1395
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1396
        drbd_uuid_new_current(mdev);
#line 1397
        drbd_send_uuids(mdev);
      } else {

      }
#line 1401
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1402
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1403
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1407
  if (((int )ns.ldv_37735.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1409
    drbd_send_sizes(mdev, 0, 0);
#line 1410
    drbd_send_uuids(mdev);
#line 1411
    drbd_send_state(mdev);
  } else {

  }
#line 1415
  if ((int )ns.ldv_37735.conn > 9 && ((int )os.ldv_37735.aftr_isp != (int )ns.ldv_37735.aftr_isp || (int )os.ldv_37735.user_isp != (int )ns.ldv_37735.user_isp)) {
#line 1418
    drbd_send_state(mdev);
  } else {

  }
#line 1421
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1423
    suspend_other_sg(mdev);
  } else {

  }
#line 1427
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_37735.conn > 9) {
#line 1428
    drbd_send_state(mdev);
  } else {

  }
#line 1431
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1433
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1436
  if ((((int )os.ldv_37735.conn <= 9 && (int )ns.ldv_37735.conn <= 9) && (int )os.ldv_37735.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1438
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1442
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1448
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1449
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1454
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 4U) {
#line 1455
      tmp___4 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.disk);
#line 1455
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___4);
    } else {

    }
#line 1459
    tmp___5 = drbd_send_state(mdev);
#line 1459
    if (tmp___5 != 0) {
#line 1460
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1462
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1464
    drbd_rs_cancel_all(mdev);
#line 1469
    drbd_md_sync(mdev);
#line 1470
    put_ldev(mdev);
#line 1472
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1473
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1479
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1482
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 0U) {
#line 1483
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37735.disk);
#line 1483
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___6);
    } else {

    }
#line 1487
    mdev->rs_total = 0UL;
#line 1488
    mdev->rs_failed = 0UL;
#line 1489
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1491
    tmp___7 = drbd_send_state(mdev);
#line 1491
    if (tmp___7 != 0) {
#line 1492
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {
#line 1494
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for being diskless failed\n");
    }
#line 1497
    put_ldev(mdev);
  } else {

  }
#line 1501
  if ((int )ns.ldv_37735.disk > 3 && (int )ns.ldv_37735.pdsk > 3) {
#line 1501
    tmp___8 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1501
    if (tmp___8 != 0) {
#line 1503
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1504
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1508
  if ((((int )os.ldv_37735.conn > 10 && (int )ns.ldv_37735.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1511
    resume_next_sg(mdev);
  } else {

  }
#line 1515
  if (((int )os.ldv_37735.disk <= 7 && (int )os.ldv_37735.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1516
    drbd_send_state(mdev);
  } else {

  }
#line 1519
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1519
    tmp___9 = is_susp(ns);
#line 1519
    if (tmp___9 == 0) {
#line 1519
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1520
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1523
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1524
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1528
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1531
    if ((int )os.ldv_37735.aftr_isp != (int )ns.ldv_37735.aftr_isp) {
#line 1532
      resume_next_sg(mdev);
    } else {

    }
#line 1534
    tmp___10 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1534
    if (tmp___10 != 0) {
#line 1535
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1538
  drbd_md_sync(mdev);
#line 1539
  return;
}
}
#line 1542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1544
  thi = (struct drbd_thread *)arg;
#line 1545
  mdev = thi->mdev;
  restart: 
#line 1550
  retval = (*(thi->function))(thi);
#line 1552
  tmp = spinlock_check(& thi->t_lock);
#line 1552
  flags = _raw_spin_lock_irqsave(tmp);
#line 1564
  if ((unsigned int )thi->t_state == 3U) {
#line 1565
    tmp___0 = get_current();
#line 1565
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1566
    thi->t_state = Running;
#line 1567
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1568
    goto restart;
  } else {

  }
#line 1571
  thi->task = 0;
#line 1572
  thi->t_state = None;
#line 1573
  __asm__  volatile   ("mfence": : : "memory");
#line 1574
  complete(& thi->stop);
#line 1575
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1577
  tmp___1 = get_current();
#line 1577
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1580
  module_put(& __this_module);
#line 1581
  return (retval);
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1587
  spinlock_check(& thi->t_lock);
#line 1587
  __raw_spin_lock_init(& thi->t_lock.ldv_5802.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1588
  thi->task = 0;
#line 1589
  thi->t_state = None;
#line 1590
  thi->function = func;
#line 1591
  thi->mdev = mdev;
#line 1592
  return;
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1596
  mdev = thi->mdev;
#line 1600
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1607
  tmp = spinlock_check(& thi->t_lock);
#line 1607
  flags = _raw_spin_lock_irqsave(tmp);
#line 1609
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1611
  tmp___0 = get_current();
#line 1611
  tmp___1 = get_current();
#line 1611
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1615
  tmp___2 = try_module_get(& __this_module);
#line 1615
  if (tmp___2 == 0) {
#line 1616
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1617
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1618
    return (0);
  } else {

  }
#line 1621
  init_completion(& thi->stop);
#line 1622
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1622
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1622);
  } else {

  }
#line 1623
  thi->reset_cpu_mask = 1;
#line 1624
  thi->t_state = Running;
#line 1625
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1626
  tmp___3 = get_current();
#line 1626
  flush_signals(tmp___3);
#line 1628
  tmp___4 = mdev_to_minor(mdev);
#line 1628
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___4,
                              me);
#line 1631
  tmp___5 = IS_ERR((void const   *)nt);
#line 1631
  if (tmp___5 != 0L) {
#line 1632
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1634
    module_put(& __this_module);
#line 1635
    return (0);
  } else {

  }
#line 1637
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1637
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1638
  thi->task = nt;
#line 1639
  thi->t_state = Running;
#line 1640
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1641
  wake_up_process(nt);
#line 1642
  goto ldv_48604;
  case 2U: 
#line 1644
  thi->t_state = Restarting;
#line 1645
  tmp___7 = get_current();
#line 1645
  tmp___8 = get_current();
#line 1645
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1651
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1652
  goto ldv_48604;
  }
  ldv_48604: ;
#line 1655
  return (1);
}
}
#line 1659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1663
  ns = restart != 0 ? Restarting : Exiting;
#line 1666
  tmp = spinlock_check(& thi->t_lock);
#line 1666
  flags = _raw_spin_lock_irqsave(tmp);
#line 1668
  if ((unsigned int )thi->t_state == 0U) {
#line 1669
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1670
    if (restart != 0) {
#line 1671
      drbd_thread_start(thi);
    } else {

    }
#line 1672
    return;
  } else {

  }
#line 1675
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1676
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1677
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1678
      return;
    } else {

    }
#line 1681
    thi->t_state = ns;
#line 1682
    __asm__  volatile   ("mfence": : : "memory");
#line 1683
    init_completion(& thi->stop);
#line 1684
    tmp___0 = get_current();
#line 1684
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1685
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1689
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1691
  if (wait != 0) {
#line 1692
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1693
  return;
}
}
#line 1703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1708
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1708
  if (tmp != 0U) {
#line 1709
    return;
  } else {

  }
#line 1711
  tmp___0 = mdev_to_minor(mdev);
#line 1711
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1711
  ord = (int )(tmp___0 % tmp___1);
#line 1712
  cpu = -1;
#line 1712
  goto ldv_48625;
  ldv_48624: 
#line 1713
  tmp___2 = ord;
#line 1713
  ord = ord - 1;
#line 1713
  if (tmp___2 == 0) {
#line 1714
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1715
    return;
  } else {

  }
  ldv_48625: 
#line 1712
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1712
  cpu = (int )tmp___3;
#line 1712
  if (cpu < nr_cpu_ids) {
#line 1713
    goto ldv_48624;
  } else {

  }
#line 1719
  cpumask_setall(mdev->cpu_mask);
#line 1720
  return;
}
}
#line 1729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1731
  tmp = get_current();
#line 1731
  p = tmp;
#line 1732
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1737
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1737
  if (_b != 0) {
#line 1737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1737);
  } else {

  }
#line 1737
  if (_b != 0) {
#line 1738
    return;
  } else {

  }
#line 1739
  if (thi->reset_cpu_mask == 0) {
#line 1740
    return;
  } else {

  }
#line 1741
  thi->reset_cpu_mask = 0;
#line 1742
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1743
  return;
}
}
#line 1747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1753
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1753
  if (_b != 0) {
#line 1753
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1753);
  } else {

  }
#line 1753
  if (_b != 0) {
#line 1753
    return (0);
  } else {

  }
#line 1754
  _b___0 = size == 0UL;
#line 1754
  if (_b___0 != 0) {
#line 1754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1754);
  } else {

  }
#line 1754
  if (_b___0 != 0) {
#line 1754
    return (0);
  } else {

  }
#line 1756
  h->magic = 1728214147U;
#line 1757
  tmp = __fswab16((int )((__u16 )cmd));
#line 1757
  h->command = tmp;
#line 1758
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1758
  h->length = tmp___0;
#line 1760
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1762
  ok = (size_t )sent == size;
#line 1763
  if (ok == 0) {
#line 1764
    tmp___1 = cmdname(cmd);
#line 1764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1766
  return (ok);
}
}
#line 1772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1775
  ok = 0;
#line 1778
  if (use_data_socket != 0) {
#line 1779
    ldv_mutex_lock_129(& mdev->data.mutex);
#line 1780
    sock = mdev->data.socket;
  } else {
#line 1782
    ldv_mutex_lock_130(& mdev->meta.mutex);
#line 1783
    sock = mdev->meta.socket;
  }
#line 1788
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1788
  if (tmp != 0L) {
#line 1789
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1791
  if (use_data_socket != 0) {
#line 1792
    ldv_mutex_unlock_131(& mdev->data.mutex);
  } else {
#line 1794
    ldv_mutex_unlock_132(& mdev->meta.mutex);
  }
#line 1795
  return (ok);
}
}
#line 1798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1804
  h.magic = 1728214147U;
#line 1805
  tmp = __fswab16((int )((__u16 )cmd));
#line 1805
  h.command = tmp;
#line 1806
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1806
  h.length = tmp___0;
#line 1808
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1808
  if (tmp___1 == 0) {
#line 1809
    return (0);
  } else {

  }
#line 1811
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1811
  ok = tmp___2 == 8;
#line 1813
  if (ok != 0) {
#line 1813
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1813
    if ((size_t )tmp___3 == size) {
#line 1813
      tmp___4 = 1;
    } else {
#line 1813
      tmp___4 = 0;
    }
  } else {
#line 1813
    tmp___4 = 0;
  }
#line 1813
  ok = tmp___4;
#line 1816
  drbd_put_data_sock___0(mdev);
#line 1818
  return (ok);
}
}
#line 1821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1826
  apv = mdev->agreed_pro_version;
#line 1828
  if (apv > 87) {
#line 1828
    if (apv == 88) {
#line 1828
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1828
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1828
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1828
    size = tmp___0;
  } else {
#line 1828
    size = 12;
  }
#line 1837
  ldv_mutex_lock_133(& mdev->data.mutex);
#line 1838
  sock = mdev->data.socket;
#line 1840
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1840
  if (tmp___6 != 0L) {
#line 1841
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1843
    p = & mdev->data.sbuf.rs_param_95;
#line 1846
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1848
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1848
    p->rate = tmp___1;
#line 1849
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1849
    p->c_plan_ahead = tmp___2;
#line 1850
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1850
    p->c_delay_target = tmp___3;
#line 1851
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1851
    p->c_fill_target = tmp___4;
#line 1852
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1852
    p->c_max_rate = tmp___5;
#line 1854
    if (apv > 87) {
#line 1855
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1856
    if (apv > 88) {
#line 1857
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1859
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1861
    rv = 0;
  }
#line 1863
  ldv_mutex_unlock_134(& mdev->data.mutex);
#line 1865
  return (rv);
}
}
#line 1868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1873
  size = 32;
#line 1875
  if (mdev->agreed_pro_version > 86) {
#line 1876
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1876
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1880
  tmp___0 = kmalloc((size_t )size, 16U);
#line 1880
  p = (struct p_protocol *)tmp___0;
#line 1881
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1882
    return (0);
  } else {

  }
#line 1884
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1884
  p->protocol = tmp___1;
#line 1885
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1885
  p->after_sb_0p = tmp___2;
#line 1886
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1886
  p->after_sb_1p = tmp___3;
#line 1887
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1887
  p->after_sb_2p = tmp___4;
#line 1888
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1888
  p->two_primaries = tmp___5;
#line 1890
  cf = 0;
#line 1891
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1892
    cf = cf | 1;
  } else {

  }
#line 1893
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1894
    if (mdev->agreed_pro_version > 91) {
#line 1895
      cf = cf | 2;
    } else {
#line 1897
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1898
      kfree((void const   *)p);
#line 1899
      return (0);
    }
  } else {

  }
#line 1902
  tmp___6 = __fswab32((__u32 )cf);
#line 1902
  p->conn_flags = tmp___6;
#line 1904
  if (mdev->agreed_pro_version > 86) {
#line 1905
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1907
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 1909
  kfree((void const   *)p);
#line 1910
  return (rv);
}
}
#line 1913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1918
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1918
  if (tmp == 0) {
#line 1919
    return (1);
  } else {

  }
#line 1921
  i = 0;
#line 1921
  goto ldv_48691;
  ldv_48690: ;
#line 1922
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1922
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1922
    p.uuid[i] = tmp___0;
  } else {
#line 1922
    p.uuid[i] = 0ULL;
  }
#line 1921
  i = i + 1;
  ldv_48691: ;
#line 1921
  if (i <= 3) {
#line 1922
    goto ldv_48690;
  } else {

  }
#line 1924
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1925
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1925
  p.uuid[4] = tmp___1;
#line 1926
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1927
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1927
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1928
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1993UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1929
  tmp___3 = __fswab64(uuid_flags);
#line 1929
  p.uuid[5] = tmp___3;
#line 1931
  put_ldev(mdev);
#line 1933
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 1933
  return (tmp___4);
}
}
#line 1937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1939
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1939
  return (tmp);
}
}
#line 1942 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1944
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1944
  return (tmp);
}
}
#line 1948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1952
  tmp = __fswab64(val);
#line 1952
  p.uuid = tmp;
#line 1954
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 1954
  return (tmp___0);
}
}
#line 1958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1965
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1965
  if (tmp != 0) {
#line 1966
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1966
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1966);
    } else {

    }
#line 1967
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1968
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1969
    q_order_type = drbd_queue_order_type(mdev);
#line 1970
    put_ldev(mdev);
  } else {
#line 1972
    d_size = 0UL;
#line 1973
    u_size = 0UL;
#line 1974
    q_order_type = 0;
  }
#line 1977
  tmp___0 = __fswab64((__u64 )d_size);
#line 1977
  p.d_size = tmp___0;
#line 1978
  tmp___1 = __fswab64((__u64 )u_size);
#line 1978
  p.u_size = tmp___1;
#line 1979
  if (trigger_reply == 0) {
#line 1979
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1979
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1979
    tmp___3 = 0ULL;
  }
#line 1979
  tmp___4 = __fswab64(tmp___3);
#line 1979
  p.c_size = tmp___4;
#line 1980
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1980
  tmp___6 = __fswab32(tmp___5);
#line 1980
  p.max_segment_size = tmp___6;
#line 1981
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1981
  p.queue_order_type = tmp___7;
#line 1982
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1982
  p.dds_flags = tmp___8;
#line 1984
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 1986
  return (ok);
}
}
#line 1993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1997
  ok = 0;
#line 2001
  drbd_state_lock___0(mdev);
#line 2003
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 2005
  tmp = __fswab32(mdev->state.i);
#line 2005
  p.state = tmp;
#line 2006
  sock = mdev->data.socket;
#line 2008
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2008
  if (tmp___0 != 0L) {
#line 2009
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2013
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 2015
  drbd_state_unlock(mdev);
#line 2016
  return (ok);
}
}
#line 2019 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2024
  tmp = __fswab32(mask.i);
#line 2024
  p.mask = tmp;
#line 2025
  tmp___0 = __fswab32(val.i);
#line 2025
  p.val = tmp___0;
#line 2027
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2027
  return (tmp___1);
}
}
#line 2031 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2035
  tmp = __fswab32((__u32 )retcode);
#line 2035
  p.retcode = tmp;
#line 2037
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2037
  return (tmp___0);
}
}
#line 2041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2054
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2056
    return (0);
  } else {

  }
#line 2058
  if (c->bit_offset >= c->bm_bits) {
#line 2059
    return (0);
  } else {

  }
#line 2062
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2063
  memset((void *)(& p->code), 0, 4087UL);
#line 2065
  plain_bits = 0UL;
#line 2070
  toggle = 2U;
  ldv_48745: ;
#line 2075
  if (toggle == 0U) {
#line 2075
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2075
    tmp = tmp___0;
  } else {
#line 2075
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2075
    tmp = tmp___1;
  }
#line 2077
  if (tmp == 0xffffffffffffffffUL) {
#line 2078
    tmp = c->bm_bits;
  } else {

  }
#line 2079
  rl = tmp - c->bit_offset;
#line 2081
  if (toggle == 2U) {
#line 2082
    if (rl == 0UL) {
#line 2085
      DCBP_set_start(p, 1);
#line 2087
      toggle = toggle == 0U;
#line 2088
      goto ldv_48743;
    } else {

    }
#line 2090
    DCBP_set_start(p, 0);
  } else {

  }
#line 2095
  if (rl == 0UL) {
#line 2096
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2098
    return (-1);
  } else {

  }
#line 2101
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2102
  if (bits == -105) {
#line 2103
    goto ldv_48744;
  } else {

  }
#line 2104
  if (bits <= 0) {
#line 2105
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2106
    return (0);
  } else {

  }
#line 2109
  toggle = toggle == 0U;
#line 2110
  plain_bits = plain_bits + rl;
#line 2111
  c->bit_offset = tmp;
  ldv_48743: ;
#line 2112
  if (c->bit_offset < c->bm_bits) {
#line 2113
    goto ldv_48745;
  } else {

  }
  ldv_48744: 
#line 2114
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2116
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2119
    c->bit_offset = c->bit_offset - plain_bits;
#line 2120
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2121
    c->bit_offset = c->word_offset * 64UL;
#line 2122
    return (0);
  } else {

  }
#line 2127
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2130
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2132
  return ((int )len);
}
}
#line 2136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_32586 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2139
  p = (struct p_compressed_bm *)h;
#line 2144
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2146
  if (len < 0) {
#line 2147
    return (FAILED);
  } else {

  }
#line 2149
  if (len != 0) {
#line 2150
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2151
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2154
    c->packets[0] = c->packets[0] + 1U;
#line 2155
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2157
    if (c->bit_offset >= c->bm_bits) {
#line 2158
      len = 0;
    } else {

    }
  } else {
#line 2162
    __min1 = 511UL;
#line 2162
    __min2 = c->bm_words - c->word_offset;
#line 2162
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2163
    len = (int )((unsigned int )num_words * 8U);
#line 2164
    if (len != 0) {
#line 2165
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2166
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2168
    c->word_offset = c->word_offset + num_words;
#line 2169
    c->bit_offset = c->word_offset * 64UL;
#line 2171
    c->packets[1] = c->packets[1] + 1U;
#line 2172
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2174
    if (c->bit_offset > c->bm_bits) {
#line 2175
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2177
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2179
  if (ok == 2) {
#line 2180
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2181
  return ((enum ldv_32586 )ok);
}
}
#line 2185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_32586 tmp___5 ;

  {
#line 2191
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2191
  if (_b != 0) {
#line 2191
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2191);
  } else {

  }
#line 2191
  if (_b != 0) {
#line 2191
    return (0);
  } else {

  }
#line 2195
  tmp = __get_free_pages(16U, 0U);
#line 2195
  p = (struct p_header80 *)tmp;
#line 2196
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2198
    return (0);
  } else {

  }
#line 2201
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2201
  if (tmp___2 != 0) {
#line 2202
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2202
    if (tmp___1 != 0) {
#line 2203
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2204
      drbd_bm_set_all(mdev);
#line 2205
      tmp___0 = drbd_bm_write(mdev);
#line 2205
      if (tmp___0 != 0) {
#line 2209
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2211
        drbd_md_clear_flag(mdev, 8);
#line 2212
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2215
    put_ldev(mdev);
  } else {

  }
#line 2218
  tmp___3 = drbd_bm_bits(mdev);
#line 2218
  tmp___4 = drbd_bm_words(mdev);
#line 2218
  __constr_expr_0.bm_bits = tmp___3;
#line 2218
  __constr_expr_0.bm_words = tmp___4;
#line 2218
  __constr_expr_0.bit_offset = 0UL;
#line 2218
  __constr_expr_0.word_offset = 0UL;
#line 2218
  __constr_expr_0.packets[0] = 0U;
#line 2218
  __constr_expr_0.packets[1] = 0U;
#line 2218
  __constr_expr_0.bytes[0] = 0U;
#line 2218
  __constr_expr_0.bytes[1] = 0U;
#line 2218
  c = __constr_expr_0;
  ldv_48772: 
#line 2224
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2224
  ret = (int )tmp___5;
#line 2225
  if (ret == 0) {
#line 2226
    goto ldv_48772;
  } else {

  }
#line 2227
  free_pages((unsigned long )p, 0U);
#line 2228
  return (ret == 2);
}
}
#line 2231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2235
  tmp = drbd_get_data_sock___0(mdev);
#line 2235
  if (tmp == 0) {
#line 2236
    return (-1);
  } else {

  }
#line 2237
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2237
  err = tmp___0 == 0;
#line 2238
  drbd_put_data_sock___0(mdev);
#line 2239
  return (err);
}
}
#line 2242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2247
  p.barrier = barrier_nr;
#line 2248
  tmp = __fswab32(set_size);
#line 2248
  p.set_size = tmp;
#line 2250
  if ((int )mdev->state.ldv_37735.conn <= 9) {
#line 2251
    return (0);
  } else {

  }
#line 2252
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2254
  return (ok);
}
}
#line 2265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2273
  p.sector = sector;
#line 2274
  p.block_id = block_id;
#line 2275
  p.blksize = blksize;
#line 2276
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2276
  tmp___0 = __fswab32((__u32 )tmp);
#line 2276
  p.seq_num = tmp___0;
#line 2278
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_37735.conn <= 9) {
#line 2279
    return (0);
  } else {

  }
#line 2280
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2282
  return (ok);
}
}
#line 2288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2291
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2291
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2291
    tmp___0 = tmp;
  } else {
#line 2291
    tmp___0 = 0U;
  }
#line 2291
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2293
  tmp___1 = __fswab32((__u32 )data_size);
#line 2293
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2293
  return (tmp___2);
}
}
#line 2297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2300
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2300
  return (tmp);
}
}
#line 2309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2312
  tmp = __fswab32(e->size);
#line 2312
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2312
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_45894.block_id);
#line 2312
  return (tmp___1);
}
}
#line 2320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2323
  tmp = __fswab64(block_id);
#line 2323
  tmp___0 = __fswab32((__u32 )blksize);
#line 2323
  tmp___1 = __fswab64((__u64 )sector);
#line 2323
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2323
  return (tmp___2);
}
}
#line 2329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2335
  tmp = __fswab64((__u64 )sector);
#line 2335
  p.sector = tmp;
#line 2336
  p.block_id = block_id;
#line 2337
  tmp___0 = __fswab32((__u32 )size);
#line 2337
  p.blksize = tmp___0;
#line 2339
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2341
  return (ok);
}
}
#line 2344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2352
  tmp = __fswab64((__u64 )sector);
#line 2352
  p.sector = tmp;
#line 2353
  p.block_id = 1728263026ULL;
#line 2354
  tmp___0 = __fswab32((__u32 )size);
#line 2354
  p.blksize = tmp___0;
#line 2356
  p.head.magic = 1728214147U;
#line 2357
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2357
  p.head.command = tmp___1;
#line 2358
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2358
  p.head.length = tmp___2;
#line 2360
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2362
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2362
  ok = tmp___3 == 32;
#line 2363
  if (ok != 0) {
#line 2363
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2363
    if (tmp___4 == digest_size) {
#line 2363
      tmp___5 = 1;
    } else {
#line 2363
      tmp___5 = 0;
    }
  } else {
#line 2363
    tmp___5 = 0;
  }
#line 2363
  ok = tmp___5;
#line 2365
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2367
  return (ok);
}
}
#line 2370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2375
  tmp = __fswab64((__u64 )sector);
#line 2375
  p.sector = tmp;
#line 2376
  p.block_id = 1728261953ULL;
#line 2377
  tmp___0 = __fswab32((__u32 )size);
#line 2377
  p.blksize = tmp___0;
#line 2379
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2381
  return (ok);
}
}
#line 2388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2393
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2393
    tmp___0 = 1;
  } else {
#line 2393
    tmp = get_t_state(& mdev->asender);
#line 2393
    if ((unsigned int )tmp != 1U) {
#line 2393
      tmp___0 = 1;
    } else
#line 2393
    if ((int )mdev->state.ldv_37735.conn <= 9) {
#line 2393
      tmp___0 = 1;
    } else {
#line 2393
      tmp___0 = 0;
    }
  }
#line 2393
  drop_it = tmp___0;
#line 2398
  if (drop_it != 0) {
#line 2399
    return (1);
  } else {

  }
#line 2401
  mdev->ko_count = mdev->ko_count - 1U;
#line 2401
  drop_it = mdev->ko_count == 0U;
#line 2402
  if (drop_it == 0) {
#line 2403
    tmp___1 = get_current();
#line 2403
    tmp___2 = get_current();
#line 2403
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2405
    request_ping(mdev);
  } else {

  }
#line 2408
  return (drop_it);
}
}
#line 2432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2435
  tmp = kmap(page);
#line 2435
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2435
  sent = tmp___0;
#line 2436
  kunmap(page);
#line 2437
  if ((size_t )sent == size) {
#line 2438
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2439
  return ((size_t )sent == size);
}
}
#line 2442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2445
  tmp = current_thread_info___1();
#line 2445
  oldfs = tmp->addr_limit;
#line 2447
  len = (int )size;
#line 2455
  if (disable_sendpage != 0) {
#line 2456
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2456
    return (tmp___0);
  } else {
#line 2455
    tmp___1 = page_count(page);
#line 2455
    if (tmp___1 <= 0) {
#line 2456
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2456
      return (tmp___0);
    } else {
#line 2455
      tmp___2 = PageSlab(page);
#line 2455
      if (tmp___2 != 0) {
#line 2456
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2456
        return (tmp___0);
      } else {

      }
    }
  }
#line 2458
  msg_flags = msg_flags | 16384U;
#line 2459
  drbd_update_congested(mdev);
#line 2460
  tmp___3 = current_thread_info___1();
#line 2460
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2460
  tmp___3->addr_limit = __constr_expr_0;
  ldv_48871: 
#line 2462
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2462
  sent = (int )tmp___4;
#line 2465
  if (sent == -11) {
#line 2466
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2466
    if (tmp___5 != 0) {
#line 2468
      goto ldv_48868;
    } else {
#line 2470
      goto ldv_48869;
    }
  } else {

  }
#line 2472
  if (sent <= 0) {
#line 2473
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2475
    goto ldv_48868;
  } else {

  }
#line 2477
  len = len - sent;
#line 2478
  offset = offset + sent;
  ldv_48869: ;
#line 2479
  if (len > 0) {
#line 2480
    goto ldv_48871;
  } else {

  }
  ldv_48868: 
#line 2480
  tmp___6 = current_thread_info___1();
#line 2480
  tmp___6->addr_limit = oldfs;
#line 2481
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2483
  ok = len == 0;
#line 2484
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2484
  if (tmp___7 != 0L) {
#line 2485
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2486
  return (ok);
}
}
#line 2489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2494
  bvec = bio->bi_io_vec;
#line 2494
  i = 0;
#line 2494
  goto ldv_48879;
  ldv_48878: 
#line 2495
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2495
  if (tmp == 0) {
#line 2498
    return (0);
  } else {

  }
#line 2494
  bvec = bvec + 1;
#line 2494
  i = i + 1;
  ldv_48879: ;
#line 2494
  if ((int )bio->bi_vcnt > i) {
#line 2495
    goto ldv_48878;
  } else {

  }

#line 2500
  return (1);
}
}
#line 2503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2508
  bvec = bio->bi_io_vec;
#line 2508
  i = 0;
#line 2508
  goto ldv_48888;
  ldv_48887: 
#line 2509
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2509
  if (tmp == 0) {
#line 2512
    return (0);
  } else {

  }
#line 2508
  bvec = bvec + 1;
#line 2508
  i = i + 1;
  ldv_48888: ;
#line 2508
  if ((int )bio->bi_vcnt > i) {
#line 2509
    goto ldv_48887;
  } else {

  }

#line 2514
  return (1);
}
}
#line 2517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2519
  page = e->pages;
#line 2520
  len = e->size;
#line 2522
  goto ldv_48902;
  ldv_48901: 
#line 2523
  __min1 = len;
#line 2523
  __min2 = 4096U;
#line 2523
  l = __min1 < __min2 ? __min1 : __min2;
#line 2524
  tmp = page_chain_next(page);
#line 2524
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2524
  if (tmp___0 == 0) {
#line 2526
    return (0);
  } else {

  }
#line 2527
  len = len - l;
#line 2522
  page = page_chain_next(page);
  ldv_48902: ;
#line 2522
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2522
    tmp___1 = page_chain_next(page);
#line 2522
    __builtin_prefetch((void const   *)tmp___1);
#line 2522
    if (1 != 0) {
#line 2523
      goto ldv_48901;
    } else {
#line 2525
      goto ldv_48903;
    }
  } else {

  }
  ldv_48903: ;
#line 2529
  return (1);
}
}
#line 2532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2534
  if (mdev->agreed_pro_version > 94) {
#line 2535
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 4096UL) != 0UL ? 16 : 0)) | ((bi_rw & 8388608UL) != 0UL ? 32 : 0)) | ((int )bi_rw & 64)));
  } else {
#line 2540
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;

  {
#line 2548
  ok = 1;
#line 2550
  dp_flags = 0U;
#line 2554
  tmp = drbd_get_data_sock___0(mdev);
#line 2554
  if (tmp == 0) {
#line 2555
    return (0);
  } else {

  }
#line 2557
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2557
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2557
    dgs = (int )tmp___0;
  } else {
#line 2557
    dgs = 0;
  }
#line 2560
  if (req->size <= 32768U) {
#line 2561
    p.head.h80.magic = 1728214147U;
#line 2562
    p.head.h80.command = 0U;
#line 2563
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2563
    p.head.h80.length = tmp___1;
  } else {
#line 2566
    p.head.h95.magic = 23171U;
#line 2567
    p.head.h95.command = 0U;
#line 2568
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2568
    p.head.h95.length = tmp___2;
  }
#line 2572
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2572
  p.sector = tmp___3;
#line 2573
  p.block_id = (u64 )req;
#line 2574
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2574
  req->seq_num = tmp___4;
#line 2574
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2574
  p.seq_num = tmp___5;
#line 2577
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2579
  if ((int )mdev->state.ldv_37735.conn > 15 && (int )mdev->state.ldv_37735.conn <= 21) {
#line 2581
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2583
  tmp___6 = __fswab32(dp_flags);
#line 2583
  p.dp_flags = tmp___6;
#line 2584
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2585
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2585
  ok = tmp___7 == 32;
#line 2587
  if (ok != 0 && dgs != 0) {
#line 2588
    dgb = mdev->int_dig_out;
#line 2589
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2590
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2592
  if (ok != 0) {
#line 2593
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2594
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2596
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2599
  drbd_put_data_sock___0(mdev);
#line 2601
  return (ok);
}
}
#line 2608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 2616
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2616
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2616
    dgs = (int )tmp;
  } else {
#line 2616
    dgs = 0;
  }
#line 2619
  if (e->size <= 32768U) {
#line 2620
    p.head.h80.magic = 1728214147U;
#line 2621
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2621
    p.head.h80.command = tmp___0;
#line 2622
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2622
    p.head.h80.length = tmp___1;
  } else {
#line 2625
    p.head.h95.magic = 23171U;
#line 2626
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2626
    p.head.h95.command = tmp___2;
#line 2627
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2627
    p.head.h95.length = tmp___3;
  }
#line 2631
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2631
  p.sector = tmp___4;
#line 2632
  p.block_id = e->ldv_45894.block_id;
#line 2639
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 2639
  if (tmp___5 == 0) {
#line 2640
    return (0);
  } else {

  }
#line 2642
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2642
  ok = tmp___6 == 32;
#line 2643
  if (ok != 0 && dgs != 0) {
#line 2644
    dgb = mdev->int_dig_out;
#line 2645
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2646
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2648
  if (ok != 0) {
#line 2649
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2651
  drbd_put_data_sock___0(mdev);
#line 2653
  return (ok);
}
}
#line 2672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2677
  sent = 0;
#line 2679
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2680
    return (-1000);
  } else {

  }
#line 2684
  iov.iov_base = buf;
#line 2685
  iov.iov_len = size;
#line 2687
  msg.msg_name = 0;
#line 2688
  msg.msg_namelen = 0;
#line 2689
  msg.msg_control = 0;
#line 2690
  msg.msg_controllen = 0UL;
#line 2691
  msg.msg_flags = msg_flags | 16384U;
#line 2693
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2694
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2695
    drbd_update_congested(mdev);
  } else {

  }
  ldv_48939: 
#line 2707
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2708
  if (rv == -11) {
#line 2709
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2709
    if (tmp != 0) {
#line 2710
      goto ldv_48937;
    } else {
#line 2712
      goto ldv_48938;
    }
  } else {

  }
#line 2714
  if (rv == 0) {
#line 2714
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2714);
  } else {

  }
#line 2715
  if (rv == -4) {
#line 2716
    tmp___0 = get_current();
#line 2716
    flush_signals(tmp___0);
#line 2717
    rv = 0;
  } else {

  }
#line 2719
  if (rv < 0) {
#line 2720
    goto ldv_48937;
  } else {

  }
#line 2721
  sent = sent + rv;
#line 2722
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2723
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_48938: ;
#line 2724
  if ((size_t )sent < size) {
#line 2725
    goto ldv_48939;
  } else {

  }
  ldv_48937: ;
#line 2726
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2727
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2729
  if (rv <= 0) {
#line 2730
    if (rv != -11) {
#line 2731
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2734
      val.i = 0U;
#line 2734
      val.ldv_37735.conn = 4U;
#line 2734
      mask.i = 0U;
#line 2734
      mask.ldv_37735.conn = 31U;
#line 2734
      drbd_force_state(mdev, mask, val);
    } else {
#line 2736
      val___0.i = 0U;
#line 2736
      val___0.ldv_37735.conn = 3U;
#line 2736
      mask___0.i = 0U;
#line 2736
      mask___0.ldv_37735.conn = 31U;
#line 2736
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2739
  return (sent);
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2744
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2746
  rv = 0;
#line 2748
  ldv_mutex_lock_139(& drbd_main_mutex);
#line 2749
  tmp = spinlock_check(& mdev->req_lock);
#line 2749
  flags = _raw_spin_lock_irqsave(tmp);
#line 2753
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) != 1U) {
#line 2754
    if ((mode & 2U) != 0U) {
#line 2755
      rv = -30;
    } else
#line 2756
    if (allow_oos == 0) {
#line 2757
      rv = -124;
    } else {

    }
  } else {

  }
#line 2760
  if (rv == 0) {
#line 2761
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2762
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2763
  ldv_mutex_unlock_140(& drbd_main_mutex);
#line 2765
  return (rv);
}
}
#line 2768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2770
  mdev = (struct drbd_conf *)gd->private_data;
#line 2771
  ldv_mutex_lock_141(& drbd_main_mutex);
#line 2772
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2773
  ldv_mutex_unlock_142(& drbd_main_mutex);
#line 2774
  return (0);
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2781
  __constr_expr_0.rate = 250;
#line 2781
  __constr_expr_0.after = -1;
#line 2781
  __constr_expr_0.al_extents = 127;
#line 2781
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2781
  __constr_expr_0.verify_alg_len = 0;
#line 2781
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2781
  __constr_expr_0.cpu_mask_len = 0;
#line 2781
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2781
  __constr_expr_0.csums_alg_len = 0;
#line 2781
  __constr_expr_0.use_rle = 0U;
#line 2781
  __constr_expr_0.on_no_data = 0;
#line 2781
  __constr_expr_0.c_plan_ahead = 0;
#line 2781
  __constr_expr_0.c_delay_target = 10;
#line 2781
  __constr_expr_0.c_fill_target = 0;
#line 2781
  __constr_expr_0.c_max_rate = 102400;
#line 2781
  __constr_expr_0.c_min_rate = 4096;
#line 2781
  mdev->sync_conf = __constr_expr_0;
#line 2799
  __constr_expr_1.ldv_37735.role = 2U;
#line 2799
  __constr_expr_1.ldv_37735.peer = 0U;
#line 2799
  __constr_expr_1.ldv_37735.conn = 0U;
#line 2799
  __constr_expr_1.ldv_37735.disk = 0U;
#line 2799
  __constr_expr_1.ldv_37735.pdsk = 6U;
#line 2799
  __constr_expr_1.ldv_37735.susp = 0U;
#line 2799
  __constr_expr_1.ldv_37735.aftr_isp = (unsigned char)0;
#line 2799
  __constr_expr_1.ldv_37735.peer_isp = (unsigned char)0;
#line 2799
  __constr_expr_1.ldv_37735.user_isp = (unsigned char)0;
#line 2799
  __constr_expr_1.ldv_37735.susp_nod = 0U;
#line 2799
  __constr_expr_1.ldv_37735.susp_fen = 0U;
#line 2799
  __constr_expr_1.ldv_37735._pad = (unsigned short)0;
#line 2799
  mdev->state = __constr_expr_1;
#line 2800
  return;
}
}
#line 2811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2816
  drbd_set_defaults(mdev);
#line 2818
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2819
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2820
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2821
  atomic_set(& mdev->unacked_cnt, 0);
#line 2822
  atomic_set(& mdev->local_cnt, 0);
#line 2823
  atomic_set(& mdev->net_cnt, 0);
#line 2824
  atomic_set(& mdev->packet_seq, 0);
#line 2825
  atomic_set(& mdev->pp_in_use, 0);
#line 2826
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2827
  atomic_set(& mdev->rs_sect_in, 0);
#line 2828
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2830
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2831
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2832
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2833
  sema_init(& mdev->data.work.s, 0);
#line 2834
  sema_init(& mdev->meta.work.s, 0);
#line 2835
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2837
  spinlock_check(& mdev->data.work.q_lock);
#line 2837
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5802.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2838
  spinlock_check(& mdev->meta.work.q_lock);
#line 2838
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5802.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2840
  spinlock_check(& mdev->al_lock);
#line 2840
  __raw_spin_lock_init(& mdev->al_lock.ldv_5802.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2841
  spinlock_check(& mdev->req_lock);
#line 2841
  __raw_spin_lock_init(& mdev->req_lock.ldv_5802.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2842
  spinlock_check(& mdev->peer_seq_lock);
#line 2842
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5802.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2843
  spinlock_check(& mdev->epoch_lock);
#line 2843
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5802.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2845
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2846
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2847
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2848
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2849
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2850
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2851
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2852
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2853
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2854
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2855
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 2856
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2857
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2859
  mdev->resync_work.cb = & w_resync_inactive;
#line 2860
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2861
  mdev->go_diskless.cb = & w_go_diskless;
#line 2862
  mdev->md_sync_work.cb = & w_md_sync;
#line 2863
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2864
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2865
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2866
  mdev->resync_timer.function = & resync_timer_fn;
#line 2867
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2868
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2869
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2871
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2872
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2873
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___13);
#line 2874
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2875
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2876
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2878
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2879
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2880
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2882
  mdev->agreed_pro_version = 95;
#line 2883
  mdev->write_ordering = WO_bdev_flush;
#line 2884
  mdev->resync_wenr = 4294967295U;
#line 2885
  return;
}
}
#line 2887 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 2890
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2895
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2895
  if (tmp___0 != 0) {
#line 2896
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2896
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2897
  tmp___9 = 0UL;
#line 2897
  mdev->rs_failed = tmp___9;
#line 2897
  tmp___8 = tmp___9;
#line 2897
  mdev->rs_total = tmp___8;
#line 2897
  tmp___7 = tmp___8;
#line 2897
  mdev->rs_start = tmp___7;
#line 2897
  tmp___6 = tmp___7;
#line 2897
  mdev->p_size = tmp___6;
#line 2897
  tmp___5 = (unsigned int )tmp___6;
#line 2897
  mdev->writ_cnt = tmp___5;
#line 2897
  tmp___4 = tmp___5;
#line 2897
  mdev->send_cnt = tmp___4;
#line 2897
  tmp___3 = tmp___4;
#line 2897
  mdev->recv_cnt = tmp___3;
#line 2897
  tmp___2 = tmp___3;
#line 2897
  mdev->read_cnt = tmp___2;
#line 2897
  tmp___1 = tmp___2;
#line 2897
  mdev->bm_writ_cnt = tmp___1;
#line 2897
  mdev->al_writ_cnt = tmp___1;
#line 2907
  mdev->rs_last_events = 0;
#line 2908
  mdev->rs_last_sect_ev = 0;
#line 2909
  i = 0;
#line 2909
  goto ldv_48994;
  ldv_48993: 
#line 2910
  mdev->rs_mark_left[i] = 0UL;
#line 2911
  mdev->rs_mark_time[i] = 0UL;
#line 2909
  i = i + 1;
  ldv_48994: ;
#line 2909
  if (i <= 7) {
#line 2910
    goto ldv_48993;
  } else {

  }

#line 2913
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2913
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2913);
  } else {

  }
#line 2915
  drbd_set_my_capacity(mdev, 0UL);
#line 2916
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2918
    drbd_bm_resize(mdev, 0UL, 1);
#line 2919
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2922
  drbd_free_resources(mdev);
#line 2923
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 2929
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2929
  if (tmp___10 == 0) {
#line 2929
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2929);
  } else {

  }
#line 2930
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2930
  if (tmp___11 == 0) {
#line 2930
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2930);
  } else {

  }
#line 2931
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2931
  if (tmp___12 == 0) {
#line 2931
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2931);
  } else {

  }
#line 2932
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2932
  if (tmp___13 == 0) {
#line 2932
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2932);
  } else {

  }
#line 2933
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2933
  if (tmp___14 == 0) {
#line 2933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2933);
  } else {

  }
#line 2934
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2934
  if (tmp___15 == 0) {
#line 2934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2934);
  } else {

  }
#line 2935
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2935
  if (tmp___16 == 0) {
#line 2935
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2935);
  } else {

  }
#line 2936
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2936
  if (tmp___17 == 0) {
#line 2936
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2936);
  } else {

  }
#line 2937
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2937
  if (tmp___18 == 0) {
#line 2937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2937);
  } else {

  }
#line 2938
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2938
  if (tmp___19 == 0) {
#line 2938
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2938);
  } else {

  }
#line 2939
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 2939
  if (tmp___20 == 0) {
#line 2939
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2939);
  } else {

  }
#line 2940
  return;
}
}
#line 2943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2947
  goto ldv_49001;
  ldv_49000: 
#line 2948
  page = drbd_pp_pool;
#line 2949
  drbd_pp_pool = (struct page *)page->ldv_13170.ldv_13167.private;
#line 2950
  __free_pages(page, 0U);
#line 2951
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_49001: ;
#line 2947
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2948
    goto ldv_49000;
  } else {

  }

#line 2956
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2957
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2958
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2959
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2960
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2961
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2962
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2963
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2964
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2965
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2966
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2967
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2969
  drbd_ee_mempool = 0;
#line 2970
  drbd_request_mempool = 0;
#line 2971
  drbd_ee_cache = 0;
#line 2972
  drbd_request_cache = 0;
#line 2973
  drbd_bm_ext_cache = 0;
#line 2974
  drbd_al_ext_cache = 0;
#line 2976
  return;
}
}
#line 2979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2982
  number = (int const   )(minor_count * 32U);
#line 2986
  drbd_request_mempool = 0;
#line 2987
  drbd_ee_cache = 0;
#line 2988
  drbd_request_cache = 0;
#line 2989
  drbd_bm_ext_cache = 0;
#line 2990
  drbd_al_ext_cache = 0;
#line 2991
  drbd_pp_pool = 0;
#line 2994
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2996
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2997
    goto Enomem;
  } else {

  }
#line 2999
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3001
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3002
    goto Enomem;
  } else {

  }
#line 3004
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3006
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3007
    goto Enomem;
  } else {

  }
#line 3009
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3011
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3012
    goto Enomem;
  } else {

  }
#line 3015
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3017
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3018
    goto Enomem;
  } else {

  }
#line 3020
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3022
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3023
    goto Enomem;
  } else {

  }
#line 3026
  spinlock_check(& drbd_pp_lock);
#line 3026
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5802.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3028
  i = 0;
#line 3028
  goto ldv_49012;
  ldv_49011: 
#line 3029
  page = alloc_pages(131282U, 0U);
#line 3030
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3031
    goto Enomem;
  } else {

  }
#line 3032
  page->ldv_13170.ldv_13167.private = (unsigned long )drbd_pp_pool;
#line 3033
  drbd_pp_pool = page;
#line 3028
  i = i + 1;
  ldv_49012: ;
#line 3028
  if (i < number) {
#line 3029
    goto ldv_49011;
  } else {

  }
#line 3035
  drbd_pp_vacant = number;
#line 3037
  return (0);
  Enomem: 
#line 3040
  drbd_destroy_mempools();
#line 3041
  return (-12);
}
}
#line 3044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3051
  return (0);
}
}
#line 3054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3062
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3063
  if (rr != 0) {
#line 3064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3066
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3067
  if (rr != 0) {
#line 3068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3070
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3071
  if (rr != 0) {
#line 3072
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3074
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3075
  if (rr != 0) {
#line 3076
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3078
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3079
  if (rr != 0) {
#line 3080
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3081
  return;
}
}
#line 3085 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3087
  tmp = minor_to_mdev(minor);
#line 3087
  mdev = tmp;
#line 3089
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3090
    return;
  } else {

  }
#line 3093
  if (mdev->open_cnt != 0) {
#line 3094
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3095);
  } else {

  }
#line 3097
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3097
  _b = tmp___0 == 0;
#line 3097
  if (_b != 0) {
#line 3097
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3097);
  } else {

  }
#line 3097
  if (_b != 0) {
#line 3099
    lp = mdev->data.work.q.next;
#line 3099
    goto ldv_49033;
    ldv_49032: 
#line 3100
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3099
    lp = lp->next;
    ldv_49033: 
#line 3099
    __builtin_prefetch((void const   *)lp->next);
#line 3099
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3100
      goto ldv_49032;
    } else {

    }

  } else {

  }
#line 3105
  del_gendisk(mdev->vdisk);
#line 3110
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3111
    bdput(mdev->this_bdev);
  } else {

  }
#line 3113
  drbd_free_resources(mdev);
#line 3115
  drbd_release_ee_lists(mdev);
#line 3118
  kfree((void const   *)mdev->ee_hash);
#line 3124
  lc_destroy(mdev->act_log);
#line 3125
  lc_destroy(mdev->resync);
#line 3127
  kfree((void const   *)mdev->p_uuid);
#line 3130
  kfree((void const   *)mdev->int_dig_out);
#line 3131
  kfree((void const   *)mdev->int_dig_in);
#line 3132
  kfree((void const   *)mdev->int_dig_vv);
#line 3137
  drbd_free_mdev(mdev);
#line 3138
  return;
}
}
#line 3140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3144
  unregister_reboot_notifier(& drbd_notifier);
#line 3146
  drbd_nl_cleanup();
#line 3148
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3149
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3150
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3151
    i = minor_count;
#line 3152
    goto ldv_49040;
    ldv_49039: 
#line 3153
    drbd_delete_device(i);
    ldv_49040: 
#line 3152
    tmp = i;
#line 3152
    i = i - 1U;
#line 3152
    if (tmp != 0U) {
#line 3153
      goto ldv_49039;
    } else {

    }
#line 3154
    drbd_destroy_mempools();
  } else {

  }
#line 3157
  kfree((void const   *)minor_table);
#line 3159
  unregister_blkdev(147U, "drbd");
#line 3161
  printk("<6>drbd: module cleanup done.\n");
#line 3162
  return;
}
}
#line 3171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3173
  mdev = (struct drbd_conf *)congested_data;
#line 3175
  reason = 45;
#line 3176
  r = 0;
#line 3178
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3178
  if (tmp == 0) {
#line 3180
    r = bdi_bits;
#line 3181
    reason = 100;
#line 3182
    goto out;
  } else {

  }
#line 3185
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3185
  if (tmp___0 != 0) {
#line 3186
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3187
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3188
    put_ldev(mdev);
#line 3189
    if (r != 0) {
#line 3190
      reason = 98;
    } else {

    }
  } else {

  }
#line 3193
  if ((bdi_bits & 4) != 0) {
#line 3193
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3193
    if (tmp___1 != 0) {
#line 3194
      r = r | 4;
#line 3195
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3199
  mdev->congestion_reason = reason;
#line 3200
  return (r);
}
}
#line 3203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3210
  tmp = kzalloc(4544UL, 208U);
#line 3210
  mdev = (struct drbd_conf *)tmp;
#line 3211
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3212
    return (0);
  } else {

  }
#line 3213
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3213
  if (tmp___0) {
#line 3213
    tmp___1 = 0;
  } else {
#line 3213
    tmp___1 = 1;
  }
#line 3213
  if (tmp___1) {
#line 3214
    goto out_no_cpumask;
  } else {

  }
#line 3216
  mdev->minor = minor;
#line 3218
  drbd_init_set_defaults(mdev);
#line 3220
  q = blk_alloc_queue(208U);
#line 3221
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3222
    goto out_no_q;
  } else {

  }
#line 3223
  mdev->rq_queue = q;
#line 3224
  q->queuedata = (void *)mdev;
#line 3226
  disk = alloc_disk(1);
#line 3227
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3228
    goto out_no_disk;
  } else {

  }
#line 3229
  mdev->vdisk = disk;
#line 3231
  set_disk_ro(disk, 1);
#line 3233
  disk->queue = q;
#line 3234
  disk->major = 147;
#line 3235
  disk->first_minor = (int )minor;
#line 3236
  disk->fops = & drbd_ops;
#line 3237
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3238
  disk->private_data = (void *)mdev;
#line 3240
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3242
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3244
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3245
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3247
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3248
  blk_queue_max_segment_size(q, 131072U);
#line 3249
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3250
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3251
  q->queue_lock = & mdev->req_lock;
#line 3253
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3254
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3255
    goto out_no_io_page;
  } else {

  }
#line 3257
  tmp___2 = drbd_bm_init(mdev);
#line 3257
  if (tmp___2 != 0) {
#line 3258
    goto out_no_bitmap;
  } else {

  }
#line 3260
  tmp___3 = tl_init(mdev);
#line 3260
  if (tmp___3 == 0) {
#line 3261
    goto out_no_tl;
  } else {

  }
#line 3263
  tmp___4 = kzalloc(120UL, 208U);
#line 3263
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3264
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3265
    goto out_no_app_reads;
  } else {

  }
#line 3267
  tmp___5 = kzalloc(40UL, 208U);
#line 3267
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3268
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3269
    goto out_no_epoch;
  } else {

  }
#line 3271
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3272
  mdev->epochs = 1U;
#line 3274
  return (mdev);
  out_no_epoch: 
#line 3279
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3281
  tl_cleanup(mdev);
  out_no_tl: 
#line 3283
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3285
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3287
  put_disk(disk);
  out_no_disk: 
#line 3289
  blk_cleanup_queue(q);
  out_no_q: 
#line 3291
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3293
  kfree((void const   *)mdev);
#line 3294
  return (0);
}
}
#line 3299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3301
  kfree((void const   *)mdev->current_epoch);
#line 3302
  kfree((void const   *)mdev->app_reads_hash);
#line 3303
  tl_cleanup(mdev);
#line 3304
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3305
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3306
  __free_pages(mdev->md_io_page, 0U);
#line 3307
  put_disk(mdev->vdisk);
#line 3308
  blk_cleanup_queue(mdev->rq_queue);
#line 3309
  free_cpumask_var(mdev->cpu_mask);
#line 3310
  kfree((void const   *)mdev);
#line 3311
  return;
}
}
#line 3314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3325
  if (minor_count == 0U || minor_count > 255U) {
#line 3326
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3329
    return (-22);
  } else {

  }
#line 3335
  err = drbd_nl_init();
#line 3336
  if (err != 0) {
#line 3337
    return (err);
  } else {

  }
#line 3339
  err = register_blkdev(147U, "drbd");
#line 3340
  if (err != 0) {
#line 3341
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3344
    return (err);
  } else {

  }
#line 3347
  register_reboot_notifier(& drbd_notifier);
#line 3352
  err = -12;
#line 3354
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3356
  drbd_proc = 0;
#line 3357
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3357
  minor_table = (struct drbd_conf **)tmp;
#line 3359
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3360
    goto Enomem;
  } else {

  }
#line 3362
  err = drbd_create_mempools();
#line 3363
  if (err != 0) {
#line 3364
    goto Enomem;
  } else {

  }
#line 3366
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3367
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3368
    printk("<3>drbd: unable to register proc file\n");
#line 3369
    goto Enomem;
  } else {

  }
#line 3372
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3374
  printk("<6>drbd: initialized. Version: 8.3.9 (api:%d/proto:%d-%d)\n", 88, 86, 95);
#line 3377
  tmp___0 = drbd_buildtag();
#line 3377
  printk("<6>drbd: %s\n", tmp___0);
#line 3378
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3380
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3382
  return (0);
  Enomem: 
#line 3385
  drbd_cleanup();
#line 3386
  if (err == -12) {
#line 3388
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3390
    printk("<3>drbd: initialization failure\n");
  }
#line 3391
  return (err);
}
}
#line 3394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3396
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3397
    return;
  } else {

  }
#line 3399
  blkdev_put(ldev->backing_bdev, 131U);
#line 3400
  blkdev_put(ldev->md_bdev, 131U);
#line 3402
  kfree((void const   *)ldev);
#line 3403
  return;
}
}
#line 3405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3407
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3408
    ldv_mutex_lock_143(& mdev->data.mutex);
#line 3409
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3410
    sock_release(mdev->data.socket);
#line 3411
    mdev->data.socket = 0;
#line 3412
    ldv_mutex_unlock_144(& mdev->data.mutex);
  } else {

  }
#line 3414
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3415
    ldv_mutex_lock_145(& mdev->meta.mutex);
#line 3416
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3417
    sock_release(mdev->meta.socket);
#line 3418
    mdev->meta.socket = 0;
#line 3419
    ldv_mutex_unlock_146(& mdev->meta.mutex);
  } else {

  }
#line 3421
  return;
}
}
#line 3424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3426
  crypto_free_hash(mdev->csums_tfm);
#line 3427
  mdev->csums_tfm = 0;
#line 3428
  crypto_free_hash(mdev->verify_tfm);
#line 3429
  mdev->verify_tfm = 0;
#line 3430
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3431
  mdev->cram_hmac_tfm = 0;
#line 3432
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3433
  mdev->integrity_w_tfm = 0;
#line 3434
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3435
  mdev->integrity_r_tfm = 0;
#line 3437
  drbd_free_sock(mdev);
#line 3439
  drbd_free_bc(mdev->ldev);
#line 3439
  mdev->ldev = 0;
#line 3440
  return;
}
}
#line 3467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3473
  del_timer(& mdev->md_sync_timer);
#line 3475
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3475
  if (tmp == 0) {
#line 3476
    return;
  } else {

  }
#line 3480
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3480
  if (tmp___0 == 0) {
#line 3481
    return;
  } else {

  }
#line 3483
  ldv_mutex_lock_147(& mdev->md_io_mutex);
#line 3484
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3484
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3485
  memset((void *)buffer, 0, 512UL);
#line 3487
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3487
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3487
  buffer->la_size = tmp___3;
#line 3488
  i = 0;
#line 3488
  goto ldv_49104;
  ldv_49103: 
#line 3489
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3489
  buffer->uuid[i] = tmp___4;
#line 3488
  i = i + 1;
  ldv_49104: ;
#line 3488
  if (i <= 3) {
#line 3489
    goto ldv_49103;
  } else {

  }
#line 3490
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3490
  buffer->flags = tmp___5;
#line 3491
  buffer->magic = 1795323011U;
#line 3493
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3493
  buffer->md_size_sect = tmp___6;
#line 3494
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3494
  buffer->al_offset = tmp___7;
#line 3495
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3495
  buffer->al_nr_extents = tmp___8;
#line 3496
  buffer->bm_bytes_per_bit = 1048576U;
#line 3497
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3497
  buffer->device_uuid = tmp___9;
#line 3499
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3499
  buffer->bm_offset = tmp___10;
#line 3501
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3501
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3501);
  } else {

  }
#line 3502
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3504
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3504
  if (tmp___12 == 0) {
#line 3506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3507
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3512
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3512
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3514
  ldv_mutex_unlock_148(& mdev->md_io_mutex);
#line 3515
  put_ldev(mdev);
#line 3516
  return;
}
}
#line 3526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3529
  rv = 101;
#line 3531
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3531
  if (tmp == 0) {
#line 3532
    return (118);
  } else {

  }
#line 3534
  ldv_mutex_lock_149(& mdev->md_io_mutex);
#line 3535
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3535
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3537
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3537
  if (tmp___1 == 0) {
#line 3540
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3541
    rv = 118;
#line 3542
    goto err;
  } else {

  }
#line 3545
  tmp___2 = __fswab32(buffer->magic);
#line 3545
  if (tmp___2 != 2205418091U) {
#line 3546
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3547
    rv = 119;
#line 3548
    goto err;
  } else {

  }
#line 3550
  tmp___4 = __fswab32(buffer->al_offset);
#line 3550
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3551
    tmp___3 = __fswab32(buffer->al_offset);
#line 3551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3553
    rv = 119;
#line 3554
    goto err;
  } else {

  }
#line 3556
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3556
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3557
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3557
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3559
    rv = 119;
#line 3560
    goto err;
  } else {

  }
#line 3562
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3562
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3563
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3565
    rv = 119;
#line 3566
    goto err;
  } else {

  }
#line 3569
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3569
  if (tmp___10 != 4096U) {
#line 3570
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3572
    rv = 119;
#line 3573
    goto err;
  } else {

  }
#line 3576
  tmp___11 = __fswab64(buffer->la_size);
#line 3576
  bdev->md.la_size_sect = tmp___11;
#line 3577
  i = 0;
#line 3577
  goto ldv_49116;
  ldv_49115: 
#line 3578
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3578
  bdev->md.uuid[i] = tmp___12;
#line 3577
  i = i + 1;
  ldv_49116: ;
#line 3577
  if (i <= 3) {
#line 3578
    goto ldv_49115;
  } else {

  }
#line 3579
  tmp___13 = __fswab32(buffer->flags);
#line 3579
  bdev->md.flags = tmp___13;
#line 3580
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3580
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3581
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3581
  bdev->md.device_uuid = tmp___15;
#line 3583
  if (mdev->sync_conf.al_extents <= 6) {
#line 3584
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3587
  ldv_mutex_unlock_150(& mdev->md_io_mutex);
#line 3588
  put_ldev(mdev);
#line 3590
  return (rv);
}
}
#line 3593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void debug_drbd_uuid(struct drbd_conf *mdev , enum drbd_uuid_index index ) 
{ 
  char *uuid_str[6U] ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 3595
  uuid_str[0] = (char *)"CURRENT";
#line 3595
  uuid_str[1] = (char *)"BITMAP";
#line 3595
  uuid_str[2] = (char *)"HISTORY_START";
#line 3595
  uuid_str[3] = (char *)"HISTORY_END";
#line 3595
  uuid_str[4] = (char *)"SIZE";
#line 3595
  uuid_str[5] = (char *)"FLAGS";
#line 3604
  if ((unsigned int )index > 5U) {
#line 3605
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid_index >= EXTENDED_SIZE\n");
#line 3606
    return;
  } else {

  }
#line 3609
  descriptor.modname = "drbd";
#line 3609
  descriptor.function = "debug_drbd_uuid";
#line 3609
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared";
#line 3609
  descriptor.format = " uuid[%s] now %016llX\n";
#line 3609
  descriptor.lineno = 3611U;
#line 3609
  descriptor.flags = 0U;
#line 3609
  descriptor.enabled = (char)0;
#line 3609
  tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 3609
  if (tmp != 0L) {
#line 3609
    dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid[%s] now %016llX\n",
               uuid_str[(unsigned int )index], (mdev->ldev)->md.uuid[(unsigned int )index]);
  } else {

  }
#line 3611
  return;
}
}
#line 3633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3635
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3635
  if (tmp == 0) {
#line 3636
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3637
  return;
}
}
#line 3640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3644
  i = 2;
#line 3644
  goto ldv_49133;
  ldv_49132: 
#line 3645
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3646
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )(i + 1));
#line 3644
  i = i + 1;
  ldv_49133: ;
#line 3644
  if (i <= 2) {
#line 3645
    goto ldv_49132;
  } else {

  }

#line 3649
  return;
}
}
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3652
  if (idx == 0) {
#line 3653
    if ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 3654
      val = val | 1ULL;
    } else {
#line 3656
      val = val & 0xfffffffffffffffeULL;
    }
#line 3658
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3661
  (mdev->ldev)->md.uuid[idx] = val;
#line 3662
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )idx);
#line 3663
  drbd_md_mark_dirty(mdev);
#line 3664
  return;
}
}
#line 3667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3669
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3670
    drbd_uuid_move_history(mdev);
#line 3671
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
#line 3672
    debug_drbd_uuid(mdev, UI_HISTORY_START);
  } else {

  }
#line 3674
  _drbd_uuid_set(mdev, idx, val);
#line 3675
  return;
}
}
#line 3684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3688
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3689
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3689);
  } else {

  }
#line 3690
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3691
  debug_drbd_uuid(mdev, UI_BITMAP);
#line 3693
  get_random_bytes((void *)(& val), 8);
#line 3694
  _drbd_uuid_set(mdev, 0, val);
#line 3696
  drbd_md_sync(mdev);
#line 3697
  return;
}
}
#line 3699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3701
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3702
    return;
  } else {

  }
#line 3704
  if (val == 0ULL) {
#line 3705
    drbd_uuid_move_history(mdev);
#line 3706
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3707
    (mdev->ldev)->md.uuid[1] = 0ULL;
#line 3708
    debug_drbd_uuid(mdev, UI_HISTORY_START);
#line 3709
    debug_drbd_uuid(mdev, UI_BITMAP);
  } else {
#line 3711
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3712
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3714
    (mdev->ldev)->md.uuid[1] = val;
#line 3715
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 3717
    debug_drbd_uuid(mdev, UI_BITMAP);
  }
#line 3719
  drbd_md_mark_dirty(mdev);
#line 3720
  return;
}
}
#line 3728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3730
  rv = -5;
#line 3732
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3732
  if (tmp != 0) {
#line 3733
    drbd_md_set_flag(mdev, 8);
#line 3734
    drbd_md_sync(mdev);
#line 3735
    drbd_bm_set_all(mdev);
#line 3737
    rv = drbd_bm_write(mdev);
#line 3739
    if (rv == 0) {
#line 3740
      drbd_md_clear_flag(mdev, 8);
#line 3741
      drbd_md_sync(mdev);
    } else {

    }
#line 3744
    put_ldev(mdev);
  } else {

  }
#line 3747
  return (rv);
}
}
#line 3756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3758
  rv = -5;
#line 3760
  drbd_resume_al(mdev);
#line 3761
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3761
  if (tmp != 0) {
#line 3762
    drbd_bm_clear_all(mdev);
#line 3763
    rv = drbd_bm_write(mdev);
#line 3764
    put_ldev(mdev);
  } else {

  }
#line 3767
  return (rv);
}
}
#line 3770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3772
  __mptr = (struct drbd_work  const  *)w;
#line 3772
  work = (struct bm_io_work *)__mptr;
#line 3775
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3775
  if (tmp != 0) {
#line 3775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3775);
  } else {

  }
#line 3777
  drbd_bm_lock(mdev, work->why);
#line 3778
  rv = (*(work->io_fn))(mdev);
#line 3779
  drbd_bm_unlock(mdev);
#line 3781
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 3782
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3784
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3785
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3787
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3788
  work->why = 0;
#line 3790
  return (1);
}
}
#line 3793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 3795
  lc_destroy(mdev->resync);
#line 3796
  mdev->resync = 0;
#line 3797
  lc_destroy(mdev->act_log);
#line 3798
  mdev->act_log = 0;
#line 3799
  drbd_free_bc(mdev->ldev);
#line 3799
  mdev->ldev = 0;
#line 3803
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 3804
    __free_pages(mdev->md_io_tmpp, 0U);
#line 3805
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 3807
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3808
  return;
}
}
#line 3810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3812
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 4U) {
#line 3812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3812);
  } else {

  }
#line 3817
  val.i = 0U;
#line 3817
  val.ldv_37735.disk = 0U;
#line 3817
  mask.i = 0U;
#line 3817
  mask.ldv_37735.disk = 15U;
#line 3817
  drbd_force_state(mdev, mask, val);
#line 3818
  return (1);
}
}
#line 3821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3823
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) != 4U) {
#line 3823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3823);
  } else {

  }
#line 3824
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3824
  if (tmp == 0) {
#line 3825
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 3826
  return;
}
}
#line 3840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3845
  tmp = get_current();
#line 3845
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3845);
  } else {

  }
#line 3847
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 3847
  if (tmp___0 != 0) {
#line 3847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3847);
  } else {

  }
#line 3848
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3848
  if (tmp___1 != 0) {
#line 3848
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3848);
  } else {

  }
#line 3849
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3849
  if (tmp___2 == 0) {
#line 3849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3849);
  } else {

  }
#line 3850
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3851
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3854
  mdev->bm_io_work.io_fn = io_fn;
#line 3855
  mdev->bm_io_work.done = done;
#line 3856
  mdev->bm_io_work.why = why;
#line 3858
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 3859
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3859
  if (tmp___4 == 0) {
#line 3860
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3860
    if (tmp___3 != 0) {
#line 3861
      set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 3862
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3864
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3865
  return;
}
}
#line 3877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3881
  tmp = get_current();
#line 3881
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3881);
  } else {

  }
#line 3883
  drbd_suspend_io(mdev);
#line 3885
  drbd_bm_lock(mdev, why);
#line 3886
  rv = (*io_fn)(mdev);
#line 3887
  drbd_bm_unlock(mdev);
#line 3889
  drbd_resume_io(mdev);
#line 3891
  return (rv);
}
}
#line 3894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3896
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3897
    drbd_md_mark_dirty(mdev);
#line 3898
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3900
  return;
}
}
#line 3902 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3904
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3905
    drbd_md_mark_dirty(mdev);
#line 3906
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3908
  return;
}
}
#line 3909 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3911
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3916
  mdev = (struct drbd_conf *)data;
#line 3918
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3919
  return;
}
}
#line 3921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3923
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3928
  drbd_md_sync(mdev);
#line 3929
  return (1);
}
}
#line 3949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3953
  tmp = rsp->count;
#line 3953
  rsp->count = rsp->count - 1UL;
#line 3953
  if (tmp == 0UL) {
#line 3954
    get_random_bytes((void *)(& refresh), 8);
#line 3955
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3956
    rsp->count = 10000UL;
  } else {

  }
#line 3958
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3959
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3959
  return ((unsigned long )tmp___0);
}
}
#line 3963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3964
  _faults[0] = (char *)"Meta-data write";
#line 3964
  _faults[1] = (char *)"Meta-data read";
#line 3964
  _faults[2] = (char *)"Resync write";
#line 3964
  _faults[3] = (char *)"Resync read";
#line 3964
  _faults[4] = (char *)"Data write";
#line 3964
  _faults[5] = (char *)"Data read";
#line 3964
  _faults[6] = (char *)"Data read ahead";
#line 3964
  _faults[7] = (char *)"BM allocation";
#line 3964
  _faults[8] = (char *)"EE allocation";
#line 3964
  _faults[9] = (char *)"receive data corruption";
#line 3977
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3981 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3983
  rrs.state = 0UL;
#line 3983
  rrs.count = 0UL;
#line 3985
  if (fault_devs == 0) {
#line 3985
    goto _L;
  } else {
#line 3985
    tmp = mdev_to_minor(mdev);
#line 3985
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3985
      tmp___0 = _drbd_fault_random(& rrs);
#line 3985
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3985
        tmp___1 = 1;
      } else {
#line 3985
        tmp___1 = 0;
      }
    } else {
#line 3985
      tmp___1 = 0;
    }
  }
#line 3985
  ret = (unsigned int )tmp___1;
#line 3990
  if (ret != 0U) {
#line 3991
    fault_count = fault_count + 1;
#line 3993
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3993
    if (tmp___3 != 0) {
#line 3994
      tmp___2 = _drbd_fault_str(type);
#line 3994
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3998
  return (ret);
}
}
#line 4002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4007
  buildtag[0] = '\000';
#line 4007
  tmp = 1U;
#line 4007
  while (1) {
#line 4007
    if (tmp >= 38U) {
#line 4007
      break;
    } else {

    }
#line 4007
    buildtag[tmp] = (char)0;
#line 4007
    tmp = tmp + 1U;
  }
#line 4009
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4011
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4012
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4015
      buildtag[0] = 98;
    }
  } else {

  }
#line 4018
  return ((char const   *)(& buildtag));
}
}
#line 4066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_65_p1 ;
  int res_drbd_open_65 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_66_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_72_p1 ;
  void *var_drbd_notify_sys_72_p2 ;
  unsigned long var_md_sync_timer_fn_102_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4315
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4262
  LDV_IN_INTERRUPT = 1;
#line 4271
  ldv_initialize();
#line 4298
  ldv_handler_precall();
#line 4299
  tmp = drbd_init();
#line 4299
  if (tmp != 0) {
#line 4300
    goto ldv_final;
  } else {

  }
#line 4322
  goto ldv_49309;
  ldv_49308: 
#line 4326
  tmp___0 = nondet_int();
#line 4326
  switch (tmp___0) {
  case 0: ;
#line 4331
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4357
    ldv_handler_precall();
#line 4358
    res_drbd_open_65 = drbd_open(var_group1, var_drbd_open_65_p1);
#line 4359
    ldv_check_return_value(res_drbd_open_65);
#line 4360
    if (res_drbd_open_65 != 0) {
#line 4361
      goto ldv_module_exit;
    } else {

    }
#line 4379
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4385
  goto ldv_49303;
  case 1: ;
#line 4389
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4415
    ldv_handler_precall();
#line 4416
    drbd_release(var_group2, var_drbd_release_66_p1);
#line 4434
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4440
  goto ldv_49303;
  case 2: 
#line 4470
  ldv_handler_precall();
#line 4471
  drbd_notify_sys(var_group3, var_drbd_notify_sys_72_p1, var_drbd_notify_sys_72_p2);
#line 4495
  goto ldv_49303;
  case 3: 
#line 4531
  ldv_handler_precall();
#line 4532
  md_sync_timer_fn(var_md_sync_timer_fn_102_p0);
#line 4550
  goto ldv_49303;
  default: ;
#line 4551
  goto ldv_49303;
  }
  ldv_49303: ;
  ldv_49309: 
#line 4322
  tmp___1 = nondet_int();
#line 4322
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4324
    goto ldv_49308;
  } else {

  }

  ldv_module_exit: 
#line 4584
  ldv_handler_precall();
#line 4585
  drbd_cleanup();
  ldv_final: 
#line 4605
  ldv_check_final_state();
#line 4608
  return;
}
}
#line 4612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4617
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4619
  mutex_lock(ldv_func_arg1);
#line 4620
  return;
}
}
#line 4622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4627
  tmp = mutex_trylock(ldv_func_arg1);
#line 4627
  ldv_func_res = tmp;
#line 4629
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4629
  return (tmp___0);
#line 4631
  return (ldv_func_res);
}
}
#line 4634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4639
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4641
  mutex_unlock(ldv_func_arg1);
#line 4642
  return;
}
}
#line 4644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4649
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4651
  mutex_lock(ldv_func_arg1);
#line 4652
  return;
}
}
#line 4654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4659
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4661
  mutex_unlock(ldv_func_arg1);
#line 4662
  return;
}
}
#line 4664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4669
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4671
  mutex_unlock(ldv_func_arg1);
#line 4672
  return;
}
}
#line 4674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4679
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4681
  mutex_lock(ldv_func_arg1);
#line 4682
  return;
}
}
#line 4684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4689
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4691
  mutex_unlock(ldv_func_arg1);
#line 4692
  return;
}
}
#line 4694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4699
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4701
  mutex_lock(ldv_func_arg1);
#line 4702
  return;
}
}
#line 4704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4709
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4711
  mutex_lock(ldv_func_arg1);
#line 4712
  return;
}
}
#line 4714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4719
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4721
  mutex_unlock(ldv_func_arg1);
#line 4722
  return;
}
}
#line 4724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4729
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4731
  mutex_unlock(ldv_func_arg1);
#line 4732
  return;
}
}
#line 4734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4739
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4741
  mutex_lock(ldv_func_arg1);
#line 4742
  return;
}
}
#line 4744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4749
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4751
  mutex_unlock(ldv_func_arg1);
#line 4752
  return;
}
}
#line 4754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4759
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4761
  mutex_lock(ldv_func_arg1);
#line 4762
  return;
}
}
#line 4764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4769
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4771
  mutex_unlock(ldv_func_arg1);
#line 4772
  return;
}
}
#line 4774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4779
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4781
  mutex_lock(ldv_func_arg1);
#line 4782
  return;
}
}
#line 4784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4789
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4791
  mutex_unlock(ldv_func_arg1);
#line 4792
  return;
}
}
#line 4794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4799
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4801
  mutex_lock(ldv_func_arg1);
#line 4802
  return;
}
}
#line 4804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4809
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4811
  mutex_unlock(ldv_func_arg1);
#line 4812
  return;
}
}
#line 4814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4819
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4821
  mutex_lock(ldv_func_arg1);
#line 4822
  return;
}
}
#line 4824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4829
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4831
  mutex_unlock(ldv_func_arg1);
#line 4832
  return;
}
}
#line 4834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4839
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4841
  mutex_lock(ldv_func_arg1);
#line 4842
  return;
}
}
#line 4844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4849
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4851
  mutex_unlock(ldv_func_arg1);
#line 4852
  return;
}
}
#line 4854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4859
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4861
  mutex_lock(ldv_func_arg1);
#line 4862
  return;
}
}
#line 4864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4869
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4871
  mutex_unlock(ldv_func_arg1);
#line 4872
  return;
}
}
#line 4874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4879
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4881
  mutex_lock(ldv_func_arg1);
#line 4882
  return;
}
}
#line 4884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4889
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4891
  mutex_unlock(ldv_func_arg1);
#line 4892
  return;
}
}
#line 4894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4899
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4901
  mutex_lock(ldv_func_arg1);
#line 4902
  return;
}
}
#line 4904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4909
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4911
  mutex_unlock(ldv_func_arg1);
#line 4912
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 114
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 126
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 150
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 155
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 160
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 165
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 175
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 177
  mutex_lock(ldv_func_arg1);
#line 178
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 185
  tmp = mutex_trylock(ldv_func_arg1);
#line 185
  ldv_func_res = tmp;
#line 187
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 187
  return (tmp___0);
#line 189
  return (ldv_func_res);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 197
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 199
  mutex_unlock(ldv_func_arg1);
#line 200
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 264 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6083: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 211 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 89
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 89
  if (tmp != 0L) {
#line 89
    goto do_trace;
  } else {

  }
#line 89
  return;
  do_trace: 
#line 89
  __rcu_read_lock();
#line 89
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
  tmp___0 = debug_lockdep_rcu_enabled();
#line 89
  if (tmp___0 != 0 && ! __warned) {
#line 89
    tmp___1 = rcu_read_lock_sched_held();
#line 89
    if (tmp___1 == 0 && 1) {
#line 89
      __warned = 1;
#line 89
      lockdep_rcu_dereference("include/trace/events/module.h", 94);
    } else {

    }
  } else {

  }
#line 89
  it_func_ptr = _________p1;
#line 89
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_12346: 
#line 89
    it_func = it_func_ptr->func;
#line 89
    __data = it_func_ptr->data;
#line 89
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 89
    it_func_ptr = it_func_ptr + 1;
#line 89
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
      goto ldv_12346;
    } else {

    }

  } else {

  }
#line 89
  __rcu_read_lock();
#line 91
  return;
}
}
#line 515 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 517
  ret = 1;
#line 519
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 522
    tmp = module_is_live(module);
#line 522
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 522
    if (tmp___0 != 0L) {
#line 523
      __vpp_verify = 0;
#line 523
      switch (4UL) {
      case 1UL: 
#line 523
      pao_ID__ = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12717;
      case 2UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12717;
      case 4UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12717;
      case 8UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12717;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12717: ;
#line 523
      goto ldv_12722;
      case 2UL: 
#line 523
      pao_ID_____0 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12728;
      case 2UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12728;
      case 4UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12728;
      case 8UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12728;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12728: ;
#line 523
      goto ldv_12722;
      case 4UL: 
#line 523
      pao_ID_____1 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12738;
      case 2UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12738;
      case 4UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12738;
      case 8UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12738;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12738: ;
#line 523
      goto ldv_12722;
      case 8UL: 
#line 523
      pao_ID_____2 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12748;
      case 2UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12748;
      case 4UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12748;
      case 8UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12748;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12748: ;
#line 523
      goto ldv_12722;
      default: 
#line 523
      __bad_size_call_parameter();
#line 523
      goto ldv_12722;
      }
      ldv_12722: ;
#line 524
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 526
      ret = 0;
    }
  } else {

  }
#line 530
  return (ret);
}
}
#line 2051 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 132 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 134
extern void cn_del_callback(struct cb_id * ) ;
#line 135
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 407 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable___0();
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 67
  pagefault_enable___0();
#line 68
  return;
}
}
#line 809 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 810
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 814
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 823
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 836
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 949 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 951
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1487 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1877
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1881
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1881
  if (tmp___1 != 0UL) {
#line 1881
    __min1 = 34359738368UL;
#line 1881
    tmp___0 = drbd_md_first_sector(bdev);
#line 1881
    __min2 = tmp___0;
#line 1881
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1881
    s = 0UL;
  }
#line 1884
  goto ldv_46960;
  case -2: 
#line 1886
  __min1___0 = 34359738368UL;
#line 1886
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1886
  __min2___0 = tmp___2;
#line 1886
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1889
  __min1___1 = s;
#line 1889
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1889
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1892
  goto ldv_46960;
  default: 
#line 1894
  __min1___2 = 8587575296UL;
#line 1894
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1894
  __min2___2 = tmp___3;
#line 1894
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_46960: ;
#line 1897
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[81U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 100
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 101
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_47689;
  ldv_47688: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_47686;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_47686: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_47689: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_47688;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_47750;
  ldv_47749: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_47718;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_47718;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_47718;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_47718;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_47718;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_47718;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47718;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47718;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47718;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_47718;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47718;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47718;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_47718: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_47750: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_47749;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_47853;
  ldv_47852: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_47788;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_47788;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_47788;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_47788;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_47788;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_47788;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_47788;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_47788;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_47788;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_47788;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_47788;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_47788;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_47788;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_47788;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_47788;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_47788;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_47788;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_47788;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_47788;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_47788;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47788;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_47788: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_47853: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_47852;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_47887;
  ldv_47886: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_47882;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_47882;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_47882;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_47882: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_47887: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_47886;
  } else {

  }

#line 71
  return (1);
}
}
#line 96
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 96 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 77
  goto ldv_47943;
  ldv_47942: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_47901;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_47901;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_47901;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_47901;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_47901;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_47901;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_47901;
  case 75: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->on_no_data = (int )tmp___4;
#line 77
  goto ldv_47901;
  case 76: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_plan_ahead = (int )tmp___5;
#line 77
  goto ldv_47901;
  case 77: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_delay_target = (int )tmp___6;
#line 77
  goto ldv_47901;
  case 78: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_fill_target = (int )tmp___7;
#line 77
  goto ldv_47901;
  case 79: 
#line 77
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_max_rate = (int )tmp___8;
#line 77
  goto ldv_47901;
  case 80: 
#line 77
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_min_rate = (int )tmp___9;
#line 77
  goto ldv_47901;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_47901: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_47943: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 77
  tag = (int )tmp___11;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_47942;
  } else {

  }

#line 77
  return (1);
}
}
#line 140
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 140 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 138
  goto ldv_48242;
  ldv_48241: 
#line 138
  tmp = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 138
  dlen = (int )tmp___0;
#line 138
  switch (tag & 8191) {
  case 66: 
#line 138
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 138
  goto ldv_48239;
  default: ;
#line 138
  if ((tag & 8192) != 0) {
#line 138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 138
    return (0);
  } else {

  }
  }
  ldv_48239: 
#line 138
  tags = tags + (unsigned long )dlen;
  ldv_48242: 
#line 138
  tmp___1 = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 138
  tag = (int )tmp___2;
#line 138
  if (tag != 0) {
#line 139
    goto ldv_48241;
  } else {

  }

#line 138
  return (1);
}
}
#line 144
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 144 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 142
  goto ldv_48259;
  ldv_48258: 
#line 142
  tmp = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 142
  dlen = (int )tmp___0;
#line 142
  switch (tag & 8191) {
  case 63: 
#line 142
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 142
  goto ldv_48256;
  default: ;
#line 142
  if ((tag & 8192) != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 142
    return (0);
  } else {

  }
  }
  ldv_48256: 
#line 142
  tags = tags + (unsigned long )dlen;
  ldv_48259: 
#line 142
  tmp___1 = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 142
  tag = (int )tmp___2;
#line 142
  if (tag != 0) {
#line 143
    goto ldv_48258;
  } else {

  }

#line 142
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_48304;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_48304;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_48304;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_48304;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48304;
  }
  ldv_48304: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_48311;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_48311;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_48311;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_48311;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48311;
  }
  ldv_48311: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_48318;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_48318;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48318;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48318;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48318;
  }
  ldv_48318: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_48325;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_48325;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_48325;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_48325;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48325;
  }
  ldv_48325: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_48332;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_48332;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48332;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48332;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48332;
  }
  ldv_48332: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_48342;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_48342;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_48342;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_48342;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48342;
  }
  ldv_48342: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_48349;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_48349;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48349;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48349;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48349;
  }
  ldv_48349: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_48359;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_48359;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_48359;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_48359;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48359;
  }
  ldv_48359: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_48366;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_48366;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_48366;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_48366;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48366;
  }
  ldv_48366: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_48373;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_48373;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48373;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48373;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48373;
  }
  ldv_48373: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_48380;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_48380;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_48380;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_48380;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48380;
  }
  ldv_48380: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_48387;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_48387;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_48387;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_48387;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48387;
  }
  ldv_48387: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_48394;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_48394;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48394;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48394;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48394;
  }
  ldv_48394: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_48401;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_48401;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_48401;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_48401;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48401;
  }
  ldv_48401: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_48408;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_48408;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_48408;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_48408;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48408;
  }
  ldv_48408: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_48415;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_48415;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48415;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48415;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48415;
  }
  ldv_48415: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_48422;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_48422;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_48422;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_48422;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48422;
  }
  ldv_48422: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_48429;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_48429;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_48429;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_48429;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48429;
  }
  ldv_48429: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_48436;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_48436;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_48436;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_48436;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48436;
  }
  ldv_48436: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_48443;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_48443;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_48443;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_48443;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48443;
  }
  ldv_48443: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_48450;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_48450;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_48450;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_48450;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48450;
  }
  ldv_48450: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_48457;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_48457;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_48457;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_48457;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48457;
  }
  ldv_48457: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_48464;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_48464;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_48464;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_48464;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48464;
  }
  ldv_48464: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_48471;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_48471;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_48471;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_48471;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48471;
  }
  ldv_48471: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_48478;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_48478;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48478;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48478;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48478;
  }
  ldv_48478: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_48485;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_48485;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_48485;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_48485;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48485;
  }
  ldv_48485: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_48492;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_48492;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_48492;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_48492;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48492;
  }
  ldv_48492: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_48499;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_48499;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_48499;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_48499;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48499;
  }
  ldv_48499: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_48506;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_48506;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_48506;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_48506;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48506;
  }
  ldv_48506: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_48531;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_48531;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_48531;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_48531;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48531;
  }
  ldv_48531: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_48538;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_48538;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48538;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48538;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48538;
  }
  ldv_48538: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_48548;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_48548;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_48548;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_48548;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48548;
  }
  ldv_48548: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_48555;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_48555;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48555;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48555;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48555;
  }
  ldv_48555: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_48565;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_48565;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_48565;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_48565;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48565;
  }
  ldv_48565: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_48572;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_48572;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48572;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48572;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48572;
  }
  ldv_48572: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_48582;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_48582;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_48582;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_48582;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48582;
  }
  ldv_48582: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_48589;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_48589;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48589;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48589;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48589;
  }
  ldv_48589: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_48599;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_48599;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_48599;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_48599;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48599;
  }
  ldv_48599: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_48606;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_48606;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48606;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48606;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48606;
  }
  ldv_48606: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_48616;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_48616;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_48616;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_48616;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48616;
  }
  ldv_48616: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_48623;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_48623;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_48623;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_48623;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48623;
  }
  ldv_48623: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_48630;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_48630;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48630;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48630;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48630;
  }
  ldv_48630: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_48637;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_48637;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_48637;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_48637;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48637;
  }
  ldv_48637: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_48644;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_48644;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_48644;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_48644;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48644;
  }
  ldv_48644: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_48651;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_48651;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48651;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48651;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48651;
  }
  ldv_48651: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_48658;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_48658;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_48658;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_48658;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48658;
  }
  ldv_48658: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_48665;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_48665;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_48665;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_48665;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48665;
  }
  ldv_48665: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_48672;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_48672;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48672;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48672;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48672;
  }
  ldv_48672: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_48679;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_48679;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_48679;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_48679;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48679;
  }
  ldv_48679: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_48686;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_48686;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_48686;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_48686;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48686;
  }
  ldv_48686: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_48693;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_48693;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48693;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48693;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48693;
  }
  ldv_48693: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_48700;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_48700;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_48700;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_48700;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48700;
  }
  ldv_48700: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_48707;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_48707;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_48707;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_48707;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48707;
  }
  ldv_48707: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_48714;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_48714;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48714;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48714;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48714;
  }
  ldv_48714: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_48721;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_48721;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_48721;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_48721;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48721;
  }
  ldv_48721: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_48728;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_48728;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_48728;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_48728;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48728;
  }
  ldv_48728: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_48735;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_48735;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48735;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48735;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48735;
  }
  ldv_48735: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_48742;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_48742;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_48742;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_48742;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48742;
  }
  ldv_48742: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_48749;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_48749;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_48749;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_48749;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48749;
  }
  ldv_48749: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_48756;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_48756;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48756;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48756;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48756;
  }
  ldv_48756: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_48763;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_48763;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_48763;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_48763;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48763;
  }
  ldv_48763: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_48770;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_48770;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_48770;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_48770;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48770;
  }
  ldv_48770: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_48777;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_48777;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48777;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48777;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48777;
  }
  ldv_48777: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_48784;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_48784;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_48784;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_48784;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48784;
  }
  ldv_48784: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_48791;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_48791;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_48791;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_48791;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48791;
  }
  ldv_48791: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_48798;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_48798;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48798;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48798;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48798;
  }
  ldv_48798: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_48805;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_48805;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_48805;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_48805;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48805;
  }
  ldv_48805: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_48812;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_48812;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_48812;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_48812;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48812;
  }
  ldv_48812: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_48819;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_48819;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48819;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48819;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48819;
  }
  ldv_48819: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_48826;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_48826;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_48826;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_48826;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48826;
  }
  ldv_48826: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_48833;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_48833;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_48833;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_48833;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48833;
  }
  ldv_48833: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_48840;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_48840;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48840;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48840;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48840;
  }
  ldv_48840: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_48847;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_48847;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_48847;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_48847;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48847;
  }
  ldv_48847: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_48854;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_48854;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_48854;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_48854;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48854;
  }
  ldv_48854: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_48861;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_48861;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48861;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48861;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48861;
  }
  ldv_48861: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_48868;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_48868;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_48868;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_48868;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48868;
  }
  ldv_48868: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_48875;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_48875;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_48875;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_48875;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48875;
  }
  ldv_48875: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_48882;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_48882;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48882;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48882;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48882;
  }
  ldv_48882: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_48889;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_48889;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_48889;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_48889;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48889;
  }
  ldv_48889: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_48896;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_48896;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_48896;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_48896;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48896;
  }
  ldv_48896: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_48903;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_48903;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48903;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48903;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48903;
  }
  ldv_48903: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_48910;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_48910;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_48910;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_48910;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48910;
  }
  ldv_48910: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_48917;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_48917;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_48917;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_48917;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48917;
  }
  ldv_48917: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_48924;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_48924;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48924;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48924;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48924;
  }
  ldv_48924: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_48931;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_48931;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_48931;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_48931;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48931;
  }
  ldv_48931: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_48938;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_48938;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_48938;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_48938;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48938;
  }
  ldv_48938: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_48945;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_48945;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_48945;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_48945;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48945;
  }
  ldv_48945: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_48952;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_48952;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_48952;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_48952;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48952;
  }
  ldv_48952: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_48959;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_48959;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_48959;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_48959;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48959;
  }
  ldv_48959: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_48966;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_48966;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_48966;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_48966;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48966;
  }
  ldv_48966: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_48973;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_48973;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_48973;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_48973;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48973;
  }
  ldv_48973: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_48980;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_48980;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_48980;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_48980;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48980;
  }
  ldv_48980: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_48987;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_48987;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_48987;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_48987;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48987;
  }
  ldv_48987: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_48994;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_48994;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_48994;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_48994;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48994;
  }
  ldv_48994: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_49001;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_49001;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_49001;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_49001;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49001;
  }
  ldv_49001: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_49008;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_49008;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_49008;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_49008;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49008;
  }
  ldv_49008: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_49015;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_49015;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_49015;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_49015;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49015;
  }
  ldv_49015: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_49022;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_49022;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_49022;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_49022;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49022;
  }
  ldv_49022: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 96
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_49105;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_49105;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_49105;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_49105;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49105;
  }
  ldv_49105: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_49112;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_49112;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_49112;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_49112;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49112;
  }
  ldv_49112: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_49119;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_49119;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_49119;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_49119;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49119;
  }
  ldv_49119: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_49126;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_49126;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_49126;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_49126;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49126;
  }
  ldv_49126: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_49133;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_49133;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_49133;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_49133;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49133;
  }
  ldv_49133: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_49140;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_49140;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_49140;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_49140;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49140;
  }
  ldv_49140: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_49147;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_49147;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_49147;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_49147;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49147;
  }
  ldv_49147: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_49154;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_49154;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_49154;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_49154;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49154;
  }
  ldv_49154: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_49161;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_49161;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_49161;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_49161;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49161;
  }
  ldv_49161: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_49168;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_49168;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_49168;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_49168;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49168;
  }
  ldv_49168: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_49175;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_49175;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_49175;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_49175;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49175;
  }
  ldv_49175: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_49185;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_49185;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_49185;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_49185;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49185;
  }
  ldv_49185: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_49192;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_49192;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_49192;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_49192;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49192;
  }
  ldv_49192: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_49202;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_49202;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_49202;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_49202;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49202;
  }
  ldv_49202: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_49209;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_49209;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_49209;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_49209;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49209;
  }
  ldv_49209: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_49219;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_49219;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_49219;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_49219;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49219;
  }
  ldv_49219: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_49226;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_49226;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_49226;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_49226;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49226;
  }
  ldv_49226: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___16 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = 75U;
#line 77
  goto ldv_49233;
  case 2UL: 
#line 77
  put_unaligned_le16(75, __gu_p___16);
#line 77
  goto ldv_49233;
  case 4UL: 
#line 77
  put_unaligned_le32(75U, __gu_p___16);
#line 77
  goto ldv_49233;
  case 8UL: 
#line 77
  put_unaligned_le64(75ULL, __gu_p___16);
#line 77
  goto ldv_49233;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49233;
  }
  ldv_49233: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 4U;
#line 77
  goto ldv_49240;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___17);
#line 77
  goto ldv_49240;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___17);
#line 77
  goto ldv_49240;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___17);
#line 77
  goto ldv_49240;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49240;
  }
  ldv_49240: 
#line 77
  __gu_p___18 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 77
  goto ldv_49247;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 77
  goto ldv_49247;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_49247;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_49247;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49247;
  }
  ldv_49247: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___19 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = 76U;
#line 77
  goto ldv_49254;
  case 2UL: 
#line 77
  put_unaligned_le16(76, __gu_p___19);
#line 77
  goto ldv_49254;
  case 4UL: 
#line 77
  put_unaligned_le32(76U, __gu_p___19);
#line 77
  goto ldv_49254;
  case 8UL: 
#line 77
  put_unaligned_le64(76ULL, __gu_p___19);
#line 77
  goto ldv_49254;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49254;
  }
  ldv_49254: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 4U;
#line 77
  goto ldv_49261;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___20);
#line 77
  goto ldv_49261;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___20);
#line 77
  goto ldv_49261;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___20);
#line 77
  goto ldv_49261;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49261;
  }
  ldv_49261: 
#line 77
  __gu_p___21 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 77
  goto ldv_49268;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 77
  goto ldv_49268;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_49268;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_49268;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49268;
  }
  ldv_49268: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 77U;
#line 77
  goto ldv_49275;
  case 2UL: 
#line 77
  put_unaligned_le16(77, __gu_p___22);
#line 77
  goto ldv_49275;
  case 4UL: 
#line 77
  put_unaligned_le32(77U, __gu_p___22);
#line 77
  goto ldv_49275;
  case 8UL: 
#line 77
  put_unaligned_le64(77ULL, __gu_p___22);
#line 77
  goto ldv_49275;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49275;
  }
  ldv_49275: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = 4U;
#line 77
  goto ldv_49282;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___23);
#line 77
  goto ldv_49282;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___23);
#line 77
  goto ldv_49282;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___23);
#line 77
  goto ldv_49282;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49282;
  }
  ldv_49282: 
#line 77
  __gu_p___24 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 77
  goto ldv_49289;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 77
  goto ldv_49289;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_49289;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_49289;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49289;
  }
  ldv_49289: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = 78U;
#line 77
  goto ldv_49296;
  case 2UL: 
#line 77
  put_unaligned_le16(78, __gu_p___25);
#line 77
  goto ldv_49296;
  case 4UL: 
#line 77
  put_unaligned_le32(78U, __gu_p___25);
#line 77
  goto ldv_49296;
  case 8UL: 
#line 77
  put_unaligned_le64(78ULL, __gu_p___25);
#line 77
  goto ldv_49296;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49296;
  }
  ldv_49296: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 4U;
#line 77
  goto ldv_49303;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___26);
#line 77
  goto ldv_49303;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___26);
#line 77
  goto ldv_49303;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___26);
#line 77
  goto ldv_49303;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49303;
  }
  ldv_49303: 
#line 77
  __gu_p___27 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 77
  goto ldv_49310;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 77
  goto ldv_49310;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_49310;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_49310;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49310;
  }
  ldv_49310: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___21 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___28 = (void *)tmp___21;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___28) = 79U;
#line 77
  goto ldv_49317;
  case 2UL: 
#line 77
  put_unaligned_le16(79, __gu_p___28);
#line 77
  goto ldv_49317;
  case 4UL: 
#line 77
  put_unaligned_le32(79U, __gu_p___28);
#line 77
  goto ldv_49317;
  case 8UL: 
#line 77
  put_unaligned_le64(79ULL, __gu_p___28);
#line 77
  goto ldv_49317;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49317;
  }
  ldv_49317: 
#line 77
  tmp___22 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___29 = (void *)tmp___22;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___29) = 4U;
#line 77
  goto ldv_49324;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___29);
#line 77
  goto ldv_49324;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___29);
#line 77
  goto ldv_49324;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___29);
#line 77
  goto ldv_49324;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49324;
  }
  ldv_49324: 
#line 77
  __gu_p___30 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 77
  goto ldv_49331;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 77
  goto ldv_49331;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_49331;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_49331;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49331;
  }
  ldv_49331: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___23 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___31 = (void *)tmp___23;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___31) = 80U;
#line 77
  goto ldv_49338;
  case 2UL: 
#line 77
  put_unaligned_le16(80, __gu_p___31);
#line 77
  goto ldv_49338;
  case 4UL: 
#line 77
  put_unaligned_le32(80U, __gu_p___31);
#line 77
  goto ldv_49338;
  case 8UL: 
#line 77
  put_unaligned_le64(80ULL, __gu_p___31);
#line 77
  goto ldv_49338;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49338;
  }
  ldv_49338: 
#line 77
  tmp___24 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___32 = (void *)tmp___24;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___32) = 4U;
#line 77
  goto ldv_49345;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___32);
#line 77
  goto ldv_49345;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___32);
#line 77
  goto ldv_49345;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___32);
#line 77
  goto ldv_49345;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49345;
  }
  ldv_49345: 
#line 77
  __gu_p___33 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 77
  goto ldv_49352;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 77
  goto ldv_49352;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_49352;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_49352;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_49352;
  }
  ldv_49352: 
#line 77
  tags = tags + 4U;
#line 77
  return (tags);
}
}
#line 108
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 108 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 106
  tmp = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p = (void *)tmp;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p) = 33U;
#line 106
  goto ldv_49440;
  case 2UL: 
#line 106
  put_unaligned_le16(33, __gu_p);
#line 106
  goto ldv_49440;
  case 4UL: 
#line 106
  put_unaligned_le32(33U, __gu_p);
#line 106
  goto ldv_49440;
  case 8UL: 
#line 106
  put_unaligned_le64(33ULL, __gu_p);
#line 106
  goto ldv_49440;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_49440;
  }
  ldv_49440: 
#line 106
  tmp___0 = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p___0 = (void *)tmp___0;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___0) = 4U;
#line 106
  goto ldv_49447;
  case 2UL: 
#line 106
  put_unaligned_le16(4, __gu_p___0);
#line 106
  goto ldv_49447;
  case 4UL: 
#line 106
  put_unaligned_le32(4U, __gu_p___0);
#line 106
  goto ldv_49447;
  case 8UL: 
#line 106
  put_unaligned_le64(4ULL, __gu_p___0);
#line 106
  goto ldv_49447;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_49447;
  }
  ldv_49447: 
#line 106
  __gu_p___1 = (void *)tags;
#line 106
  switch (4UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 106
  goto ldv_49454;
  case 2UL: 
#line 106
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 106
  goto ldv_49454;
  case 4UL: 
#line 106
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 106
  goto ldv_49454;
  case 8UL: 
#line 106
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 106
  goto ldv_49454;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_49454;
  }
  ldv_49454: 
#line 106
  tags = tags + 4U;
#line 106
  return (tags);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 190
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 194
  envp[0] = (char *)"HOME=/";
#line 194
  envp[1] = (char *)"TERM=linux";
#line 194
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 194
  envp[3] = 0;
#line 194
  envp[4] = 0;
#line 194
  envp[5] = 0;
#line 202
  argv[0] = (char *)(& usermode_helper);
#line 202
  argv[1] = cmd;
#line 202
  argv[2] = (char *)(& mb);
#line 202
  argv[3] = 0;
#line 205
  tmp = mdev_to_minor(mdev);
#line 205
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 207
  tmp___0 = get_net_conf(mdev);
#line 207
  if (tmp___0 != 0) {
#line 208
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 210
    afs = (char *)"ipv6";
#line 211
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 213
    goto ldv_49775;
    case 2: 
#line 215
    afs = (char *)"ipv4";
#line 216
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 218
    goto ldv_49775;
    default: 
#line 220
    afs = (char *)"ssocks";
#line 221
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_49775: 
#line 224
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 225
    envp[3] = (char *)(& af);
#line 226
    envp[4] = (char *)(& ad);
#line 227
    put_net_conf(mdev);
  } else {

  }
#line 232
  drbd_md_sync(mdev);
#line 234
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 236
  drbd_bcast_ev_helper(mdev, cmd);
#line 237
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 238
  if (ret != 0) {
#line 239
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 243
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 247
  if (ret < 0) {
#line 248
    ret = 0;
  } else {

  }
#line 250
  return (ret);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 260
  if (*((unsigned int *)mdev + 499UL) != 49152U) {
#line 260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            260);
  } else {

  }
#line 262
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 262
  if (tmp != 0) {
#line 263
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 264
    put_ldev(mdev);
  } else {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 267
    nps = (enum drbd_disk_state )mdev->state.ldv_37735.pdsk;
#line 268
    goto out;
  }
#line 271
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 273
  switch ((r >> 8) & 255) {
  case 3: 
#line 275
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 276
  nps = D_INCONSISTENT;
#line 277
  goto ldv_49787;
  case 4: 
#line 279
  ex_to_string = (char *)"peer was fenced";
#line 280
  nps = D_OUTDATED;
#line 281
  goto ldv_49787;
  case 5: ;
#line 283
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 16U) {
#line 285
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 286
    nps = D_OUTDATED;
  } else {
#line 288
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 289
    nps = (enum drbd_disk_state )mdev->state.ldv_37735.pdsk;
  }
#line 291
  goto ldv_49787;
  case 6: 
#line 295
  ex_to_string = (char *)"peer is active";
#line 296
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 297
  nps = D_UNKNOWN;
#line 298
  val.i = 0U;
#line 298
  val.ldv_37735.disk = 5U;
#line 298
  mask.i = 0U;
#line 298
  mask.ldv_37735.disk = 15U;
#line 298
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 299
  goto ldv_49787;
  case 7: ;
#line 301
  if ((unsigned int )fp != 2U) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 303
  ex_to_string = (char *)"peer was stonithed";
#line 304
  nps = D_OUTDATED;
#line 305
  goto ldv_49787;
  default: 
#line 308
  nps = D_UNKNOWN;
#line 309
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 310
  return (nps);
  }
  ldv_49787: 
#line 313
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 317
  if ((unsigned int )*((unsigned char *)mdev + 1998UL) != 0U && (unsigned int )nps > 5U) {
#line 320
    val___0.i = 0U;
#line 320
    val___0.ldv_37735.susp_fen = 0U;
#line 320
    mask___0.i = 0U;
#line 320
    mask___0.ldv_37735.susp_fen = 1U;
#line 320
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 323
  return (nps);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 328
  mdev = (struct drbd_conf *)data;
#line 331
  nps = drbd_try_outdate_peer(mdev);
#line 332
  val.i = 0U;
#line 332
  val.ldv_37735.pdsk = (unsigned char )nps;
#line 332
  mask.i = 0U;
#line 332
  mask.ldv_37735.pdsk = 15U;
#line 332
  drbd_request_state(mdev, mask, val);
#line 334
  return (0);
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 341
  tmp = mdev_to_minor(mdev);
#line 341
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 341
  __k = tmp___0;
#line 341
  tmp___1 = IS_ERR((void const   *)__k);
#line 341
  if (tmp___1 == 0L) {
#line 341
    wake_up_process(__k);
  } else {

  }
#line 341
  opa = __k;
#line 342
  tmp___2 = IS_ERR((void const   *)opa);
#line 342
  if (tmp___2 != 0L) {
#line 343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 344
  return;
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 348
  max_tries = 4;
#line 349
  r = 0;
#line 350
  try = 0;
#line 351
  forced = 0;
#line 355
  if ((unsigned int )new_role == 1U) {
#line 356
    request_ping(mdev);
  } else {

  }
#line 358
  ldv_mutex_lock_193(& mdev->state_mutex);
#line 360
  mask.i = 0U;
#line 360
  mask.ldv_37735.role = 3U;
#line 361
  val.i = 0U;
#line 361
  val.ldv_37735.role = (unsigned char )new_role;
#line 363
  goto ldv_49828;
  ldv_49831: 
#line 364
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 368
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 369
    val.ldv_37735.pdsk = 0U;
#line 370
    mask.ldv_37735.pdsk = 0U;
#line 371
    goto ldv_49828;
  } else {

  }
#line 374
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_37735.disk <= 7 && (int )mdev->state.ldv_37735.disk > 3)) {
#line 377
    mask.ldv_37735.disk = 15U;
#line 378
    val.ldv_37735.disk = 8U;
#line 379
    forced = 1;
#line 380
    goto ldv_49828;
  } else {

  }
#line 383
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1997UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 385
    if (*((unsigned int *)mdev + 499UL) != 49152U) {
#line 385
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              385);
    } else {

    }
#line 386
    nps = drbd_try_outdate_peer(mdev);
#line 388
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 389
      val.ldv_37735.disk = 8U;
#line 390
      mask.ldv_37735.disk = 15U;
    } else {

    }
#line 393
    val.ldv_37735.pdsk = (unsigned char )nps;
#line 394
    mask.ldv_37735.pdsk = 15U;
#line 396
    goto ldv_49828;
  } else {

  }
#line 399
  if (r == 2) {
#line 400
    goto fail;
  } else {

  }
#line 401
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 402
    nps = drbd_try_outdate_peer(mdev);
#line 404
    if (force != 0 && (unsigned int )nps > 5U) {
#line 405
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 406
      nps = D_OUTDATED;
    } else {

    }
#line 409
    mask.ldv_37735.pdsk = 15U;
#line 410
    val.ldv_37735.pdsk = (unsigned char )nps;
#line 412
    goto ldv_49828;
  } else {

  }
#line 414
  if (r == -1) {
#line 417
    tmp = get_current();
#line 417
    tmp->state = 1L;
#line 418
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 419
    if (try < max_tries) {
#line 420
      try = max_tries + -1;
    } else {

    }
#line 421
    goto ldv_49828;
  } else {

  }
#line 423
  if (r <= 0) {
#line 424
    r = _drbd_request_state(mdev, mask, val, 6);
#line 426
    if (r <= 0) {
#line 427
      goto fail;
    } else {

    }
  } else {

  }
#line 429
  goto ldv_49830;
  ldv_49828: 
#line 363
  tmp___0 = try;
#line 363
  try = try + 1;
#line 363
  if (tmp___0 < max_tries) {
#line 364
    goto ldv_49831;
  } else {

  }
  ldv_49830: ;
#line 432
  if (r <= 0) {
#line 433
    goto fail;
  } else {

  }
#line 435
  if (forced != 0) {
#line 436
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 439
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 439
  if (tmp___1 == 0) {
#line 439
    goto ldv_49832;
  } else {

  }
#line 439
  tmp___2 = get_current();
#line 439
  __wait.flags = 0U;
#line 439
  __wait.private = (void *)tmp___2;
#line 439
  __wait.func = & autoremove_wake_function;
#line 439
  __wait.task_list.next = & __wait.task_list;
#line 439
  __wait.task_list.prev = & __wait.task_list;
  ldv_49835: 
#line 439
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 439
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 439
  if (tmp___3 == 0) {
#line 439
    goto ldv_49834;
  } else {

  }
#line 439
  schedule();
#line 439
  goto ldv_49835;
  ldv_49834: 
#line 439
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49832: ;
#line 441
  if ((unsigned int )new_role == 2U) {
#line 442
    set_disk_ro(mdev->vdisk, 1);
#line 443
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 443
    if (tmp___4 != 0) {
#line 444
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 445
      put_ldev(mdev);
    } else {

    }
  } else {
#line 448
    tmp___5 = get_net_conf(mdev);
#line 448
    if (tmp___5 != 0) {
#line 449
      (mdev->net_conf)->want_lose = 0U;
#line 450
      put_net_conf(mdev);
    } else {

    }
#line 452
    set_disk_ro(mdev->vdisk, 0);
#line 453
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 453
    if (tmp___6 != 0) {
#line 454
      if ((((int )mdev->state.ldv_37735.conn <= 9 || (int )mdev->state.ldv_37735.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 457
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 459
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 460
      put_ldev(mdev);
    } else {

    }
  }
#line 464
  if ((unsigned int )new_role == 2U) {
#line 464
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 464
    if (tmp___7 != 0) {
#line 465
      drbd_al_to_on_disk_bm(mdev);
#line 466
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 469
  if ((int )mdev->state.ldv_37735.conn > 8) {
#line 471
    if (forced != 0) {
#line 472
      drbd_send_uuids(mdev);
    } else {

    }
#line 473
    drbd_send_state(mdev);
  } else {

  }
#line 476
  drbd_md_sync(mdev);
#line 478
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 480
  ldv_mutex_unlock_194(& mdev->state_mutex);
#line 481
  return (r);
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 488
  if ((unsigned int )minor >= minor_count) {
#line 489
    return (0);
  } else {

  }
#line 491
  mdev = minor_to_mdev((unsigned int )minor);
#line 493
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 494
    disk = 0;
#line 495
    mdev = drbd_new_device((unsigned int )minor);
#line 497
    spin_lock_irq(& drbd_pp_lock);
#line 498
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 499
      *(minor_table + (unsigned long )minor) = mdev;
#line 500
      disk = mdev->vdisk;
#line 501
      mdev = 0;
    } else {

    }
#line 503
    spin_unlock_irq(& drbd_pp_lock);
#line 505
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 508
      add_disk(disk);
    } else {
#line 510
      drbd_free_mdev(mdev);
    }
#line 512
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 515
  return (mdev);
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 523
  memset((void *)(& primary_args), 0, 4UL);
#line 524
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 524
  if (tmp == 0) {
#line 525
    reply->ret_code = 126;
#line 526
    return (0);
  } else {

  }
#line 529
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 532
  return (0);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 538
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 540
  return (0);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 548
  md_size_sect = 0UL;
#line 549
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 552
  bdev->md.md_size_sect = 262144U;
#line 553
  tmp = drbd_md_ss__(mdev, bdev);
#line 553
  bdev->md.md_offset = (u64 )tmp;
#line 554
  bdev->md.al_offset = 8;
#line 555
  bdev->md.bm_offset = 72;
#line 556
  goto ldv_49859;
  case -2: 
#line 559
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 559
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 560
  bdev->md.md_offset = 0ULL;
#line 561
  bdev->md.al_offset = 8;
#line 562
  bdev->md.bm_offset = 72;
#line 563
  goto ldv_49859;
  case -1: ;
  case -3: 
#line 566
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 566
  bdev->md.md_offset = (u64 )tmp___1;
#line 568
  bdev->md.al_offset = -64;
#line 570
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 571
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 572
  md_size_sect = md_size_sect >> 15;
#line 573
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 577
  md_size_sect = md_size_sect + 72UL;
#line 579
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 581
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 582
  goto ldv_49859;
  }
  ldv_49859: ;
#line 585
  return;
}
}
#line 586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 589
  units[0] = 75;
#line 589
  units[1] = 77;
#line 589
  units[2] = 71;
#line 589
  units[3] = 84;
#line 589
  units[4] = 80;
#line 589
  units[5] = 69;
#line 590
  base = 0;
#line 591
  goto ldv_49870;
  ldv_49869: 
#line 593
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 594
  base = base + 1;
  ldv_49870: ;
#line 591
  if (size > 9999ULL) {
#line 592
    goto ldv_49869;
  } else {

  }
#line 596
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 598
  return (buf);
}
}
#line 614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 616
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 617
  tmp = is_susp(mdev->state);
#line 617
  if (tmp != 0) {
#line 618
    return;
  } else {

  }
#line 619
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 619
  if (tmp___0 == 0) {
#line 619
    goto ldv_49875;
  } else {

  }
#line 619
  tmp___1 = get_current();
#line 619
  __wait.flags = 0U;
#line 619
  __wait.private = (void *)tmp___1;
#line 619
  __wait.func = & autoremove_wake_function;
#line 619
  __wait.task_list.next = & __wait.task_list;
#line 619
  __wait.task_list.prev = & __wait.task_list;
  ldv_49878: 
#line 619
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 619
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 619
  if (tmp___2 == 0) {
#line 619
    goto ldv_49877;
  } else {

  }
#line 619
  schedule();
#line 619
  goto ldv_49878;
  ldv_49877: 
#line 619
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49875: ;
#line 622
  return;
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 624
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 625
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 626
  return;
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 643
  rv = 0;
#line 654
  drbd_suspend_io(mdev);
#line 657
  tmp = lc_try_lock(mdev->act_log);
#line 657
  if (tmp != 0) {
#line 657
    goto ldv_49894;
  } else {

  }
#line 657
  tmp___0 = get_current();
#line 657
  __wait.flags = 0U;
#line 657
  __wait.private = (void *)tmp___0;
#line 657
  __wait.func = & autoremove_wake_function;
#line 657
  __wait.task_list.next = & __wait.task_list;
#line 657
  __wait.task_list.prev = & __wait.task_list;
  ldv_49897: 
#line 657
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 657
  tmp___1 = lc_try_lock(mdev->act_log);
#line 657
  if (tmp___1 != 0) {
#line 657
    goto ldv_49896;
  } else {

  }
#line 657
  schedule();
#line 657
  goto ldv_49897;
  ldv_49896: 
#line 657
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49894: 
#line 659
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 660
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 661
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 664
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 666
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 668
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 668
  if (tmp___5 != size) {
#line 668
    goto _L;
  } else {
#line 668
    tmp___6 = drbd_bm_capacity(mdev);
#line 668
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 671
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 672
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 672
      if (tmp___3 != 0L) {
#line 674
        tmp___2 = drbd_bm_capacity(mdev);
#line 674
        size = tmp___2 >> 1;
#line 675
        if (size == 0UL) {
#line 676
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 679
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 683
        rv = dev_size_error;
      } else {

      }
#line 686
      drbd_set_my_capacity(mdev, size);
#line 687
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 688
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 688
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 691
  if ((int )rv == -1) {
#line 692
    goto out;
  } else {

  }
#line 694
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 696
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 696
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 699
  if (la_size_changed != 0 || md_moved != 0) {
#line 700
    drbd_al_shrink(mdev);
#line 701
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 704
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 704
    rv = (enum determine_dev_size )tmp___8;
#line 705
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 708
  if (size > la_size) {
#line 709
    rv = grew;
  } else {

  }
#line 710
  if (size < la_size) {
#line 711
    rv = shrunk;
  } else {

  }
  out: 
#line 713
  lc_unlock(mdev->act_log);
#line 714
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 715
  drbd_resume_io(mdev);
#line 717
  return (rv);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 723
  p_size = mdev->p_size;
#line 724
  la_size = (sector_t )bdev->md.la_size_sect;
#line 726
  u_size = (sector_t )bdev->dc.disk_size;
#line 727
  size = 0UL;
#line 729
  m_size = drbd_get_max_capacity___1(bdev);
#line 731
  if ((int )mdev->state.ldv_37735.conn <= 9 && assume_peer_has_space != 0) {
#line 732
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 733
    p_size = m_size;
  } else {

  }
#line 736
  if (p_size != 0UL && m_size != 0UL) {
#line 737
    __min1 = p_size;
#line 737
    __min2 = m_size;
#line 737
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 739
  if (la_size != 0UL) {
#line 740
    size = la_size;
#line 741
    if (m_size != 0UL && m_size < size) {
#line 742
      size = m_size;
    } else {

    }
#line 743
    if (p_size != 0UL && p_size < size) {
#line 744
      size = p_size;
    } else {

    }
  } else {
#line 746
    if (m_size != 0UL) {
#line 747
      size = m_size;
    } else {

    }
#line 748
    if (p_size != 0UL) {
#line 749
      size = p_size;
    } else {

    }
  }
#line 753
  if (size == 0UL) {
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 756
  if (u_size != 0UL) {
#line 757
    if (u_size > size) {
#line 758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 761
      size = u_size;
    }
  } else {

  }
#line 764
  return (size);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 782
  _b = mdev->sync_conf.al_extents <= 6;
#line 782
  if (_b != 0) {
#line 782
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            782);
  } else {

  }
#line 782
  if (_b != 0) {
#line 783
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 785
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 787
    return (0);
  } else {

  }
#line 789
  in_use = 0U;
#line 790
  t = mdev->act_log;
#line 791
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 794
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 795
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 796
    return (-12);
  } else {

  }
#line 798
  spin_lock_irq(& mdev->al_lock);
#line 799
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 800
    i = 0;
#line 800
    goto ldv_49925;
    ldv_49924: 
#line 801
    e = lc_element_by_index(t, (unsigned int )i);
#line 802
    if (e->refcnt != 0U) {
#line 803
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 805
    in_use = e->refcnt + in_use;
#line 800
    i = i + 1;
    ldv_49925: ;
#line 800
    if ((unsigned int )i < t->nr_elements) {
#line 801
      goto ldv_49924;
    } else {

    }

  } else {

  }
#line 808
  if (in_use == 0U) {
#line 809
    mdev->act_log = n;
  } else {

  }
#line 810
  spin_unlock_irq(& mdev->al_lock);
#line 811
  if (in_use != 0U) {
#line 812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 813
    lc_destroy(n);
#line 814
    return (-16);
  } else
#line 816
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 817
    lc_destroy(t);
  } else {

  }
#line 819
  drbd_md_mark_dirty(mdev);
#line 820
  return (0);
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 825
  q = mdev->rq_queue;
#line 826
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 827
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 829
  tmp = queue_max_sectors(b);
#line 829
  tmp___0 = queue_logical_block_size(b);
#line 829
  _min1 = tmp * (unsigned int )tmp___0;
#line 829
  _min2 = max_seg_s;
#line 829
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 831
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 832
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 833
  blk_queue_max_segment_size(q, max_seg_s);
#line 834
  blk_queue_logical_block_size(q, 512);
#line 835
  blk_queue_segment_boundary(q, 4095UL);
#line 836
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 838
  tmp___1 = queue_max_segment_size(q);
#line 838
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 840
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 841
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 844
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 846
  return;
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 857
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 857
  if (tmp == 0) {
#line 857
    goto ldv_49940;
  } else {

  }
#line 857
  tmp___0 = get_current();
#line 857
  __wait.flags = 0U;
#line 857
  __wait.private = (void *)tmp___0;
#line 857
  __wait.func = & autoremove_wake_function;
#line 857
  __wait.task_list.next = & __wait.task_list;
#line 857
  __wait.task_list.prev = & __wait.task_list;
  ldv_49943: 
#line 857
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 857
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 857
  if (tmp___1 == 0) {
#line 857
    goto ldv_49942;
  } else {

  }
#line 857
  schedule();
#line 857
  goto ldv_49943;
  ldv_49942: 
#line 857
  finish_wait(& mdev->state_wait, & __wait);
  ldv_49940: 
#line 858
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 858
  if (tmp___2 == 0) {
#line 858
    goto ldv_49944;
  } else {

  }
#line 858
  tmp___3 = get_current();
#line 858
  __wait___0.flags = 0U;
#line 858
  __wait___0.private = (void *)tmp___3;
#line 858
  __wait___0.func = & autoremove_wake_function;
#line 858
  __wait___0.task_list.next = & __wait___0.task_list;
#line 858
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49947: 
#line 858
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 858
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 858
  if (tmp___4 == 0) {
#line 858
    goto ldv_49946;
  } else {

  }
#line 858
  schedule();
#line 858
  goto ldv_49947;
  ldv_49946: 
#line 858
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_49944: 
#line 859
  drbd_thread_start(& mdev->worker);
#line 860
  drbd_flush_workqueue(mdev);
#line 861
  return;
}
}
#line 866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 868
  spin_lock_irq(& mdev->req_lock);
#line 869
  if (((unsigned int )*((unsigned char *)mdev + 1997UL) == 0U && (unsigned int )*((unsigned short *)mdev + 998UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1996UL) == 2U) {
#line 872
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 873
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 875
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 876
  spin_unlock_irq(& mdev->req_lock);
#line 877
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 878
  return;
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 883
  s = 0;
#line 885
  tmp = lc_try_lock(mdev->act_log);
#line 885
  if (tmp != 0) {
#line 886
    drbd_al_shrink(mdev);
#line 887
    lc_unlock(mdev->act_log);
  } else {
#line 889
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 890
    return;
  }
#line 893
  spin_lock_irq(& mdev->req_lock);
#line 894
  if ((int )mdev->state.ldv_37735.conn <= 9) {
#line 895
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 895
    s = tmp___0 == 0;
  } else {

  }
#line 897
  spin_unlock_irq(& mdev->req_lock);
#line 899
  if (s != 0) {
#line 900
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 901
  return;
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  unsigned int max_seg_s ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned short tmp___21 ;
  struct page *page ;
  struct page *tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  sector_t tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 912
  nbc = 0;
#line 914
  resync_lru = 0;
#line 918
  cp_discovered = 0;
#line 921
  drbd_reconfig_start(mdev);
#line 924
  if ((int )mdev->state.ldv_37735.disk > 0) {
#line 925
    retcode = ERR_DISK_CONFIGURED;
#line 926
    goto fail;
  } else {

  }
#line 932
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 932
  if (tmp == 0) {
#line 932
    goto ldv_49974;
  } else {

  }
#line 932
  tmp___0 = get_current();
#line 932
  __wait.flags = 0U;
#line 932
  __wait.private = (void *)tmp___0;
#line 932
  __wait.func = & autoremove_wake_function;
#line 932
  __wait.task_list.next = & __wait.task_list;
#line 932
  __wait.task_list.prev = & __wait.task_list;
  ldv_49977: 
#line 932
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 932
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 932
  if (tmp___1 == 0) {
#line 932
    goto ldv_49976;
  } else {

  }
#line 932
  schedule();
#line 932
  goto ldv_49977;
  ldv_49976: 
#line 932
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49974: 
#line 935
  tmp___2 = kzalloc(392UL, 208U);
#line 935
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 936
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 937
    retcode = ERR_NOMEM;
#line 938
    goto fail;
  } else {

  }
#line 941
  nbc->dc.disk_size = 0ULL;
#line 942
  nbc->dc.on_io_error = 0;
#line 943
  nbc->dc.fencing = 0;
#line 944
  nbc->dc.max_bio_bvecs = 0;
#line 946
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 946
  if (tmp___3 == 0) {
#line 947
    retcode = ERR_MANDATORY_TAG;
#line 948
    goto fail;
  } else {

  }
#line 951
  if (nbc->dc.meta_dev_idx < -3) {
#line 952
    retcode = ERR_MD_IDX_INVALID;
#line 953
    goto fail;
  } else {

  }
#line 956
  tmp___4 = get_net_conf(mdev);
#line 956
  if (tmp___4 != 0) {
#line 957
    prot = (mdev->net_conf)->wire_protocol;
#line 958
    put_net_conf(mdev);
#line 959
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 960
      retcode = ERR_STONITH_AND_PROT_A;
#line 961
      goto fail;
    } else {

    }
  } else {

  }
#line 965
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 967
  tmp___6 = IS_ERR((void const   *)bdev);
#line 967
  if (tmp___6 != 0L) {
#line 968
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 970
    retcode = ERR_OPEN_DISK;
#line 971
    goto fail;
  } else {

  }
#line 973
  nbc->backing_bdev = bdev;
#line 983
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 987
  tmp___8 = IS_ERR((void const   *)bdev);
#line 987
  if (tmp___8 != 0L) {
#line 988
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 990
    retcode = ERR_OPEN_MD_DISK;
#line 991
    goto fail;
  } else {

  }
#line 993
  nbc->md_bdev = bdev;
#line 995
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 998
    retcode = ERR_MD_IDX_INVALID;
#line 999
    goto fail;
  } else {

  }
#line 1002
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1005
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1006
    retcode = ERR_NOMEM;
#line 1007
    goto fail;
  } else {

  }
#line 1011
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1013
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1013
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1014
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1017
    retcode = ERR_DISK_TO_SMALL;
#line 1018
    goto fail;
  } else {

  }
#line 1021
  if (nbc->dc.meta_dev_idx < 0) {
#line 1022
    max_possible_sectors = 34359738368UL;
#line 1024
    min_md_device_sectors = 2048UL;
  } else {
#line 1026
    max_possible_sectors = 8587575296UL;
#line 1027
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1030
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1030
  if (tmp___11 < min_md_device_sectors) {
#line 1031
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1032
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1035
    goto fail;
  } else {

  }
#line 1040
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1040
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1040
  if (tmp___12 < tmp___13) {
#line 1042
    retcode = ERR_DISK_TO_SMALL;
#line 1043
    goto fail;
  } else {

  }
#line 1046
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1048
  if (nbc->known_size > max_possible_sectors) {
#line 1049
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1052
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1053
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1057
  drbd_suspend_io(mdev);
#line 1059
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1059
  if (tmp___14 == 0) {
#line 1059
    goto ldv_49979;
  } else {
#line 1059
    tmp___15 = is_susp(mdev->state);
#line 1059
    if (tmp___15 != 0) {
#line 1059
      goto ldv_49979;
    } else {

    }
  }
#line 1059
  tmp___16 = get_current();
#line 1059
  __wait___0.flags = 0U;
#line 1059
  __wait___0.private = (void *)tmp___16;
#line 1059
  __wait___0.func = & autoremove_wake_function;
#line 1059
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1059
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49982: 
#line 1059
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1059
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1059
  if (tmp___17 == 0) {
#line 1059
    goto ldv_49981;
  } else {
#line 1059
    tmp___18 = is_susp(mdev->state);
#line 1059
    if (tmp___18 != 0) {
#line 1059
      goto ldv_49981;
    } else {

    }
  }
#line 1059
  schedule();
#line 1059
  goto ldv_49982;
  ldv_49981: 
#line 1059
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_49979: 
#line 1061
  drbd_flush_workqueue(mdev);
#line 1063
  val.i = 0U;
#line 1063
  val.ldv_37735.disk = 1U;
#line 1063
  mask.i = 0U;
#line 1063
  mask.ldv_37735.disk = 15U;
#line 1063
  tmp___19 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1063
  retcode = (enum drbd_ret_codes )tmp___19;
#line 1064
  drbd_resume_io(mdev);
#line 1065
  if ((unsigned int )retcode == 0U) {
#line 1066
    goto fail;
  } else {

  }
#line 1068
  tmp___20 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1068
  if (tmp___20 == 0) {
#line 1069
    goto force_diskless;
  } else {

  }
#line 1071
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1074
  tmp___21 = bdev_logical_block_size(nbc->md_bdev);
#line 1074
  logical_block_size = (int )tmp___21;
#line 1075
  if (logical_block_size == 0) {
#line 1076
    logical_block_size = 512;
  } else {

  }
#line 1078
  if (logical_block_size != 512) {
#line 1079
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1080
      tmp___22 = alloc_pages(16U, 0U);
#line 1080
      page = tmp___22;
#line 1081
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1082
        goto force_diskless_dec;
      } else {

      }
#line 1084
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1086
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1088
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1092
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1093
    tmp___23 = drbd_bm_init(mdev);
#line 1093
    if (tmp___23 != 0) {
#line 1094
      retcode = ERR_NOMEM;
#line 1095
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1099
  tmp___24 = drbd_md_read(mdev, nbc);
#line 1099
  retcode = (enum drbd_ret_codes )tmp___24;
#line 1100
  if ((unsigned int )retcode != 101U) {
#line 1101
    goto force_diskless_dec;
  } else {

  }
#line 1103
  if (((int )mdev->state.ldv_37735.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1106
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1108
    retcode = ERR_DATA_NOT_CURRENT;
#line 1109
    goto force_diskless_dec;
  } else {

  }
#line 1113
  tmp___25 = drbd_check_al_size(mdev);
#line 1113
  if (tmp___25 != 0) {
#line 1114
    retcode = ERR_NOMEM;
#line 1115
    goto force_diskless_dec;
  } else {

  }
#line 1119
  tmp___26 = drbd_md_test_flag(nbc, 1);
#line 1119
  if (tmp___26 != 0) {
#line 1119
    tmp___27 = drbd_new_dev_size(mdev, nbc, 0);
#line 1119
    if ((unsigned long long )tmp___27 < nbc->md.la_size_sect) {
#line 1121
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1122
      retcode = ERR_DISK_TO_SMALL;
#line 1123
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1126
  tmp___28 = drbd_al_read_log(mdev, nbc);
#line 1126
  if (tmp___28 == 0) {
#line 1127
    retcode = ERR_IO_MD_DISK;
#line 1128
    goto force_diskless_dec;
  } else {

  }
#line 1133
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1134
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1136
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1142
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1142);
  } else {

  }
#line 1143
  mdev->ldev = nbc;
#line 1144
  mdev->resync = resync_lru;
#line 1145
  nbc = 0;
#line 1146
  resync_lru = 0;
#line 1148
  mdev->write_ordering = WO_bdev_flush;
#line 1149
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1151
  tmp___29 = drbd_md_test_flag(mdev->ldev, 64);
#line 1151
  if (tmp___29 != 0) {
#line 1152
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1154
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1156
  tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1156
  if (tmp___30 != 0 && ((unsigned int )*((unsigned char *)mdev + 1996UL) != 1U || (unsigned int )*((unsigned char *)mdev + 1998UL) == 0U)) {
#line 1158
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1159
    cp_discovered = 1;
  } else {

  }
#line 1162
  mdev->send_cnt = 0U;
#line 1163
  mdev->recv_cnt = 0U;
#line 1164
  mdev->read_cnt = 0U;
#line 1165
  mdev->writ_cnt = 0U;
#line 1167
  max_seg_s = 131072U;
#line 1168
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 160U) {
#line 1173
    if (mdev->agreed_pro_version <= 93) {
#line 1174
      max_seg_s = queue_max_segment_size(mdev->rq_queue);
    } else
#line 1175
    if (mdev->agreed_pro_version == 94) {
#line 1176
      max_seg_s = 32768U;
    } else {

    }
  } else {

  }
#line 1180
  drbd_setup_queue_param(mdev, max_seg_s);
#line 1196
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1197
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) != 1U) {
#line 1197
    tmp___31 = drbd_md_test_flag(mdev->ldev, 2);
#line 1197
    if (tmp___31 != 0) {
#line 1197
      tmp___32 = drbd_md_test_flag(mdev->ldev, 4);
#line 1197
      if (tmp___32 == 0) {
#line 1200
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1202
  dd = drbd_determin_dev_size(mdev, 0);
#line 1203
  if ((int )dd == -1) {
#line 1204
    retcode = ERR_NOMEM_BITMAP;
#line 1205
    goto force_diskless_dec;
  } else
#line 1206
  if ((int )dd == 2) {
#line 1207
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1209
  tmp___35 = drbd_md_test_flag(mdev->ldev, 8);
#line 1209
  if (tmp___35 != 0) {
#line 1210
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1212
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1212
    if (tmp___33 != 0) {
#line 1213
      retcode = ERR_IO_MD_DISK;
#line 1214
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1217
    tmp___34 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1217
    if (tmp___34 < 0) {
#line 1218
      retcode = ERR_IO_MD_DISK;
#line 1219
      goto force_diskless_dec;
    } else {

    }
  }
#line 1223
  if (cp_discovered != 0) {
#line 1224
    drbd_al_apply_to_bm(mdev);
#line 1225
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1228
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1228
  tmp___37 = drbd_bm_bits(mdev);
#line 1228
  if (tmp___36 == tmp___37) {
#line 1229
    drbd_suspend_al(mdev);
  } else {

  }
#line 1231
  spin_lock_irq(& mdev->req_lock);
#line 1232
  os = mdev->state;
#line 1233
  ns.i = os.i;
#line 1239
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1239
  if (tmp___39 != 0) {
#line 1240
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1240
    if (tmp___38 != 0) {
#line 1241
      ns.ldv_37735.disk = 7U;
    } else {
#line 1243
      ns.ldv_37735.disk = 5U;
    }
  } else {
#line 1245
    ns.ldv_37735.disk = 4U;
  }
#line 1248
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1248
  if (tmp___40 != 0) {
#line 1249
    ns.ldv_37735.pdsk = 5U;
  } else {

  }
#line 1251
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1253
    ns.ldv_37735.disk = 8U;
  } else {

  }
#line 1262
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 160U) {
#line 1263
    mdev->new_state_tmp.i = ns.i;
#line 1264
    ns.i = os.i;
#line 1265
    ns.ldv_37735.disk = 3U;
#line 1270
    kfree((void const   *)mdev->p_uuid);
#line 1271
    mdev->p_uuid = 0;
  } else {

  }
#line 1274
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1275
  ns = mdev->state;
#line 1276
  spin_unlock_irq(& mdev->req_lock);
#line 1278
  if (rv <= 0) {
#line 1279
    goto force_diskless_dec;
  } else {

  }
#line 1281
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 1282
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1284
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1286
  drbd_md_mark_dirty(mdev);
#line 1287
  drbd_md_sync(mdev);
#line 1289
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1290
  put_ldev(mdev);
#line 1291
  reply->ret_code = (int )retcode;
#line 1292
  drbd_reconfig_done(mdev);
#line 1293
  return (0);
  force_diskless_dec: 
#line 1296
  put_ldev(mdev);
  force_diskless: 
#line 1298
  val___0.i = 0U;
#line 1298
  val___0.ldv_37735.disk = 2U;
#line 1298
  mask___0.i = 0U;
#line 1298
  mask___0.ldv_37735.disk = 15U;
#line 1298
  drbd_force_state(mdev, mask___0, val___0);
#line 1299
  drbd_md_sync(mdev);
  fail: ;
#line 1301
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1302
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1303
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1305
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1306
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1308
    kfree((void const   *)nbc);
  } else {

  }
#line 1310
  lc_destroy(resync_lru);
#line 1312
  reply->ret_code = (int )retcode;
#line 1313
  drbd_reconfig_done(mdev);
#line 1314
  return (0);
}
}
#line 1322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1325
  drbd_suspend_io(mdev);
#line 1326
  val.i = 0U;
#line 1326
  val.ldv_37735.disk = 0U;
#line 1326
  mask.i = 0U;
#line 1326
  mask.ldv_37735.disk = 15U;
#line 1326
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1327
  if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 0U) {
#line 1328
    tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1328
    if (tmp == 0) {
#line 1328
      goto ldv_50003;
    } else {

    }
#line 1328
    tmp___0 = get_current();
#line 1328
    __wait.flags = 0U;
#line 1328
    __wait.private = (void *)tmp___0;
#line 1328
    __wait.func = & autoremove_wake_function;
#line 1328
    __wait.task_list.next = & __wait.task_list;
#line 1328
    __wait.task_list.prev = & __wait.task_list;
    ldv_50006: 
#line 1328
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1328
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1328
    if (tmp___1 == 0) {
#line 1328
      goto ldv_50005;
    } else {

    }
#line 1328
    schedule();
#line 1328
    goto ldv_50006;
    ldv_50005: 
#line 1328
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_50003: ;
  } else {

  }
#line 1329
  drbd_resume_io(mdev);
#line 1330
  return (0);
}
}
#line 1333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  int tmp___16 ;

  {
#line 1338
  new_conf = 0;
#line 1339
  tfm = 0;
#line 1340
  integrity_w_tfm = 0;
#line 1341
  integrity_r_tfm = 0;
#line 1342
  new_tl_hash = 0;
#line 1343
  new_ee_hash = 0;
#line 1346
  int_dig_out = 0;
#line 1347
  int_dig_in = 0;
#line 1348
  int_dig_vv = 0;
#line 1351
  drbd_reconfig_start(mdev);
#line 1353
  if ((int )mdev->state.ldv_37735.conn > 0) {
#line 1354
    retcode = ERR_NET_CONFIGURED;
#line 1355
    goto fail;
  } else {

  }
#line 1359
  tmp = kzalloc(532UL, 208U);
#line 1359
  new_conf = (struct net_conf *)tmp;
#line 1360
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1361
    retcode = ERR_NOMEM;
#line 1362
    goto fail;
  } else {

  }
#line 1365
  new_conf->timeout = 60;
#line 1366
  new_conf->try_connect_int = 10;
#line 1367
  new_conf->ping_int = 10;
#line 1368
  new_conf->max_epoch_size = 2048;
#line 1369
  new_conf->max_buffers = 2048;
#line 1370
  new_conf->unplug_watermark = 128;
#line 1371
  new_conf->sndbuf_size = 0;
#line 1372
  new_conf->rcvbuf_size = 0;
#line 1373
  new_conf->ko_count = 0;
#line 1374
  new_conf->after_sb_0p = 0;
#line 1375
  new_conf->after_sb_1p = 0;
#line 1376
  new_conf->after_sb_2p = 0;
#line 1377
  new_conf->want_lose = 0U;
#line 1378
  new_conf->two_primaries = 0U;
#line 1379
  new_conf->wire_protocol = 3;
#line 1380
  new_conf->ping_timeo = 5;
#line 1381
  new_conf->rr_conflict = 0;
#line 1383
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1383
  if (tmp___0 == 0) {
#line 1384
    retcode = ERR_MANDATORY_TAG;
#line 1385
    goto fail;
  } else {

  }
#line 1388
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1390
    retcode = ERR_NOT_PROTO_C;
#line 1391
    goto fail;
  } else {

  }
#line 1394
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1394
  if (tmp___1 != 0) {
#line 1395
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1396
    put_ldev(mdev);
#line 1397
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1398
      retcode = ERR_STONITH_AND_PROT_A;
#line 1399
      goto fail;
    } else {

    }
  } else {

  }
#line 1403
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1404
    retcode = ERR_DISCARD;
#line 1405
    goto fail;
  } else {

  }
#line 1408
  retcode = NO_ERROR;
#line 1410
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1411
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1412
  i = 0;
#line 1412
  goto ldv_50033;
  ldv_50032: 
#line 1413
  odev = minor_to_mdev((unsigned int )i);
#line 1414
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1415
    goto ldv_50031;
  } else {

  }
#line 1416
  tmp___4 = get_net_conf(odev);
#line 1416
  if (tmp___4 != 0) {
#line 1417
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1418
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1418
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1418
      if (tmp___2 == 0) {
#line 1420
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1422
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1423
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1423
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1423
      if (tmp___3 == 0) {
#line 1425
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1427
    put_net_conf(odev);
#line 1428
    if ((unsigned int )retcode != 101U) {
#line 1429
      goto fail;
    } else {

    }
  } else {

  }
  ldv_50031: 
#line 1412
  i = i + 1;
  ldv_50033: ;
#line 1412
  if ((unsigned int )i < minor_count) {
#line 1413
    goto ldv_50032;
  } else {

  }

#line 1433
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1434
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1436
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1437
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1437
    if (tmp___5 != 0L) {
#line 1438
      tfm = 0;
#line 1439
      retcode = ERR_AUTH_ALG;
#line 1440
      goto fail;
    } else {

    }
#line 1443
    tmp___6 = crypto_hash_tfm(tfm);
#line 1443
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1443
    if (tmp___7 == 0) {
#line 1444
      retcode = ERR_AUTH_ALG_ND;
#line 1445
      goto fail;
    } else {

    }
  } else {

  }
#line 1449
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1450
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1451
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1451
    if (tmp___8 != 0L) {
#line 1452
      integrity_w_tfm = 0;
#line 1453
      retcode = ERR_INTEGRITY_ALG;
#line 1454
      goto fail;
    } else {

    }
#line 1457
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1457
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1457
    if (tmp___10 == 0) {
#line 1458
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1459
      goto fail;
    } else {

    }
#line 1462
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1463
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1463
    if (tmp___11 != 0L) {
#line 1464
      integrity_r_tfm = 0;
#line 1465
      retcode = ERR_INTEGRITY_ALG;
#line 1466
      goto fail;
    } else {

    }
  } else {

  }
#line 1470
  ns = new_conf->max_epoch_size / 8;
#line 1471
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1472
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1472
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1473
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1474
      retcode = ERR_NOMEM;
#line 1475
      goto fail;
    } else {

    }
  } else {

  }
#line 1479
  ns = new_conf->max_buffers / 8;
#line 1480
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1481
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1481
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1482
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1483
      retcode = ERR_NOMEM;
#line 1484
      goto fail;
    } else {

    }
  } else {

  }
#line 1488
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1490
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1491
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1491
    i = (int )tmp___14;
#line 1492
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1493
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1494
      retcode = ERR_NOMEM;
#line 1495
      goto fail;
    } else {

    }
#line 1497
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1498
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1499
      retcode = ERR_NOMEM;
#line 1500
      goto fail;
    } else {

    }
#line 1502
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1503
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1504
      retcode = ERR_NOMEM;
#line 1505
      goto fail;
    } else {

    }
  } else {

  }
#line 1509
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1510
    tmp___15 = drbd_bm_init(mdev);
#line 1510
    if (tmp___15 != 0) {
#line 1511
      retcode = ERR_NOMEM;
#line 1512
      goto fail;
    } else {

    }
  } else {

  }
#line 1516
  drbd_flush_workqueue(mdev);
#line 1517
  spin_lock_irq(& mdev->req_lock);
#line 1518
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1519
    retcode = ERR_NET_CONFIGURED;
#line 1520
    spin_unlock_irq(& mdev->req_lock);
#line 1521
    goto fail;
  } else {

  }
#line 1523
  mdev->net_conf = new_conf;
#line 1525
  mdev->send_cnt = 0U;
#line 1526
  mdev->recv_cnt = 0U;
#line 1528
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1529
    kfree((void const   *)mdev->tl_hash);
#line 1530
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1531
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1534
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1535
    kfree((void const   *)mdev->ee_hash);
#line 1536
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1537
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1540
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1541
  mdev->cram_hmac_tfm = tfm;
#line 1543
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1544
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1546
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1547
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1549
  kfree((void const   *)mdev->int_dig_out);
#line 1550
  kfree((void const   *)mdev->int_dig_in);
#line 1551
  kfree((void const   *)mdev->int_dig_vv);
#line 1552
  mdev->int_dig_out = int_dig_out;
#line 1553
  mdev->int_dig_in = int_dig_in;
#line 1554
  mdev->int_dig_vv = int_dig_vv;
#line 1555
  __ns.i = mdev->state.i;
#line 1555
  __ns.ldv_37735.conn = 2U;
#line 1555
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1555
  retcode = (enum drbd_ret_codes )tmp___16;
#line 1556
  spin_unlock_irq(& mdev->req_lock);
#line 1558
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1559
  reply->ret_code = (int )retcode;
#line 1560
  drbd_reconfig_done(mdev);
#line 1561
  return (0);
  fail: 
#line 1564
  kfree((void const   *)int_dig_out);
#line 1565
  kfree((void const   *)int_dig_in);
#line 1566
  kfree((void const   *)int_dig_vv);
#line 1567
  crypto_free_hash(tfm);
#line 1568
  crypto_free_hash(integrity_w_tfm);
#line 1569
  crypto_free_hash(integrity_r_tfm);
#line 1570
  kfree((void const   *)new_tl_hash);
#line 1571
  kfree((void const   *)new_ee_hash);
#line 1572
  kfree((void const   *)new_conf);
#line 1574
  reply->ret_code = (int )retcode;
#line 1575
  drbd_reconfig_done(mdev);
#line 1576
  return (0);
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1584
  val.i = 0U;
#line 1584
  val.ldv_37735.conn = 1U;
#line 1584
  mask.i = 0U;
#line 1584
  mask.ldv_37735.conn = 31U;
#line 1584
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1586
  if (retcode == 2) {
#line 1587
    goto done;
  } else
#line 1588
  if (retcode == -9) {
#line 1589
    goto done;
  } else
#line 1590
  if (retcode == -7) {
#line 1593
    val___0.i = 0U;
#line 1593
    val___0.ldv_37735.conn = 1U;
#line 1593
    val___0.ldv_37735.pdsk = 5U;
#line 1592
    mask___0.i = 0U;
#line 1592
    mask___0.ldv_37735.conn = 31U;
#line 1593
    mask___0.ldv_37735.pdsk = 15U;
#line 1593
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1594
  if (retcode == -10) {
#line 1597
    val___1.i = 0U;
#line 1597
    val___1.ldv_37735.conn = 1U;
#line 1597
    val___1.ldv_37735.disk = 5U;
#line 1596
    mask___1.i = 0U;
#line 1596
    mask___1.ldv_37735.conn = 31U;
#line 1597
    mask___1.ldv_37735.disk = 15U;
#line 1597
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1599
    if (retcode == -11 || retcode == -16) {
#line 1600
      val___2.i = 0U;
#line 1600
      val___2.ldv_37735.conn = 1U;
#line 1600
      mask___2.i = 0U;
#line 1600
      mask___2.ldv_37735.conn = 31U;
#line 1600
      drbd_force_state(mdev, mask___2, val___2);
#line 1601
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1605
  if (retcode <= 0) {
#line 1606
    goto fail;
  } else {

  }
#line 1608
  __ret = 0;
#line 1608
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 16U) {
#line 1608
    tmp = get_current();
#line 1608
    __wait.flags = 0U;
#line 1608
    __wait.private = (void *)tmp;
#line 1608
    __wait.func = & autoremove_wake_function;
#line 1608
    __wait.task_list.next = & __wait.task_list;
#line 1608
    __wait.task_list.prev = & __wait.task_list;
    ldv_50065: 
#line 1608
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1608
    if ((unsigned int )*((unsigned short *)mdev + 998UL) != 16U) {
#line 1608
      goto ldv_50063;
    } else {

    }
#line 1608
    tmp___0 = get_current();
#line 1608
    tmp___1 = signal_pending(tmp___0);
#line 1608
    if (tmp___1 == 0) {
#line 1608
      schedule();
#line 1608
      goto ldv_50064;
    } else {

    }
#line 1608
    __ret = -512;
#line 1608
    goto ldv_50063;
    ldv_50064: ;
#line 1608
    goto ldv_50065;
    ldv_50063: 
#line 1608
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1608
  if (__ret != 0) {
#line 1612
    retcode = 129;
#line 1613
    goto fail;
  } else {

  }
  done: 
#line 1617
  retcode = 101;
  fail: 
#line 1619
  drbd_md_sync(mdev);
#line 1620
  reply->ret_code = retcode;
#line 1621
  return (0);
}
}
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1628
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1629
  if ((int )mdev->state.ldv_37735.role != (int )mdev->state.ldv_37735.peer) {
#line 1630
    iass = (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U;
  } else {
#line 1632
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1634
  if (iass != 0) {
#line 1635
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1637
    val.i = 0U;
#line 1637
    val.ldv_37735.conn = 15U;
#line 1637
    mask.i = 0U;
#line 1637
    mask.ldv_37735.conn = 31U;
#line 1637
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1639
  return;
}
}
#line 1640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1644
  retcode = 101;
#line 1648
  memset((void *)(& rs), 0, 16UL);
#line 1649
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1649
  if (tmp == 0) {
#line 1650
    retcode = 126;
#line 1651
    goto fail;
  } else {

  }
#line 1654
  if ((int )mdev->state.ldv_37735.conn > 10) {
#line 1655
    retcode = 130;
#line 1656
    goto fail;
  } else {

  }
#line 1659
  if ((unsigned int )*((unsigned char *)mdev + 1996UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1996UL) == 8U) {
#line 1661
    retcode = 131;
#line 1662
    goto fail;
  } else {

  }
#line 1665
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1665
  if (tmp___0 == 0) {
#line 1666
    retcode = 138;
#line 1667
    goto fail;
  } else {

  }
#line 1670
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1671
    retcode = 153;
#line 1672
    goto fail;
  } else {

  }
#line 1675
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1675
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1676
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1678
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1679
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1680
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1681
  drbd_md_sync(mdev);
#line 1682
  put_ldev(mdev);
#line 1683
  if ((int )dd == -1) {
#line 1684
    retcode = 140;
#line 1685
    goto fail;
  } else {

  }
#line 1688
  if ((unsigned int )*((unsigned short *)mdev + 998UL) == 160U) {
#line 1689
    if ((int )dd == 2) {
#line 1690
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1692
    drbd_send_uuids(mdev);
#line 1693
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1697
  reply->ret_code = retcode;
#line 1698
  return (0);
}
}
#line 1701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1704
  retcode = 101;
#line 1708
  verify_tfm = 0;
#line 1709
  csums_tfm = 0;
#line 1712
  rs_plan_s = 0;
#line 1715
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1715
  if (tmp) {
#line 1715
    tmp___0 = 0;
  } else {
#line 1715
    tmp___0 = 1;
  }
#line 1715
  if (tmp___0) {
#line 1716
    retcode = 122;
#line 1717
    goto fail;
  } else {

  }
#line 1720
  if ((nlp->flags & 2) != 0) {
#line 1721
    memset((void *)(& sc), 0, 212UL);
#line 1722
    sc.rate = 250;
#line 1723
    sc.after = -1;
#line 1724
    sc.al_extents = 127;
#line 1725
    sc.on_no_data = 0;
#line 1726
    sc.c_plan_ahead = 0;
#line 1727
    sc.c_delay_target = 10;
#line 1728
    sc.c_fill_target = 0;
#line 1729
    sc.c_max_rate = 102400;
#line 1730
    sc.c_min_rate = 4096;
  } else {
#line 1732
    __len = 212UL;
#line 1732
    if (__len > 63UL) {
#line 1732
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1732
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1734
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1734
  if (tmp___1 == 0) {
#line 1735
    retcode = 126;
#line 1736
    goto fail;
  } else {

  }
#line 1740
  rsr = (((unsigned int )*((unsigned short *)mdev + 998UL) == 256U || (unsigned int )*((unsigned short *)mdev + 998UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 998UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 998UL) == 336U;
#line 1745
  if (rsr != 0) {
#line 1745
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1745
    if (tmp___2 != 0) {
#line 1746
      retcode = 148;
#line 1747
      goto fail;
    } else {

    }
  } else {

  }
#line 1750
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1751
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1752
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1752
    if (tmp___3 != 0L) {
#line 1753
      csums_tfm = 0;
#line 1754
      retcode = 144;
#line 1755
      goto fail;
    } else {

    }
#line 1758
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1758
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1758
    if (tmp___5 == 0) {
#line 1759
      retcode = 145;
#line 1760
      goto fail;
    } else {

    }
  } else {

  }
#line 1765
  ovr = (unsigned int )*((unsigned short *)mdev + 998UL) == 288U || (unsigned int )*((unsigned short *)mdev + 998UL) == 304U;
#line 1767
  if (ovr != 0) {
#line 1768
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1768
    if (tmp___6 != 0) {
#line 1769
      retcode = 149;
#line 1770
      goto fail;
    } else {

    }
  } else {

  }
#line 1774
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1775
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1776
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1776
    if (tmp___7 != 0L) {
#line 1777
      verify_tfm = 0;
#line 1778
      retcode = 146;
#line 1779
      goto fail;
    } else {

    }
#line 1782
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1782
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1782
    if (tmp___9 == 0) {
#line 1783
      retcode = 147;
#line 1784
      goto fail;
    } else {

    }
  } else {

  }
#line 1789
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1790
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1792
    if (err != 0) {
#line 1793
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1794
      retcode = 143;
#line 1795
      goto fail;
    } else {

    }
  } else {

  }
#line 1799
  _b = sc.rate <= 0;
#line 1799
  if (_b != 0) {
#line 1799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1799);
  } else {

  }
#line 1799
  if (_b != 0) {
#line 1799
    sc.rate = 1;
  } else {

  }
#line 1800
  _b___0 = sc.al_extents <= 6;
#line 1800
  if (_b___0 != 0) {
#line 1800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1800);
  } else {

  }
#line 1800
  if (_b___0 != 0) {
#line 1800
    sc.al_extents = 127;
  } else {

  }
#line 1802
  if (sc.al_extents > 3843) {
#line 1803
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1804
    sc.al_extents = 3843;
  } else {

  }
#line 1811
  if (sc.after >= 0) {
#line 1812
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1817
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1818
  if (retcode != 101) {
#line 1819
    goto fail;
  } else {

  }
#line 1821
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1822
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1823
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1823
    rs_plan_s = (int *)tmp___10;
#line 1824
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1825
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1826
      retcode = 122;
#line 1827
      goto fail;
    } else {

    }
  } else {

  }
#line 1833
  spin_lock(& mdev->peer_seq_lock);
#line 1834
  mdev->sync_conf = sc;
#line 1836
  if (rsr == 0) {
#line 1837
    crypto_free_hash(mdev->csums_tfm);
#line 1838
    mdev->csums_tfm = csums_tfm;
#line 1839
    csums_tfm = 0;
  } else {

  }
#line 1842
  if (ovr == 0) {
#line 1843
    crypto_free_hash(mdev->verify_tfm);
#line 1844
    mdev->verify_tfm = verify_tfm;
#line 1845
    verify_tfm = 0;
  } else {

  }
#line 1848
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1849
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1850
    mdev->rs_plan_s.values = rs_plan_s;
#line 1851
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1852
    mdev->rs_planed = 0;
#line 1853
    rs_plan_s = 0;
  } else {

  }
#line 1856
  spin_unlock(& mdev->peer_seq_lock);
#line 1858
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1858
  if (tmp___14 != 0) {
#line 1859
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1859
    if (tmp___11 != 0) {
#line 1859
      goto ldv_50109;
    } else {

    }
#line 1859
    tmp___12 = get_current();
#line 1859
    __wait.flags = 0U;
#line 1859
    __wait.private = (void *)tmp___12;
#line 1859
    __wait.func = & autoremove_wake_function;
#line 1859
    __wait.task_list.next = & __wait.task_list;
#line 1859
    __wait.task_list.prev = & __wait.task_list;
    ldv_50112: 
#line 1859
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1859
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1859
    if (tmp___13 != 0) {
#line 1859
      goto ldv_50111;
    } else {

    }
#line 1859
    schedule();
#line 1859
    goto ldv_50112;
    ldv_50111: 
#line 1859
    finish_wait(& mdev->al_wait, & __wait);
    ldv_50109: 
#line 1860
    drbd_al_shrink(mdev);
#line 1861
    err = drbd_check_al_size(mdev);
#line 1862
    lc_unlock(mdev->act_log);
#line 1863
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1865
    put_ldev(mdev);
#line 1866
    drbd_md_sync(mdev);
#line 1868
    if (err != 0) {
#line 1869
      retcode = 122;
#line 1870
      goto fail;
    } else {

    }
  } else {

  }
#line 1874
  if ((int )mdev->state.ldv_37735.conn > 9) {
#line 1875
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1877
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1877
  if (tmp___15) {
#line 1877
    tmp___16 = 0;
  } else {
#line 1877
    tmp___16 = 1;
  }
#line 1877
  if (tmp___16) {
#line 1878
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1879
    drbd_calc_cpu_mask(mdev);
#line 1880
    mdev->receiver.reset_cpu_mask = 1;
#line 1881
    mdev->asender.reset_cpu_mask = 1;
#line 1882
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1885
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1887
  kfree((void const   *)rs_plan_s);
#line 1888
  free_cpumask_var(new_cpu_mask);
#line 1889
  crypto_free_hash(csums_tfm);
#line 1890
  crypto_free_hash(verify_tfm);
#line 1891
  reply->ret_code = retcode;
#line 1892
  return (0);
}
}
#line 1895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1900
  val.i = 0U;
#line 1900
  val.ldv_37735.conn = 12U;
#line 1900
  mask.i = 0U;
#line 1900
  mask.ldv_37735.conn = 31U;
#line 1900
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1902
  if (retcode <= 0 && retcode != -15) {
#line 1903
    val___0.i = 0U;
#line 1903
    val___0.ldv_37735.conn = 12U;
#line 1903
    mask___0.i = 0U;
#line 1903
    mask___0.ldv_37735.conn = 31U;
#line 1903
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1905
  goto ldv_50135;
  ldv_50134: 
#line 1906
  spin_lock_irq(& mdev->req_lock);
#line 1907
  if ((int )mdev->state.ldv_37735.conn <= 9) {
#line 1908
    __ns.i = mdev->state.i;
#line 1908
    __ns.ldv_37735.disk = 4U;
#line 1908
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1909
  spin_unlock_irq(& mdev->req_lock);
#line 1911
  if (retcode != -15) {
#line 1912
    goto ldv_50129;
  } else {

  }
#line 1914
  val___1.i = 0U;
#line 1914
  val___1.ldv_37735.conn = 12U;
#line 1914
  mask___1.i = 0U;
#line 1914
  mask___1.ldv_37735.conn = 31U;
#line 1914
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_50135: ;
#line 1905
  if (retcode == -15) {
#line 1906
    goto ldv_50134;
  } else {

  }
  ldv_50129: 
#line 1917
  reply->ret_code = retcode;
#line 1918
  return (0);
}
}
#line 1921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1925
  rv = drbd_bmio_set_n_write(mdev);
#line 1926
  drbd_suspend_al(mdev);
#line 1927
  return (rv);
}
}
#line 1930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1935
  val.i = 0U;
#line 1935
  val.ldv_37735.conn = 11U;
#line 1935
  mask.i = 0U;
#line 1935
  mask.ldv_37735.conn = 31U;
#line 1935
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1937
  if (retcode <= 0) {
#line 1938
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 1996UL) == 1U) {
#line 1941
      val___0.i = 0U;
#line 1941
      val___0.ldv_37735.pdsk = 4U;
#line 1941
      mask___0.i = 0U;
#line 1941
      mask___0.ldv_37735.pdsk = 15U;
#line 1941
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1942
      if (retcode > 0) {
#line 1944
        tmp = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer");
#line 1944
        if (tmp != 0) {
#line 1946
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 1949
      val___1.i = 0U;
#line 1949
      val___1.ldv_37735.conn = 11U;
#line 1949
      mask___1.i = 0U;
#line 1949
      mask___1.ldv_37735.conn = 31U;
#line 1949
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 1952
  reply->ret_code = retcode;
#line 1953
  return (0);
}
}
#line 1956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1959
  retcode = 101;
#line 1961
  val.i = 0U;
#line 1961
  val.ldv_37735.user_isp = 1U;
#line 1961
  mask.i = 0U;
#line 1961
  mask.ldv_37735.user_isp = 1U;
#line 1961
  tmp = drbd_request_state(mdev, mask, val);
#line 1961
  if (tmp == 2) {
#line 1962
    retcode = 134;
  } else {

  }
#line 1964
  reply->ret_code = retcode;
#line 1965
  return (0);
}
}
#line 1968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1971
  retcode = 101;
#line 1973
  val.i = 0U;
#line 1973
  val.ldv_37735.user_isp = 0U;
#line 1973
  mask.i = 0U;
#line 1973
  mask.ldv_37735.user_isp = 1U;
#line 1973
  tmp = drbd_request_state(mdev, mask, val);
#line 1973
  if (tmp == 2) {
#line 1974
    retcode = 135;
  } else {

  }
#line 1976
  reply->ret_code = retcode;
#line 1977
  return (0);
}
}
#line 1980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1983
  val.i = 0U;
#line 1983
  val.ldv_37735.susp = 1U;
#line 1983
  mask.i = 0U;
#line 1983
  mask.ldv_37735.susp = 1U;
#line 1983
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1985
  return (0);
}
}
#line 1988 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1991
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1991
  if (tmp != 0) {
#line 1992
    drbd_uuid_new_current(mdev);
#line 1993
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1995
  drbd_suspend_io(mdev);
#line 1996
  val.i = 0U;
#line 1996
  val.ldv_37735.susp = 0U;
#line 1996
  val.ldv_37735.susp_nod = 0U;
#line 1996
  val.ldv_37735.susp_fen = 0U;
#line 1996
  mask.i = 0U;
#line 1996
  mask.ldv_37735.susp = 1U;
#line 1996
  mask.ldv_37735.susp_nod = 1U;
#line 1996
  mask.ldv_37735.susp_fen = 1U;
#line 1996
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1997
  if (reply->ret_code == 1) {
#line 1998
    if ((int )mdev->state.ldv_37735.conn <= 9) {
#line 1999
      tl_clear(mdev);
    } else {

    }
#line 2000
    if ((unsigned int )*((unsigned char *)mdev + 1997UL) == 0U || (unsigned int )*((unsigned char *)mdev + 1997UL) == 4U) {
#line 2001
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2003
  drbd_resume_io(mdev);
#line 2005
  return (0);
}
}
#line 2008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2011
  val.i = 0U;
#line 2011
  val.ldv_37735.disk = 5U;
#line 2011
  mask.i = 0U;
#line 2011
  mask.ldv_37735.disk = 15U;
#line 2011
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2012
  return (0);
}
}
#line 2015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2020
  tl = (unsigned short *)(& reply->tag_list);
#line 2022
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2022
  if (tmp != 0) {
#line 2023
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2024
    put_ldev(mdev);
  } else {

  }
#line 2027
  tmp___0 = get_net_conf(mdev);
#line 2027
  if (tmp___0 != 0) {
#line 2028
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2029
    put_net_conf(mdev);
  } else {

  }
#line 2031
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2033
  tmp___1 = tl;
#line 2033
  tl = tl + 1;
#line 2033
  __gu_p = (void *)tmp___1;
#line 2033
  switch (2UL) {
  case 1UL: 
#line 2033
  *((u8 *)__gu_p) = 0U;
#line 2033
  goto ldv_50213;
  case 2UL: 
#line 2033
  put_unaligned_le16(0, __gu_p);
#line 2033
  goto ldv_50213;
  case 4UL: 
#line 2033
  put_unaligned_le32(0U, __gu_p);
#line 2033
  goto ldv_50213;
  case 8UL: 
#line 2033
  put_unaligned_le64(0ULL, __gu_p);
#line 2033
  goto ldv_50213;
  default: 
#line 2033
  __bad_unaligned_access_size();
#line 2033
  goto ldv_50213;
  }
  ldv_50213: ;
#line 2035
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2041
  tl = (unsigned short *)(& reply->tag_list);
#line 2042
  s = mdev->state;
#line 2046
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2049
  if ((int )s.ldv_37735.conn > 15 && (int )s.ldv_37735.conn <= 21) {
#line 2050
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2050
    if (tmp != 0) {
#line 2051
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2052
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2053
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2056
  tmp___0 = tl;
#line 2056
  tl = tl + 1;
#line 2056
  __gu_p = (void *)tmp___0;
#line 2056
  switch (2UL) {
  case 1UL: 
#line 2056
  *((u8 *)__gu_p) = 0U;
#line 2056
  goto ldv_50229;
  case 2UL: 
#line 2056
  put_unaligned_le16(0, __gu_p);
#line 2056
  goto ldv_50229;
  case 4UL: 
#line 2056
  put_unaligned_le32(0U, __gu_p);
#line 2056
  goto ldv_50229;
  case 8UL: 
#line 2056
  put_unaligned_le64(0ULL, __gu_p);
#line 2056
  goto ldv_50229;
  default: 
#line 2056
  __bad_unaligned_access_size();
#line 2056
  goto ldv_50229;
  }
  ldv_50229: ;
#line 2058
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2066
  tl = (unsigned short *)(& reply->tag_list);
#line 2068
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2068
  if (tmp != 0) {
#line 2069
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2070
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2071
    put_ldev(mdev);
  } else {

  }
#line 2073
  tmp___0 = tl;
#line 2073
  tl = tl + 1;
#line 2073
  __gu_p = (void *)tmp___0;
#line 2073
  switch (2UL) {
  case 1UL: 
#line 2073
  *((u8 *)__gu_p) = 0U;
#line 2073
  goto ldv_50242;
  case 2UL: 
#line 2073
  put_unaligned_le16(0, __gu_p);
#line 2073
  goto ldv_50242;
  case 4UL: 
#line 2073
  put_unaligned_le32(0U, __gu_p);
#line 2073
  goto ldv_50242;
  case 8UL: 
#line 2073
  put_unaligned_le64(0ULL, __gu_p);
#line 2073
  goto ldv_50242;
  default: 
#line 2073
  __bad_unaligned_access_size();
#line 2073
  goto ldv_50242;
  }
  ldv_50242: ;
#line 2075
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2090
  tl = (unsigned short *)(& reply->tag_list);
#line 2092
  if (*((unsigned int *)mdev + 499UL) != 40960U) {
#line 2092
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2092
    rv = tmp != 0;
  } else {
#line 2092
    rv = 2;
  }
#line 2095
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2096
  tmp___0 = tl;
#line 2096
  tl = tl + 1;
#line 2096
  __gu_p = (void *)tmp___0;
#line 2096
  switch (2UL) {
  case 1UL: 
#line 2096
  *((u8 *)__gu_p) = 0U;
#line 2096
  goto ldv_50256;
  case 2UL: 
#line 2096
  put_unaligned_le16(0, __gu_p);
#line 2096
  goto ldv_50256;
  case 4UL: 
#line 2096
  put_unaligned_le32(0U, __gu_p);
#line 2096
  goto ldv_50256;
  case 8UL: 
#line 2096
  put_unaligned_le64(0ULL, __gu_p);
#line 2096
  goto ldv_50256;
  default: 
#line 2096
  __bad_unaligned_access_size();
#line 2096
  goto ldv_50256;
  }
  ldv_50256: ;
#line 2098
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2105
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2108
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2108
  if (tmp == 0) {
#line 2109
    reply->ret_code = 126;
#line 2110
    return (0);
  } else {

  }
#line 2113
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2114
  val.i = 0U;
#line 2114
  val.ldv_37735.conn = 18U;
#line 2114
  mask.i = 0U;
#line 2114
  mask.ldv_37735.conn = 31U;
#line 2114
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2115
  return (0);
}
}
#line 2119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2122
  retcode = 101;
#line 2123
  skip_initial_sync = 0;
#line 2128
  memset((void *)(& args), 0, 4UL);
#line 2129
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2129
  if (tmp == 0) {
#line 2130
    reply->ret_code = 126;
#line 2131
    return (0);
  } else {

  }
#line 2134
  ldv_mutex_lock_195(& mdev->state_mutex);
#line 2136
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2136
  if (tmp___0 == 0) {
#line 2137
    retcode = 138;
#line 2138
    goto out;
  } else {

  }
#line 2142
  if ((((unsigned int )*((unsigned short *)mdev + 998UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2144
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2145
    skip_initial_sync = 1;
  } else
#line 2146
  if ((unsigned int )*((unsigned short *)mdev + 998UL) != 0U) {
#line 2147
    retcode = 151;
#line 2148
    goto out_dec;
  } else {

  }
#line 2151
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2152
  drbd_uuid_new_current(mdev);
#line 2154
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2155
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 2156
    if (err != 0) {
#line 2157
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2158
      retcode = 118;
    } else {

    }
#line 2160
    if (skip_initial_sync != 0) {
#line 2161
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2162
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2163
      spin_lock_irq(& mdev->req_lock);
#line 2164
      __ns.i = mdev->state.i;
#line 2164
      __ns.ldv_37735.disk = 8U;
#line 2164
      __ns.ldv_37735.pdsk = 8U;
#line 2164
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2166
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2170
  drbd_md_sync(mdev);
  out_dec: 
#line 2172
  put_ldev(mdev);
  out: 
#line 2174
  ldv_mutex_unlock_196(& mdev->state_mutex);
#line 2176
  reply->ret_code = retcode;
#line 2177
  return (0);
}
}
#line 2187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2187
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1288}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  struct task_struct *tmp___0 ;
  void *tmp___1 ;

  {
#line 2220
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2226
  reply_size = 34;
#line 2230
  tmp = try_module_get___0(& __this_module);
#line 2230
  if (tmp == 0) {
#line 2231
    printk("<3>drbd: try_module_get() failed!\n");
#line 2232
    return;
  } else {

  }
#line 2235
  tmp___0 = get_current();
#line 2235
  if (((tmp___0->cred)->cap_effective.cap[0] & 2097152U) == 0U) {
#line 2236
    retcode = 152;
#line 2237
    goto fail;
  } else {

  }
#line 2240
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2242
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2243
    retcode = 127;
#line 2244
    goto fail;
  } else {

  }
#line 2247
  if (nlp->packet_type > 26) {
#line 2248
    retcode = 137;
#line 2249
    goto fail;
  } else {

  }
#line 2252
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2255
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2256
    retcode = 137;
#line 2257
    goto fail;
  } else {

  }
#line 2260
  reply_size = cm->reply_body_size + reply_size;
#line 2263
  tmp___1 = kmalloc((size_t )reply_size, 208U);
#line 2263
  cn_reply = (struct cn_msg *)tmp___1;
#line 2264
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2265
    retcode = 122;
#line 2266
    goto fail;
  } else {

  }
#line 2268
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2270
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2272
  reply->minor = nlp->drbd_minor;
#line 2273
  reply->ret_code = 101;
#line 2276
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2278
  cn_reply->id = req->id;
#line 2279
  cn_reply->seq = req->seq;
#line 2280
  cn_reply->ack = req->ack + 1U;
#line 2281
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2282
  cn_reply->flags = 0U;
#line 2284
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2285
  if (rr != 0 && rr != -3) {
#line 2286
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2288
  kfree((void const   *)cn_reply);
#line 2289
  module_put(& __this_module);
#line 2290
  return;
  fail: 
#line 2292
  drbd_nl_send_reply(req, retcode);
#line 2293
  module_put(& __this_module);
#line 2294
  return;
}
}
#line 2296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2302
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2303
  len = (int )len < (int )l ? len : l;
#line 2304
  tmp = tl;
#line 2304
  tl = tl + 1;
#line 2304
  __gu_p = (void *)tmp;
#line 2304
  switch (2UL) {
  case 1UL: 
#line 2304
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2304
  goto ldv_50315;
  case 2UL: 
#line 2304
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2304
  goto ldv_50315;
  case 4UL: 
#line 2304
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2304
  goto ldv_50315;
  case 8UL: 
#line 2304
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2304
  goto ldv_50315;
  default: 
#line 2304
  __bad_unaligned_access_size();
#line 2304
  goto ldv_50315;
  }
  ldv_50315: 
#line 2305
  tmp___0 = tl;
#line 2305
  tl = tl + 1;
#line 2305
  __gu_p___0 = (void *)tmp___0;
#line 2305
  switch (2UL) {
  case 1UL: 
#line 2305
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2305
  goto ldv_50322;
  case 2UL: 
#line 2305
  put_unaligned_le16((int )len, __gu_p___0);
#line 2305
  goto ldv_50322;
  case 4UL: 
#line 2305
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2305
  goto ldv_50322;
  case 8UL: 
#line 2305
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2305
  goto ldv_50322;
  default: 
#line 2305
  __bad_unaligned_access_size();
#line 2305
  goto ldv_50322;
  }
  ldv_50322: 
#line 2306
  __len = (size_t )len;
#line 2306
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2307
  tl = tl + (unsigned long )len;
#line 2308
  if (nul_terminated != 0) {
#line 2309
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2310
  return (tl);
}
}
#line 2314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2316
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2316
  return (tmp);
}
}
#line 2320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2322
  tmp = strlen(str);
#line 2322
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2322
  return (tmp___0);
}
}
#line 2326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2328
  tmp = tl;
#line 2328
  tl = tl + 1;
#line 2328
  __gu_p = (void *)tmp;
#line 2328
  switch (2UL) {
  case 1UL: 
#line 2328
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2328
  goto ldv_50348;
  case 2UL: 
#line 2328
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2328
  goto ldv_50348;
  case 4UL: 
#line 2328
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2328
  goto ldv_50348;
  case 8UL: 
#line 2328
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2328
  goto ldv_50348;
  default: 
#line 2328
  __bad_unaligned_access_size();
#line 2328
  goto ldv_50348;
  }
  ldv_50348: ;
#line 2329
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2331
  tmp___0 = tl;
#line 2331
  tl = tl + 1;
#line 2331
  __gu_p___0 = (void *)tmp___0;
#line 2331
  switch (2UL) {
  case 1UL: 
#line 2331
  *((u8 *)__gu_p___0) = 4U;
#line 2331
  goto ldv_50356;
  case 2UL: 
#line 2331
  put_unaligned_le16(4, __gu_p___0);
#line 2331
  goto ldv_50356;
  case 4UL: 
#line 2331
  put_unaligned_le32(4U, __gu_p___0);
#line 2331
  goto ldv_50356;
  case 8UL: 
#line 2331
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2331
  goto ldv_50356;
  default: 
#line 2331
  __bad_unaligned_access_size();
#line 2331
  goto ldv_50356;
  }
  ldv_50356: 
#line 2332
  __gu_p___1 = (void *)tl;
#line 2332
  switch (4UL) {
  case 1UL: 
#line 2332
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2332
  goto ldv_50363;
  case 2UL: 
#line 2332
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2332
  goto ldv_50363;
  case 4UL: 
#line 2332
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2332
  goto ldv_50363;
  case 8UL: 
#line 2332
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2332
  goto ldv_50363;
  default: 
#line 2332
  __bad_unaligned_access_size();
#line 2332
  goto ldv_50363;
  }
  ldv_50363: 
#line 2333
  tl = tl + 4U;
#line 2334
  goto ldv_50368;
  case 16384U: 
#line 2336
  tmp___1 = tl;
#line 2336
  tl = tl + 1;
#line 2336
  __gu_p___2 = (void *)tmp___1;
#line 2336
  switch (2UL) {
  case 1UL: 
#line 2336
  *((u8 *)__gu_p___2) = 8U;
#line 2336
  goto ldv_50372;
  case 2UL: 
#line 2336
  put_unaligned_le16(8, __gu_p___2);
#line 2336
  goto ldv_50372;
  case 4UL: 
#line 2336
  put_unaligned_le32(8U, __gu_p___2);
#line 2336
  goto ldv_50372;
  case 8UL: 
#line 2336
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2336
  goto ldv_50372;
  default: 
#line 2336
  __bad_unaligned_access_size();
#line 2336
  goto ldv_50372;
  }
  ldv_50372: 
#line 2337
  __gu_p___3 = (void *)tl;
#line 2337
  switch (8UL) {
  case 1UL: 
#line 2337
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2337
  goto ldv_50379;
  case 2UL: 
#line 2337
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2337
  goto ldv_50379;
  case 4UL: 
#line 2337
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2337
  goto ldv_50379;
  case 8UL: 
#line 2337
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2337
  goto ldv_50379;
  default: 
#line 2337
  __bad_unaligned_access_size();
#line 2337
  goto ldv_50379;
  }
  ldv_50379: 
#line 2338
  tl = tl + 8U;
#line 2339
  goto ldv_50368;
  default: ;
  }
  ldv_50368: ;
#line 2344
  return (tl);
}
}
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2353
  cn_reply = (struct cn_msg *)(& buffer);
#line 2354
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2356
  tl = (unsigned short *)(& reply->tag_list);
#line 2360
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2362
  tmp = tl;
#line 2362
  tl = tl + 1;
#line 2362
  __gu_p = (void *)tmp;
#line 2362
  switch (2UL) {
  case 1UL: 
#line 2362
  *((u8 *)__gu_p) = 0U;
#line 2362
  goto ldv_50395;
  case 2UL: 
#line 2362
  put_unaligned_le16(0, __gu_p);
#line 2362
  goto ldv_50395;
  case 4UL: 
#line 2362
  put_unaligned_le32(0U, __gu_p);
#line 2362
  goto ldv_50395;
  case 8UL: 
#line 2362
  put_unaligned_le64(0ULL, __gu_p);
#line 2362
  goto ldv_50395;
  default: 
#line 2362
  __bad_unaligned_access_size();
#line 2362
  goto ldv_50395;
  }
  ldv_50395: 
#line 2364
  cn_reply->id.idx = 8U;
#line 2365
  cn_reply->id.val = 1U;
#line 2367
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2367
  cn_reply->seq = (__u32 )tmp___0;
#line 2368
  cn_reply->ack = 0U;
#line 2369
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2371
  cn_reply->flags = 0U;
#line 2373
  reply->packet_type = 17;
#line 2374
  reply->minor = mdev_to_minor(mdev);
#line 2375
  reply->ret_code = 101;
#line 2377
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2378
  return;
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2386
  cn_reply = (struct cn_msg *)(& buffer);
#line 2387
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2389
  tl = (unsigned short *)(& reply->tag_list);
#line 2393
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2394
  tmp = tl;
#line 2394
  tl = tl + 1;
#line 2394
  __gu_p = (void *)tmp;
#line 2394
  switch (2UL) {
  case 1UL: 
#line 2394
  *((u8 *)__gu_p) = 0U;
#line 2394
  goto ldv_50410;
  case 2UL: 
#line 2394
  put_unaligned_le16(0, __gu_p);
#line 2394
  goto ldv_50410;
  case 4UL: 
#line 2394
  put_unaligned_le32(0U, __gu_p);
#line 2394
  goto ldv_50410;
  case 8UL: 
#line 2394
  put_unaligned_le64(0ULL, __gu_p);
#line 2394
  goto ldv_50410;
  default: 
#line 2394
  __bad_unaligned_access_size();
#line 2394
  goto ldv_50410;
  }
  ldv_50410: 
#line 2396
  cn_reply->id.idx = 8U;
#line 2397
  cn_reply->id.val = 1U;
#line 2399
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2399
  cn_reply->seq = (__u32 )tmp___0;
#line 2400
  cn_reply->ack = 0U;
#line 2401
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2403
  cn_reply->flags = 0U;
#line 2405
  reply->packet_type = 20;
#line 2406
  reply->minor = mdev_to_minor(mdev);
#line 2407
  reply->ret_code = 101;
#line 2409
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2410
  return;
}
}
#line 2412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2423
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2424
    return;
  } else {

  }
#line 2425
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2426
    return;
  } else {

  }
#line 2434
  tmp = kmalloc(33026UL, 16U);
#line 2434
  cn_reply = (struct cn_msg *)tmp;
#line 2441
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2444
    return;
  } else {

  }
#line 2447
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2448
  tl = (unsigned short *)(& reply->tag_list);
#line 2450
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2451
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2452
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2453
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2454
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_45894.block_id));
#line 2456
  tmp___0 = tl;
#line 2456
  tl = tl + 1;
#line 2456
  __gu_p = (void *)tmp___0;
#line 2456
  switch (2UL) {
  case 1UL: 
#line 2456
  *((u8 *)__gu_p) = 50U;
#line 2456
  goto ldv_50430;
  case 2UL: 
#line 2456
  put_unaligned_le16(49202, __gu_p);
#line 2456
  goto ldv_50430;
  case 4UL: 
#line 2456
  put_unaligned_le32(49202U, __gu_p);
#line 2456
  goto ldv_50430;
  case 8UL: 
#line 2456
  put_unaligned_le64(49202ULL, __gu_p);
#line 2456
  goto ldv_50430;
  default: 
#line 2456
  __bad_unaligned_access_size();
#line 2456
  goto ldv_50430;
  }
  ldv_50430: 
#line 2457
  tmp___1 = tl;
#line 2457
  tl = tl + 1;
#line 2457
  __gu_p___0 = (void *)tmp___1;
#line 2457
  switch (2UL) {
  case 1UL: 
#line 2457
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2457
  goto ldv_50437;
  case 2UL: 
#line 2457
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2457
  goto ldv_50437;
  case 4UL: 
#line 2457
  put_unaligned_le32(e->size, __gu_p___0);
#line 2457
  goto ldv_50437;
  case 8UL: 
#line 2457
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2457
  goto ldv_50437;
  default: 
#line 2457
  __bad_unaligned_access_size();
#line 2457
  goto ldv_50437;
  }
  ldv_50437: 
#line 2459
  len = e->size;
#line 2460
  page = e->pages;
#line 2461
  goto ldv_50452;
  ldv_50451: 
#line 2462
  tmp___2 = __kmap_atomic___0(page);
#line 2462
  d = tmp___2;
#line 2463
  __min1 = len;
#line 2463
  __min2 = 4096U;
#line 2463
  l = __min1 < __min2 ? __min1 : __min2;
#line 2464
  __len = (size_t )l;
#line 2464
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2465
  __kunmap_atomic___0(d);
#line 2466
  tl = tl + (unsigned long )l;
#line 2467
  len = len - l;
#line 2461
  page = page_chain_next(page);
  ldv_50452: ;
#line 2461
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2461
    tmp___3 = page_chain_next(page);
#line 2461
    __builtin_prefetch((void const   *)tmp___3);
#line 2461
    if (1 != 0) {
#line 2462
      goto ldv_50451;
    } else {
#line 2464
      goto ldv_50453;
    }
  } else {

  }
  ldv_50453: 
#line 2469
  tmp___4 = tl;
#line 2469
  tl = tl + 1;
#line 2469
  __gu_p___1 = (void *)tmp___4;
#line 2469
  switch (2UL) {
  case 1UL: 
#line 2469
  *((u8 *)__gu_p___1) = 0U;
#line 2469
  goto ldv_50456;
  case 2UL: 
#line 2469
  put_unaligned_le16(0, __gu_p___1);
#line 2469
  goto ldv_50456;
  case 4UL: 
#line 2469
  put_unaligned_le32(0U, __gu_p___1);
#line 2469
  goto ldv_50456;
  case 8UL: 
#line 2469
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2469
  goto ldv_50456;
  default: 
#line 2469
  __bad_unaligned_access_size();
#line 2469
  goto ldv_50456;
  }
  ldv_50456: 
#line 2471
  cn_reply->id.idx = 8U;
#line 2472
  cn_reply->id.val = 1U;
#line 2474
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2474
  cn_reply->seq = (__u32 )tmp___5;
#line 2475
  cn_reply->ack = 0U;
#line 2476
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2478
  cn_reply->flags = 0U;
#line 2480
  reply->packet_type = 24;
#line 2481
  reply->minor = mdev_to_minor(mdev);
#line 2482
  reply->ret_code = 101;
#line 2484
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2485
  kfree((void const   *)cn_reply);
#line 2486
  return;
}
}
#line 2488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2494
  cn_reply = (struct cn_msg *)(& buffer);
#line 2495
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2497
  tl = (unsigned short *)(& reply->tag_list);
#line 2502
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2502
  if (tmp == 0) {
#line 2503
    return;
  } else {

  }
#line 2504
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2505
  put_ldev(mdev);
#line 2507
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2508
  tmp___0 = tl;
#line 2508
  tl = tl + 1;
#line 2508
  __gu_p = (void *)tmp___0;
#line 2508
  switch (2UL) {
  case 1UL: 
#line 2508
  *((u8 *)__gu_p) = 0U;
#line 2508
  goto ldv_50472;
  case 2UL: 
#line 2508
  put_unaligned_le16(0, __gu_p);
#line 2508
  goto ldv_50472;
  case 4UL: 
#line 2508
  put_unaligned_le32(0U, __gu_p);
#line 2508
  goto ldv_50472;
  case 8UL: 
#line 2508
  put_unaligned_le64(0ULL, __gu_p);
#line 2508
  goto ldv_50472;
  default: 
#line 2508
  __bad_unaligned_access_size();
#line 2508
  goto ldv_50472;
  }
  ldv_50472: 
#line 2510
  cn_reply->id.idx = 8U;
#line 2511
  cn_reply->id.val = 1U;
#line 2513
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2513
  cn_reply->seq = (__u32 )tmp___1;
#line 2514
  cn_reply->ack = 0U;
#line 2515
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2517
  cn_reply->flags = 0U;
#line 2519
  reply->packet_type = 23;
#line 2520
  reply->minor = mdev_to_minor(mdev);
#line 2521
  reply->ret_code = 101;
#line 2523
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2524
  return;
}
}
#line 2526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2529
  try = 10;
#line 2531
  cn_id_drbd.val = 1U;
  ldv_50484: 
#line 2533
  cn_id_drbd.idx = cn_idx;
#line 2534
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2535
  if (err == 0) {
#line 2536
    goto ldv_50483;
  } else {

  }
#line 2537
  cn_idx = cn_idx + 6977U;
#line 2538
  tmp = try;
#line 2538
  try = try - 1;
#line 2538
  if (tmp != 0) {
#line 2539
    goto ldv_50484;
  } else {

  }
  ldv_50483: ;
#line 2540
  if (err != 0) {
#line 2541
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2542
    return (err);
  } else {

  }
#line 2545
  return (0);
}
}
#line 2548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2552
  cn_id_drbd.idx = cn_idx;
#line 2553
  cn_id_drbd.val = 1U;
#line 2555
  cn_del_callback(& cn_id_drbd);
#line 2556
  return;
}
}
#line 2558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2561
  cn_reply = (struct cn_msg *)(& buffer);
#line 2562
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2566
  cn_reply->id = req->id;
#line 2568
  cn_reply->seq = req->seq;
#line 2569
  cn_reply->ack = req->ack + 1U;
#line 2570
  cn_reply->len = 12U;
#line 2571
  cn_reply->flags = 0U;
#line 2573
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2574
  reply->ret_code = ret_code;
#line 2576
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2577
  if (rr != 0 && rr != -3) {
#line 2578
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2579
  return;
}
}
#line 2581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2586
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2588
  mutex_lock(ldv_func_arg1);
#line 2589
  return;
}
}
#line 2591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2596
  tmp = mutex_trylock(ldv_func_arg1);
#line 2596
  ldv_func_res = tmp;
#line 2598
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2598
  return (tmp___0);
#line 2600
  return (ldv_func_res);
}
}
#line 2603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2608
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2610
  mutex_unlock(ldv_func_arg1);
#line 2611
  return;
}
}
#line 2613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2618
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2620
  mutex_lock(ldv_func_arg1);
#line 2621
  return;
}
}
#line 2623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2628
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2630
  mutex_unlock(ldv_func_arg1);
#line 2631
  return;
}
}
#line 2633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2638
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2640
  mutex_unlock(ldv_func_arg1);
#line 2641
  return;
}
}
#line 2643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2648
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2650
  mutex_lock(ldv_func_arg1);
#line 2651
  return;
}
}
#line 2653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2658
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2660
  mutex_unlock(ldv_func_arg1);
#line 2661
  return;
}
}
#line 2663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2668
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2670
  mutex_lock(ldv_func_arg1);
#line 2671
  return;
}
}
#line 2673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2678
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2680
  mutex_unlock(ldv_func_arg1);
#line 2681
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_drbd_main_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_drbd_main_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_drbd_main_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_drbd_main_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_drbd_main_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_drbd_main_mutex = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_drbd_main_mutex = 1;
#line 929
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
