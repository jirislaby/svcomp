/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 59 "include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 109
struct pt_regs;
#line 191
struct pid;
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_6 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_7 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_8 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_5 {
   struct __anonstruct____missing_field_name_6 __annonCompField1 ;
   struct __anonstruct_futex_7 futex ;
   struct __anonstruct_nanosleep_8 nanosleep ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_5 __annonCompField2 ;
};
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "include/asm/page.h"
struct __anonstruct_pgd_t_10 {
   pgdval_t pgd ;
};
#line 56 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_10 pgd_t;
#line 57 "include/asm/page.h"
struct __anonstruct_pgprot_t_11 {
   pgprotval_t pgprot ;
};
#line 57 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_11 pgprot_t;
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "include/asm/desc_defs.h"
union __anonunion____missing_field_name_14 {
   struct __anonstruct____missing_field_name_15 __annonCompField3 ;
   struct __anonstruct____missing_field_name_16 __annonCompField4 ;
};
#line 22 "include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_14 __annonCompField5 ;
} __attribute__((__packed__)) ;
#line 141 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_19 {
   unsigned long bits[((8UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 141 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_19 cpumask_t;
#line 37 "include/asm/paravirt.h"
struct thread_struct;
#line 40
struct mm_struct;
#line 326
struct raw_spinlock;
#line 20 "include/asm/thread_info.h"
struct task_struct;
#line 21
struct exec_domain;
#line 50 "include/asm/ds.h"
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
#line 209 "include/asm/ds.h"
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2] ;
   ds_ovfl_callback_t callback[2] ;
   void *buffer[2] ;
   unsigned int pages[2] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
#line 99 "include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 8 "include/asm/math_emu.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 11 "include/asm/pda.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 88 "include/linux/personality.h"
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 285 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 301 "include/asm/processor.h"
struct __anonstruct____missing_field_name_26 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "include/asm/processor.h"
struct __anonstruct____missing_field_name_27 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "include/asm/processor.h"
union __anonunion____missing_field_name_25 {
   struct __anonstruct____missing_field_name_26 __annonCompField7 ;
   struct __anonstruct____missing_field_name_27 __annonCompField8 ;
};
#line 301 "include/asm/processor.h"
union __anonunion____missing_field_name_28 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 301 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_25 __annonCompField9 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_28 __annonCompField10 ;
} __attribute__((__aligned__(16))) ;
#line 336 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 356 "include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 362 "include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 368 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 387 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 589 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_29 {
   unsigned long seg ;
};
#line 589 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_29 mm_segment_t;
#line 24 "include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_30 {
   unsigned int lock ;
};
#line 14 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_30 raw_rwlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 7 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 25 "include/linux/lockdep.h"
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
#line 68 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 72 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 79 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[LOCK_USAGE_STATES] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
};
#line 162 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 201 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_31 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_31 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_32 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_32 rwlock_t;
#line 19 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_33 {
   int counter ;
};
#line 19 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_33 atomic_t;
#line 196 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_34 {
   long counter ;
};
#line 196 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_34 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[(((unsigned long )(1 << 6) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 67 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 665 "include/linux/mmzone.h"
struct file;
#line 37 "include/linux/pm.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 145 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
};
#line 203 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 334
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 344 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_84 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_84 mm_context_t;
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 14 "include/linux/time.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 9 "include/linux/timer.h"
struct tvec_base;
#line 11 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 181
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 27 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 76 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
#line 104 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 110 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 117 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 151 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 35 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 70 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 6] ;
   struct kmem_cache_cpu *cpu_slab[8] ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 50 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 78
struct dcookie_struct;
#line 82
struct inode;
#line 82 "include/linux/dcache.h"
union __anonunion_d_u_90 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 82
struct dentry_operations;
#line 82
struct super_block;
#line 82 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_90 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
#line 129 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 95 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 95 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 14 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 303 "include/linux/fs.h"
struct export_operations;
#line 305
struct iovec;
#line 307
struct kiocb;
#line 308
struct pipe_inode_info;
#line 309
struct poll_table_struct;
#line 310
struct kstatfs;
#line 355 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 98 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 21 "include/linux/dqblk_v1.h"
struct v1_mem_dqinfo {

};
#line 20 "include/linux/dqblk_v2.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 203
struct quota_format_type;
#line 205 "include/linux/quota.h"
union __anonunion_u_94 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 205 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_94 u ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 275 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 286 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 302 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 316 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 330 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 416 "include/linux/fs.h"
struct address_space;
#line 417
struct writeback_control;
#line 460 "include/linux/fs.h"
union __anonunion_arg_96 {
   char *buf ;
   void *data ;
};
#line 460 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_95 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_96 arg ;
   int error ;
};
#line 460 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_95 read_descriptor_t;
#line 473 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 529
struct backing_dev_info;
#line 530 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 554
struct hd_struct;
#line 554
struct gendisk;
#line 554 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 624
struct inode_operations;
#line 624
struct file_operations;
#line 624
struct file_lock;
#line 624
struct cdev;
#line 624 "include/linux/fs.h"
union __anonunion____missing_field_name_97 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 624
struct dnotify_struct;
#line 624 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_97 __annonCompField11 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 779 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 790 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 813 "include/linux/fs.h"
union __anonunion_f_u_98 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 813 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_98 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 932
struct files_struct;
#line 932 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 934 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 939 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 961 "include/linux/fs.h"
struct fasync_struct;
#line 961 "include/linux/fs.h"
struct __anonstruct_afs_100 {
   struct list_head link ;
   int state ;
};
#line 961 "include/linux/fs.h"
union __anonunion_fl_u_99 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_100 afs ;
};
#line 961 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_99 fl_u ;
};
#line 1073 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1108
struct file_system_type;
#line 1108
struct super_operations;
#line 1108
struct xattr_handler;
#line 1108
struct mtd_info;
#line 1108 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1230 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1295 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1325 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1354
struct seq_file;
#line 1368 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1550 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1927
struct bio;
#line 6 "include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 31 "include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 7 "include/asm/termios.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 95 "include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 9 "include/linux/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5] ;
   __u16 x_sflag ;
};
#line 12 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 224 "include/linux/tty_driver.h"
struct tty_struct;
#line 225
struct tty_driver;
#line 227 "include/linux/tty_driver.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver *driver , struct inode *inode ,
                                int idx ) ;
   int (*install)(struct tty_driver *driver , struct tty_struct *tty ) ;
   void (*remove)(struct tty_driver *driver , struct tty_struct *tty ) ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   void (*shutdown)(struct tty_struct *tty ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*read_proc)(char *page , char **start , off_t off , int count , int *eof ,
                    void *data ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct tty_struct *real_tty , struct winsize *ws ) ;
   int (*set_termiox)(struct tty_struct *tty , struct termiox *tnew ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
};
#line 271
struct proc_dir_entry;
#line 271 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 107 "include/linux/tty_ldisc.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 145 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 57 "include/linux/tty.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
#line 69 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 170
struct signal_struct;
#line 183 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 211 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 317
struct class;
#line 40 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 29 "include/linux/moduleparam.h"
struct kernel_param;
#line 36
struct kparam_string;
#line 36
struct kparam_array;
#line 36 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_107 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 36 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_107 __annonCompField12 ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 18 "include/linux/marker.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 35 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
#line 10 "include/asm/local.h"
struct __anonstruct_local_t_108 {
   atomic_long_t a ;
};
#line 10 "include/asm/local.h"
typedef struct __anonstruct_local_t_108 local_t;
#line 5 "include/asm/module.h"
struct mod_arch_specific {

};
#line 33 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 47 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 220 "include/linux/module.h"
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 225
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 232
struct module_param_attrs;
#line 232
struct module_sect_attrs;
#line 232
struct module_notes_attrs;
#line 232 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8] ;
};
#line 562
struct device_driver;
#line 21 "include/linux/serial.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 34 "include/linux/serial.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 168 "include/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 98 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 146 "include/linux/usb/ch9.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
} __attribute__((__packed__)) ;
#line 211 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 265 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 302 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 320 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 399 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 567
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 574
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_111 {
   u16 inuse ;
   u16 objects ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_110 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_111 __annonCompField13 ;
};
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_113 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_112 {
   struct __anonstruct____missing_field_name_113 __annonCompField15 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_114 {
   unsigned long index ;
   void *freelist ;
};
#line 39 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_110 __annonCompField14 ;
   union __anonunion____missing_field_name_112 __annonCompField16 ;
   union __anonunion____missing_field_name_114 __annonCompField17 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 108 "include/linux/mm_types.h"
struct __anonstruct_vm_set_116 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 108 "include/linux/mm_types.h"
union __anonunion_shared_115 {
   struct __anonstruct_vm_set_116 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 108
struct anon_vma;
#line 108
struct vm_operations_struct;
#line 108
struct mempolicy;
#line 108 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_115 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 165 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 170 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 176
struct kioctx;
#line 176
struct mmu_notifier_mm;
#line 176 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 18) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "include/asm/signal.h"
struct siginfo;
#line 30 "include/asm/signal.h"
struct __anonstruct_sigset_t_117 {
   unsigned long sig[64 / 64] ;
};
#line 30 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_117 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 165 "include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 172 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_119 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_120 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_121 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_122 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_123 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_124 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_118 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_119 _kill ;
   struct __anonstruct__timer_120 _timer ;
   struct __anonstruct__rt_121 _rt ;
   struct __anonstruct__sigchld_122 _sigchld ;
   struct __anonstruct__sigfault_123 _sigfault ;
   struct __anonstruct__sigpoll_124 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_118 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_127 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_127 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 24 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 25
struct hrtimer_cpu_base;
#line 38
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 60
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_PERCPU = 3,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 4
} ;
#line 122 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 163 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer *t , struct hrtimer_clock_base *b , ktime_t n ) ;
};
#line 199 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 17 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 140
struct cfs_rq;
#line 141
struct task_group;
#line 335
struct nsproxy;
#line 57 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 86 "include/linux/aio.h"
union __anonunion_ki_obj_129 {
   void *user ;
   struct task_struct *tsk ;
};
#line 86 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_129 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 166 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 413 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 435 "include/linux/sched.h"
union __anonunion____missing_field_name_130 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 435 "include/linux/sched.h"
union __anonunion____missing_field_name_131 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 435
struct taskstats;
#line 435
struct tty_audit_buf;
#line 435 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion____missing_field_name_130 __annonCompField18 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_131 __annonCompField19 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct list_head cpu_timers[3] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 581 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 622
struct reclaim_state;
#line 625 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 646 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 691
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 735 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 752
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 770 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 847
struct io_context;
#line 850 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
#line 887
struct audit_context;
#line 892
struct rq;
#line 895 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 943 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 957 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1014
struct rt_rq;
#line 1014 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1030
struct linux_binfmt;
#line 1030
struct css_set;
#line 1030
struct compat_robust_list_head;
#line 1030 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
};
#line 20 "include/linux/klist.h"
struct klist_node;
#line 21 "include/linux/klist.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 40 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 4 "include/asm/device.h"
struct dma_mapping_ops;
#line 4 "include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 32 "include/linux/device.h"
struct driver_private;
#line 34
struct class_private;
#line 35
struct bus_type;
#line 36
struct bus_type_private;
#line 38 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 51
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 205
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 285 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
};
#line 298 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 358 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 367
struct dma_coherent_mem;
#line 367 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 24 "include/linux/usb.h"
struct usb_device;
#line 25
struct usb_driver;
#line 26
struct wusb_dev;
#line 45
struct ep_device;
#line 61 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 73 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 86
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 148 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 209 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 261 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 292 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 299
struct mon_bus;
#line 299 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 349
struct usb_tt;
#line 414 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 919 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 938 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 997 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
   unsigned int soft_unbind : 1 ;
};
#line 1125 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1132
struct urb;
#line 1134 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
#line 1317 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 64 "include/linux/usb/serial.h"
struct usb_serial;
#line 64 "include/linux/usb/serial.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 129
struct usb_serial_driver;
#line 129 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 197 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial *serial , struct usb_device_id  const  *id ) ;
   int (*attach)(struct usb_serial *serial ) ;
   int (*calc_num_ports)(struct usb_serial *serial ) ;
   void (*shutdown)(struct usb_serial *serial ) ;
   int (*port_probe)(struct usb_serial_port *port ) ;
   int (*port_remove)(struct usb_serial_port *port ) ;
   int (*suspend)(struct usb_serial *serial , pm_message_t message ) ;
   int (*resume)(struct usb_serial *serial ) ;
   int (*open)(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
   int (*write)(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                int count ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct usb_serial_port *port , struct ktermios *old ) ;
   void (*break_ctl)(struct tty_struct *tty , int break_state ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   void (*read_int_callback)(struct urb *urb ) ;
   void (*write_int_callback)(struct urb *urb ) ;
   void (*read_bulk_callback)(struct urb *urb ) ;
   void (*write_bulk_callback)(struct urb *urb ) ;
};
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   struct urb *int_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   char zombie ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16] ;
   char busy[16] ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 301 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 197 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 51 "include/asm/pda.h"
extern  __attribute__((__noreturn__)) void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 23 "include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (sizeof(_proxy_pda.pcurrent)) {
  case 2UL: 
#line 25
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 4UL: 
#line 25
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 8UL: 
#line 25
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  default: 
#line 25
  __bad_pda_field();
  }
#line 25
  return (ret__);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
#line 78
  tmp___0 = variable_test_bit(flag, & ti->flags);
#line 78
  return (tmp___0);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 35
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 47
extern void _spin_unlock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 135
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 425
extern long interruptible_sleep_on_timeout(wait_queue_head_t *q , long timeout ) ;
#line 431
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 433
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 434
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 101 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref *kref ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 275 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 277
  tmp = kmalloc(size, flags | 32768U);
#line 277
  return (tmp);
}
}
#line 21 "include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 23
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 315 "include/linux/tty_driver.h"
__inline extern struct tty_driver *tty_driver_kref_get(struct tty_driver *d ) 
{ 


  {
#line 317
  kref_get(& d->kref);
#line 318
  return (d);
}
}
#line 328 "include/linux/tty.h"
__inline extern struct tty_struct *tty_kref_get(struct tty_struct *tty ) 
{ 


  {
#line 330
  if (tty) {
#line 331
    kref_get(& tty->kref);
  } else {

  }
#line 332
  return (tty);
}
}
#line 334
extern void tty_kref_put(struct tty_struct *tty ) ;
#line 374
extern void tty_flip_buffer_push(struct tty_struct *tty ) ;
#line 378
extern speed_t tty_get_baud_rate(struct tty_struct *tty ) ;
#line 393
extern void tty_wakeup(struct tty_struct *tty ) ;
#line 422
extern struct tty_struct *tty_port_tty_get(struct tty_port *port ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct *tty , size_t size ) ;
#line 5
extern int tty_insert_flip_string(struct tty_struct *tty , unsigned char const   *chars ,
                                  size_t size ) ;
#line 156 "include/linux/moduleparam.h"
extern int param_set_bool(char const   *val , struct kernel_param *kp ) ;
#line 157
extern int param_get_bool(char *buffer , struct kernel_param *kp ) ;
#line 65 "include/linux/module.h"
int init_module(void) ;
#line 66
void cleanup_module(void) ;
#line 84
extern struct module __this_module ;
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 2000 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2002
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2002
  return (tmp);
}
}
#line 2020 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 2022
  tmp = test_tsk_thread_flag(p, 2);
#line 2022
  if (tmp) {
#line 2022
    tmp___0 = 1;
  } else {
#line 2022
    tmp___0 = 0;
  }
#line 2022
  tmp___1 = __builtin_expect(tmp___0, 0);
#line 2022
  return (tmp___1);
}
}
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
#line 428
  return (dev->bus_id);
}
}
#line 453 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev ) 
{ 


  {
#line 455
  return (dev->driver_data);
}
}
#line 458 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 460
  dev->driver_data = data;
#line 461
  return;
}
}
#line 536
extern char const   *dev_driver_string(struct device  const  *dev ) ;
#line 1080 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1082 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1084
  tmp = usb_register_driver(driver, & __this_module, "mos7840");
#line 1084
  return (tmp);
}
}
#line 1086
extern void usb_deregister(struct usb_driver * ) ;
#line 1368 "include/linux/usb.h"
__inline static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 


  {
#line 1377
  urb->dev = dev;
#line 1378
  urb->pipe = pipe;
#line 1379
  urb->setup_packet = setup_packet;
#line 1380
  urb->transfer_buffer = transfer_buffer;
#line 1381
  urb->transfer_buffer_length = buffer_length;
#line 1382
  urb->complete = complete_fn;
#line 1383
  urb->context = context;
#line 1384
  return;
}
}
#line 1399 "include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
#line 1407
  urb->dev = dev;
#line 1408
  urb->pipe = pipe;
#line 1409
  urb->transfer_buffer = transfer_buffer;
#line 1410
  urb->transfer_buffer_length = buffer_length;
#line 1411
  urb->complete = complete_fn;
#line 1412
  urb->context = context;
#line 1413
  return;
}
}
#line 1433 "include/linux/usb.h"
__inline static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 


  {
#line 1442
  urb->dev = dev;
#line 1443
  urb->pipe = pipe;
#line 1444
  urb->transfer_buffer = transfer_buffer;
#line 1445
  urb->transfer_buffer_length = buffer_length;
#line 1446
  urb->complete = complete_fn;
#line 1447
  urb->context = context;
#line 1448
  if ((unsigned int )dev->speed == (unsigned int )USB_SPEED_HIGH) {
#line 1449
    urb->interval = 1 << (interval - 1);
  } else {
#line 1451
    urb->interval = interval;
  }
#line 1452
  urb->start_frame = -1;
#line 1453
  return;
}
}
#line 1456
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1457
void usb_free_urb(struct urb *urb ) ;
#line 1460
extern int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
#line 1462
extern void usb_kill_urb(struct urb *urb ) ;
#line 1525
extern int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request ,
                           __u8 requesttype , __u16 value , __u16 index , void *data ,
                           __u16 size , int timeout ) ;
#line 1543
extern int usb_clear_halt(struct usb_device *dev , int pipe ) ;
#line 1658 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1661
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 101 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 103
  tmp = dev_get_drvdata(& port->dev);
#line 103
  return (tmp);
}
}
#line 106 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 109
  dev_set_drvdata(& port->dev, data);
#line 110
  return;
}
}
#line 249
extern int usb_serial_register(struct usb_serial_driver *driver ) ;
#line 250
extern void usb_serial_deregister(struct usb_serial_driver *driver ) ;
#line 253
extern int usb_serial_probe(struct usb_interface *iface , struct usb_device_id  const  *id ) ;
#line 255
extern void usb_serial_disconnect(struct usb_interface *iface ) ;
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_port_id_table[4]  = {      {1 | 2, 38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}};
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_id_table_combined[4]  __attribute__((__section__(".devinit.data")))  = {      {1 | 2,
      38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 185
extern struct usb_device_id  const  __mod_usb_device_table  __attribute__((__unused__,
__alias__("moschip_id_table_combined"))) ;
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int debug  ;
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 232
  dev = (port->serial)->dev;
#line 233
  val = (int )val & 255;
#line 234
  while (1) {
#line 234
    if (debug) {
#line 234
      printk("<7>%s: mos7840_set_reg_sync offset is %x, value %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             reg, val);
    } else {

    }
#line 234
    break;
  }
#line 236
  tmp = __create_pipe(dev, 0);
#line 236
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 236
  return (tmp___0);
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  unsigned int tmp ;

  {
#line 250
  dev = (port->serial)->dev;
#line 251
  ret = 0;
#line 253
  tmp = __create_pipe(dev, 0);
#line 253
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, 0,
                        reg, val, 1, 250 * 5);
#line 256
  while (1) {
#line 256
    if (debug) {
#line 256
      printk("<7>%s: mos7840_get_reg_sync offset is %x, return val %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             reg, *val);
    } else {

    }
#line 256
    break;
  }
#line 257
  *val = (int )*val & 255;
#line 258
  return (ret);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 271
  dev = (port->serial)->dev;
#line 272
  val = (int )val & 255;
#line 275
  if ((int )(port->serial)->num_ports == 4) {
#line 276
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 278
    while (1) {
#line 278
      if (debug) {
#line 278
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 278
      break;
    }
  } else
#line 280
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 281
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 283
    while (1) {
#line 283
      if (debug) {
#line 283
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 283
      break;
    }
  } else {
#line 286
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8);
#line 289
    while (1) {
#line 289
      if (debug) {
#line 289
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 289
      break;
    }
  }
#line 293
  tmp = __create_pipe(dev, 0);
#line 293
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 293
  return (tmp___0);
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  unsigned int tmp ;

  {
#line 307
  dev = (port->serial)->dev;
#line 308
  ret = 0;
#line 314
  if ((int )(port->serial)->num_ports == 4) {
#line 315
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 318
    while (1) {
#line 318
      if (debug) {
#line 318
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 318
      break;
    }
  } else
#line 320
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 321
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 323
    while (1) {
#line 323
      if (debug) {
#line 323
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 323
      break;
    }
  } else {
#line 326
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8;
#line 328
    while (1) {
#line 328
      if (debug) {
#line 328
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 328
      break;
    }
  }
#line 332
  tmp = __create_pipe(dev, 0);
#line 332
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, Wval,
                        reg, val, 1, 250 * 5);
#line 335
  *val = (int )*val & 255;
#line 336
  return (ret);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_dump_serial_port(struct moschip_port *mos7840_port ) 
{ 


  {
#line 342
  while (1) {
#line 342
    if (debug) {
#line 342
      printk("<7>%s: ***************************************\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 342
    break;
  }
#line 343
  while (1) {
#line 343
    if (debug) {
#line 343
      printk("<7>%s: SpRegOffset is %2x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->SpRegOffset);
    } else {

    }
#line 343
    break;
  }
#line 344
  while (1) {
#line 344
    if (debug) {
#line 344
      printk("<7>%s: ControlRegOffset is %2x \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->ControlRegOffset);
    } else {

    }
#line 344
    break;
  }
#line 345
  while (1) {
#line 345
    if (debug) {
#line 345
      printk("<7>%s: DCRRegOffset is %2x \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->DcrRegOffset);
    } else {

    }
#line 345
    break;
  }
#line 346
  while (1) {
#line 346
    if (debug) {
#line 346
      printk("<7>%s: ***************************************\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 346
    break;
  }
#line 348
  return;
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
__inline static void mos7840_set_port_private(struct usb_serial_port *port , struct moschip_port *data ) 
{ 


  {
#line 360
  usb_set_serial_port_data(port, (void *)data);
#line 361
  return;
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
__inline static struct moschip_port *mos7840_get_port_private(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 367
  tmp = usb_get_serial_port_data(port);
#line 367
  return ((struct moschip_port *)tmp);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;

  {
#line 374
  mos7840_port = port;
#line 375
  icount = & mos7840_port->icount;
#line 376
  if ((int )new_msr & (((16 | 32) | 64) | 128)) {
#line 379
    icount = & mos7840_port->icount;
#line 382
    if ((int )new_msr & 16) {
#line 383
      icount->cts = icount->cts + (__u32 )1;
#line 384
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 386
    if ((int )new_msr & 32) {
#line 387
      icount->dsr = icount->dsr + (__u32 )1;
#line 388
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 390
    if ((int )new_msr & 128) {
#line 391
      icount->dcd = icount->dcd + (__u32 )1;
#line 392
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 394
    if ((int )new_msr & 64) {
#line 395
      icount->rng = icount->rng + (__u32 )1;
#line 396
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 399
  return;
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;

  {
#line 405
  while (1) {
#line 405
    if (debug) {
#line 405
      printk("<7>%s: %s - %02x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_handle_new_lsr", new_lsr);
    } else {

    }
#line 405
    break;
  }
#line 407
  if ((int )new_lsr & 16) {
#line 413
    new_lsr = (int )new_lsr & (int )((__u8 )(2 | 16));
  } else {

  }
#line 417
  icount = & port->icount;
#line 418
  if ((int )new_lsr & 16) {
#line 419
    icount->brk = icount->brk + (__u32 )1;
#line 420
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 422
  if ((int )new_lsr & 2) {
#line 423
    icount->overrun = icount->overrun + (__u32 )1;
#line 424
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 426
  if ((int )new_lsr & 4) {
#line 427
    icount->parity = icount->parity + (__u32 )1;
#line 428
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 430
  if ((int )new_lsr & 8) {
#line 431
    icount->frame = icount->frame + (__u32 )1;
#line 432
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 434
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  __u8 regval ;
  int result ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 447
  regval = 0;
#line 448
  result = 0;
#line 449
  status = urb->status;
#line 451
  mos7840_port = urb->context;
#line 453
  switch (status) {
  case 0: 
#line 456
  break;
  case -108: 
  case -2: 
  case -104: 
#line 461
  while (1) {
#line 461
    if (debug) {
#line 461
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 461
    break;
  }
#line 463
  return;
  default: 
#line 465
  while (1) {
#line 465
    if (debug) {
#line 465
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 465
    break;
  }
#line 467
  goto exit;
  }
#line 470
  while (1) {
#line 470
    if (debug) {
#line 470
      printk("<7>%s: %s urb buffer size is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", urb->actual_length);
    } else {

    }
#line 470
    break;
  }
#line 471
  while (1) {
#line 471
    if (debug) {
#line 471
      printk("<7>%s: %s mos7840_port->MsrLsr is %d port %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
    } else {

    }
#line 471
    break;
  }
#line 473
  data = urb->transfer_buffer;
#line 474
  regval = *(data + 0);
#line 475
  while (1) {
#line 475
    if (debug) {
#line 475
      printk("<7>%s: %s data is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", regval);
    } else {

    }
#line 475
    break;
  }
#line 476
  if (mos7840_port->MsrLsr == 0) {
#line 477
    mos7840_handle_new_msr(mos7840_port, regval);
  } else
#line 478
  if (mos7840_port->MsrLsr == 1) {
#line 479
    mos7840_handle_new_lsr(mos7840_port, regval);
  } else {

  }
  exit: 
#line 482
  _spin_lock(& mos7840_port->pool_lock);
#line 483
  if (! mos7840_port->zombie) {
#line 484
    result = usb_submit_urb(mos7840_port->int_urb, 32U);
  } else {

  }
#line 485
  _spin_unlock(& mos7840_port->pool_lock);
#line 486
  if (result) {
#line 487
    tmp = dev_name(& (urb->dev)->dev);
#line 487
    tmp___0 = dev_driver_string(& (urb->dev)->dev);
#line 487
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_control_callback",
           result);
  } else {

  }
#line 491
  return;
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 496
  dev = ((mcs->port)->serial)->dev;
#line 497
  dr = mcs->dr;
#line 498
  buffer = mcs->ctrl_buf;
#line 501
  dr->bRequestType = 192;
#line 502
  dr->bRequest = 13;
#line 503
  dr->wValue = Wval;
#line 504
  dr->wIndex = reg;
#line 505
  dr->wLength = (__u16 )2;
#line 507
  tmp = __create_pipe(dev, 0);
#line 507
  usb_fill_control_urb(mcs->control_urb, dev, ((unsigned int )(2 << 30) | tmp) | 128U,
                       (unsigned char *)dr, buffer, 2, & mos7840_control_callback,
                       mcs);
#line 510
  (mcs->control_urb)->transfer_buffer_length = 2;
#line 511
  ret = usb_submit_urb(mcs->control_urb, 32U);
#line 512
  return (ret);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 530
  rv = 0;
#line 531
  wreg = 0;
#line 532
  status = urb->status;
#line 534
  while (1) {
#line 534
    if (debug) {
#line 534
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " : Entering\n");
    } else {

    }
#line 534
    break;
  }
#line 536
  switch (status) {
  case 0: 
#line 539
  break;
  case -108: 
  case -2: 
  case -104: 
#line 544
  while (1) {
#line 544
    if (debug) {
#line 544
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 544
    break;
  }
#line 546
  return;
  default: 
#line 548
  while (1) {
#line 548
    if (debug) {
#line 548
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 548
    break;
  }
#line 550
  goto exit;
  }
#line 553
  length = urb->actual_length;
#line 554
  data = urb->transfer_buffer;
#line 556
  serial = urb->context;
#line 565
  if (length && length > 5) {
#line 566
    while (1) {
#line 566
      if (debug) {
#line 566
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Wrong data !!!");
      } else {

      }
#line 566
      break;
    }
#line 567
    return;
  } else {

  }
#line 570
  sp[0] = *(data + 0);
#line 571
  sp[1] = *(data + 1);
#line 572
  sp[2] = *(data + 2);
#line 573
  sp[3] = *(data + 3);
#line 574
  st = *(data + 4);
#line 576
  i = 0;
#line 576
  while (1) {
#line 576
    if (i < (int )serial->num_ports) {

    } else {
#line 576
      break;
    }
#line 577
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 578
    wval = (((int )((__u16 )(serial->port[i])->number) - (int )((__u16 )serial->minor)) + 1) << 8;
#line 581
    if (mos7840_port->open) {
#line 582
      if ((int )sp[i] & 1) {
#line 583
        while (1) {
#line 583
          if (debug) {
#line 583
            printk("<7>%s: SP%d No Interrupt !!!\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 583
          break;
        }
      } else {
#line 585
        switch ((int )sp[i] & 15) {
        case 6: 
#line 587
        while (1) {
#line 587
          if (debug) {
#line 587
            printk("<7>%s: Serial Port %d: Receiver status error or \n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 587
          break;
        }
#line 588
        while (1) {
#line 588
          if (debug) {
#line 588
            printk("<7>%s: address bit detected in 9-bit mode\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
          } else {

          }
#line 588
          break;
        }
#line 589
        mos7840_port->MsrLsr = 1;
#line 590
        wreg = (__u16 )5;
#line 591
        break;
        case 0: 
#line 593
        while (1) {
#line 593
          if (debug) {
#line 593
            printk("<7>%s: Serial Port %d: Modem status change\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 593
          break;
        }
#line 594
        mos7840_port->MsrLsr = 0;
#line 595
        wreg = (__u16 )6;
#line 596
        break;
        }
#line 598
        _spin_lock(& mos7840_port->pool_lock);
#line 599
        if (! mos7840_port->zombie) {
#line 600
          rv = mos7840_get_reg(mos7840_port, wval, wreg, & Data);
        } else {
#line 602
          _spin_unlock(& mos7840_port->pool_lock);
#line 603
          return;
        }
#line 605
        _spin_unlock(& mos7840_port->pool_lock);
      }
    } else {

    }
#line 576
    i = i + 1;
  }
#line 609
  if (! (rv < 0)) {
#line 611
    return;
  } else {

  }
  exit: 
#line 613
  result = usb_submit_urb(urb, 32U);
#line 614
  if (result) {
#line 615
    tmp = dev_name(& (urb->dev)->dev);
#line 615
    tmp___0 = dev_driver_string(& (urb->dev)->dev);
#line 615
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_interrupt_callback",
           result);
  } else {

  }
#line 619
  return;
}
}
#line 621 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 


  {
#line 624
  if (! port) {
#line 625
    while (1) {
#line 625
      if (debug) {
#line 625
        printk("<7>%s: %s - port == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 625
      break;
    }
#line 626
    return (-1);
  } else {

  }
#line 628
  if (! port->serial) {
#line 629
    while (1) {
#line 629
      if (debug) {
#line 629
        printk("<7>%s: %s - port->serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 629
      break;
    }
#line 630
    return (-1);
  } else {

  }
#line 633
  return (0);
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 


  {
#line 640
  if (! serial) {
#line 641
    while (1) {
#line 641
      if (debug) {
#line 641
        printk("<7>%s: %s - serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 641
      break;
    }
#line 642
    return (-1);
  } else {

  }
#line 644
  if (! serial->type) {
#line 645
    while (1) {
#line 645
      if (debug) {
#line 645
        printk("<7>%s: %s - serial->type == NULL!\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 645
      break;
    }
#line 646
    return (-1);
  } else {

  }
#line 649
  return (0);
}
}
#line 652 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 656
  if (! port) {
#line 661
    return ((void *)0);
  } else {
#line 656
    tmp = mos7840_port_paranoia_check(port, function);
#line 656
    if (tmp) {
#line 661
      return ((void *)0);
    } else {
#line 656
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 656
      if (tmp___0) {
#line 661
        return ((void *)0);
      } else {

      }
    }
  }
#line 664
  return (port->serial);
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int tmp ;

  {
#line 681
  status = urb->status;
#line 683
  if (status) {
#line 684
    while (1) {
#line 684
      if (debug) {
#line 684
        printk("<7>%s: nonzero read bulk status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 684
      break;
    }
#line 685
    return;
  } else {

  }
#line 688
  mos7840_port = urb->context;
#line 689
  if (! mos7840_port) {
#line 690
    while (1) {
#line 690
      if (debug) {
#line 690
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "NULL mos7840_port pointer \n");
      } else {

      }
#line 690
      break;
    }
#line 691
    return;
  } else {

  }
#line 694
  port = mos7840_port->port;
#line 695
  tmp = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 695
  if (tmp) {
#line 696
    while (1) {
#line 696
      if (debug) {
#line 696
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 696
      break;
    }
#line 697
    return;
  } else {

  }
#line 700
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 701
  if (! serial) {
#line 702
    while (1) {
#line 702
      if (debug) {
#line 702
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Bad serial pointer ");
      } else {

      }
#line 702
      break;
    }
#line 703
    return;
  } else {

  }
#line 706
  while (1) {
#line 706
    if (debug) {
#line 706
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering... \n");
    } else {

    }
#line 706
    break;
  }
#line 708
  data = urb->transfer_buffer;
#line 710
  while (1) {
#line 710
    if (debug) {
#line 710
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ........... \n");
    } else {

    }
#line 710
    break;
  }
#line 712
  if (urb->actual_length) {
#line 713
    tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 714
    if (tty) {
#line 715
      tty_buffer_request_room(tty, urb->actual_length);
#line 716
      tty_insert_flip_string(tty, data, urb->actual_length);
#line 717
      while (1) {
#line 717
        if (debug) {
#line 717
          printk("<7>%s:  %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 data);
        } else {

        }
#line 717
        break;
      }
#line 718
      tty_flip_buffer_push(tty);
#line 719
      tty_kref_put(tty);
    } else {

    }
#line 721
    mos7840_port->icount.rx = mos7840_port->icount.rx + (__u32 )urb->actual_length;
#line 722
    __asm__  volatile   ("": : : "memory");
#line 723
    while (1) {
#line 723
      if (debug) {
#line 723
        printk("<7>%s: mos7840_port->icount.rx is %d:\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               mos7840_port->icount.rx);
      } else {

      }
#line 723
      break;
    }
  } else {

  }
#line 727
  if (! mos7840_port->read_urb) {
#line 728
    while (1) {
#line 728
      if (debug) {
#line 728
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!\n");
      } else {

      }
#line 728
      break;
    }
#line 729
    return;
  } else {

  }
#line 733
  (mos7840_port->read_urb)->dev = serial->dev;
#line 735
  retval = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 737
  if (retval) {
#line 738
    while (1) {
#line 738
      if (debug) {
#line 738
        printk("<7>%s:  usb_submit_urb(read bulk) failed, retval = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               retval);
      } else {

      }
#line 738
      break;
    }
  } else {

  }
#line 741
  return;
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  int tmp ;

  {
#line 753
  status = urb->status;
#line 756
  mos7840_port = urb->context;
#line 757
  _spin_lock(& mos7840_port->pool_lock);
#line 758
  i = 0;
#line 758
  while (1) {
#line 758
    if (i < 16) {

    } else {
#line 758
      break;
    }
#line 759
    if ((unsigned long )urb == (unsigned long )mos7840_port->write_urb_pool[i]) {
#line 760
      mos7840_port->busy[i] = 0;
#line 761
      break;
    } else {

    }
#line 758
    i = i + 1;
  }
#line 764
  _spin_unlock(& mos7840_port->pool_lock);
#line 766
  if (status) {
#line 767
    while (1) {
#line 767
      if (debug) {
#line 767
        printk("<7>%s: nonzero write bulk status received:%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 767
      break;
    }
#line 768
    return;
  } else {

  }
#line 771
  tmp = mos7840_port_paranoia_check(mos7840_port->port, "mos7840_bulk_out_data_callback");
#line 771
  if (tmp) {
#line 772
    while (1) {
#line 772
      if (debug) {
#line 772
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 772
      break;
    }
#line 773
    return;
  } else {

  }
#line 776
  while (1) {
#line 776
    if (debug) {
#line 776
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .........");
    } else {

    }
#line 776
    break;
  }
#line 778
  tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 779
  if (tty && mos7840_port->open) {
#line 780
    tty_wakeup(tty);
  } else {

  }
#line 781
  tty_kref_put(tty);
#line 783
  return;
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 820
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 820
  if (tmp) {
#line 821
    while (1) {
#line 821
      if (debug) {
#line 821
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 821
      break;
    }
#line 822
    return (-19);
  } else {

  }
#line 825
  serial = port->serial;
#line 827
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 827
  if (tmp___0) {
#line 828
    while (1) {
#line 828
      if (debug) {
#line 828
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 828
      break;
    }
#line 829
    return (-19);
  } else {

  }
#line 832
  mos7840_port = mos7840_get_port_private(port);
#line 833
  port0 = mos7840_get_port_private(serial->port[0]);
#line 835
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 836
    return (-19);
  } else {

  }
#line 838
  usb_clear_halt(serial->dev, (port->write_urb)->pipe);
#line 839
  usb_clear_halt(serial->dev, (port->read_urb)->pipe);
#line 840
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 843
  j = 0;
#line 843
  while (1) {
#line 843
    if (j < 16) {

    } else {
#line 843
      break;
    }
#line 844
    urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 845
    mos7840_port->write_urb_pool[j] = urb;
#line 847
    if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 848
      printk("<3>mos7840: No more urbs???\n");
#line 849
      goto __Cont;
    } else {

    }
#line 852
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 854
    if (! urb->transfer_buffer) {
#line 855
      usb_free_urb(urb);
#line 856
      mos7840_port->write_urb_pool[j] = (void *)0;
#line 857
      printk("<3>mos7840: %s-out of memory for urb buffers.\n", "mos7840_open");
#line 858
      goto __Cont;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 843
    j = j + 1;
  }
#line 876
  Data = 0;
#line 877
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 878
  if (status < 0) {
#line 879
    while (1) {
#line 879
      if (debug) {
#line 879
        printk("<7>%s: Reading Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 879
      break;
    }
#line 880
    return (-1);
  } else {

  }
#line 882
  Data = (int )Data | 128;
#line 883
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 884
  if (status < 0) {
#line 885
    while (1) {
#line 885
      if (debug) {
#line 885
        printk("<7>%s: writing Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 885
      break;
    }
#line 886
    return (-1);
  } else {

  }
#line 889
  Data = (int )Data & ~ 128;
#line 890
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 891
  if (status < 0) {
#line 892
    while (1) {
#line 892
      if (debug) {
#line 892
        printk("<7>%s: writing Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 892
      break;
    }
#line 893
    return (-1);
  } else {

  }
#line 897
  Data = 0;
#line 898
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 900
  if (status < 0) {
#line 901
    while (1) {
#line 901
      if (debug) {
#line 901
        printk("<7>%s: Reading Controlreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 901
      break;
    }
#line 902
    return (-1);
  } else {

  }
#line 904
  Data = (int )Data | 8;
#line 905
  Data = (int )Data | 32;
#line 906
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 908
  if (status < 0) {
#line 909
    while (1) {
#line 909
      if (debug) {
#line 909
        printk("<7>%s: writing Controlreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 909
      break;
    }
#line 910
    return (-1);
  } else {

  }
#line 917
  Data = 0;
#line 918
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 919
  if (status < 0) {
#line 920
    while (1) {
#line 920
      if (debug) {
#line 920
        printk("<7>%s: disableing interrupts failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 920
      break;
    }
#line 921
    return (-1);
  } else {

  }
#line 924
  Data = 0;
#line 925
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 926
  if (status < 0) {
#line 927
    while (1) {
#line 927
      if (debug) {
#line 927
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 927
      break;
    }
#line 928
    return (-1);
  } else {

  }
#line 931
  Data = 207;
#line 932
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 933
  if (status < 0) {
#line 934
    while (1) {
#line 934
      if (debug) {
#line 934
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 934
      break;
    }
#line 935
    return (-1);
  } else {

  }
#line 938
  Data = 3;
#line 939
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 940
  mos7840_port->shadowLCR = Data;
#line 942
  Data = 11;
#line 943
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 944
  mos7840_port->shadowMCR = Data;
#line 946
  Data = 0;
#line 947
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 948
  mos7840_port->shadowLCR = Data;
#line 950
  Data = (int )Data | (int )((__u16 )128);
#line 951
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 953
  Data = 12;
#line 954
  status = mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 956
  Data = 0;
#line 957
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 959
  Data = 0;
#line 960
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 962
  Data = (int )Data & ~ ((int )((__u16 )128));
#line 963
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 964
  mos7840_port->shadowLCR = Data;
#line 967
  Data = 0;
#line 968
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 970
  Data = (int )Data | 12;
#line 971
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 973
  Data = (int )Data & ~ 12;
#line 974
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 976
  Data = 12;
#line 977
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 980
  Data = 0;
#line 981
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 983
  Data = (int )Data & ~ 32;
#line 984
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 988
  Data = 0;
#line 989
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 991
  Data = (int )Data | 16;
#line 992
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 998
  if (tty) {
#line 999
    tty->low_latency = 1;
  } else {

  }
#line 1004
  if ((int )port0->open_ports == 1) {
#line 1005
    if ((unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((void *)0)) {
#line 1007
      tmp___1 = __create_pipe(serial->dev, (serial->port[0])->interrupt_in_endpointAddress);
#line 1007
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, ((unsigned int )(1 << 30) | tmp___1) | 128U,
                       (serial->port[0])->interrupt_in_buffer, ((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1021
      response = usb_submit_urb((serial->port[0])->interrupt_in_urb, (16U | 64U) | 128U);
#line 1024
      if (response) {
#line 1025
        printk("<3>mos7840: %s - Error %d submitting interrupt urb\n", "mos7840_open",
               response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1037
  while (1) {
#line 1037
    if (debug) {
#line 1037
      printk("<7>%s: port number is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1037
    break;
  }
#line 1038
  while (1) {
#line 1038
    if (debug) {
#line 1038
      printk("<7>%s: serial number is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             (port->serial)->minor);
    } else {

    }
#line 1038
    break;
  }
#line 1039
  while (1) {
#line 1039
    if (debug) {
#line 1039
      printk("<7>%s: Bulkin endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1039
    break;
  }
#line 1040
  while (1) {
#line 1040
    if (debug) {
#line 1040
      printk("<7>%s: BulkOut endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1040
    break;
  }
#line 1041
  while (1) {
#line 1041
    if (debug) {
#line 1041
      printk("<7>%s: Interrupt endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->interrupt_in_endpointAddress);
    } else {

    }
#line 1041
    break;
  }
#line 1042
  while (1) {
#line 1042
    if (debug) {
#line 1042
      printk("<7>%s: port\'s number in the device is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->port_num);
    } else {

    }
#line 1042
    break;
  }
#line 1043
  mos7840_port->read_urb = port->read_urb;
#line 1047
  tmp___2 = __create_pipe(serial->dev, port->bulk_in_endpointAddress);
#line 1047
  usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, ((unsigned int )(3 << 30) | tmp___2) | 128U,
                    port->bulk_in_buffer, (mos7840_port->read_urb)->transfer_buffer_length,
                    & mos7840_bulk_in_callback, mos7840_port);
#line 1055
  while (1) {
#line 1055
    if (debug) {
#line 1055
      printk("<7>%s: mos7840_open: bulkin endpoint is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1055
    break;
  }
#line 1057
  response = usb_submit_urb(mos7840_port->read_urb, (16U | 64U) | 128U);
#line 1058
  if (response) {
#line 1059
    printk("<3>mos7840: %s - Error %d submitting control urb\n", "mos7840_open", response);
  } else {

  }
#line 1064
  init_waitqueue_head(& mos7840_port->wait_chase);
#line 1065
  init_waitqueue_head(& mos7840_port->delta_msr_wait);
#line 1068
  memset(& mos7840_port->icount, 0, sizeof(mos7840_port->icount));
#line 1072
  mos7840_port->shadowMCR = 8;
#line 1074
  mos7840_port->open = 1;
#line 1076
  mos7840_port->icount.tx = 0;
#line 1077
  mos7840_port->icount.rx = 0;
#line 1079
  while (1) {
#line 1079
    if (debug) {
#line 1079
      printk("<7>%s: \n\nusb_serial serial:%p       mos7840_port:%p\n      usb_serial_port port:%p\n\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             serial, mos7840_port, port);
    } else {

    }
#line 1079
    break;
  }
#line 1082
  return (0);
}
}
#line 1096 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int chars ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1098
  port = tty->driver_data;
#line 1100
  chars = 0;
#line 1104
  while (1) {
#line 1104
    if (debug) {
#line 1104
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_chars_in_buffer:entering ...........");
    } else {

    }
#line 1104
    break;
  }
#line 1106
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1106
  if (tmp) {
#line 1107
    while (1) {
#line 1107
      if (debug) {
#line 1107
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1107
      break;
    }
#line 1108
    return (0);
  } else {

  }
#line 1111
  mos7840_port = mos7840_get_port_private(port);
#line 1112
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1113
    while (1) {
#line 1113
      if (debug) {
#line 1113
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1113
      break;
    }
#line 1114
    return (0);
  } else {

  }
#line 1117
  while (1) {
#line 1117
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1117
    break;
  }
#line 1118
  i = 0;
#line 1118
  while (1) {
#line 1118
    if (i < 16) {

    } else {
#line 1118
      break;
    }
#line 1119
    if (mos7840_port->busy[i]) {
#line 1120
      chars = chars + 32;
    } else {

    }
#line 1118
    i = i + 1;
  }
#line 1121
  while (1) {
#line 1121
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1121
    break;
  }
#line 1122
  while (1) {
#line 1122
    if (debug) {
#line 1122
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_chars_in_buffer", chars);
    } else {

    }
#line 1122
    break;
  }
#line 1123
  return (chars);
}
}
#line 1137 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_block_until_tx_empty(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1140
  timeout = 250 / 10;
#line 1141
  wait = 30;
#line 1144
  while (1) {
#line 1146
    count = mos7840_chars_in_buffer(tty);
#line 1149
    if (count <= 0) {
#line 1150
      return;
    } else {

    }
#line 1153
    interruptible_sleep_on_timeout(& mos7840_port->wait_chase, timeout);
#line 1157
    wait = wait - 1;
#line 1158
    if (wait == 0) {
#line 1159
      while (1) {
#line 1159
        if (debug) {
#line 1159
          printk("<7>%s: %s - TIMEOUT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_block_until_tx_empty");
        } else {

        }
#line 1159
        break;
      }
#line 1160
      return;
    } else {
#line 1163
      wait = 30;
    }
  }
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_close(struct tty_struct *tty , struct usb_serial_port *port ,
                          struct file *filp ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int tmp ;

  {
#line 1182
  while (1) {
#line 1182
    if (debug) {
#line 1182
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_close:entering...");
    } else {

    }
#line 1182
    break;
  }
#line 1184
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1184
  if (tmp) {
#line 1185
    while (1) {
#line 1185
      if (debug) {
#line 1185
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1185
      break;
    }
#line 1186
    return;
  } else {

  }
#line 1189
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1190
  if (! serial) {
#line 1191
    while (1) {
#line 1191
      if (debug) {
#line 1191
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1191
      break;
    }
#line 1192
    return;
  } else {

  }
#line 1195
  mos7840_port = mos7840_get_port_private(port);
#line 1196
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1198
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 1199
    return;
  } else {

  }
#line 1201
  j = 0;
#line 1201
  while (1) {
#line 1201
    if (j < 16) {

    } else {
#line 1201
      break;
    }
#line 1202
    usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1201
    j = j + 1;
  }
#line 1205
  j = 0;
#line 1205
  while (1) {
#line 1205
    if (j < 16) {

    } else {
#line 1205
      break;
    }
#line 1206
    if (mos7840_port->write_urb_pool[j]) {
#line 1207
      if ((mos7840_port->write_urb_pool[j])->transfer_buffer) {
#line 1208
        kfree((mos7840_port->write_urb_pool[j])->transfer_buffer);
      } else {

      }
#line 1211
      usb_free_urb(mos7840_port->write_urb_pool[j]);
    } else {

    }
#line 1205
    j = j + 1;
  }
#line 1215
  if (serial->dev) {
#line 1217
    mos7840_block_until_tx_empty(tty, mos7840_port);
  } else {

  }
#line 1221
  if (serial->dev) {
#line 1222
    if (mos7840_port->write_urb) {
#line 1223
      while (1) {
#line 1223
        if (debug) {
#line 1223
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk write\n");
        } else {

        }
#line 1223
        break;
      }
#line 1224
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1226
    if (mos7840_port->read_urb) {
#line 1227
      while (1) {
#line 1227
        if (debug) {
#line 1227
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk read\n");
        } else {

        }
#line 1227
        break;
      }
#line 1228
      usb_kill_urb(mos7840_port->read_urb);
    } else {

    }
#line 1230
    if (& mos7840_port->control_urb) {
#line 1231
      while (1) {
#line 1231
        if (debug) {
#line 1231
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown control read\n");
        } else {

        }
#line 1231
        break;
      }
    } else {

    }
  } else {

  }
#line 1237
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1238
  while (1) {
#line 1238
    if (debug) {
#line 1238
      printk("<7>%s: mos7840_num_open_ports in close%d:in port%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port0->open_ports, port->number);
    } else {

    }
#line 1238
    break;
  }
#line 1240
  if ((int )port0->open_ports == 0) {
#line 1241
    if ((serial->port[0])->interrupt_in_urb) {
#line 1242
      while (1) {
#line 1242
        if (debug) {
#line 1242
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown interrupt_in_urb\n");
        } else {

        }
#line 1242
        break;
      }
#line 1243
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1247
  if (mos7840_port->write_urb) {
#line 1249
    if ((unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0)) {
#line 1250
      kfree((mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1251
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1254
  Data = 0;
#line 1255
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 1257
  Data = 0;
#line 1258
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1260
  mos7840_port->open = 0;
#line 1262
  while (1) {
#line 1262
    if (debug) {
#line 1262
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Leaving ............");
    } else {

    }
#line 1262
    break;
  }
#line 1263
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_block_until_chase_response(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1279
  timeout = 1 * 250;
#line 1280
  wait = 10;
#line 1283
  while (1) {
#line 1284
    count = mos7840_chars_in_buffer(tty);
#line 1287
    if (count <= 0) {
#line 1288
      return;
    } else {

    }
#line 1291
    interruptible_sleep_on_timeout(& mos7840_port->wait_chase, timeout);
#line 1294
    wait = wait - 1;
#line 1295
    if (wait == 0) {
#line 1296
      while (1) {
#line 1296
        if (debug) {
#line 1296
          printk("<7>%s: %s - TIMEOUT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_block_until_chase_response");
        } else {

        }
#line 1296
        break;
      }
#line 1297
      return;
    } else {
#line 1300
      wait = 10;
    }
  }
}
}
#line 1310 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_break(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1312
  port = tty->driver_data;
#line 1317
  while (1) {
#line 1317
    if (debug) {
#line 1317
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ...........");
    } else {

    }
#line 1317
    break;
  }
#line 1318
  while (1) {
#line 1318
    if (debug) {
#line 1318
      printk("<7>%s: mos7840_break: Start\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 1318
    break;
  }
#line 1320
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1320
  if (tmp) {
#line 1321
    while (1) {
#line 1321
      if (debug) {
#line 1321
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1321
      break;
    }
#line 1322
    return;
  } else {

  }
#line 1325
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1326
  if (! serial) {
#line 1327
    while (1) {
#line 1327
      if (debug) {
#line 1327
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1327
      break;
    }
#line 1328
    return;
  } else {

  }
#line 1331
  mos7840_port = mos7840_get_port_private(port);
#line 1333
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1334
    return;
  } else {

  }
#line 1336
  if (serial->dev) {
#line 1338
    mos7840_block_until_chase_response(tty, mos7840_port);
  } else {

  }
#line 1340
  if (break_state == -1) {
#line 1341
    data = (int )mos7840_port->shadowLCR | 64;
  } else {
#line 1343
    data = (int )mos7840_port->shadowLCR & ~ 64;
  }
#line 1345
  mos7840_port->shadowLCR = data;
#line 1346
  while (1) {
#line 1346
    if (debug) {
#line 1346
      printk("<7>%s: mcs7840_break mos7840_port->shadowLCR is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 1346
    break;
  }
#line 1348
  mos7840_set_uart_reg(port, (__u16 )3, mos7840_port->shadowLCR);
#line 1351
  return;
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int room ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1364
  port = tty->driver_data;
#line 1366
  room = 0;
#line 1370
  while (1) {
#line 1370
    if (debug) {
#line 1370
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_write_room:entering ...........");
    } else {

    }
#line 1370
    break;
  }
#line 1372
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1372
  if (tmp) {
#line 1373
    while (1) {
#line 1373
      if (debug) {
#line 1373
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1373
      break;
    }
#line 1374
    while (1) {
#line 1374
      if (debug) {
#line 1374
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               " mos7840_write_room:leaving ...........");
      } else {

      }
#line 1374
      break;
    }
#line 1375
    return (-1);
  } else {

  }
#line 1378
  mos7840_port = mos7840_get_port_private(port);
#line 1379
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1380
    while (1) {
#line 1380
      if (debug) {
#line 1380
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1380
      break;
    }
#line 1381
    return (-1);
  } else {

  }
#line 1384
  while (1) {
#line 1384
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1384
    break;
  }
#line 1385
  i = 0;
#line 1385
  while (1) {
#line 1385
    if (i < 16) {

    } else {
#line 1385
      break;
    }
#line 1386
    if (! mos7840_port->busy[i]) {
#line 1387
      room = room + 32;
    } else {

    }
#line 1385
    i = i + 1;
  }
#line 1389
  while (1) {
#line 1389
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1389
    break;
  }
#line 1391
  room = room == 0 ? 0 : (room - 32) + 1;
#line 1392
  while (1) {
#line 1392
    if (debug) {
#line 1392
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_write_room", room);
    } else {

    }
#line 1392
    break;
  }
#line 1393
  return (room);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int tmp ;
  int tmp___0 ;
  int _min1 ;
  int _min2 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___1 ;

  {
#line 1410
  bytes_sent = 0;
#line 1418
  current_position = data;
#line 1420
  while (1) {
#line 1420
    if (debug) {
#line 1420
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "entering ...........");
    } else {

    }
#line 1420
    break;
  }
#line 1455
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1455
  if (tmp) {
#line 1456
    while (1) {
#line 1456
      if (debug) {
#line 1456
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1456
      break;
    }
#line 1457
    return (-1);
  } else {

  }
#line 1460
  serial = port->serial;
#line 1461
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1461
  if (tmp___0) {
#line 1462
    while (1) {
#line 1462
      if (debug) {
#line 1462
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1462
      break;
    }
#line 1463
    return (-1);
  } else {

  }
#line 1466
  mos7840_port = mos7840_get_port_private(port);
#line 1467
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1468
    while (1) {
#line 1468
      if (debug) {
#line 1468
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_port is NULL\n");
      } else {

      }
#line 1468
      break;
    }
#line 1469
    return (-1);
  } else {

  }
#line 1473
  urb = (void *)0;
#line 1475
  while (1) {
#line 1475
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1475
    break;
  }
#line 1476
  i = 0;
#line 1476
  while (1) {
#line 1476
    if (i < 16) {

    } else {
#line 1476
      break;
    }
#line 1477
    if (! mos7840_port->busy[i]) {
#line 1478
      mos7840_port->busy[i] = 1;
#line 1479
      urb = mos7840_port->write_urb_pool[i];
#line 1480
      while (1) {
#line 1480
        if (debug) {
#line 1480
          printk("<7>%s: \nURB:%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 i);
        } else {

        }
#line 1480
        break;
      }
#line 1481
      break;
    } else {

    }
#line 1476
    i = i + 1;
  }
#line 1484
  while (1) {
#line 1484
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1484
    break;
  }
#line 1486
  if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 1487
    while (1) {
#line 1487
      if (debug) {
#line 1487
        printk("<7>%s: %s - no more free urbs\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_write");
      } else {

      }
#line 1487
      break;
    }
#line 1488
    goto exit;
  } else {

  }
#line 1491
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1492
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 1495
    if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1496
      printk("<3>mos7840: %s no more kernel memory...\n", "mos7840_write");
#line 1497
      goto exit;
    } else {

    }
  } else {

  }
#line 1500
  _min1 = count;
#line 1500
  _min2 = 32;
#line 1500
  transfer_size = _min1 < _min2 ? _min1 : _min2;
#line 1502
  __len = transfer_size;
#line 1502
  __ret = __builtin_memcpy(urb->transfer_buffer, current_position, __len);
#line 1505
  tmp___1 = __create_pipe(serial->dev, port->bulk_out_endpointAddress);
#line 1505
  usb_fill_bulk_urb(urb, serial->dev, (unsigned int )(3 << 30) | tmp___1, urb->transfer_buffer,
                    transfer_size, & mos7840_bulk_out_data_callback, mos7840_port);
#line 1513
  data1 = urb->transfer_buffer;
#line 1514
  while (1) {
#line 1514
    if (debug) {
#line 1514
      printk("<7>%s: \nbulkout endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1514
    break;
  }
#line 1517
  status = usb_submit_urb(urb, 32U);
#line 1519
  if (status) {
#line 1520
    mos7840_port->busy[i] = 0;
#line 1521
    printk("<3>mos7840: %s - usb_submit_urb(write bulk) failed with status = %d\n",
           "mos7840_write", status);
#line 1523
    bytes_sent = status;
#line 1524
    goto exit;
  } else {

  }
#line 1526
  bytes_sent = transfer_size;
#line 1527
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1528
  __asm__  volatile   ("": : : "memory");
#line 1529
  while (1) {
#line 1529
    if (debug) {
#line 1529
      printk("<7>%s: mos7840_port->icount.tx is %d:\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->icount.tx);
    } else {

    }
#line 1529
    break;
  }
  exit: 
#line 1531
  return (bytes_sent);
}
}
#line 1541 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_throttle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  int status ;
  int tmp ;
  unsigned char stop_char ;

  {
#line 1543
  port = tty->driver_data;
#line 1547
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1547
  if (tmp) {
#line 1548
    while (1) {
#line 1548
      if (debug) {
#line 1548
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1548
      break;
    }
#line 1549
    return;
  } else {

  }
#line 1552
  while (1) {
#line 1552
    if (debug) {
#line 1552
      printk("<7>%s: - port %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1552
    break;
  }
#line 1554
  mos7840_port = mos7840_get_port_private(port);
#line 1556
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1557
    return;
  } else {

  }
#line 1559
  if (! mos7840_port->open) {
#line 1560
    while (1) {
#line 1560
      if (debug) {
#line 1560
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "port not opened");
      } else {

      }
#line 1560
      break;
    }
#line 1561
    return;
  } else {

  }
#line 1564
  while (1) {
#line 1564
    if (debug) {
#line 1564
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1564
    break;
  }
#line 1567
  if ((tty->termios)->c_iflag & 4096U) {
#line 1568
    stop_char = (tty->termios)->c_cc[9];
#line 1569
    status = mos7840_write(tty, port, & stop_char, 1);
#line 1570
    if (status <= 0) {
#line 1571
      return;
    } else {

    }
  } else {

  }
#line 1574
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1575
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 2;
#line 1576
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1578
    if (status < 0) {
#line 1579
      return;
    } else {

    }
  } else {

  }
#line 1582
  return;
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_unthrottle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int tmp___0 ;
  unsigned char start_char ;

  {
#line 1593
  port = tty->driver_data;
#line 1595
  tmp = mos7840_get_port_private(port);
#line 1595
  mos7840_port = tmp;
#line 1597
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1597
  if (tmp___0) {
#line 1598
    while (1) {
#line 1598
      if (debug) {
#line 1598
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1598
      break;
    }
#line 1599
    return;
  } else {

  }
#line 1602
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1603
    return;
  } else {

  }
#line 1605
  if (! mos7840_port->open) {
#line 1606
    while (1) {
#line 1606
      if (debug) {
#line 1606
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_unthrottle");
      } else {

      }
#line 1606
      break;
    }
#line 1607
    return;
  } else {

  }
#line 1610
  while (1) {
#line 1610
    if (debug) {
#line 1610
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1610
    break;
  }
#line 1613
  if ((tty->termios)->c_iflag & 4096U) {
#line 1614
    start_char = (tty->termios)->c_cc[8];
#line 1615
    status = mos7840_write(tty, port, & start_char, 1);
#line 1616
    if (status <= 0) {
#line 1617
      return;
    } else {

    }
  } else {

  }
#line 1621
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1622
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 2;
#line 1623
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1625
    if (status < 0) {
#line 1626
      return;
    } else {

    }
  } else {

  }
#line 1628
  return;
}
}
#line 1630 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;

  {
#line 1632
  port = tty->driver_data;
#line 1638
  mos7840_port = mos7840_get_port_private(port);
#line 1640
  while (1) {
#line 1640
    if (debug) {
#line 1640
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", port->number);
    } else {

    }
#line 1640
    break;
  }
#line 1642
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1643
    return (-19);
  } else {

  }
#line 1645
  status = mos7840_get_uart_reg(port, (__u16 )6, & msr);
#line 1646
  status = mos7840_get_uart_reg(port, (__u16 )4, & mcr);
#line 1647
  result = (((((((int )mcr & 1 ? 2 : 0) | ((int )mcr & 2 ? 4 : 0)) | ((int )mcr & 16 ? 32768 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 1655
  while (1) {
#line 1655
    if (debug) {
#line 1655
      printk("<7>%s: %s - 0x%04X\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", result);
    } else {

    }
#line 1655
    break;
  }
#line 1657
  return (result);
}
}
#line 1660 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  int status ;

  {
#line 1663
  port = tty->driver_data;
#line 1668
  while (1) {
#line 1668
    if (debug) {
#line 1668
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmset", port->number);
    } else {

    }
#line 1668
    break;
  }
#line 1670
  mos7840_port = mos7840_get_port_private(port);
#line 1672
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1673
    return (-19);
  } else {

  }
#line 1676
  mcr = mos7840_port->shadowMCR;
#line 1677
  if (clear & 4U) {
#line 1678
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 1679
  if (clear & 2U) {
#line 1680
    mcr = mcr & (unsigned int )(~ 1);
  } else {

  }
#line 1681
  if (clear & 32768U) {
#line 1682
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 1684
  if (set & 4U) {
#line 1685
    mcr = mcr | 2U;
  } else {

  }
#line 1686
  if (set & 2U) {
#line 1687
    mcr = mcr | 1U;
  } else {

  }
#line 1688
  if (set & 32768U) {
#line 1689
    mcr = mcr | 16U;
  } else {

  }
#line 1691
  mos7840_port->shadowMCR = mcr;
#line 1693
  status = mos7840_set_uart_reg(port, (__u16 )4, mcr);
#line 1694
  if (status < 0) {
#line 1695
    while (1) {
#line 1695
      if (debug) {
#line 1695
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1695
      break;
    }
#line 1696
    return (status);
  } else {

  }
#line 1699
  return (0);
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_baud_rate_divisor(int baudRate , int *divisor , __u16 *clk_sel_val ) 
{ 


  {
#line 1711
  while (1) {
#line 1711
    if (debug) {
#line 1711
      printk("<7>%s: %s - %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_calc_baud_rate_divisor", baudRate);
    } else {

    }
#line 1711
    break;
  }
#line 1713
  if (baudRate <= 115200) {
#line 1714
    *divisor = 115200 / baudRate;
#line 1715
    *clk_sel_val = 0;
  } else {

  }
#line 1717
  if (baudRate > 115200 && baudRate <= 230400) {
#line 1718
    *divisor = 230400 / baudRate;
#line 1719
    *clk_sel_val = 16;
  } else
#line 1720
  if (baudRate > 230400 && baudRate <= 403200) {
#line 1721
    *divisor = 403200 / baudRate;
#line 1722
    *clk_sel_val = 32;
  } else
#line 1723
  if (baudRate > 403200 && baudRate <= 460800) {
#line 1724
    *divisor = 460800 / baudRate;
#line 1725
    *clk_sel_val = 48;
  } else
#line 1726
  if (baudRate > 460800 && baudRate <= 806400) {
#line 1727
    *divisor = 806400 / baudRate;
#line 1728
    *clk_sel_val = 64;
  } else
#line 1729
  if (baudRate > 806400 && baudRate <= 921600) {
#line 1730
    *divisor = 921600 / baudRate;
#line 1731
    *clk_sel_val = 80;
  } else
#line 1732
  if (baudRate > 921600 && baudRate <= 1572864) {
#line 1733
    *divisor = 1572864 / baudRate;
#line 1734
    *clk_sel_val = 96;
  } else
#line 1735
  if (baudRate > 1572864 && baudRate <= 3145728) {
#line 1736
    *divisor = 3145728 / baudRate;
#line 1737
    *clk_sel_val = 112;
  } else {

  }
#line 1739
  return (0);
}
}
#line 1779 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int tmp ;
  int tmp___0 ;

  {
#line 1782
  divisor = 0;
#line 1789
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1790
    return (-1);
  } else {

  }
#line 1792
  port = mos7840_port->port;
#line 1793
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1793
  if (tmp) {
#line 1794
    while (1) {
#line 1794
      if (debug) {
#line 1794
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1794
      break;
    }
#line 1795
    return (-1);
  } else {

  }
#line 1798
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1798
  if (tmp___0) {
#line 1799
    while (1) {
#line 1799
      if (debug) {
#line 1799
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 1799
      break;
    }
#line 1800
    return (-1);
  } else {

  }
#line 1803
  while (1) {
#line 1803
    if (debug) {
#line 1803
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1803
    break;
  }
#line 1805
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1807
  while (1) {
#line 1807
    if (debug) {
#line 1807
      printk("<7>%s: %s - port = %d, baud = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_send_cmd_write_baud_rate", (mos7840_port->port)->number, baudRate);
    } else {

    }
#line 1807
    break;
  }
#line 1840
  clk_sel_val = 0;
#line 1841
  Data = 0;
#line 1842
  status = mos7840_calc_baud_rate_divisor(baudRate, & divisor, & clk_sel_val);
#line 1844
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 1846
  if (status < 0) {
#line 1847
    while (1) {
#line 1847
      if (debug) {
#line 1847
        printk("<7>%s: reading spreg failed in set_serial_baud\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1847
      break;
    }
#line 1848
    return (-1);
  } else {

  }
#line 1850
  Data = ((int )Data & 143) | (int )clk_sel_val;
#line 1851
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 1853
  if (status < 0) {
#line 1854
    while (1) {
#line 1854
      if (debug) {
#line 1854
        printk("<7>%s: Writing spreg failed in set_serial_baud\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1854
      break;
    }
#line 1855
    return (-1);
  } else {

  }
#line 1859
  if (status) {
#line 1860
    printk("<3>mos7840: %s - bad baud rate\n", "mos7840_send_cmd_write_baud_rate");
#line 1861
    while (1) {
#line 1861
      if (debug) {
#line 1861
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "bad baud rate");
      } else {

      }
#line 1861
      break;
    }
#line 1862
    return (status);
  } else {

  }
#line 1865
  Data = (int )mos7840_port->shadowLCR | (int )((__u16 )128);
#line 1866
  mos7840_port->shadowLCR = Data;
#line 1867
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1870
  Data = (unsigned char )(divisor & 255);
#line 1871
  while (1) {
#line 1871
    if (debug) {
#line 1871
      printk("<7>%s: set_serial_baud Value to write DLL is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1871
    break;
  }
#line 1872
  mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 1874
  Data = (unsigned char )((divisor & 65280) >> 8);
#line 1875
  while (1) {
#line 1875
    if (debug) {
#line 1875
      printk("<7>%s: set_serial_baud Value to write DLM is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1875
    break;
  }
#line 1876
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1879
  Data = (int )mos7840_port->shadowLCR & ~ ((int )((__u16 )128));
#line 1880
  mos7840_port->shadowLCR = Data;
#line 1881
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1884
  return (status);
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_change_port_settings(struct tty_struct *tty , struct moschip_port *mos7840_port ,
                                         struct ktermios *old_termios ) 
{ 
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int tmp ;
  int tmp___0 ;
  speed_t tmp___1 ;

  {
#line 1907
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1908
    return;
  } else {

  }
#line 1910
  port = mos7840_port->port;
#line 1912
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1912
  if (tmp) {
#line 1913
    while (1) {
#line 1913
      if (debug) {
#line 1913
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1913
      break;
    }
#line 1914
    return;
  } else {

  }
#line 1917
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1917
  if (tmp___0) {
#line 1918
    while (1) {
#line 1918
      if (debug) {
#line 1918
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 1918
      break;
    }
#line 1919
    return;
  } else {

  }
#line 1922
  serial = port->serial;
#line 1924
  while (1) {
#line 1924
    if (debug) {
#line 1924
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", (mos7840_port->port)->number);
    } else {

    }
#line 1924
    break;
  }
#line 1926
  if (! mos7840_port->open) {
#line 1927
    while (1) {
#line 1927
      if (debug) {
#line 1927
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1927
      break;
    }
#line 1928
    return;
  } else {

  }
#line 1931
  while (1) {
#line 1931
    if (debug) {
#line 1931
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1931
    break;
  }
#line 1933
  lData = 3;
#line 1934
  lStop = 0;
#line 1935
  lParity = 0;
#line 1937
  cflag = (tty->termios)->c_cflag;
#line 1938
  iflag = (tty->termios)->c_iflag;
#line 1941
  if (cflag & 48U) {
#line 1942
    switch (cflag & 48U) {
    case 0U: 
#line 1944
    lData = 0;
#line 1945
    break;
    case 16U: 
#line 1948
    lData = 1;
#line 1949
    break;
    case 32U: 
#line 1952
    lData = 2;
#line 1953
    break;
    default: 
#line 1956
    lData = 3;
#line 1957
    break;
    }
  } else {

  }
#line 1961
  if (cflag & 256U) {
#line 1962
    if (cflag & 512U) {
#line 1963
      lParity = 8;
#line 1964
      while (1) {
#line 1964
        if (debug) {
#line 1964
          printk("<7>%s: %s - parity = odd\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 1964
        break;
      }
    } else {
#line 1966
      lParity = 24;
#line 1967
      while (1) {
#line 1967
        if (debug) {
#line 1967
          printk("<7>%s: %s - parity = even\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 1967
        break;
      }
    }
  } else {
#line 1971
    while (1) {
#line 1971
      if (debug) {
#line 1971
        printk("<7>%s: %s - parity = none\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1971
      break;
    }
  }
#line 1974
  if (cflag & 1073741824U) {
#line 1975
    lParity = (int )lParity | 32;
  } else {

  }
#line 1978
  if (cflag & 64U) {
#line 1979
    lStop = 4;
#line 1980
    while (1) {
#line 1980
      if (debug) {
#line 1980
        printk("<7>%s: %s - stop bits = 2\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1980
      break;
    }
  } else {
#line 1982
    lStop = 0;
#line 1983
    while (1) {
#line 1983
      if (debug) {
#line 1983
        printk("<7>%s: %s - stop bits = 1\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1983
      break;
    }
  }
#line 1987
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR & ~ ((3 | 4) | 56);
#line 1989
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop);
#line 1991
  while (1) {
#line 1991
    if (debug) {
#line 1991
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is %x\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 1991
    break;
  }
#line 1994
  Data = 0;
#line 1995
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1997
  Data = 0;
#line 1998
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 2000
  Data = 207;
#line 2001
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 2004
  Data = mos7840_port->shadowLCR;
#line 2006
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 2008
  Data = 11;
#line 2009
  mos7840_port->shadowMCR = Data;
#line 2010
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2011
  Data = 11;
#line 2012
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2016
  mos7840_port->shadowMCR = 8;
#line 2017
  if (cflag & 4111U) {
#line 2018
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | (1 | 2);
  } else {

  }
#line 2020
  if (cflag & 2147483648U) {
#line 2021
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 32;
  } else {
#line 2023
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 32;
  }
#line 2025
  Data = mos7840_port->shadowMCR;
#line 2026
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2029
  tmp___1 = tty_get_baud_rate(tty);
#line 2029
  baud = tmp___1;
#line 2031
  if (! baud) {
#line 2033
    while (1) {
#line 2033
      if (debug) {
#line 2033
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Picked default baud...");
      } else {

      }
#line 2033
      break;
    }
#line 2034
    baud = 9600;
  } else {

  }
#line 2037
  while (1) {
#line 2037
    if (debug) {
#line 2037
      printk("<7>%s: %s - baud rate = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", baud);
    } else {

    }
#line 2037
    break;
  }
#line 2038
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2041
  Data = 12;
#line 2042
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 2044
  if ((mos7840_port->read_urb)->status != -115) {
#line 2045
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2047
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2049
    if (status) {
#line 2050
      while (1) {
#line 2050
        if (debug) {
#line 2050
          printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2050
        break;
      }
    } else {

    }
  } else {

  }
#line 2054
  __wake_up(& mos7840_port->delta_msr_wait, 1 | 2, 1, (void *)0);
#line 2055
  mos7840_port->delta_msr_cond = 1;
#line 2056
  while (1) {
#line 2056
    if (debug) {
#line 2056
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is End %x\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 2056
    break;
  }
#line 2059
  return;
}
}
#line 2068 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  int tmp___0 ;

  {
#line 2076
  while (1) {
#line 2076
    if (debug) {
#line 2076
      printk("<7>%s: mos7840_set_termios: START\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 2076
    break;
  }
#line 2077
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2077
  if (tmp) {
#line 2078
    while (1) {
#line 2078
      if (debug) {
#line 2078
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2078
      break;
    }
#line 2079
    return;
  } else {

  }
#line 2082
  serial = port->serial;
#line 2084
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2084
  if (tmp___0) {
#line 2085
    while (1) {
#line 2085
      if (debug) {
#line 2085
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 2085
      break;
    }
#line 2086
    return;
  } else {

  }
#line 2089
  mos7840_port = mos7840_get_port_private(port);
#line 2091
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2092
    return;
  } else {

  }
#line 2094
  if (! mos7840_port->open) {
#line 2095
    while (1) {
#line 2095
      if (debug) {
#line 2095
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_set_termios");
      } else {

      }
#line 2095
      break;
    }
#line 2096
    return;
  } else {

  }
#line 2099
  while (1) {
#line 2099
    if (debug) {
#line 2099
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "setting termios - ");
    } else {

    }
#line 2099
    break;
  }
#line 2101
  cflag = (tty->termios)->c_cflag;
#line 2103
  while (1) {
#line 2103
    if (debug) {
#line 2103
      printk("<7>%s: %s - clfag %08x iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", (tty->termios)->c_cflag, (tty->termios)->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2103
    break;
  }
#line 2105
  while (1) {
#line 2105
    if (debug) {
#line 2105
      printk("<7>%s: %s - old clfag %08x old iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2105
    break;
  }
#line 2107
  while (1) {
#line 2107
    if (debug) {
#line 2107
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", port->number);
    } else {

    }
#line 2107
    break;
  }
#line 2111
  mos7840_change_port_settings(tty, mos7840_port, old_termios);
#line 2113
  if (! mos7840_port->read_urb) {
#line 2114
    while (1) {
#line 2114
      if (debug) {
#line 2114
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!!!\n");
      } else {

      }
#line 2114
      break;
    }
#line 2115
    return;
  } else {

  }
#line 2118
  if ((mos7840_port->read_urb)->status != -115) {
#line 2119
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2120
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2121
    if (status) {
#line 2122
      while (1) {
#line 2122
        if (debug) {
#line 2122
          printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2122
        break;
      }
    } else {

    }
  } else {

  }
#line 2126
  return;
}
}
#line 2140 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_lsr_info(struct tty_struct *tty , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  unsigned long tmp ;

  {
#line 2144
  result = 0;
#line 2146
  count = mos7840_chars_in_buffer(tty);
#line 2147
  if (count == 0) {
#line 2148
    while (1) {
#line 2148
      if (debug) {
#line 2148
        printk("<7>%s: %s -- Empty\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_get_lsr_info");
      } else {

      }
#line 2148
      break;
    }
#line 2149
    result = 1;
  } else {

  }
#line 2152
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2152
  if (tmp) {
#line 2153
    return (-14);
  } else {

  }
#line 2154
  return (0);
}
}
#line 2164 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_modem_info(struct moschip_port *mos7840_port , unsigned int cmd ,
                                  unsigned int *value ) 
{ 
  unsigned int mcr ;
  unsigned int arg ;
  __u16 Data ;
  int status ;
  struct usb_serial_port *port ;
  int tmp ;
  unsigned long tmp___0 ;

  {
#line 2173
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2174
    return (-1);
  } else {

  }
#line 2176
  port = mos7840_port->port;
#line 2177
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_modem_info");
#line 2177
  if (tmp) {
#line 2178
    while (1) {
#line 2178
      if (debug) {
#line 2178
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2178
      break;
    }
#line 2179
    return (-1);
  } else {

  }
#line 2182
  mcr = mos7840_port->shadowMCR;
#line 2184
  tmp___0 = copy_from_user(& arg, value, sizeof(int ));
#line 2184
  if (tmp___0) {
#line 2185
    return (-14);
  } else {

  }
#line 2187
  switch (cmd) {
  case 21526U: 
#line 2189
  if (arg & 4U) {
#line 2190
    mcr = mcr | 2U;
  } else {

  }
#line 2191
  if (arg & 2U) {
#line 2192
    mcr = mcr | 2U;
  } else {

  }
#line 2193
  if (arg & 32768U) {
#line 2194
    mcr = mcr | 16U;
  } else {

  }
#line 2195
  break;
  case 21527U: 
#line 2198
  if (arg & 4U) {
#line 2199
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2200
  if (arg & 2U) {
#line 2201
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2202
  if (arg & 32768U) {
#line 2203
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 2204
  break;
  case 21528U: 
#line 2209
  mcr = mcr & (unsigned int )(~ ((2 | 1) | 16));
#line 2210
  mcr = mcr | (unsigned int )(arg & 4U ? 2 : 0);
#line 2211
  mcr = mcr | (unsigned int )(arg & 2U ? 1 : 0);
#line 2212
  mcr = mcr | (unsigned int )(arg & 32768U ? 16 : 0);
#line 2213
  break;
  }
#line 2216
  mos7840_port->shadowMCR = mcr;
#line 2218
  Data = mos7840_port->shadowMCR;
#line 2219
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2220
  if (status < 0) {
#line 2221
    while (1) {
#line 2221
      if (debug) {
#line 2221
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 2221
      break;
    }
#line 2222
    return (-1);
  } else {

  }
#line 2225
  return (0);
}
}
#line 2233 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_modem_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  unsigned int result ;
  __u16 msr ;
  unsigned int mcr ;
  unsigned long tmp ;

  {
#line 2236
  result = 0;
#line 2238
  mcr = mos7840_port->shadowMCR;
#line 2239
  mos7840_get_uart_reg(mos7840_port->port, (__u16 )6, & msr);
#line 2241
  result = (((((mcr & 1U ? 2 : 0) | (mcr & 2U ? 4 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 2248
  while (1) {
#line 2248
    if (debug) {
#line 2248
      printk("<7>%s: %s -- %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_get_modem_info", result);
    } else {

    }
#line 2248
    break;
  }
#line 2250
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2250
  if (tmp) {
#line 2251
    return (-14);
  } else {

  }
#line 2252
  return (0);
}
}
#line 2260 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  unsigned long tmp___0 ;

  {
#line 2265
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2266
    return (-1);
  } else {

  }
#line 2268
  if (! retinfo) {
#line 2269
    return (-14);
  } else {

  }
#line 2271
  memset(& tmp, 0, sizeof(tmp));
#line 2273
  tmp.type = 4;
#line 2274
  tmp.line = ((mos7840_port->port)->serial)->minor;
#line 2275
  tmp.port = (mos7840_port->port)->number;
#line 2276
  tmp.irq = 0;
#line 2277
  tmp.flags = 64 | 128;
#line 2278
  tmp.xmit_fifo_size = 16 * 32;
#line 2279
  tmp.baud_base = 9600;
#line 2280
  tmp.close_delay = 5 * 250;
#line 2281
  tmp.closing_wait = 30 * 250;
#line 2283
  tmp___0 = copy_to_user(retinfo, & tmp, sizeof(*retinfo));
#line 2283
  if (tmp___0) {
#line 2284
    return (-14);
  } else {

  }
#line 2285
  return (0);
}
}
#line 2293 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  struct serial_icounter_struct icount ;
  int mosret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  unsigned long tmp___8 ;

  {
#line 2296
  port = tty->driver_data;
#line 2297
  argp = (void *)arg;
#line 2303
  mosret = 0;
#line 2305
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2305
  if (tmp) {
#line 2306
    while (1) {
#line 2306
      if (debug) {
#line 2306
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2306
      break;
    }
#line 2307
    return (-1);
  } else {

  }
#line 2310
  mos7840_port = mos7840_get_port_private(port);
#line 2312
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2313
    return (-1);
  } else {

  }
#line 2315
  while (1) {
#line 2315
    if (debug) {
#line 2315
      printk("<7>%s: %s - port %d, cmd = 0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, cmd);
    } else {

    }
#line 2315
    break;
  }
#line 2317
  switch (cmd) {
  case 21593U: 
#line 2321
  while (1) {
#line 2321
    if (debug) {
#line 2321
      printk("<7>%s: %s (%d) TIOCSERGETLSR\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2321
    break;
  }
#line 2322
  tmp___0 = mos7840_get_lsr_info(tty, argp);
#line 2322
  return (tmp___0);
#line 2323
  return (0);
  case 21528U: 
  case 21527U: 
  case 21526U: 
#line 2329
  while (1) {
#line 2329
    if (debug) {
#line 2329
      printk("<7>%s: %s (%d) TIOCMSET/TIOCMBIC/TIOCMSET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2329
    break;
  }
#line 2331
  mosret = mos7840_set_modem_info(mos7840_port, cmd, argp);
#line 2333
  return (mosret);
  case 21525U: 
#line 2336
  while (1) {
#line 2336
    if (debug) {
#line 2336
      printk("<7>%s: %s (%d) TIOCMGET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2336
    break;
  }
#line 2337
  tmp___1 = mos7840_get_modem_info(mos7840_port, argp);
#line 2337
  return (tmp___1);
  case 21534U: 
#line 2340
  while (1) {
#line 2340
    if (debug) {
#line 2340
      printk("<7>%s: %s (%d) TIOCGSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2340
    break;
  }
#line 2341
  tmp___2 = mos7840_get_serial_info(mos7840_port, argp);
#line 2341
  return (tmp___2);
  case 21535U: 
#line 2344
  while (1) {
#line 2344
    if (debug) {
#line 2344
      printk("<7>%s: %s (%d) TIOCSSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2344
    break;
  }
#line 2345
  break;
  case 21596U: 
#line 2348
  while (1) {
#line 2348
    if (debug) {
#line 2348
      printk("<7>%s: %s (%d) TIOCMIWAIT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2348
    break;
  }
#line 2349
  cprev = mos7840_port->icount;
#line 2350
  while (1) {
#line 2352
    mos7840_port->delta_msr_cond = 0;
#line 2353
    __ret = 0;
#line 2353
    if (! (mos7840_port->delta_msr_cond == 1)) {
#line 2353
      while (1) {
#line 2353
        tmp___3 = get_current();
#line 2353
        __wait.flags = 0U;
#line 2353
        __wait.private = tmp___3;
#line 2353
        __wait.func = & autoremove_wake_function;
#line 2353
        __wait.task_list.next = & __wait.task_list;
#line 2353
        __wait.task_list.prev = & __wait.task_list;
#line 2353
        while (1) {
#line 2353
          prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2353
          if (mos7840_port->delta_msr_cond == 1) {
#line 2353
            break;
          } else {

          }
#line 2353
          tmp___4 = get_current();
#line 2353
          tmp___5 = signal_pending(tmp___4);
#line 2353
          if (tmp___5) {

          } else {
#line 2353
            schedule();
#line 2353
            goto __Cont;
          }
#line 2353
          __ret = -512;
#line 2353
          break;
          __Cont: /* CIL Label */ ;
        }
#line 2353
        finish_wait(& mos7840_port->delta_msr_wait, & __wait);
#line 2353
        break;
      }
    } else {

    }
#line 2358
    tmp___6 = get_current();
#line 2358
    tmp___7 = signal_pending(tmp___6);
#line 2358
    if (tmp___7) {
#line 2359
      return (-512);
    } else {

    }
#line 2360
    cnow = mos7840_port->icount;
#line 2361
    __asm__  volatile   ("": : : "memory");
#line 2362
    if (((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts) {
#line 2364
      return (-5);
    } else {

    }
#line 2365
    if ((((arg & 128UL && cnow.rng != cprev.rng) || (arg & 256UL && cnow.dsr != cprev.dsr)) || (arg & 64UL && cnow.dcd != cprev.dcd)) || (arg & 32UL && cnow.cts != cprev.cts)) {
#line 2369
      return (0);
    } else {

    }
#line 2371
    cprev = cnow;
  }
#line 2374
  break;
  case 21597U: 
#line 2377
  cnow = mos7840_port->icount;
#line 2378
  __asm__  volatile   ("": : : "memory");
#line 2379
  icount.cts = cnow.cts;
#line 2380
  icount.dsr = cnow.dsr;
#line 2381
  icount.rng = cnow.rng;
#line 2382
  icount.dcd = cnow.dcd;
#line 2383
  icount.rx = cnow.rx;
#line 2384
  icount.tx = cnow.tx;
#line 2385
  icount.frame = cnow.frame;
#line 2386
  icount.overrun = cnow.overrun;
#line 2387
  icount.parity = cnow.parity;
#line 2388
  icount.brk = cnow.brk;
#line 2389
  icount.buf_overrun = cnow.buf_overrun;
#line 2391
  while (1) {
#line 2391
    if (debug) {
#line 2391
      printk("<7>%s: %s (%d) TIOCGICOUNT RX=%d, TX=%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, icount.rx, icount.tx);
    } else {

    }
#line 2391
    break;
  }
#line 2393
  tmp___8 = copy_to_user(argp, & icount, sizeof(icount));
#line 2393
  if (tmp___8) {
#line 2394
    return (-14);
  } else {

  }
#line 2395
  return (0);
  default: 
#line 2397
  break;
  }
#line 2399
  return (-515);
}
}
#line 2402 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  int mos7840_num_ports ;
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 2404
  mos7840_num_ports = 0;
#line 2406
  while (1) {
#line 2406
    if (debug) {
#line 2406
      printk("<7>%s: numberofendpoints: %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             (int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints);
    } else {

    }
#line 2406
    break;
  }
#line 2408
  while (1) {
#line 2408
    if (debug) {
#line 2408
      printk("<7>%s: numberofendpoints: %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             (int )((serial->interface)->altsetting)->desc.bNumEndpoints);
    } else {

    }
#line 2408
    break;
  }
#line 2410
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 5) {
#line 2411
    tmp = 2;
#line 2411
    serial->num_ports = tmp;
#line 2411
    mos7840_num_ports = tmp;
  } else
#line 2412
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 9) {
#line 2413
    serial->num_bulk_in = 4;
#line 2414
    serial->num_bulk_out = 4;
#line 2415
    tmp___0 = 4;
#line 2415
    serial->num_ports = tmp___0;
#line 2415
    mos7840_num_ports = tmp___0;
  } else {

  }
#line 2418
  return (mos7840_num_ports);
}
}
#line 2462 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct lock_class_key __key___1  ;
#line 2425 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_startup(struct usb_serial *serial ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_device *dev ;
  int i ;
  int status ;
  __u16 Data ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 2432
  while (1) {
#line 2432
    if (debug) {
#line 2432
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_startup :entering..........");
    } else {

    }
#line 2432
    break;
  }
#line 2434
  if (! serial) {
#line 2435
    while (1) {
#line 2435
      if (debug) {
#line 2435
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler");
      } else {

      }
#line 2435
      break;
    }
#line 2436
    return (-1);
  } else {

  }
#line 2439
  dev = serial->dev;
#line 2441
  while (1) {
#line 2441
    if (debug) {
#line 2441
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering...");
    } else {

    }
#line 2441
    break;
  }
#line 2447
  i = 0;
#line 2447
  while (1) {
#line 2447
    if (i < (int )serial->num_ports) {

    } else {
#line 2447
      break;
    }
#line 2448
    tmp = kzalloc(sizeof(struct moschip_port ), (16U | 64U) | 128U);
#line 2448
    mos7840_port = tmp;
#line 2449
    if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2450
      printk("<3>mos7840: %s - Out of memory\n", "mos7840_startup");
#line 2451
      status = -12;
#line 2452
      i = i - 1;
#line 2453
      goto error;
    } else {

    }
#line 2460
    mos7840_port->port = serial->port[i];
#line 2461
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2462
    while (1) {
#line 2462
      __spin_lock_init(& mos7840_port->pool_lock, "&mos7840_port->pool_lock", & __key___1);
#line 2462
      break;
    }
#line 2464
    mos7840_port->port_num = ((int )(serial->port[i])->number - (int )((serial->port[i])->serial)->minor) + 1;
#line 2468
    if (mos7840_port->port_num == 1) {
#line 2469
      mos7840_port->SpRegOffset = 0;
#line 2470
      mos7840_port->ControlRegOffset = 1;
#line 2471
      mos7840_port->DcrRegOffset = 4;
    } else
#line 2472
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 4) {
#line 2474
      mos7840_port->SpRegOffset = 8;
#line 2475
      mos7840_port->ControlRegOffset = 9;
#line 2476
      mos7840_port->DcrRegOffset = 22;
    } else
#line 2477
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 2) {
#line 2479
      mos7840_port->SpRegOffset = 10;
#line 2480
      mos7840_port->ControlRegOffset = 11;
#line 2481
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2482
    if (mos7840_port->port_num == 3 && (int )serial->num_ports == 4) {
#line 2484
      mos7840_port->SpRegOffset = 10;
#line 2485
      mos7840_port->ControlRegOffset = 11;
#line 2486
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2487
    if (mos7840_port->port_num == 4 && (int )serial->num_ports == 4) {
#line 2489
      mos7840_port->SpRegOffset = 12;
#line 2490
      mos7840_port->ControlRegOffset = 13;
#line 2491
      mos7840_port->DcrRegOffset = 28;
    } else {

    }
#line 2493
    mos7840_dump_serial_port(mos7840_port);
#line 2494
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2497
    status = mos7840_get_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  & Data);
#line 2499
    if (status < 0) {
#line 2500
      while (1) {
#line 2500
        if (debug) {
#line 2500
          printk("<7>%s: Reading ControlReg failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2500
        break;
      }
#line 2501
      break;
    } else {
#line 2503
      while (1) {
#line 2503
        if (debug) {
#line 2503
          printk("<7>%s: ControlReg Reading success val is %x, status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 Data, status);
        } else {

        }
#line 2503
        break;
      }
    }
#line 2505
    Data = (int )Data | 8;
#line 2506
    Data = (int )Data | 4;
#line 2510
    status = mos7840_set_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  Data);
#line 2512
    if (status < 0) {
#line 2513
      while (1) {
#line 2513
        if (debug) {
#line 2513
          printk("<7>%s: Writing ControlReg failed(rx_disable) status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2513
        break;
      }
#line 2514
      break;
    } else {
#line 2516
      while (1) {
#line 2516
        if (debug) {
#line 2516
          printk("<7>%s: ControlReg Writing success(rx_disable) status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2516
        break;
      }
    }
#line 2521
    Data = 1;
#line 2522
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 0),
                                  Data);
#line 2524
    if (status < 0) {
#line 2525
      while (1) {
#line 2525
        if (debug) {
#line 2525
          printk("<7>%s: Writing DCR0 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2525
        break;
      }
#line 2526
      break;
    } else {
#line 2528
      while (1) {
#line 2528
        if (debug) {
#line 2528
          printk("<7>%s: DCR0 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2528
        break;
      }
    }
#line 2530
    Data = 5;
#line 2531
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 1),
                                  Data);
#line 2533
    if (status < 0) {
#line 2534
      while (1) {
#line 2534
        if (debug) {
#line 2534
          printk("<7>%s: Writing DCR1 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2534
        break;
      }
#line 2535
      break;
    } else {
#line 2537
      while (1) {
#line 2537
        if (debug) {
#line 2537
          printk("<7>%s: DCR1 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2537
        break;
      }
    }
#line 2539
    Data = 36;
#line 2540
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 2),
                                  Data);
#line 2542
    if (status < 0) {
#line 2543
      while (1) {
#line 2543
        if (debug) {
#line 2543
          printk("<7>%s: Writing DCR2 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2543
        break;
      }
#line 2544
      break;
    } else {
#line 2546
      while (1) {
#line 2546
        if (debug) {
#line 2546
          printk("<7>%s: DCR2 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2546
        break;
      }
    }
#line 2549
    Data = 0;
#line 2550
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )3, Data);
#line 2552
    if (status < 0) {
#line 2553
      while (1) {
#line 2553
        if (debug) {
#line 2553
          printk("<7>%s: Writing CLK_START_VALUE_REGISTER failed status-0x%x\n\n",
                 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2553
        break;
      }
#line 2554
      break;
    } else {
#line 2556
      while (1) {
#line 2556
        if (debug) {
#line 2556
          printk("<7>%s: CLK_START_VALUE_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2556
        break;
      }
    }
#line 2558
    Data = 32;
#line 2559
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )2, Data);
#line 2561
    if (status < 0) {
#line 2562
      while (1) {
#line 2562
        if (debug) {
#line 2562
          printk("<7>%s: Writing CLK_MULTI_REGISTER failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2562
        break;
      }
#line 2564
      goto error;
    } else {
#line 2566
      while (1) {
#line 2566
        if (debug) {
#line 2566
          printk("<7>%s: CLK_MULTI_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2566
        break;
      }
    }
#line 2570
    Data = 0;
#line 2571
    status = mos7840_set_uart_reg(serial->port[i], (__u16 )7, Data);
#line 2573
    if (status < 0) {
#line 2574
      while (1) {
#line 2574
        if (debug) {
#line 2574
          printk("<7>%s: Writing SCRATCH_PAD_REGISTER failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2574
        break;
      }
#line 2576
      break;
    } else {
#line 2578
      while (1) {
#line 2578
        if (debug) {
#line 2578
          printk("<7>%s: SCRATCH_PAD_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2578
        break;
      }
    }
#line 2582
    if (mos7840_port->port_num != 1 && (int )serial->num_ports == 2) {
#line 2585
      Data = 255;
#line 2586
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)),
                                    Data);
#line 2589
      while (1) {
#line 2589
        if (debug) {
#line 2589
          printk("<7>%s: ZLIP offset%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)));
        } else {

        }
#line 2589
        break;
      }
#line 2592
      if (status < 0) {
#line 2593
        while (1) {
#line 2593
          if (debug) {
#line 2593
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2593
          break;
        }
#line 2595
        break;
      } else {
#line 2597
        while (1) {
#line 2597
          if (debug) {
#line 2597
            printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2597
          break;
        }
      }
    } else {
#line 2600
      Data = 255;
#line 2601
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1),
                                    Data);
#line 2604
      while (1) {
#line 2604
        if (debug) {
#line 2604
          printk("<7>%s: ZLIP offset%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1));
        } else {

        }
#line 2604
        break;
      }
#line 2607
      if (status < 0) {
#line 2608
        while (1) {
#line 2608
          if (debug) {
#line 2608
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2608
          break;
        }
#line 2610
        break;
      } else {
#line 2612
        while (1) {
#line 2612
          if (debug) {
#line 2612
            printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2612
          break;
        }
      }
    }
#line 2616
    mos7840_port->control_urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 2617
    tmp___0 = kmalloc(16, (16U | 64U) | 128U);
#line 2617
    mos7840_port->ctrl_buf = tmp___0;
#line 2618
    tmp___1 = kmalloc(sizeof(struct usb_ctrlrequest ), (16U | 64U) | 128U);
#line 2618
    mos7840_port->dr = tmp___1;
#line 2620
    if ((! mos7840_port->control_urb || ! mos7840_port->ctrl_buf) || ! mos7840_port->dr) {
#line 2622
      status = -12;
#line 2623
      goto error;
    } else {

    }
#line 2447
    i = i + 1;
  }
#line 2628
  Data = 15;
#line 2629
  status = mos7840_set_reg_sync(serial->port[0], 62, Data);
#line 2630
  if (status < 0) {
#line 2631
    while (1) {
#line 2631
      if (debug) {
#line 2631
        printk("<7>%s: Writing ZLP_REG5 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2631
      break;
    }
#line 2632
    goto error;
  } else {
#line 2634
    while (1) {
#line 2634
      if (debug) {
#line 2634
        printk("<7>%s: ZLP_REG5 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2634
      break;
    }
  }
#line 2637
  tmp___2 = __create_pipe(serial->dev, 0);
#line 2637
  usb_control_msg(serial->dev, (unsigned int )(2 << 30) | tmp___2, (__u8 )3, 0, 1,
                  0, (void *)0, 0, 5 * 250);
#line 2639
  return (0);
  error: 
#line 2641
  while (1) {
#line 2641
    if (i >= 0) {

    } else {
#line 2641
      break;
    }
#line 2642
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2644
    kfree(mos7840_port->dr);
#line 2645
    kfree(mos7840_port->ctrl_buf);
#line 2646
    usb_free_urb(mos7840_port->control_urb);
#line 2647
    kfree(mos7840_port);
#line 2648
    serial->port[i] = (void *)0;
#line 2641
    i = i - 1;
  }
#line 2650
  return (status);
}
}
#line 2658 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;

  {
#line 2663
  while (1) {
#line 2663
    if (debug) {
#line 2663
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " shutdown :entering..........");
    } else {

    }
#line 2663
    break;
  }
#line 2665
  if (! serial) {
#line 2666
    while (1) {
#line 2666
      if (debug) {
#line 2666
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler \n");
      } else {

      }
#line 2666
      break;
    }
#line 2667
    return;
  } else {

  }
#line 2675
  i = 0;
#line 2675
  while (1) {
#line 2675
    if (i < (int )serial->num_ports) {

    } else {
#line 2675
      break;
    }
#line 2676
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2677
    while (1) {
#line 2677
      flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 2677
      break;
    }
#line 2678
    mos7840_port->zombie = 1;
#line 2679
    while (1) {
#line 2679
      _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 2679
      break;
    }
#line 2680
    usb_kill_urb(mos7840_port->control_urb);
#line 2681
    kfree(mos7840_port->ctrl_buf);
#line 2682
    kfree(mos7840_port->dr);
#line 2683
    kfree(mos7840_port);
#line 2684
    mos7840_set_port_private(serial->port[i], (void *)0);
#line 2675
    i = i + 1;
  }
#line 2687
  while (1) {
#line 2687
    if (debug) {
#line 2687
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Thank u :: ");
    } else {

    }
#line 2687
    break;
  }
#line 2689
  return;
}
}
#line 2691 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_driver io_driver  = 
#line 2691
     {"mos7840", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, moschip_id_table_combined,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                 0}, 0}, 1, 0U, 0U};
#line 2699 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_serial_driver moschip7840_4port_device  = 
#line 2699
     {"Moschip 7840/7820 USB Serial Driver", moschip_port_id_table, 4, {0, 0}, {"mos7840",
                                                                              0, & __this_module,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0},
    & io_driver, {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, 0, & mos7840_startup,
    & mos7840_calc_num_ports, & mos7840_shutdown, 0, 0, 0, 0, & mos7840_open, & mos7840_close,
    & mos7840_write, & mos7840_write_room, & mos7840_ioctl, & mos7840_set_termios,
    & mos7840_break, & mos7840_chars_in_buffer, & mos7840_throttle, & mos7840_unthrottle,
    & mos7840_tiocmget, & mos7840_tiocmset, & mos7840_interrupt_callback, 0, & mos7840_bulk_in_callback,
    0};
#line 2734
static int moschip7840_init(void)  __attribute__((__section__(".init.text"))) ;
#line 2734 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int moschip7840_init(void) 
{ 
  int retval ;

  {
#line 2738
  while (1) {
#line 2738
    if (debug) {
#line 2738
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_init :entering..........");
    } else {

    }
#line 2738
    break;
  }
#line 2741
  retval = usb_serial_register(& moschip7840_4port_device);
#line 2743
  if (retval) {
#line 2744
    goto failed_port_device_register;
  } else {

  }
#line 2746
  while (1) {
#line 2746
    if (debug) {
#line 2746
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entring...");
    } else {

    }
#line 2746
    break;
  }
#line 2747
  printk("<6>mos7840: 1.3.1:Moschip 7840/7820 USB Serial Driver\n");
#line 2751
  retval = usb_register(& io_driver);
#line 2752
  if (retval == 0) {
#line 2753
    while (1) {
#line 2753
      if (debug) {
#line 2753
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Leaving...");
      } else {

      }
#line 2753
      break;
    }
#line 2754
    return (0);
  } else {

  }
#line 2756
  usb_serial_deregister(& moschip7840_4port_device);
  failed_port_device_register: 
#line 2758
  return (retval);
}
}
#line 2765
static void moschip7840_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 2765 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void moschip7840_exit(void) 
{ 


  {
#line 2768
  while (1) {
#line 2768
    if (debug) {
#line 2768
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_exit :entering..........");
    } else {

    }
#line 2768
    break;
  }
#line 2770
  usb_deregister(& io_driver);
#line 2772
  usb_serial_deregister(& moschip7840_4port_device);
#line 2774
  while (1) {
#line 2774
    if (debug) {
#line 2774
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entring...");
    } else {

    }
#line 2774
    break;
  }
#line 2775
  return;
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 2777
  tmp = moschip7840_init();
#line 2777
  return (tmp);
}
}
#line 2778 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
void cleanup_module(void) 
{ 


  {
#line 2778
  moschip7840_exit();
#line 2778
  return;
}
}
#line 2781 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_description2781[48]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2781
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'M',      'o',      's',      'c', 
        'h',      'i',      'p',      ' ', 
        '7',      '8',      '4',      '0', 
        '/',      '7',      '8',      '2', 
        '0',      ' ',      'U',      'S', 
        'B',      ' ',      'S',      'e', 
        'r',      'i',      'a',      'l', 
        ' ',      'D',      'r',      'i', 
        'v',      'e',      'r',      '\000'};
#line 2782 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_license2782[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2782
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 2784 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
#line 2784 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, ((256 | 32) | 4) | 128, & param_set_bool, & param_get_bool,
    {& debug}};
#line 2784 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debugtype2784[20]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2784
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'b', 
        'o',      'o',      'l',      '\000'};
#line 2785 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debug2785[32]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2785
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'D', 
        'e',      'b',      'u',      'g', 
        ' ',      'e',      'n',      'a', 
        'b',      'l',      'e',      'd', 
        ' ',      'o',      'r',      ' ', 
        'n',      'o',      't',      '\000'};
#line 2803
void ldv_check_final_state(void) ;
#line 2806
extern void ldv_check_return_value(int res ) ;
#line 2812
extern void ldv_initialize(void) ;
#line 2815
extern void ldv_handler_precall(void) ;
#line 2818
extern int nondet_int(void) ;
#line 2821 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
int LDV_IN_INTERRUPT  ;
#line 2921 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int res_mos7840_open_18  ;
#line 2824 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
void main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_mos7840_open_18_p2 ;
  struct file *var_mos7840_close_21_p2 ;
  unsigned char const   *var_mos7840_write_25_p2 ;
  int var_mos7840_write_25_p3 ;
  struct usb_serial *var_group3 ;
  struct file *var_group4 ;
  unsigned int var_mos7840_ioctl_38_p2 ;
  unsigned long var_mos7840_ioctl_38_p3 ;
  struct ktermios *var_mos7840_set_termios_33_p2 ;
  int var_mos7840_break_23_p1 ;
  unsigned int var_mos7840_tiocmset_29_p2 ;
  unsigned int var_mos7840_tiocmset_29_p3 ;
  struct urb *var_group5 ;
  int tmp ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4582
  LDV_IN_INTERRUPT = 1;
#line 4591
  ldv_initialize();
#line 4688
  ldv_handler_precall();
#line 4689
  tmp = moschip7840_init();
#line 4689
  if (tmp) {
#line 4690
    goto ldv_final;
  } else {

  }
#line 4691
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 4695
  while (1) {
#line 4695
    tmp___1 = nondet_int();
#line 4695
    if (tmp___1 || ! (ldv_s_moschip7840_4port_device_usb_serial_driver == 0)) {

    } else {
#line 4695
      break;
    }
#line 4699
    tmp___0 = nondet_int();
#line 4699
    switch (tmp___0) {
    case 0: 
#line 4704
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 0) {
#line 4807
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 4813
    break;
    case 1: 
#line 4817
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 1) {
#line 4903
      ldv_handler_precall();
#line 4904
      res_mos7840_open_18 = mos7840_open(var_group1, var_group2, var_mos7840_open_18_p2);
#line 4905
      ldv_check_return_value(res_mos7840_open_18);
#line 4906
      if (res_mos7840_open_18) {
#line 4907
        goto ldv_module_exit;
      } else {

      }
#line 4920
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 4926
    break;
    case 2: 
#line 4930
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 2) {
#line 5016
      ldv_handler_precall();
#line 5017
      mos7840_close(var_group1, var_group2, var_mos7840_close_21_p2);
#line 5030
      ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
    } else {

    }
#line 5036
    break;
    case 3: 
#line 5126
    ldv_handler_precall();
#line 5127
    mos7840_write(var_group1, var_group2, var_mos7840_write_25_p2, var_mos7840_write_25_p3);
#line 5144
    break;
    case 4: 
#line 5234
    ldv_handler_precall();
#line 5235
    mos7840_write_room(var_group1);
#line 5254
    break;
    case 5: 
#line 5344
    ldv_handler_precall();
#line 5345
    mos7840_chars_in_buffer(var_group1);
#line 5364
    break;
    case 6: 
#line 5456
    ldv_handler_precall();
#line 5457
    mos7840_throttle(var_group1);
#line 5474
    break;
    case 7: 
#line 5566
    ldv_handler_precall();
#line 5567
    mos7840_unthrottle(var_group1);
#line 5584
    break;
    case 8: 
#line 5682
    ldv_handler_precall();
#line 5683
    mos7840_calc_num_ports(var_group3);
#line 5694
    break;
    case 9: 
#line 5792
    ldv_handler_precall();
#line 5793
    mos7840_ioctl(var_group1, var_group4, var_mos7840_ioctl_38_p2, var_mos7840_ioctl_38_p3);
#line 5804
    break;
    case 10: 
#line 5902
    ldv_handler_precall();
#line 5903
    mos7840_set_termios(var_group1, var_group2, var_mos7840_set_termios_33_p2);
#line 5914
    break;
    case 11: 
#line 6004
    ldv_handler_precall();
#line 6005
    mos7840_break(var_group1, var_mos7840_break_23_p1);
#line 6024
    break;
    case 12: 
#line 6116
    ldv_handler_precall();
#line 6117
    mos7840_tiocmget(var_group1, var_group4);
#line 6134
    break;
    case 13: 
#line 6226
    ldv_handler_precall();
#line 6227
    mos7840_tiocmset(var_group1, var_group4, var_mos7840_tiocmset_29_p2, var_mos7840_tiocmset_29_p3);
#line 6244
    break;
    case 14: 
#line 6342
    ldv_handler_precall();
#line 6343
    mos7840_startup(var_group3);
#line 6354
    break;
    case 15: 
#line 6452
    ldv_handler_precall();
#line 6453
    mos7840_shutdown(var_group3);
#line 6464
    break;
    case 16: 
#line 6552
    ldv_handler_precall();
#line 6553
    mos7840_bulk_in_callback(var_group5);
#line 6574
    break;
    case 17: 
#line 6662
    ldv_handler_precall();
#line 6663
    mos7840_interrupt_callback(var_group5);
#line 6684
    break;
    default: 
#line 6685
    break;
    }
  }
  ldv_module_exit: 
#line 6788
  ldv_handler_precall();
#line 6789
  moschip7840_exit();
  ldv_final: 
#line 6792
  ldv_check_final_state();
#line 6795
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    if (! arbitrary_memory) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    if (addr) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    if (! arbitrary_memory) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 


  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    if (urb) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
