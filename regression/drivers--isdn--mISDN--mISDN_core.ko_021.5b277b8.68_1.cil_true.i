/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 58 "include/linux/compiler.h"
struct __anonstruct____missing_field_name_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
#line 58 "include/linux/compiler.h"
struct __anonstruct____missing_field_name_3 {
   unsigned long miss ;
   unsigned long hit ;
};
#line 58 "include/linux/compiler.h"
union __anonunion____missing_field_name_1 {
   struct __anonstruct____missing_field_name_2 __annonCompField1 ;
   struct __anonstruct____missing_field_name_3 __annonCompField2 ;
   unsigned long miss_hit[2] ;
};
#line 58 "include/linux/compiler.h"
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion____missing_field_name_1 __annonCompField3 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 88 "include/linux/types.h"
typedef unsigned char u_char;
#line 90 "include/linux/types.h"
typedef unsigned int u_int;
#line 91 "include/linux/types.h"
typedef unsigned long u_long;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 190 "include/linux/types.h"
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
#line 190 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_7 atomic_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
union __anonunion____missing_field_name_9 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_9 __annonCompField4 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 114 "include/linux/kernel.h"
struct completion;
#line 208
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_13 pgd_t;
#line 272
struct page;
#line 285
struct file;
#line 302
struct seq_file;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
#line 144 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct thread_struct;
#line 353
struct raw_spinlock;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 88
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 149 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_25 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_26 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_24 {
   struct __anonstruct____missing_field_name_25 __annonCompField9 ;
   struct __anonstruct____missing_field_name_26 __annonCompField10 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_27 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_24 __annonCompField11 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_27 __annonCompField12 ;
} __attribute__((__aligned__(16))) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64] ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 411
struct kmem_cache;
#line 416 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_29 {
   unsigned long seg ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_29 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_31 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_33 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_30 {
   struct __anonstruct____missing_field_name_31 __annonCompField14 ;
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_30 __annonCompField15 ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_35 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_35 raw_rwlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 7 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 35 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 39 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[1 + 3 * 4] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
   unsigned long contending_point[4] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 173 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_36 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_36 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_37 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_37 rwlock_t;
#line 32 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_38 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 32 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_38 seqlock_t;
#line 14 "include/linux/time.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_39 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_39 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 748 "include/linux/mmzone.h"
struct ctl_table;
#line 37 "include/linux/pm.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 170 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 308
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 318 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_88 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_88 mm_context_t;
#line 9 "include/linux/gfp.h"
struct vm_area_struct;
#line 45 "include/linux/kmod.h"
struct key;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 39
struct kparam_string;
#line 39
struct kparam_array;
#line 39 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_98 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 39 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_98 __annonCompField16 ;
};
#line 52 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 58 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 19 "include/linux/marker.h"
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 36 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 41 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 49 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 10 "include/linux/timer.h"
struct tvec_base;
#line 12 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 238
struct hrtimer;
#line 239
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 15 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 36 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 47 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 70 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
#line 5 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/module.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 71
struct exception_table_entry;
#line 222
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 229
struct module_sect_attrs;
#line 229
struct module_notes_attrs;
#line 229 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 646
struct device_driver;
#line 11 "include/linux/socket.h"
struct sockaddr;
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 34 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 40 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14] ;
};
#line 58 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 154 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 264 "include/linux/mISDNif.h"
struct sockaddr_mISDN {
   sa_family_t family ;
   unsigned char dev ;
   unsigned char channel ;
   unsigned char sapi ;
   unsigned char tei ;
};
#line 45 "include/linux/net.h"
enum __anonenum_socket_state_101 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 45 "include/linux/net.h"
typedef enum __anonenum_socket_state_101 socket_state;
#line 61
struct poll_table_struct;
#line 62
struct pipe_inode_info;
#line 63
struct inode;
#line 64
struct net;
#line 128
struct fasync_struct;
#line 128
struct sock;
#line 128
struct proto_ops;
#line 128 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 145
struct kiocb;
#line 150 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *sock ) ;
   int (*bind)(struct socket *sock , struct sockaddr *myaddr , int sockaddr_len ) ;
   int (*connect)(struct socket *sock , struct sockaddr *vaddr , int sockaddr_len ,
                  int flags ) ;
   int (*socketpair)(struct socket *sock1 , struct socket *sock2 ) ;
   int (*accept)(struct socket *sock , struct socket *newsock , int flags ) ;
   int (*getname)(struct socket *sock , struct sockaddr *addr , int *sockaddr_len ,
                  int peer ) ;
   unsigned int (*poll)(struct file *file , struct socket *sock , struct poll_table_struct *wait ) ;
   int (*ioctl)(struct socket *sock , unsigned int cmd , unsigned long arg ) ;
   int (*compat_ioctl)(struct socket *sock , unsigned int cmd , unsigned long arg ) ;
   int (*listen)(struct socket *sock , int len ) ;
   int (*shutdown)(struct socket *sock , int flags ) ;
   int (*setsockopt)(struct socket *sock , int level , int optname , char *optval ,
                     int optlen ) ;
   int (*getsockopt)(struct socket *sock , int level , int optname , char *optval ,
                     int *optlen ) ;
   int (*compat_setsockopt)(struct socket *sock , int level , int optname , char *optval ,
                            int optlen ) ;
   int (*compat_getsockopt)(struct socket *sock , int level , int optname , char *optval ,
                            int *optlen ) ;
   int (*sendmsg)(struct kiocb *iocb , struct socket *sock , struct msghdr *m , size_t total_len ) ;
   int (*recvmsg)(struct kiocb *iocb , struct socket *sock , struct msghdr *m , size_t total_len ,
                  int flags ) ;
   int (*mmap)(struct file *file , struct socket *sock , struct vm_area_struct *vma ) ;
   ssize_t (*sendpage)(struct socket *sock , struct page *page , int offset , size_t size ,
                       int flags ) ;
   ssize_t (*splice_read)(struct socket *sock , loff_t *ppos , struct pipe_inode_info *pipe ,
                          size_t len , unsigned int flags ) ;
};
#line 948 "include/linux/sysctl.h"
struct nsproxy;
#line 949
struct ctl_table_root;
#line 951 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 961
struct ctl_table_header;
#line 976 "include/linux/sysctl.h"
typedef int ctl_handler(struct ctl_table *table , void *oldval , size_t *oldlenp ,
                        void *newval , size_t newlen );
#line 980 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *ctl , int write , struct file *filp , void *buffer ,
                         size_t *lenp , loff_t *ppos );
#line 1052 "include/linux/sysctl.h"
struct ctl_table {
   int ctl_name ;
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   ctl_handler *strategy ;
   void *extra1 ;
   void *extra2 ;
};
#line 1067 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *root , struct nsproxy *namespaces ) ;
   int (*permissions)(struct ctl_table_root *root , struct nsproxy *namespaces , struct ctl_table *table ) ;
};
#line 1078 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 109 "include/net/checksum.h"
struct sk_buff;
#line 19 "include/linux/klist.h"
struct klist_node;
#line 39 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_map_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 31 "include/linux/device.h"
struct device_private;
#line 33
struct driver_private;
#line 34
struct class;
#line 35
struct class_private;
#line 36
struct bus_type;
#line 37
struct bus_type_private;
#line 39 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 52
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 123 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 156 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 208
struct device_type;
#line 241 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 288 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
#line 301 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 361 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 370
struct dma_coherent_mem;
#line 370 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 13 "include/linux/dma-attrs.h"
enum dma_attr {
    DMA_ATTR_WRITE_BARRIER = 0,
    DMA_ATTR_WEAK_ORDERING = 1,
    DMA_ATTR_MAX = 2
} ;
#line 25 "include/linux/dma-attrs.h"
struct dma_attrs {
   unsigned long flags[(((unsigned long )DMA_ATTR_MAX + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/scatterlist.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 23 "include/linux/mm_types.h"
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_158 {
   u16 inuse ;
   u16 objects ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_157 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_158 __annonCompField17 ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_160 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_159 {
   struct __anonstruct____missing_field_name_160 __annonCompField19 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_161 {
   unsigned long index ;
   void *freelist ;
};
#line 40 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_157 __annonCompField18 ;
   union __anonunion____missing_field_name_159 __annonCompField20 ;
   union __anonunion____missing_field_name_161 __annonCompField21 ;
   struct list_head lru ;
};
#line 126 "include/linux/mm_types.h"
struct __anonstruct_vm_set_163 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 126 "include/linux/mm_types.h"
union __anonunion_shared_162 {
   struct __anonstruct_vm_set_163 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 126
struct anon_vma;
#line 126
struct vm_operations_struct;
#line 126
struct mempolicy;
#line 126 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_162 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 183 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 188 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 194
struct mmu_notifier_mm;
#line 194 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 19 "include/linux/mm.h"
struct file_ra_state;
#line 20
struct user_struct;
#line 21
struct writeback_control;
#line 167 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 184 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *area ) ;
   void (*close)(struct vm_area_struct *area ) ;
   int (*fault)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*page_mkwrite)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*access)(struct vm_area_struct *vma , unsigned long addr , void *buf , int len ,
                 int write ) ;
   int (*set_policy)(struct vm_area_struct *vma , struct mempolicy *new ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *vma , unsigned long addr ) ;
   int (*migrate)(struct vm_area_struct *vma , nodemask_t const   *from , nodemask_t const   *to ,
                  unsigned long flags ) ;
};
#line 11 "include/linux/dma-mapping.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 18 "include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                           gfp_t gfp ) ;
   void (*free_coherent)(struct device *dev , size_t size , void *vaddr , dma_addr_t dma_handle ) ;
   dma_addr_t (*map_page)(struct device *dev , struct page *page , unsigned long offset ,
                          size_t size , enum dma_data_direction dir , struct dma_attrs *attrs ) ;
   void (*unmap_page)(struct device *dev , dma_addr_t dma_handle , size_t size , enum dma_data_direction dir ,
                      struct dma_attrs *attrs ) ;
   int (*map_sg)(struct device *dev , struct scatterlist *sg , int nents , enum dma_data_direction dir ,
                 struct dma_attrs *attrs ) ;
   void (*unmap_sg)(struct device *dev , struct scatterlist *sg , int nents , enum dma_data_direction dir ,
                    struct dma_attrs *attrs ) ;
   void (*sync_single_for_cpu)(struct device *dev , dma_addr_t dma_handle , size_t size ,
                               enum dma_data_direction dir ) ;
   void (*sync_single_for_device)(struct device *dev , dma_addr_t dma_handle , size_t size ,
                                  enum dma_data_direction dir ) ;
   void (*sync_single_range_for_cpu)(struct device *dev , dma_addr_t dma_handle ,
                                     unsigned long offset , size_t size , enum dma_data_direction dir ) ;
   void (*sync_single_range_for_device)(struct device *dev , dma_addr_t dma_handle ,
                                        unsigned long offset , size_t size , enum dma_data_direction dir ) ;
   void (*sync_sg_for_cpu)(struct device *dev , struct scatterlist *sg , int nents ,
                           enum dma_data_direction dir ) ;
   void (*sync_sg_for_device)(struct device *dev , struct scatterlist *sg , int nents ,
                              enum dma_data_direction dir ) ;
   int (*mapping_error)(struct device *dev , dma_addr_t dma_addr ) ;
   int (*dma_supported)(struct device *dev , u64 mask ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 26 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 27
struct hrtimer_cpu_base;
#line 40
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 100 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 139 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 168 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 93 "include/linux/skbuff.h"
struct net_device;
#line 98 "include/linux/skbuff.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 104 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[32UL / sizeof(unsigned long )] ;
};
#line 113 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 252 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct dst_entry;
#line 316
struct rtable;
#line 316 "include/linux/skbuff.h"
union __anonunion____missing_field_name_168 {
   struct dst_entry *dst ;
   struct rtable *rtable ;
};
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct____missing_field_name_170 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion____missing_field_name_169 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_170 __annonCompField24 ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   struct sock *sk ;
   ktime_t tstamp ;
   struct net_device *dev ;
   union __anonunion____missing_field_name_168 __annonCompField23 ;
   struct sec_path *sp ;
   char cb[48] ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_169 __annonCompField25 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff *skb ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int iif ;
   __u16 queue_mapping ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u8 ndisc_nodetype : 2 ;
   __u8 do_not_encrypt : 1 ;
   __u8 requeue : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   __u32 mark ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 17 "include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 17 "include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 21 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 37 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_171 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 37 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_171 sync_serial_settings;
#line 43 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_172 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 43 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_172 te1_settings;
#line 50 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_173 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 50 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_173 raw_hdlc_proto;
#line 55 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_174 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 55 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_174 fr_proto;
#line 65 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_175 {
   unsigned int dlci ;
};
#line 65 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_175 fr_proto_pvc;
#line 69 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_176 {
   unsigned int dlci ;
   char master[16] ;
};
#line 69 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_176 fr_proto_pvc_info;
#line 74 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_177 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 74 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_177 cisco_proto;
#line 128 "include/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 139 "include/linux/if.h"
union __anonunion_ifs_ifsu_180 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 139 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_180 ifs_ifsu ;
};
#line 164 "include/linux/if.h"
union __anonunion_ifr_ifrn_181 {
   char ifrn_name[16] ;
};
#line 164 "include/linux/if.h"
union __anonunion_ifr_ifru_182 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16] ;
   char ifru_newname[16] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 164 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_181 ifr_ifrn ;
   union __anonunion_ifr_ifru_182 ifr_ifru ;
};
#line 19 "include/linux/ethtool.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u16 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2] ;
};
#line 53 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32] ;
   char version[32] ;
   char fw_version[32] ;
   char bus_info[32] ;
   char reserved1[32] ;
   char reserved2[12] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 71 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6] ;
};
#line 85 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0] ;
};
#line 93 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0] ;
};
#line 102 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 198 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 220 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 259 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0] ;
};
#line 268 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0] ;
};
#line 298 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 313 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64] ;
};
#line 319 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16] ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 337 "include/linux/ethtool.h"
union __anonunion_h_u_184 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64] ;
};
#line 337 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_184 h_u ;
   union __anonunion_h_u_184 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 354 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0] ;
};
#line 442 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32 stringset , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*self_test_count)(struct net_device * ) ;
   int (*get_stats_count)(struct net_device * ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
};
#line 5 "include/net/netns/core.h"
struct prot_inuse;
#line 7 "include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 18 "include/linux/snmp.h"
enum __anonenum_185 {
    IPSTATS_MIB_NUM = 0,
    IPSTATS_MIB_INPKTS = 1,
    IPSTATS_MIB_INHDRERRORS = 2,
    IPSTATS_MIB_INTOOBIGERRORS = 3,
    IPSTATS_MIB_INNOROUTES = 4,
    IPSTATS_MIB_INADDRERRORS = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS = 7,
    IPSTATS_MIB_INDISCARDS = 8,
    IPSTATS_MIB_INDELIVERS = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS = 10,
    IPSTATS_MIB_OUTPKTS = 11,
    IPSTATS_MIB_OUTDISCARDS = 12,
    IPSTATS_MIB_OUTNOROUTES = 13,
    IPSTATS_MIB_REASMTIMEOUT = 14,
    IPSTATS_MIB_REASMREQDS = 15,
    IPSTATS_MIB_REASMOKS = 16,
    IPSTATS_MIB_REASMFAILS = 17,
    IPSTATS_MIB_FRAGOKS = 18,
    IPSTATS_MIB_FRAGFAILS = 19,
    IPSTATS_MIB_FRAGCREATES = 20,
    IPSTATS_MIB_INMCASTPKTS = 21,
    IPSTATS_MIB_OUTMCASTPKTS = 22,
    IPSTATS_MIB_INBCASTPKTS = 23,
    IPSTATS_MIB_OUTBCASTPKTS = 24,
    IPSTATS_MIB_INOCTETS = 25,
    IPSTATS_MIB_OUTOCTETS = 26,
    IPSTATS_MIB_INMCASTOCTETS = 27,
    IPSTATS_MIB_OUTMCASTOCTETS = 28,
    IPSTATS_MIB_INBCASTOCTETS = 29,
    IPSTATS_MIB_OUTBCASTOCTETS = 30,
    __IPSTATS_MIB_MAX = 31
} ;
#line 59
enum __anonenum_186 {
    ICMP_MIB_NUM = 0,
    ICMP_MIB_INMSGS = 1,
    ICMP_MIB_INERRORS = 2,
    ICMP_MIB_INDESTUNREACHS = 3,
    ICMP_MIB_INTIMEEXCDS = 4,
    ICMP_MIB_INPARMPROBS = 5,
    ICMP_MIB_INSRCQUENCHS = 6,
    ICMP_MIB_INREDIRECTS = 7,
    ICMP_MIB_INECHOS = 8,
    ICMP_MIB_INECHOREPS = 9,
    ICMP_MIB_INTIMESTAMPS = 10,
    ICMP_MIB_INTIMESTAMPREPS = 11,
    ICMP_MIB_INADDRMASKS = 12,
    ICMP_MIB_INADDRMASKREPS = 13,
    ICMP_MIB_OUTMSGS = 14,
    ICMP_MIB_OUTERRORS = 15,
    ICMP_MIB_OUTDESTUNREACHS = 16,
    ICMP_MIB_OUTTIMEEXCDS = 17,
    ICMP_MIB_OUTPARMPROBS = 18,
    ICMP_MIB_OUTSRCQUENCHS = 19,
    ICMP_MIB_OUTREDIRECTS = 20,
    ICMP_MIB_OUTECHOS = 21,
    ICMP_MIB_OUTECHOREPS = 22,
    ICMP_MIB_OUTTIMESTAMPS = 23,
    ICMP_MIB_OUTTIMESTAMPREPS = 24,
    ICMP_MIB_OUTADDRMASKS = 25,
    ICMP_MIB_OUTADDRMASKREPS = 26,
    __ICMP_MIB_MAX = 27
} ;
#line 97
enum __anonenum_187 {
    ICMP6_MIB_NUM = 0,
    ICMP6_MIB_INMSGS = 1,
    ICMP6_MIB_INERRORS = 2,
    ICMP6_MIB_OUTMSGS = 3,
    __ICMP6_MIB_MAX = 4
} ;
#line 113
enum __anonenum_188 {
    TCP_MIB_NUM = 0,
    TCP_MIB_RTOALGORITHM = 1,
    TCP_MIB_RTOMIN = 2,
    TCP_MIB_RTOMAX = 3,
    TCP_MIB_MAXCONN = 4,
    TCP_MIB_ACTIVEOPENS = 5,
    TCP_MIB_PASSIVEOPENS = 6,
    TCP_MIB_ATTEMPTFAILS = 7,
    TCP_MIB_ESTABRESETS = 8,
    TCP_MIB_CURRESTAB = 9,
    TCP_MIB_INSEGS = 10,
    TCP_MIB_OUTSEGS = 11,
    TCP_MIB_RETRANSSEGS = 12,
    TCP_MIB_INERRS = 13,
    TCP_MIB_OUTRSTS = 14,
    __TCP_MIB_MAX = 15
} ;
#line 138
enum __anonenum_189 {
    UDP_MIB_NUM = 0,
    UDP_MIB_INDATAGRAMS = 1,
    UDP_MIB_NOPORTS = 2,
    UDP_MIB_INERRORS = 3,
    UDP_MIB_OUTDATAGRAMS = 4,
    UDP_MIB_RCVBUFERRORS = 5,
    UDP_MIB_SNDBUFERRORS = 6,
    __UDP_MIB_MAX = 7
} ;
#line 151
enum __anonenum_190 {
    LINUX_MIB_NUM = 0,
    LINUX_MIB_SYNCOOKIESSENT = 1,
    LINUX_MIB_SYNCOOKIESRECV = 2,
    LINUX_MIB_SYNCOOKIESFAILED = 3,
    LINUX_MIB_EMBRYONICRSTS = 4,
    LINUX_MIB_PRUNECALLED = 5,
    LINUX_MIB_RCVPRUNED = 6,
    LINUX_MIB_OFOPRUNED = 7,
    LINUX_MIB_OUTOFWINDOWICMPS = 8,
    LINUX_MIB_LOCKDROPPEDICMPS = 9,
    LINUX_MIB_ARPFILTER = 10,
    LINUX_MIB_TIMEWAITED = 11,
    LINUX_MIB_TIMEWAITRECYCLED = 12,
    LINUX_MIB_TIMEWAITKILLED = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED = 14,
    LINUX_MIB_PAWSACTIVEREJECTED = 15,
    LINUX_MIB_PAWSESTABREJECTED = 16,
    LINUX_MIB_DELAYEDACKS = 17,
    LINUX_MIB_DELAYEDACKLOCKED = 18,
    LINUX_MIB_DELAYEDACKLOST = 19,
    LINUX_MIB_LISTENOVERFLOWS = 20,
    LINUX_MIB_LISTENDROPS = 21,
    LINUX_MIB_TCPPREQUEUED = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED = 25,
    LINUX_MIB_TCPHPHITS = 26,
    LINUX_MIB_TCPHPHITSTOUSER = 27,
    LINUX_MIB_TCPPUREACKS = 28,
    LINUX_MIB_TCPHPACKS = 29,
    LINUX_MIB_TCPRENORECOVERY = 30,
    LINUX_MIB_TCPSACKRECOVERY = 31,
    LINUX_MIB_TCPSACKRENEGING = 32,
    LINUX_MIB_TCPFACKREORDER = 33,
    LINUX_MIB_TCPSACKREORDER = 34,
    LINUX_MIB_TCPRENOREORDER = 35,
    LINUX_MIB_TCPTSREORDER = 36,
    LINUX_MIB_TCPFULLUNDO = 37,
    LINUX_MIB_TCPPARTIALUNDO = 38,
    LINUX_MIB_TCPDSACKUNDO = 39,
    LINUX_MIB_TCPLOSSUNDO = 40,
    LINUX_MIB_TCPLOSS = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT = 42,
    LINUX_MIB_TCPRENOFAILURES = 43,
    LINUX_MIB_TCPSACKFAILURES = 44,
    LINUX_MIB_TCPLOSSFAILURES = 45,
    LINUX_MIB_TCPFASTRETRANS = 46,
    LINUX_MIB_TCPFORWARDRETRANS = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS = 48,
    LINUX_MIB_TCPTIMEOUTS = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL = 51,
    LINUX_MIB_TCPSCHEDULERFAILED = 52,
    LINUX_MIB_TCPRCVCOLLAPSED = 53,
    LINUX_MIB_TCPDSACKOLDSENT = 54,
    LINUX_MIB_TCPDSACKOFOSENT = 55,
    LINUX_MIB_TCPDSACKRECV = 56,
    LINUX_MIB_TCPDSACKOFORECV = 57,
    LINUX_MIB_TCPABORTONSYN = 58,
    LINUX_MIB_TCPABORTONDATA = 59,
    LINUX_MIB_TCPABORTONCLOSE = 60,
    LINUX_MIB_TCPABORTONMEMORY = 61,
    LINUX_MIB_TCPABORTONTIMEOUT = 62,
    LINUX_MIB_TCPABORTONLINGER = 63,
    LINUX_MIB_TCPABORTFAILED = 64,
    LINUX_MIB_TCPMEMORYPRESSURES = 65,
    LINUX_MIB_TCPSACKDISCARD = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO = 68,
    LINUX_MIB_TCPSPURIOUSRTOS = 69,
    LINUX_MIB_TCPMD5NOTFOUND = 70,
    LINUX_MIB_TCPMD5UNEXPECTED = 71,
    LINUX_MIB_SACKSHIFTED = 72,
    LINUX_MIB_SACKMERGED = 73,
    LINUX_MIB_SACKSHIFTFALLBACK = 74,
    __LINUX_MIB_MAX = 75
} ;
#line 232
enum __anonenum_191 {
    LINUX_MIB_XFRMNUM = 0,
    LINUX_MIB_XFRMINERROR = 1,
    LINUX_MIB_XFRMINBUFFERERROR = 2,
    LINUX_MIB_XFRMINHDRERROR = 3,
    LINUX_MIB_XFRMINNOSTATES = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR = 6,
    LINUX_MIB_XFRMINSTATESEQERROR = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH = 9,
    LINUX_MIB_XFRMINSTATEINVALID = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH = 11,
    LINUX_MIB_XFRMINNOPOLS = 12,
    LINUX_MIB_XFRMINPOLBLOCK = 13,
    LINUX_MIB_XFRMINPOLERROR = 14,
    LINUX_MIB_XFRMOUTERROR = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR = 17,
    LINUX_MIB_XFRMOUTNOSTATES = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK = 23,
    LINUX_MIB_XFRMOUTPOLDEAD = 24,
    LINUX_MIB_XFRMOUTPOLERROR = 25,
    __LINUX_MIB_XFRMMAX = 26
} ;
#line 72 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[__IPSTATS_MIB_MAX] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 80 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[__ICMP_MIB_MAX + 1] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 85 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 91 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[__ICMP6_MIB_MAX] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 96 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 103 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[__TCP_MIB_MAX] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 109 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[__UDP_MIB_MAX] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 115 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[__LINUX_MIB_MAX] ;
};
#line 121 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[__LINUX_MIB_XFRMMAX] ;
};
#line 6 "include/net/netns/mib.h"
struct proc_dir_entry;
#line 6 "include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2] ;
   struct ipstats_mib *ip_statistics[2] ;
   struct linux_mib *net_statistics[2] ;
   struct udp_mib *udp_statistics[2] ;
   struct udp_mib *udplite_statistics[2] ;
   struct icmp_mib *icmp_statistics[2] ;
   struct icmpmsg_mib *icmpmsg_statistics[2] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2] ;
   struct udp_mib *udplite_stats_in6[2] ;
   struct ipstats_mib *ipv6_statistics[2] ;
   struct icmpv6_mib *icmpv6_statistics[2] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2] ;
   struct linux_xfrm_mib *xfrm_statistics[2] ;
};
#line 8 "include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 10 "include/net/netns/packet.h"
struct netns_packet {
   rwlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 4 "include/net/inet_frag.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 11 "include/net/netns/ipv4.h"
struct ipv4_devconf;
#line 12
struct fib_rules_ops;
#line 16
struct xt_table;
#line 16
struct mfc_cache;
#line 16
struct vif_device;
#line 16 "include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 12 "include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct dst_ops;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops *ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 6 "include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 53 "include/linux/netfilter.h"
enum __anonenum_194 {
    NFPROTO_UNSPEC = 0,
    NFPROTO_IPV4 = 2,
    NFPROTO_ARP = 3,
    NFPROTO_BRIDGE = 7,
    NFPROTO_IPV6 = 10,
    NFPROTO_DECNET = 12,
    NFPROTO_NUMPROTO = 13
} ;
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 89 "include/linux/dcache.h"
union __anonunion_d_u_204 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 89
struct dentry_operations;
#line 89
struct super_block;
#line 89 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_204 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
#line 134 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 99 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 380 "include/linux/fs.h"
struct export_operations;
#line 387
struct kstatfs;
#line 390
struct cred;
#line 442 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 106 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 127 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 17 "include/linux/dqblk_qtree.h"
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 197 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 212
struct quota_format_type;
#line 214 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 284 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 321 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 335 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 550 "include/linux/fs.h"
union __anonunion_arg_211 {
   char *buf ;
   void *data ;
};
#line 550 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_210 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_211 arg ;
   int error ;
};
#line 550 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_210 read_descriptor_t;
#line 563 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 612
struct backing_dev_info;
#line 613 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 637
struct hd_struct;
#line 637
struct gendisk;
#line 637 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 713
struct inode_operations;
#line 713
struct file_operations;
#line 713
struct file_lock;
#line 713
struct cdev;
#line 713 "include/linux/fs.h"
union __anonunion____missing_field_name_212 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 713
struct dnotify_struct;
#line 713 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_212 __annonCompField26 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 865 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 876 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 899 "include/linux/fs.h"
union __anonunion_f_u_213 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 899 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_213 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1018
struct files_struct;
#line 1018 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1020 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1025 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1047 "include/linux/fs.h"
struct __anonstruct_afs_215 {
   struct list_head link ;
   int state ;
};
#line 1047 "include/linux/fs.h"
union __anonunion_fl_u_214 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_215 afs ;
};
#line 1047 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_214 fl_u ;
};
#line 1271 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1306
struct file_system_type;
#line 1306
struct super_operations;
#line 1306
struct xattr_handler;
#line 1306
struct mtd_info;
#line 1306 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
#line 1432 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1484 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1513 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1556 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1739 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2179
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char *page , char **start , off_t off , int count , int *eof ,
                        void *data );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file *file , char const   *buffer , unsigned long count ,
                         void *data );
#line 51 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 7 "include/net/netns/x_tables.h"
struct ebt_table;
#line 9 "include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[NFPROTO_NUMPROTO] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 9 "include/net/netns/conntrack.h"
struct nf_conntrack_ecache;
#line 11
struct ip_conntrack_stat;
#line 11 "include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct ip_conntrack_stat *stat ;
   struct nf_conntrack_ecache *ecache ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
};
#line 120 "include/linux/xfrm.h"
enum __anonenum_221 {
    XFRM_POLICY_IN = 0,
    XFRM_POLICY_OUT = 1,
    XFRM_POLICY_FWD = 2,
    XFRM_POLICY_MASK = 3,
    XFRM_POLICY_MAX = 3
} ;
#line 11 "include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[XFRM_POLICY_MAX * 2] ;
   struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX * 2] ;
   unsigned int policy_count[XFRM_POLICY_MAX * 2] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 28 "include/net/net_namespace.h"
struct net_generic;
#line 30 "include/net/net_namespace.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct work_struct work ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_xfrm xfrm ;
   struct net_generic *gen ;
};
#line 16 "include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 29 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *m , loff_t *pos ) ;
   void (*stop)(struct seq_file *m , void *v ) ;
   void *(*next)(struct seq_file *m , void *v , loff_t *pos ) ;
   int (*show)(struct seq_file *m , void *v ) ;
};
#line 27 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
};
#line 53 "include/linux/netdevice.h"
struct vlan_group;
#line 54
struct netpoll_info;
#line 56
struct wireless_dev;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 180
struct neighbour;
#line 181
struct neigh_parms;
#line 194 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 224 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type  __attribute__((__aligned__((1) <<  (6) ))) ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff *skb ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[(unsigned long )((128 + (16 - 1)) & ~ (16 - 1)) / sizeof(long )] ;
};
#line 270 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *skb , struct net_device *dev , unsigned short type ,
                 void const   *daddr , void const   *saddr , unsigned int len ) ;
   int (*parse)(struct sk_buff  const  *skb , unsigned char *haddr ) ;
   int (*rebuild)(struct sk_buff *skb ) ;
   int (*cache)(struct neighbour  const  *neigh , struct hh_cache *hh ) ;
   void (*cache_update)(struct hh_cache *hh , struct net_device  const  *dev , unsigned char const   *haddr ) ;
};
#line 460
struct Qdisc;
#line 460 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock  __attribute__((__aligned__((1) <<  (6) ))) ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 574 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *dev ) ;
   void (*ndo_uninit)(struct net_device *dev ) ;
   int (*ndo_open)(struct net_device *dev ) ;
   int (*ndo_stop)(struct net_device *dev ) ;
   int (*ndo_start_xmit)(struct sk_buff *skb , struct net_device *dev ) ;
   u16 (*ndo_select_queue)(struct net_device *dev , struct sk_buff *skb ) ;
   void (*ndo_change_rx_flags)(struct net_device *dev , int flags ) ;
   void (*ndo_set_rx_mode)(struct net_device *dev ) ;
   void (*ndo_set_multicast_list)(struct net_device *dev ) ;
   int (*ndo_set_mac_address)(struct net_device *dev , void *addr ) ;
   int (*ndo_validate_addr)(struct net_device *dev ) ;
   int (*ndo_do_ioctl)(struct net_device *dev , struct ifreq *ifr , int cmd ) ;
   int (*ndo_set_config)(struct net_device *dev , struct ifmap *map ) ;
   int (*ndo_change_mtu)(struct net_device *dev , int new_mtu ) ;
   int (*ndo_neigh_setup)(struct net_device *dev , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device *dev ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *dev ) ;
   void (*ndo_vlan_rx_register)(struct net_device *dev , struct vlan_group *grp ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device *dev , unsigned short vid ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device *dev , unsigned short vid ) ;
   void (*ndo_poll_controller)(struct net_device *dev ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *dev , u16 xid , struct scatterlist *sgl ,
                             unsigned int sgc ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *dev , u16 xid ) ;
};
#line 641
struct iw_handler_def;
#line 641
struct iw_public_data;
#line 641
enum __anonenum_reg_state_227 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 641
struct net_bridge_port;
#line 641
struct macvlan_port;
#line 641
struct garp_port;
#line 641
struct rtnl_link_ops;
#line 641 "include/linux/netdevice.h"
struct __anonstruct____missing_field_name_228 {
   int (*init)(struct net_device *dev ) ;
   void (*uninit)(struct net_device *dev ) ;
   int (*open)(struct net_device *dev ) ;
   int (*stop)(struct net_device *dev ) ;
   int (*hard_start_xmit)(struct sk_buff *skb , struct net_device *dev ) ;
   u16 (*select_queue)(struct net_device *dev , struct sk_buff *skb ) ;
   void (*change_rx_flags)(struct net_device *dev , int flags ) ;
   void (*set_rx_mode)(struct net_device *dev ) ;
   void (*set_multicast_list)(struct net_device *dev ) ;
   int (*set_mac_address)(struct net_device *dev , void *addr ) ;
   int (*validate_addr)(struct net_device *dev ) ;
   int (*do_ioctl)(struct net_device *dev , struct ifreq *ifr , int cmd ) ;
   int (*set_config)(struct net_device *dev , struct ifmap *map ) ;
   int (*change_mtu)(struct net_device *dev , int new_mtu ) ;
   int (*neigh_setup)(struct net_device *dev , struct neigh_parms * ) ;
   void (*tx_timeout)(struct net_device *dev ) ;
   struct net_device_stats *(*get_stats)(struct net_device *dev ) ;
   void (*vlan_rx_register)(struct net_device *dev , struct vlan_group *grp ) ;
   void (*vlan_rx_add_vid)(struct net_device *dev , unsigned short vid ) ;
   void (*vlan_rx_kill_vid)(struct net_device *dev , unsigned short vid ) ;
   void (*poll_controller)(struct net_device *dev ) ;
};
#line 641 "include/linux/netdevice.h"
struct net_device {
   char name[16] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *uc_list ;
   int uc_count ;
   int uc_promisc ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct list_head dev_addr_list ;
   unsigned char broadcast[32] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx  __attribute__((__aligned__((1) <<  (6) ))) ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt  __attribute__((__aligned__((1) <<  (6) ))) ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct net_device *link_watch_next ;
   enum __anonenum_reg_state_227 reg_state ;
   void (*destructor)(struct net_device *dev ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[3] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct __anonstruct____missing_field_name_228 __annonCompField27 ;
};
#line 10 "include/linux/irqreturn.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_229 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_229 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_231 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_232 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_233 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_234 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_235 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_236 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_230 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_231 _kill ;
   struct __anonstruct__timer_232 _timer ;
   struct __anonstruct__rt_233 _rt ;
   struct __anonstruct__sigchld_234 _sigchld ;
   struct __anonstruct__sigfault_235 _sigfault ;
   struct __anonstruct__sigpoll_236 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_230 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 18 "include/linux/percpu_counter.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_239 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_239 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 18 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 76
struct signal_struct;
#line 79
struct key_type;
#line 81
struct keyring_list;
#line 124
struct key_user;
#line 124 "include/linux/key.h"
union __anonunion_type_data_240 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
#line 124 "include/linux/key.h"
union __anonunion_payload_241 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 124 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_240 type_data ;
   union __anonunion_payload_241 payload ;
};
#line 29 "include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
#line 81 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 114 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 100
struct fs_struct;
#line 144
struct cfs_rq;
#line 145
struct task_group;
#line 346
struct user_namespace;
#line 58 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 15 "include/linux/aio.h"
struct kioctx;
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_243 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_243 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 442 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 449 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 468 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 495 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 508
struct tty_struct;
#line 508
struct taskstats;
#line 508
struct tty_audit_buf;
#line 508 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 640 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 686
struct reclaim_state;
#line 689 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 705 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 750
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 826 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 849
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 867 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 959
struct io_context;
#line 968
struct audit_context;
#line 973
struct rq;
#line 976 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 1027 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1041 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1101
struct rt_rq;
#line 1101 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1117
struct linux_binfmt;
#line 1117
struct irqaction;
#line 1117
struct css_set;
#line 1117
struct compat_robust_list_head;
#line 1117
struct ftrace_ret_stack;
#line 1117 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
#line 90 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 28 "include/linux/binfmts.h"
struct linux_binprm {
   char buf[128] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned int cred_prepared : 1 ;
   unsigned int cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 75 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs *regs ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(long signr , struct pt_regs *regs , struct file *file , unsigned long limit ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 86 "include/linux/security.h"
struct xfrm_policy;
#line 87
struct xfrm_state;
#line 26 "include/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 131 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0] ;
};
#line 130 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261 {
    RTAX_UNSPEC = 0,
    RTAX_LOCK = 1,
    RTAX_MTU = 2,
    RTAX_WINDOW = 3,
    RTAX_RTT = 4,
    RTAX_RTTVAR = 5,
    RTAX_SSTHRESH = 6,
    RTAX_CWND = 7,
    RTAX_ADVMSS = 8,
    RTAX_REORDERING = 9,
    RTAX_HOPLIMIT = 10,
    RTAX_INITCWND = 11,
    RTAX_FEATURES = 12,
    RTAX_RTO_MIN = 13,
    __RTAX_MAX = 14
} ;
#line 205 "include/net/netlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 45 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *dev ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr **tb , struct nlattr **data ) ;
   int (*newlink)(struct net_device *dev , struct nlattr **tb , struct nlattr **data ) ;
   int (*changelink)(struct net_device *dev , struct nlattr **tb , struct nlattr **data ) ;
   void (*dellink)(struct net_device *dev ) ;
   size_t (*get_size)(struct net_device  const  *dev ) ;
   int (*fill_info)(struct sk_buff *skb , struct net_device  const  *dev ) ;
   size_t (*get_xstats_size)(struct net_device  const  *dev ) ;
   int (*fill_xstats)(struct sk_buff *skb , struct net_device  const  *dev ) ;
};
#line 39 "include/net/neighbour.h"
struct neigh_table;
#line 39 "include/net/neighbour.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 72 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 99
struct neigh_ops;
#line 99 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[(32 + ((int )sizeof(unsigned long ) - 1)) & ~ ((int )sizeof(unsigned long ) - 1)] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff *skb ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops *ops ;
   u8 primary_key[0] ;
};
#line 124 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 135 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0] ;
};
#line 151 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   *pkey , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff *skb ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct timer_list gc_timer ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   unsigned int hash_chain_gc ;
   struct pneigh_entry **phash_buckets ;
};
#line 38 "include/net/dst.h"
struct dn_route;
#line 38 "include/net/dst.h"
union __anonunion____missing_field_name_269 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 38 "include/net/dst.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[__RTAX_MAX - 1] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion____missing_field_name_269 __annonCompField28 ;
};
#line 106 "include/net/dst.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *ops ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32 cookie ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device *dev , int how ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry *dst , u32 mtu ) ;
   int (*local_out)(struct sk_buff *skb ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
   struct net *dst_net ;
};
#line 85 "include/net/sock.h"
struct __anonstruct_socket_lock_t_271 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 85 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_271 socket_lock_t;
#line 101
struct proto;
#line 121 "include/net/sock.h"
union __anonunion____missing_field_name_272 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 121 "include/net/sock.h"
struct sock_common {
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion____missing_field_name_272 __annonCompField29 ;
   struct hlist_node skc_bind_node ;
   atomic_t skc_refcnt ;
   unsigned int skc_hash ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 204 "include/net/sock.h"
struct __anonstruct_sk_backlog_273 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 204 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_273 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock *sk ) ;
   void (*sk_data_ready)(struct sock *sk , int bytes ) ;
   void (*sk_write_space)(struct sock *sk ) ;
   void (*sk_error_report)(struct sock *sk ) ;
   int (*sk_backlog_rcv)(struct sock *sk , struct sk_buff *skb ) ;
   void (*sk_destruct)(struct sock *sk ) ;
};
#line 592
struct request_sock_ops;
#line 593
struct timewait_sock_ops;
#line 594
struct inet_hashinfo;
#line 595
struct raw_hashinfo;
#line 601
struct udp_table;
#line 601 "include/net/sock.h"
union __anonunion_h_274 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 601 "include/net/sock.h"
struct proto {
   void (*close)(struct sock *sk , long timeout ) ;
   int (*connect)(struct sock *sk , struct sockaddr *uaddr , int addr_len ) ;
   int (*disconnect)(struct sock *sk , int flags ) ;
   struct sock *(*accept)(struct sock *sk , int flags , int *err ) ;
   int (*ioctl)(struct sock *sk , int cmd , unsigned long arg ) ;
   int (*init)(struct sock *sk ) ;
   void (*destroy)(struct sock *sk ) ;
   void (*shutdown)(struct sock *sk , int how ) ;
   int (*setsockopt)(struct sock *sk , int level , int optname , char *optval , int optlen ) ;
   int (*getsockopt)(struct sock *sk , int level , int optname , char *optval , int *option ) ;
   int (*compat_setsockopt)(struct sock *sk , int level , int optname , char *optval ,
                            int optlen ) ;
   int (*compat_getsockopt)(struct sock *sk , int level , int optname , char *optval ,
                            int *option ) ;
   int (*sendmsg)(struct kiocb *iocb , struct sock *sk , struct msghdr *msg , size_t len ) ;
   int (*recvmsg)(struct kiocb *iocb , struct sock *sk , struct msghdr *msg , size_t len ,
                  int noblock , int flags , int *addr_len ) ;
   int (*sendpage)(struct sock *sk , struct page *page , int offset , size_t size ,
                   int flags ) ;
   int (*bind)(struct sock *sk , struct sockaddr *uaddr , int addr_len ) ;
   int (*backlog_rcv)(struct sock *sk , struct sk_buff *skb ) ;
   void (*hash)(struct sock *sk ) ;
   void (*unhash)(struct sock *sk ) ;
   int (*get_port)(struct sock *sk , unsigned short snum ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock *sk ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_274 h ;
   struct module *owner ;
   char name[32] ;
   struct list_head node ;
};
#line 418 "include/linux/mISDNif.h"
struct mISDNchannel;
#line 419
struct mISDNdevice;
#line 420
struct mISDNstack;
#line 423 "include/linux/mISDNif.h"
struct channel_req {
   u_int protocol ;
   struct sockaddr_mISDN adr ;
   struct mISDNchannel *ch ;
};
#line 429 "include/linux/mISDNif.h"
typedef int ctrl_func_t(struct mISDNchannel * , u_int  , void * );
#line 430 "include/linux/mISDNif.h"
typedef int send_func_t(struct mISDNchannel * , struct sk_buff * );
#line 431 "include/linux/mISDNif.h"
typedef int create_func_t(struct channel_req * );
#line 433 "include/linux/mISDNif.h"
struct Bprotocol {
   struct list_head list ;
   char *name ;
   u_int Bprotocols ;
   create_func_t *create ;
};
#line 440 "include/linux/mISDNif.h"
struct mISDNchannel {
   struct list_head list ;
   u_int protocol ;
   u_int nr ;
   u_long opt ;
   u_int addr ;
   struct mISDNstack *st ;
   struct mISDNchannel *peer ;
   send_func_t *send ;
   send_func_t *recv ;
   ctrl_func_t *ctrl ;
};
#line 453 "include/linux/mISDNif.h"
struct mISDN_sock_list {
   struct hlist_head head ;
   rwlock_t lock ;
};
#line 467 "include/linux/mISDNif.h"
struct mISDNdevice {
   struct mISDNchannel D ;
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int nrbchan ;
   u_char channelmap[(127 + 1) >> 3] ;
   struct list_head bchannels ;
   struct mISDNchannel *teimgr ;
   struct device dev ;
};
#line 479 "include/linux/mISDNif.h"
struct mISDNstack {
   u_long status ;
   struct mISDNdevice *dev ;
   struct task_struct *thread ;
   struct completion *notify ;
   wait_queue_head_t workq ;
   struct sk_buff_head msgq ;
   struct list_head layer2 ;
   struct mISDNchannel *layer1 ;
   struct mISDNchannel own ;
   struct mutex lmutex ;
   struct mISDN_sock_list l1sock ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmInst;
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
typedef void (*FSMFNPTR)(struct FsmInst * , int  , void * );
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct Fsm {
   FSMFNPTR *jumpmatrix ;
   int state_count ;
   int event_count ;
   char **strEvent ;
   char **strState ;
};
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmInst {
   struct Fsm *fsm ;
   int state ;
   int debug ;
   void *userdata ;
   int userint ;
   void (*printdebug)(struct FsmInst * , char *  , ...) ;
};
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmNode {
   int state ;
   int event ;
   void (*routine)(struct FsmInst * , int  , void * ) ;
};
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmTimer {
   struct FsmInst *fi ;
   struct timer_list tl ;
   int event ;
   void *arg ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_suseconds_t;
#line 237 "include/linux/mISDNif.h"
struct mISDNhead {
   unsigned int prim ;
   unsigned int id ;
} __attribute__((__packed__)) ;
#line 272 "include/linux/mISDNif.h"
struct mISDNversion {
   unsigned char major ;
   unsigned char minor ;
   unsigned short release ;
};
#line 278 "include/linux/mISDNif.h"
struct mISDN_devinfo {
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int protocol ;
   u_char channelmap[(127 + 1) >> 3] ;
   u_int nrbchan ;
   char name[20] ;
};
#line 288 "include/linux/mISDNif.h"
struct mISDN_devrename {
   u_int id ;
   char name[20] ;
};
#line 373 "include/linux/mISDNif.h"
struct mISDN_ctrl_req {
   int op ;
   int channel ;
   int p1 ;
   int p2 ;
};
#line 20 "include/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 88 "include/linux/net.h"
enum sock_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10
} ;
#line 196 "include/linux/net.h"
struct net_proto_family {
   int family ;
   int (*create)(struct net *net , struct socket *sock , int protocol ) ;
   struct module *owner ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___0 {
    IPSTATS_MIB_NUM___0 = 0,
    IPSTATS_MIB_INPKTS___0 = 1,
    IPSTATS_MIB_INHDRERRORS___0 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___0 = 3,
    IPSTATS_MIB_INNOROUTES___0 = 4,
    IPSTATS_MIB_INADDRERRORS___0 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___0 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___0 = 7,
    IPSTATS_MIB_INDISCARDS___0 = 8,
    IPSTATS_MIB_INDELIVERS___0 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___0 = 10,
    IPSTATS_MIB_OUTPKTS___0 = 11,
    IPSTATS_MIB_OUTDISCARDS___0 = 12,
    IPSTATS_MIB_OUTNOROUTES___0 = 13,
    IPSTATS_MIB_REASMTIMEOUT___0 = 14,
    IPSTATS_MIB_REASMREQDS___0 = 15,
    IPSTATS_MIB_REASMOKS___0 = 16,
    IPSTATS_MIB_REASMFAILS___0 = 17,
    IPSTATS_MIB_FRAGOKS___0 = 18,
    IPSTATS_MIB_FRAGFAILS___0 = 19,
    IPSTATS_MIB_FRAGCREATES___0 = 20,
    IPSTATS_MIB_INMCASTPKTS___0 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___0 = 22,
    IPSTATS_MIB_INBCASTPKTS___0 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___0 = 24,
    IPSTATS_MIB_INOCTETS___0 = 25,
    IPSTATS_MIB_OUTOCTETS___0 = 26,
    IPSTATS_MIB_INMCASTOCTETS___0 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___0 = 28,
    IPSTATS_MIB_INBCASTOCTETS___0 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___0 = 30,
    __IPSTATS_MIB_MAX___0 = 31
} ;
#line 59
enum __anonenum_186___0 {
    ICMP_MIB_NUM___0 = 0,
    ICMP_MIB_INMSGS___0 = 1,
    ICMP_MIB_INERRORS___0 = 2,
    ICMP_MIB_INDESTUNREACHS___0 = 3,
    ICMP_MIB_INTIMEEXCDS___0 = 4,
    ICMP_MIB_INPARMPROBS___0 = 5,
    ICMP_MIB_INSRCQUENCHS___0 = 6,
    ICMP_MIB_INREDIRECTS___0 = 7,
    ICMP_MIB_INECHOS___0 = 8,
    ICMP_MIB_INECHOREPS___0 = 9,
    ICMP_MIB_INTIMESTAMPS___0 = 10,
    ICMP_MIB_INTIMESTAMPREPS___0 = 11,
    ICMP_MIB_INADDRMASKS___0 = 12,
    ICMP_MIB_INADDRMASKREPS___0 = 13,
    ICMP_MIB_OUTMSGS___0 = 14,
    ICMP_MIB_OUTERRORS___0 = 15,
    ICMP_MIB_OUTDESTUNREACHS___0 = 16,
    ICMP_MIB_OUTTIMEEXCDS___0 = 17,
    ICMP_MIB_OUTPARMPROBS___0 = 18,
    ICMP_MIB_OUTSRCQUENCHS___0 = 19,
    ICMP_MIB_OUTREDIRECTS___0 = 20,
    ICMP_MIB_OUTECHOS___0 = 21,
    ICMP_MIB_OUTECHOREPS___0 = 22,
    ICMP_MIB_OUTTIMESTAMPS___0 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___0 = 24,
    ICMP_MIB_OUTADDRMASKS___0 = 25,
    ICMP_MIB_OUTADDRMASKREPS___0 = 26,
    __ICMP_MIB_MAX___0 = 27
} ;
#line 97
enum __anonenum_187___0 {
    ICMP6_MIB_NUM___0 = 0,
    ICMP6_MIB_INMSGS___0 = 1,
    ICMP6_MIB_INERRORS___0 = 2,
    ICMP6_MIB_OUTMSGS___0 = 3,
    __ICMP6_MIB_MAX___0 = 4
} ;
#line 113
enum __anonenum_188___0 {
    TCP_MIB_NUM___0 = 0,
    TCP_MIB_RTOALGORITHM___0 = 1,
    TCP_MIB_RTOMIN___0 = 2,
    TCP_MIB_RTOMAX___0 = 3,
    TCP_MIB_MAXCONN___0 = 4,
    TCP_MIB_ACTIVEOPENS___0 = 5,
    TCP_MIB_PASSIVEOPENS___0 = 6,
    TCP_MIB_ATTEMPTFAILS___0 = 7,
    TCP_MIB_ESTABRESETS___0 = 8,
    TCP_MIB_CURRESTAB___0 = 9,
    TCP_MIB_INSEGS___0 = 10,
    TCP_MIB_OUTSEGS___0 = 11,
    TCP_MIB_RETRANSSEGS___0 = 12,
    TCP_MIB_INERRS___0 = 13,
    TCP_MIB_OUTRSTS___0 = 14,
    __TCP_MIB_MAX___0 = 15
} ;
#line 138
enum __anonenum_189___0 {
    UDP_MIB_NUM___0 = 0,
    UDP_MIB_INDATAGRAMS___0 = 1,
    UDP_MIB_NOPORTS___0 = 2,
    UDP_MIB_INERRORS___0 = 3,
    UDP_MIB_OUTDATAGRAMS___0 = 4,
    UDP_MIB_RCVBUFERRORS___0 = 5,
    UDP_MIB_SNDBUFERRORS___0 = 6,
    __UDP_MIB_MAX___0 = 7
} ;
#line 151
enum __anonenum_190___0 {
    LINUX_MIB_NUM___0 = 0,
    LINUX_MIB_SYNCOOKIESSENT___0 = 1,
    LINUX_MIB_SYNCOOKIESRECV___0 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___0 = 3,
    LINUX_MIB_EMBRYONICRSTS___0 = 4,
    LINUX_MIB_PRUNECALLED___0 = 5,
    LINUX_MIB_RCVPRUNED___0 = 6,
    LINUX_MIB_OFOPRUNED___0 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___0 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___0 = 9,
    LINUX_MIB_ARPFILTER___0 = 10,
    LINUX_MIB_TIMEWAITED___0 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___0 = 12,
    LINUX_MIB_TIMEWAITKILLED___0 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___0 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___0 = 15,
    LINUX_MIB_PAWSESTABREJECTED___0 = 16,
    LINUX_MIB_DELAYEDACKS___0 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___0 = 18,
    LINUX_MIB_DELAYEDACKLOST___0 = 19,
    LINUX_MIB_LISTENOVERFLOWS___0 = 20,
    LINUX_MIB_LISTENDROPS___0 = 21,
    LINUX_MIB_TCPPREQUEUED___0 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___0 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___0 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___0 = 25,
    LINUX_MIB_TCPHPHITS___0 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___0 = 27,
    LINUX_MIB_TCPPUREACKS___0 = 28,
    LINUX_MIB_TCPHPACKS___0 = 29,
    LINUX_MIB_TCPRENORECOVERY___0 = 30,
    LINUX_MIB_TCPSACKRECOVERY___0 = 31,
    LINUX_MIB_TCPSACKRENEGING___0 = 32,
    LINUX_MIB_TCPFACKREORDER___0 = 33,
    LINUX_MIB_TCPSACKREORDER___0 = 34,
    LINUX_MIB_TCPRENOREORDER___0 = 35,
    LINUX_MIB_TCPTSREORDER___0 = 36,
    LINUX_MIB_TCPFULLUNDO___0 = 37,
    LINUX_MIB_TCPPARTIALUNDO___0 = 38,
    LINUX_MIB_TCPDSACKUNDO___0 = 39,
    LINUX_MIB_TCPLOSSUNDO___0 = 40,
    LINUX_MIB_TCPLOSS___0 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___0 = 42,
    LINUX_MIB_TCPRENOFAILURES___0 = 43,
    LINUX_MIB_TCPSACKFAILURES___0 = 44,
    LINUX_MIB_TCPLOSSFAILURES___0 = 45,
    LINUX_MIB_TCPFASTRETRANS___0 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___0 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___0 = 48,
    LINUX_MIB_TCPTIMEOUTS___0 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___0 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___0 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___0 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___0 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___0 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___0 = 55,
    LINUX_MIB_TCPDSACKRECV___0 = 56,
    LINUX_MIB_TCPDSACKOFORECV___0 = 57,
    LINUX_MIB_TCPABORTONSYN___0 = 58,
    LINUX_MIB_TCPABORTONDATA___0 = 59,
    LINUX_MIB_TCPABORTONCLOSE___0 = 60,
    LINUX_MIB_TCPABORTONMEMORY___0 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___0 = 62,
    LINUX_MIB_TCPABORTONLINGER___0 = 63,
    LINUX_MIB_TCPABORTFAILED___0 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___0 = 65,
    LINUX_MIB_TCPSACKDISCARD___0 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___0 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___0 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___0 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___0 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___0 = 71,
    LINUX_MIB_SACKSHIFTED___0 = 72,
    LINUX_MIB_SACKMERGED___0 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___0 = 74,
    __LINUX_MIB_MAX___0 = 75
} ;
#line 232
enum __anonenum_191___0 {
    LINUX_MIB_XFRMNUM___0 = 0,
    LINUX_MIB_XFRMINERROR___0 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___0 = 2,
    LINUX_MIB_XFRMINHDRERROR___0 = 3,
    LINUX_MIB_XFRMINNOSTATES___0 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___0 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___0 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___0 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___0 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___0 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___0 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___0 = 11,
    LINUX_MIB_XFRMINNOPOLS___0 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___0 = 13,
    LINUX_MIB_XFRMINPOLERROR___0 = 14,
    LINUX_MIB_XFRMOUTERROR___0 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___0 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___0 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___0 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___0 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___0 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___0 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___0 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___0 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___0 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___0 = 25,
    __LINUX_MIB_XFRMMAX___0 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___0 {
    NFPROTO_UNSPEC___0 = 0,
    NFPROTO_IPV4___0 = 2,
    NFPROTO_ARP___0 = 3,
    NFPROTO_BRIDGE___0 = 7,
    NFPROTO_IPV6___0 = 10,
    NFPROTO_DECNET___0 = 12,
    NFPROTO_NUMPROTO___0 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___0 {
    XFRM_POLICY_IN___0 = 0,
    XFRM_POLICY_OUT___0 = 1,
    XFRM_POLICY_FWD___0 = 2,
    XFRM_POLICY_MASK___0 = 3,
    XFRM_POLICY_MAX___0 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___0 {
    RTAX_UNSPEC___0 = 0,
    RTAX_LOCK___0 = 1,
    RTAX_MTU___0 = 2,
    RTAX_WINDOW___0 = 3,
    RTAX_RTT___0 = 4,
    RTAX_RTTVAR___0 = 5,
    RTAX_SSTHRESH___0 = 6,
    RTAX_CWND___0 = 7,
    RTAX_ADVMSS___0 = 8,
    RTAX_REORDERING___0 = 9,
    RTAX_HOPLIMIT___0 = 10,
    RTAX_INITCWND___0 = 11,
    RTAX_FEATURES___0 = 12,
    RTAX_RTO_MIN___0 = 13,
    __RTAX_MAX___0 = 14
} ;
#line 475 "include/net/sock.h"
enum sock_flags {
    SOCK_DEAD = 0,
    SOCK_DONE = 1,
    SOCK_URGINLINE = 2,
    SOCK_KEEPOPEN = 3,
    SOCK_LINGER = 4,
    SOCK_DESTROY = 5,
    SOCK_BROADCAST = 6,
    SOCK_TIMESTAMP = 7,
    SOCK_ZAPPED = 8,
    SOCK_USE_WRITE_QUEUE = 9,
    SOCK_DBG = 10,
    SOCK_RCVTSTAMP = 11,
    SOCK_RCVTSTAMPNS = 12,
    SOCK_LOCALROUTE = 13,
    SOCK_QUEUE_SHRUNK = 14,
    SOCK_TIMESTAMPING_TX_HARDWARE = 15,
    SOCK_TIMESTAMPING_TX_SOFTWARE = 16,
    SOCK_TIMESTAMPING_RX_HARDWARE = 17,
    SOCK_TIMESTAMPING_RX_SOFTWARE = 18,
    SOCK_TIMESTAMPING_SOFTWARE = 19,
    SOCK_TIMESTAMPING_RAW_HARDWARE = 20,
    SOCK_TIMESTAMPING_SYS_HARDWARE = 21
} ;
#line 458 "include/linux/mISDNif.h"
struct mISDN_sock {
   struct sock sk ;
   struct mISDNchannel ch ;
   u_int cmask ;
   struct mISDNdevice *dev ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 421 "include/linux/mISDNif.h"
struct mISDNclock;
#line 498 "include/linux/mISDNif.h"
typedef int clockctl_func_t(void * , int  );
#line 500 "include/linux/mISDNif.h"
struct mISDNclock {
   struct list_head list ;
   char name[64] ;
   int pri ;
   clockctl_func_t *ctl ;
   void *priv ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___1 {
    IPSTATS_MIB_NUM___1 = 0,
    IPSTATS_MIB_INPKTS___1 = 1,
    IPSTATS_MIB_INHDRERRORS___1 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___1 = 3,
    IPSTATS_MIB_INNOROUTES___1 = 4,
    IPSTATS_MIB_INADDRERRORS___1 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___1 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___1 = 7,
    IPSTATS_MIB_INDISCARDS___1 = 8,
    IPSTATS_MIB_INDELIVERS___1 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___1 = 10,
    IPSTATS_MIB_OUTPKTS___1 = 11,
    IPSTATS_MIB_OUTDISCARDS___1 = 12,
    IPSTATS_MIB_OUTNOROUTES___1 = 13,
    IPSTATS_MIB_REASMTIMEOUT___1 = 14,
    IPSTATS_MIB_REASMREQDS___1 = 15,
    IPSTATS_MIB_REASMOKS___1 = 16,
    IPSTATS_MIB_REASMFAILS___1 = 17,
    IPSTATS_MIB_FRAGOKS___1 = 18,
    IPSTATS_MIB_FRAGFAILS___1 = 19,
    IPSTATS_MIB_FRAGCREATES___1 = 20,
    IPSTATS_MIB_INMCASTPKTS___1 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___1 = 22,
    IPSTATS_MIB_INBCASTPKTS___1 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___1 = 24,
    IPSTATS_MIB_INOCTETS___1 = 25,
    IPSTATS_MIB_OUTOCTETS___1 = 26,
    IPSTATS_MIB_INMCASTOCTETS___1 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___1 = 28,
    IPSTATS_MIB_INBCASTOCTETS___1 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___1 = 30,
    __IPSTATS_MIB_MAX___1 = 31
} ;
#line 59
enum __anonenum_186___1 {
    ICMP_MIB_NUM___1 = 0,
    ICMP_MIB_INMSGS___1 = 1,
    ICMP_MIB_INERRORS___1 = 2,
    ICMP_MIB_INDESTUNREACHS___1 = 3,
    ICMP_MIB_INTIMEEXCDS___1 = 4,
    ICMP_MIB_INPARMPROBS___1 = 5,
    ICMP_MIB_INSRCQUENCHS___1 = 6,
    ICMP_MIB_INREDIRECTS___1 = 7,
    ICMP_MIB_INECHOS___1 = 8,
    ICMP_MIB_INECHOREPS___1 = 9,
    ICMP_MIB_INTIMESTAMPS___1 = 10,
    ICMP_MIB_INTIMESTAMPREPS___1 = 11,
    ICMP_MIB_INADDRMASKS___1 = 12,
    ICMP_MIB_INADDRMASKREPS___1 = 13,
    ICMP_MIB_OUTMSGS___1 = 14,
    ICMP_MIB_OUTERRORS___1 = 15,
    ICMP_MIB_OUTDESTUNREACHS___1 = 16,
    ICMP_MIB_OUTTIMEEXCDS___1 = 17,
    ICMP_MIB_OUTPARMPROBS___1 = 18,
    ICMP_MIB_OUTSRCQUENCHS___1 = 19,
    ICMP_MIB_OUTREDIRECTS___1 = 20,
    ICMP_MIB_OUTECHOS___1 = 21,
    ICMP_MIB_OUTECHOREPS___1 = 22,
    ICMP_MIB_OUTTIMESTAMPS___1 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___1 = 24,
    ICMP_MIB_OUTADDRMASKS___1 = 25,
    ICMP_MIB_OUTADDRMASKREPS___1 = 26,
    __ICMP_MIB_MAX___1 = 27
} ;
#line 97
enum __anonenum_187___1 {
    ICMP6_MIB_NUM___1 = 0,
    ICMP6_MIB_INMSGS___1 = 1,
    ICMP6_MIB_INERRORS___1 = 2,
    ICMP6_MIB_OUTMSGS___1 = 3,
    __ICMP6_MIB_MAX___1 = 4
} ;
#line 113
enum __anonenum_188___1 {
    TCP_MIB_NUM___1 = 0,
    TCP_MIB_RTOALGORITHM___1 = 1,
    TCP_MIB_RTOMIN___1 = 2,
    TCP_MIB_RTOMAX___1 = 3,
    TCP_MIB_MAXCONN___1 = 4,
    TCP_MIB_ACTIVEOPENS___1 = 5,
    TCP_MIB_PASSIVEOPENS___1 = 6,
    TCP_MIB_ATTEMPTFAILS___1 = 7,
    TCP_MIB_ESTABRESETS___1 = 8,
    TCP_MIB_CURRESTAB___1 = 9,
    TCP_MIB_INSEGS___1 = 10,
    TCP_MIB_OUTSEGS___1 = 11,
    TCP_MIB_RETRANSSEGS___1 = 12,
    TCP_MIB_INERRS___1 = 13,
    TCP_MIB_OUTRSTS___1 = 14,
    __TCP_MIB_MAX___1 = 15
} ;
#line 138
enum __anonenum_189___1 {
    UDP_MIB_NUM___1 = 0,
    UDP_MIB_INDATAGRAMS___1 = 1,
    UDP_MIB_NOPORTS___1 = 2,
    UDP_MIB_INERRORS___1 = 3,
    UDP_MIB_OUTDATAGRAMS___1 = 4,
    UDP_MIB_RCVBUFERRORS___1 = 5,
    UDP_MIB_SNDBUFERRORS___1 = 6,
    __UDP_MIB_MAX___1 = 7
} ;
#line 151
enum __anonenum_190___1 {
    LINUX_MIB_NUM___1 = 0,
    LINUX_MIB_SYNCOOKIESSENT___1 = 1,
    LINUX_MIB_SYNCOOKIESRECV___1 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___1 = 3,
    LINUX_MIB_EMBRYONICRSTS___1 = 4,
    LINUX_MIB_PRUNECALLED___1 = 5,
    LINUX_MIB_RCVPRUNED___1 = 6,
    LINUX_MIB_OFOPRUNED___1 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___1 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___1 = 9,
    LINUX_MIB_ARPFILTER___1 = 10,
    LINUX_MIB_TIMEWAITED___1 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___1 = 12,
    LINUX_MIB_TIMEWAITKILLED___1 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___1 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___1 = 15,
    LINUX_MIB_PAWSESTABREJECTED___1 = 16,
    LINUX_MIB_DELAYEDACKS___1 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___1 = 18,
    LINUX_MIB_DELAYEDACKLOST___1 = 19,
    LINUX_MIB_LISTENOVERFLOWS___1 = 20,
    LINUX_MIB_LISTENDROPS___1 = 21,
    LINUX_MIB_TCPPREQUEUED___1 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___1 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___1 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___1 = 25,
    LINUX_MIB_TCPHPHITS___1 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___1 = 27,
    LINUX_MIB_TCPPUREACKS___1 = 28,
    LINUX_MIB_TCPHPACKS___1 = 29,
    LINUX_MIB_TCPRENORECOVERY___1 = 30,
    LINUX_MIB_TCPSACKRECOVERY___1 = 31,
    LINUX_MIB_TCPSACKRENEGING___1 = 32,
    LINUX_MIB_TCPFACKREORDER___1 = 33,
    LINUX_MIB_TCPSACKREORDER___1 = 34,
    LINUX_MIB_TCPRENOREORDER___1 = 35,
    LINUX_MIB_TCPTSREORDER___1 = 36,
    LINUX_MIB_TCPFULLUNDO___1 = 37,
    LINUX_MIB_TCPPARTIALUNDO___1 = 38,
    LINUX_MIB_TCPDSACKUNDO___1 = 39,
    LINUX_MIB_TCPLOSSUNDO___1 = 40,
    LINUX_MIB_TCPLOSS___1 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___1 = 42,
    LINUX_MIB_TCPRENOFAILURES___1 = 43,
    LINUX_MIB_TCPSACKFAILURES___1 = 44,
    LINUX_MIB_TCPLOSSFAILURES___1 = 45,
    LINUX_MIB_TCPFASTRETRANS___1 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___1 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___1 = 48,
    LINUX_MIB_TCPTIMEOUTS___1 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___1 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___1 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___1 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___1 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___1 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___1 = 55,
    LINUX_MIB_TCPDSACKRECV___1 = 56,
    LINUX_MIB_TCPDSACKOFORECV___1 = 57,
    LINUX_MIB_TCPABORTONSYN___1 = 58,
    LINUX_MIB_TCPABORTONDATA___1 = 59,
    LINUX_MIB_TCPABORTONCLOSE___1 = 60,
    LINUX_MIB_TCPABORTONMEMORY___1 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___1 = 62,
    LINUX_MIB_TCPABORTONLINGER___1 = 63,
    LINUX_MIB_TCPABORTFAILED___1 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___1 = 65,
    LINUX_MIB_TCPSACKDISCARD___1 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___1 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___1 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___1 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___1 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___1 = 71,
    LINUX_MIB_SACKSHIFTED___1 = 72,
    LINUX_MIB_SACKMERGED___1 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___1 = 74,
    __LINUX_MIB_MAX___1 = 75
} ;
#line 232
enum __anonenum_191___1 {
    LINUX_MIB_XFRMNUM___1 = 0,
    LINUX_MIB_XFRMINERROR___1 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___1 = 2,
    LINUX_MIB_XFRMINHDRERROR___1 = 3,
    LINUX_MIB_XFRMINNOSTATES___1 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___1 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___1 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___1 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___1 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___1 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___1 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___1 = 11,
    LINUX_MIB_XFRMINNOPOLS___1 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___1 = 13,
    LINUX_MIB_XFRMINPOLERROR___1 = 14,
    LINUX_MIB_XFRMOUTERROR___1 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___1 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___1 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___1 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___1 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___1 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___1 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___1 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___1 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___1 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___1 = 25,
    __LINUX_MIB_XFRMMAX___1 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___1 {
    NFPROTO_UNSPEC___1 = 0,
    NFPROTO_IPV4___1 = 2,
    NFPROTO_ARP___1 = 3,
    NFPROTO_BRIDGE___1 = 7,
    NFPROTO_IPV6___1 = 10,
    NFPROTO_DECNET___1 = 12,
    NFPROTO_NUMPROTO___1 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___1 {
    XFRM_POLICY_IN___1 = 0,
    XFRM_POLICY_OUT___1 = 1,
    XFRM_POLICY_FWD___1 = 2,
    XFRM_POLICY_MASK___1 = 3,
    XFRM_POLICY_MAX___1 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___1 {
    RTAX_UNSPEC___1 = 0,
    RTAX_LOCK___1 = 1,
    RTAX_MTU___1 = 2,
    RTAX_WINDOW___1 = 3,
    RTAX_RTT___1 = 4,
    RTAX_RTTVAR___1 = 5,
    RTAX_SSTHRESH___1 = 6,
    RTAX_CWND___1 = 7,
    RTAX_ADVMSS___1 = 8,
    RTAX_REORDERING___1 = 9,
    RTAX_HOPLIMIT___1 = 10,
    RTAX_INITCWND___1 = 11,
    RTAX_FEATURES___1 = 12,
    RTAX_RTO_MIN___1 = 13,
    __RTAX_MAX___1 = 14
} ;
#line 85 "include/linux/mISDNhw.h"
struct dchannel {
   struct mISDNdevice dev ;
   u_long Flags ;
   struct work_struct workq ;
   void (*phfunc)(struct dchannel * ) ;
   u_int state ;
   void *l1 ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff_head squeue ;
   struct sk_buff_head rqueue ;
   struct sk_buff *tx_skb ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 148 "include/linux/mISDNhw.h"
struct bchannel {
   struct mISDNchannel ch ;
   int nr ;
   u_long Flags ;
   struct work_struct workq ;
   u_int state ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff *next_skb ;
   struct sk_buff *tx_skb ;
   struct sk_buff_head rqueue ;
   int rcount ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___2 {
    IPSTATS_MIB_NUM___2 = 0,
    IPSTATS_MIB_INPKTS___2 = 1,
    IPSTATS_MIB_INHDRERRORS___2 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___2 = 3,
    IPSTATS_MIB_INNOROUTES___2 = 4,
    IPSTATS_MIB_INADDRERRORS___2 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___2 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___2 = 7,
    IPSTATS_MIB_INDISCARDS___2 = 8,
    IPSTATS_MIB_INDELIVERS___2 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___2 = 10,
    IPSTATS_MIB_OUTPKTS___2 = 11,
    IPSTATS_MIB_OUTDISCARDS___2 = 12,
    IPSTATS_MIB_OUTNOROUTES___2 = 13,
    IPSTATS_MIB_REASMTIMEOUT___2 = 14,
    IPSTATS_MIB_REASMREQDS___2 = 15,
    IPSTATS_MIB_REASMOKS___2 = 16,
    IPSTATS_MIB_REASMFAILS___2 = 17,
    IPSTATS_MIB_FRAGOKS___2 = 18,
    IPSTATS_MIB_FRAGFAILS___2 = 19,
    IPSTATS_MIB_FRAGCREATES___2 = 20,
    IPSTATS_MIB_INMCASTPKTS___2 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___2 = 22,
    IPSTATS_MIB_INBCASTPKTS___2 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___2 = 24,
    IPSTATS_MIB_INOCTETS___2 = 25,
    IPSTATS_MIB_OUTOCTETS___2 = 26,
    IPSTATS_MIB_INMCASTOCTETS___2 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___2 = 28,
    IPSTATS_MIB_INBCASTOCTETS___2 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___2 = 30,
    __IPSTATS_MIB_MAX___2 = 31
} ;
#line 59
enum __anonenum_186___2 {
    ICMP_MIB_NUM___2 = 0,
    ICMP_MIB_INMSGS___2 = 1,
    ICMP_MIB_INERRORS___2 = 2,
    ICMP_MIB_INDESTUNREACHS___2 = 3,
    ICMP_MIB_INTIMEEXCDS___2 = 4,
    ICMP_MIB_INPARMPROBS___2 = 5,
    ICMP_MIB_INSRCQUENCHS___2 = 6,
    ICMP_MIB_INREDIRECTS___2 = 7,
    ICMP_MIB_INECHOS___2 = 8,
    ICMP_MIB_INECHOREPS___2 = 9,
    ICMP_MIB_INTIMESTAMPS___2 = 10,
    ICMP_MIB_INTIMESTAMPREPS___2 = 11,
    ICMP_MIB_INADDRMASKS___2 = 12,
    ICMP_MIB_INADDRMASKREPS___2 = 13,
    ICMP_MIB_OUTMSGS___2 = 14,
    ICMP_MIB_OUTERRORS___2 = 15,
    ICMP_MIB_OUTDESTUNREACHS___2 = 16,
    ICMP_MIB_OUTTIMEEXCDS___2 = 17,
    ICMP_MIB_OUTPARMPROBS___2 = 18,
    ICMP_MIB_OUTSRCQUENCHS___2 = 19,
    ICMP_MIB_OUTREDIRECTS___2 = 20,
    ICMP_MIB_OUTECHOS___2 = 21,
    ICMP_MIB_OUTECHOREPS___2 = 22,
    ICMP_MIB_OUTTIMESTAMPS___2 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___2 = 24,
    ICMP_MIB_OUTADDRMASKS___2 = 25,
    ICMP_MIB_OUTADDRMASKREPS___2 = 26,
    __ICMP_MIB_MAX___2 = 27
} ;
#line 97
enum __anonenum_187___2 {
    ICMP6_MIB_NUM___2 = 0,
    ICMP6_MIB_INMSGS___2 = 1,
    ICMP6_MIB_INERRORS___2 = 2,
    ICMP6_MIB_OUTMSGS___2 = 3,
    __ICMP6_MIB_MAX___2 = 4
} ;
#line 113
enum __anonenum_188___2 {
    TCP_MIB_NUM___2 = 0,
    TCP_MIB_RTOALGORITHM___2 = 1,
    TCP_MIB_RTOMIN___2 = 2,
    TCP_MIB_RTOMAX___2 = 3,
    TCP_MIB_MAXCONN___2 = 4,
    TCP_MIB_ACTIVEOPENS___2 = 5,
    TCP_MIB_PASSIVEOPENS___2 = 6,
    TCP_MIB_ATTEMPTFAILS___2 = 7,
    TCP_MIB_ESTABRESETS___2 = 8,
    TCP_MIB_CURRESTAB___2 = 9,
    TCP_MIB_INSEGS___2 = 10,
    TCP_MIB_OUTSEGS___2 = 11,
    TCP_MIB_RETRANSSEGS___2 = 12,
    TCP_MIB_INERRS___2 = 13,
    TCP_MIB_OUTRSTS___2 = 14,
    __TCP_MIB_MAX___2 = 15
} ;
#line 138
enum __anonenum_189___2 {
    UDP_MIB_NUM___2 = 0,
    UDP_MIB_INDATAGRAMS___2 = 1,
    UDP_MIB_NOPORTS___2 = 2,
    UDP_MIB_INERRORS___2 = 3,
    UDP_MIB_OUTDATAGRAMS___2 = 4,
    UDP_MIB_RCVBUFERRORS___2 = 5,
    UDP_MIB_SNDBUFERRORS___2 = 6,
    __UDP_MIB_MAX___2 = 7
} ;
#line 151
enum __anonenum_190___2 {
    LINUX_MIB_NUM___2 = 0,
    LINUX_MIB_SYNCOOKIESSENT___2 = 1,
    LINUX_MIB_SYNCOOKIESRECV___2 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___2 = 3,
    LINUX_MIB_EMBRYONICRSTS___2 = 4,
    LINUX_MIB_PRUNECALLED___2 = 5,
    LINUX_MIB_RCVPRUNED___2 = 6,
    LINUX_MIB_OFOPRUNED___2 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___2 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___2 = 9,
    LINUX_MIB_ARPFILTER___2 = 10,
    LINUX_MIB_TIMEWAITED___2 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___2 = 12,
    LINUX_MIB_TIMEWAITKILLED___2 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___2 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___2 = 15,
    LINUX_MIB_PAWSESTABREJECTED___2 = 16,
    LINUX_MIB_DELAYEDACKS___2 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___2 = 18,
    LINUX_MIB_DELAYEDACKLOST___2 = 19,
    LINUX_MIB_LISTENOVERFLOWS___2 = 20,
    LINUX_MIB_LISTENDROPS___2 = 21,
    LINUX_MIB_TCPPREQUEUED___2 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___2 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___2 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___2 = 25,
    LINUX_MIB_TCPHPHITS___2 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___2 = 27,
    LINUX_MIB_TCPPUREACKS___2 = 28,
    LINUX_MIB_TCPHPACKS___2 = 29,
    LINUX_MIB_TCPRENORECOVERY___2 = 30,
    LINUX_MIB_TCPSACKRECOVERY___2 = 31,
    LINUX_MIB_TCPSACKRENEGING___2 = 32,
    LINUX_MIB_TCPFACKREORDER___2 = 33,
    LINUX_MIB_TCPSACKREORDER___2 = 34,
    LINUX_MIB_TCPRENOREORDER___2 = 35,
    LINUX_MIB_TCPTSREORDER___2 = 36,
    LINUX_MIB_TCPFULLUNDO___2 = 37,
    LINUX_MIB_TCPPARTIALUNDO___2 = 38,
    LINUX_MIB_TCPDSACKUNDO___2 = 39,
    LINUX_MIB_TCPLOSSUNDO___2 = 40,
    LINUX_MIB_TCPLOSS___2 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___2 = 42,
    LINUX_MIB_TCPRENOFAILURES___2 = 43,
    LINUX_MIB_TCPSACKFAILURES___2 = 44,
    LINUX_MIB_TCPLOSSFAILURES___2 = 45,
    LINUX_MIB_TCPFASTRETRANS___2 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___2 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___2 = 48,
    LINUX_MIB_TCPTIMEOUTS___2 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___2 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___2 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___2 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___2 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___2 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___2 = 55,
    LINUX_MIB_TCPDSACKRECV___2 = 56,
    LINUX_MIB_TCPDSACKOFORECV___2 = 57,
    LINUX_MIB_TCPABORTONSYN___2 = 58,
    LINUX_MIB_TCPABORTONDATA___2 = 59,
    LINUX_MIB_TCPABORTONCLOSE___2 = 60,
    LINUX_MIB_TCPABORTONMEMORY___2 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___2 = 62,
    LINUX_MIB_TCPABORTONLINGER___2 = 63,
    LINUX_MIB_TCPABORTFAILED___2 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___2 = 65,
    LINUX_MIB_TCPSACKDISCARD___2 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___2 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___2 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___2 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___2 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___2 = 71,
    LINUX_MIB_SACKSHIFTED___2 = 72,
    LINUX_MIB_SACKMERGED___2 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___2 = 74,
    __LINUX_MIB_MAX___2 = 75
} ;
#line 232
enum __anonenum_191___2 {
    LINUX_MIB_XFRMNUM___2 = 0,
    LINUX_MIB_XFRMINERROR___2 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___2 = 2,
    LINUX_MIB_XFRMINHDRERROR___2 = 3,
    LINUX_MIB_XFRMINNOSTATES___2 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___2 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___2 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___2 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___2 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___2 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___2 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___2 = 11,
    LINUX_MIB_XFRMINNOPOLS___2 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___2 = 13,
    LINUX_MIB_XFRMINPOLERROR___2 = 14,
    LINUX_MIB_XFRMOUTERROR___2 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___2 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___2 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___2 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___2 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___2 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___2 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___2 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___2 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___2 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___2 = 25,
    __LINUX_MIB_XFRMMAX___2 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___2 {
    NFPROTO_UNSPEC___2 = 0,
    NFPROTO_IPV4___2 = 2,
    NFPROTO_ARP___2 = 3,
    NFPROTO_BRIDGE___2 = 7,
    NFPROTO_IPV6___2 = 10,
    NFPROTO_DECNET___2 = 12,
    NFPROTO_NUMPROTO___2 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___2 {
    XFRM_POLICY_IN___2 = 0,
    XFRM_POLICY_OUT___2 = 1,
    XFRM_POLICY_FWD___2 = 2,
    XFRM_POLICY_MASK___2 = 3,
    XFRM_POLICY_MAX___2 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___2 {
    RTAX_UNSPEC___2 = 0,
    RTAX_LOCK___2 = 1,
    RTAX_MTU___2 = 2,
    RTAX_WINDOW___2 = 3,
    RTAX_RTT___2 = 4,
    RTAX_RTTVAR___2 = 5,
    RTAX_SSTHRESH___2 = 6,
    RTAX_CWND___2 = 7,
    RTAX_ADVMSS___2 = 8,
    RTAX_REORDERING___2 = 9,
    RTAX_HOPLIMIT___2 = 10,
    RTAX_INITCWND___2 = 11,
    RTAX_FEATURES___2 = 12,
    RTAX_RTO_MIN___2 = 13,
    __RTAX_MAX___2 = 14
} ;
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_99 {
   atomic_long_t a ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_99 local_t;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___3 {
    IPSTATS_MIB_NUM___3 = 0,
    IPSTATS_MIB_INPKTS___3 = 1,
    IPSTATS_MIB_INHDRERRORS___3 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___3 = 3,
    IPSTATS_MIB_INNOROUTES___3 = 4,
    IPSTATS_MIB_INADDRERRORS___3 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___3 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___3 = 7,
    IPSTATS_MIB_INDISCARDS___3 = 8,
    IPSTATS_MIB_INDELIVERS___3 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___3 = 10,
    IPSTATS_MIB_OUTPKTS___3 = 11,
    IPSTATS_MIB_OUTDISCARDS___3 = 12,
    IPSTATS_MIB_OUTNOROUTES___3 = 13,
    IPSTATS_MIB_REASMTIMEOUT___3 = 14,
    IPSTATS_MIB_REASMREQDS___3 = 15,
    IPSTATS_MIB_REASMOKS___3 = 16,
    IPSTATS_MIB_REASMFAILS___3 = 17,
    IPSTATS_MIB_FRAGOKS___3 = 18,
    IPSTATS_MIB_FRAGFAILS___3 = 19,
    IPSTATS_MIB_FRAGCREATES___3 = 20,
    IPSTATS_MIB_INMCASTPKTS___3 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___3 = 22,
    IPSTATS_MIB_INBCASTPKTS___3 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___3 = 24,
    IPSTATS_MIB_INOCTETS___3 = 25,
    IPSTATS_MIB_OUTOCTETS___3 = 26,
    IPSTATS_MIB_INMCASTOCTETS___3 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___3 = 28,
    IPSTATS_MIB_INBCASTOCTETS___3 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___3 = 30,
    __IPSTATS_MIB_MAX___3 = 31
} ;
#line 59
enum __anonenum_186___3 {
    ICMP_MIB_NUM___3 = 0,
    ICMP_MIB_INMSGS___3 = 1,
    ICMP_MIB_INERRORS___3 = 2,
    ICMP_MIB_INDESTUNREACHS___3 = 3,
    ICMP_MIB_INTIMEEXCDS___3 = 4,
    ICMP_MIB_INPARMPROBS___3 = 5,
    ICMP_MIB_INSRCQUENCHS___3 = 6,
    ICMP_MIB_INREDIRECTS___3 = 7,
    ICMP_MIB_INECHOS___3 = 8,
    ICMP_MIB_INECHOREPS___3 = 9,
    ICMP_MIB_INTIMESTAMPS___3 = 10,
    ICMP_MIB_INTIMESTAMPREPS___3 = 11,
    ICMP_MIB_INADDRMASKS___3 = 12,
    ICMP_MIB_INADDRMASKREPS___3 = 13,
    ICMP_MIB_OUTMSGS___3 = 14,
    ICMP_MIB_OUTERRORS___3 = 15,
    ICMP_MIB_OUTDESTUNREACHS___3 = 16,
    ICMP_MIB_OUTTIMEEXCDS___3 = 17,
    ICMP_MIB_OUTPARMPROBS___3 = 18,
    ICMP_MIB_OUTSRCQUENCHS___3 = 19,
    ICMP_MIB_OUTREDIRECTS___3 = 20,
    ICMP_MIB_OUTECHOS___3 = 21,
    ICMP_MIB_OUTECHOREPS___3 = 22,
    ICMP_MIB_OUTTIMESTAMPS___3 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___3 = 24,
    ICMP_MIB_OUTADDRMASKS___3 = 25,
    ICMP_MIB_OUTADDRMASKREPS___3 = 26,
    __ICMP_MIB_MAX___3 = 27
} ;
#line 97
enum __anonenum_187___3 {
    ICMP6_MIB_NUM___3 = 0,
    ICMP6_MIB_INMSGS___3 = 1,
    ICMP6_MIB_INERRORS___3 = 2,
    ICMP6_MIB_OUTMSGS___3 = 3,
    __ICMP6_MIB_MAX___3 = 4
} ;
#line 113
enum __anonenum_188___3 {
    TCP_MIB_NUM___3 = 0,
    TCP_MIB_RTOALGORITHM___3 = 1,
    TCP_MIB_RTOMIN___3 = 2,
    TCP_MIB_RTOMAX___3 = 3,
    TCP_MIB_MAXCONN___3 = 4,
    TCP_MIB_ACTIVEOPENS___3 = 5,
    TCP_MIB_PASSIVEOPENS___3 = 6,
    TCP_MIB_ATTEMPTFAILS___3 = 7,
    TCP_MIB_ESTABRESETS___3 = 8,
    TCP_MIB_CURRESTAB___3 = 9,
    TCP_MIB_INSEGS___3 = 10,
    TCP_MIB_OUTSEGS___3 = 11,
    TCP_MIB_RETRANSSEGS___3 = 12,
    TCP_MIB_INERRS___3 = 13,
    TCP_MIB_OUTRSTS___3 = 14,
    __TCP_MIB_MAX___3 = 15
} ;
#line 138
enum __anonenum_189___3 {
    UDP_MIB_NUM___3 = 0,
    UDP_MIB_INDATAGRAMS___3 = 1,
    UDP_MIB_NOPORTS___3 = 2,
    UDP_MIB_INERRORS___3 = 3,
    UDP_MIB_OUTDATAGRAMS___3 = 4,
    UDP_MIB_RCVBUFERRORS___3 = 5,
    UDP_MIB_SNDBUFERRORS___3 = 6,
    __UDP_MIB_MAX___3 = 7
} ;
#line 151
enum __anonenum_190___3 {
    LINUX_MIB_NUM___3 = 0,
    LINUX_MIB_SYNCOOKIESSENT___3 = 1,
    LINUX_MIB_SYNCOOKIESRECV___3 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___3 = 3,
    LINUX_MIB_EMBRYONICRSTS___3 = 4,
    LINUX_MIB_PRUNECALLED___3 = 5,
    LINUX_MIB_RCVPRUNED___3 = 6,
    LINUX_MIB_OFOPRUNED___3 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___3 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___3 = 9,
    LINUX_MIB_ARPFILTER___3 = 10,
    LINUX_MIB_TIMEWAITED___3 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___3 = 12,
    LINUX_MIB_TIMEWAITKILLED___3 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___3 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___3 = 15,
    LINUX_MIB_PAWSESTABREJECTED___3 = 16,
    LINUX_MIB_DELAYEDACKS___3 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___3 = 18,
    LINUX_MIB_DELAYEDACKLOST___3 = 19,
    LINUX_MIB_LISTENOVERFLOWS___3 = 20,
    LINUX_MIB_LISTENDROPS___3 = 21,
    LINUX_MIB_TCPPREQUEUED___3 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___3 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___3 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___3 = 25,
    LINUX_MIB_TCPHPHITS___3 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___3 = 27,
    LINUX_MIB_TCPPUREACKS___3 = 28,
    LINUX_MIB_TCPHPACKS___3 = 29,
    LINUX_MIB_TCPRENORECOVERY___3 = 30,
    LINUX_MIB_TCPSACKRECOVERY___3 = 31,
    LINUX_MIB_TCPSACKRENEGING___3 = 32,
    LINUX_MIB_TCPFACKREORDER___3 = 33,
    LINUX_MIB_TCPSACKREORDER___3 = 34,
    LINUX_MIB_TCPRENOREORDER___3 = 35,
    LINUX_MIB_TCPTSREORDER___3 = 36,
    LINUX_MIB_TCPFULLUNDO___3 = 37,
    LINUX_MIB_TCPPARTIALUNDO___3 = 38,
    LINUX_MIB_TCPDSACKUNDO___3 = 39,
    LINUX_MIB_TCPLOSSUNDO___3 = 40,
    LINUX_MIB_TCPLOSS___3 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___3 = 42,
    LINUX_MIB_TCPRENOFAILURES___3 = 43,
    LINUX_MIB_TCPSACKFAILURES___3 = 44,
    LINUX_MIB_TCPLOSSFAILURES___3 = 45,
    LINUX_MIB_TCPFASTRETRANS___3 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___3 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___3 = 48,
    LINUX_MIB_TCPTIMEOUTS___3 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___3 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___3 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___3 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___3 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___3 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___3 = 55,
    LINUX_MIB_TCPDSACKRECV___3 = 56,
    LINUX_MIB_TCPDSACKOFORECV___3 = 57,
    LINUX_MIB_TCPABORTONSYN___3 = 58,
    LINUX_MIB_TCPABORTONDATA___3 = 59,
    LINUX_MIB_TCPABORTONCLOSE___3 = 60,
    LINUX_MIB_TCPABORTONMEMORY___3 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___3 = 62,
    LINUX_MIB_TCPABORTONLINGER___3 = 63,
    LINUX_MIB_TCPABORTFAILED___3 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___3 = 65,
    LINUX_MIB_TCPSACKDISCARD___3 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___3 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___3 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___3 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___3 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___3 = 71,
    LINUX_MIB_SACKSHIFTED___3 = 72,
    LINUX_MIB_SACKMERGED___3 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___3 = 74,
    __LINUX_MIB_MAX___3 = 75
} ;
#line 232
enum __anonenum_191___3 {
    LINUX_MIB_XFRMNUM___3 = 0,
    LINUX_MIB_XFRMINERROR___3 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___3 = 2,
    LINUX_MIB_XFRMINHDRERROR___3 = 3,
    LINUX_MIB_XFRMINNOSTATES___3 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___3 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___3 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___3 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___3 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___3 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___3 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___3 = 11,
    LINUX_MIB_XFRMINNOPOLS___3 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___3 = 13,
    LINUX_MIB_XFRMINPOLERROR___3 = 14,
    LINUX_MIB_XFRMOUTERROR___3 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___3 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___3 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___3 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___3 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___3 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___3 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___3 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___3 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___3 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___3 = 25,
    __LINUX_MIB_XFRMMAX___3 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___3 {
    NFPROTO_UNSPEC___3 = 0,
    NFPROTO_IPV4___3 = 2,
    NFPROTO_ARP___3 = 3,
    NFPROTO_BRIDGE___3 = 7,
    NFPROTO_IPV6___3 = 10,
    NFPROTO_DECNET___3 = 12,
    NFPROTO_NUMPROTO___3 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___3 {
    XFRM_POLICY_IN___3 = 0,
    XFRM_POLICY_OUT___3 = 1,
    XFRM_POLICY_FWD___3 = 2,
    XFRM_POLICY_MASK___3 = 3,
    XFRM_POLICY_MAX___3 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___3 {
    RTAX_UNSPEC___3 = 0,
    RTAX_LOCK___3 = 1,
    RTAX_MTU___3 = 2,
    RTAX_WINDOW___3 = 3,
    RTAX_RTT___3 = 4,
    RTAX_RTTVAR___3 = 5,
    RTAX_SSTHRESH___3 = 6,
    RTAX_CWND___3 = 7,
    RTAX_ADVMSS___3 = 8,
    RTAX_REORDERING___3 = 9,
    RTAX_HOPLIMIT___3 = 10,
    RTAX_INITCWND___3 = 11,
    RTAX_FEATURES___3 = 12,
    RTAX_RTO_MIN___3 = 13,
    __RTAX_MAX___3 = 14
} ;
#line 115 "include/linux/mISDNhw.h"
typedef int dchannel_l1callback(struct dchannel * , u_int  );
#line 144
struct layer1;
#line 27 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
struct layer1 {
   u_long Flags ;
   struct FsmInst l1m ;
   struct FsmTimer timer ;
   int delay ;
   struct dchannel *dch ;
   dchannel_l1callback *dcb ;
};
#line 41
enum __anonenum_275 {
    ST_L1_F2 = 0,
    ST_L1_F3 = 1,
    ST_L1_F4 = 2,
    ST_L1_F5 = 3,
    ST_L1_F6 = 4,
    ST_L1_F7 = 5,
    ST_L1_F8 = 6
} ;
#line 64
enum __anonenum_276 {
    EV_PH_ACTIVATE = 0,
    EV_PH_DEACTIVATE = 1,
    EV_RESET_IND = 2,
    EV_DEACT_CNF = 3,
    EV_DEACT_IND = 4,
    EV_POWER_UP = 5,
    EV_ANYSIG_IND = 6,
    EV_INFO2_IND = 7,
    EV_INFO4_IND = 8,
    EV_TIMER_DEACT = 9,
    EV_TIMER_ACT = 10,
    EV_TIMER3 = 11
} ;
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___4 {
    IPSTATS_MIB_NUM___4 = 0,
    IPSTATS_MIB_INPKTS___4 = 1,
    IPSTATS_MIB_INHDRERRORS___4 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___4 = 3,
    IPSTATS_MIB_INNOROUTES___4 = 4,
    IPSTATS_MIB_INADDRERRORS___4 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___4 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___4 = 7,
    IPSTATS_MIB_INDISCARDS___4 = 8,
    IPSTATS_MIB_INDELIVERS___4 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___4 = 10,
    IPSTATS_MIB_OUTPKTS___4 = 11,
    IPSTATS_MIB_OUTDISCARDS___4 = 12,
    IPSTATS_MIB_OUTNOROUTES___4 = 13,
    IPSTATS_MIB_REASMTIMEOUT___4 = 14,
    IPSTATS_MIB_REASMREQDS___4 = 15,
    IPSTATS_MIB_REASMOKS___4 = 16,
    IPSTATS_MIB_REASMFAILS___4 = 17,
    IPSTATS_MIB_FRAGOKS___4 = 18,
    IPSTATS_MIB_FRAGFAILS___4 = 19,
    IPSTATS_MIB_FRAGCREATES___4 = 20,
    IPSTATS_MIB_INMCASTPKTS___4 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___4 = 22,
    IPSTATS_MIB_INBCASTPKTS___4 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___4 = 24,
    IPSTATS_MIB_INOCTETS___4 = 25,
    IPSTATS_MIB_OUTOCTETS___4 = 26,
    IPSTATS_MIB_INMCASTOCTETS___4 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___4 = 28,
    IPSTATS_MIB_INBCASTOCTETS___4 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___4 = 30,
    __IPSTATS_MIB_MAX___4 = 31
} ;
#line 59
enum __anonenum_186___4 {
    ICMP_MIB_NUM___4 = 0,
    ICMP_MIB_INMSGS___4 = 1,
    ICMP_MIB_INERRORS___4 = 2,
    ICMP_MIB_INDESTUNREACHS___4 = 3,
    ICMP_MIB_INTIMEEXCDS___4 = 4,
    ICMP_MIB_INPARMPROBS___4 = 5,
    ICMP_MIB_INSRCQUENCHS___4 = 6,
    ICMP_MIB_INREDIRECTS___4 = 7,
    ICMP_MIB_INECHOS___4 = 8,
    ICMP_MIB_INECHOREPS___4 = 9,
    ICMP_MIB_INTIMESTAMPS___4 = 10,
    ICMP_MIB_INTIMESTAMPREPS___4 = 11,
    ICMP_MIB_INADDRMASKS___4 = 12,
    ICMP_MIB_INADDRMASKREPS___4 = 13,
    ICMP_MIB_OUTMSGS___4 = 14,
    ICMP_MIB_OUTERRORS___4 = 15,
    ICMP_MIB_OUTDESTUNREACHS___4 = 16,
    ICMP_MIB_OUTTIMEEXCDS___4 = 17,
    ICMP_MIB_OUTPARMPROBS___4 = 18,
    ICMP_MIB_OUTSRCQUENCHS___4 = 19,
    ICMP_MIB_OUTREDIRECTS___4 = 20,
    ICMP_MIB_OUTECHOS___4 = 21,
    ICMP_MIB_OUTECHOREPS___4 = 22,
    ICMP_MIB_OUTTIMESTAMPS___4 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___4 = 24,
    ICMP_MIB_OUTADDRMASKS___4 = 25,
    ICMP_MIB_OUTADDRMASKREPS___4 = 26,
    __ICMP_MIB_MAX___4 = 27
} ;
#line 97
enum __anonenum_187___4 {
    ICMP6_MIB_NUM___4 = 0,
    ICMP6_MIB_INMSGS___4 = 1,
    ICMP6_MIB_INERRORS___4 = 2,
    ICMP6_MIB_OUTMSGS___4 = 3,
    __ICMP6_MIB_MAX___4 = 4
} ;
#line 113
enum __anonenum_188___4 {
    TCP_MIB_NUM___4 = 0,
    TCP_MIB_RTOALGORITHM___4 = 1,
    TCP_MIB_RTOMIN___4 = 2,
    TCP_MIB_RTOMAX___4 = 3,
    TCP_MIB_MAXCONN___4 = 4,
    TCP_MIB_ACTIVEOPENS___4 = 5,
    TCP_MIB_PASSIVEOPENS___4 = 6,
    TCP_MIB_ATTEMPTFAILS___4 = 7,
    TCP_MIB_ESTABRESETS___4 = 8,
    TCP_MIB_CURRESTAB___4 = 9,
    TCP_MIB_INSEGS___4 = 10,
    TCP_MIB_OUTSEGS___4 = 11,
    TCP_MIB_RETRANSSEGS___4 = 12,
    TCP_MIB_INERRS___4 = 13,
    TCP_MIB_OUTRSTS___4 = 14,
    __TCP_MIB_MAX___4 = 15
} ;
#line 138
enum __anonenum_189___4 {
    UDP_MIB_NUM___4 = 0,
    UDP_MIB_INDATAGRAMS___4 = 1,
    UDP_MIB_NOPORTS___4 = 2,
    UDP_MIB_INERRORS___4 = 3,
    UDP_MIB_OUTDATAGRAMS___4 = 4,
    UDP_MIB_RCVBUFERRORS___4 = 5,
    UDP_MIB_SNDBUFERRORS___4 = 6,
    __UDP_MIB_MAX___4 = 7
} ;
#line 151
enum __anonenum_190___4 {
    LINUX_MIB_NUM___4 = 0,
    LINUX_MIB_SYNCOOKIESSENT___4 = 1,
    LINUX_MIB_SYNCOOKIESRECV___4 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___4 = 3,
    LINUX_MIB_EMBRYONICRSTS___4 = 4,
    LINUX_MIB_PRUNECALLED___4 = 5,
    LINUX_MIB_RCVPRUNED___4 = 6,
    LINUX_MIB_OFOPRUNED___4 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___4 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___4 = 9,
    LINUX_MIB_ARPFILTER___4 = 10,
    LINUX_MIB_TIMEWAITED___4 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___4 = 12,
    LINUX_MIB_TIMEWAITKILLED___4 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___4 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___4 = 15,
    LINUX_MIB_PAWSESTABREJECTED___4 = 16,
    LINUX_MIB_DELAYEDACKS___4 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___4 = 18,
    LINUX_MIB_DELAYEDACKLOST___4 = 19,
    LINUX_MIB_LISTENOVERFLOWS___4 = 20,
    LINUX_MIB_LISTENDROPS___4 = 21,
    LINUX_MIB_TCPPREQUEUED___4 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___4 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___4 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___4 = 25,
    LINUX_MIB_TCPHPHITS___4 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___4 = 27,
    LINUX_MIB_TCPPUREACKS___4 = 28,
    LINUX_MIB_TCPHPACKS___4 = 29,
    LINUX_MIB_TCPRENORECOVERY___4 = 30,
    LINUX_MIB_TCPSACKRECOVERY___4 = 31,
    LINUX_MIB_TCPSACKRENEGING___4 = 32,
    LINUX_MIB_TCPFACKREORDER___4 = 33,
    LINUX_MIB_TCPSACKREORDER___4 = 34,
    LINUX_MIB_TCPRENOREORDER___4 = 35,
    LINUX_MIB_TCPTSREORDER___4 = 36,
    LINUX_MIB_TCPFULLUNDO___4 = 37,
    LINUX_MIB_TCPPARTIALUNDO___4 = 38,
    LINUX_MIB_TCPDSACKUNDO___4 = 39,
    LINUX_MIB_TCPLOSSUNDO___4 = 40,
    LINUX_MIB_TCPLOSS___4 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___4 = 42,
    LINUX_MIB_TCPRENOFAILURES___4 = 43,
    LINUX_MIB_TCPSACKFAILURES___4 = 44,
    LINUX_MIB_TCPLOSSFAILURES___4 = 45,
    LINUX_MIB_TCPFASTRETRANS___4 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___4 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___4 = 48,
    LINUX_MIB_TCPTIMEOUTS___4 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___4 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___4 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___4 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___4 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___4 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___4 = 55,
    LINUX_MIB_TCPDSACKRECV___4 = 56,
    LINUX_MIB_TCPDSACKOFORECV___4 = 57,
    LINUX_MIB_TCPABORTONSYN___4 = 58,
    LINUX_MIB_TCPABORTONDATA___4 = 59,
    LINUX_MIB_TCPABORTONCLOSE___4 = 60,
    LINUX_MIB_TCPABORTONMEMORY___4 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___4 = 62,
    LINUX_MIB_TCPABORTONLINGER___4 = 63,
    LINUX_MIB_TCPABORTFAILED___4 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___4 = 65,
    LINUX_MIB_TCPSACKDISCARD___4 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___4 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___4 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___4 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___4 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___4 = 71,
    LINUX_MIB_SACKSHIFTED___4 = 72,
    LINUX_MIB_SACKMERGED___4 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___4 = 74,
    __LINUX_MIB_MAX___4 = 75
} ;
#line 232
enum __anonenum_191___4 {
    LINUX_MIB_XFRMNUM___4 = 0,
    LINUX_MIB_XFRMINERROR___4 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___4 = 2,
    LINUX_MIB_XFRMINHDRERROR___4 = 3,
    LINUX_MIB_XFRMINNOSTATES___4 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___4 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___4 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___4 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___4 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___4 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___4 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___4 = 11,
    LINUX_MIB_XFRMINNOPOLS___4 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___4 = 13,
    LINUX_MIB_XFRMINPOLERROR___4 = 14,
    LINUX_MIB_XFRMOUTERROR___4 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___4 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___4 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___4 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___4 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___4 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___4 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___4 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___4 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___4 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___4 = 25,
    __LINUX_MIB_XFRMMAX___4 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___4 {
    NFPROTO_UNSPEC___4 = 0,
    NFPROTO_IPV4___4 = 2,
    NFPROTO_ARP___4 = 3,
    NFPROTO_BRIDGE___4 = 7,
    NFPROTO_IPV6___4 = 10,
    NFPROTO_DECNET___4 = 12,
    NFPROTO_NUMPROTO___4 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___4 {
    XFRM_POLICY_IN___4 = 0,
    XFRM_POLICY_OUT___4 = 1,
    XFRM_POLICY_FWD___4 = 2,
    XFRM_POLICY_MASK___4 = 3,
    XFRM_POLICY_MAX___4 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___4 {
    RTAX_UNSPEC___4 = 0,
    RTAX_LOCK___4 = 1,
    RTAX_MTU___4 = 2,
    RTAX_WINDOW___4 = 3,
    RTAX_RTT___4 = 4,
    RTAX_RTTVAR___4 = 5,
    RTAX_SSTHRESH___4 = 6,
    RTAX_CWND___4 = 7,
    RTAX_ADVMSS___4 = 8,
    RTAX_REORDERING___4 = 9,
    RTAX_HOPLIMIT___4 = 10,
    RTAX_INITCWND___4 = 11,
    RTAX_FEATURES___4 = 12,
    RTAX_RTO_MIN___4 = 13,
    __RTAX_MAX___4 = 14
} ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct manager {
   struct mISDNchannel ch ;
   struct mISDNchannel bcast ;
   u_long options ;
   struct list_head layer2 ;
   rwlock_t lock ;
   struct FsmInst deact ;
   struct FsmTimer datimer ;
   struct sk_buff_head sendq ;
   struct mISDNchannel *up ;
   u_int nextid ;
   u_int lastid ;
};
#line 37
struct layer2;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct teimgr {
   int ri ;
   int rcnt ;
   struct FsmInst tei_m ;
   struct FsmTimer timer ;
   int tval ;
   int nval ;
   struct layer2 *l2 ;
   struct manager *mgr ;
};
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct laddr {
   u_char A ;
   u_char B ;
};
#line 52 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 {
   struct list_head list ;
   struct mISDNchannel ch ;
   u_long flag ;
   int id ;
   struct mISDNchannel *up ;
   signed char sapi ;
   signed char tei ;
   struct laddr addr ;
   u_int maxlen ;
   struct teimgr *tm ;
   u_int vs ;
   u_int va ;
   u_int vr ;
   int rc ;
   u_int window ;
   u_int sow ;
   struct FsmInst l2m ;
   struct FsmTimer t200 ;
   struct FsmTimer t203 ;
   int T200 ;
   int N200 ;
   int T203 ;
   u_int next_id ;
   u_int down_id ;
   struct sk_buff *windowar[8] ;
   struct sk_buff_head i_queue ;
   struct sk_buff_head ui_queue ;
   struct sk_buff_head down_queue ;
   struct sk_buff_head tmp_queue ;
};
#line 79
enum __anonenum_275___0 {
    ST_L2_1 = 0,
    ST_L2_2 = 1,
    ST_L2_3 = 2,
    ST_L2_4 = 3,
    ST_L2_5 = 4,
    ST_L2_6 = 5,
    ST_L2_7 = 6,
    ST_L2_8 = 7
} ;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
enum __anonenum_276___0 {
    EV_L2_UI = 0,
    EV_L2_SABME = 1,
    EV_L2_DISC = 2,
    EV_L2_DM = 3,
    EV_L2_UA = 4,
    EV_L2_FRMR = 5,
    EV_L2_SUPER = 6,
    EV_L2_I = 7,
    EV_L2_DL_DATA = 8,
    EV_L2_ACK_PULL = 9,
    EV_L2_DL_UNITDATA = 10,
    EV_L2_DL_ESTABLISH_REQ = 11,
    EV_L2_DL_RELEASE_REQ = 12,
    EV_L2_MDL_ASSIGN = 13,
    EV_L2_MDL_REMOVE = 14,
    EV_L2_MDL_ERROR = 15,
    EV_L1_DEACTIVATE = 16,
    EV_L2_T200 = 17,
    EV_L2_T203 = 18,
    EV_L2_SET_OWN_BUSY = 19,
    EV_L2_CLEAR_OWN_BUSY = 20,
    EV_L2_FRAME_ERROR = 21
} ;
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/snmp.h"
enum __anonenum_185___5 {
    IPSTATS_MIB_NUM___5 = 0,
    IPSTATS_MIB_INPKTS___5 = 1,
    IPSTATS_MIB_INHDRERRORS___5 = 2,
    IPSTATS_MIB_INTOOBIGERRORS___5 = 3,
    IPSTATS_MIB_INNOROUTES___5 = 4,
    IPSTATS_MIB_INADDRERRORS___5 = 5,
    IPSTATS_MIB_INUNKNOWNPROTOS___5 = 6,
    IPSTATS_MIB_INTRUNCATEDPKTS___5 = 7,
    IPSTATS_MIB_INDISCARDS___5 = 8,
    IPSTATS_MIB_INDELIVERS___5 = 9,
    IPSTATS_MIB_OUTFORWDATAGRAMS___5 = 10,
    IPSTATS_MIB_OUTPKTS___5 = 11,
    IPSTATS_MIB_OUTDISCARDS___5 = 12,
    IPSTATS_MIB_OUTNOROUTES___5 = 13,
    IPSTATS_MIB_REASMTIMEOUT___5 = 14,
    IPSTATS_MIB_REASMREQDS___5 = 15,
    IPSTATS_MIB_REASMOKS___5 = 16,
    IPSTATS_MIB_REASMFAILS___5 = 17,
    IPSTATS_MIB_FRAGOKS___5 = 18,
    IPSTATS_MIB_FRAGFAILS___5 = 19,
    IPSTATS_MIB_FRAGCREATES___5 = 20,
    IPSTATS_MIB_INMCASTPKTS___5 = 21,
    IPSTATS_MIB_OUTMCASTPKTS___5 = 22,
    IPSTATS_MIB_INBCASTPKTS___5 = 23,
    IPSTATS_MIB_OUTBCASTPKTS___5 = 24,
    IPSTATS_MIB_INOCTETS___5 = 25,
    IPSTATS_MIB_OUTOCTETS___5 = 26,
    IPSTATS_MIB_INMCASTOCTETS___5 = 27,
    IPSTATS_MIB_OUTMCASTOCTETS___5 = 28,
    IPSTATS_MIB_INBCASTOCTETS___5 = 29,
    IPSTATS_MIB_OUTBCASTOCTETS___5 = 30,
    __IPSTATS_MIB_MAX___5 = 31
} ;
#line 59
enum __anonenum_186___5 {
    ICMP_MIB_NUM___5 = 0,
    ICMP_MIB_INMSGS___5 = 1,
    ICMP_MIB_INERRORS___5 = 2,
    ICMP_MIB_INDESTUNREACHS___5 = 3,
    ICMP_MIB_INTIMEEXCDS___5 = 4,
    ICMP_MIB_INPARMPROBS___5 = 5,
    ICMP_MIB_INSRCQUENCHS___5 = 6,
    ICMP_MIB_INREDIRECTS___5 = 7,
    ICMP_MIB_INECHOS___5 = 8,
    ICMP_MIB_INECHOREPS___5 = 9,
    ICMP_MIB_INTIMESTAMPS___5 = 10,
    ICMP_MIB_INTIMESTAMPREPS___5 = 11,
    ICMP_MIB_INADDRMASKS___5 = 12,
    ICMP_MIB_INADDRMASKREPS___5 = 13,
    ICMP_MIB_OUTMSGS___5 = 14,
    ICMP_MIB_OUTERRORS___5 = 15,
    ICMP_MIB_OUTDESTUNREACHS___5 = 16,
    ICMP_MIB_OUTTIMEEXCDS___5 = 17,
    ICMP_MIB_OUTPARMPROBS___5 = 18,
    ICMP_MIB_OUTSRCQUENCHS___5 = 19,
    ICMP_MIB_OUTREDIRECTS___5 = 20,
    ICMP_MIB_OUTECHOS___5 = 21,
    ICMP_MIB_OUTECHOREPS___5 = 22,
    ICMP_MIB_OUTTIMESTAMPS___5 = 23,
    ICMP_MIB_OUTTIMESTAMPREPS___5 = 24,
    ICMP_MIB_OUTADDRMASKS___5 = 25,
    ICMP_MIB_OUTADDRMASKREPS___5 = 26,
    __ICMP_MIB_MAX___5 = 27
} ;
#line 97
enum __anonenum_187___5 {
    ICMP6_MIB_NUM___5 = 0,
    ICMP6_MIB_INMSGS___5 = 1,
    ICMP6_MIB_INERRORS___5 = 2,
    ICMP6_MIB_OUTMSGS___5 = 3,
    __ICMP6_MIB_MAX___5 = 4
} ;
#line 113
enum __anonenum_188___5 {
    TCP_MIB_NUM___5 = 0,
    TCP_MIB_RTOALGORITHM___5 = 1,
    TCP_MIB_RTOMIN___5 = 2,
    TCP_MIB_RTOMAX___5 = 3,
    TCP_MIB_MAXCONN___5 = 4,
    TCP_MIB_ACTIVEOPENS___5 = 5,
    TCP_MIB_PASSIVEOPENS___5 = 6,
    TCP_MIB_ATTEMPTFAILS___5 = 7,
    TCP_MIB_ESTABRESETS___5 = 8,
    TCP_MIB_CURRESTAB___5 = 9,
    TCP_MIB_INSEGS___5 = 10,
    TCP_MIB_OUTSEGS___5 = 11,
    TCP_MIB_RETRANSSEGS___5 = 12,
    TCP_MIB_INERRS___5 = 13,
    TCP_MIB_OUTRSTS___5 = 14,
    __TCP_MIB_MAX___5 = 15
} ;
#line 138
enum __anonenum_189___5 {
    UDP_MIB_NUM___5 = 0,
    UDP_MIB_INDATAGRAMS___5 = 1,
    UDP_MIB_NOPORTS___5 = 2,
    UDP_MIB_INERRORS___5 = 3,
    UDP_MIB_OUTDATAGRAMS___5 = 4,
    UDP_MIB_RCVBUFERRORS___5 = 5,
    UDP_MIB_SNDBUFERRORS___5 = 6,
    __UDP_MIB_MAX___5 = 7
} ;
#line 151
enum __anonenum_190___5 {
    LINUX_MIB_NUM___5 = 0,
    LINUX_MIB_SYNCOOKIESSENT___5 = 1,
    LINUX_MIB_SYNCOOKIESRECV___5 = 2,
    LINUX_MIB_SYNCOOKIESFAILED___5 = 3,
    LINUX_MIB_EMBRYONICRSTS___5 = 4,
    LINUX_MIB_PRUNECALLED___5 = 5,
    LINUX_MIB_RCVPRUNED___5 = 6,
    LINUX_MIB_OFOPRUNED___5 = 7,
    LINUX_MIB_OUTOFWINDOWICMPS___5 = 8,
    LINUX_MIB_LOCKDROPPEDICMPS___5 = 9,
    LINUX_MIB_ARPFILTER___5 = 10,
    LINUX_MIB_TIMEWAITED___5 = 11,
    LINUX_MIB_TIMEWAITRECYCLED___5 = 12,
    LINUX_MIB_TIMEWAITKILLED___5 = 13,
    LINUX_MIB_PAWSPASSIVEREJECTED___5 = 14,
    LINUX_MIB_PAWSACTIVEREJECTED___5 = 15,
    LINUX_MIB_PAWSESTABREJECTED___5 = 16,
    LINUX_MIB_DELAYEDACKS___5 = 17,
    LINUX_MIB_DELAYEDACKLOCKED___5 = 18,
    LINUX_MIB_DELAYEDACKLOST___5 = 19,
    LINUX_MIB_LISTENOVERFLOWS___5 = 20,
    LINUX_MIB_LISTENDROPS___5 = 21,
    LINUX_MIB_TCPPREQUEUED___5 = 22,
    LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG___5 = 23,
    LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE___5 = 24,
    LINUX_MIB_TCPPREQUEUEDROPPED___5 = 25,
    LINUX_MIB_TCPHPHITS___5 = 26,
    LINUX_MIB_TCPHPHITSTOUSER___5 = 27,
    LINUX_MIB_TCPPUREACKS___5 = 28,
    LINUX_MIB_TCPHPACKS___5 = 29,
    LINUX_MIB_TCPRENORECOVERY___5 = 30,
    LINUX_MIB_TCPSACKRECOVERY___5 = 31,
    LINUX_MIB_TCPSACKRENEGING___5 = 32,
    LINUX_MIB_TCPFACKREORDER___5 = 33,
    LINUX_MIB_TCPSACKREORDER___5 = 34,
    LINUX_MIB_TCPRENOREORDER___5 = 35,
    LINUX_MIB_TCPTSREORDER___5 = 36,
    LINUX_MIB_TCPFULLUNDO___5 = 37,
    LINUX_MIB_TCPPARTIALUNDO___5 = 38,
    LINUX_MIB_TCPDSACKUNDO___5 = 39,
    LINUX_MIB_TCPLOSSUNDO___5 = 40,
    LINUX_MIB_TCPLOSS___5 = 41,
    LINUX_MIB_TCPLOSTRETRANSMIT___5 = 42,
    LINUX_MIB_TCPRENOFAILURES___5 = 43,
    LINUX_MIB_TCPSACKFAILURES___5 = 44,
    LINUX_MIB_TCPLOSSFAILURES___5 = 45,
    LINUX_MIB_TCPFASTRETRANS___5 = 46,
    LINUX_MIB_TCPFORWARDRETRANS___5 = 47,
    LINUX_MIB_TCPSLOWSTARTRETRANS___5 = 48,
    LINUX_MIB_TCPTIMEOUTS___5 = 49,
    LINUX_MIB_TCPRENORECOVERYFAIL___5 = 50,
    LINUX_MIB_TCPSACKRECOVERYFAIL___5 = 51,
    LINUX_MIB_TCPSCHEDULERFAILED___5 = 52,
    LINUX_MIB_TCPRCVCOLLAPSED___5 = 53,
    LINUX_MIB_TCPDSACKOLDSENT___5 = 54,
    LINUX_MIB_TCPDSACKOFOSENT___5 = 55,
    LINUX_MIB_TCPDSACKRECV___5 = 56,
    LINUX_MIB_TCPDSACKOFORECV___5 = 57,
    LINUX_MIB_TCPABORTONSYN___5 = 58,
    LINUX_MIB_TCPABORTONDATA___5 = 59,
    LINUX_MIB_TCPABORTONCLOSE___5 = 60,
    LINUX_MIB_TCPABORTONMEMORY___5 = 61,
    LINUX_MIB_TCPABORTONTIMEOUT___5 = 62,
    LINUX_MIB_TCPABORTONLINGER___5 = 63,
    LINUX_MIB_TCPABORTFAILED___5 = 64,
    LINUX_MIB_TCPMEMORYPRESSURES___5 = 65,
    LINUX_MIB_TCPSACKDISCARD___5 = 66,
    LINUX_MIB_TCPDSACKIGNOREDOLD___5 = 67,
    LINUX_MIB_TCPDSACKIGNOREDNOUNDO___5 = 68,
    LINUX_MIB_TCPSPURIOUSRTOS___5 = 69,
    LINUX_MIB_TCPMD5NOTFOUND___5 = 70,
    LINUX_MIB_TCPMD5UNEXPECTED___5 = 71,
    LINUX_MIB_SACKSHIFTED___5 = 72,
    LINUX_MIB_SACKMERGED___5 = 73,
    LINUX_MIB_SACKSHIFTFALLBACK___5 = 74,
    __LINUX_MIB_MAX___5 = 75
} ;
#line 232
enum __anonenum_191___5 {
    LINUX_MIB_XFRMNUM___5 = 0,
    LINUX_MIB_XFRMINERROR___5 = 1,
    LINUX_MIB_XFRMINBUFFERERROR___5 = 2,
    LINUX_MIB_XFRMINHDRERROR___5 = 3,
    LINUX_MIB_XFRMINNOSTATES___5 = 4,
    LINUX_MIB_XFRMINSTATEPROTOERROR___5 = 5,
    LINUX_MIB_XFRMINSTATEMODEERROR___5 = 6,
    LINUX_MIB_XFRMINSTATESEQERROR___5 = 7,
    LINUX_MIB_XFRMINSTATEEXPIRED___5 = 8,
    LINUX_MIB_XFRMINSTATEMISMATCH___5 = 9,
    LINUX_MIB_XFRMINSTATEINVALID___5 = 10,
    LINUX_MIB_XFRMINTMPLMISMATCH___5 = 11,
    LINUX_MIB_XFRMINNOPOLS___5 = 12,
    LINUX_MIB_XFRMINPOLBLOCK___5 = 13,
    LINUX_MIB_XFRMINPOLERROR___5 = 14,
    LINUX_MIB_XFRMOUTERROR___5 = 15,
    LINUX_MIB_XFRMOUTBUNDLEGENERROR___5 = 16,
    LINUX_MIB_XFRMOUTBUNDLECHECKERROR___5 = 17,
    LINUX_MIB_XFRMOUTNOSTATES___5 = 18,
    LINUX_MIB_XFRMOUTSTATEPROTOERROR___5 = 19,
    LINUX_MIB_XFRMOUTSTATEMODEERROR___5 = 20,
    LINUX_MIB_XFRMOUTSTATESEQERROR___5 = 21,
    LINUX_MIB_XFRMOUTSTATEEXPIRED___5 = 22,
    LINUX_MIB_XFRMOUTPOLBLOCK___5 = 23,
    LINUX_MIB_XFRMOUTPOLDEAD___5 = 24,
    LINUX_MIB_XFRMOUTPOLERROR___5 = 25,
    __LINUX_MIB_XFRMMAX___5 = 26
} ;
#line 53 "include/linux/netfilter.h"
enum __anonenum_194___5 {
    NFPROTO_UNSPEC___5 = 0,
    NFPROTO_IPV4___5 = 2,
    NFPROTO_ARP___5 = 3,
    NFPROTO_BRIDGE___5 = 7,
    NFPROTO_IPV6___5 = 10,
    NFPROTO_DECNET___5 = 12,
    NFPROTO_NUMPROTO___5 = 13
} ;
#line 120 "include/linux/xfrm.h"
enum __anonenum_221___5 {
    XFRM_POLICY_IN___5 = 0,
    XFRM_POLICY_OUT___5 = 1,
    XFRM_POLICY_FWD___5 = 2,
    XFRM_POLICY_MASK___5 = 3,
    XFRM_POLICY_MAX___5 = 3
} ;
#line 344 "include/linux/rtnetlink.h"
enum __anonenum_261___5 {
    RTAX_UNSPEC___5 = 0,
    RTAX_LOCK___5 = 1,
    RTAX_MTU___5 = 2,
    RTAX_WINDOW___5 = 3,
    RTAX_RTT___5 = 4,
    RTAX_RTTVAR___5 = 5,
    RTAX_SSTHRESH___5 = 6,
    RTAX_CWND___5 = 7,
    RTAX_ADVMSS___5 = 8,
    RTAX_REORDERING___5 = 9,
    RTAX_HOPLIMIT___5 = 10,
    RTAX_INITCWND___5 = 11,
    RTAX_FEATURES___5 = 12,
    RTAX_RTO_MIN___5 = 13,
    __RTAX_MAX___5 = 14
} ;
#line 79 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
enum __anonenum_275___1 {
    ST_L2_1___0 = 0,
    ST_L2_2___0 = 1,
    ST_L2_3___0 = 2,
    ST_L2_4___0 = 3,
    ST_L2_5___0 = 4,
    ST_L2_6___0 = 5,
    ST_L2_7___0 = 6,
    ST_L2_8___0 = 7
} ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
enum __anonenum_276___1 {
    ST_L1_DEACT = 0,
    ST_L1_DEACT_PENDING = 1,
    ST_L1_ACTIV = 2
} ;
#line 56
enum __anonenum_277 {
    EV_ACTIVATE = 0,
    EV_ACTIVATE_IND = 1,
    EV_DEACTIVATE = 2,
    EV_DEACTIVATE_IND = 3,
    EV_UI = 4,
    EV_DATIMER = 5
} ;
#line 179
enum __anonenum_278 {
    ST_TEI_NOP = 0,
    ST_TEI_IDREQ = 1,
    ST_TEI_IDVERIFY = 2
} ;
#line 194
enum __anonenum_279 {
    EV_IDREQ = 0,
    EV_ASSIGN = 1,
    EV_ASSIGN_REQ = 2,
    EV_DENIED = 3,
    EV_CHKREQ = 4,
    EV_CHKRESP = 5,
    EV_REMOVE = 6,
    EV_VERIFY = 7,
    EV_TIMER = 8
} ;
#line 31 "include/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 33 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 33 "include/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 37 "include/linux/miscdevice.h"
struct miscdevice {
   int minor ;
   char const   *name ;
   struct file_operations  const  *fops ;
   struct list_head list ;
   struct device *parent ;
   struct device *this_device ;
};
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
struct mISDNtimerdev {
   int next_id ;
   struct list_head pending ;
   struct list_head expired ;
   wait_queue_head_t wait ;
   u_int work ;
   spinlock_t lock ;
};
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
struct mISDNtimer {
   struct list_head list ;
   struct mISDNtimerdev *dev ;
   struct timer_list tl ;
   int id ;
};
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 239 "include/linux/timer.h"
enum hrtimer_restart;
#line 215 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 269 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 306 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 324 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 582 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 750
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 757
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 24 "include/linux/usb.h"
struct usb_device;
#line 26
struct wusb_dev;
#line 45
struct ep_device;
#line 61 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 73 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 86
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 155 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 220 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 272 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 303 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 310
struct mon_bus;
#line 310 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 360
struct usb_tt;
#line 428 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 968 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 975
struct urb;
#line 977 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
#line 1160 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "bts %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "btr %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 178 "include/linux/kernel.h"
extern int ( /* format attribute */  sprintf)(char *buf , char const   *fmt  , ...) ;
#line 238
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern unsigned long strlen(char const   *s ) ;
#line 54
extern char *strcpy(char *dest , char const   *src ) ;
#line 51 "include/linux/list.h"
extern void __list_add(struct list_head *new , struct list_head *prev , struct list_head *next ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 110
extern void list_del(struct list_head *entry ) ;
#line 27 "include/linux/spinlock_api_smp.h"
extern void _read_lock(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 41
extern unsigned long _write_lock_irqsave(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 48
extern void _read_unlock(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 60
extern void _write_unlock_irqrestore(rwlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return (kobj->name);
}
}
#line 206
extern int ( /* format attribute */  add_uevent_var)(struct kobj_uevent_env *env ,
                                                     char const   *format  , ...) ;
#line 173 "include/linux/moduleparam.h"
extern int param_set_uint(char const   *val , struct kernel_param *kp ) ;
#line 174
extern int param_get_uint(char *buffer , struct kernel_param *kp ) ;
#line 67 "include/linux/module.h"
int init_module(void) ;
#line 68
void cleanup_module(void) ;
#line 86
extern struct module __this_module ;
#line 326 "include/linux/mISDNif.h"
__inline static int test_channelmap(u_int nr , u_char *map ) ;
#line 326 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___681  __attribute__((__section__("_ftrace_branch")))  =    {"test_channelmap",
    "include/linux/mISDNif.h", 326, {{0UL, 0UL}}};
#line 323 "include/linux/mISDNif.h"
__inline static int test_channelmap(u_int nr , u_char *map ) 
{ 
  int ______r ;

  {
#line 326
  ______r = ! (! (nr <= (u_int )127));
#line 326
  ______f___681.__annonCompField3.miss_hit[______r] = ______f___681.__annonCompField3.miss_hit[______r] + 1UL;
#line 326
  if (______r) {
#line 327
    return ((int )*(map + (nr >> 3)) & (1 << (nr & 7U)));
  } else {
#line 329
    return (0);
  }
}
}
#line 215 "include/linux/device.h"
extern int ( __attribute__((__warn_unused_result__)) __class_register)(struct class *class ,
                                                                       struct lock_class_key *key ) ;
#line 217
extern void class_unregister(struct class *class ) ;
#line 234
extern int class_for_each_device(struct class *class , struct device *start , void *data ,
                                 int (*fn)(struct device *dev , void *data ) ) ;
#line 237
extern struct device *class_find_device(struct class *class , struct device *start ,
                                        void *data , int (*match)(struct device * ,
                                                                  void * ) ) ;
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 427
  tmp = kobject_name(& dev->kobj);
#line 427
  return (tmp);
}
}
#line 430
extern int ( /* format attribute */  dev_set_name)(struct device *dev , char const   *name 
                                                   , ...) ;
#line 452 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 454
  return (dev->driver_data);
}
}
#line 457 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 459
  dev->driver_data = data;
#line 460
  return;
}
}
#line 484
extern void device_initialize(struct device *dev ) ;
#line 485
extern int ( __attribute__((__warn_unused_result__)) device_add)(struct device *dev ) ;
#line 486
extern void device_del(struct device *dev ) ;
#line 547
extern void put_device(struct device *dev ) ;
#line 554 "include/linux/mISDNif.h"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) ;
#line 556
void mISDN_unregister_device(struct mISDNdevice *dev ) ;
#line 557
int mISDN_register_Bprotocol(struct Bprotocol *bp ) ;
#line 558
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) ;
#line 565
__inline static struct mISDNdevice *dev_to_mISDN(struct device *dev ) ;
#line 565 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1236  __attribute__((__section__("_ftrace_branch")))  =    {"dev_to_mISDN",
    "include/linux/mISDNif.h", 565, {{0UL, 0UL}}};
#line 563 "include/linux/mISDNif.h"
__inline static struct mISDNdevice *dev_to_mISDN(struct device *dev ) 
{ 
  void *tmp ;
  int ______r ;

  {
#line 565
  ______r = ! (! dev);
#line 565
  ______f___1236.__annonCompField3.miss_hit[______r] = ______f___1236.__annonCompField3.miss_hit[______r] + 1UL;
#line 565
  if (______r) {
#line 566
    tmp = dev_get_drvdata(dev);
#line 566
    return (tmp);
  } else {
#line 568
    return ((void *)0);
  }
}
}
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
struct mISDNdevice *get_mdevice(u_int id ) ;
#line 19
int get_mdevice_count(void) ;
#line 54
int create_stack(struct mISDNdevice *dev ) ;
#line 58
void delete_stack(struct mISDNdevice *dev ) ;
#line 59
void mISDN_initstack(u_int *dp ) ;
#line 60
int misdn_sock_init(u_int *deb ) ;
#line 61
void misdn_sock_cleanup(void) ;
#line 65
u_int get_all_Bprotocols(void) ;
#line 66
struct Bprotocol *get_Bprotocol4mask(u_int m ) ;
#line 67
struct Bprotocol *get_Bprotocol4id(u_int id ) ;
#line 69
int mISDN_inittimer(u_int *deb ) ;
#line 70
void mISDN_timer_cleanup(void) ;
#line 72
int l1_init(u_int *deb ) ;
#line 73
void l1_cleanup(void) ;
#line 74
int Isdnl2_Init(u_int *deb ) ;
#line 75
void Isdnl2_cleanup(void) ;
#line 77
void mISDN_init_clock(u_int *dp ) ;
#line 23 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static u_int debug  ;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __mod_author25[20]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 25
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'K', 
        'a',      'r',      's',      't', 
        'e',      'n',      ' ',      'K', 
        'e',      'i',      'l',      '\000'};
#line 26 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __mod_license26[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 26
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 27 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
#line 27 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, ((256 | 32) | 4) | 128, & param_set_uint, & param_get_uint,
    {& debug}};
#line 27 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __mod_debugtype27[20]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 27
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'u', 
        'i',      'n',      't',      '\000'};
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static u64 device_ids  ;
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct list_head Bprotocols  =    {& Bprotocols, & Bprotocols};
#line 33 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static rwlock_t bp_lock  =    {{16777216}, 3736018669U, -1, (void *)-1L, {0, 0, "bp_lock", 0, 0UL}};
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static void mISDN_dev_release(struct device *dev ) 
{ 


  {
#line 38
  return;
}
}
#line 45
static ssize_t _show_id(struct device *dev , struct device_attribute *attr , char *buf ) ;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1237  __attribute__((__section__("_ftrace_branch")))  =    {"_show_id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    45, {{0UL, 0UL}}};
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_id(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int tmp___0 ;

  {
#line 43
  tmp = dev_to_mISDN(dev);
#line 43
  mdev = tmp;
#line 45
  ______r = ! (! (! mdev));
#line 45
  ______f___1237.__annonCompField3.miss_hit[______r] = ______f___1237.__annonCompField3.miss_hit[______r] + 1UL;
#line 45
  if (______r) {
#line 46
    return (-19);
  } else {

  }
#line 47
  tmp___0 = sprintf(buf, "%d\n", mdev->id);
#line 47
  return (tmp___0);
}
}
#line 55
static ssize_t _show_nrbchan(struct device *dev , struct device_attribute *attr ,
                             char *buf ) ;
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1238  __attribute__((__section__("_ftrace_branch")))  =    {"_show_nrbchan",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    55, {{0UL, 0UL}}};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_nrbchan(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int tmp___0 ;

  {
#line 53
  tmp = dev_to_mISDN(dev);
#line 53
  mdev = tmp;
#line 55
  ______r = ! (! (! mdev));
#line 55
  ______f___1238.__annonCompField3.miss_hit[______r] = ______f___1238.__annonCompField3.miss_hit[______r] + 1UL;
#line 55
  if (______r) {
#line 56
    return (-19);
  } else {

  }
#line 57
  tmp___0 = sprintf(buf, "%d\n", mdev->nrbchan);
#line 57
  return (tmp___0);
}
}
#line 65
static ssize_t _show_d_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) ;
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1239  __attribute__((__section__("_ftrace_branch")))  =    {"_show_d_protocols",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    65, {{0UL, 0UL}}};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_d_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int tmp___0 ;

  {
#line 63
  tmp = dev_to_mISDN(dev);
#line 63
  mdev = tmp;
#line 65
  ______r = ! (! (! mdev));
#line 65
  ______f___1239.__annonCompField3.miss_hit[______r] = ______f___1239.__annonCompField3.miss_hit[______r] + 1UL;
#line 65
  if (______r) {
#line 66
    return (-19);
  } else {

  }
#line 67
  tmp___0 = sprintf(buf, "%d\n", mdev->Dprotocols);
#line 67
  return (tmp___0);
}
}
#line 75
static ssize_t _show_b_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1240  __attribute__((__section__("_ftrace_branch")))  =    {"_show_b_protocols",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    75, {{0UL, 0UL}}};
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_b_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  u_int tmp___0 ;
  int tmp___1 ;

  {
#line 73
  tmp = dev_to_mISDN(dev);
#line 73
  mdev = tmp;
#line 75
  ______r = ! (! (! mdev));
#line 75
  ______f___1240.__annonCompField3.miss_hit[______r] = ______f___1240.__annonCompField3.miss_hit[______r] + 1UL;
#line 75
  if (______r) {
#line 76
    return (-19);
  } else {

  }
#line 77
  tmp___0 = get_all_Bprotocols();
#line 77
  tmp___1 = sprintf(buf, "%d\n", mdev->Bprotocols | tmp___0);
#line 77
  return (tmp___1);
}
}
#line 85
static ssize_t _show_protocol(struct device *dev , struct device_attribute *attr ,
                              char *buf ) ;
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1241  __attribute__((__section__("_ftrace_branch")))  =    {"_show_protocol",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    85, {{0UL, 0UL}}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_protocol(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int tmp___0 ;

  {
#line 83
  tmp = dev_to_mISDN(dev);
#line 83
  mdev = tmp;
#line 85
  ______r = ! (! (! mdev));
#line 85
  ______f___1241.__annonCompField3.miss_hit[______r] = ______f___1241.__annonCompField3.miss_hit[______r] + 1UL;
#line 85
  if (______r) {
#line 86
    return (-19);
  } else {

  }
#line 87
  tmp___0 = sprintf(buf, "%d\n", mdev->D.protocol);
#line 87
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_name(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  char const   *tmp ;
  unsigned long tmp___0 ;

  {
#line 93
  tmp = dev_name(dev);
#line 93
  strcpy(buf, tmp);
#line 94
  tmp___0 = strlen(buf);
#line 94
  return (tmp___0);
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static ssize_t _show_channelmap(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  char *bp ;
  int i ;
  char *tmp___0 ;
  int tmp___1 ;

  {
#line 121
  tmp = dev_to_mISDN(dev);
#line 121
  mdev = tmp;
#line 122
  bp = buf;
#line 125
  i = 0;
#line 125
  while (1) {
#line 125
    if ((u_int )i <= mdev->nrbchan) {

    } else {
#line 125
      break;
    }
#line 126
    tmp___0 = bp;
#line 126
    bp = bp + 1;
#line 126
    tmp___1 = test_channelmap(i, mdev->channelmap);
#line 126
    *tmp___0 = tmp___1 ? '1' : '0';
#line 125
    i = i + 1;
  }
#line 128
  return (bp - buf);
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct device_attribute mISDN_dev_attrs[7]  = {      {{"id", 0, (256 | 32) | 4}, & _show_id, (void *)0}, 
        {{"d_protocols", 0, (256 | 32) | 4}, & _show_d_protocols, (void *)0}, 
        {{"b_protocols", 0, (256 | 32) | 4}, & _show_b_protocols, (void *)0}, 
        {{"protocol", 0, (256 | 32) | 4}, & _show_protocol, (void *)0}, 
        {{"channelmap", 0, (256 | 32) | 4}, & _show_channelmap, (void *)0}, 
        {{"nrbchan", 0, (256 | 32) | 4}, & _show_nrbchan, (void *)0}, 
        {{"name", 0, (256 | 32) | 4}, & _show_name, (void *)0}};
#line 148
static int mISDN_uevent(struct device *dev , struct kobj_uevent_env *env ) ;
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1242  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_uevent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    148, {{0UL, 0UL}}};
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1243  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_uevent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    151, {{0UL, 0UL}}};
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static int mISDN_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int ______r___0 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 146
  tmp = dev_to_mISDN(dev);
#line 146
  mdev = tmp;
#line 148
  ______r = ! (! (! mdev));
#line 148
  ______f___1242.__annonCompField3.miss_hit[______r] = ______f___1242.__annonCompField3.miss_hit[______r] + 1UL;
#line 148
  if (______r) {
#line 149
    return (0);
  } else {

  }
#line 151
  tmp___3 = add_uevent_var(env, "nchans=%d", mdev->nrbchan);
#line 151
  if (tmp___3) {
#line 151
    tmp___4 = 1;
  } else {
#line 151
    tmp___4 = 0;
  }
#line 151
  ______r___0 = tmp___4;
#line 151
  ______f___1243.__annonCompField3.miss_hit[______r___0] = ______f___1243.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 151
  if (______r___0) {
#line 152
    return (-12);
  } else {

  }
#line 154
  return (0);
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static void mISDN_class_release(struct class *cls ) 
{ 


  {
#line 161
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct class mISDN_class  = 
#line 163
     {"mISDN", & __this_module, 0, mISDN_dev_attrs, 0, & mISDN_uevent, & mISDN_class_release,
    & mISDN_dev_release, 0, 0, 0, 0};
#line 179
static int _get_mdevice(struct device *dev , void *id ) ;
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1244  __attribute__((__section__("_ftrace_branch")))  =    {"_get_mdevice",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    179, {{0UL, 0UL}}};
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1245  __attribute__((__section__("_ftrace_branch")))  =    {"_get_mdevice",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    181, {{0UL, 0UL}}};
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static int _get_mdevice(struct device *dev , void *id ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int ______r ;
  int ______r___0 ;

  {
#line 177
  tmp = dev_to_mISDN(dev);
#line 177
  mdev = tmp;
#line 179
  ______r = ! (! (! mdev));
#line 179
  ______f___1244.__annonCompField3.miss_hit[______r] = ______f___1244.__annonCompField3.miss_hit[______r] + 1UL;
#line 179
  if (______r) {
#line 180
    return (0);
  } else {

  }
#line 181
  ______r___0 = ! (! (mdev->id != *((u_int *)id)));
#line 181
  ______f___1245.__annonCompField3.miss_hit[______r___0] = ______f___1245.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 181
  if (______r___0) {
#line 182
    return (0);
  } else {

  }
#line 183
  return (1);
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
struct mISDNdevice *get_mdevice(u_int id ) 
{ 
  struct device *tmp ;
  struct mISDNdevice *tmp___0 ;

  {
#line 189
  tmp = class_find_device(& mISDN_class, (void *)0, & id, & _get_mdevice);
#line 189
  tmp___0 = dev_to_mISDN(tmp);
#line 189
  return (tmp___0);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static int _get_mdevice_count(struct device *dev , void *cnt ) 
{ 


  {
#line 196
  *((int *)cnt) = *((int *)cnt) + 1;
#line 197
  return (0);
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
int get_mdevice_count(void) 
{ 
  int cnt ;

  {
#line 203
  cnt = 0;
#line 205
  class_for_each_device(& mISDN_class, (void *)0, & cnt, & _get_mdevice_count);
#line 206
  return (cnt);
}
}
#line 215
static int get_free_devid(void) ;
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1246  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_devid",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    215, {{0UL, 0UL}}};
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1247  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_devid",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    217, {{0UL, 0UL}}};
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static int get_free_devid(void) 
{ 
  u_int i ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;

  {
#line 214
  i = 0;
#line 214
  while (1) {
#line 214
    if (i <= (u_int )63) {

    } else {
#line 214
      break;
    }
#line 215
    tmp___3 = test_and_set_bit(i, (u_long *)(& device_ids));
#line 215
    if (tmp___3) {
#line 215
      tmp___4 = 0;
    } else {
#line 215
      tmp___4 = 1;
    }
#line 215
    ______r = tmp___4;
#line 215
    ______f___1246.__annonCompField3.miss_hit[______r] = ______f___1246.__annonCompField3.miss_hit[______r] + 1UL;
#line 215
    if (______r) {
#line 216
      break;
    } else {

    }
#line 214
    i = i + (u_int )1;
  }
#line 217
  ______r___0 = ! (! (i > (u_int )63));
#line 217
  ______f___1247.__annonCompField3.miss_hit[______r___0] = ______f___1247.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 217
  if (______r___0) {
#line 218
    return (-1);
  } else {

  }
#line 219
  return (i);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1248  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    230, {{0UL, 0UL}}};
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1249  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    234, {{0UL, 0UL}}};
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1250  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    238, {{0UL, 0UL}}};
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1251  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    242, {{0UL, 0UL}}};
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1252  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    251, {{0UL, 0UL}}};
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) 
{ 
  int err ;
  int tmp ;
  int ______r ;
  int ______r___0 ;
  char const   *tmp___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;

  {
#line 228
  tmp = get_free_devid();
#line 228
  dev->id = tmp;
#line 229
  err = -16;
#line 230
  ______r = ! (! (dev->id < (u_int )0));
#line 230
  ______f___1248.__annonCompField3.miss_hit[______r] = ______f___1248.__annonCompField3.miss_hit[______r] + 1UL;
#line 230
  if (______r) {
#line 231
    goto error1;
  } else {

  }
#line 233
  device_initialize(& dev->dev);
#line 234
  ______r___0 = ! (! (name && *(name + 0)));
#line 234
  ______f___1249.__annonCompField3.miss_hit[______r___0] = ______f___1249.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 234
  if (______r___0) {
#line 235
    dev_set_name(& dev->dev, "%s", name);
  } else {
#line 237
    dev_set_name(& dev->dev, "mISDN%d", dev->id);
  }
#line 238
  ______r___1 = ! (! (debug & 255U));
#line 238
  ______f___1250.__annonCompField3.miss_hit[______r___1] = ______f___1250.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 238
  if (______r___1) {
#line 239
    tmp___0 = dev_name(& dev->dev);
#line 239
    printk("<7>mISDN_register %s %d\n", tmp___0, dev->id);
  } else {

  }
#line 241
  err = create_stack(dev);
#line 242
  ______r___2 = ! (! err);
#line 242
  ______f___1251.__annonCompField3.miss_hit[______r___2] = ______f___1251.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 242
  if (______r___2) {
#line 243
    goto error1;
  } else {

  }
#line 245
  dev->dev.class = & mISDN_class;
#line 246
  dev->dev.platform_data = dev;
#line 247
  dev->dev.parent = parent;
#line 248
  dev_set_drvdata(& dev->dev, dev);
#line 250
  err = device_add(& dev->dev);
#line 251
  ______r___3 = ! (! err);
#line 251
  ______f___1252.__annonCompField3.miss_hit[______r___3] = ______f___1252.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 251
  if (______r___3) {
#line 252
    goto error3;
  } else {

  }
#line 253
  return (0);
  error3: 
#line 256
  delete_stack(dev);
#line 257
  return (err);
  error1: 
#line 259
  return (err);
}
}
#line 262
extern void *__crc_mISDN_register_device  __attribute__((__weak__)) ;
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static unsigned long const   __kcrctab_mISDN_register_device  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_register_device);
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __kstrtab_mISDN_register_device[22]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 262
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'r',      'e', 
        'g',      'i',      's',      't', 
        'e',      'r',      '_',      'd', 
        'e',      'v',      'i',      'c', 
        'e',      '\000'};
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct kernel_symbol  const  __ksymtab_mISDN_register_device  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_register_device), __kstrtab_mISDN_register_device};
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1253  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_unregister_device",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    266, {{0UL, 0UL}}};
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
void mISDN_unregister_device(struct mISDNdevice *dev ) 
{ 
  char const   *tmp ;
  int ______r ;

  {
#line 266
  ______r = ! (! (debug & 255U));
#line 266
  ______f___1253.__annonCompField3.miss_hit[______r] = ______f___1253.__annonCompField3.miss_hit[______r] + 1UL;
#line 266
  if (______r) {
#line 267
    tmp = dev_name(& dev->dev);
#line 267
    printk("<7>mISDN_unregister %s %d\n", tmp, dev->id);
  } else {

  }
#line 270
  device_del(& dev->dev);
#line 271
  dev_set_drvdata(& dev->dev, (void *)0);
#line 273
  test_and_clear_bit(dev->id, (u_long *)(& device_ids));
#line 274
  delete_stack(dev);
#line 275
  put_device(& dev->dev);
#line 276
  return;
}
}
#line 277
extern void *__crc_mISDN_unregister_device  __attribute__((__weak__)) ;
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static unsigned long const   __kcrctab_mISDN_unregister_device  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_unregister_device);
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __kstrtab_mISDN_unregister_device[24]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 277
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'u',      'n', 
        'r',      'e',      'g',      'i', 
        's',      't',      'e',      'r', 
        '_',      'd',      'e',      'v', 
        'i',      'c',      'e',      '\000'};
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct kernel_symbol  const  __ksymtab_mISDN_unregister_device  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_unregister_device), __kstrtab_mISDN_unregister_device};
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
u_int get_all_Bprotocols(void) 
{ 
  struct Bprotocol *bp ;
  u_int m ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 283
  m = 0;
#line 285
  _read_lock(& bp_lock);
#line 286
  __mptr = Bprotocols.next;
#line 286
  bp = (struct Bprotocol *)((char *)__mptr - (unsigned int )(& ((struct Bprotocol *)0)->list));
#line 286
  while (1) {
#line 286
    __builtin_prefetch(bp->list.next);
#line 286
    if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {

    } else {
#line 286
      break;
    }
#line 287
    m = m | bp->Bprotocols;
#line 286
    __mptr___0 = bp->list.next;
#line 286
    bp = (struct Bprotocol *)((char *)__mptr___0 - (unsigned int )(& ((struct Bprotocol *)0)->list));
  }
#line 288
  _read_unlock(& bp_lock);
#line 289
  return (m);
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1254  __attribute__((__section__("_ftrace_branch")))  =    {"get_Bprotocol4mask",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    299, {{0UL, 0UL}}};
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
struct Bprotocol *get_Bprotocol4mask(u_int m ) 
{ 
  struct Bprotocol *bp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;

  {
#line 297
  _read_lock(& bp_lock);
#line 298
  __mptr = Bprotocols.next;
#line 298
  bp = (struct Bprotocol *)((char *)__mptr - (unsigned int )(& ((struct Bprotocol *)0)->list));
#line 298
  while (1) {
#line 298
    __builtin_prefetch(bp->list.next);
#line 298
    if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {

    } else {
#line 298
      break;
    }
#line 299
    ______r = ! (! (bp->Bprotocols & m));
#line 299
    ______f___1254.__annonCompField3.miss_hit[______r] = ______f___1254.__annonCompField3.miss_hit[______r] + 1UL;
#line 299
    if (______r) {
#line 300
      _read_unlock(& bp_lock);
#line 301
      return (bp);
    } else {

    }
#line 298
    __mptr___0 = bp->list.next;
#line 298
    bp = (struct Bprotocol *)((char *)__mptr___0 - (unsigned int )(& ((struct Bprotocol *)0)->list));
  }
#line 303
  _read_unlock(& bp_lock);
#line 304
  return ((void *)0);
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1255  __attribute__((__section__("_ftrace_branch")))  =    {"get_Bprotocol4id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    312, {{0UL, 0UL}}};
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
struct Bprotocol *get_Bprotocol4id(u_int id ) 
{ 
  u_int m ;
  int ______r ;
  struct Bprotocol *tmp ;

  {
#line 312
  ______r = ! (! (id < (u_int )32 || id > (u_int )63));
#line 312
  ______f___1255.__annonCompField3.miss_hit[______r] = ______f___1255.__annonCompField3.miss_hit[______r] + 1UL;
#line 312
  if (______r) {
#line 313
    printk("<4>%s id not in range  %d\n", "get_Bprotocol4id", id);
#line 315
    return ((void *)0);
  } else {

  }
#line 317
  m = 1 << (id & 31U);
#line 318
  tmp = get_Bprotocol4mask(m);
#line 318
  return (tmp);
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1256  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_Bprotocol",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    327, {{0UL, 0UL}}};
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1257  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_Bprotocol",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    331, {{0UL, 0UL}}};
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
int mISDN_register_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  struct Bprotocol *old ;
  int ______r ;
  int ______r___0 ;

  {
#line 327
  ______r = ! (! (debug & 255U));
#line 327
  ______f___1256.__annonCompField3.miss_hit[______r] = ______f___1256.__annonCompField3.miss_hit[______r] + 1UL;
#line 327
  if (______r) {
#line 328
    printk("<7>%s: %s/%x\n", "mISDN_register_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 330
  old = get_Bprotocol4mask(bp->Bprotocols);
#line 331
  ______r___0 = ! (! old);
#line 331
  ______f___1257.__annonCompField3.miss_hit[______r___0] = ______f___1257.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 331
  if (______r___0) {
#line 332
    printk("<4>register duplicate protocol old %s/%x new %s/%x\n", old->name, old->Bprotocols,
           bp->name, bp->Bprotocols);
#line 335
    return (-16);
  } else {

  }
#line 337
  while (1) {
#line 337
    flags = _write_lock_irqsave(& bp_lock);
#line 337
    break;
  }
#line 338
  list_add_tail(& bp->list, & Bprotocols);
#line 339
  while (1) {
#line 339
    _write_unlock_irqrestore(& bp_lock, flags);
#line 339
    break;
  }
#line 340
  return (0);
}
}
#line 342
extern void *__crc_mISDN_register_Bprotocol  __attribute__((__weak__)) ;
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static unsigned long const   __kcrctab_mISDN_register_Bprotocol  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_register_Bprotocol);
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __kstrtab_mISDN_register_Bprotocol[25]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 342
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'r',      'e', 
        'g',      'i',      's',      't', 
        'e',      'r',      '_',      'B', 
        'p',      'r',      'o',      't', 
        'o',      'c',      'o',      'l', 
        '\000'};
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct kernel_symbol  const  __ksymtab_mISDN_register_Bprotocol  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_register_Bprotocol), __kstrtab_mISDN_register_Bprotocol};
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1258  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_unregister_Bprotocol",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    349, {{0UL, 0UL}}};
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  int ______r ;

  {
#line 349
  ______r = ! (! (debug & 255U));
#line 349
  ______f___1258.__annonCompField3.miss_hit[______r] = ______f___1258.__annonCompField3.miss_hit[______r] + 1UL;
#line 349
  if (______r) {
#line 350
    printk("<7>%s: %s/%x\n", "mISDN_unregister_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 352
  while (1) {
#line 352
    flags = _write_lock_irqsave(& bp_lock);
#line 352
    break;
  }
#line 353
  list_del(& bp->list);
#line 354
  while (1) {
#line 354
    _write_unlock_irqrestore(& bp_lock, flags);
#line 354
    break;
  }
#line 355
  return;
}
}
#line 356
extern void *__crc_mISDN_unregister_Bprotocol  __attribute__((__weak__)) ;
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static unsigned long const   __kcrctab_mISDN_unregister_Bprotocol  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_unregister_Bprotocol);
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static char const   __kstrtab_mISDN_unregister_Bprotocol[27]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 356
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'u',      'n', 
        'r',      'e',      'g',      'i', 
        's',      't',      'e',      'r', 
        '_',      'B',      'p',      'r', 
        'o',      't',      'o',      'c', 
        'o',      'l',      '\000'};
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct kernel_symbol  const  __ksymtab_mISDN_unregister_Bprotocol  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_unregister_Bprotocol), __kstrtab_mISDN_unregister_Bprotocol};
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct lock_class_key __key___3  ;
#line 368
static int mISDNInit(void) ;
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1259  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNInit",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    368, {{0UL, 0UL}}};
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1260  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNInit",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    371, {{0UL, 0UL}}};
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1261  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNInit",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    374, {{0UL, 0UL}}};
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1262  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNInit",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    377, {{0UL, 0UL}}};
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1263  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNInit",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    380, {{0UL, 0UL}}};
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static int mISDNInit(void) 
{ 
  int err ;
  int tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;

  {
#line 363
  printk("<6>Modular ISDN core version %d.%d.%d\n", 1, 1, 20);
#line 365
  mISDN_init_clock(& debug);
#line 366
  mISDN_initstack(& debug);
#line 367
  tmp = __class_register(& mISDN_class, & __key___3);
#line 367
  err = tmp;
#line 368
  ______r = ! (! err);
#line 368
  ______f___1259.__annonCompField3.miss_hit[______r] = ______f___1259.__annonCompField3.miss_hit[______r] + 1UL;
#line 368
  if (______r) {
#line 369
    goto error1;
  } else {

  }
#line 370
  err = mISDN_inittimer(& debug);
#line 371
  ______r___0 = ! (! err);
#line 371
  ______f___1260.__annonCompField3.miss_hit[______r___0] = ______f___1260.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 371
  if (______r___0) {
#line 372
    goto error2;
  } else {

  }
#line 373
  err = l1_init(& debug);
#line 374
  ______r___1 = ! (! err);
#line 374
  ______f___1261.__annonCompField3.miss_hit[______r___1] = ______f___1261.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 374
  if (______r___1) {
#line 375
    goto error3;
  } else {

  }
#line 376
  err = Isdnl2_Init(& debug);
#line 377
  ______r___2 = ! (! err);
#line 377
  ______f___1262.__annonCompField3.miss_hit[______r___2] = ______f___1262.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 377
  if (______r___2) {
#line 378
    goto error4;
  } else {

  }
#line 379
  err = misdn_sock_init(& debug);
#line 380
  ______r___3 = ! (! err);
#line 380
  ______f___1263.__annonCompField3.miss_hit[______r___3] = ______f___1263.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 380
  if (______r___3) {
#line 381
    goto error5;
  } else {

  }
#line 382
  return (0);
  error5: 
#line 385
  Isdnl2_cleanup();
  error4: 
#line 387
  l1_cleanup();
  error3: 
#line 389
  mISDN_timer_cleanup();
  error2: 
#line 391
  class_unregister(& mISDN_class);
  error1: 
#line 393
  return (err);
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static void mISDN_cleanup(void) 
{ 


  {
#line 398
  misdn_sock_cleanup();
#line 399
  Isdnl2_cleanup();
#line 400
  l1_cleanup();
#line 401
  mISDN_timer_cleanup();
#line 402
  class_unregister(& mISDN_class);
#line 404
  printk("<7>mISDNcore unloaded\n");
#line 405
  return;
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 407
  tmp = mISDNInit();
#line 407
  return (tmp);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
void cleanup_module(void) 
{ 


  {
#line 408
  mISDN_cleanup();
#line 408
  return;
}
}
#line 427
void ldv_check_final_state(void) ;
#line 436
extern void ldv_initialize(void) ;
#line 439
extern void ldv_handler_precall(void) ;
#line 442
extern int nondet_int(void) ;
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
int LDV_IN_INTERRUPT  ;
#line 528
void main(void) ;
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1264  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c",
    528, {{0UL, 0UL}}};
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/core.c"
void main(void) 
{ 
  struct device *var_group1 ;
  struct kobj_uevent_env *var_group2 ;
  struct class *var_group3 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 504
  LDV_IN_INTERRUPT = 1;
#line 513
  ldv_initialize();
#line 527
  ldv_handler_precall();
#line 528
  tmp___2 = mISDNInit();
#line 528
  if (tmp___2) {
#line 528
    tmp___3 = 1;
  } else {
#line 528
    tmp___3 = 0;
  }
#line 528
  ______r = tmp___3;
#line 528
  ______f___1264.__annonCompField3.miss_hit[______r] = ______f___1264.__annonCompField3.miss_hit[______r] + 1UL;
#line 528
  if (______r) {
#line 529
    goto ldv_final;
  } else {

  }
#line 533
  while (1) {
#line 533
    tmp___5 = nondet_int();
#line 533
    if (tmp___5) {

    } else {
#line 533
      break;
    }
#line 536
    tmp___4 = nondet_int();
#line 536
    switch (tmp___4) {
    case 0: 
#line 551
    ldv_handler_precall();
#line 552
    mISDN_uevent(var_group1, var_group2);
#line 564
    break;
    case 1: 
#line 575
    ldv_handler_precall();
#line 576
    mISDN_dev_release(var_group1);
#line 591
    break;
    case 2: 
#line 606
    ldv_handler_precall();
#line 607
    mISDN_class_release(var_group3);
#line 618
    break;
    default: 
#line 619
    break;
    }
  }
#line 639
  ldv_handler_precall();
#line 640
  mISDN_cleanup();
  ldv_final: 
#line 643
  ldv_check_final_state();
#line 646
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 81 "include/linux/compiler.h"
extern void ftrace_likely_update(struct ftrace_branch_data *f , int val , int expect ) ;
#line 21 "include/linux/log2.h"
extern  __attribute__((__noreturn__)) int ____ilog2_NaN(void)  __attribute__((__const__)) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> (12 - 1);
#line 14
  order = -1;
#line 15
  while (1) {
#line 16
    size = size >> 1;
#line 17
    order = order + 1;
#line 15
    if (size) {

    } else {
#line 15
      break;
    }
  }
#line 19
  return (order);
}
}
#line 223 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask , unsigned int order ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies  __attribute__((__section__(".data"))) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list *timer , char const   *name , struct lock_class_key *key ) ;
#line 157 "include/linux/timer.h"
__inline static int timer_pending(struct timer_list  const  *timer ) 
{ 


  {
#line 159
  return ((unsigned long )timer->entry.next != (unsigned long )((void *)0));
}
}
#line 163
extern int del_timer(struct timer_list *timer ) ;
#line 224
extern void add_timer(struct timer_list *timer ) ;
#line 23 "include/trace/kmemtrace.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 23
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___611  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___614  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___615  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___615, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___614.__annonCompField3.miss_hit[______r___2] = ______f___614.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___611.__annonCompField3.miss_hit[______r] = ______f___611.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 141 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[12 + 2] ;
#line 149
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___641  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___642  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___643  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___644  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___645  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___646  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___647  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___648  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___649  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___650  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___651  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___652  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___653  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___654  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___655  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___656  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___657  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___658  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___659  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___660  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___661  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___662  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___663  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___641.__annonCompField3.miss_hit[______r] = ______f___641.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___642.__annonCompField3.miss_hit[______r___0] = ______f___642.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___643.__annonCompField3.miss_hit[______r___1] = ______f___643.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___644.__annonCompField3.miss_hit[______r___2] = ______f___644.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___645.__annonCompField3.miss_hit[______r___3] = ______f___645.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___646.__annonCompField3.miss_hit[______r___4] = ______f___646.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___647.__annonCompField3.miss_hit[______r___5] = ______f___647.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___648.__annonCompField3.miss_hit[______r___6] = ______f___648.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___649.__annonCompField3.miss_hit[______r___7] = ______f___649.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___650.__annonCompField3.miss_hit[______r___8] = ______f___650.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___651.__annonCompField3.miss_hit[______r___9] = ______f___651.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___652.__annonCompField3.miss_hit[______r___10] = ______f___652.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___653.__annonCompField3.miss_hit[______r___11] = ______f___653.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___654.__annonCompField3.miss_hit[______r___12] = ______f___654.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___655.__annonCompField3.miss_hit[______r___13] = ______f___655.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___656.__annonCompField3.miss_hit[______r___14] = ______f___656.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___657.__annonCompField3.miss_hit[______r___15] = ______f___657.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___658.__annonCompField3.miss_hit[______r___16] = ______f___658.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___659.__annonCompField3.miss_hit[______r___17] = ______f___659.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___660.__annonCompField3.miss_hit[______r___18] = ______f___660.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___661.__annonCompField3.miss_hit[______r___19] = ______f___661.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___662.__annonCompField3.miss_hit[______r___20] = ______f___662.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___663.__annonCompField3.miss_hit[______r___21] = ______f___663.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___664  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___664.__annonCompField3.miss_hit[______r] = ______f___664.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 219
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 222
extern void *kmem_cache_alloc_notrace(struct kmem_cache *s , gfp_t gfpflags ) ;
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large)(size_t size ,
                                                                          gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc((unsigned long )((void *)0), ret, size, (1UL << 12) << order, flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___665  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___666  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___667  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___665.__annonCompField3.miss_hit[______r] = ______f___665.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___667.__annonCompField3.miss_hit[______r___1] = ______f___667.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___666.__annonCompField3.miss_hit[______r___0] = ______f___666.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) ;
#line 59
void mISDN_FsmFree(struct Fsm *fsm ) ;
#line 60
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) ;
#line 61
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) ;
#line 62
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) ;
#line 63
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) ;
#line 64
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) ;
#line 65
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) ;
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___680  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmNew",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    40, {{0UL, 0UL}}};
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) 
{ 
  int i ;
  void *tmp ;
  int ______r ;

  {
#line 35
  tmp = kzalloc((sizeof(void (*)(struct FsmInst * , int  , void * )) * (unsigned long )fsm->state_count) * (unsigned long )fsm->event_count,
                (16U | 64U) | 128U);
#line 35
  fsm->jumpmatrix = tmp;
#line 38
  i = 0;
#line 38
  while (1) {
#line 38
    if (i < fncount) {

    } else {
#line 38
      break;
    }
#line 39
    ______r = ! (! ((fnlist + i)->state >= fsm->state_count || (fnlist + i)->event >= fsm->event_count));
#line 39
    ______f___680.__annonCompField3.miss_hit[______r] = ______f___680.__annonCompField3.miss_hit[______r] + 1UL;
#line 39
    if (______r) {
#line 41
      printk("<3>mISDN_FsmNew Error: %d st(%ld/%ld) ev(%ld/%ld)\n", i, (long )(fnlist + i)->state,
             (long )fsm->state_count, (long )(fnlist + i)->event, (long )fsm->event_count);
    } else {
#line 46
      *(fsm->jumpmatrix + (fsm->state_count * (fnlist + i)->event + (fnlist + i)->state)) = (fnlist + i)->routine;
    }
#line 38
    i = i + 1;
  }
#line 48
  return;
}
}
#line 49
extern void *__crc_mISDN_FsmNew  __attribute__((__weak__)) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmNew  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmNew);
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmNew[13]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 49
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'N',      'e',      'w', 
        '\000'};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmNew  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmNew), __kstrtab_mISDN_FsmNew};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmFree(struct Fsm *fsm ) 
{ 


  {
#line 54
  kfree((void *)fsm->jumpmatrix);
#line 55
  return;
}
}
#line 56
extern void *__crc_mISDN_FsmFree  __attribute__((__weak__)) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmFree  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmFree);
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmFree[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 56
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'F',      'r',      'e', 
        'e',      '\000'};
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmFree  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmFree), __kstrtab_mISDN_FsmFree};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1265  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmEvent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    64, {{0UL, 0UL}}};
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___682  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmEvent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    73, {{0UL, 0UL}}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___683  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmEvent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    80, {{0UL, 0UL}}};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___684  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmEvent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    72, {{0UL, 0UL}}};
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) 
{ 
  void (*r)(struct FsmInst * , int  , void * ) ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 63
  ______r = ! (! (fi->state >= (fi->fsm)->state_count || event >= (fi->fsm)->event_count));
#line 63
  ______f___1265.__annonCompField3.miss_hit[______r] = ______f___1265.__annonCompField3.miss_hit[______r] + 1UL;
#line 63
  if (______r) {
#line 65
    printk("<3>mISDN_FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n", (long )fi->state, (long )(fi->fsm)->state_count,
           event, (long )(fi->fsm)->event_count);
#line 69
    return (1);
  } else {

  }
#line 71
  r = *((fi->fsm)->jumpmatrix + ((fi->fsm)->state_count * event + fi->state));
#line 72
  ______r___2 = ! (! r);
#line 72
  ______f___684.__annonCompField3.miss_hit[______r___2] = ______f___684.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 72
  if (______r___2) {
#line 73
    ______r___0 = ! (! fi->debug);
#line 73
    ______f___682.__annonCompField3.miss_hit[______r___0] = ______f___682.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 73
    if (______r___0) {
#line 74
      (*(fi->printdebug))(fi, "State %s Event %s", *((fi->fsm)->strState + fi->state),
                          *((fi->fsm)->strEvent + event));
    } else {

    }
#line 77
    (*r)(fi, event, arg);
#line 78
    return (0);
  } else {
#line 80
    ______r___1 = ! (! fi->debug);
#line 80
    ______f___683.__annonCompField3.miss_hit[______r___1] = ______f___683.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 80
    if (______r___1) {
#line 81
      (*(fi->printdebug))(fi, "State %s Event %s no action", *((fi->fsm)->strState + fi->state),
                          *((fi->fsm)->strEvent + event));
    } else {

    }
#line 84
    return (1);
  }
}
}
#line 87
extern void *__crc_mISDN_FsmEvent  __attribute__((__weak__)) ;
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmEvent  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmEvent);
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmEvent[15]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 87
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'E',      'v',      'e', 
        'n',      't',      '\000'};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmEvent  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmEvent), __kstrtab_mISDN_FsmEvent};
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___685  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmChangeState",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    93, {{0UL, 0UL}}};
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) 
{ 
  int ______r ;

  {
#line 92
  fi->state = newstate;
#line 93
  ______r = ! (! fi->debug);
#line 93
  ______f___685.__annonCompField3.miss_hit[______r] = ______f___685.__annonCompField3.miss_hit[______r] + 1UL;
#line 93
  if (______r) {
#line 94
    (*(fi->printdebug))(fi, "ChangeState %s", *((fi->fsm)->strState + newstate));
  } else {

  }
#line 96
  return;
}
}
#line 97
extern void *__crc_mISDN_FsmChangeState  __attribute__((__weak__)) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmChangeState  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmChangeState);
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmChangeState[21]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 97
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'C',      'h',      'a', 
        'n',      'g',      'e',      'S', 
        't',      'a',      't',      'e', 
        '\000'};
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmChangeState  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmChangeState), __kstrtab_mISDN_FsmChangeState};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static void FsmExpireTimer(struct FsmTimer *ft ) 
{ 


  {
#line 106
  mISDN_FsmEvent(ft->fi, ft->event, ft->arg);
#line 107
  return;
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct lock_class_key __key  ;
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) 
{ 


  {
#line 112
  ft->fi = fi;
#line 113
  ft->tl.function = (void *)(& FsmExpireTimer);
#line 114
  ft->tl.data = (long )ft;
#line 119
  while (1) {
#line 119
    init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 119
    break;
  }
#line 120
  return;
}
}
#line 121
extern void *__crc_mISDN_FsmInitTimer  __attribute__((__weak__)) ;
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmInitTimer  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmInitTimer);
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmInitTimer[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 121
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'I',      'n',      'i', 
        't',      'T',      'i',      'm', 
        'e',      'r',      '\000'};
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmInitTimer  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmInitTimer), __kstrtab_mISDN_FsmInitTimer};
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) 
{ 


  {
#line 131
  del_timer(& ft->tl);
#line 132
  return;
}
}
#line 133
extern void *__crc_mISDN_FsmDelTimer  __attribute__((__weak__)) ;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmDelTimer  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmDelTimer);
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmDelTimer[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 133
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'D',      'e',      'l', 
        'T',      'i',      'm',      'e', 
        'r',      '\000'};
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmDelTimer  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmDelTimer), __kstrtab_mISDN_FsmDelTimer};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___686  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmAddTimer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    147, {{0UL, 0UL}}};
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___687  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmAddTimer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    146, {{0UL, 0UL}}};
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct lock_class_key __key___0  ;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) 
{ 
  int ______r ;
  int ______r___0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 146
  tmp___2 = timer_pending(& ft->tl);
#line 146
  if (tmp___2) {
#line 146
    tmp___3 = 1;
  } else {
#line 146
    tmp___3 = 0;
  }
#line 146
  ______r___0 = tmp___3;
#line 146
  ______f___687.__annonCompField3.miss_hit[______r___0] = ______f___687.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 146
  if (______r___0) {
#line 147
    ______r = ! (! (ft->fi)->debug);
#line 147
    ______f___686.__annonCompField3.miss_hit[______r] = ______f___686.__annonCompField3.miss_hit[______r] + 1UL;
#line 147
    if (______r) {
#line 148
      printk("<4>mISDN_FsmAddTimer: timer already active!\n");
#line 150
      (*((ft->fi)->printdebug))(ft->fi, "mISDN_FsmAddTimer already active!");
    } else {

    }
#line 153
    return (-1);
  } else {

  }
#line 155
  while (1) {
#line 155
    init_timer_key(& ft->tl, "&ft->tl", & __key___0);
#line 155
    break;
  }
#line 156
  ft->event = event;
#line 157
  ft->arg = arg;
#line 158
  ft->tl.expires = jiffies + (unsigned long volatile   )((millisec * 250) / 1000);
#line 159
  add_timer(& ft->tl);
#line 160
  return (0);
}
}
#line 162
extern void *__crc_mISDN_FsmAddTimer  __attribute__((__weak__)) ;
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmAddTimer  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmAddTimer);
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmAddTimer[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 162
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'A',      'd',      'd', 
        'T',      'i',      'm',      'e', 
        'r',      '\000'};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmAddTimer  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmAddTimer), __kstrtab_mISDN_FsmAddTimer};
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___688  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_FsmRestartTimer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c",
    175, {{0UL, 0UL}}};
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct lock_class_key __key___1  ;
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 175
  tmp___2 = timer_pending(& ft->tl);
#line 175
  if (tmp___2) {
#line 175
    tmp___3 = 1;
  } else {
#line 175
    tmp___3 = 0;
  }
#line 175
  ______r = tmp___3;
#line 175
  ______f___688.__annonCompField3.miss_hit[______r] = ______f___688.__annonCompField3.miss_hit[______r] + 1UL;
#line 175
  if (______r) {
#line 176
    del_timer(& ft->tl);
  } else {

  }
#line 177
  while (1) {
#line 177
    init_timer_key(& ft->tl, "&ft->tl", & __key___1);
#line 177
    break;
  }
#line 178
  ft->event = event;
#line 179
  ft->arg = arg;
#line 180
  ft->tl.expires = jiffies + (unsigned long volatile   )((millisec * 250) / 1000);
#line 181
  add_timer(& ft->tl);
#line 182
  return;
}
}
#line 183
extern void *__crc_mISDN_FsmRestartTimer  __attribute__((__weak__)) ;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static unsigned long const   __kcrctab_mISDN_FsmRestartTimer  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_FsmRestartTimer);
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static char const   __kstrtab_mISDN_FsmRestartTimer[22]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 183
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'F',      's', 
        'm',      'R',      'e',      's', 
        't',      'a',      'r',      't', 
        'T',      'i',      'm',      'e', 
        'r',      '\000'};
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/fsm.c"
static struct kernel_symbol  const  __ksymtab_mISDN_FsmRestartTimer  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_FsmRestartTimer), __kstrtab_mISDN_FsmRestartTimer};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 312 "include/linux/socket.h"
extern int memcpy_fromiovec(unsigned char *kdata , struct iovec *iov , int len ) ;
#line 326
extern int put_cmsg(struct msghdr * , int level , int type , int len , void *data ) ;
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   *file , int const   line ) ;
#line 151 "include/linux/kernel.h"
extern void might_fault(void) ;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void *to , void const   *from , size_t len ) ;
#line 557 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 559
  return (! h->pprev);
}
}
#line 572
__inline static void __hlist_del(struct hlist_node *n ) ;
#line 572 "include/linux/list.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___516  __attribute__((__section__("_ftrace_branch")))  =    {"__hlist_del",
    "include/linux/list.h", 572, {{0UL, 0UL}}};
#line 567 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;
  int ______r ;

  {
#line 569
  next = n->next;
#line 570
  pprev = n->pprev;
#line 571
  *pprev = next;
#line 572
  ______r = ! (! next);
#line 572
  ______f___516.__annonCompField3.miss_hit[______r] = ______f___516.__annonCompField3.miss_hit[______r] + 1UL;
#line 572
  if (______r) {
#line 573
    next->pprev = pprev;
  } else {

  }
#line 574
  return;
}
}
#line 595
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) ;
#line 595 "include/linux/list.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___518  __attribute__((__section__("_ftrace_branch")))  =    {"hlist_add_head",
    "include/linux/list.h", 595, {{0UL, 0UL}}};
#line 591 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;
  int ______r ;

  {
#line 593
  first = h->first;
#line 594
  n->next = first;
#line 595
  ______r = ! (! first);
#line 595
  ______f___518.__annonCompField3.miss_hit[______r] = ______f___518.__annonCompField3.miss_hit[______r] + 1UL;
#line 595
  if (______r) {
#line 596
    first->pprev = & n->next;
  } else {

  }
#line 597
  h->first = n;
#line 598
  n->pprev = & h->first;
#line 599
  return;
}
}
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 87
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "incl %0": "=m" (v->counter): "m" (v->counter));
#line 90
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 100
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "decl %0": "=m" (v->counter): "m" (v->counter));
#line 103
  return;
}
}
#line 113 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 117
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "decl %0; sete %1": "=m" (v->counter), "=qm" (c): "m" (v->counter): "memory");
#line 120
  return ((int )c != 0);
}
}
#line 30 "include/linux/spinlock_api_smp.h"
extern void _read_lock_bh(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 31
extern void _write_lock_bh(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 51
extern void _read_unlock_bh(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 52
extern void _write_unlock_bh(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 178 "include/linux/time.h"
extern struct timeval ns_to_timeval(s64 const   nsec ) ;
#line 73 "include/asm-generic/ioctl.h"
extern unsigned int __invalid_size_argument_for_IOC ;
#line 213 "include/linux/net.h"
extern int sock_register(struct net_proto_family  const  *fam ) ;
#line 214
extern void sock_unregister(int family ) ;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 23
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 491 "include/linux/device.h"
extern int device_rename(struct device *dev , char *new_name ) ;
#line 307 "include/linux/hrtimer.h"
extern ktime_t ktime_get_real(void) ;
#line 429 "include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff *skb ) ;
#line 432
extern struct sk_buff *__alloc_skb(unsigned int size , gfp_t priority , int fclone ,
                                   int node ) ;
#line 434 "include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
#line 437
  tmp = __alloc_skb(size, priority, 0, -1);
#line 437
  return (tmp);
}
}
#line 958
extern void skb_queue_head(struct sk_buff_head *list , struct sk_buff *newsk ) ;
#line 1108
extern unsigned char *skb_put(struct sk_buff *skb , unsigned int len ) ;
#line 1118
extern unsigned char *skb_push(struct sk_buff *skb , unsigned int len ) ;
#line 1126
extern unsigned char *skb_pull(struct sk_buff *skb , unsigned int len ) ;
#line 1189 "include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
#line 1191
  skb->data = skb->data + len;
#line 1192
  skb->tail = skb->tail + (sk_buff_data_t )len;
#line 1193
  return;
}
}
#line 1428
extern void skb_queue_purge(struct sk_buff_head *list ) ;
#line 1709
extern struct sk_buff *skb_recv_datagram(struct sock *sk , unsigned int flags , int noblock ,
                                         int *err ) ;
#line 1711
extern unsigned int datagram_poll(struct file *file , struct socket *sock , struct poll_table_struct *wait ) ;
#line 1713
extern int skb_copy_datagram_iovec(struct sk_buff  const  *from , int offset , struct iovec *to ,
                                   int size ) ;
#line 1729
extern void skb_free_datagram(struct sock *sk , struct sk_buff *skb ) ;
#line 1813 "include/linux/skbuff.h"
__inline static void skb_get_timestamp(struct sk_buff  const  *skb , struct timeval *stamp ) 
{ 


  {
#line 1816
  *stamp = ns_to_timeval(skb->tstamp.tv64);
#line 1817
  return;
}
}
#line 1825 "include/linux/skbuff.h"
__inline static void __net_timestamp(struct sk_buff *skb ) 
{ 


  {
#line 1827
  skb->tstamp = ktime_get_real();
#line 1828
  return;
}
}
#line 334 "include/net/sock.h"
__inline static int sk_unhashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
#line 336
  tmp = hlist_unhashed(& sk->__sk_common.__annonCompField29.skc_node);
#line 336
  return (tmp);
}
}
#line 339 "include/net/sock.h"
__inline static int sk_hashed(struct sock  const  *sk ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 341
  tmp = sk_unhashed(sk);
#line 341
  if (tmp) {
#line 341
    tmp___0 = 0;
  } else {
#line 341
    tmp___0 = 1;
  }
#line 341
  return (tmp___0);
}
}
#line 344 "include/net/sock.h"
__inline static void sk_node_init(struct hlist_node *node ) 
{ 


  {
#line 346
  node->pprev = (void *)0;
#line 347
  return;
}
}
#line 354 "include/net/sock.h"
__inline static void __sk_del_node(struct sock *sk ) 
{ 


  {
#line 356
  __hlist_del(& sk->__sk_common.__annonCompField29.skc_node);
#line 357
  return;
}
}
#line 361
__inline static int __sk_del_node_init(struct sock *sk ) ;
#line 361 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1180  __attribute__((__section__("_ftrace_branch")))  =    {"__sk_del_node_init",
    "include/net/sock.h", 361, {{0UL, 0UL}}};
#line 359 "include/net/sock.h"
__inline static int __sk_del_node_init(struct sock *sk ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 361
  tmp___2 = sk_hashed(sk);
#line 361
  if (tmp___2) {
#line 361
    tmp___3 = 1;
  } else {
#line 361
    tmp___3 = 0;
  }
#line 361
  ______r = tmp___3;
#line 361
  ______f___1180.__annonCompField3.miss_hit[______r] = ______f___1180.__annonCompField3.miss_hit[______r] + 1UL;
#line 361
  if (______r) {
#line 362
    __sk_del_node(sk);
#line 363
    sk_node_init(& sk->__sk_common.__annonCompField29.skc_node);
#line 364
    return (1);
  } else {

  }
#line 366
  return (0);
}
}
#line 375 "include/net/sock.h"
__inline static void sock_hold(struct sock *sk ) 
{ 


  {
#line 377
  atomic_inc(& sk->__sk_common.skc_refcnt);
#line 378
  return;
}
}
#line 383 "include/net/sock.h"
__inline static void __sock_put(struct sock *sk ) 
{ 


  {
#line 385
  atomic_dec(& sk->__sk_common.skc_refcnt);
#line 386
  return;
}
}
#line 394
__inline static int sk_del_node_init(struct sock *sk ) ;
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1183  __attribute__((__section__("_ftrace_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1184  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1185  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 392 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1186  __attribute__((__section__("_ftrace_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 392, {{0UL, 0UL}}};
#line 388 "include/net/sock.h"
__inline static int sk_del_node_init(struct sock *sk ) 
{ 
  int rc ;
  int tmp ;
  int __ret_warn_on ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int ______r___3 ;
  long tmp___5 ;
  int ______r___4 ;

  {
#line 390
  tmp = __sk_del_node_init(sk);
#line 390
  rc = tmp;
#line 392
  ______r___4 = ! (! rc);
#line 392
  ______f___1186.__annonCompField3.miss_hit[______r___4] = ______f___1186.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 392
  if (______r___4) {
#line 394
    __ret_warn_on = ! (! (sk->__sk_common.skc_refcnt.counter == (int volatile   )1));
#line 394
    tmp___3 = __builtin_expect(! (! __ret_warn_on), 1);
#line 394
    ______r___2 = tmp___3;
#line 394
    ftrace_likely_update(& ______f___1184, ______r___2, 0);
#line 394
    if (______r___2) {
#line 394
      tmp___4 = 1;
    } else {
#line 394
      tmp___4 = 0;
    }
#line 394
    ______r___1 = tmp___4;
#line 394
    ______f___1183.__annonCompField3.miss_hit[______r___1] = ______f___1183.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 394
    if (______r___1) {
#line 394
      warn_slowpath_null("include/net/sock.h", 394);
    } else {

    }
#line 394
    tmp___5 = __builtin_expect(! (! __ret_warn_on), 1);
#line 394
    ______r___3 = tmp___5;
#line 394
    ftrace_likely_update(& ______f___1185, ______r___3, 0);
#line 395
    __sock_put(sk);
  } else {

  }
#line 397
  return (rc);
}
}
#line 421 "include/net/sock.h"
__inline static void __sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 423
  hlist_add_head(& sk->__sk_common.__annonCompField29.skc_node, list);
#line 424
  return;
}
}
#line 426 "include/net/sock.h"
__inline static void sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 428
  sock_hold(sk);
#line 429
  __sk_add_node(sk, list);
#line 430
  return;
}
}
#line 505 "include/net/sock.h"
__inline static void sock_set_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 507
  __set_bit(flag, & sk->sk_flags);
#line 508
  return;
}
}
#line 510 "include/net/sock.h"
__inline static void sock_reset_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 512
  __clear_bit(flag, & sk->sk_flags);
#line 513
  return;
}
}
#line 910
extern void lock_sock_nested(struct sock *sk , int subclass ) ;
#line 912 "include/net/sock.h"
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
#line 914
  lock_sock_nested(sk, 0);
#line 915
  return;
}
}
#line 917
extern void release_sock(struct sock *sk ) ;
#line 926
extern struct sock *sk_alloc(struct net *net , int family , gfp_t priority , struct proto *prot ) ;
#line 929
extern void sk_free(struct sock *sk ) ;
#line 970
extern int sock_no_connect(struct socket * , struct sockaddr * , int  , int  ) ;
#line 972
extern int sock_no_socketpair(struct socket * , struct socket * ) ;
#line 974
extern int sock_no_accept(struct socket * , struct socket * , int  ) ;
#line 976
extern int sock_no_getname(struct socket * , struct sockaddr * , int * , int  ) ;
#line 978
extern unsigned int sock_no_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
#line 982
extern int sock_no_listen(struct socket * , int  ) ;
#line 983
extern int sock_no_shutdown(struct socket * , int  ) ;
#line 984
extern int sock_no_getsockopt(struct socket * , int  , int  , char * , int * ) ;
#line 986
extern int sock_no_setsockopt(struct socket * , int  , int  , char * , int  ) ;
#line 988
extern int sock_no_sendmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
#line 990
extern int sock_no_recvmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ,
                           int  ) ;
#line 992
extern int sock_no_mmap(struct file *file , struct socket *sock , struct vm_area_struct *vma ) ;
#line 1022
extern void sock_init_data(struct socket *sock , struct sock *sk ) ;
#line 1079
__inline static void sock_put(struct sock *sk ) ;
#line 1079 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1204  __attribute__((__section__("_ftrace_branch")))  =    {"sock_put",
    "include/net/sock.h", 1079, {{0UL, 0UL}}};
#line 1077 "include/net/sock.h"
__inline static void sock_put(struct sock *sk ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1079
  tmp___2 = atomic_dec_and_test(& sk->__sk_common.skc_refcnt);
#line 1079
  if (tmp___2) {
#line 1079
    tmp___3 = 1;
  } else {
#line 1079
    tmp___3 = 0;
  }
#line 1079
  ______r = tmp___3;
#line 1079
  ______f___1204.__annonCompField3.miss_hit[______r] = ______f___1204.__annonCompField3.miss_hit[______r] + 1UL;
#line 1079
  if (______r) {
#line 1080
    sk_free(sk);
  } else {

  }
#line 1081
  return;
}
}
#line 1086 "include/net/sock.h"
__inline static void sk_set_socket(struct sock *sk , struct socket *sock ) 
{ 


  {
#line 1088
  sk->sk_socket = sock;
#line 1089
  return;
}
}
#line 1098 "include/net/sock.h"
__inline static void sock_orphan(struct sock *sk ) 
{ 


  {
#line 1100
  _write_lock_bh(& sk->sk_callback_lock);
#line 1101
  sock_set_flag(sk, SOCK_DEAD);
#line 1102
  sk_set_socket(sk, (void *)0);
#line 1103
  sk->sk_sleep = (void *)0;
#line 1104
  _write_unlock_bh(& sk->sk_callback_lock);
#line 1105
  return;
}
}
#line 1239
extern int sock_queue_rcv_skb(struct sock *sk , struct sk_buff *skb ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 49
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 51
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) ;
#line 57
void delete_channel(struct mISDNchannel *ch ) ;
#line 22 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static u_int *debug___0  ;
#line 24 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct proto mISDN_proto  = 
#line 24
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U, 0, 0, 0, 0, 0,
    0, 0, 0, 0, sizeof(struct mISDN_sock ), 0, 0, 0, 0, {0}, & __this_module, {'m',
                                                                               'i',
                                                                               's',
                                                                               'd',
                                                                               'n',
                                                                               '\000'},
    {0, 0}};
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct mISDN_sock_list data_sockets  =    {{0}, {{16777216}, 3736018669U, -1, (void *)-1L, {0, 0, "data_sockets.lock", 0,
                                                     0UL}}};
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct mISDN_sock_list base_sockets  =    {{0}, {{16777216}, 3736018669U, -1, (void *)-1L, {0, 0, "base_sockets.lock", 0,
                                                     0UL}}};
#line 48
__inline static struct sk_buff *_l2_alloc_skb(unsigned int len , gfp_t gfp_mask ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1266  __attribute__((__section__("_ftrace_branch")))  =    {"_l2_alloc_skb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    48, {{0UL, 0UL}}};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1267  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"_l2_alloc_skb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    48, {{0UL, 0UL}}};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
__inline static struct sk_buff *_l2_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 47
  skb = alloc_skb(len + 4U, gfp_mask);
#line 48
  tmp___2 = __builtin_expect(! (! skb), 1);
#line 48
  ______r___2 = tmp___2;
#line 48
  ftrace_likely_update(& ______f___1267, ______r___2, 1);
#line 48
  if (______r___2) {
#line 48
    tmp___3 = 1;
  } else {
#line 48
    tmp___3 = 0;
  }
#line 48
  ______r___1 = tmp___3;
#line 48
  ______f___1266.__annonCompField3.miss_hit[______r___1] = ______f___1266.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 48
  if (______r___1) {
#line 49
    skb_reserve(skb, 4);
  } else {

  }
#line 50
  return (skb);
}
}
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static void mISDN_sock_link(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 56
  _write_lock_bh(& l->lock);
#line 57
  sk_add_node(sk, & l->head);
#line 58
  _write_unlock_bh(& l->lock);
#line 59
  return;
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static void mISDN_sock_unlink(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 63
  _write_lock_bh(& l->lock);
#line 64
  sk_del_node_init(sk);
#line 65
  _write_unlock_bh(& l->lock);
#line 66
  return;
}
}
#line 75
static int mISDN_send(struct mISDNchannel *ch , struct sk_buff *skb ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1268  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    75, {{0UL, 0UL}}};
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1269  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    77, {{0UL, 0UL}}};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1270  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    81, {{0UL, 0UL}}};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int mISDN_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct mISDN_sock *msk ;
  int err ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 74
  __mptr = ch;
#line 74
  msk = (struct mISDN_sock *)((char *)__mptr - (unsigned int )(& ((struct mISDN_sock *)0)->ch));
#line 75
  ______r = ! (! (*debug___0 & 4U));
#line 75
  ______f___1268.__annonCompField3.miss_hit[______r] = ______f___1268.__annonCompField3.miss_hit[______r] + 1UL;
#line 75
  if (______r) {
#line 76
    printk("<7>%s len %d %p\n", "mISDN_send", skb->len, skb);
  } else {

  }
#line 77
  ______r___0 = ! (! ((int volatile   )msk->sk.__sk_common.skc_state == (int volatile   )3));
#line 77
  ______f___1269.__annonCompField3.miss_hit[______r___0] = ______f___1269.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 77
  if (______r___0) {
#line 78
    return (-49);
  } else {

  }
#line 79
  __net_timestamp(skb);
#line 80
  err = sock_queue_rcv_skb(& msk->sk, skb);
#line 81
  ______r___1 = ! (! err);
#line 81
  ______f___1270.__annonCompField3.miss_hit[______r___1] = ______f___1270.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 81
  if (______r___1) {
#line 82
    printk("<4>%s: error %d\n", "mISDN_send", err);
  } else {

  }
#line 83
  return (err);
}
}
#line 92
static int mISDN_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) ;
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1271  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    92, {{0UL, 0UL}}};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int mISDN_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;

  {
#line 91
  __mptr = ch;
#line 91
  msk = (struct mISDN_sock *)((char *)__mptr - (unsigned int )(& ((struct mISDN_sock *)0)->ch));
#line 92
  ______r = ! (! (*debug___0 & 4U));
#line 92
  ______f___1271.__annonCompField3.miss_hit[______r] = ______f___1271.__annonCompField3.miss_hit[______r] + 1UL;
#line 92
  if (______r) {
#line 93
    printk("<7>%s(%p, %x, %p)\n", "mISDN_ctrl", ch, cmd, arg);
  } else {

  }
#line 94
  switch (cmd) {
  case (u_int )512: 
#line 96
  msk->sk.__sk_common.skc_state = 3;
#line 97
  break;
  }
#line 99
  return (0);
}
}
#line 107
__inline static void mISDN_sock_cmsg(struct sock *sk , struct msghdr *msg , struct sk_buff *skb ) ;
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1272  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_cmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    107, {{0UL, 0UL}}};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
__inline static void mISDN_sock_cmsg(struct sock *sk , struct msghdr *msg , struct sk_buff *skb ) 
{ 
  struct timeval tv ;
  int ______r ;

  {
#line 107
  ______r = ! (! (((struct mISDN_sock *)sk)->cmask & 1U));
#line 107
  ______f___1272.__annonCompField3.miss_hit[______r] = ______f___1272.__annonCompField3.miss_hit[______r] + 1UL;
#line 107
  if (______r) {
#line 108
    skb_get_timestamp(skb, & tv);
#line 109
    put_cmsg(msg, 0, 1, sizeof(tv), & tv);
  } else {

  }
#line 111
  return;
}
}
#line 123
static int mISDN_sock_recvmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len , int flags ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1273  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    123, {{0UL, 0UL}}};
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1274  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    127, {{0UL, 0UL}}};
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1275  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    130, {{0UL, 0UL}}};
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1276  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    134, {{0UL, 0UL}}};
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1277  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    143, {{0UL, 0UL}}};
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1278  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    153, {{0UL, 0UL}}};
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1279  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    137, {{0UL, 0UL}}};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1280  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    161, {{0UL, 0UL}}};
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1281  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    160, {{0UL, 0UL}}};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1282  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_recvmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    168, {{0UL, 0UL}}};
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int mISDN_sock_recvmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len , int flags ) 
{ 
  struct sk_buff *skb ;
  struct sock *sk ;
  struct sockaddr_mISDN *maddr ;
  int copied ;
  int err ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  int ______r___8 ;

  {
#line 118
  sk = sock->sk;
#line 123
  ______r = ! (! (*debug___0 & 4U));
#line 123
  ______f___1273.__annonCompField3.miss_hit[______r] = ______f___1273.__annonCompField3.miss_hit[______r] + 1UL;
#line 123
  if (______r) {
#line 124
    printk("<7>%s: len %d, flags %x ch.nr %d, proto %x\n", "mISDN_sock_recvmsg", (int )len,
           flags, ((struct mISDN_sock *)sk)->ch.nr, sk->sk_protocol);
  } else {

  }
#line 127
  ______r___0 = ! (! (flags & 1));
#line 127
  ______f___1274.__annonCompField3.miss_hit[______r___0] = ______f___1274.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 127
  if (______r___0) {
#line 128
    return (-95);
  } else {

  }
#line 130
  ______r___1 = ! (! ((int volatile   )sk->__sk_common.skc_state == (int volatile   )3));
#line 130
  ______f___1275.__annonCompField3.miss_hit[______r___1] = ______f___1275.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 130
  if (______r___1) {
#line 131
    return (0);
  } else {

  }
#line 133
  skb = skb_recv_datagram(sk, flags, flags & 64, & err);
#line 134
  ______r___2 = ! (! (! skb));
#line 134
  ______f___1276.__annonCompField3.miss_hit[______r___2] = ______f___1276.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 134
  if (______r___2) {
#line 135
    return (err);
  } else {

  }
#line 137
  ______r___5 = ! (! ((unsigned long )msg->msg_namelen >= sizeof(struct sockaddr_mISDN )));
#line 137
  ______f___1279.__annonCompField3.miss_hit[______r___5] = ______f___1279.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 137
  if (______r___5) {
#line 138
    msg->msg_namelen = sizeof(struct sockaddr_mISDN );
#line 139
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 140
    maddr->family = 34;
#line 141
    maddr->dev = (((struct mISDN_sock *)sk)->dev)->id;
#line 142
    ______r___3 = ! (! ((int )sk->sk_protocol == 16 || (int )sk->sk_protocol == 17));
#line 142
    ______f___1277.__annonCompField3.miss_hit[______r___3] = ______f___1277.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 142
    if (______r___3) {
#line 144
      maddr->channel = (((struct mISDNhead *)(& skb->cb[0]))->id >> 16) & 255U;
#line 145
      maddr->tei = (((struct mISDNhead *)(& skb->cb[0]))->id >> 8) & 255U;
#line 146
      maddr->sapi = ((struct mISDNhead *)(& skb->cb[0]))->id & 255U;
    } else {
#line 148
      maddr->channel = ((struct mISDN_sock *)sk)->ch.nr;
#line 149
      maddr->sapi = ((struct mISDN_sock *)sk)->ch.addr & 255U;
#line 150
      maddr->tei = (((struct mISDN_sock *)sk)->ch.addr >> 8) & 255U;
    }
  } else {
#line 153
    ______r___4 = ! (! msg->msg_namelen);
#line 153
    ______f___1278.__annonCompField3.miss_hit[______r___4] = ______f___1278.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 153
    if (______r___4) {
#line 154
      printk("<4>%s: too small namelen %d\n", "mISDN_sock_recvmsg", msg->msg_namelen);
    } else {

    }
#line 156
    msg->msg_namelen = 0;
  }
#line 159
  copied = (unsigned long )skb->len + sizeof(struct mISDNhead );
#line 160
  ______r___7 = ! (! (len < (size_t )copied));
#line 160
  ______f___1281.__annonCompField3.miss_hit[______r___7] = ______f___1281.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 160
  if (______r___7) {
#line 161
    ______r___6 = ! (! (flags & 2));
#line 161
    ______f___1280.__annonCompField3.miss_hit[______r___6] = ______f___1280.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 161
    if (______r___6) {
#line 162
      atomic_dec(& skb->users);
    } else {
#line 164
      skb_queue_head(& sk->sk_receive_queue, skb);
    }
#line 165
    return (-28);
  } else {

  }
#line 167
  __len = sizeof(struct mISDNhead );
#line 167
  ______r___8 = ! (! (__len >= (size_t )64));
#line 167
  ______f___1282.__annonCompField3.miss_hit[______r___8] = ______f___1282.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 167
  if (______r___8) {
#line 167
    tmp = skb_push(skb, sizeof(struct mISDNhead ));
#line 167
    __ret = __memcpy(tmp, (struct mISDNhead *)(& skb->cb[0]), __len);
  } else {
#line 167
    tmp___0 = skb_push(skb, sizeof(struct mISDNhead ));
#line 167
    __ret = __builtin_memcpy(tmp___0, (struct mISDNhead *)(& skb->cb[0]), __len);
  }
#line 170
  err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
#line 172
  mISDN_sock_cmsg(sk, msg, skb);
#line 174
  skb_free_datagram(sk, skb);
#line 176
  return (err ? err : copied);
}
}
#line 188
static int mISDN_sock_sendmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len ) ;
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1283  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    188, {{0UL, 0UL}}};
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1284  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    193, {{0UL, 0UL}}};
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1285  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    196, {{0UL, 0UL}}};
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1286  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    199, {{0UL, 0UL}}};
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1287  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    202, {{0UL, 0UL}}};
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1288  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    208, {{0UL, 0UL}}};
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1289  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    211, {{0UL, 0UL}}};
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1290  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    216, {{0UL, 0UL}}};
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1291  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    225, {{0UL, 0UL}}};
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1292  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    219, {{0UL, 0UL}}};
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1293  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    229, {{0UL, 0UL}}};
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1294  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_sock_sendmsg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    235, {{0UL, 0UL}}};
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int mISDN_sock_sendmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len ) 
{ 
  struct sock *sk ;
  struct sk_buff *skb ;
  int err ;
  struct sockaddr_mISDN *maddr ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  size_t __len ;
  void *__ret ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int tmp___9 ;

  {
#line 183
  sk = sock->sk;
#line 185
  err = -12;
#line 188
  ______r = ! (! (*debug___0 & 4U));
#line 188
  ______f___1283.__annonCompField3.miss_hit[______r] = ______f___1283.__annonCompField3.miss_hit[______r] + 1UL;
#line 188
  if (______r) {
#line 189
    printk("<7>%s: len %d flags %x ch %d proto %x\n", "mISDN_sock_sendmsg", (int )len,
           msg->msg_flags, ((struct mISDN_sock *)sk)->ch.nr, sk->sk_protocol);
  } else {

  }
#line 193
  ______r___0 = ! (! (msg->msg_flags & 1U));
#line 193
  ______f___1284.__annonCompField3.miss_hit[______r___0] = ______f___1284.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 193
  if (______r___0) {
#line 194
    return (-95);
  } else {

  }
#line 196
  ______r___1 = ! (! (msg->msg_flags & (unsigned int )(~ ((64 | 16384) | 8192))));
#line 196
  ______f___1285.__annonCompField3.miss_hit[______r___1] = ______f___1285.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 196
  if (______r___1) {
#line 197
    return (-22);
  } else {

  }
#line 199
  ______r___2 = ! (! (len < sizeof(struct mISDNhead )));
#line 199
  ______f___1286.__annonCompField3.miss_hit[______r___2] = ______f___1286.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 199
  if (______r___2) {
#line 200
    return (-22);
  } else {

  }
#line 202
  ______r___3 = ! (! ((int volatile   )sk->__sk_common.skc_state != (int volatile   )2));
#line 202
  ______f___1287.__annonCompField3.miss_hit[______r___3] = ______f___1287.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 202
  if (______r___3) {
#line 203
    return (-77);
  } else {

  }
#line 205
  lock_sock(sk);
#line 207
  skb = _l2_alloc_skb(len, (16U | 64U) | 128U);
#line 208
  ______r___4 = ! (! (! skb));
#line 208
  ______f___1288.__annonCompField3.miss_hit[______r___4] = ______f___1288.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 208
  if (______r___4) {
#line 209
    goto done;
  } else {

  }
#line 211
  tmp___4 = skb_put(skb, len);
#line 211
  tmp___5 = memcpy_fromiovec(tmp___4, msg->msg_iov, len);
#line 211
  if (tmp___5) {
#line 211
    tmp___6 = 1;
  } else {
#line 211
    tmp___6 = 0;
  }
#line 211
  ______r___5 = tmp___6;
#line 211
  ______f___1289.__annonCompField3.miss_hit[______r___5] = ______f___1289.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 211
  if (______r___5) {
#line 212
    err = -14;
#line 213
    goto drop;
  } else {

  }
#line 216
  __len = sizeof(struct mISDNhead );
#line 216
  ______r___6 = ! (! (__len >= (size_t )64));
#line 216
  ______f___1290.__annonCompField3.miss_hit[______r___6] = ______f___1290.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 216
  if (______r___6) {
#line 216
    __ret = __memcpy((struct mISDNhead *)(& skb->cb[0]), skb->data, __len);
  } else {
#line 216
    __ret = __builtin_memcpy((struct mISDNhead *)(& skb->cb[0]), skb->data, __len);
  }
#line 217
  skb_pull(skb, sizeof(struct mISDNhead ));
#line 219
  ______r___8 = ! (! ((unsigned long )msg->msg_namelen >= sizeof(struct sockaddr_mISDN )));
#line 219
  ______f___1292.__annonCompField3.miss_hit[______r___8] = ______f___1292.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 219
  if (______r___8) {
#line 221
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 222
    ((struct mISDNhead *)(& skb->cb[0]))->id = maddr->channel;
  } else {
#line 224
    ______r___7 = ! (! ((int )sk->sk_protocol == 16 || (int )sk->sk_protocol == 17));
#line 224
    ______f___1291.__annonCompField3.miss_hit[______r___7] = ______f___1291.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 224
    if (______r___7) {
#line 226
      ((struct mISDNhead *)(& skb->cb[0]))->id = ((struct mISDN_sock *)sk)->ch.nr;
    } else {

    }
  }
#line 229
  ______r___9 = ! (! (*debug___0 & 4U));
#line 229
  ______f___1293.__annonCompField3.miss_hit[______r___9] = ______f___1293.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 229
  if (______r___9) {
#line 230
    printk("<7>%s: ID:%x\n", "mISDN_sock_sendmsg", ((struct mISDNhead *)(& skb->cb[0]))->id);
  } else {

  }
#line 233
  err = -19;
#line 234
  if (! ((struct mISDN_sock *)sk)->ch.peer) {
#line 234
    tmp___9 = 1;
  } else {
#line 234
    err = (*(((struct mISDN_sock *)sk)->ch.recv))(((struct mISDN_sock *)sk)->ch.peer,
                                                  skb);
#line 234
    if (err) {
#line 234
      tmp___9 = 1;
    } else {
#line 234
      tmp___9 = 0;
    }
  }
#line 234
  ______r___10 = tmp___9;
#line 234
  ______f___1294.__annonCompField3.miss_hit[______r___10] = ______f___1294.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 234
  if (______r___10) {
#line 236
    goto drop;
  } else {

  }
#line 238
  err = len;
  done: 
#line 241
  release_sock(sk);
#line 242
  return (err);
  drop: 
#line 245
  kfree_skb(skb);
#line 246
  goto done;
}
}
#line 254
static int data_sock_release(struct socket *sock ) ;
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1295  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    254, {{0UL, 0UL}}};
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1296  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    256, {{0UL, 0UL}}};
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1297  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    263, {{0UL, 0UL}}};
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 252
  sk = sock->sk;
#line 254
  ______r = ! (! (*debug___0 & 4U));
#line 254
  ______f___1295.__annonCompField3.miss_hit[______r] = ______f___1295.__annonCompField3.miss_hit[______r] + 1UL;
#line 254
  if (______r) {
#line 255
    printk("<7>%s(%p) sk=%p\n", "data_sock_release", sock, sk);
  } else {

  }
#line 256
  ______r___0 = ! (! (! sk));
#line 256
  ______f___1296.__annonCompField3.miss_hit[______r___0] = ______f___1296.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 256
  if (______r___0) {
#line 257
    return (0);
  } else {

  }
#line 258
  switch ((int )sk->sk_protocol) {
  case 4: 
  case 3: 
  case 2: 
  case 1: 
#line 263
  ______r___1 = ! (! ((int volatile   )sk->__sk_common.skc_state == (int volatile   )2));
#line 263
  ______f___1297.__annonCompField3.miss_hit[______r___1] = ______f___1297.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 263
  if (______r___1) {
#line 264
    delete_channel(& ((struct mISDN_sock *)sk)->ch);
  } else {
#line 266
    mISDN_sock_unlink(& data_sockets, sk);
  }
#line 267
  break;
  case 38: 
  case 37: 
  case 36: 
  case 35: 
  case 34: 
  case 33: 
  case 17: 
  case 16: 
#line 276
  delete_channel(& ((struct mISDN_sock *)sk)->ch);
#line 277
  mISDN_sock_unlink(& data_sockets, sk);
#line 278
  break;
  }
#line 281
  lock_sock(sk);
#line 283
  sock_orphan(sk);
#line 284
  skb_queue_purge(& sk->sk_receive_queue);
#line 286
  release_sock(sk);
#line 287
  sock_put(sk);
#line 289
  return (0);
}
}
#line 300
static int data_sock_ioctl_bound(struct sock *sk , unsigned int cmd , void *p ) ;
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1298  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    300, {{0UL, 0UL}}};
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1299  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    306, {{0UL, 0UL}}};
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1300  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    313, {{0UL, 0UL}}};
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1301  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    310, {{0UL, 0UL}}};
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1302  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    322, {{0UL, 0UL}}};
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1303  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    324, {{0UL, 0UL}}};
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1304  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    328, {{0UL, 0UL}}};
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1305  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    333, {{0UL, 0UL}}};
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1306  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    342, {{0UL, 0UL}}};
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1307  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl_bound",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    347, {{0UL, 0UL}}};
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_ioctl_bound(struct sock *sk , unsigned int cmd , void *p ) 
{ 
  struct mISDN_ctrl_req cq ;
  int err ;
  int val[2] ;
  struct mISDNchannel *bchan ;
  struct mISDNchannel *next ;
  int ______r ;
  int ______r___0 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  unsigned long tmp___7 ;
  int tmp___8 ;
  int ______r___5 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___9 ;
  int ______r___6 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___10 ;
  int tmp___11 ;
  int ______r___7 ;
  int __ret_gu___4 ;
  unsigned long __val_gu___4 ;
  int tmp___12 ;
  int ______r___8 ;
  int __ret_gu___5 ;
  unsigned long __val_gu___5 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 296
  err = -22;
#line 299
  lock_sock(sk);
#line 300
  ______r = ! (! (! ((struct mISDN_sock *)sk)->dev));
#line 300
  ______f___1298.__annonCompField3.miss_hit[______r] = ______f___1298.__annonCompField3.miss_hit[______r] + 1UL;
#line 300
  if (______r) {
#line 301
    err = -19;
#line 302
    goto done;
  } else {

  }
#line 304
  switch (cmd) {
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(69 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 306
  tmp___2 = copy_from_user(& cq, p, sizeof(cq));
#line 306
  if (tmp___2) {
#line 306
    tmp___3 = 1;
  } else {
#line 306
    tmp___3 = 0;
  }
#line 306
  ______r___0 = tmp___3;
#line 306
  ______f___1299.__annonCompField3.miss_hit[______r___0] = ______f___1299.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 306
  if (______r___0) {
#line 307
    err = -14;
#line 308
    break;
  } else {

  }
#line 310
  ______r___2 = ! (! (((int )sk->sk_protocol & ~ 31) == 32));
#line 310
  ______f___1301.__annonCompField3.miss_hit[______r___2] = ______f___1301.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 310
  if (______r___2) {
#line 311
    __mptr = (((struct mISDN_sock *)sk)->dev)->bchannels.next;
#line 311
    bchan = (struct mISDNchannel *)((char *)__mptr - (unsigned int )(& ((struct mISDNchannel *)0)->list));
#line 311
    __mptr___0 = bchan->list.next;
#line 311
    next = (struct mISDNchannel *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
#line 311
    while (1) {
#line 311
      if ((unsigned long )(& bchan->list) != (unsigned long )(& (((struct mISDN_sock *)sk)->dev)->bchannels)) {

      } else {
#line 311
        break;
      }
#line 313
      ______r___1 = ! (! (bchan->nr == (u_int )cq.channel));
#line 313
      ______f___1300.__annonCompField3.miss_hit[______r___1] = ______f___1300.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 313
      if (______r___1) {
#line 314
        err = (*(bchan->ctrl))(bchan, 768, & cq);
#line 316
        break;
      } else {

      }
#line 311
      bchan = next;
#line 311
      __mptr___1 = next->list.next;
#line 311
      next = (struct mISDNchannel *)((char *)__mptr___1 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
    }
  } else {
#line 320
    err = (*((((struct mISDN_sock *)sk)->dev)->D.ctrl))(& (((struct mISDN_sock *)sk)->dev)->D,
                                                        768, & cq);
  }
#line 322
  ______r___3 = ! (! err);
#line 322
  ______f___1302.__annonCompField3.miss_hit[______r___3] = ______f___1302.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 322
  if (______r___3) {
#line 323
    break;
  } else {

  }
#line 324
  tmp___7 = copy_to_user(p, & cq, sizeof(cq));
#line 324
  if (tmp___7) {
#line 324
    tmp___8 = 1;
  } else {
#line 324
    tmp___8 = 0;
  }
#line 324
  ______r___4 = tmp___8;
#line 324
  ______f___1303.__annonCompField3.miss_hit[______r___4] = ______f___1303.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 324
  if (______r___4) {
#line 325
    err = -14;
  } else {

  }
#line 326
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(70 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 328
  ______r___5 = ! (! ((int )sk->sk_protocol != 17));
#line 328
  ______f___1304.__annonCompField3.miss_hit[______r___5] = ______f___1304.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 328
  if (______r___5) {
#line 329
    err = -22;
#line 330
    break;
  } else {

  }
#line 332
  val[0] = cmd;
#line 333
  if (0) {
#line 333
    might_fault();
#line 333
    switch (sizeof(*((int *)p))) {
    case 1UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 333
    break;
    case 2UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 333
    break;
    case 4UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 333
    break;
    case 8UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 333
    break;
    default: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 333
    break;
    }
#line 333
    val[1] = (int )__val_gu___0;
#line 333
    if (__ret_gu___0) {
#line 333
      tmp___9 = 1;
    } else {
#line 333
      tmp___9 = 0;
    }
#line 333
    tmp___11 = tmp___9;
  } else {
#line 333
    might_fault();
#line 333
    switch (sizeof(*((int *)p))) {
    case 1UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 333
    break;
    case 2UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 333
    break;
    case 4UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 333
    break;
    case 8UL: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 333
    break;
    default: 
#line 333
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)p));
#line 333
    break;
    }
#line 333
    val[1] = (int )__val_gu___1;
#line 333
    if (__ret_gu___1) {
#line 333
      tmp___10 = 1;
    } else {
#line 333
      tmp___10 = 0;
    }
#line 333
    ______r___6 = tmp___10;
#line 333
    ______f___1305.__annonCompField3.miss_hit[______r___6] = ______f___1305.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 333
    tmp___11 = ______r___6;
  }
#line 333
  if (tmp___11) {
#line 334
    err = -14;
#line 335
    break;
  } else {

  }
#line 337
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768, val);
#line 339
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(72 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 341
  ______r___7 = ! (! ((int )sk->sk_protocol != 17 && (int )sk->sk_protocol != 16));
#line 341
  ______f___1306.__annonCompField3.miss_hit[______r___7] = ______f___1306.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 341
  if (______r___7) {
#line 343
    err = -22;
#line 344
    break;
  } else {

  }
#line 346
  val[0] = cmd;
#line 347
  if (0) {
#line 347
    might_fault();
#line 347
    switch (sizeof(*((int *)p))) {
    case 1UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)p));
#line 347
    break;
    case 2UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)p));
#line 347
    break;
    case 4UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)p));
#line 347
    break;
    case 8UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)p));
#line 347
    break;
    default: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)p));
#line 347
    break;
    }
#line 347
    val[1] = (int )__val_gu___4;
#line 347
    if (__ret_gu___4) {
#line 347
      tmp___12 = 1;
    } else {
#line 347
      tmp___12 = 0;
    }
#line 347
    tmp___14 = tmp___12;
  } else {
#line 347
    might_fault();
#line 347
    switch (sizeof(*((int *)p))) {
    case 1UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)p));
#line 347
    break;
    case 2UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)p));
#line 347
    break;
    case 4UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)p));
#line 347
    break;
    case 8UL: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)p));
#line 347
    break;
    default: 
#line 347
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)p));
#line 347
    break;
    }
#line 347
    val[1] = (int )__val_gu___5;
#line 347
    if (__ret_gu___5) {
#line 347
      tmp___13 = 1;
    } else {
#line 347
      tmp___13 = 0;
    }
#line 347
    ______r___8 = tmp___13;
#line 347
    ______f___1307.__annonCompField3.miss_hit[______r___8] = ______f___1307.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 347
    tmp___14 = ______r___8;
  }
#line 347
  if (tmp___14) {
#line 348
    err = -14;
#line 349
    break;
  } else {

  }
#line 351
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768, val);
#line 353
  break;
  default: 
#line 355
  err = -22;
#line 356
  break;
  }
  done: 
#line 359
  release_sock(sk);
#line 360
  return (err);
}
}
#line 376
static int data_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) ;
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1308  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    376, {{0UL, 0UL}}};
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1309  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    381, {{0UL, 0UL}}};
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1310  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    385, {{0UL, 0UL}}};
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1311  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    398, {{0UL, 0UL}}};
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1312  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    401, {{0UL, 0UL}}};
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1313  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    390, {{0UL, 0UL}}};
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1314  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    407, {{0UL, 0UL}}};
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct sock *sk ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int ______r ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___4 ;
  int ______r___0 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int tmp___5 ;
  int tmp___6 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___7 ;
  int ______r___1 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___8 ;
  int tmp___9 ;
  struct mISDN_devinfo di ;
  u_int tmp___10 ;
  size_t __len ;
  void *__ret ;
  int ______r___2 ;
  char const   *tmp___11 ;
  int ______r___3 ;
  unsigned long tmp___15 ;
  int tmp___16 ;
  int ______r___4 ;
  int ______r___5 ;

  {
#line 366
  err = 0;
#line 367
  sk = sock->sk;
#line 371
  switch (cmd) {
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(66 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 373
  ver.major = 1;
#line 374
  ver.minor = 1;
#line 375
  ver.release = 20;
#line 376
  tmp___2 = copy_to_user((void *)arg, & ver, sizeof(ver));
#line 376
  if (tmp___2) {
#line 376
    tmp___3 = 1;
  } else {
#line 376
    tmp___3 = 0;
  }
#line 376
  ______r = tmp___3;
#line 376
  ______f___1308.__annonCompField3.miss_hit[______r] = ______f___1308.__annonCompField3.miss_hit[______r] + 1UL;
#line 376
  if (______r) {
#line 377
    err = -14;
  } else {

  }
#line 378
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(67 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 380
  id = get_mdevice_count();
#line 381
  if (0) {
#line 381
    might_fault();
#line 381
    __pu_val___0 = id;
#line 381
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 2UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 4UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 8UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 381
    break;
    default: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 381
    break;
    }
#line 381
    if (__ret_pu___0) {
#line 381
      tmp___4 = 1;
    } else {
#line 381
      tmp___4 = 0;
    }
#line 381
    tmp___6 = tmp___4;
  } else {
#line 381
    might_fault();
#line 381
    __pu_val___1 = id;
#line 381
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 2UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 4UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 381
    break;
    case 8UL: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 381
    break;
    default: 
#line 381
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 381
    break;
    }
#line 381
    if (__ret_pu___1) {
#line 381
      tmp___5 = 1;
    } else {
#line 381
      tmp___5 = 0;
    }
#line 381
    ______r___0 = tmp___5;
#line 381
    ______f___1309.__annonCompField3.miss_hit[______r___0] = ______f___1309.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 381
    tmp___6 = ______r___0;
  }
#line 381
  if (tmp___6) {
#line 382
    err = -14;
  } else {

  }
#line 383
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(68 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 385
  if (0) {
#line 385
    might_fault();
#line 385
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 385
    break;
    case 2UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 385
    break;
    case 4UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 385
    break;
    case 8UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 385
    break;
    default: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 385
    break;
    }
#line 385
    id = (int )__val_gu___0;
#line 385
    if (__ret_gu___0) {
#line 385
      tmp___7 = 1;
    } else {
#line 385
      tmp___7 = 0;
    }
#line 385
    tmp___9 = tmp___7;
  } else {
#line 385
    might_fault();
#line 385
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 385
    break;
    case 2UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 385
    break;
    case 4UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 385
    break;
    case 8UL: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 385
    break;
    default: 
#line 385
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 385
    break;
    }
#line 385
    id = (int )__val_gu___1;
#line 385
    if (__ret_gu___1) {
#line 385
      tmp___8 = 1;
    } else {
#line 385
      tmp___8 = 0;
    }
#line 385
    ______r___1 = tmp___8;
#line 385
    ______f___1310.__annonCompField3.miss_hit[______r___1] = ______f___1310.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 385
    tmp___9 = ______r___1;
  }
#line 385
  if (tmp___9) {
#line 386
    err = -14;
#line 387
    break;
  } else {

  }
#line 389
  dev = get_mdevice(id);
#line 390
  ______r___4 = ! (! dev);
#line 390
  ______f___1313.__annonCompField3.miss_hit[______r___4] = ______f___1313.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 390
  if (______r___4) {
#line 393
    di.id = dev->id;
#line 394
    di.Dprotocols = dev->Dprotocols;
#line 395
    tmp___10 = get_all_Bprotocols();
#line 395
    di.Bprotocols = dev->Bprotocols | tmp___10;
#line 396
    di.protocol = dev->D.protocol;
#line 397
    __len = sizeof(di.channelmap);
#line 397
    ______r___2 = ! (! (__len >= (size_t )64));
#line 397
    ______f___1311.__annonCompField3.miss_hit[______r___2] = ______f___1311.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 397
    if (______r___2) {
#line 397
      __ret = __memcpy(di.channelmap, dev->channelmap, __len);
    } else {
#line 397
      __ret = __builtin_memcpy(di.channelmap, dev->channelmap, __len);
    }
#line 399
    di.nrbchan = dev->nrbchan;
#line 400
    tmp___11 = dev_name(& dev->dev);
#line 400
    strcpy(di.name, tmp___11);
#line 401
    tmp___15 = copy_to_user((void *)arg, & di, sizeof(di));
#line 401
    if (tmp___15) {
#line 401
      tmp___16 = 1;
    } else {
#line 401
      tmp___16 = 0;
    }
#line 401
    ______r___3 = tmp___16;
#line 401
    ______f___1312.__annonCompField3.miss_hit[______r___3] = ______f___1312.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 401
    if (______r___3) {
#line 402
      err = -14;
    } else {

    }
  } else {
#line 404
    err = -19;
  }
#line 405
  break;
  default: 
#line 407
  ______r___5 = ! (! ((int volatile   )sk->__sk_common.skc_state == (int volatile   )2));
#line 407
  ______f___1314.__annonCompField3.miss_hit[______r___5] = ______f___1314.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 407
  if (______r___5) {
#line 408
    err = data_sock_ioctl_bound(sk, cmd, (void *)arg);
  } else {
#line 411
    err = -107;
  }
  }
#line 413
  return (err);
}
}
#line 422
static int data_sock_setsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int len ) ;
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1315  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_setsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    422, {{0UL, 0UL}}};
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1316  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_setsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    430, {{0UL, 0UL}}};
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1317  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_setsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    435, {{0UL, 0UL}}};
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_setsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int len ) 
{ 
  struct sock *sk ;
  int err ;
  int opt ;
  int ______r ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r___0 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___1 ;

  {
#line 419
  sk = sock->sk;
#line 420
  err = 0;
#line 420
  opt = 0;
#line 422
  ______r = ! (! (*debug___0 & 4U));
#line 422
  ______f___1315.__annonCompField3.miss_hit[______r] = ______f___1315.__annonCompField3.miss_hit[______r] + 1UL;
#line 422
  if (______r) {
#line 423
    printk("<7>%s(%p, %d, %x, %p, %d)\n", "data_sock_setsockopt", sock, level, optname,
           optval, len);
  } else {

  }
#line 426
  lock_sock(sk);
#line 428
  switch (optname) {
  case 1: 
#line 430
  if (0) {
#line 430
    might_fault();
#line 430
    switch (sizeof(*((int *)optval))) {
    case 1UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 430
    break;
    case 2UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 430
    break;
    case 4UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 430
    break;
    case 8UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 430
    break;
    default: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)optval));
#line 430
    break;
    }
#line 430
    opt = (int )__val_gu___0;
#line 430
    if (__ret_gu___0) {
#line 430
      tmp = 1;
    } else {
#line 430
      tmp = 0;
    }
#line 430
    tmp___1 = tmp;
  } else {
#line 430
    might_fault();
#line 430
    switch (sizeof(*((int *)optval))) {
    case 1UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)optval));
#line 430
    break;
    case 2UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)optval));
#line 430
    break;
    case 4UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)optval));
#line 430
    break;
    case 8UL: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)optval));
#line 430
    break;
    default: 
#line 430
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)optval));
#line 430
    break;
    }
#line 430
    opt = (int )__val_gu___1;
#line 430
    if (__ret_gu___1) {
#line 430
      tmp___0 = 1;
    } else {
#line 430
      tmp___0 = 0;
    }
#line 430
    ______r___0 = tmp___0;
#line 430
    ______f___1316.__annonCompField3.miss_hit[______r___0] = ______f___1316.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 430
    tmp___1 = ______r___0;
  }
#line 430
  if (tmp___1) {
#line 431
    err = -14;
#line 432
    break;
  } else {

  }
#line 435
  ______r___1 = ! (! opt);
#line 435
  ______f___1317.__annonCompField3.miss_hit[______r___1] = ______f___1317.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 435
  if (______r___1) {
#line 436
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask | 1U;
  } else {
#line 438
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask & (unsigned int )(~ 1);
  }
#line 439
  break;
  default: 
#line 441
  err = -92;
#line 442
  break;
  }
#line 444
  release_sock(sk);
#line 445
  return (err);
}
}
#line 454
static int data_sock_getsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int *optlen ) ;
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1318  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_getsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    454, {{0UL, 0UL}}};
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1319  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_getsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    459, {{0UL, 0UL}}};
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1320  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_getsockopt",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    464, {{0UL, 0UL}}};
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_getsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int *optlen ) 
{ 
  struct sock *sk ;
  int len ;
  int opt ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___0 ;
  int __ret_pu___0 ;
  char __pu_val___0 ;
  int tmp___2 ;
  int ______r___1 ;
  int __ret_pu___1 ;
  char __pu_val___1 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 451
  sk = sock->sk;
#line 454
  if (0) {
#line 454
    might_fault();
#line 454
    switch (sizeof(*optlen)) {
    case 1UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 454
    break;
    case 2UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 454
    break;
    case 4UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 454
    break;
    case 8UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 454
    break;
    default: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (optlen));
#line 454
    break;
    }
#line 454
    len = (int )__val_gu___0;
#line 454
    if (__ret_gu___0) {
#line 454
      tmp = 1;
    } else {
#line 454
      tmp = 0;
    }
#line 454
    tmp___1 = tmp;
  } else {
#line 454
    might_fault();
#line 454
    switch (sizeof(*optlen)) {
    case 1UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (optlen));
#line 454
    break;
    case 2UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (optlen));
#line 454
    break;
    case 4UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (optlen));
#line 454
    break;
    case 8UL: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (optlen));
#line 454
    break;
    default: 
#line 454
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (optlen));
#line 454
    break;
    }
#line 454
    len = (int )__val_gu___1;
#line 454
    if (__ret_gu___1) {
#line 454
      tmp___0 = 1;
    } else {
#line 454
      tmp___0 = 0;
    }
#line 454
    ______r = tmp___0;
#line 454
    ______f___1318.__annonCompField3.miss_hit[______r] = ______f___1318.__annonCompField3.miss_hit[______r] + 1UL;
#line 454
    tmp___1 = ______r;
  }
#line 454
  if (tmp___1) {
#line 455
    return (-14);
  } else {

  }
#line 457
  switch (optname) {
  case 1: 
#line 459
  ______r___0 = ! (! (((struct mISDN_sock *)sk)->cmask & 1U));
#line 459
  ______f___1319.__annonCompField3.miss_hit[______r___0] = ______f___1319.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 459
  if (______r___0) {
#line 460
    opt = 1;
  } else {
#line 462
    opt = 0;
  }
#line 464
  if (0) {
#line 464
    might_fault();
#line 464
    __pu_val___0 = opt;
#line 464
    switch (sizeof(*optval)) {
    case 1UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" (optval): "ebx");
#line 464
    break;
    case 2UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" (optval): "ebx");
#line 464
    break;
    case 4UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" (optval): "ebx");
#line 464
    break;
    case 8UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" (optval): "ebx");
#line 464
    break;
    default: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" (optval): "ebx");
#line 464
    break;
    }
#line 464
    if (__ret_pu___0) {
#line 464
      tmp___2 = 1;
    } else {
#line 464
      tmp___2 = 0;
    }
#line 464
    tmp___4 = tmp___2;
  } else {
#line 464
    might_fault();
#line 464
    __pu_val___1 = opt;
#line 464
    switch (sizeof(*optval)) {
    case 1UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" (optval): "ebx");
#line 464
    break;
    case 2UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" (optval): "ebx");
#line 464
    break;
    case 4UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" (optval): "ebx");
#line 464
    break;
    case 8UL: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" (optval): "ebx");
#line 464
    break;
    default: 
#line 464
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" (optval): "ebx");
#line 464
    break;
    }
#line 464
    if (__ret_pu___1) {
#line 464
      tmp___3 = 1;
    } else {
#line 464
      tmp___3 = 0;
    }
#line 464
    ______r___1 = tmp___3;
#line 464
    ______f___1320.__annonCompField3.miss_hit[______r___1] = ______f___1320.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 464
    tmp___4 = ______r___1;
  }
#line 464
  if (tmp___4) {
#line 465
    return (-14);
  } else {

  }
#line 466
  break;
  default: 
#line 468
  return (-92);
  }
#line 471
  return (0);
}
}
#line 483
static int data_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) ;
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1321  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    483, {{0UL, 0UL}}};
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1322  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    485, {{0UL, 0UL}}};
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1323  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    487, {{0UL, 0UL}}};
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1324  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    492, {{0UL, 0UL}}};
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1325  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    497, {{0UL, 0UL}}};
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1326  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    505, {{0UL, 0UL}}};
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1327  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    507, {{0UL, 0UL}}};
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1328  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    509, {{0UL, 0UL}}};
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1329  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    512, {{0UL, 0UL}}};
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1330  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    502, {{0UL, 0UL}}};
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1331  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    532, {{0UL, 0UL}}};
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1332  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    552, {{0UL, 0UL}}};
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  struct hlist_node *node ;
  struct sock *csk ;
  int err ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  struct hlist_node  const  *__mptr ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;

  {
#line 477
  maddr = (struct sockaddr_mISDN *)addr;
#line 478
  sk = sock->sk;
#line 481
  err = 0;
#line 483
  ______r = ! (! (*debug___0 & 4U));
#line 483
  ______f___1321.__annonCompField3.miss_hit[______r] = ______f___1321.__annonCompField3.miss_hit[______r] + 1UL;
#line 483
  if (______r) {
#line 484
    printk("<7>%s(%p) sk=%p\n", "data_sock_bind", sock, sk);
  } else {

  }
#line 485
  ______r___0 = ! (! ((unsigned long )addr_len != sizeof(struct sockaddr_mISDN )));
#line 485
  ______f___1322.__annonCompField3.miss_hit[______r___0] = ______f___1322.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 485
  if (______r___0) {
#line 486
    return (-22);
  } else {

  }
#line 487
  ______r___1 = ! (! (! maddr || (int )maddr->family != 34));
#line 487
  ______f___1323.__annonCompField3.miss_hit[______r___1] = ______f___1323.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 487
  if (______r___1) {
#line 488
    return (-22);
  } else {

  }
#line 490
  lock_sock(sk);
#line 492
  ______r___2 = ! (! ((struct mISDN_sock *)sk)->dev);
#line 492
  ______f___1324.__annonCompField3.miss_hit[______r___2] = ______f___1324.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 492
  if (______r___2) {
#line 493
    err = -114;
#line 494
    goto done;
  } else {

  }
#line 496
  ((struct mISDN_sock *)sk)->dev = get_mdevice(maddr->dev);
#line 497
  ______r___3 = ! (! (! ((struct mISDN_sock *)sk)->dev));
#line 497
  ______f___1325.__annonCompField3.miss_hit[______r___3] = ______f___1325.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 497
  if (______r___3) {
#line 498
    err = -19;
#line 499
    goto done;
  } else {

  }
#line 502
  ______r___8 = ! (! ((int )sk->sk_protocol < 32));
#line 502
  ______f___1330.__annonCompField3.miss_hit[______r___8] = ______f___1330.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 502
  if (______r___8) {
#line 503
    _read_lock_bh(& data_sockets.lock);
#line 504
    node = data_sockets.head.first;
#line 504
    while (1) {
#line 504
      if (node) {
#line 504
        __builtin_prefetch(node->next);
#line 504
        __mptr = node;
#line 504
        csk = (struct sock *)((char *)__mptr - (unsigned int )(& ((struct sock *)0)->__sk_common.__annonCompField29.skc_node));
      } else {
#line 504
        break;
      }
#line 505
      ______r___4 = ! (! ((unsigned long )sk == (unsigned long )csk));
#line 505
      ______f___1326.__annonCompField3.miss_hit[______r___4] = ______f___1326.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 505
      if (______r___4) {
#line 506
        goto __Cont;
      } else {

      }
#line 507
      ______r___5 = ! (! ((unsigned long )((struct mISDN_sock *)csk)->dev != (unsigned long )((struct mISDN_sock *)sk)->dev));
#line 507
      ______f___1327.__annonCompField3.miss_hit[______r___5] = ______f___1327.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 507
      if (______r___5) {
#line 508
        goto __Cont;
      } else {

      }
#line 509
      ______r___6 = ! (! ((int )csk->sk_protocol >= 32));
#line 509
      ______f___1328.__annonCompField3.miss_hit[______r___6] = ______f___1328.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 509
      if (______r___6) {
#line 510
        goto __Cont;
      } else {

      }
#line 511
      ______r___7 = ! (! (((((int )csk->sk_protocol == 1 || (int )csk->sk_protocol == 3) || (int )csk->sk_protocol == 5) || (int )csk->sk_protocol == 16) == ((((int )sk->sk_protocol == 1 || (int )sk->sk_protocol == 3) || (int )sk->sk_protocol == 5) || (int )sk->sk_protocol == 16)));
#line 511
      ______f___1329.__annonCompField3.miss_hit[______r___7] = ______f___1329.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 511
      if (______r___7) {
#line 513
        goto __Cont;
      } else {

      }
#line 514
      _read_unlock_bh(& data_sockets.lock);
#line 515
      err = -16;
#line 516
      goto done;
      __Cont: /* CIL Label */ 
#line 504
      node = node->next;
    }
#line 518
    _read_unlock_bh(& data_sockets.lock);
  } else {

  }
#line 521
  ((struct mISDN_sock *)sk)->ch.send = & mISDN_send;
#line 522
  ((struct mISDN_sock *)sk)->ch.ctrl = & mISDN_ctrl;
#line 524
  switch ((int )sk->sk_protocol) {
  case 4: 
  case 3: 
  case 2: 
  case 1: 
#line 529
  mISDN_sock_unlink(& data_sockets, sk);
#line 530
  err = connect_layer1(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       sk->sk_protocol, maddr);
#line 532
  ______r___9 = ! (! err);
#line 532
  ______f___1331.__annonCompField3.miss_hit[______r___9] = ______f___1331.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 532
  if (______r___9) {
#line 533
    mISDN_sock_link(& data_sockets, sk);
  } else {

  }
#line 534
  break;
  case 17: 
  case 16: 
#line 537
  err = create_l2entity(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                        sk->sk_protocol, maddr);
#line 539
  break;
  case 38: 
  case 37: 
  case 36: 
  case 35: 
  case 34: 
  case 33: 
#line 546
  err = connect_Bstack(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       sk->sk_protocol, maddr);
#line 548
  break;
  default: 
#line 550
  err = -93;
  }
#line 552
  ______r___10 = ! (! err);
#line 552
  ______f___1332.__annonCompField3.miss_hit[______r___10] = ______f___1332.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 552
  if (______r___10) {
#line 553
    goto done;
  } else {

  }
#line 554
  sk->__sk_common.skc_state = 2;
#line 555
  ((struct mISDN_sock *)sk)->ch.protocol = sk->sk_protocol;
  done: 
#line 558
  release_sock(sk);
#line 559
  return (err);
}
}
#line 569
static int data_sock_getname(struct socket *sock , struct sockaddr *addr , int *addr_len ,
                             int peer ) ;
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1333  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_getname",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    569, {{0UL, 0UL}}};
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_getname(struct socket *sock , struct sockaddr *addr , int *addr_len ,
                             int peer ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int ______r ;

  {
#line 566
  maddr = (struct sockaddr_mISDN *)addr;
#line 567
  sk = sock->sk;
#line 569
  ______r = ! (! (! ((struct mISDN_sock *)sk)->dev));
#line 569
  ______f___1333.__annonCompField3.miss_hit[______r] = ______f___1333.__annonCompField3.miss_hit[______r] + 1UL;
#line 569
  if (______r) {
#line 570
    return (-77);
  } else {

  }
#line 572
  lock_sock(sk);
#line 574
  *addr_len = sizeof(*maddr);
#line 575
  maddr->dev = (((struct mISDN_sock *)sk)->dev)->id;
#line 576
  maddr->channel = ((struct mISDN_sock *)sk)->ch.nr;
#line 577
  maddr->sapi = ((struct mISDN_sock *)sk)->ch.addr & 255U;
#line 578
  maddr->tei = (((struct mISDN_sock *)sk)->ch.addr >> 8) & 255U;
#line 579
  release_sock(sk);
#line 580
  return (0);
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct proto_ops  const  data_sock_ops  = 
#line 583
     {34, & __this_module, & data_sock_release, & data_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & data_sock_getname, & datagram_poll,
    & data_sock_ioctl, 0, & sock_no_listen, & sock_no_shutdown, & data_sock_setsockopt,
    & data_sock_getsockopt, 0, 0, & mISDN_sock_sendmsg, & mISDN_sock_recvmsg, & sock_no_mmap,
    0, 0};
#line 608
static int data_sock_create(struct net *net , struct socket *sock , int protocol ) ;
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1334  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    608, {{0UL, 0UL}}};
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1335  __attribute__((__section__("_ftrace_branch")))  =    {"data_sock_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    612, {{0UL, 0UL}}};
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int data_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;
  int ______r ;
  int ______r___0 ;

  {
#line 608
  ______r = ! (! ((int )sock->type != SOCK_DGRAM));
#line 608
  ______f___1334.__annonCompField3.miss_hit[______r] = ______f___1334.__annonCompField3.miss_hit[______r] + 1UL;
#line 608
  if (______r) {
#line 609
    return (-94);
  } else {

  }
#line 611
  sk = sk_alloc(net, 34, (16U | 64U) | 128U, & mISDN_proto);
#line 612
  ______r___0 = ! (! (! sk));
#line 612
  ______f___1335.__annonCompField3.miss_hit[______r___0] = ______f___1335.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 612
  if (______r___0) {
#line 613
    return (-12);
  } else {

  }
#line 615
  sock_init_data(sock, sk);
#line 617
  sock->ops = & data_sock_ops;
#line 618
  sock->state = SS_UNCONNECTED;
#line 619
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 621
  sk->sk_protocol = protocol;
#line 622
  sk->__sk_common.skc_state = 1;
#line 623
  mISDN_sock_link(& data_sockets, sk);
#line 625
  return (0);
}
}
#line 634
static int base_sock_release(struct socket *sock ) ;
#line 634 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1336  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    634, {{0UL, 0UL}}};
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int base_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;
  int ______r ;

  {
#line 631
  sk = sock->sk;
#line 633
  printk("<7>%s(%p) sk=%p\n", "base_sock_release", sock, sk);
#line 634
  ______r = ! (! (! sk));
#line 634
  ______f___1336.__annonCompField3.miss_hit[______r] = ______f___1336.__annonCompField3.miss_hit[______r] + 1UL;
#line 634
  if (______r) {
#line 635
    return (0);
  } else {

  }
#line 637
  mISDN_sock_unlink(& base_sockets, sk);
#line 638
  sock_orphan(sk);
#line 639
  sock_put(sk);
#line 641
  return (0);
}
}
#line 656
static int base_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) ;
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1337  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    656, {{0UL, 0UL}}};
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1338  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    661, {{0UL, 0UL}}};
#line 665 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1339  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    665, {{0UL, 0UL}}};
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1340  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    678, {{0UL, 0UL}}};
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1341  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    681, {{0UL, 0UL}}};
#line 670 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1342  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    670, {{0UL, 0UL}}};
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1343  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    690, {{0UL, 0UL}}};
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1344  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    695, {{0UL, 0UL}}};
#line 644 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int base_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int ______r ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___4 ;
  int ______r___0 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int tmp___5 ;
  int tmp___6 ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp___7 ;
  int ______r___1 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___8 ;
  int tmp___9 ;
  struct mISDN_devinfo di ;
  u_int tmp___10 ;
  size_t __len ;
  void *__ret ;
  int ______r___2 ;
  char const   *tmp___11 ;
  int ______r___3 ;
  unsigned long tmp___15 ;
  int tmp___16 ;
  int ______r___4 ;
  struct mISDN_devrename dn ;
  int ______r___5 ;
  unsigned long tmp___20 ;
  int tmp___21 ;
  int ______r___6 ;

  {
#line 647
  err = 0;
#line 651
  switch (cmd) {
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(66 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 653
  ver.major = 1;
#line 654
  ver.minor = 1;
#line 655
  ver.release = 20;
#line 656
  tmp___2 = copy_to_user((void *)arg, & ver, sizeof(ver));
#line 656
  if (tmp___2) {
#line 656
    tmp___3 = 1;
  } else {
#line 656
    tmp___3 = 0;
  }
#line 656
  ______r = tmp___3;
#line 656
  ______f___1337.__annonCompField3.miss_hit[______r] = ______f___1337.__annonCompField3.miss_hit[______r] + 1UL;
#line 656
  if (______r) {
#line 657
    err = -14;
  } else {

  }
#line 658
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(67 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 660
  id = get_mdevice_count();
#line 661
  if (0) {
#line 661
    might_fault();
#line 661
    __pu_val___0 = id;
#line 661
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 2UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 4UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 8UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 661
    break;
    default: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 661
    break;
    }
#line 661
    if (__ret_pu___0) {
#line 661
      tmp___4 = 1;
    } else {
#line 661
      tmp___4 = 0;
    }
#line 661
    tmp___6 = tmp___4;
  } else {
#line 661
    might_fault();
#line 661
    __pu_val___1 = id;
#line 661
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 2UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 4UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 661
    break;
    case 8UL: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 661
    break;
    default: 
#line 661
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 661
    break;
    }
#line 661
    if (__ret_pu___1) {
#line 661
      tmp___5 = 1;
    } else {
#line 661
      tmp___5 = 0;
    }
#line 661
    ______r___0 = tmp___5;
#line 661
    ______f___1338.__annonCompField3.miss_hit[______r___0] = ______f___1338.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 661
    tmp___6 = ______r___0;
  }
#line 661
  if (tmp___6) {
#line 662
    err = -14;
  } else {

  }
#line 663
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(68 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 665
  if (0) {
#line 665
    might_fault();
#line 665
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 665
    break;
    case 2UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 665
    break;
    case 4UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 665
    break;
    case 8UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 665
    break;
    default: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 665
    break;
    }
#line 665
    id = (int )__val_gu___0;
#line 665
    if (__ret_gu___0) {
#line 665
      tmp___7 = 1;
    } else {
#line 665
      tmp___7 = 0;
    }
#line 665
    tmp___9 = tmp___7;
  } else {
#line 665
    might_fault();
#line 665
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 665
    break;
    case 2UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 665
    break;
    case 4UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 665
    break;
    case 8UL: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 665
    break;
    default: 
#line 665
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 665
    break;
    }
#line 665
    id = (int )__val_gu___1;
#line 665
    if (__ret_gu___1) {
#line 665
      tmp___8 = 1;
    } else {
#line 665
      tmp___8 = 0;
    }
#line 665
    ______r___1 = tmp___8;
#line 665
    ______f___1339.__annonCompField3.miss_hit[______r___1] = ______f___1339.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 665
    tmp___9 = ______r___1;
  }
#line 665
  if (tmp___9) {
#line 666
    err = -14;
#line 667
    break;
  } else {

  }
#line 669
  dev = get_mdevice(id);
#line 670
  ______r___4 = ! (! dev);
#line 670
  ______f___1342.__annonCompField3.miss_hit[______r___4] = ______f___1342.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 670
  if (______r___4) {
#line 673
    di.id = dev->id;
#line 674
    di.Dprotocols = dev->Dprotocols;
#line 675
    tmp___10 = get_all_Bprotocols();
#line 675
    di.Bprotocols = dev->Bprotocols | tmp___10;
#line 676
    di.protocol = dev->D.protocol;
#line 677
    __len = sizeof(di.channelmap);
#line 677
    ______r___2 = ! (! (__len >= (size_t )64));
#line 677
    ______f___1340.__annonCompField3.miss_hit[______r___2] = ______f___1340.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 677
    if (______r___2) {
#line 677
      __ret = __memcpy(di.channelmap, dev->channelmap, __len);
    } else {
#line 677
      __ret = __builtin_memcpy(di.channelmap, dev->channelmap, __len);
    }
#line 679
    di.nrbchan = dev->nrbchan;
#line 680
    tmp___11 = dev_name(& dev->dev);
#line 680
    strcpy(di.name, tmp___11);
#line 681
    tmp___15 = copy_to_user((void *)arg, & di, sizeof(di));
#line 681
    if (tmp___15) {
#line 681
      tmp___16 = 1;
    } else {
#line 681
      tmp___16 = 0;
    }
#line 681
    ______r___3 = tmp___16;
#line 681
    ______f___1341.__annonCompField3.miss_hit[______r___3] = ______f___1341.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 681
    if (______r___3) {
#line 682
      err = -14;
    } else {

    }
  } else {
#line 684
    err = -19;
  }
#line 685
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(71 << 0)) | ((sizeof(struct mISDN_devrename ) == sizeof(struct mISDN_devrename [1]) && sizeof(struct mISDN_devrename ) < (unsigned long )(1 << 14) ? sizeof(struct mISDN_devrename ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 689
  tmp___20 = copy_from_user(& dn, (void *)arg, sizeof(dn));
#line 689
  if (tmp___20) {
#line 689
    tmp___21 = 1;
  } else {
#line 689
    tmp___21 = 0;
  }
#line 689
  ______r___5 = tmp___21;
#line 689
  ______f___1343.__annonCompField3.miss_hit[______r___5] = ______f___1343.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 689
  if (______r___5) {
#line 691
    err = -14;
#line 692
    break;
  } else {

  }
#line 694
  dev = get_mdevice(dn.id);
#line 695
  ______r___6 = ! (! dev);
#line 695
  ______f___1344.__annonCompField3.miss_hit[______r___6] = ______f___1344.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 695
  if (______r___6) {
#line 696
    err = device_rename(& dev->dev, dn.name);
  } else {
#line 698
    err = -19;
  }
#line 700
  break;
  default: 
#line 702
  err = -22;
  }
#line 704
  return (err);
}
}
#line 714
static int base_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) ;
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1345  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    714, {{0UL, 0UL}}};
#line 719 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1346  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    719, {{0UL, 0UL}}};
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1347  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_bind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    725, {{0UL, 0UL}}};
#line 707 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int base_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int err ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 710
  maddr = (struct sockaddr_mISDN *)addr;
#line 711
  sk = sock->sk;
#line 712
  err = 0;
#line 714
  ______r = ! (! (! maddr || (int )maddr->family != 34));
#line 714
  ______f___1345.__annonCompField3.miss_hit[______r] = ______f___1345.__annonCompField3.miss_hit[______r] + 1UL;
#line 714
  if (______r) {
#line 715
    return (-22);
  } else {

  }
#line 717
  lock_sock(sk);
#line 719
  ______r___0 = ! (! ((struct mISDN_sock *)sk)->dev);
#line 719
  ______f___1346.__annonCompField3.miss_hit[______r___0] = ______f___1346.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 719
  if (______r___0) {
#line 720
    err = -114;
#line 721
    goto done;
  } else {

  }
#line 724
  ((struct mISDN_sock *)sk)->dev = get_mdevice(maddr->dev);
#line 725
  ______r___1 = ! (! (! ((struct mISDN_sock *)sk)->dev));
#line 725
  ______f___1347.__annonCompField3.miss_hit[______r___1] = ______f___1347.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 725
  if (______r___1) {
#line 726
    err = -19;
#line 727
    goto done;
  } else {

  }
#line 729
  sk->__sk_common.skc_state = 2;
  done: 
#line 732
  release_sock(sk);
#line 733
  return (err);
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct proto_ops  const  base_sock_ops  = 
#line 736
     {34, & __this_module, & base_sock_release, & base_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & sock_no_getname, & sock_no_poll, & base_sock_ioctl,
    0, & sock_no_listen, & sock_no_shutdown, & sock_no_setsockopt, & sock_no_getsockopt,
    0, 0, & sock_no_sendmsg, & sock_no_recvmsg, & sock_no_mmap, 0, 0};
#line 762
static int base_sock_create(struct net *net , struct socket *sock , int protocol ) ;
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1348  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    762, {{0UL, 0UL}}};
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1349  __attribute__((__section__("_ftrace_branch")))  =    {"base_sock_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    766, {{0UL, 0UL}}};
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int base_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;
  int ______r ;
  int ______r___0 ;

  {
#line 762
  ______r = ! (! ((int )sock->type != SOCK_RAW));
#line 762
  ______f___1348.__annonCompField3.miss_hit[______r] = ______f___1348.__annonCompField3.miss_hit[______r] + 1UL;
#line 762
  if (______r) {
#line 763
    return (-94);
  } else {

  }
#line 765
  sk = sk_alloc(net, 34, (16U | 64U) | 128U, & mISDN_proto);
#line 766
  ______r___0 = ! (! (! sk));
#line 766
  ______f___1349.__annonCompField3.miss_hit[______r___0] = ______f___1349.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 766
  if (______r___0) {
#line 767
    return (-12);
  } else {

  }
#line 769
  sock_init_data(sock, sk);
#line 770
  sock->ops = & base_sock_ops;
#line 771
  sock->state = SS_UNCONNECTED;
#line 772
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 773
  sk->sk_protocol = protocol;
#line 774
  sk->__sk_common.skc_state = 1;
#line 775
  mISDN_sock_link(& base_sockets, sk);
#line 777
  return (0);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static int mISDN_sock_create(struct net *net , struct socket *sock , int proto ) 
{ 
  int err ;

  {
#line 783
  err = -93;
#line 785
  switch (proto) {
  case 0: 
#line 787
  err = base_sock_create(net, sock, proto);
#line 788
  break;
  case 38: 
  case 37: 
  case 36: 
  case 35: 
  case 34: 
  case 33: 
  case 17: 
  case 16: 
  case 4: 
  case 3: 
  case 2: 
  case 1: 
#line 801
  err = data_sock_create(net, sock, proto);
#line 802
  break;
  default: 
#line 804
  return (err);
  }
#line 807
  return (err);
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct net_proto_family mISDN_sock_family_ops  =    {34, & mISDN_sock_create, & __this_module};
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1350  __attribute__((__section__("_ftrace_branch")))  =    {"misdn_sock_init",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    824, {{0UL, 0UL}}};
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
int misdn_sock_init(u_int *deb ) 
{ 
  int err ;
  int ______r ;

  {
#line 822
  debug___0 = deb;
#line 823
  err = sock_register(& mISDN_sock_family_ops);
#line 824
  ______r = ! (! err);
#line 824
  ______f___1350.__annonCompField3.miss_hit[______r] = ______f___1350.__annonCompField3.miss_hit[______r] + 1UL;
#line 824
  if (______r) {
#line 825
    printk("<3>%s: error(%d)\n", "misdn_sock_init", err);
  } else {

  }
#line 826
  return (err);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
void misdn_sock_cleanup(void) 
{ 


  {
#line 832
  sock_unregister(34);
#line 833
  return;
}
}
#line 1032
void ldv_main2_sequence_infinite_withcheck_stateful(void) ;
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1351  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main2_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    1032, {{0UL, 0UL}}};
#line 1192 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1352  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main2_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c",
    1192, {{0UL, 0UL}}};
#line 873 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/socket.c"
void ldv_main2_sequence_infinite_withcheck_stateful(void) 
{ 
  struct socket *var_group1 ;
  unsigned int var_data_sock_ioctl_10_p1 ;
  unsigned long var_data_sock_ioctl_10_p2 ;
  struct sockaddr *var_group2 ;
  int var_data_sock_bind_13_p2 ;
  int *var_data_sock_getname_14_p2 ;
  int var_data_sock_getname_14_p3 ;
  struct kiocb *var_group3 ;
  struct msghdr *var_mISDN_sock_sendmsg_7_p2 ;
  size_t var_mISDN_sock_sendmsg_7_p3 ;
  struct msghdr *var_mISDN_sock_recvmsg_6_p2 ;
  size_t var_mISDN_sock_recvmsg_6_p3 ;
  int var_mISDN_sock_recvmsg_6_p4 ;
  int var_data_sock_setsockopt_11_p1 ;
  int var_data_sock_setsockopt_11_p2 ;
  char *var_data_sock_setsockopt_11_p3 ;
  int var_data_sock_setsockopt_11_p4 ;
  int var_data_sock_getsockopt_12_p1 ;
  int var_data_sock_getsockopt_12_p2 ;
  char *var_data_sock_getsockopt_12_p3 ;
  int *var_data_sock_getsockopt_12_p4 ;
  unsigned int var_base_sock_ioctl_17_p1 ;
  unsigned long var_base_sock_ioctl_17_p2 ;
  int var_base_sock_bind_18_p2 ;
  struct net *var_group4 ;
  int var_mISDN_sock_create_20_p2 ;
  int ldv_s_data_sock_ops_proto_ops ;
  int ldv_s_base_sock_ops_proto_ops ;
  int tmp ;
  int ______r ;
  int ______r___0 ;
  int tmp___0 ;

  {
#line 1003
  LDV_IN_INTERRUPT = 1;
#line 1012
  ldv_initialize();
#line 1013
  ldv_s_data_sock_ops_proto_ops = 0;
#line 1016
  ldv_s_base_sock_ops_proto_ops = 0;
#line 1022
  while (1) {
#line 1022
    tmp___0 = nondet_int();
#line 1022
    if ((tmp___0 || ! (ldv_s_data_sock_ops_proto_ops == 0)) || ! (ldv_s_base_sock_ops_proto_ops == 0)) {

    } else {
#line 1022
      break;
    }
#line 1027
    tmp = nondet_int();
#line 1027
    switch (tmp) {
    case 0: 
#line 1032
    ______r = ! (! (ldv_s_data_sock_ops_proto_ops == 0));
#line 1032
    ______f___1351.__annonCompField3.miss_hit[______r] = ______f___1351.__annonCompField3.miss_hit[______r] + 1UL;
#line 1032
    if (______r) {
#line 1040
      ldv_handler_precall();
#line 1041
      data_sock_release(var_group1);
#line 1042
      ldv_s_data_sock_ops_proto_ops = 0;
    } else {

    }
#line 1048
    break;
    case 1: 
#line 1060
    ldv_handler_precall();
#line 1061
    data_sock_ioctl(var_group1, var_data_sock_ioctl_10_p1, var_data_sock_ioctl_10_p2);
#line 1068
    break;
    case 2: 
#line 1080
    ldv_handler_precall();
#line 1081
    data_sock_bind(var_group1, var_group2, var_data_sock_bind_13_p2);
#line 1088
    break;
    case 3: 
#line 1100
    ldv_handler_precall();
#line 1101
    data_sock_getname(var_group1, var_group2, var_data_sock_getname_14_p2, var_data_sock_getname_14_p3);
#line 1108
    break;
    case 4: 
#line 1120
    ldv_handler_precall();
#line 1121
    mISDN_sock_sendmsg(var_group3, var_group1, var_mISDN_sock_sendmsg_7_p2, var_mISDN_sock_sendmsg_7_p3);
#line 1128
    break;
    case 5: 
#line 1140
    ldv_handler_precall();
#line 1141
    mISDN_sock_recvmsg(var_group3, var_group1, var_mISDN_sock_recvmsg_6_p2, var_mISDN_sock_recvmsg_6_p3,
                       var_mISDN_sock_recvmsg_6_p4);
#line 1148
    break;
    case 6: 
#line 1160
    ldv_handler_precall();
#line 1161
    data_sock_setsockopt(var_group1, var_data_sock_setsockopt_11_p1, var_data_sock_setsockopt_11_p2,
                         var_data_sock_setsockopt_11_p3, var_data_sock_setsockopt_11_p4);
#line 1168
    break;
    case 7: 
#line 1180
    ldv_handler_precall();
#line 1181
    data_sock_getsockopt(var_group1, var_data_sock_getsockopt_12_p1, var_data_sock_getsockopt_12_p2,
                         var_data_sock_getsockopt_12_p3, var_data_sock_getsockopt_12_p4);
#line 1188
    break;
    case 8: 
#line 1192
    ______r___0 = ! (! (ldv_s_base_sock_ops_proto_ops == 0));
#line 1192
    ______f___1352.__annonCompField3.miss_hit[______r___0] = ______f___1352.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1192
    if (______r___0) {
#line 1200
      ldv_handler_precall();
#line 1201
      base_sock_release(var_group1);
#line 1202
      ldv_s_base_sock_ops_proto_ops = 0;
    } else {

    }
#line 1208
    break;
    case 9: 
#line 1220
    ldv_handler_precall();
#line 1221
    base_sock_ioctl(var_group1, var_base_sock_ioctl_17_p1, var_base_sock_ioctl_17_p2);
#line 1228
    break;
    case 10: 
#line 1240
    ldv_handler_precall();
#line 1241
    base_sock_bind(var_group1, var_group2, var_base_sock_bind_18_p2);
#line 1248
    break;
    case 11: 
#line 1260
    ldv_handler_precall();
#line 1261
    mISDN_sock_create(var_group4, var_group1, var_mISDN_sock_create_20_p2);
#line 1268
    break;
    default: 
#line 1269
    break;
    }
  }
#line 1278
  ldv_check_final_state();
#line 1281
  return;
}
}
#line 27 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 39 "include/linux/spinlock_api_smp.h"
extern unsigned long _read_lock_irqsave(rwlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 58
extern void _read_unlock_irqrestore(rwlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 116 "include/linux/time.h"
extern void do_gettimeofday(struct timeval *tv ) ;
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1353  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___618  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___619  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___619, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___618.__annonCompField3.miss_hit[______r___2] = ______f___618.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___1353.__annonCompField3.miss_hit[______r] = ______f___1353.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___0)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1354  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1355  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1356  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1357  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1358  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1359  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1360  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1361  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1362  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1363  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1364  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1365  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1366  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1367  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1368  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1369  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1370  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1371  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1372  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1373  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1374  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1375  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1376  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___0)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___1354.__annonCompField3.miss_hit[______r] = ______f___1354.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___1355.__annonCompField3.miss_hit[______r___0] = ______f___1355.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___1356.__annonCompField3.miss_hit[______r___1] = ______f___1356.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___1357.__annonCompField3.miss_hit[______r___2] = ______f___1357.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___1358.__annonCompField3.miss_hit[______r___3] = ______f___1358.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___1359.__annonCompField3.miss_hit[______r___4] = ______f___1359.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___1360.__annonCompField3.miss_hit[______r___5] = ______f___1360.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___1361.__annonCompField3.miss_hit[______r___6] = ______f___1361.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___1362.__annonCompField3.miss_hit[______r___7] = ______f___1362.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___1363.__annonCompField3.miss_hit[______r___8] = ______f___1363.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___1364.__annonCompField3.miss_hit[______r___9] = ______f___1364.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___1365.__annonCompField3.miss_hit[______r___10] = ______f___1365.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___1366.__annonCompField3.miss_hit[______r___11] = ______f___1366.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___1367.__annonCompField3.miss_hit[______r___12] = ______f___1367.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___1368.__annonCompField3.miss_hit[______r___13] = ______f___1368.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___1369.__annonCompField3.miss_hit[______r___14] = ______f___1369.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___1370.__annonCompField3.miss_hit[______r___15] = ______f___1370.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___1371.__annonCompField3.miss_hit[______r___16] = ______f___1371.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___1372.__annonCompField3.miss_hit[______r___17] = ______f___1372.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___1373.__annonCompField3.miss_hit[______r___18] = ______f___1373.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___1374.__annonCompField3.miss_hit[______r___19] = ______f___1374.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___1375.__annonCompField3.miss_hit[______r___20] = ______f___1375.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___1376.__annonCompField3.miss_hit[______r___21] = ______f___1376.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___0)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___668  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___0)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___0(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___668.__annonCompField3.miss_hit[______r] = ______f___668.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___0)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___0((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___0)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___669  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___670  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___671  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___0)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___669.__annonCompField3.miss_hit[______r] = ______f___669.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___0(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___671.__annonCompField3.miss_hit[______r___1] = ______f___671.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___0(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___670.__annonCompField3.miss_hit[______r___0] = ______f___670.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___0((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___0(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 559 "include/linux/mISDNif.h"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) ;
#line 561
void mISDN_unregister_clock(struct mISDNclock *iclock ) ;
#line 572
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) ;
#line 573
unsigned short mISDN_clock_get(void) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static u_int *debug___1  ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct list_head iclock_list  =    {& iclock_list, & iclock_list};
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static rwlock_t iclock_lock  =    {{16777216}, 3736018669U, -1, (void *)-1L, {0, 0, "iclock_lock", 0, 0UL}};
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static u16 iclock_count  ;
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct timeval iclock_tv  ;
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static int iclock_tv_valid  ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct mISDNclock *iclock_current  ;
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
void mISDN_init_clock(u_int *dp ) 
{ 


  {
#line 53
  debug___1 = dp;
#line 54
  do_gettimeofday(& iclock_tv);
#line 55
  return;
}
}
#line 64
static void select_iclock(void) ;
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1377  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    64, {{0UL, 0UL}}};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1378  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    68, {{0UL, 0UL}}};
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1379  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    73, {{0UL, 0UL}}};
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1380  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    71, {{0UL, 0UL}}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1381  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    80, {{0UL, 0UL}}};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1382  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    78, {{0UL, 0UL}}};
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1383  __attribute__((__section__("_ftrace_branch")))  =    {"select_iclock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    85, {{0UL, 0UL}}};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static void select_iclock(void) 
{ 
  struct mISDNclock *iclock ;
  struct mISDNclock *bestclock ;
  struct mISDNclock *lastclock ;
  int pri ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;

  {
#line 60
  bestclock = (void *)0;
#line 60
  lastclock = (void *)0;
#line 61
  pri = -128;
#line 63
  __mptr = iclock_list.next;
#line 63
  iclock = (struct mISDNclock *)((char *)__mptr - (unsigned int )(& ((struct mISDNclock *)0)->list));
#line 63
  while (1) {
#line 63
    __builtin_prefetch(iclock->list.next);
#line 63
    if ((unsigned long )(& iclock->list) != (unsigned long )(& iclock_list)) {

    } else {
#line 63
      break;
    }
#line 64
    ______r = ! (! (iclock->pri > pri));
#line 64
    ______f___1377.__annonCompField3.miss_hit[______r] = ______f___1377.__annonCompField3.miss_hit[______r] + 1UL;
#line 64
    if (______r) {
#line 65
      pri = iclock->pri;
#line 66
      bestclock = iclock;
    } else {

    }
#line 68
    ______r___0 = ! (! ((unsigned long )iclock_current == (unsigned long )iclock));
#line 68
    ______f___1378.__annonCompField3.miss_hit[______r___0] = ______f___1378.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 68
    if (______r___0) {
#line 69
      lastclock = iclock;
    } else {

    }
#line 63
    __mptr___0 = iclock->list.next;
#line 63
    iclock = (struct mISDNclock *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNclock *)0)->list));
  }
#line 71
  ______r___2 = ! (! (lastclock && (unsigned long )bestclock != (unsigned long )lastclock));
#line 71
  ______f___1380.__annonCompField3.miss_hit[______r___2] = ______f___1380.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 71
  if (______r___2) {
#line 73
    ______r___1 = ! (! (*debug___1 & 33554432U));
#line 73
    ______f___1379.__annonCompField3.miss_hit[______r___1] = ______f___1379.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 73
    if (______r___1) {
#line 74
      printk("<7>Old clock source \'%s\' disable.\n", lastclock->name);
    } else {

    }
#line 76
    (*(lastclock->ctl))(lastclock->priv, 0);
  } else {

  }
#line 78
  ______r___4 = ! (! (bestclock && (unsigned long )bestclock != (unsigned long )iclock_current));
#line 78
  ______f___1382.__annonCompField3.miss_hit[______r___4] = ______f___1382.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 78
  if (______r___4) {
#line 80
    ______r___3 = ! (! (*debug___1 & 33554432U));
#line 80
    ______f___1381.__annonCompField3.miss_hit[______r___3] = ______f___1381.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 80
    if (______r___3) {
#line 81
      printk("<7>New clock source \'%s\' enable.\n", bestclock->name);
    } else {

    }
#line 83
    (*(bestclock->ctl))(bestclock->priv, 1);
  } else {

  }
#line 85
  ______r___5 = ! (! ((unsigned long )bestclock != (unsigned long )iclock_current));
#line 85
  ______f___1383.__annonCompField3.miss_hit[______r___5] = ______f___1383.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 85
  if (______r___5) {
#line 87
    iclock_tv_valid = 0;
  } else {

  }
#line 89
  iclock_current = bestclock;
#line 90
  return;
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1384  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_clock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    98, {{0UL, 0UL}}};
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1385  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_register_clock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    101, {{0UL, 0UL}}};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) 
{ 
  u_long flags ;
  struct mISDNclock *iclock ;
  int ______r ;
  void *tmp ;
  int ______r___0 ;

  {
#line 98
  ______r = ! (! (*debug___1 & (unsigned int )(255 | 33554432)));
#line 98
  ______f___1384.__annonCompField3.miss_hit[______r] = ______f___1384.__annonCompField3.miss_hit[______r] + 1UL;
#line 98
  if (______r) {
#line 99
    printk("<7>%s: %s %d\n", "mISDN_register_clock", name, pri);
  } else {

  }
#line 100
  tmp = kzalloc___0(sizeof(struct mISDNclock ), 32U);
#line 100
  iclock = tmp;
#line 101
  ______r___0 = ! (! (! iclock));
#line 101
  ______f___1385.__annonCompField3.miss_hit[______r___0] = ______f___1385.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 101
  if (______r___0) {
#line 102
    printk("<3>%s: No memory for clock entry.\n", "mISDN_register_clock");
#line 103
    return ((void *)0);
  } else {

  }
#line 105
  strncpy(iclock->name, name, sizeof(iclock->name) - 1UL);
#line 106
  iclock->pri = pri;
#line 107
  iclock->priv = priv;
#line 108
  iclock->ctl = ctl;
#line 109
  while (1) {
#line 109
    flags = _write_lock_irqsave(& iclock_lock);
#line 109
    break;
  }
#line 110
  list_add_tail(& iclock->list, & iclock_list);
#line 111
  select_iclock();
#line 112
  while (1) {
#line 112
    _write_unlock_irqrestore(& iclock_lock, flags);
#line 112
    break;
  }
#line 113
  return (iclock);
}
}
#line 115
extern void *__crc_mISDN_register_clock  __attribute__((__weak__)) ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static unsigned long const   __kcrctab_mISDN_register_clock  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_register_clock);
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static char const   __kstrtab_mISDN_register_clock[21]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 115
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'r',      'e', 
        'g',      'i',      's',      't', 
        'e',      'r',      '_',      'c', 
        'l',      'o',      'c',      'k', 
        '\000'};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct kernel_symbol  const  __ksymtab_mISDN_register_clock  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_register_clock), __kstrtab_mISDN_register_clock};
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1386  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_unregister_clock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    122, {{0UL, 0UL}}};
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1387  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_unregister_clock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    127, {{0UL, 0UL}}};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1388  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_unregister_clock",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    126, {{0UL, 0UL}}};
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
void mISDN_unregister_clock(struct mISDNclock *iclock ) 
{ 
  u_long flags ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 122
  ______r = ! (! (*debug___1 & (unsigned int )(255 | 33554432)));
#line 122
  ______f___1386.__annonCompField3.miss_hit[______r] = ______f___1386.__annonCompField3.miss_hit[______r] + 1UL;
#line 122
  if (______r) {
#line 123
    printk("<7>%s: %s %d\n", "mISDN_unregister_clock", iclock->name, iclock->pri);
  } else {

  }
#line 125
  while (1) {
#line 125
    flags = _write_lock_irqsave(& iclock_lock);
#line 125
    break;
  }
#line 126
  ______r___1 = ! (! ((unsigned long )iclock_current == (unsigned long )iclock));
#line 126
  ______f___1388.__annonCompField3.miss_hit[______r___1] = ______f___1388.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 126
  if (______r___1) {
#line 127
    ______r___0 = ! (! (*debug___1 & 33554432U));
#line 127
    ______f___1387.__annonCompField3.miss_hit[______r___0] = ______f___1387.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 127
    if (______r___0) {
#line 128
      printk("<7>Current clock source \'%s\' unregisters.\n", iclock->name);
    } else {

    }
#line 131
    (*(iclock->ctl))(iclock->priv, 0);
  } else {

  }
#line 133
  list_del(& iclock->list);
#line 134
  select_iclock();
#line 135
  while (1) {
#line 135
    _write_unlock_irqrestore(& iclock_lock, flags);
#line 135
    break;
  }
#line 136
  return;
}
}
#line 137
extern void *__crc_mISDN_unregister_clock  __attribute__((__weak__)) ;
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static unsigned long const   __kcrctab_mISDN_unregister_clock  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_unregister_clock);
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static char const   __kstrtab_mISDN_unregister_clock[23]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 137
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'u',      'n', 
        'r',      'e',      'g',      'i', 
        's',      't',      'e',      'r', 
        '_',      'c',      'l',      'o', 
        'c',      'k',      '\000'};
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct kernel_symbol  const  __ksymtab_mISDN_unregister_clock  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_unregister_clock), __kstrtab_mISDN_unregister_clock};
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1389  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    148, {{0UL, 0UL}}};
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1390  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    160, {{0UL, 0UL}}};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1391  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    167, {{0UL, 0UL}}};
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1392  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    175, {{0UL, 0UL}}};
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1393  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    184, {{0UL, 0UL}}};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1394  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_update",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    157, {{0UL, 0UL}}};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;

  {
#line 147
  while (1) {
#line 147
    flags = _write_lock_irqsave(& iclock_lock);
#line 147
    break;
  }
#line 148
  ______r = ! (! ((unsigned long )iclock_current != (unsigned long )iclock));
#line 148
  ______f___1389.__annonCompField3.miss_hit[______r] = ______f___1389.__annonCompField3.miss_hit[______r] + 1UL;
#line 148
  if (______r) {
#line 149
    printk("<3>%s: \'%s\' sends us clock updates, but we do listen to \'%s\'. This is a bug!\n",
           "mISDN_clock_update", iclock->name, iclock_current ? iclock_current->name : "nothing");
#line 153
    (*(iclock->ctl))(iclock->priv, 0);
#line 154
    while (1) {
#line 154
      _write_unlock_irqrestore(& iclock_lock, flags);
#line 154
      break;
    }
#line 155
    return;
  } else {

  }
#line 157
  ______r___4 = ! (! iclock_tv_valid);
#line 157
  ______f___1394.__annonCompField3.miss_hit[______r___4] = ______f___1394.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 157
  if (______r___4) {
#line 159
    iclock_count = (int )iclock_count + samples;
#line 160
    ______r___0 = ! (! tv);
#line 160
    ______f___1390.__annonCompField3.miss_hit[______r___0] = ______f___1390.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 160
    if (______r___0) {
#line 161
      iclock_tv.tv_sec = tv->tv_sec;
#line 162
      iclock_tv.tv_usec = tv->tv_usec;
    } else {
#line 164
      do_gettimeofday(& iclock_tv);
    }
  } else {
#line 167
    ______r___1 = ! (! tv);
#line 167
    ______f___1391.__annonCompField3.miss_hit[______r___1] = ______f___1391.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 167
    if (______r___1) {
#line 168
      tv_now.tv_sec = tv->tv_sec;
#line 169
      tv_now.tv_usec = tv->tv_usec;
    } else {
#line 171
      do_gettimeofday(& tv_now);
    }
#line 172
    elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 173
    elapsed_8000th = tv_now.tv_usec / (__kernel_suseconds_t )125 - iclock_tv.tv_usec / (__kernel_suseconds_t )125;
#line 175
    ______r___2 = ! (! (elapsed_8000th < 0));
#line 175
    ______f___1392.__annonCompField3.miss_hit[______r___2] = ______f___1392.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 175
    if (______r___2) {
#line 176
      elapsed_sec = elapsed_sec - (time_t )1;
#line 177
      elapsed_8000th = elapsed_8000th + 8000;
    } else {

    }
#line 180
    iclock_count = (time_t )iclock_count + (elapsed_sec * (time_t )8000 + (time_t )elapsed_8000th);
#line 181
    iclock_tv.tv_sec = tv_now.tv_sec;
#line 182
    iclock_tv.tv_usec = tv_now.tv_usec;
#line 183
    iclock_tv_valid = 1;
#line 184
    ______r___3 = ! (! (*debug___1 & 33554432U));
#line 184
    ______f___1393.__annonCompField3.miss_hit[______r___3] = ______f___1393.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 184
    if (______r___3) {
#line 185
      printk("Received first clock from source \'%s\'.\n", iclock_current ? iclock_current->name : "nothing");
    } else {

    }
  }
#line 188
  while (1) {
#line 188
    _write_unlock_irqrestore(& iclock_lock, flags);
#line 188
    break;
  }
#line 189
  return;
}
}
#line 190
extern void *__crc_mISDN_clock_update  __attribute__((__weak__)) ;
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static unsigned long const   __kcrctab_mISDN_clock_update  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_clock_update);
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static char const   __kstrtab_mISDN_clock_update[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 190
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'c',      'l', 
        'o',      'c',      'k',      '_', 
        'u',      'p',      'd',      'a', 
        't',      'e',      '\000'};
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct kernel_symbol  const  __ksymtab_mISDN_clock_update  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_clock_update), __kstrtab_mISDN_clock_update};
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1395  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_clock_get",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c",
    206, {{0UL, 0UL}}};
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
unsigned short mISDN_clock_get(void) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;
  u16 count ;
  int ______r ;

  {
#line 201
  while (1) {
#line 201
    flags = _read_lock_irqsave(& iclock_lock);
#line 201
    break;
  }
#line 203
  do_gettimeofday(& tv_now);
#line 204
  elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 205
  elapsed_8000th = tv_now.tv_usec / (__kernel_suseconds_t )125 - iclock_tv.tv_usec / (__kernel_suseconds_t )125;
#line 206
  ______r = ! (! (elapsed_8000th < 0));
#line 206
  ______f___1395.__annonCompField3.miss_hit[______r] = ______f___1395.__annonCompField3.miss_hit[______r] + 1UL;
#line 206
  if (______r) {
#line 207
    elapsed_sec = elapsed_sec - (time_t )1;
#line 208
    elapsed_8000th = elapsed_8000th + 8000;
  } else {

  }
#line 211
  count = ((time_t )iclock_count + elapsed_sec * (time_t )8000) + (time_t )elapsed_8000th;
#line 212
  while (1) {
#line 212
    _read_unlock_irqrestore(& iclock_lock, flags);
#line 212
    break;
  }
#line 213
  return (count);
}
}
#line 215
extern void *__crc_mISDN_clock_get  __attribute__((__weak__)) ;
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static unsigned long const   __kcrctab_mISDN_clock_get  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_clock_get);
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static char const   __kstrtab_mISDN_clock_get[16]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 215
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'c',      'l', 
        'o',      'c',      'k',      '_', 
        'g',      'e',      't',      '\000'};
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/clock.c"
static struct kernel_symbol  const  __ksymtab_mISDN_clock_get  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_clock_get), __kstrtab_mISDN_clock_get};
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int ( __attribute__((__always_inline__)) constant_test_bit)(unsigned int nr ,
                                                                            unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return (((1UL << nr % 64U) & *((unsigned long *)addr + nr / 64U)) != 0UL);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 236 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map *lock , char const   *name , struct lock_class_key *key ,
                             int subclass ) ;
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 209 "include/linux/workqueue.h"
extern void flush_scheduled_work(void) ;
#line 211
extern int schedule_work(struct work_struct *work ) ;
#line 430 "include/linux/skbuff.h"
extern void consume_skb(struct sk_buff *skb ) ;
#line 799 "include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct sk_buff *tmp ;

  {
#line 801
  tmp = (struct sk_buff *)list;
#line 801
  list->next = tmp;
#line 801
  list->prev = tmp;
#line 802
  list->qlen = 0;
#line 803
  return;
}
}
#line 815 "include/linux/skbuff.h"
static struct lock_class_key __key___4  ;
#line 813 "include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list ) 
{ 


  {
#line 815
  while (1) {
#line 815
    __spin_lock_init(& list->lock, "&list->lock", & __key___4);
#line 815
    break;
  }
#line 816
  __skb_queue_head_init(list);
#line 817
  return;
}
}
#line 975
extern void skb_queue_tail(struct sk_buff_head *list , struct sk_buff *newsk ) ;
#line 1007
extern struct sk_buff *skb_dequeue(struct sk_buff_head *list ) ;
#line 516 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb(unsigned int len , gfp_t gfp_mask ) ;
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1228  __attribute__((__section__("_ftrace_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1229  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 510 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 515
  skb = alloc_skb((unsigned long )len + sizeof(struct mISDNhead ), gfp_mask);
#line 516
  tmp___2 = __builtin_expect(! (! skb), 1);
#line 516
  ______r___2 = tmp___2;
#line 516
  ftrace_likely_update(& ______f___1229, ______r___2, 1);
#line 516
  if (______r___2) {
#line 516
    tmp___3 = 1;
  } else {
#line 516
    tmp___3 = 0;
  }
#line 516
  ______r___1 = tmp___3;
#line 516
  ______f___1228.__annonCompField3.miss_hit[______r___1] = ______f___1228.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 516
  if (______r___1) {
#line 517
    skb_reserve(skb, sizeof(struct mISDNhead ));
  } else {

  }
#line 518
  return (skb);
}
}
#line 527
__inline static struct sk_buff *_alloc_mISDN_skb(u_int prim , u_int id , u_int len ,
                                                 void *dp , gfp_t gfp_mask ) ;
#line 527 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1230  __attribute__((__section__("_ftrace_branch")))  =    {"_alloc_mISDN_skb",
    "include/linux/mISDNif.h", 527, {{0UL, 0UL}}};
#line 529 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1232  __attribute__((__section__("_ftrace_branch")))  =    {"_alloc_mISDN_skb",
    "include/linux/mISDNif.h", 529, {{0UL, 0UL}}};
#line 521 "include/linux/mISDNif.h"
__inline static struct sk_buff *_alloc_mISDN_skb(u_int prim , u_int id , u_int len ,
                                                 void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  int ______r ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;
  int ______r___1 ;

  {
#line 524
  tmp = mI_alloc_skb(len, gfp_mask);
#line 524
  skb = tmp;
#line 527
  ______r = ! (! (! skb));
#line 527
  ______f___1230.__annonCompField3.miss_hit[______r] = ______f___1230.__annonCompField3.miss_hit[______r] + 1UL;
#line 527
  if (______r) {
#line 528
    return ((void *)0);
  } else {

  }
#line 529
  ______r___1 = ! (! len);
#line 529
  ______f___1232.__annonCompField3.miss_hit[______r___1] = ______f___1232.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 529
  if (______r___1) {
#line 530
    __len = len;
#line 530
    tmp___1 = skb_put(skb, len);
#line 530
    __ret = __builtin_memcpy(tmp___1, dp, __len);
  } else {

  }
#line 531
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 532
  hh->prim = prim;
#line 533
  hh->id = id;
#line 534
  return (skb);
}
}
#line 543
__inline static void _queue_data(struct mISDNchannel *ch , u_int prim , u_int id ,
                                 u_int len , void *dp , gfp_t gfp_mask ) ;
#line 543 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1233  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 543, {{0UL, 0UL}}};
#line 546 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1234  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 546, {{0UL, 0UL}}};
#line 548 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1235  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 548, {{0UL, 0UL}}};
#line 537 "include/linux/mISDNif.h"
__inline static void _queue_data(struct mISDNchannel *ch , u_int prim , u_int id ,
                                 u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 543
  ______r = ! (! (! ch->peer));
#line 543
  ______f___1233.__annonCompField3.miss_hit[______r] = ______f___1233.__annonCompField3.miss_hit[______r] + 1UL;
#line 543
  if (______r) {
#line 544
    return;
  } else {

  }
#line 545
  skb = _alloc_mISDN_skb(prim, id, len, dp, gfp_mask);
#line 546
  ______r___0 = ! (! (! skb));
#line 546
  ______f___1234.__annonCompField3.miss_hit[______r___0] = ______f___1234.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 546
  if (______r___0) {
#line 547
    return;
  } else {

  }
#line 548
  tmp___2 = (*(ch->recv))(ch->peer, skb);
#line 548
  if (tmp___2) {
#line 548
    tmp___3 = 1;
  } else {
#line 548
    tmp___3 = 0;
  }
#line 548
  ______r___1 = tmp___3;
#line 548
  ______f___1235.__annonCompField3.miss_hit[______r___1] = ______f___1235.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 548
  if (______r___1) {
#line 549
    consume_skb(skb);
  } else {

  }
#line 550
  return;
}
}
#line 178 "include/linux/mISDNhw.h"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) ;
#line 179
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) ;
#line 180
int mISDN_freedchannel(struct dchannel *ch ) ;
#line 181
int mISDN_freebchannel(struct bchannel *ch ) ;
#line 182
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) ;
#line 184
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) ;
#line 185
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) ;
#line 186
void recv_Dchannel(struct dchannel *dch ) ;
#line 187
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) ;
#line 188
void recv_Bchannel(struct bchannel *bch , unsigned int id ) ;
#line 189
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) ;
#line 190
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) ;
#line 191
void confirm_Bsend(struct bchannel *bch ) ;
#line 192
int get_next_bframe(struct bchannel *bch ) ;
#line 193
int get_next_dframe(struct dchannel *dch ) ;
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static void dchannel_bh(struct work_struct *ws ) ;
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1396  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    32, {{0UL, 0UL}}};
#line 30 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1397  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    30, {{0UL, 0UL}}};
#line 30 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1398  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    30, {{0UL, 0UL}}};
#line 28 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1399  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    28, {{0UL, 0UL}}};
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1400  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    39, {{0UL, 0UL}}};
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1401  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    38, {{0UL, 0UL}}};
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static void dchannel_bh(struct work_struct *ws ) 
{ 
  struct dchannel *dch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;
  int ______r___4 ;
  int tmp___7 ;
  int tmp___8 ;
  int ______r___5 ;
  int ______r___6 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 24
  __mptr = ws;
#line 24
  dch = (struct dchannel *)((char *)__mptr - (unsigned int )(& ((struct dchannel *)0)->workq));
#line 28
  tmp___7 = test_and_clear_bit(30, & dch->Flags);
#line 28
  if (tmp___7) {
#line 28
    tmp___8 = 1;
  } else {
#line 28
    tmp___8 = 0;
  }
#line 28
  ______r___4 = tmp___8;
#line 28
  ______f___1399.__annonCompField3.miss_hit[______r___4] = ______f___1399.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 28
  if (______r___4) {
#line 29
    while (1) {
#line 29
      skb = skb_dequeue(& dch->rqueue);
#line 29
      if (skb) {

      } else {
#line 29
        break;
      }
#line 30
      tmp___2 = __builtin_expect(! (! dch->dev.D.peer), 1);
#line 30
      ______r___3 = tmp___2;
#line 30
      ftrace_likely_update(& ______f___1398, ______r___3, 1);
#line 30
      if (______r___3) {
#line 30
        tmp___3 = 1;
      } else {
#line 30
        tmp___3 = 0;
      }
#line 30
      ______r___2 = tmp___3;
#line 30
      ______f___1397.__annonCompField3.miss_hit[______r___2] = ______f___1397.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 30
      if (______r___2) {
#line 31
        err = (*(dch->dev.D.recv))(dch->dev.D.peer, skb);
#line 32
        ______r = ! (! err);
#line 32
        ______f___1396.__annonCompField3.miss_hit[______r] = ______f___1396.__annonCompField3.miss_hit[______r] + 1UL;
#line 32
        if (______r) {
#line 33
          consume_skb(skb);
        } else {

        }
      } else {
#line 35
        consume_skb(skb);
      }
    }
  } else {

  }
#line 38
  tmp___12 = test_and_clear_bit(31, & dch->Flags);
#line 38
  if (tmp___12) {
#line 38
    tmp___13 = 1;
  } else {
#line 38
    tmp___13 = 0;
  }
#line 38
  ______r___6 = tmp___13;
#line 38
  ______f___1401.__annonCompField3.miss_hit[______r___6] = ______f___1401.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 38
  if (______r___6) {
#line 39
    ______r___5 = ! (! dch->phfunc);
#line 39
    ______f___1400.__annonCompField3.miss_hit[______r___5] = ______f___1400.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 39
    if (______r___5) {
#line 40
      (*(dch->phfunc))(dch);
    } else {

    }
  } else {

  }
#line 42
  return;
}
}
#line 56
static void bchannel_bh(struct work_struct *ws ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1402  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    56, {{0UL, 0UL}}};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1403  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    54, {{0UL, 0UL}}};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1404  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"bchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    54, {{0UL, 0UL}}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1405  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_bh",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    51, {{0UL, 0UL}}};
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static void bchannel_bh(struct work_struct *ws ) 
{ 
  struct bchannel *bch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;
  int ______r___4 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 47
  __mptr = ws;
#line 47
  bch = (struct bchannel *)((char *)__mptr - (unsigned int )(& ((struct bchannel *)0)->workq));
#line 51
  tmp___7 = test_and_clear_bit(30, & bch->Flags);
#line 51
  if (tmp___7) {
#line 51
    tmp___8 = 1;
  } else {
#line 51
    tmp___8 = 0;
  }
#line 51
  ______r___4 = tmp___8;
#line 51
  ______f___1405.__annonCompField3.miss_hit[______r___4] = ______f___1405.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 51
  if (______r___4) {
#line 52
    while (1) {
#line 52
      skb = skb_dequeue(& bch->rqueue);
#line 52
      if (skb) {

      } else {
#line 52
        break;
      }
#line 53
      bch->rcount = bch->rcount - 1;
#line 54
      tmp___2 = __builtin_expect(! (! bch->ch.peer), 1);
#line 54
      ______r___3 = tmp___2;
#line 54
      ftrace_likely_update(& ______f___1404, ______r___3, 1);
#line 54
      if (______r___3) {
#line 54
        tmp___3 = 1;
      } else {
#line 54
        tmp___3 = 0;
      }
#line 54
      ______r___2 = tmp___3;
#line 54
      ______f___1403.__annonCompField3.miss_hit[______r___2] = ______f___1403.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 54
      if (______r___2) {
#line 55
        err = (*(bch->ch.recv))(bch->ch.peer, skb);
#line 56
        ______r = ! (! err);
#line 56
        ______f___1402.__annonCompField3.miss_hit[______r] = ______f___1402.__annonCompField3.miss_hit[______r] + 1UL;
#line 56
        if (______r) {
#line 57
          consume_skb(skb);
        } else {

        }
      } else {
#line 59
        consume_skb(skb);
      }
    }
  } else {

  }
#line 62
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct lock_class_key __key___5  ;
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) 
{ 
  atomic_long_t __constr_expr_0 ;

  {
#line 67
  test_and_set_bit(13, & ch->Flags);
#line 68
  ch->maxlen = maxlen;
#line 69
  ch->hw = (void *)0;
#line 70
  ch->rx_skb = (void *)0;
#line 71
  ch->tx_skb = (void *)0;
#line 72
  ch->tx_idx = 0;
#line 73
  ch->phfunc = phf;
#line 74
  skb_queue_head_init(& ch->squeue);
#line 75
  skb_queue_head_init(& ch->rqueue);
#line 76
  INIT_LIST_HEAD(& ch->dev.bchannels);
#line 77
  while (1) {
#line 77
    __constr_expr_0.counter = 0;
#line 77
    ch->workq.data = __constr_expr_0;
#line 77
    lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key___5, 0);
#line 77
    INIT_LIST_HEAD(& ch->workq.entry);
#line 77
    while (1) {
#line 77
      ch->workq.func = & dchannel_bh;
#line 77
      break;
    }
#line 77
    break;
  }
#line 78
  return (0);
}
}
#line 80
extern void *__crc_mISDN_initdchannel  __attribute__((__weak__)) ;
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_mISDN_initdchannel  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_initdchannel);
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_mISDN_initdchannel[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 80
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'i',      'n', 
        'i',      't',      'd',      'c', 
        'h',      'a',      'n',      'n', 
        'e',      'l',      '\000'};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_mISDN_initdchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_initdchannel), __kstrtab_mISDN_initdchannel};
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct lock_class_key __key___6  ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) 
{ 
  atomic_long_t __constr_expr_0 ;

  {
#line 85
  ch->Flags = 0;
#line 86
  ch->maxlen = maxlen;
#line 87
  ch->hw = (void *)0;
#line 88
  ch->rx_skb = (void *)0;
#line 89
  ch->tx_skb = (void *)0;
#line 90
  ch->tx_idx = 0;
#line 91
  skb_queue_head_init(& ch->rqueue);
#line 92
  ch->rcount = 0;
#line 93
  ch->next_skb = (void *)0;
#line 94
  while (1) {
#line 94
    __constr_expr_0.counter = 0;
#line 94
    ch->workq.data = __constr_expr_0;
#line 94
    lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key___6, 0);
#line 94
    INIT_LIST_HEAD(& ch->workq.entry);
#line 94
    while (1) {
#line 94
      ch->workq.func = & bchannel_bh;
#line 94
      break;
    }
#line 94
    break;
  }
#line 95
  return (0);
}
}
#line 97
extern void *__crc_mISDN_initbchannel  __attribute__((__weak__)) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_mISDN_initbchannel  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_initbchannel);
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_mISDN_initbchannel[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 97
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'i',      'n', 
        'i',      't',      'b',      'c', 
        'h',      'a',      'n',      'n', 
        'e',      'l',      '\000'};
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_mISDN_initbchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_initbchannel), __kstrtab_mISDN_initbchannel};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1406  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_freedchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    102, {{0UL, 0UL}}};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1407  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_freedchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    106, {{0UL, 0UL}}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int mISDN_freedchannel(struct dchannel *ch ) 
{ 
  int ______r ;
  int ______r___0 ;

  {
#line 102
  ______r = ! (! ch->tx_skb);
#line 102
  ______f___1406.__annonCompField3.miss_hit[______r] = ______f___1406.__annonCompField3.miss_hit[______r] + 1UL;
#line 102
  if (______r) {
#line 103
    consume_skb(ch->tx_skb);
#line 104
    ch->tx_skb = (void *)0;
  } else {

  }
#line 106
  ______r___0 = ! (! ch->rx_skb);
#line 106
  ______f___1407.__annonCompField3.miss_hit[______r___0] = ______f___1407.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 106
  if (______r___0) {
#line 107
    consume_skb(ch->rx_skb);
#line 108
    ch->rx_skb = (void *)0;
  } else {

  }
#line 110
  skb_queue_purge(& ch->squeue);
#line 111
  skb_queue_purge(& ch->rqueue);
#line 112
  flush_scheduled_work();
#line 113
  return (0);
}
}
#line 115
extern void *__crc_mISDN_freedchannel  __attribute__((__weak__)) ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_mISDN_freedchannel  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_freedchannel);
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_mISDN_freedchannel[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 115
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'f',      'r', 
        'e',      'e',      'd',      'c', 
        'h',      'a',      'n',      'n', 
        'e',      'l',      '\000'};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_mISDN_freedchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_freedchannel), __kstrtab_mISDN_freedchannel};
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1408  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_freebchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    120, {{0UL, 0UL}}};
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1409  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_freebchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    124, {{0UL, 0UL}}};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1410  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_freebchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    128, {{0UL, 0UL}}};
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int mISDN_freebchannel(struct bchannel *ch ) 
{ 
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 120
  ______r = ! (! ch->tx_skb);
#line 120
  ______f___1408.__annonCompField3.miss_hit[______r] = ______f___1408.__annonCompField3.miss_hit[______r] + 1UL;
#line 120
  if (______r) {
#line 121
    consume_skb(ch->tx_skb);
#line 122
    ch->tx_skb = (void *)0;
  } else {

  }
#line 124
  ______r___0 = ! (! ch->rx_skb);
#line 124
  ______f___1409.__annonCompField3.miss_hit[______r___0] = ______f___1409.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 124
  if (______r___0) {
#line 125
    consume_skb(ch->rx_skb);
#line 126
    ch->rx_skb = (void *)0;
  } else {

  }
#line 128
  ______r___1 = ! (! ch->next_skb);
#line 128
  ______f___1410.__annonCompField3.miss_hit[______r___1] = ______f___1410.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 128
  if (______r___1) {
#line 129
    consume_skb(ch->next_skb);
#line 130
    ch->next_skb = (void *)0;
  } else {

  }
#line 132
  skb_queue_purge(& ch->rqueue);
#line 133
  ch->rcount = 0;
#line 134
  flush_scheduled_work();
#line 135
  return (0);
}
}
#line 137
extern void *__crc_mISDN_freebchannel  __attribute__((__weak__)) ;
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_mISDN_freebchannel  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_mISDN_freebchannel);
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_mISDN_freebchannel[19]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 137
  {      'm',      'I',      'S',      'D', 
        'N',      '_',      'f',      'r', 
        'e',      'e',      'b',      'c', 
        'h',      'a',      'n',      'n', 
        'e',      'l',      '\000'};
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_mISDN_freebchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& mISDN_freebchannel), __kstrtab_mISDN_freebchannel};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
__inline static u_int get_sapi_tei(u_char *p ) 
{ 
  u_int sapi ;
  u_int tei ;

  {
#line 144
  sapi = (int )*p >> 2;
#line 145
  tei = (int )*(p + 1) >> 1;
#line 146
  return (sapi | (tei << 8));
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1411  __attribute__((__section__("_ftrace_branch")))  =    {"recv_Dchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    154, {{0UL, 0UL}}};
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void recv_Dchannel(struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;

  {
#line 154
  ______r = ! (! ((dch->rx_skb)->len < 2U));
#line 154
  ______f___1411.__annonCompField3.miss_hit[______r] = ______f___1411.__annonCompField3.miss_hit[______r] + 1UL;
#line 154
  if (______r) {
#line 155
    consume_skb(dch->rx_skb);
#line 156
    dch->rx_skb = (void *)0;
#line 157
    return;
  } else {

  }
#line 159
  hh = (struct mISDNhead *)(& (dch->rx_skb)->cb[0]);
#line 160
  hh->prim = 8194;
#line 161
  hh->id = get_sapi_tei((dch->rx_skb)->data);
#line 162
  skb_queue_tail(& dch->rqueue, dch->rx_skb);
#line 163
  dch->rx_skb = (void *)0;
#line 164
  while (1) {
#line 164
    test_and_set_bit(30, & dch->Flags);
#line 164
    schedule_work(& dch->workq);
#line 164
    break;
  }
#line 165
  return;
}
}
#line 166
extern void *__crc_recv_Dchannel  __attribute__((__weak__)) ;
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_recv_Dchannel  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_recv_Dchannel);
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_recv_Dchannel[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 166
  {      'r',      'e',      'c',      'v', 
        '_',      'D',      'c',      'h', 
        'a',      'n',      'n',      'e', 
        'l',      '\000'};
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_recv_Dchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& recv_Dchannel), __kstrtab_recv_Dchannel};
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1412  __attribute__((__section__("_ftrace_branch")))  =    {"recv_Echannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    173, {{0UL, 0UL}}};
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;

  {
#line 173
  ______r = ! (! ((ech->rx_skb)->len < 2U));
#line 173
  ______f___1412.__annonCompField3.miss_hit[______r] = ______f___1412.__annonCompField3.miss_hit[______r] + 1UL;
#line 173
  if (______r) {
#line 174
    consume_skb(ech->rx_skb);
#line 175
    ech->rx_skb = (void *)0;
#line 176
    return;
  } else {

  }
#line 178
  hh = (struct mISDNhead *)(& (ech->rx_skb)->cb[0]);
#line 179
  hh->prim = 12290;
#line 180
  hh->id = get_sapi_tei((ech->rx_skb)->data);
#line 181
  skb_queue_tail(& dch->rqueue, ech->rx_skb);
#line 182
  ech->rx_skb = (void *)0;
#line 183
  while (1) {
#line 183
    test_and_set_bit(30, & dch->Flags);
#line 183
    schedule_work(& dch->workq);
#line 183
    break;
  }
#line 184
  return;
}
}
#line 185
extern void *__crc_recv_Echannel  __attribute__((__weak__)) ;
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_recv_Echannel  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_recv_Echannel);
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_recv_Echannel[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 185
  {      'r',      'e',      'c',      'v', 
        '_',      'E',      'c',      'h', 
        'a',      'n',      'n',      'e', 
        'l',      '\000'};
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_recv_Echannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& recv_Echannel), __kstrtab_recv_Echannel};
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1413  __attribute__((__section__("_ftrace_branch")))  =    {"recv_Bchannel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    195, {{0UL, 0UL}}};
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void recv_Bchannel(struct bchannel *bch , unsigned int id ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;

  {
#line 192
  hh = (struct mISDNhead *)(& (bch->rx_skb)->cb[0]);
#line 193
  hh->prim = 8194;
#line 194
  hh->id = id;
#line 195
  ______r = ! (! (bch->rcount >= 64));
#line 195
  ______f___1413.__annonCompField3.miss_hit[______r] = ______f___1413.__annonCompField3.miss_hit[______r] + 1UL;
#line 195
  if (______r) {
#line 196
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 198
    skb_queue_purge(& bch->rqueue);
#line 199
    bch->rcount = 0;
#line 200
    return;
  } else {

  }
#line 202
  bch->rcount = bch->rcount + 1;
#line 203
  skb_queue_tail(& bch->rqueue, bch->rx_skb);
#line 204
  bch->rx_skb = (void *)0;
#line 205
  while (1) {
#line 205
    test_and_set_bit(30, & bch->Flags);
#line 205
    schedule_work(& bch->workq);
#line 205
    break;
  }
#line 206
  return;
}
}
#line 207
extern void *__crc_recv_Bchannel  __attribute__((__weak__)) ;
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_recv_Bchannel  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_recv_Bchannel);
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_recv_Bchannel[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 207
  {      'r',      'e',      'c',      'v', 
        '_',      'B',      'c',      'h', 
        'a',      'n',      'n',      'e', 
        'l',      '\000'};
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_recv_Bchannel  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& recv_Bchannel), __kstrtab_recv_Bchannel};
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) 
{ 


  {
#line 212
  skb_queue_tail(& dch->rqueue, skb);
#line 213
  while (1) {
#line 213
    test_and_set_bit(30, & dch->Flags);
#line 213
    schedule_work(& dch->workq);
#line 213
    break;
  }
#line 214
  return;
}
}
#line 215
extern void *__crc_recv_Dchannel_skb  __attribute__((__weak__)) ;
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_recv_Dchannel_skb  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_recv_Dchannel_skb);
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_recv_Dchannel_skb[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 215
  {      'r',      'e',      'c',      'v', 
        '_',      'D',      'c',      'h', 
        'a',      'n',      'n',      'e', 
        'l',      '_',      's',      'k', 
        'b',      '\000'};
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_recv_Dchannel_skb  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& recv_Dchannel_skb), __kstrtab_recv_Dchannel_skb};
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1414  __attribute__((__section__("_ftrace_branch")))  =    {"recv_Bchannel_skb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    220, {{0UL, 0UL}}};
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) 
{ 
  int ______r ;

  {
#line 220
  ______r = ! (! (bch->rcount >= 64));
#line 220
  ______f___1414.__annonCompField3.miss_hit[______r] = ______f___1414.__annonCompField3.miss_hit[______r] + 1UL;
#line 220
  if (______r) {
#line 221
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 223
    skb_queue_purge(& bch->rqueue);
#line 224
    bch->rcount = 0;
  } else {

  }
#line 226
  bch->rcount = bch->rcount + 1;
#line 227
  skb_queue_tail(& bch->rqueue, skb);
#line 228
  while (1) {
#line 228
    test_and_set_bit(30, & bch->Flags);
#line 228
    schedule_work(& bch->workq);
#line 228
    break;
  }
#line 229
  return;
}
}
#line 230
extern void *__crc_recv_Bchannel_skb  __attribute__((__weak__)) ;
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_recv_Bchannel_skb  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_recv_Bchannel_skb);
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_recv_Bchannel_skb[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 230
  {      'r',      'e',      'c',      'v', 
        '_',      'B',      'c',      'h', 
        'a',      'n',      'n',      'e', 
        'l',      '_',      's',      'k', 
        'b',      '\000'};
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_recv_Bchannel_skb  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& recv_Bchannel_skb), __kstrtab_recv_Bchannel_skb};
#line 239
static void confirm_Dsend(struct dchannel *dch ) ;
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1415  __attribute__((__section__("_ftrace_branch")))  =    {"confirm_Dsend",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    239, {{0UL, 0UL}}};
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static void confirm_Dsend(struct dchannel *dch ) 
{ 
  struct sk_buff *skb ;
  int ______r ;

  {
#line 237
  skb = _alloc_mISDN_skb(24578, ((struct mISDNhead *)(& (dch->tx_skb)->cb[0]))->id,
                         0, (void *)0, 32U);
#line 239
  ______r = ! (! (! skb));
#line 239
  ______f___1415.__annonCompField3.miss_hit[______r] = ______f___1415.__annonCompField3.miss_hit[______r] + 1UL;
#line 239
  if (______r) {
#line 240
    printk("<3>%s: no skb id %x\n", "confirm_Dsend", ((struct mISDNhead *)(& (dch->tx_skb)->cb[0]))->id);
#line 242
    return;
  } else {

  }
#line 244
  skb_queue_tail(& dch->rqueue, skb);
#line 245
  while (1) {
#line 245
    test_and_set_bit(30, & dch->Flags);
#line 245
    schedule_work(& dch->workq);
#line 245
    break;
  }
#line 246
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1416  __attribute__((__section__("_ftrace_branch")))  =    {"get_next_dframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    253, {{0UL, 0UL}}};
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int get_next_dframe(struct dchannel *dch ) 
{ 
  int ______r ;

  {
#line 251
  dch->tx_idx = 0;
#line 252
  dch->tx_skb = skb_dequeue(& dch->squeue);
#line 253
  ______r = ! (! dch->tx_skb);
#line 253
  ______f___1416.__annonCompField3.miss_hit[______r] = ______f___1416.__annonCompField3.miss_hit[______r] + 1UL;
#line 253
  if (______r) {
#line 254
    confirm_Dsend(dch);
#line 255
    return (1);
  } else {

  }
#line 257
  dch->tx_skb = (void *)0;
#line 258
  test_and_clear_bit(0, & dch->Flags);
#line 259
  return (0);
}
}
#line 261
extern void *__crc_get_next_dframe  __attribute__((__weak__)) ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_get_next_dframe  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_get_next_dframe);
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_get_next_dframe[16]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 261
  {      'g',      'e',      't',      '_', 
        'n',      'e',      'x',      't', 
        '_',      'd',      'f',      'r', 
        'a',      'm',      'e',      '\000'};
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_get_next_dframe  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& get_next_dframe), __kstrtab_get_next_dframe};
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1417  __attribute__((__section__("_ftrace_branch")))  =    {"confirm_Bsend",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    268, {{0UL, 0UL}}};
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1418  __attribute__((__section__("_ftrace_branch")))  =    {"confirm_Bsend",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    276, {{0UL, 0UL}}};
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void confirm_Bsend(struct bchannel *bch ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  int ______r___0 ;

  {
#line 268
  ______r = ! (! (bch->rcount >= 64));
#line 268
  ______f___1417.__annonCompField3.miss_hit[______r] = ______f___1417.__annonCompField3.miss_hit[______r] + 1UL;
#line 268
  if (______r) {
#line 269
    printk("<4>B-channel %p receive queue overflow, fushing!\n", bch);
#line 271
    skb_queue_purge(& bch->rqueue);
#line 272
    bch->rcount = 0;
  } else {

  }
#line 274
  skb = _alloc_mISDN_skb(24578, ((struct mISDNhead *)(& (bch->tx_skb)->cb[0]))->id,
                         0, (void *)0, 32U);
#line 276
  ______r___0 = ! (! (! skb));
#line 276
  ______f___1418.__annonCompField3.miss_hit[______r___0] = ______f___1418.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 276
  if (______r___0) {
#line 277
    printk("<3>%s: no skb id %x\n", "confirm_Bsend", ((struct mISDNhead *)(& (bch->tx_skb)->cb[0]))->id);
#line 279
    return;
  } else {

  }
#line 281
  bch->rcount = bch->rcount + 1;
#line 282
  skb_queue_tail(& bch->rqueue, skb);
#line 283
  while (1) {
#line 283
    test_and_set_bit(30, & bch->Flags);
#line 283
    schedule_work(& bch->workq);
#line 283
    break;
  }
#line 284
  return;
}
}
#line 285
extern void *__crc_confirm_Bsend  __attribute__((__weak__)) ;
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_confirm_Bsend  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_confirm_Bsend);
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_confirm_Bsend[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 285
  {      'c',      'o',      'n',      'f', 
        'i',      'r',      'm',      '_', 
        'B',      's',      'e',      'n', 
        'd',      '\000'};
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_confirm_Bsend  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& confirm_Bsend), __kstrtab_confirm_Bsend};
#line 296 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1419  __attribute__((__section__("_ftrace_branch")))  =    {"get_next_bframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    296, {{0UL, 0UL}}};
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1420  __attribute__((__section__("_ftrace_branch")))  =    {"get_next_bframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    293, {{0UL, 0UL}}};
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1421  __attribute__((__section__("_ftrace_branch")))  =    {"get_next_bframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    291, {{0UL, 0UL}}};
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int get_next_bframe(struct bchannel *bch ) 
{ 
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___13 ;
  int tmp___15 ;

  {
#line 290
  bch->tx_idx = 0;
#line 291
  tmp___13 = constant_test_bit(1, & bch->Flags);
#line 291
  if (tmp___13) {
#line 291
    tmp___15 = 1;
  } else {
#line 291
    tmp___15 = 0;
  }
#line 291
  ______r___1 = tmp___15;
#line 291
  ______f___1421.__annonCompField3.miss_hit[______r___1] = ______f___1421.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 291
  if (______r___1) {
#line 292
    bch->tx_skb = bch->next_skb;
#line 293
    ______r___0 = ! (! bch->tx_skb);
#line 293
    ______f___1420.__annonCompField3.miss_hit[______r___0] = ______f___1420.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 293
    if (______r___0) {
#line 294
      bch->next_skb = (void *)0;
#line 295
      test_and_clear_bit(1, & bch->Flags);
#line 296
      tmp___5 = constant_test_bit(12, & bch->Flags);
#line 296
      if (tmp___5) {
#line 296
        tmp___7 = 0;
      } else {
#line 296
        tmp___7 = 1;
      }
#line 296
      ______r = tmp___7;
#line 296
      ______f___1419.__annonCompField3.miss_hit[______r] = ______f___1419.__annonCompField3.miss_hit[______r] + 1UL;
#line 296
      if (______r) {
#line 297
        confirm_Bsend(bch);
      } else {

      }
#line 298
      return (1);
    } else {
#line 300
      test_and_clear_bit(1, & bch->Flags);
#line 301
      printk("<4>B TX_NEXT without skb\n");
    }
  } else {

  }
#line 304
  bch->tx_skb = (void *)0;
#line 305
  test_and_clear_bit(0, & bch->Flags);
#line 306
  return (0);
}
}
#line 308
extern void *__crc_get_next_bframe  __attribute__((__weak__)) ;
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_get_next_bframe  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_get_next_bframe);
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_get_next_bframe[16]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 308
  {      'g',      'e',      't',      '_', 
        'n',      'e',      'x',      't', 
        '_',      'b',      'f',      'r', 
        'a',      'm',      'e',      '\000'};
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_get_next_bframe  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& get_next_bframe), __kstrtab_get_next_bframe};
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1422  __attribute__((__section__("_ftrace_branch")))  =    {"queue_ch_frame",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    322, {{0UL, 0UL}}};
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1423  __attribute__((__section__("_ftrace_branch")))  =    {"queue_ch_frame",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    318, {{0UL, 0UL}}};
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1424  __attribute__((__section__("_ftrace_branch")))  =    {"queue_ch_frame",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    315, {{0UL, 0UL}}};
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 315
  ______r___1 = ! (! (! skb));
#line 315
  ______f___1424.__annonCompField3.miss_hit[______r___1] = ______f___1424.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 315
  if (______r___1) {
#line 316
    _queue_data(ch, pr, id, 0, (void *)0, 32U);
  } else {
#line 318
    ______r___0 = ! (! ch->peer);
#line 318
    ______f___1423.__annonCompField3.miss_hit[______r___0] = ______f___1423.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 318
    if (______r___0) {
#line 319
      hh = (struct mISDNhead *)(& skb->cb[0]);
#line 320
      hh->prim = pr;
#line 321
      hh->id = id;
#line 322
      tmp___3 = (*(ch->recv))(ch->peer, skb);
#line 322
      if (tmp___3) {
#line 322
        tmp___4 = 0;
      } else {
#line 322
        tmp___4 = 1;
      }
#line 322
      ______r = tmp___4;
#line 322
      ______f___1422.__annonCompField3.miss_hit[______r] = ______f___1422.__annonCompField3.miss_hit[______r] + 1UL;
#line 322
      if (______r) {
#line 323
        return;
      } else {

      }
    } else {

    }
#line 325
    consume_skb(skb);
  }
#line 327
  return;
}
}
#line 328
extern void *__crc_queue_ch_frame  __attribute__((__weak__)) ;
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_queue_ch_frame  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_queue_ch_frame);
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_queue_ch_frame[15]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 328
  {      'q',      'u',      'e',      'u', 
        'e',      '_',      'c',      'h', 
        '_',      'f',      'r',      'a', 
        'm',      'e',      '\000'};
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_queue_ch_frame  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& queue_ch_frame), __kstrtab_queue_ch_frame};
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1425  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    334, {{0UL, 0UL}}};
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1426  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    338, {{0UL, 0UL}}};
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1427  __attribute__((__section__("_ftrace_branch")))  =    {"dchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    344, {{0UL, 0UL}}};
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 334
  ______r = ! (! (skb->len <= 0U));
#line 334
  ______f___1425.__annonCompField3.miss_hit[______r] = ______f___1425.__annonCompField3.miss_hit[______r] + 1UL;
#line 334
  if (______r) {
#line 335
    printk("<4>%s: skb too small\n", "dchannel_senddata");
#line 336
    return (-22);
  } else {

  }
#line 338
  ______r___0 = ! (! (skb->len > (unsigned int )ch->maxlen));
#line 338
  ______f___1426.__annonCompField3.miss_hit[______r___0] = ______f___1426.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 338
  if (______r___0) {
#line 339
    printk("<4>%s: skb too large(%d/%d)\n", "dchannel_senddata", skb->len, ch->maxlen);
#line 341
    return (-22);
  } else {

  }
#line 344
  tmp___2 = test_and_set_bit(0, & ch->Flags);
#line 344
  if (tmp___2) {
#line 344
    tmp___3 = 1;
  } else {
#line 344
    tmp___3 = 0;
  }
#line 344
  ______r___1 = tmp___3;
#line 344
  ______f___1427.__annonCompField3.miss_hit[______r___1] = ______f___1427.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 344
  if (______r___1) {
#line 345
    skb_queue_tail(& ch->squeue, skb);
#line 346
    return (0);
  } else {
#line 349
    ch->tx_skb = skb;
#line 350
    ch->tx_idx = 0;
#line 351
    return (1);
  }
}
}
#line 354
extern void *__crc_dchannel_senddata  __attribute__((__weak__)) ;
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_dchannel_senddata  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_dchannel_senddata);
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_dchannel_senddata[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 354
  {      'd',      'c',      'h',      'a', 
        'n',      'n',      'e',      'l', 
        '_',      's',      'e',      'n', 
        'd',      'd',      'a',      't', 
        'a',      '\000'};
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_dchannel_senddata  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& dchannel_senddata), __kstrtab_dchannel_senddata};
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1428  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    361, {{0UL, 0UL}}};
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1429  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    365, {{0UL, 0UL}}};
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1430  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    372, {{0UL, 0UL}}};
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1431  __attribute__((__section__("_ftrace_branch")))  =    {"bchannel_senddata",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c",
    378, {{0UL, 0UL}}};
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 361
  ______r = ! (! (skb->len <= 0U));
#line 361
  ______f___1428.__annonCompField3.miss_hit[______r] = ______f___1428.__annonCompField3.miss_hit[______r] + 1UL;
#line 361
  if (______r) {
#line 362
    printk("<4>%s: skb too small\n", "bchannel_senddata");
#line 363
    return (-22);
  } else {

  }
#line 365
  ______r___0 = ! (! (skb->len > (unsigned int )ch->maxlen));
#line 365
  ______f___1429.__annonCompField3.miss_hit[______r___0] = ______f___1429.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 365
  if (______r___0) {
#line 366
    printk("<4>%s: skb too large(%d/%d)\n", "bchannel_senddata", skb->len, ch->maxlen);
#line 368
    return (-22);
  } else {

  }
#line 372
  ______r___1 = ! (! ch->next_skb);
#line 372
  ______f___1430.__annonCompField3.miss_hit[______r___1] = ______f___1430.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 372
  if (______r___1) {
#line 373
    printk("<4>%s: next_skb exist ERROR (skb->len=%d next_skb->len=%d)\n", "bchannel_senddata",
           skb->len, (ch->next_skb)->len);
#line 376
    return (-16);
  } else {

  }
#line 378
  tmp___2 = test_and_set_bit(0, & ch->Flags);
#line 378
  if (tmp___2) {
#line 378
    tmp___3 = 1;
  } else {
#line 378
    tmp___3 = 0;
  }
#line 378
  ______r___2 = tmp___3;
#line 378
  ______f___1431.__annonCompField3.miss_hit[______r___2] = ______f___1431.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 378
  if (______r___2) {
#line 379
    test_and_set_bit(1, & ch->Flags);
#line 380
    ch->next_skb = skb;
#line 381
    return (0);
  } else {
#line 384
    ch->tx_skb = skb;
#line 385
    ch->tx_idx = 0;
#line 386
    return (1);
  }
}
}
#line 389
extern void *__crc_bchannel_senddata  __attribute__((__weak__)) ;
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static unsigned long const   __kcrctab_bchannel_senddata  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_bchannel_senddata);
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static char const   __kstrtab_bchannel_senddata[18]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 389
  {      'b',      'c',      'h',      'a', 
        'n',      'n',      'e',      'l', 
        '_',      's',      'e',      'n', 
        'd',      'd',      'a',      't', 
        'a',      '\000'};
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/hwchannel.c"
static struct kernel_symbol  const  __ksymtab_bchannel_senddata  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& bchannel_senddata), __kstrtab_bchannel_senddata};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task  __attribute__((__section__(".data.percpu"))) ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (sizeof(per_cpu__current_task)) {
  case 1UL: 
#line 14
  __asm__  ("mov"
            "b "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 2UL: 
#line 14
  __asm__  ("mov"
            "w "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 4UL: 
#line 14
  __asm__  ("mov"
            "l "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 8UL: 
#line 14
  __asm__  ("mov"
            "q "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  default: 
#line 14
  __bad_percpu_size();
  }
#line 14
  return (ret__);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 34
__inline static long IS_ERR(void const   *ptr ) ;
#line 34 "include/linux/err.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___507  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"IS_ERR",
    "include/linux/err.h", 34, {{0UL, 0UL}}};
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  int ______r ;
  long tmp ;

  {
#line 34
  tmp = __builtin_expect(! (! ((unsigned long )ptr >= 0xfffffffffffff001UL)), 1);
#line 34
  ______r = tmp;
#line 34
  ftrace_likely_update(& ______f___507, ______r, 0);
#line 34
  return (______r);
}
}
#line 174 "include/linux/list.h"
__inline static int list_is_last(struct list_head  const  *list , struct list_head  const  *head ) 
{ 


  {
#line 177
  return ((unsigned long )list->next == (unsigned long )head);
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )head->next == (unsigned long )head);
}
}
#line 562 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 564
  return (! h->first);
}
}
#line 572
__inline static void __hlist_del___0(struct hlist_node *n ) ;
#line 572 "include/linux/list.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1432  __attribute__((__section__("_ftrace_branch")))  =    {"__hlist_del",
    "include/linux/list.h", 572, {{0UL, 0UL}}};
#line 567 "include/linux/list.h"
__inline static void __hlist_del___0(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;
  int ______r ;

  {
#line 569
  next = n->next;
#line 570
  pprev = n->pprev;
#line 571
  *pprev = next;
#line 572
  ______r = ! (! next);
#line 572
  ______f___1432.__annonCompField3.miss_hit[______r] = ______f___1432.__annonCompField3.miss_hit[______r] + 1UL;
#line 572
  if (______r) {
#line 573
    next->pprev = pprev;
  } else {

  }
#line 574
  return;
}
}
#line 595
__inline static void hlist_add_head___0(struct hlist_node *n , struct hlist_head *h ) ;
#line 595 "include/linux/list.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1433  __attribute__((__section__("_ftrace_branch")))  =    {"hlist_add_head",
    "include/linux/list.h", 595, {{0UL, 0UL}}};
#line 591 "include/linux/list.h"
__inline static void hlist_add_head___0(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;
  int ______r ;

  {
#line 593
  first = h->first;
#line 594
  n->next = first;
#line 595
  ______r = ! (! first);
#line 595
  ______f___1433.__annonCompField3.miss_hit[______r] = ______f___1433.__annonCompField3.miss_hit[______r] + 1UL;
#line 595
  if (______r) {
#line 596
    first->pprev = & n->next;
  } else {

  }
#line 597
  h->first = n;
#line 598
  n->pprev = & h->first;
#line 599
  return;
}
}
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
#line 86
  tmp___0 = variable_test_bit(flag, (unsigned long *)(& ti->flags));
#line 86
  return (tmp___0);
}
}
#line 109 "include/linux/spinlock.h"
extern void __rwlock_init(rwlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 137
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 435
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 437
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 440
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock , char const   *name , struct lock_class_key *key ) ;
#line 126
extern void mutex_lock_nested(struct mutex *lock , unsigned int subclass ) ;
#line 152
extern void mutex_unlock(struct mutex *lock ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 


  {
#line 75
  x->done = 0;
#line 76
  init_waitqueue_head(& x->wait);
#line 77
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 89
extern void complete(struct completion * ) ;
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1434  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1435  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1436  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___1436, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___1435.__annonCompField3.miss_hit[______r___2] = ______f___1435.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___1434.__annonCompField3.miss_hit[______r] = ______f___1434.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___1)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1437  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1438  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1439  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1440  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1441  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1442  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1443  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1444  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1445  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1446  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1447  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1448  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1449  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1450  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1451  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1452  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1453  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1454  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1455  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1456  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1457  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1458  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1459  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___1)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___1437.__annonCompField3.miss_hit[______r] = ______f___1437.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___1438.__annonCompField3.miss_hit[______r___0] = ______f___1438.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___1439.__annonCompField3.miss_hit[______r___1] = ______f___1439.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___1440.__annonCompField3.miss_hit[______r___2] = ______f___1440.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___1441.__annonCompField3.miss_hit[______r___3] = ______f___1441.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___1442.__annonCompField3.miss_hit[______r___4] = ______f___1442.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___1443.__annonCompField3.miss_hit[______r___5] = ______f___1443.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___1444.__annonCompField3.miss_hit[______r___6] = ______f___1444.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___1445.__annonCompField3.miss_hit[______r___7] = ______f___1445.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___1446.__annonCompField3.miss_hit[______r___8] = ______f___1446.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___1447.__annonCompField3.miss_hit[______r___9] = ______f___1447.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___1448.__annonCompField3.miss_hit[______r___10] = ______f___1448.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___1449.__annonCompField3.miss_hit[______r___11] = ______f___1449.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___1450.__annonCompField3.miss_hit[______r___12] = ______f___1450.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___1451.__annonCompField3.miss_hit[______r___13] = ______f___1451.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___1452.__annonCompField3.miss_hit[______r___14] = ______f___1452.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___1453.__annonCompField3.miss_hit[______r___15] = ______f___1453.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___1454.__annonCompField3.miss_hit[______r___16] = ______f___1454.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___1455.__annonCompField3.miss_hit[______r___17] = ______f___1455.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___1456.__annonCompField3.miss_hit[______r___18] = ______f___1456.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___1457.__annonCompField3.miss_hit[______r___19] = ______f___1457.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___1458.__annonCompField3.miss_hit[______r___20] = ______f___1458.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___1459.__annonCompField3.miss_hit[______r___21] = ______f___1459.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___1)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1460  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___1)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___1(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___1460.__annonCompField3.miss_hit[______r] = ______f___1460.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___1)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___1((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___1)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1461  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1462  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1463  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___1)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___1461.__annonCompField3.miss_hit[______r] = ______f___1461.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___1(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___1463.__annonCompField3.miss_hit[______r___1] = ______f___1463.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___1(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___1462.__annonCompField3.miss_hit[______r___0] = ______f___1462.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___1((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___1(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 451 "include/linux/skbuff.h"
extern struct sk_buff *skb_copy(struct sk_buff  const  *skb , gfp_t priority ) ;
#line 534 "include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head  const  *list ) 
{ 


  {
#line 536
  return ((unsigned long )list->next == (unsigned long )((struct sk_buff *)list));
}
}
#line 815 "include/linux/skbuff.h"
static struct lock_class_key __key___7  ;
#line 813 "include/linux/skbuff.h"
__inline static void skb_queue_head_init___0(struct sk_buff_head *list ) 
{ 


  {
#line 815
  while (1) {
#line 815
    __spin_lock_init(& list->lock, "&list->lock", & __key___7);
#line 815
    break;
  }
#line 816
  __skb_queue_head_init(list);
#line 817
  return;
}
}
#line 166 "include/linux/signal.h"
__inline static void sigfillset(sigset_t *set ) 
{ 


  {
#line 168
  switch (64 / 64) {
  default: 
#line 170
  memset(set, -1, sizeof(sigset_t ));
#line 171
  break;
  case 2: 
#line 172
  set->sig[1] = -1;
  case 1: 
#line 173
  set->sig[0] = -1;
#line 174
  break;
  }
#line 176
  return;
}
}
#line 342 "include/linux/sched.h"
extern void schedule(void) ;
#line 1875
extern int wake_up_process(struct task_struct *tsk ) ;
#line 2161 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2163
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2163
  return (tmp);
}
}
#line 2189
__inline static int signal_pending(struct task_struct *p ) ;
#line 2189 "include/linux/sched.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1099  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"signal_pending",
    "include/linux/sched.h", 2189, {{0UL, 0UL}}};
#line 2187 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
#line 2189
  tmp___2 = test_tsk_thread_flag(p, 2);
#line 2189
  if (tmp___2) {
#line 2189
    tmp___3 = 1;
  } else {
#line 2189
    tmp___3 = 0;
  }
#line 2189
  tmp___4 = __builtin_expect(tmp___3, 1);
#line 2189
  ______r = tmp___4;
#line 2189
  ftrace_likely_update(& ______f___1099, ______r, 0);
#line 2189
  return (______r);
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 28
extern void unlock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 354 "include/net/sock.h"
__inline static void __sk_del_node___0(struct sock *sk ) 
{ 


  {
#line 356
  __hlist_del___0(& sk->__sk_common.__annonCompField29.skc_node);
#line 357
  return;
}
}
#line 361
__inline static int __sk_del_node_init___0(struct sock *sk ) ;
#line 361 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1464  __attribute__((__section__("_ftrace_branch")))  =    {"__sk_del_node_init",
    "include/net/sock.h", 361, {{0UL, 0UL}}};
#line 359 "include/net/sock.h"
__inline static int __sk_del_node_init___0(struct sock *sk ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 361
  tmp___2 = sk_hashed(sk);
#line 361
  if (tmp___2) {
#line 361
    tmp___3 = 1;
  } else {
#line 361
    tmp___3 = 0;
  }
#line 361
  ______r = tmp___3;
#line 361
  ______f___1464.__annonCompField3.miss_hit[______r] = ______f___1464.__annonCompField3.miss_hit[______r] + 1UL;
#line 361
  if (______r) {
#line 362
    __sk_del_node___0(sk);
#line 363
    sk_node_init(& sk->__sk_common.__annonCompField29.skc_node);
#line 364
    return (1);
  } else {

  }
#line 366
  return (0);
}
}
#line 394
__inline static int sk_del_node_init___0(struct sock *sk ) ;
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1465  __attribute__((__section__("_ftrace_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1466  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 394 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1467  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 394, {{0UL, 0UL}}};
#line 392 "include/net/sock.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1468  __attribute__((__section__("_ftrace_branch")))  =    {"sk_del_node_init",
    "include/net/sock.h", 392, {{0UL, 0UL}}};
#line 388 "include/net/sock.h"
__inline static int sk_del_node_init___0(struct sock *sk ) 
{ 
  int rc ;
  int tmp ;
  int __ret_warn_on ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int ______r___3 ;
  long tmp___5 ;
  int ______r___4 ;

  {
#line 390
  tmp = __sk_del_node_init___0(sk);
#line 390
  rc = tmp;
#line 392
  ______r___4 = ! (! rc);
#line 392
  ______f___1468.__annonCompField3.miss_hit[______r___4] = ______f___1468.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 392
  if (______r___4) {
#line 394
    __ret_warn_on = ! (! (sk->__sk_common.skc_refcnt.counter == (int volatile   )1));
#line 394
    tmp___3 = __builtin_expect(! (! __ret_warn_on), 1);
#line 394
    ______r___2 = tmp___3;
#line 394
    ftrace_likely_update(& ______f___1466, ______r___2, 0);
#line 394
    if (______r___2) {
#line 394
      tmp___4 = 1;
    } else {
#line 394
      tmp___4 = 0;
    }
#line 394
    ______r___1 = tmp___4;
#line 394
    ______f___1465.__annonCompField3.miss_hit[______r___1] = ______f___1465.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 394
    if (______r___1) {
#line 394
      warn_slowpath_null("include/net/sock.h", 394);
    } else {

    }
#line 394
    tmp___5 = __builtin_expect(! (! __ret_warn_on), 1);
#line 394
    ______r___3 = tmp___5;
#line 394
    ftrace_likely_update(& ______f___1467, ______r___3, 0);
#line 395
    __sock_put(sk);
  } else {

  }
#line 397
  return (rc);
}
}
#line 421 "include/net/sock.h"
__inline static void __sk_add_node___0(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 423
  hlist_add_head___0(& sk->__sk_common.__annonCompField29.skc_node, list);
#line 424
  return;
}
}
#line 426 "include/net/sock.h"
__inline static void sk_add_node___0(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 428
  sock_hold(sk);
#line 429
  __sk_add_node___0(sk, list);
#line 430
  return;
}
}
#line 571 "include/linux/mISDNif.h"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *( /* format attribute */  kthread_create)(int (*threadfn)(void *data ) ,
                                                                     void *data ,
                                                                     char const   *namefmt 
                                                                     , ...) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int create_teimanager(struct mISDNdevice *dev ) ;
#line 56
void delete_teimanager(struct mISDNchannel *ch ) ;
#line 62
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 63
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 22 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static u_int *debug___2  ;
#line 29
__inline static void _queue_message(struct mISDNstack *st , struct sk_buff *skb ) ;
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1469  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_message",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    29, {{0UL, 0UL}}};
#line 33 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1470  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_message",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    33, {{0UL, 0UL}}};
#line 33 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1471  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"_queue_message",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    33, {{0UL, 0UL}}};
#line 24 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
__inline static void _queue_message(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___26 ;
  int tmp___28 ;
  long tmp___29 ;
  int tmp___30 ;

  {
#line 27
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 29
  ______r = ! (! (*debug___2 & 64U));
#line 29
  ______f___1469.__annonCompField3.miss_hit[______r] = ______f___1469.__annonCompField3.miss_hit[______r] + 1UL;
#line 29
  if (______r) {
#line 30
    printk("<7>%s prim(%x) id(%x) %p\n", "_queue_message", hh->prim, hh->id, skb);
  } else {

  }
#line 32
  skb_queue_tail(& st->msgq, skb);
#line 33
  tmp___26 = constant_test_bit(16, & st->status);
#line 33
  if (tmp___26) {
#line 33
    tmp___28 = 0;
  } else {
#line 33
    tmp___28 = 1;
  }
#line 33
  tmp___29 = __builtin_expect(tmp___28, 1);
#line 33
  ______r___3 = tmp___29;
#line 33
  ftrace_likely_update(& ______f___1471, ______r___3, 1);
#line 33
  if (______r___3) {
#line 33
    tmp___30 = 1;
  } else {
#line 33
    tmp___30 = 0;
  }
#line 33
  ______r___2 = tmp___30;
#line 33
  ______f___1470.__annonCompField3.miss_hit[______r___2] = ______f___1470.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 33
  if (______r___2) {
#line 34
    test_and_set_bit(0, & st->status);
#line 35
    __wake_up(& st->workq, 1, 1, (void *)0);
  } else {

  }
#line 37
  return;
}
}
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static int mISDN_queue_message(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
#line 42
  _queue_message(ch->st, skb);
#line 43
  return (0);
}
}
#line 53
static struct mISDNchannel *get_channel4id(struct mISDNstack *st , u_int id ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1472  __attribute__((__section__("_ftrace_branch")))  =    {"get_channel4id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    53, {{0UL, 0UL}}};
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct mISDNchannel *get_channel4id(struct mISDNstack *st , u_int id ) 
{ 
  struct mISDNchannel *ch ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;

  {
#line 51
  mutex_lock_nested(& st->lmutex, 0);
#line 52
  __mptr = st->layer2.next;
#line 52
  ch = (struct mISDNchannel *)((char *)__mptr - (unsigned int )(& ((struct mISDNchannel *)0)->list));
#line 52
  while (1) {
#line 52
    __builtin_prefetch(ch->list.next);
#line 52
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {

    } else {
#line 52
      break;
    }
#line 53
    ______r = ! (! (id == ch->nr));
#line 53
    ______f___1472.__annonCompField3.miss_hit[______r] = ______f___1472.__annonCompField3.miss_hit[______r] + 1UL;
#line 53
    if (______r) {
#line 54
      goto unlock;
    } else {

    }
#line 52
    __mptr___0 = ch->list.next;
#line 52
    ch = (struct mISDNchannel *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
  }
#line 56
  ch = (void *)0;
  unlock: 
#line 58
  mutex_unlock(& st->lmutex);
#line 59
  return (ch);
}
}
#line 71
static void send_socklist(struct mISDN_sock_list *sl , struct sk_buff *skb ) ;
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1473  __attribute__((__section__("_ftrace_branch")))  =    {"send_socklist",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    71, {{0UL, 0UL}}};
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1474  __attribute__((__section__("_ftrace_branch")))  =    {"send_socklist",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    73, {{0UL, 0UL}}};
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1475  __attribute__((__section__("_ftrace_branch")))  =    {"send_socklist",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    75, {{0UL, 0UL}}};
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1476  __attribute__((__section__("_ftrace_branch")))  =    {"send_socklist",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    79, {{0UL, 0UL}}};
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1477  __attribute__((__section__("_ftrace_branch")))  =    {"send_socklist",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    83, {{0UL, 0UL}}};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static void send_socklist(struct mISDN_sock_list *sl , struct sk_buff *skb ) 
{ 
  struct hlist_node *node ;
  struct sock *sk ;
  struct sk_buff *cskb ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  int ______r___3 ;

  {
#line 67
  cskb = (void *)0;
#line 69
  _read_lock(& sl->lock);
#line 70
  node = sl->head.first;
#line 70
  while (1) {
#line 70
    if (node) {
#line 70
      __builtin_prefetch(node->next);
#line 70
      __mptr = node;
#line 70
      sk = (struct sock *)((char *)__mptr - (unsigned int )(& ((struct sock *)0)->__sk_common.__annonCompField29.skc_node));
    } else {
#line 70
      break;
    }
#line 71
    ______r = ! (! ((int volatile   )sk->__sk_common.skc_state != (int volatile   )2));
#line 71
    ______f___1473.__annonCompField3.miss_hit[______r] = ______f___1473.__annonCompField3.miss_hit[______r] + 1UL;
#line 71
    if (______r) {
#line 72
      goto __Cont;
    } else {

    }
#line 73
    ______r___0 = ! (! (! cskb));
#line 73
    ______f___1474.__annonCompField3.miss_hit[______r___0] = ______f___1474.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 73
    if (______r___0) {
#line 74
      cskb = skb_copy(skb, (16U | 64U) | 128U);
    } else {

    }
#line 75
    ______r___1 = ! (! (! cskb));
#line 75
    ______f___1475.__annonCompField3.miss_hit[______r___1] = ______f___1475.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 75
    if (______r___1) {
#line 76
      printk("<4>%s no skb\n", "send_socklist");
#line 77
      break;
    } else {

    }
#line 79
    tmp___3 = sock_queue_rcv_skb(sk, cskb);
#line 79
    if (tmp___3) {
#line 79
      tmp___4 = 0;
    } else {
#line 79
      tmp___4 = 1;
    }
#line 79
    ______r___2 = tmp___4;
#line 79
    ______f___1476.__annonCompField3.miss_hit[______r___2] = ______f___1476.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 79
    if (______r___2) {
#line 80
      cskb = (void *)0;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 70
    node = node->next;
  }
#line 82
  _read_unlock(& sl->lock);
#line 83
  ______r___3 = ! (! cskb);
#line 83
  ______f___1477.__annonCompField3.miss_hit[______r___3] = ______f___1477.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 83
  if (______r___3) {
#line 84
    consume_skb(cskb);
  } else {

  }
#line 85
  return;
}
}
#line 95
static void send_layer2(struct mISDNstack *st , struct sk_buff *skb ) ;
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1478  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    95, {{0UL, 0UL}}};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1479  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    100, {{0UL, 0UL}}};
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1480  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    109, {{0UL, 0UL}}};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1481  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    108, {{0UL, 0UL}}};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1482  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    106, {{0UL, 0UL}}};
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1483  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    127, {{0UL, 0UL}}};
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1484  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    125, {{0UL, 0UL}}};
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1485  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    135, {{0UL, 0UL}}};
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1486  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    133, {{0UL, 0UL}}};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1487  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    98, {{0UL, 0UL}}};
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1488  __attribute__((__section__("_ftrace_branch")))  =    {"send_layer2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    142, {{0UL, 0UL}}};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static void send_layer2(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct sk_buff *cskb ;
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int ret ;
  int ______r ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r___0 ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;

  {
#line 91
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 95
  ______r = ! (! (! st));
#line 95
  ______f___1478.__annonCompField3.miss_hit[______r] = ______f___1478.__annonCompField3.miss_hit[______r] + 1UL;
#line 95
  if (______r) {
#line 96
    return;
  } else {

  }
#line 97
  mutex_lock_nested(& st->lmutex, 0);
#line 98
  ______r___8 = ! (! ((hh->id & 65535U) == 65535U));
#line 98
  ______f___1487.__annonCompField3.miss_hit[______r___8] = ______f___1487.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 98
  if (______r___8) {
#line 99
    __mptr = st->layer2.next;
#line 99
    ch = (struct mISDNchannel *)((char *)__mptr - (unsigned int )(& ((struct mISDNchannel *)0)->list));
#line 99
    while (1) {
#line 99
      __builtin_prefetch(ch->list.next);
#line 99
      if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {

      } else {
#line 99
        break;
      }
#line 100
      tmp___2 = list_is_last(& ch->list, & st->layer2);
#line 100
      if (tmp___2) {
#line 100
        tmp___3 = 1;
      } else {
#line 100
        tmp___3 = 0;
      }
#line 100
      ______r___0 = tmp___3;
#line 100
      ______f___1479.__annonCompField3.miss_hit[______r___0] = ______f___1479.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 100
      if (______r___0) {
#line 101
        cskb = skb;
#line 102
        skb = (void *)0;
      } else {
#line 104
        cskb = skb_copy(skb, (16U | 64U) | 128U);
      }
#line 106
      ______r___3 = ! (! cskb);
#line 106
      ______f___1482.__annonCompField3.miss_hit[______r___3] = ______f___1482.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 106
      if (______r___3) {
#line 107
        ret = (*(ch->send))(ch, cskb);
#line 108
        ______r___2 = ! (! ret);
#line 108
        ______f___1481.__annonCompField3.miss_hit[______r___2] = ______f___1481.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 108
        if (______r___2) {
#line 109
          ______r___1 = ! (! (*debug___2 & 16U));
#line 109
          ______f___1480.__annonCompField3.miss_hit[______r___1] = ______f___1480.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 109
          if (______r___1) {
#line 110
            printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr,
                   hh->prim, ch->addr, ret);
          } else {

          }
#line 115
          consume_skb(cskb);
        } else {

        }
      } else {
#line 118
        printk("<4>%s ch%d addr %x no mem\n", "send_layer2", ch->nr, ch->addr);
#line 120
        goto out;
      }
#line 99
      __mptr___0 = ch->list.next;
#line 99
      ch = (struct mISDNchannel *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
    }
  } else {
#line 124
    __mptr___1 = st->layer2.next;
#line 124
    ch = (struct mISDNchannel *)((char *)__mptr___1 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
#line 124
    while (1) {
#line 124
      __builtin_prefetch(ch->list.next);
#line 124
      if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {

      } else {
#line 124
        break;
      }
#line 125
      ______r___5 = ! (! ((hh->id & 65535U) == ch->addr));
#line 125
      ______f___1484.__annonCompField3.miss_hit[______r___5] = ______f___1484.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 125
      if (______r___5) {
#line 126
        ret = (*(ch->send))(ch, skb);
#line 127
        ______r___4 = ! (! (! ret));
#line 127
        ______f___1483.__annonCompField3.miss_hit[______r___4] = ______f___1483.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 127
        if (______r___4) {
#line 128
          skb = (void *)0;
        } else {

        }
#line 129
        goto out;
      } else {

      }
#line 124
      __mptr___2 = ch->list.next;
#line 124
      ch = (struct mISDNchannel *)((char *)__mptr___2 - (unsigned int )(& ((struct mISDNchannel *)0)->list));
    }
#line 132
    ret = (*(((st->dev)->teimgr)->ctrl))((st->dev)->teimgr, 1024, skb);
#line 133
    ______r___7 = ! (! (! ret));
#line 133
    ______f___1486.__annonCompField3.miss_hit[______r___7] = ______f___1486.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 133
    if (______r___7) {
#line 134
      skb = (void *)0;
    } else {
#line 135
      ______r___6 = ! (! (*debug___2 & 16U));
#line 135
      ______f___1485.__annonCompField3.miss_hit[______r___6] = ______f___1485.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 135
      if (______r___6) {
#line 136
        printk("<7>%s ch%d mgr prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr,
               hh->prim, ch->addr, ret);
      } else {

      }
    }
  }
  out: 
#line 141
  mutex_unlock(& st->lmutex);
#line 142
  ______r___9 = ! (! skb);
#line 142
  ______f___1488.__annonCompField3.miss_hit[______r___9] = ______f___1488.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 142
  if (______r___9) {
#line 143
    consume_skb(skb);
  } else {

  }
#line 144
  return;
}
}
#line 154
__inline static int send_msg_to_layer(struct mISDNstack *st , struct sk_buff *skb ) ;
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1489  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    154, {{0UL, 0UL}}};
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1490  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    158, {{0UL, 0UL}}};
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1491  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    164, {{0UL, 0UL}}};
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1492  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    170, {{0UL, 0UL}}};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1493  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    178, {{0UL, 0UL}}};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1494  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    178, {{0UL, 0UL}}};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1495  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    178, {{0UL, 0UL}}};
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1496  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    180, {{0UL, 0UL}}};
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1497  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    177, {{0UL, 0UL}}};
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1498  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    168, {{0UL, 0UL}}};
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1499  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    163, {{0UL, 0UL}}};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1500  __attribute__((__section__("_ftrace_branch")))  =    {"send_msg_to_layer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    157, {{0UL, 0UL}}};
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
__inline static int send_msg_to_layer(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int lm ;
  int ______r ;
  int ______r___0 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___1 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  int ______r___2 ;
  int __ret_warn_on ;
  int ______r___5 ;
  int ______r___6 ;
  long tmp___17 ;
  int tmp___18 ;
  int ______r___7 ;
  long tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  int ______r___8 ;
  char const   *tmp___22 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;

  {
#line 149
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 153
  lm = hh->prim & 255U;
#line 154
  ______r = ! (! (*debug___2 & 64U));
#line 154
  ______f___1489.__annonCompField3.miss_hit[______r] = ______f___1489.__annonCompField3.miss_hit[______r] + 1UL;
#line 154
  if (______r) {
#line 155
    printk("<7>%s prim(%x) id(%x) %p\n", "send_msg_to_layer", hh->prim, hh->id, skb);
  } else {

  }
#line 157
  ______r___12 = ! (! (lm == 1));
#line 157
  ______f___1500.__annonCompField3.miss_hit[______r___12] = ______f___1500.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 157
  if (______r___12) {
#line 158
    tmp___3 = hlist_empty(& st->l1sock.head);
#line 158
    if (tmp___3) {
#line 158
      tmp___4 = 0;
    } else {
#line 158
      tmp___4 = 1;
    }
#line 158
    ______r___0 = tmp___4;
#line 158
    ______f___1490.__annonCompField3.miss_hit[______r___0] = ______f___1490.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 158
    if (______r___0) {
#line 159
      __net_timestamp(skb);
#line 160
      send_socklist(& st->l1sock, skb);
    } else {

    }
#line 162
    tmp___5 = (*((st->layer1)->send))(st->layer1, skb);
#line 162
    return (tmp___5);
  } else {
#line 163
    ______r___11 = ! (! (lm == 2));
#line 163
    ______f___1499.__annonCompField3.miss_hit[______r___11] = ______f___1499.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 163
    if (______r___11) {
#line 164
      tmp___10 = hlist_empty(& st->l1sock.head);
#line 164
      if (tmp___10) {
#line 164
        tmp___11 = 0;
      } else {
#line 164
        tmp___11 = 1;
      }
#line 164
      ______r___1 = tmp___11;
#line 164
      ______f___1491.__annonCompField3.miss_hit[______r___1] = ______f___1491.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 164
      if (______r___1) {
#line 165
        send_socklist(& st->l1sock, skb);
      } else {

      }
#line 166
      send_layer2(st, skb);
#line 167
      return (0);
    } else {
#line 168
      ______r___10 = ! (! (lm == 4));
#line 168
      ______f___1498.__annonCompField3.miss_hit[______r___10] = ______f___1498.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
      if (______r___10) {
#line 169
        ch = get_channel4id(st, hh->id);
#line 170
        ______r___2 = ! (! ch);
#line 170
        ______f___1492.__annonCompField3.miss_hit[______r___2] = ______f___1492.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 170
        if (______r___2) {
#line 171
          tmp___12 = (*(ch->send))(ch, skb);
#line 171
          return (tmp___12);
        } else {
#line 173
          tmp___13 = dev_name(& (st->dev)->dev);
#line 173
          printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer",
                 tmp___13, hh->prim, hh->id);
        }
      } else {
#line 177
        ______r___9 = ! (! (lm == 8));
#line 177
        ______f___1497.__annonCompField3.miss_hit[______r___9] = ______f___1497.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 177
        if (______r___9) {
#line 178
          __ret_warn_on = ! (! (lm == 8));
#line 178
          tmp___17 = __builtin_expect(! (! __ret_warn_on), 1);
#line 178
          ______r___6 = tmp___17;
#line 178
          ftrace_likely_update(& ______f___1494, ______r___6, 0);
#line 178
          if (______r___6) {
#line 178
            tmp___18 = 1;
          } else {
#line 178
            tmp___18 = 0;
          }
#line 178
          ______r___5 = tmp___18;
#line 178
          ______f___1493.__annonCompField3.miss_hit[______r___5] = ______f___1493.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 178
          if (______r___5) {
#line 178
            warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
                               178);
          } else {

          }
#line 178
          tmp___19 = __builtin_expect(! (! __ret_warn_on), 1);
#line 178
          ______r___7 = tmp___19;
#line 178
          ftrace_likely_update(& ______f___1495, ______r___7, 0);
#line 179
          ch = get_channel4id(st, hh->id);
#line 180
          ______r___8 = ! (! ch);
#line 180
          ______f___1496.__annonCompField3.miss_hit[______r___8] = ______f___1496.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 180
          if (______r___8) {
#line 181
            tmp___20 = (*(ch->send))(ch, skb);
#line 181
            return (tmp___20);
          } else {
#line 183
            tmp___21 = dev_name(& (st->dev)->dev);
#line 183
            printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer",
                   tmp___21, hh->prim, hh->id);
          }
        } else {
#line 189
          tmp___22 = dev_name(& (st->dev)->dev);
#line 189
          printk("<4>%s: dev(%s) prim %x not delivered\n", "send_msg_to_layer", tmp___22,
                 hh->prim);
        }
      }
    }
  }
#line 192
  return (-3);
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static void do_clear_stack(struct mISDNstack *st ) 
{ 


  {
#line 198
  return;
}
}
#line 213
static int mISDNStackd(void *data ) ;
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1501  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    213, {{0UL, 0UL}}};
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1502  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    217, {{0UL, 0UL}}};
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1503  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    225, {{0UL, 0UL}}};
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1504  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    225, {{0UL, 0UL}}};
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1505  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    237, {{0UL, 0UL}}};
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1506  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    232, {{0UL, 0UL}}};
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1507  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    247, {{0UL, 0UL}}};
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1508  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    246, {{0UL, 0UL}}};
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1509  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    246, {{0UL, 0UL}}};
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1510  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    258, {{0UL, 0UL}}};
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1511  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    258, {{0UL, 0UL}}};
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1512  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    266, {{0UL, 0UL}}};
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1513  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    276, {{0UL, 0UL}}};
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1514  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    273, {{0UL, 0UL}}};
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1515  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    280, {{0UL, 0UL}}};
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1516  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    282, {{0UL, 0UL}}};
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1517  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    291, {{0UL, 0UL}}};
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1518  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    291, {{0UL, 0UL}}};
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1519  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    291, {{0UL, 0UL}}};
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1520  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    292, {{0UL, 0UL}}};
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1521  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    299, {{0UL, 0UL}}};
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1522  __attribute__((__section__("_ftrace_branch")))  =    {"mISDNStackd",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    326, {{0UL, 0UL}}};
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static int mISDNStackd(void *data ) 
{ 
  struct mISDNstack *st ;
  int err ;
  struct task_struct *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  int ______r___0 ;
  struct sk_buff *skb ;
  int ______r___3 ;
  int ______r___4 ;
  int tmp___25 ;
  int tmp___27 ;
  long tmp___28 ;
  int tmp___29 ;
  int ______r___5 ;
  int ______r___6 ;
  char const   *tmp___30 ;
  int ______r___7 ;
  int ______r___10 ;
  int ______r___11 ;
  long tmp___34 ;
  int tmp___35 ;
  int ______r___14 ;
  int ______r___15 ;
  int tmp___60 ;
  int tmp___62 ;
  long tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___16 ;
  int tmp___72 ;
  int tmp___74 ;
  int ______r___17 ;
  int tmp___79 ;
  int tmp___80 ;
  int ______r___18 ;
  int tmp___84 ;
  int tmp___85 ;
  int ______r___19 ;
  int tmp___91 ;
  int tmp___93 ;
  int ______r___20 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___94 ;
  int ______r___21 ;
  int ______r___22 ;
  struct task_struct *tmp___101 ;
  int tmp___102 ;
  int tmp___103 ;
  int ______r___23 ;
  char const   *tmp___104 ;
  int ______r___24 ;
  int ______r___25 ;
  int tmp___110 ;
  int tmp___112 ;
  int ______r___26 ;

  {
#line 203
  st = data;
#line 204
  err = 0;
#line 207
  lock_kernel();
#line 209
  tmp = get_current();
#line 209
  sigfillset(& tmp->blocked);
#line 211
  unlock_kernel();
#line 213
  ______r = ! (! (*debug___2 & 32U));
#line 213
  ______f___1501.__annonCompField3.miss_hit[______r] = ______f___1501.__annonCompField3.miss_hit[______r] + 1UL;
#line 213
  if (______r) {
#line 214
    tmp___0 = dev_name(& (st->dev)->dev);
#line 214
    printk("<7>mISDNStackd %s started\n", tmp___0);
  } else {

  }
#line 217
  ______r___0 = ! (! ((unsigned long )st->notify != (unsigned long )((void *)0)));
#line 217
  ______f___1502.__annonCompField3.miss_hit[______r___0] = ______f___1502.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 217
  if (______r___0) {
#line 218
    complete(st->notify);
#line 219
    st->notify = (void *)0;
  } else {

  }
#line 222
  while (1) {
#line 225
    tmp___25 = constant_test_bit(16, & st->status);
#line 225
    if (tmp___25) {
#line 225
      tmp___27 = 1;
    } else {
#line 225
      tmp___27 = 0;
    }
#line 225
    tmp___28 = __builtin_expect(tmp___27, 1);
#line 225
    ______r___4 = tmp___28;
#line 225
    ftrace_likely_update(& ______f___1504, ______r___4, 0);
#line 225
    if (______r___4) {
#line 225
      tmp___29 = 1;
    } else {
#line 225
      tmp___29 = 0;
    }
#line 225
    ______r___3 = tmp___29;
#line 225
    ______f___1503.__annonCompField3.miss_hit[______r___3] = ______f___1503.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 225
    if (______r___3) {
#line 226
      test_and_clear_bit(0, & st->status);
#line 227
      test_and_clear_bit(30, & st->status);
    } else {
#line 229
      test_and_set_bit(30, & st->status);
    }
#line 230
    while (1) {
#line 230
      tmp___65 = constant_test_bit(0, & st->status);
#line 230
      if (tmp___65) {

      } else {
#line 230
        break;
      }
#line 231
      skb = skb_dequeue(& st->msgq);
#line 232
      ______r___6 = ! (! (! skb));
#line 232
      ______f___1506.__annonCompField3.miss_hit[______r___6] = ______f___1506.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 232
      if (______r___6) {
#line 233
        test_and_clear_bit(0, & st->status);
#line 236
        skb = skb_dequeue(& st->msgq);
#line 237
        ______r___5 = ! (! (! skb));
#line 237
        ______f___1505.__annonCompField3.miss_hit[______r___5] = ______f___1505.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 237
        if (______r___5) {
#line 238
          continue;
        } else {

        }
#line 239
        test_and_set_bit(0, & st->status);
      } else {

      }
#line 245
      err = send_msg_to_layer(st, skb);
#line 246
      tmp___34 = __builtin_expect(! (! err), 1);
#line 246
      ______r___11 = tmp___34;
#line 246
      ftrace_likely_update(& ______f___1509, ______r___11, 0);
#line 246
      if (______r___11) {
#line 246
        tmp___35 = 1;
      } else {
#line 246
        tmp___35 = 0;
      }
#line 246
      ______r___10 = tmp___35;
#line 246
      ______f___1508.__annonCompField3.miss_hit[______r___10] = ______f___1508.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 246
      if (______r___10) {
#line 247
        ______r___7 = ! (! (*debug___2 & 16U));
#line 247
        ______f___1507.__annonCompField3.miss_hit[______r___7] = ______f___1507.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 247
        if (______r___7) {
#line 248
          tmp___30 = dev_name(& (st->dev)->dev);
#line 248
          printk("<7>%s: %s prim(%x) id(%x) send call(%d)\n", "mISDNStackd", tmp___30,
                 ((struct mISDNhead *)(& skb->cb[0]))->prim, ((struct mISDNhead *)(& skb->cb[0]))->id,
                 err);
        } else {

        }
#line 254
        consume_skb(skb);
#line 255
        continue;
      } else {

      }
#line 257
      tmp___60 = constant_test_bit(16, & st->status);
#line 257
      if (tmp___60) {
#line 257
        tmp___62 = 1;
      } else {
#line 257
        tmp___62 = 0;
      }
#line 257
      tmp___63 = __builtin_expect(tmp___62, 1);
#line 257
      ______r___15 = tmp___63;
#line 257
      ftrace_likely_update(& ______f___1511, ______r___15, 0);
#line 257
      if (______r___15) {
#line 257
        tmp___64 = 1;
      } else {
#line 257
        tmp___64 = 0;
      }
#line 257
      ______r___14 = tmp___64;
#line 257
      ______f___1510.__annonCompField3.miss_hit[______r___14] = ______f___1510.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 257
      if (______r___14) {
#line 259
        test_and_clear_bit(0, & st->status);
#line 261
        test_and_clear_bit(30, & st->status);
#line 263
        break;
      } else {

      }
    }
#line 266
    tmp___72 = constant_test_bit(2, & st->status);
#line 266
    if (tmp___72) {
#line 266
      tmp___74 = 1;
    } else {
#line 266
      tmp___74 = 0;
    }
#line 266
    ______r___16 = tmp___74;
#line 266
    ______f___1512.__annonCompField3.miss_hit[______r___16] = ______f___1512.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 266
    if (______r___16) {
#line 267
      test_and_set_bit(16, & st->status);
#line 268
      test_and_clear_bit(30, & st->status);
#line 269
      do_clear_stack(st);
#line 270
      test_and_clear_bit(2, & st->status);
#line 271
      test_and_set_bit(3, & st->status);
    } else {

    }
#line 273
    tmp___84 = test_and_clear_bit(3, & st->status);
#line 273
    if (tmp___84) {
#line 273
      tmp___85 = 1;
    } else {
#line 273
      tmp___85 = 0;
    }
#line 273
    ______r___18 = tmp___85;
#line 273
    ______f___1514.__annonCompField3.miss_hit[______r___18] = ______f___1514.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 273
    if (______r___18) {
#line 274
      test_and_clear_bit(16, & st->status);
#line 275
      test_and_set_bit(30, & st->status);
#line 276
      tmp___79 = skb_queue_empty(& st->msgq);
#line 276
      if (tmp___79) {
#line 276
        tmp___80 = 0;
      } else {
#line 276
        tmp___80 = 1;
      }
#line 276
      ______r___17 = tmp___80;
#line 276
      ______f___1513.__annonCompField3.miss_hit[______r___17] = ______f___1513.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 276
      if (______r___17) {
#line 277
        test_and_set_bit(0, & st->status);
      } else {

      }
    } else {

    }
#line 280
    tmp___91 = constant_test_bit(15, & st->status);
#line 280
    if (tmp___91) {
#line 280
      tmp___93 = 1;
    } else {
#line 280
      tmp___93 = 0;
    }
#line 280
    ______r___19 = tmp___93;
#line 280
    ______f___1515.__annonCompField3.miss_hit[______r___19] = ______f___1515.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 280
    if (______r___19) {
#line 281
      break;
    } else {

    }
#line 282
    ______r___20 = ! (! ((unsigned long )st->notify != (unsigned long )((void *)0)));
#line 282
    ______f___1516.__annonCompField3.miss_hit[______r___20] = ______f___1516.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 282
    if (______r___20) {
#line 283
      complete(st->notify);
#line 284
      st->notify = (void *)0;
    } else {

    }
#line 289
    test_and_clear_bit(29, & st->status);
#line 290
    __ret = 0;
#line 290
    ______r___23 = ! (! (! (st->status & 65535UL)));
#line 290
    ______f___1519.__annonCompField3.miss_hit[______r___23] = ______f___1519.__annonCompField3.miss_hit[______r___23] + 1UL;
#line 290
    if (______r___23) {
#line 290
      while (1) {
#line 290
        tmp___94 = get_current();
#line 290
        __wait.flags = 0U;
#line 290
        __wait.private = tmp___94;
#line 290
        __wait.func = & autoremove_wake_function;
#line 290
        __wait.task_list.next = & __wait.task_list;
#line 290
        __wait.task_list.prev = & __wait.task_list;
#line 290
        while (1) {
#line 290
          prepare_to_wait(& st->workq, & __wait, 1);
#line 290
          ______r___21 = ! (! (st->status & 65535UL));
#line 290
          ______f___1517.__annonCompField3.miss_hit[______r___21] = ______f___1517.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 290
          if (______r___21) {
#line 290
            break;
          } else {

          }
#line 290
          tmp___101 = get_current();
#line 290
          tmp___102 = signal_pending(tmp___101);
#line 290
          if (tmp___102) {
#line 290
            tmp___103 = 0;
          } else {
#line 290
            tmp___103 = 1;
          }
#line 290
          ______r___22 = tmp___103;
#line 290
          ______f___1518.__annonCompField3.miss_hit[______r___22] = ______f___1518.__annonCompField3.miss_hit[______r___22] + 1UL;
#line 290
          if (______r___22) {
#line 290
            schedule();
#line 290
            goto __Cont;
          } else {

          }
#line 290
          __ret = -512;
#line 290
          break;
          __Cont: /* CIL Label */ ;
        }
#line 290
        finish_wait(& st->workq, & __wait);
#line 290
        break;
      }
    } else {

    }
#line 292
    ______r___24 = ! (! (*debug___2 & 32U));
#line 292
    ______f___1520.__annonCompField3.miss_hit[______r___24] = ______f___1520.__annonCompField3.miss_hit[______r___24] + 1UL;
#line 292
    if (______r___24) {
#line 293
      tmp___104 = dev_name(& (st->dev)->dev);
#line 293
      printk("<7>%s: %s wake status %08lx\n", "mISDNStackd", tmp___104, st->status);
    } else {

    }
#line 295
    test_and_set_bit(29, & st->status);
#line 297
    test_and_clear_bit(4, & st->status);
#line 299
    tmp___110 = constant_test_bit(16, & st->status);
#line 299
    if (tmp___110) {
#line 299
      tmp___112 = 1;
    } else {
#line 299
      tmp___112 = 0;
    }
#line 299
    ______r___25 = tmp___112;
#line 299
    ______f___1521.__annonCompField3.miss_hit[______r___25] = ______f___1521.__annonCompField3.miss_hit[______r___25] + 1UL;
#line 299
    if (______r___25) {
#line 300
      test_and_clear_bit(30, & st->status);
    } else {

    }
  }
#line 320
  test_and_set_bit(31, & st->status);
#line 321
  test_and_clear_bit(30, & st->status);
#line 322
  test_and_clear_bit(29, & st->status);
#line 323
  test_and_clear_bit(15, & st->status);
#line 324
  skb_queue_purge(& st->msgq);
#line 325
  st->thread = (void *)0;
#line 326
  ______r___26 = ! (! ((unsigned long )st->notify != (unsigned long )((void *)0)));
#line 326
  ______f___1522.__annonCompField3.miss_hit[______r___26] = ______f___1522.__annonCompField3.miss_hit[______r___26] + 1UL;
#line 326
  if (______r___26) {
#line 327
    complete(st->notify);
#line 328
    st->notify = (void *)0;
  } else {

  }
#line 330
  return (0);
}
}
#line 336
static int l1_receive(struct mISDNchannel *ch , struct sk_buff *skb ) ;
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1523  __attribute__((__section__("_ftrace_branch")))  =    {"l1_receive",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    336, {{0UL, 0UL}}};
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static int l1_receive(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  int ______r ;

  {
#line 336
  ______r = ! (! (! ch->st));
#line 336
  ______f___1523.__annonCompField3.miss_hit[______r] = ______f___1523.__annonCompField3.miss_hit[______r] + 1UL;
#line 336
  if (______r) {
#line 337
    return (-19);
  } else {

  }
#line 338
  __net_timestamp(skb);
#line 339
  _queue_message(ch->st, skb);
#line 340
  return (0);
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) 
{ 


  {
#line 346
  ch->addr = sapi | (tei << 8);
#line 347
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 352
  list_add_tail(& ch->list, & st->layer2);
#line 353
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 358
  mutex_lock_nested(& st->lmutex, 0);
#line 359
  __add_layer2(ch, st);
#line 360
  mutex_unlock(& st->lmutex);
#line 361
  return;
}
}
#line 366
static int st_own_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) ;
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1524  __attribute__((__section__("_ftrace_branch")))  =    {"st_own_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    366, {{0UL, 0UL}}};
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static int st_own_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  int ______r ;
  int tmp ;

  {
#line 366
  ______r = ! (! (! ch->st || (ch->st)->layer1));
#line 366
  ______f___1524.__annonCompField3.miss_hit[______r] = ______f___1524.__annonCompField3.miss_hit[______r] + 1UL;
#line 366
  if (______r) {
#line 367
    return (-22);
  } else {

  }
#line 368
  tmp = (*(((ch->st)->layer1)->ctrl))((ch->st)->layer1, cmd, arg);
#line 368
  return (tmp);
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1525  __attribute__((__section__("_ftrace_branch")))  =    {"create_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    379, {{0UL, 0UL}}};
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct lock_class_key __key___8  ;
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct lock_class_key __key___9  ;
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1526  __attribute__((__section__("_ftrace_branch")))  =    {"create_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    392, {{0UL, 0UL}}};
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1527  __attribute__((__section__("_ftrace_branch")))  =    {"create_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    407, {{0UL, 0UL}}};
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1528  __attribute__((__section__("_ftrace_branch")))  =    {"create_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    412, {{0UL, 0UL}}};
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1529  __attribute__((__section__("_ftrace_branch")))  =    {"create_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    413, {{0UL, 0UL}}};
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
int create_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *newst ;
  int err ;
  struct completion done ;
  void *tmp ;
  int ______r ;
  int ______r___0 ;
  char const   *tmp___0 ;
  int ______r___1 ;
  struct task_struct *__k ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int ______r___2 ;
  long tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  char const   *tmp___10 ;
  int ______r___3 ;
  long tmp___14 ;
  int tmp___15 ;

  {
#line 376
  init_completion(& done);
#line 376
  done = done;
#line 378
  tmp = kzalloc___1(sizeof(struct mISDNstack ), (16U | 64U) | 128U);
#line 378
  newst = tmp;
#line 379
  ______r = ! (! (! newst));
#line 379
  ______f___1525.__annonCompField3.miss_hit[______r] = ______f___1525.__annonCompField3.miss_hit[______r] + 1UL;
#line 379
  if (______r) {
#line 380
    printk("<3>kmalloc mISDN_stack failed\n");
#line 381
    return (-12);
  } else {

  }
#line 383
  newst->dev = dev;
#line 384
  INIT_LIST_HEAD(& newst->layer2);
#line 385
  newst->l1sock.head.first = (void *)0;
#line 386
  while (1) {
#line 386
    __rwlock_init(& newst->l1sock.lock, "&newst->l1sock.lock", & __key___8);
#line 386
    break;
  }
#line 387
  init_waitqueue_head(& newst->workq);
#line 388
  skb_queue_head_init___0(& newst->msgq);
#line 389
  while (1) {
#line 389
    __mutex_init(& newst->lmutex, "&newst->lmutex", & __key___9);
#line 389
    break;
  }
#line 390
  dev->D.st = newst;
#line 391
  err = create_teimanager(dev);
#line 392
  ______r___0 = ! (! err);
#line 392
  ______f___1526.__annonCompField3.miss_hit[______r___0] = ______f___1526.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 392
  if (______r___0) {
#line 393
    printk("<3>kmalloc teimanager failed\n");
#line 394
    kfree(newst);
#line 395
    return (err);
  } else {

  }
#line 397
  (dev->teimgr)->peer = & newst->own;
#line 398
  (dev->teimgr)->recv = & mISDN_queue_message;
#line 399
  (dev->teimgr)->st = newst;
#line 400
  newst->layer1 = & dev->D;
#line 401
  dev->D.recv = & l1_receive;
#line 402
  dev->D.peer = & newst->own;
#line 403
  newst->own.st = newst;
#line 404
  newst->own.ctrl = & st_own_ctrl;
#line 405
  newst->own.send = & mISDN_queue_message;
#line 406
  newst->own.recv = & mISDN_queue_message;
#line 407
  ______r___1 = ! (! (*debug___2 & 2U));
#line 407
  ______f___1527.__annonCompField3.miss_hit[______r___1] = ______f___1527.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 407
  if (______r___1) {
#line 408
    tmp___0 = dev_name(& (newst->dev)->dev);
#line 408
    printk("<7>%s: st(%s)\n", "create_stack", tmp___0);
  } else {

  }
#line 410
  newst->notify = & done;
#line 411
  tmp___1 = dev_name(& (newst->dev)->dev);
#line 411
  tmp___2 = kthread_create(& mISDNStackd, (void *)newst, "mISDN_%s", tmp___1);
#line 411
  __k = tmp___2;
#line 411
  tmp___7 = IS_ERR(__k);
#line 411
  if (tmp___7) {
#line 411
    tmp___8 = 0;
  } else {
#line 411
    tmp___8 = 1;
  }
#line 411
  ______r___2 = tmp___8;
#line 411
  ______f___1528.__annonCompField3.miss_hit[______r___2] = ______f___1528.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 411
  if (______r___2) {
#line 411
    wake_up_process(__k);
  } else {

  }
#line 411
  newst->thread = __k;
#line 413
  tmp___14 = IS_ERR(newst->thread);
#line 413
  if (tmp___14) {
#line 413
    tmp___15 = 1;
  } else {
#line 413
    tmp___15 = 0;
  }
#line 413
  ______r___3 = tmp___15;
#line 413
  ______f___1529.__annonCompField3.miss_hit[______r___3] = ______f___1529.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 413
  if (______r___3) {
#line 414
    tmp___9 = PTR_ERR(newst->thread);
#line 414
    err = tmp___9;
#line 415
    tmp___10 = dev_name(& (newst->dev)->dev);
#line 415
    printk("<3>mISDN:cannot create kernel thread for %s (%d)\n", tmp___10, err);
#line 418
    delete_teimanager(dev->teimgr);
#line 419
    kfree(newst);
  } else {
#line 421
    wait_for_completion(& done);
  }
#line 422
  return (err);
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1530  __attribute__((__section__("_ftrace_branch")))  =    {"connect_layer1",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    434, {{0UL, 0UL}}};
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1531  __attribute__((__section__("_ftrace_branch")))  =    {"connect_layer1",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    451, {{0UL, 0UL}}};
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct channel_req rq ;
  int err ;
  char const   *tmp ;
  int ______r ;
  int ______r___0 ;

  {
#line 429
  __mptr = ch;
#line 429
  msk = (struct mISDN_sock *)((char *)__mptr - (unsigned int )(& ((struct mISDN_sock *)0)->ch));
#line 434
  ______r = ! (! (*debug___2 & 2U));
#line 434
  ______f___1530.__annonCompField3.miss_hit[______r] = ______f___1530.__annonCompField3.miss_hit[______r] + 1UL;
#line 434
  if (______r) {
#line 435
    tmp = dev_name(& dev->dev);
#line 435
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_layer1", tmp, protocol,
           adr->dev, adr->channel, adr->sapi, adr->tei);
  } else {

  }
#line 438
  switch (protocol) {
  case (u_int )3: 
  case (u_int )1: 
  case (u_int )4: 
  case (u_int )2: 
#line 443
  ch->recv = & mISDN_queue_message;
#line 444
  ch->peer = & (dev->D.st)->own;
#line 445
  ch->st = dev->D.st;
#line 446
  rq.protocol = protocol;
#line 447
  rq.adr.channel = adr->channel;
#line 448
  err = (*(dev->D.ctrl))(& dev->D, 256, & rq);
#line 449
  printk("<7>%s: ret %d (dev %d)\n", "connect_layer1", err, dev->id);
#line 451
  ______r___0 = ! (! err);
#line 451
  ______f___1531.__annonCompField3.miss_hit[______r___0] = ______f___1531.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 451
  if (______r___0) {
#line 452
    return (err);
  } else {

  }
#line 453
  _write_lock_bh(& (dev->D.st)->l1sock.lock);
#line 454
  sk_add_node___0(& msk->sk, & (dev->D.st)->l1sock.head);
#line 455
  _write_unlock_bh(& (dev->D.st)->l1sock.lock);
#line 456
  break;
  default: 
#line 458
  return (-92);
  }
#line 460
  return (0);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1532  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    471, {{0UL, 0UL}}};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1533  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    482, {{0UL, 0UL}}};
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1534  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    491, {{0UL, 0UL}}};
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1535  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    497, {{0UL, 0UL}}};
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1536  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    505, {{0UL, 0UL}}};
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1537  __attribute__((__section__("_ftrace_branch")))  =    {"connect_Bstack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    478, {{0UL, 0UL}}};
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  struct channel_req rq2 ;
  int pmask ;
  int err ;
  struct Bprotocol *bp ;
  char const   *tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;

  {
#line 471
  ______r = ! (! (*debug___2 & 2U));
#line 471
  ______f___1532.__annonCompField3.miss_hit[______r] = ______f___1532.__annonCompField3.miss_hit[______r] + 1UL;
#line 471
  if (______r) {
#line 472
    tmp = dev_name(& dev->dev);
#line 472
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_Bstack", tmp, protocol,
           adr->dev, adr->channel, adr->sapi, adr->tei);
  } else {

  }
#line 476
  ch->st = dev->D.st;
#line 477
  pmask = 1 << (protocol & 31U);
#line 478
  ______r___4 = ! (! ((unsigned int )pmask & dev->Bprotocols));
#line 478
  ______f___1537.__annonCompField3.miss_hit[______r___4] = ______f___1537.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 478
  if (______r___4) {
#line 479
    rq.protocol = protocol;
#line 480
    rq.adr = *adr;
#line 481
    err = (*(dev->D.ctrl))(& dev->D, 256, & rq);
#line 482
    ______r___0 = ! (! err);
#line 482
    ______f___1533.__annonCompField3.miss_hit[______r___0] = ______f___1533.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 482
    if (______r___0) {
#line 483
      return (err);
    } else {

    }
#line 484
    ch->recv = (rq.ch)->send;
#line 485
    ch->peer = rq.ch;
#line 486
    (rq.ch)->recv = ch->send;
#line 487
    (rq.ch)->peer = ch;
#line 488
    (rq.ch)->st = dev->D.st;
  } else {
#line 490
    bp = get_Bprotocol4mask(pmask);
#line 491
    ______r___1 = ! (! (! bp));
#line 491
    ______f___1534.__annonCompField3.miss_hit[______r___1] = ______f___1534.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 491
    if (______r___1) {
#line 492
      return (-92);
    } else {

    }
#line 493
    rq2.protocol = protocol;
#line 494
    rq2.adr = *adr;
#line 495
    rq2.ch = ch;
#line 496
    err = (*(bp->create))(& rq2);
#line 497
    ______r___2 = ! (! err);
#line 497
    ______f___1535.__annonCompField3.miss_hit[______r___2] = ______f___1535.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 497
    if (______r___2) {
#line 498
      return (err);
    } else {

    }
#line 499
    ch->recv = (rq2.ch)->send;
#line 500
    ch->peer = rq2.ch;
#line 501
    (rq2.ch)->st = dev->D.st;
#line 502
    rq.protocol = rq2.protocol;
#line 503
    rq.adr = *adr;
#line 504
    err = (*(dev->D.ctrl))(& dev->D, 256, & rq);
#line 505
    ______r___3 = ! (! err);
#line 505
    ______f___1536.__annonCompField3.miss_hit[______r___3] = ______f___1536.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 505
    if (______r___3) {
#line 506
      (*((rq2.ch)->ctrl))(rq2.ch, 512, (void *)0);
#line 507
      return (err);
    } else {

    }
#line 509
    (rq2.ch)->recv = (rq.ch)->send;
#line 510
    (rq2.ch)->peer = rq.ch;
#line 511
    (rq.ch)->recv = (rq2.ch)->send;
#line 512
    (rq.ch)->peer = rq2.ch;
#line 513
    (rq.ch)->st = dev->D.st;
  }
#line 515
  ch->protocol = protocol;
#line 516
  ch->nr = (rq.ch)->nr;
#line 517
  return (0);
}
}
#line 527 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1538  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    527, {{0UL, 0UL}}};
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1539  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    533, {{0UL, 0UL}}};
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1540  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    538, {{0UL, 0UL}}};
#line 547 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1541  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    547, {{0UL, 0UL}}};
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1542  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    555, {{0UL, 0UL}}};
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1543  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2entity",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    554, {{0UL, 0UL}}};
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  int err ;
  char const   *tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;

  {
#line 527
  ______r = ! (! (*debug___2 & 2U));
#line 527
  ______f___1538.__annonCompField3.miss_hit[______r] = ______f___1538.__annonCompField3.miss_hit[______r] + 1UL;
#line 527
  if (______r) {
#line 528
    tmp = dev_name(& dev->dev);
#line 528
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_l2entity", tmp, protocol,
           adr->dev, adr->channel, adr->sapi, adr->tei);
  } else {

  }
#line 532
  rq.protocol = 1;
#line 533
  ______r___0 = ! (! (dev->Dprotocols & (unsigned int )(1 << 3)));
#line 533
  ______f___1539.__annonCompField3.miss_hit[______r___0] = ______f___1539.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 533
  if (______r___0) {
#line 534
    rq.protocol = 3;
  } else {

  }
#line 535
  switch (protocol) {
  case (u_int )17: 
#line 537
  rq.protocol = 2;
#line 538
  ______r___1 = ! (! (dev->Dprotocols & (unsigned int )(1 << 4)));
#line 538
  ______f___1540.__annonCompField3.miss_hit[______r___1] = ______f___1540.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 538
  if (______r___1) {
#line 539
    rq.protocol = 4;
  } else {

  }
  case (u_int )16: 
#line 541
  ch->recv = & mISDN_queue_message;
#line 542
  ch->peer = & (dev->D.st)->own;
#line 543
  ch->st = dev->D.st;
#line 544
  rq.adr.channel = 0;
#line 545
  err = (*(dev->D.ctrl))(& dev->D, 256, & rq);
#line 546
  printk("<7>%s: ret 1 %d\n", "create_l2entity", err);
#line 547
  ______r___2 = ! (! err);
#line 547
  ______f___1541.__annonCompField3.miss_hit[______r___2] = ______f___1541.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 547
  if (______r___2) {
#line 548
    break;
  } else {

  }
#line 549
  rq.protocol = protocol;
#line 550
  rq.adr = *adr;
#line 551
  rq.ch = ch;
#line 552
  err = (*((dev->teimgr)->ctrl))(dev->teimgr, 256, & rq);
#line 553
  printk("<7>%s: ret 2 %d\n", "create_l2entity", err);
#line 554
  ______r___4 = ! (! (! err));
#line 554
  ______f___1543.__annonCompField3.miss_hit[______r___4] = ______f___1543.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 554
  if (______r___4) {
#line 555
    ______r___3 = ! (! (protocol == (u_int )17 && ! rq.ch));
#line 555
    ______f___1542.__annonCompField3.miss_hit[______r___3] = ______f___1542.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 555
    if (______r___3) {
#line 556
      break;
    } else {

    }
#line 557
    add_layer2(rq.ch, dev->D.st);
#line 558
    (rq.ch)->recv = & mISDN_queue_message;
#line 559
    (rq.ch)->peer = & (dev->D.st)->own;
#line 560
    (*((rq.ch)->ctrl))(rq.ch, 256, (void *)0);
  } else {

  }
#line 562
  break;
  default: 
#line 564
  err = -93;
  }
#line 566
  return (err);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1544  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    575, {{0UL, 0UL}}};
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1545  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    579, {{0UL, 0UL}}};
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1546  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    583, {{0UL, 0UL}}};
#line 582 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1547  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    582, {{0UL, 0UL}}};
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1548  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    601, {{0UL, 0UL}}};
#line 614 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1549  __attribute__((__section__("_ftrace_branch")))  =    {"delete_channel",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    614, {{0UL, 0UL}}};
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void delete_channel(struct mISDNchannel *ch ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNchannel *pch ;
  int ______r ;
  char const   *tmp ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;

  {
#line 572
  __mptr = ch;
#line 572
  msk = (struct mISDN_sock *)((char *)__mptr - (unsigned int )(& ((struct mISDN_sock *)0)->ch));
#line 575
  ______r = ! (! (! ch->st));
#line 575
  ______f___1544.__annonCompField3.miss_hit[______r] = ______f___1544.__annonCompField3.miss_hit[______r] + 1UL;
#line 575
  if (______r) {
#line 576
    printk("<4>%s: no stack\n", "delete_channel");
#line 577
    return;
  } else {

  }
#line 579
  ______r___0 = ! (! (*debug___2 & 2U));
#line 579
  ______f___1545.__annonCompField3.miss_hit[______r___0] = ______f___1545.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 579
  if (______r___0) {
#line 580
    tmp = dev_name(& ((ch->st)->dev)->dev);
#line 580
    printk("<7>%s: st(%s) protocol(%x)\n", "delete_channel", tmp, ch->protocol);
  } else {

  }
#line 582
  ______r___2 = ! (! (ch->protocol >= (u_int )32));
#line 582
  ______f___1547.__annonCompField3.miss_hit[______r___2] = ______f___1547.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 582
  if (______r___2) {
#line 583
    ______r___1 = ! (! ch->peer);
#line 583
    ______f___1546.__annonCompField3.miss_hit[______r___1] = ______f___1546.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 583
    if (______r___1) {
#line 584
      (*((ch->peer)->ctrl))(ch->peer, 512, (void *)0);
#line 585
      ch->peer = (void *)0;
    } else {

    }
#line 587
    return;
  } else {

  }
#line 589
  switch (ch->protocol) {
  case (u_int )3: 
  case (u_int )4: 
  case (u_int )1: 
  case (u_int )2: 
#line 594
  _write_lock_bh(& (ch->st)->l1sock.lock);
#line 595
  sk_del_node_init___0(& msk->sk);
#line 596
  _write_unlock_bh(& (ch->st)->l1sock.lock);
#line 597
  (*(((ch->st)->dev)->D.ctrl))(& ((ch->st)->dev)->D, 512, (void *)0);
#line 598
  break;
  case (u_int )16: 
#line 600
  pch = get_channel4id(ch->st, ch->nr);
#line 601
  ______r___3 = ! (! pch);
#line 601
  ______f___1548.__annonCompField3.miss_hit[______r___3] = ______f___1548.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 601
  if (______r___3) {
#line 602
    mutex_lock_nested(& (ch->st)->lmutex, 0);
#line 603
    list_del(& pch->list);
#line 604
    mutex_unlock(& (ch->st)->lmutex);
#line 605
    (*(pch->ctrl))(pch, 512, (void *)0);
#line 606
    pch = ((ch->st)->dev)->teimgr;
#line 607
    (*(pch->ctrl))(pch, 512, (void *)0);
  } else {
#line 609
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 611
  break;
  case (u_int )17: 
#line 613
  pch = ((ch->st)->dev)->teimgr;
#line 614
  ______r___4 = ! (! pch);
#line 614
  ______f___1549.__annonCompField3.miss_hit[______r___4] = ______f___1549.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 614
  if (______r___4) {
#line 615
    (*(pch->ctrl))(pch, 512, (void *)0);
  } else {
#line 617
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 619
  break;
  default: 
#line 621
  break;
  }
#line 623
  return;
}
}
#line 632 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1550  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    632, {{0UL, 0UL}}};
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1551  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    635, {{0UL, 0UL}}};
#line 638 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1552  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    638, {{0UL, 0UL}}};
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1553  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    637, {{0UL, 0UL}}};
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1554  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    649, {{0UL, 0UL}}};
#line 652 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1555  __attribute__((__section__("_ftrace_branch")))  =    {"delete_stack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c",
    652, {{0UL, 0UL}}};
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void delete_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *st ;
  struct completion done ;
  char const   *tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___4 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 629
  st = dev->D.st;
#line 630
  init_completion(& done);
#line 630
  done = done;
#line 632
  ______r = ! (! (*debug___2 & 2U));
#line 632
  ______f___1550.__annonCompField3.miss_hit[______r] = ______f___1550.__annonCompField3.miss_hit[______r] + 1UL;
#line 632
  if (______r) {
#line 633
    tmp = dev_name(& (st->dev)->dev);
#line 633
    printk("<7>%s: st(%s)\n", "delete_stack", tmp);
  } else {

  }
#line 635
  ______r___0 = ! (! dev->teimgr);
#line 635
  ______f___1551.__annonCompField3.miss_hit[______r___0] = ______f___1551.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 635
  if (______r___0) {
#line 636
    delete_teimanager(dev->teimgr);
  } else {

  }
#line 637
  ______r___2 = ! (! st->thread);
#line 637
  ______f___1553.__annonCompField3.miss_hit[______r___2] = ______f___1553.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 637
  if (______r___2) {
#line 638
    ______r___1 = ! (! st->notify);
#line 638
    ______f___1552.__annonCompField3.miss_hit[______r___1] = ______f___1552.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 638
    if (______r___1) {
#line 639
      printk("<4>%s: notifier in use\n", "delete_stack");
#line 641
      complete(st->notify);
    } else {

    }
#line 643
    st->notify = & done;
#line 644
    test_and_set_bit(15, & st->status);
#line 645
    test_and_set_bit(4, & st->status);
#line 646
    __wake_up(& st->workq, 1, 1, (void *)0);
#line 647
    wait_for_completion(& done);
  } else {

  }
#line 649
  tmp___4 = list_empty(& st->layer2);
#line 649
  if (tmp___4) {
#line 649
    tmp___5 = 0;
  } else {
#line 649
    tmp___5 = 1;
  }
#line 649
  ______r___3 = tmp___5;
#line 649
  ______f___1554.__annonCompField3.miss_hit[______r___3] = ______f___1554.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 649
  if (______r___3) {
#line 650
    printk("<4>%s: layer2 list not empty\n", "delete_stack");
  } else {

  }
#line 652
  tmp___10 = hlist_empty(& st->l1sock.head);
#line 652
  if (tmp___10) {
#line 652
    tmp___11 = 0;
  } else {
#line 652
    tmp___11 = 1;
  }
#line 652
  ______r___4 = tmp___11;
#line 652
  ______f___1555.__annonCompField3.miss_hit[______r___4] = ______f___1555.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 652
  if (______r___4) {
#line 653
    printk("<4>%s: layer1 list not empty\n", "delete_stack");
  } else {

  }
#line 655
  kfree(st);
#line 656
  return;
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/stack.c"
void mISDN_initstack(u_int *dp ) 
{ 


  {
#line 661
  debug___2 = dp;
#line 662
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_va_end(__builtin_va_list  ) ;
#line 1
void __builtin_va_start(__builtin_va_list  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096] ;
#line 236 "include/linux/kernel.h"
extern int ( /* format attribute */  vprintk)(char const   *fmt , va_list args ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int per_cpu__cpu_number  __attribute__((__section__(".data.percpu"))) ;
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___613  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___616  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___617  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___617, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___616.__annonCompField3.miss_hit[______r___2] = ______f___616.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___613.__annonCompField3.miss_hit[______r] = ______f___613.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___2)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1556  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1557  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1558  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1559  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1560  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1561  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1562  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1563  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1564  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1565  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1566  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1567  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1568  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1569  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1570  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1571  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1572  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1573  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1574  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1575  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1576  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1577  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1578  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___2)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___1556.__annonCompField3.miss_hit[______r] = ______f___1556.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___1557.__annonCompField3.miss_hit[______r___0] = ______f___1557.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___1558.__annonCompField3.miss_hit[______r___1] = ______f___1558.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___1559.__annonCompField3.miss_hit[______r___2] = ______f___1559.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___1560.__annonCompField3.miss_hit[______r___3] = ______f___1560.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___1561.__annonCompField3.miss_hit[______r___4] = ______f___1561.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___1562.__annonCompField3.miss_hit[______r___5] = ______f___1562.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___1563.__annonCompField3.miss_hit[______r___6] = ______f___1563.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___1564.__annonCompField3.miss_hit[______r___7] = ______f___1564.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___1565.__annonCompField3.miss_hit[______r___8] = ______f___1565.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___1566.__annonCompField3.miss_hit[______r___9] = ______f___1566.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___1567.__annonCompField3.miss_hit[______r___10] = ______f___1567.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___1568.__annonCompField3.miss_hit[______r___11] = ______f___1568.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___1569.__annonCompField3.miss_hit[______r___12] = ______f___1569.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___1570.__annonCompField3.miss_hit[______r___13] = ______f___1570.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___1571.__annonCompField3.miss_hit[______r___14] = ______f___1571.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___1572.__annonCompField3.miss_hit[______r___15] = ______f___1572.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___1573.__annonCompField3.miss_hit[______r___16] = ______f___1573.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___1574.__annonCompField3.miss_hit[______r___17] = ______f___1574.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___1575.__annonCompField3.miss_hit[______r___18] = ______f___1575.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___1576.__annonCompField3.miss_hit[______r___19] = ______f___1576.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___1577.__annonCompField3.miss_hit[______r___20] = ______f___1577.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___1578.__annonCompField3.miss_hit[______r___21] = ______f___1578.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___2)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1579  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___2)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___2(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___1579.__annonCompField3.miss_hit[______r] = ______f___1579.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___2)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___2((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___2)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1580  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1581  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1582  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___2)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___1580.__annonCompField3.miss_hit[______r] = ______f___1580.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___2(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___1582.__annonCompField3.miss_hit[______r___1] = ______f___1582.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___2(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___1581.__annonCompField3.miss_hit[______r___0] = ______f___1581.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___2((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___2(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
__inline static void local_inc(local_t *l ) 
{ 


  {
#line 21
  __asm__  volatile   (" "
                       "incq"
                       " "
                       "%0": "+m" (l->a.counter));
#line 23
  return;
}
}
#line 436 "include/linux/module.h"
__inline static local_t *__module_ref_addr(struct module *mod , int cpu ) 
{ 


  {
#line 439
  return ((local_t *)(mod->refptr + __per_cpu_offset[cpu]));
}
}
#line 449
__inline static void __module_get(struct module *module ) ;
#line 449 "include/linux/module.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___674  __attribute__((__section__("_ftrace_branch")))  =    {"__module_get",
    "include/linux/module.h", 449, {{0UL, 0UL}}};
#line 447 "include/linux/module.h"
__inline static void __module_get(struct module *module ) 
{ 
  int ret__ ;
  local_t *tmp ;
  int ______r ;

  {
#line 449
  ______r = ! (! module);
#line 449
  ______f___674.__annonCompField3.miss_hit[______r] = ______f___674.__annonCompField3.miss_hit[______r] + 1UL;
#line 449
  if (______r) {
#line 450
    while (1) {
#line 450
      break;
    }
#line 450
    switch (sizeof(per_cpu__cpu_number)) {
    case 1UL: 
#line 450
    __asm__  ("mov"
              "b "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 2UL: 
#line 450
    __asm__  ("mov"
              "w "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 4UL: 
#line 450
    __asm__  ("mov"
              "l "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 8UL: 
#line 450
    __asm__  ("mov"
              "q "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    default: 
#line 450
    __bad_percpu_size();
    }
#line 450
    tmp = __module_ref_addr(module, ret__);
#line 450
    local_inc(tmp);
#line 451
    while (1) {
#line 451
      break;
    }
  } else {

  }
#line 453
  return;
}
}
#line 470
extern void module_put(struct module *module ) ;
#line 116 "include/linux/mISDNhw.h"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) ;
#line 145
int l1_event(struct layer1 *l1 , u_int event ) ;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static u_int *debug___3  ;
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct Fsm l1fsm_s  =    {(void *)0, 0, 0, (void *)0, (void *)0};
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static char *strL1SState[7]  = {      "ST_L1_F2",      "ST_L1_F3",      "ST_L1_F4",      "ST_L1_F5", 
        "ST_L1_F6",      "ST_L1_F7",      "ST_L1_F8"};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static char *strL1Event[12]  = 
#line 81
  {      "EV_PH_ACTIVATE",      "EV_PH_DEACTIVATE",      "EV_RESET_IND",      "EV_DEACT_CNF", 
        "EV_DEACT_IND",      "EV_POWER_UP",      "EV_ANYSIG_IND",      "EV_INFO2_IND", 
        "EV_INFO4_IND",      "EV_TIMER_DEACT",      "EV_TIMER_ACT",      "EV_TIMER3"};
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer1 *l1 ;
  va_list va ;
  char const   *tmp ;

  {
#line 100
  l1 = fi->userdata;
#line 103
  __builtin_va_start(va);
#line 104
  tmp = dev_name(& (l1->dch)->dev.dev);
#line 104
  printk("<7>%s: ", tmp);
#line 105
  vprintk(fmt, va);
#line 106
  printk("\n");
#line 107
  __builtin_va_end(va);
#line 108
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_reset(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 113
  mISDN_FsmChangeState(fi, ST_L1_F3);
#line 114
  return;
}
}
#line 122
static void l1_deact_cnf(struct FsmInst *fi , int event , void *arg ) ;
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1583  __attribute__((__section__("_ftrace_branch")))  =    {"l1_deact_cnf",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    122, {{0UL, 0UL}}};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_deact_cnf(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 119
  l1 = fi->userdata;
#line 121
  mISDN_FsmChangeState(fi, ST_L1_F3);
#line 122
  tmp___4 = constant_test_bit(1, & l1->Flags);
#line 122
  if (tmp___4) {
#line 122
    tmp___6 = 1;
  } else {
#line 122
    tmp___6 = 0;
  }
#line 122
  ______r = tmp___6;
#line 122
  ______f___1583.__annonCompField3.miss_hit[______r] = ______f___1583.__annonCompField3.miss_hit[______r] + 1UL;
#line 122
  if (______r) {
#line 123
    (*(l1->dcb))(l1->dch, 35586);
  } else {

  }
#line 124
  return;
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_deact_req_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 129
  l1 = fi->userdata;
#line 131
  mISDN_FsmChangeState(fi, ST_L1_F3);
#line 132
  mISDN_FsmRestartTimer(& l1->timer, 550, EV_TIMER_DEACT, (void *)0, 2);
#line 133
  test_and_set_bit(3, & l1->Flags);
#line 134
  return;
}
}
#line 141
static void l1_power_up_s(struct FsmInst *fi , int event , void *arg ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1584  __attribute__((__section__("_ftrace_branch")))  =    {"l1_power_up_s",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    141, {{0UL, 0UL}}};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_power_up_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 139
  l1 = fi->userdata;
#line 141
  tmp___4 = constant_test_bit(1, & l1->Flags);
#line 141
  if (tmp___4) {
#line 141
    tmp___6 = 1;
  } else {
#line 141
    tmp___6 = 0;
  }
#line 141
  ______r = tmp___6;
#line 141
  ______f___1584.__annonCompField3.miss_hit[______r] = ______f___1584.__annonCompField3.miss_hit[______r] + 1UL;
#line 141
  if (______r) {
#line 142
    mISDN_FsmChangeState(fi, ST_L1_F4);
#line 143
    (*(l1->dcb))(l1->dch, 33538);
  } else {
#line 145
    mISDN_FsmChangeState(fi, ST_L1_F3);
  }
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_go_F5(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 151
  mISDN_FsmChangeState(fi, ST_L1_F5);
#line 152
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_go_F8(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 157
  mISDN_FsmChangeState(fi, ST_L1_F8);
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_info2_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 163
  l1 = fi->userdata;
#line 165
  mISDN_FsmChangeState(fi, ST_L1_F6);
#line 166
  (*(l1->dcb))(l1->dch, 33538);
#line 167
  return;
}
}
#line 176
static void l1_info4_ind(struct FsmInst *fi , int event , void *arg ) ;
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1585  __attribute__((__section__("_ftrace_branch")))  =    {"l1_info4_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    176, {{0UL, 0UL}}};
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1586  __attribute__((__section__("_ftrace_branch")))  =    {"l1_info4_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    179, {{0UL, 0UL}}};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1587  __attribute__((__section__("_ftrace_branch")))  =    {"l1_info4_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    178, {{0UL, 0UL}}};
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_info4_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___0 ;
  int tmp___7 ;
  int tmp___8 ;
  int ______r___1 ;
  int tmp___15 ;
  int tmp___17 ;

  {
#line 172
  l1 = fi->userdata;
#line 174
  mISDN_FsmChangeState(fi, ST_L1_F7);
#line 175
  (*(l1->dcb))(l1->dch, 33538);
#line 176
  tmp___2 = test_and_clear_bit(3, & l1->Flags);
#line 176
  if (tmp___2) {
#line 176
    tmp___3 = 1;
  } else {
#line 176
    tmp___3 = 0;
  }
#line 176
  ______r = tmp___3;
#line 176
  ______f___1585.__annonCompField3.miss_hit[______r] = ______f___1585.__annonCompField3.miss_hit[______r] + 1UL;
#line 176
  if (______r) {
#line 177
    mISDN_FsmDelTimer(& l1->timer, 4);
  } else {

  }
#line 178
  tmp___15 = constant_test_bit(2, & l1->Flags);
#line 178
  if (tmp___15) {
#line 178
    tmp___17 = 0;
  } else {
#line 178
    tmp___17 = 1;
  }
#line 178
  ______r___1 = tmp___17;
#line 178
  ______f___1587.__annonCompField3.miss_hit[______r___1] = ______f___1587.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 178
  if (______r___1) {
#line 179
    tmp___7 = test_and_clear_bit(5, & l1->Flags);
#line 179
    if (tmp___7) {
#line 179
      tmp___8 = 1;
    } else {
#line 179
      tmp___8 = 0;
    }
#line 179
    ______r___0 = tmp___8;
#line 179
    ______f___1586.__annonCompField3.miss_hit[______r___0] = ______f___1586.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 179
    if (______r___0) {
#line 180
      mISDN_FsmDelTimer(& l1->timer, 3);
    } else {

    }
#line 181
    mISDN_FsmRestartTimer(& l1->timer, 110, EV_TIMER_ACT, (void *)0, 2);
#line 182
    test_and_set_bit(4, & l1->Flags);
  } else {

  }
#line 184
  return;
}
}
#line 193
static void l1_timer3(struct FsmInst *fi , int event , void *arg ) ;
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1588  __attribute__((__section__("_ftrace_branch")))  =    {"l1_timer3",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    193, {{0UL, 0UL}}};
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1589  __attribute__((__section__("_ftrace_branch")))  =    {"l1_timer3",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    192, {{0UL, 0UL}}};
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1590  __attribute__((__section__("_ftrace_branch")))  =    {"l1_timer3",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    197, {{0UL, 0UL}}};
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_timer3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___0 ;
  int tmp___7 ;
  int tmp___8 ;
  int ______r___1 ;

  {
#line 189
  l1 = fi->userdata;
#line 191
  test_and_clear_bit(5, & l1->Flags);
#line 192
  tmp___7 = test_and_clear_bit(1, & l1->Flags);
#line 192
  if (tmp___7) {
#line 192
    tmp___8 = 1;
  } else {
#line 192
    tmp___8 = 0;
  }
#line 192
  ______r___0 = tmp___8;
#line 192
  ______f___1589.__annonCompField3.miss_hit[______r___0] = ______f___1589.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 192
  if (______r___0) {
#line 193
    tmp___2 = test_and_clear_bit(8, & l1->Flags);
#line 193
    if (tmp___2) {
#line 193
      tmp___3 = 1;
    } else {
#line 193
      tmp___3 = 0;
    }
#line 193
    ______r = tmp___3;
#line 193
    ______f___1588.__annonCompField3.miss_hit[______r] = ______f___1588.__annonCompField3.miss_hit[______r] + 1UL;
#line 193
    if (______r) {
#line 194
      (*(l1->dcb))(l1->dch, 36610);
    } else {

    }
#line 195
    (*(l1->dcb))(l1->dch, 514);
  } else {

  }
#line 197
  ______r___1 = ! (! (l1->l1m.state != ST_L1_F6));
#line 197
  ______f___1590.__annonCompField3.miss_hit[______r___1] = ______f___1590.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 197
  if (______r___1) {
#line 198
    mISDN_FsmChangeState(fi, ST_L1_F3);
#line 199
    (*(l1->dcb))(l1->dch, 35586);
  } else {

  }
#line 201
  return;
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_timer_act(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 206
  l1 = fi->userdata;
#line 208
  test_and_clear_bit(4, & l1->Flags);
#line 209
  test_and_set_bit(2, & l1->Flags);
#line 210
  (*(l1->dcb))(l1->dch, 258);
#line 211
  return;
}
}
#line 220
static void l1_timer_deact(struct FsmInst *fi , int event , void *arg ) ;
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1591  __attribute__((__section__("_ftrace_branch")))  =    {"l1_timer_deact",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    220, {{0UL, 0UL}}};
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_timer_deact(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 216
  l1 = fi->userdata;
#line 218
  test_and_clear_bit(3, & l1->Flags);
#line 219
  test_and_clear_bit(2, & l1->Flags);
#line 220
  tmp___2 = test_and_clear_bit(8, & l1->Flags);
#line 220
  if (tmp___2) {
#line 220
    tmp___3 = 1;
  } else {
#line 220
    tmp___3 = 0;
  }
#line 220
  ______r = tmp___3;
#line 220
  ______f___1591.__annonCompField3.miss_hit[______r] = ______f___1591.__annonCompField3.miss_hit[______r] + 1UL;
#line 220
  if (______r) {
#line 221
    (*(l1->dcb))(l1->dch, 36610);
  } else {

  }
#line 222
  (*(l1->dcb))(l1->dch, 514);
#line 223
  (*(l1->dcb))(l1->dch, 35842);
#line 224
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_activate_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 229
  l1 = fi->userdata;
#line 231
  mISDN_FsmRestartTimer(& l1->timer, 7000, EV_TIMER3, (void *)0, 2);
#line 232
  test_and_set_bit(5, & l1->Flags);
#line 233
  (*(l1->dcb))(l1->dch, 35330);
#line 234
  return;
}
}
#line 244
static void l1_activate_no(struct FsmInst *fi , int event , void *arg ) ;
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1592  __attribute__((__section__("_ftrace_branch")))  =    {"l1_activate_no",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    244, {{0UL, 0UL}}};
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1593  __attribute__((__section__("_ftrace_branch")))  =    {"l1_activate_no",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    242, {{0UL, 0UL}}};
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void l1_activate_no(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___0 ;
  int tmp___14 ;
  int tmp___16 ;
  int tmp___18 ;

  {
#line 239
  l1 = fi->userdata;
#line 241
  tmp___14 = constant_test_bit(3, & l1->Flags);
#line 241
  if (tmp___14) {
#line 241
    tmp___18 = 0;
  } else {
#line 241
    tmp___16 = constant_test_bit(5, & l1->Flags);
#line 241
    if (tmp___16) {
#line 241
      tmp___18 = 0;
    } else {
#line 241
      tmp___18 = 1;
    }
  }
#line 241
  ______r___0 = tmp___18;
#line 241
  ______f___1593.__annonCompField3.miss_hit[______r___0] = ______f___1593.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 241
  if (______r___0) {
#line 243
    test_and_clear_bit(1, & l1->Flags);
#line 244
    tmp___2 = test_and_clear_bit(8, & l1->Flags);
#line 244
    if (tmp___2) {
#line 244
      tmp___3 = 1;
    } else {
#line 244
      tmp___3 = 0;
    }
#line 244
    ______r = tmp___3;
#line 244
    ______f___1592.__annonCompField3.miss_hit[______r] = ______f___1592.__annonCompField3.miss_hit[______r] + 1UL;
#line 244
    if (______r) {
#line 245
      (*(l1->dcb))(l1->dch, 36610);
    } else {

    }
#line 246
    (*(l1->dcb))(l1->dch, 514);
  } else {

  }
#line 248
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct FsmNode L1SFnList[44]  = 
#line 250
  {      {ST_L1_F3, EV_PH_ACTIVATE, & l1_activate_s}, 
        {ST_L1_F6, EV_PH_ACTIVATE, & l1_activate_no}, 
        {ST_L1_F8, EV_PH_ACTIVATE, & l1_activate_no}, 
        {ST_L1_F3, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F4, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F5, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F6, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F7, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F8, EV_RESET_IND, & l1_reset}, 
        {ST_L1_F3, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F4, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F5, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F6, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F7, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F8, EV_DEACT_CNF, & l1_deact_cnf}, 
        {ST_L1_F6, EV_DEACT_IND, & l1_deact_req_s}, 
        {ST_L1_F7, EV_DEACT_IND, & l1_deact_req_s}, 
        {ST_L1_F8, EV_DEACT_IND, & l1_deact_req_s}, 
        {ST_L1_F3, EV_POWER_UP, & l1_power_up_s}, 
        {ST_L1_F4, EV_ANYSIG_IND, & l1_go_F5}, 
        {ST_L1_F6, EV_ANYSIG_IND, & l1_go_F8}, 
        {ST_L1_F7, EV_ANYSIG_IND, & l1_go_F8}, 
        {ST_L1_F3, EV_INFO2_IND, & l1_info2_ind}, 
        {ST_L1_F4, EV_INFO2_IND, & l1_info2_ind}, 
        {ST_L1_F5, EV_INFO2_IND, & l1_info2_ind}, 
        {ST_L1_F7, EV_INFO2_IND, & l1_info2_ind}, 
        {ST_L1_F8, EV_INFO2_IND, & l1_info2_ind}, 
        {ST_L1_F3, EV_INFO4_IND, & l1_info4_ind}, 
        {ST_L1_F4, EV_INFO4_IND, & l1_info4_ind}, 
        {ST_L1_F5, EV_INFO4_IND, & l1_info4_ind}, 
        {ST_L1_F6, EV_INFO4_IND, & l1_info4_ind}, 
        {ST_L1_F8, EV_INFO4_IND, & l1_info4_ind}, 
        {ST_L1_F3, EV_TIMER3, & l1_timer3}, 
        {ST_L1_F4, EV_TIMER3, & l1_timer3}, 
        {ST_L1_F5, EV_TIMER3, & l1_timer3}, 
        {ST_L1_F6, EV_TIMER3, & l1_timer3}, 
        {ST_L1_F8, EV_TIMER3, & l1_timer3}, 
        {ST_L1_F7, EV_TIMER_ACT, & l1_timer_act}, 
        {ST_L1_F3, EV_TIMER_DEACT, & l1_timer_deact}, 
        {ST_L1_F4, EV_TIMER_DEACT, & l1_timer_deact}, 
        {ST_L1_F5, EV_TIMER_DEACT, & l1_timer_deact}, 
        {ST_L1_F6, EV_TIMER_DEACT, & l1_timer_deact}, 
        {ST_L1_F7, EV_TIMER_DEACT, & l1_timer_deact}, 
        {ST_L1_F8, EV_TIMER_DEACT, & l1_timer_deact}};
#line 301
static void release_l1(struct layer1 *l1 ) ;
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1594  __attribute__((__section__("_ftrace_branch")))  =    {"release_l1",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    301, {{0UL, 0UL}}};
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static void release_l1(struct layer1 *l1 ) 
{ 
  int ______r ;

  {
#line 300
  mISDN_FsmDelTimer(& l1->timer, 0);
#line 301
  ______r = ! (! l1->dch);
#line 301
  ______f___1594.__annonCompField3.miss_hit[______r] = ______f___1594.__annonCompField3.miss_hit[______r] + 1UL;
#line 301
  if (______r) {
#line 302
    (l1->dch)->l1 = (void *)0;
  } else {

  }
#line 303
  module_put(& __this_module);
#line 304
  kfree(l1);
#line 305
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1595  __attribute__((__section__("_ftrace_branch")))  =    {"l1_event",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    312, {{0UL, 0UL}}};
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1596  __attribute__((__section__("_ftrace_branch")))  =    {"l1_event",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    343, {{0UL, 0UL}}};
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1597  __attribute__((__section__("_ftrace_branch")))  =    {"l1_event",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    354, {{0UL, 0UL}}};
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
int l1_event(struct layer1 *l1 , u_int event ) 
{ 
  int err ;
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___1 ;

  {
#line 310
  err = 0;
#line 312
  ______r = ! (! (! l1));
#line 312
  ______f___1595.__annonCompField3.miss_hit[______r] = ______f___1595.__annonCompField3.miss_hit[______r] + 1UL;
#line 312
  if (______r) {
#line 313
    return (-22);
  } else {

  }
#line 314
  switch (event) {
  case (u_int )36866: 
#line 316
  mISDN_FsmEvent(& l1->l1m, EV_RESET_IND, (void *)0);
#line 317
  break;
  case (u_int )37378: 
#line 319
  mISDN_FsmEvent(& l1->l1m, EV_DEACT_IND, (void *)0);
#line 320
  break;
  case (u_int )37122: 
#line 322
  mISDN_FsmEvent(& l1->l1m, EV_POWER_UP, (void *)0);
#line 323
  break;
  case (u_int )37890: 
#line 325
  mISDN_FsmEvent(& l1->l1m, EV_DEACT_CNF, (void *)0);
#line 326
  break;
  case (u_int )34818: 
#line 328
  mISDN_FsmEvent(& l1->l1m, EV_ANYSIG_IND, (void *)0);
#line 329
  break;
  case (u_int )34562: 
#line 331
  mISDN_FsmEvent(& l1->l1m, EV_ANYSIG_IND, (void *)0);
#line 332
  break;
  case (u_int )33282: 
#line 334
  mISDN_FsmEvent(& l1->l1m, EV_INFO2_IND, (void *)0);
#line 335
  break;
  case (u_int )34050: 
#line 337
  mISDN_FsmEvent(& l1->l1m, EV_INFO4_IND, (void *)0);
#line 338
  break;
  case (u_int )34306: 
#line 340
  mISDN_FsmEvent(& l1->l1m, EV_INFO4_IND, (void *)0);
#line 341
  break;
  case (u_int )257: 
#line 343
  tmp___4 = constant_test_bit(2, & l1->Flags);
#line 343
  if (tmp___4) {
#line 343
    tmp___6 = 1;
  } else {
#line 343
    tmp___6 = 0;
  }
#line 343
  ______r___0 = tmp___6;
#line 343
  ______f___1596.__annonCompField3.miss_hit[______r___0] = ______f___1596.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 343
  if (______r___0) {
#line 344
    (*(l1->dcb))(l1->dch, 258);
  } else {
#line 346
    test_and_set_bit(1, & l1->Flags);
#line 347
    mISDN_FsmEvent(& l1->l1m, EV_PH_ACTIVATE, (void *)0);
  }
#line 349
  break;
  case (u_int )512: 
#line 351
  release_l1(l1);
#line 352
  break;
  default: 
#line 354
  ______r___1 = ! (! (*debug___3 & 65280U));
#line 354
  ______f___1597.__annonCompField3.miss_hit[______r___1] = ______f___1597.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 354
  if (______r___1) {
#line 355
    printk("<7>%s %x unhandled\n", "l1_event", event);
  } else {

  }
#line 357
  err = -22;
  }
#line 359
  return (err);
}
}
#line 361
extern void *__crc_l1_event  __attribute__((__weak__)) ;
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static unsigned long const   __kcrctab_l1_event  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_l1_event);
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static char const   __kstrtab_l1_event[9]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 361
  {      'l',      '1',      '_',      'e', 
        'v',      'e',      'n',      't', 
        '\000'};
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct kernel_symbol  const  __ksymtab_l1_event  __attribute__((__used__, __unused__,
__section__("__ksymtab")))  =    {(unsigned long )(& l1_event), __kstrtab_l1_event};
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1598  __attribute__((__section__("_ftrace_branch")))  =    {"create_l1",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c",
    368, {{0UL, 0UL}}};
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) 
{ 
  struct layer1 *nl1 ;
  void *tmp ;
  int ______r ;

  {
#line 367
  tmp = kzalloc___2(sizeof(struct layer1 ), 32U);
#line 367
  nl1 = tmp;
#line 368
  ______r = ! (! (! nl1));
#line 368
  ______f___1598.__annonCompField3.miss_hit[______r] = ______f___1598.__annonCompField3.miss_hit[______r] + 1UL;
#line 368
  if (______r) {
#line 369
    printk("<3>kmalloc struct layer1 failed\n");
#line 370
    return (-12);
  } else {

  }
#line 372
  nl1->l1m.fsm = & l1fsm_s;
#line 373
  nl1->l1m.state = ST_L1_F3;
#line 374
  nl1->Flags = 0;
#line 375
  nl1->l1m.debug = *debug___3 & 512U;
#line 376
  nl1->l1m.userdata = nl1;
#line 377
  nl1->l1m.userint = 0;
#line 378
  nl1->l1m.printdebug = & l1m_debug;
#line 379
  nl1->dch = dch;
#line 380
  nl1->dcb = dcb;
#line 381
  mISDN_FsmInitTimer(& nl1->l1m, & nl1->timer);
#line 382
  __module_get(& __this_module);
#line 383
  dch->l1 = nl1;
#line 384
  return (0);
}
}
#line 386
extern void *__crc_create_l1  __attribute__((__weak__)) ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static unsigned long const   __kcrctab_create_l1  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_create_l1);
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static char const   __kstrtab_create_l1[10]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 386
  {      'c',      'r',      'e',      'a', 
        't',      'e',      '_',      'l', 
        '1',      '\000'};
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
static struct kernel_symbol  const  __ksymtab_create_l1  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& create_l1), __kstrtab_create_l1};
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
int l1_init(u_int *deb ) 
{ 


  {
#line 391
  debug___3 = deb;
#line 392
  l1fsm_s.state_count = ST_L1_F8 + 1;
#line 393
  l1fsm_s.event_count = EV_TIMER3 + 1;
#line 394
  l1fsm_s.strEvent = strL1Event;
#line 395
  l1fsm_s.strState = strL1SState;
#line 396
  mISDN_FsmNew(& l1fsm_s, L1SFnList, sizeof(L1SFnList) / sizeof(L1SFnList[0]) + (sizeof(char [1 - 2 * 0]) - 1UL));
#line 397
  return (0);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer1.c"
void l1_cleanup(void) 
{ 


  {
#line 403
  mISDN_FsmFree(& l1fsm_s);
#line 404
  return;
}
}
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1599  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1600  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1601  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___1601, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___1600.__annonCompField3.miss_hit[______r___2] = ______f___1600.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___1599.__annonCompField3.miss_hit[______r] = ______f___1599.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___3)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1602  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1603  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1604  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1605  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1606  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1607  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1608  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1609  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1610  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1611  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1612  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1613  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1614  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1615  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1616  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1617  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1618  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1619  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1620  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1621  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1622  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1623  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1624  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___3)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___1602.__annonCompField3.miss_hit[______r] = ______f___1602.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___1603.__annonCompField3.miss_hit[______r___0] = ______f___1603.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___1604.__annonCompField3.miss_hit[______r___1] = ______f___1604.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___1605.__annonCompField3.miss_hit[______r___2] = ______f___1605.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___1606.__annonCompField3.miss_hit[______r___3] = ______f___1606.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___1607.__annonCompField3.miss_hit[______r___4] = ______f___1607.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___1608.__annonCompField3.miss_hit[______r___5] = ______f___1608.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___1609.__annonCompField3.miss_hit[______r___6] = ______f___1609.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___1610.__annonCompField3.miss_hit[______r___7] = ______f___1610.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___1611.__annonCompField3.miss_hit[______r___8] = ______f___1611.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___1612.__annonCompField3.miss_hit[______r___9] = ______f___1612.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___1613.__annonCompField3.miss_hit[______r___10] = ______f___1613.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___1614.__annonCompField3.miss_hit[______r___11] = ______f___1614.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___1615.__annonCompField3.miss_hit[______r___12] = ______f___1615.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___1616.__annonCompField3.miss_hit[______r___13] = ______f___1616.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___1617.__annonCompField3.miss_hit[______r___14] = ______f___1617.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___1618.__annonCompField3.miss_hit[______r___15] = ______f___1618.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___1619.__annonCompField3.miss_hit[______r___16] = ______f___1619.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___1620.__annonCompField3.miss_hit[______r___17] = ______f___1620.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___1621.__annonCompField3.miss_hit[______r___18] = ______f___1621.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___1622.__annonCompField3.miss_hit[______r___19] = ______f___1622.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___1623.__annonCompField3.miss_hit[______r___20] = ______f___1623.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___1624.__annonCompField3.miss_hit[______r___21] = ______f___1624.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___3)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1625  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___3)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___3(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___1625.__annonCompField3.miss_hit[______r] = ______f___1625.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___3)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___3((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___3)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1626  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1627  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1628  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___3)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___1626.__annonCompField3.miss_hit[______r] = ______f___1626.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___3(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___1628.__annonCompField3.miss_hit[______r___1] = ______f___1628.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___3(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___1627.__annonCompField3.miss_hit[______r___0] = ______f___1627.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___3((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___3(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___3(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 449 "include/linux/skbuff.h"
extern struct sk_buff *skb_clone(struct sk_buff *skb , gfp_t priority ) ;
#line 784 "include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head  const  *list_ ) 
{ 


  {
#line 786
  return (list_->qlen);
}
}
#line 815 "include/linux/skbuff.h"
static struct lock_class_key __key___10  ;
#line 813 "include/linux/skbuff.h"
__inline static void skb_queue_head_init___1(struct sk_buff_head *list ) 
{ 


  {
#line 815
  while (1) {
#line 815
    __spin_lock_init(& list->lock, "&list->lock", & __key___10);
#line 815
    break;
  }
#line 816
  __skb_queue_head_init(list);
#line 817
  return;
}
}
#line 1165 "include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff  const  *skb ) 
{ 


  {
#line 1167
  return (skb->data - skb->head);
}
}
#line 1374
extern void skb_trim(struct sk_buff *skb , unsigned int len ) ;
#line 516 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___0(unsigned int len , gfp_t gfp_mask ) ;
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1629  __attribute__((__section__("_ftrace_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1630  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 510 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___0(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 515
  skb = alloc_skb((unsigned long )len + sizeof(struct mISDNhead ), gfp_mask);
#line 516
  tmp___2 = __builtin_expect(! (! skb), 1);
#line 516
  ______r___2 = tmp___2;
#line 516
  ftrace_likely_update(& ______f___1630, ______r___2, 1);
#line 516
  if (______r___2) {
#line 516
    tmp___3 = 1;
  } else {
#line 516
    tmp___3 = 0;
  }
#line 516
  ______r___1 = tmp___3;
#line 516
  ______f___1629.__annonCompField3.miss_hit[______r___1] = ______f___1629.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 516
  if (______r___1) {
#line 517
    skb_reserve(skb, sizeof(struct mISDNhead ));
  } else {

  }
#line 518
  return (skb);
}
}
#line 92 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) ;
#line 94
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 98
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 99
void TEIrelease(struct layer2 *l2 ) ;
#line 100
int TEIInit(u_int *deb ) ;
#line 101
void TEIFree(void) ;
#line 24 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static u_int *debug___4  ;
#line 26 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct Fsm l2fsm  =    {(void *)0, 0, 0, (void *)0, (void *)0};
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static char *strL2State[8]  = 
#line 29
  {      "ST_L2_1",      "ST_L2_2",      "ST_L2_3",      "ST_L2_4", 
        "ST_L2_5",      "ST_L2_6",      "ST_L2_7",      "ST_L2_8"};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static char *strL2Event[22]  = 
#line 68
  {      "EV_L2_UI",      "EV_L2_SABME",      "EV_L2_DISC",      "EV_L2_DM", 
        "EV_L2_UA",      "EV_L2_FRMR",      "EV_L2_SUPER",      "EV_L2_I", 
        "EV_L2_DL_DATA",      "EV_L2_ACK_PULL",      "EV_L2_DL_UNITDATA",      "EV_L2_DL_ESTABLISH_REQ", 
        "EV_L2_DL_RELEASE_REQ",      "EV_L2_MDL_ASSIGN",      "EV_L2_MDL_REMOVE",      "EV_L2_MDL_ERROR", 
        "EV_L1_DEACTIVATE",      "EV_L2_T200",      "EV_L2_T203",      "EV_L2_SET_OWN_BUSY", 
        "EV_L2_CLEAR_OWN_BUSY",      "EV_L2_FRAME_ERROR"};
#line 100
static void l2m_debug(struct FsmInst *fi , char *fmt  , ...) ;
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1631  __attribute__((__section__("_ftrace_branch")))  =    {"l2m_debug",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    100, {{0UL, 0UL}}};
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer2 *l2 ;
  va_list va ;
  int ______r ;

  {
#line 97
  l2 = fi->userdata;
#line 100
  ______r = ! (! (! (*debug___4 & 131072U)));
#line 100
  ______f___1631.__annonCompField3.miss_hit[______r] = ______f___1631.__annonCompField3.miss_hit[______r] + 1UL;
#line 100
  if (______r) {
#line 101
    return;
  } else {

  }
#line 102
  __builtin_va_start(va);
#line 103
  printk("<7>l2 (tei %d): ", l2->tei);
#line 104
  vprintk(fmt, va);
#line 105
  printk("\n");
#line 106
  __builtin_va_end(va);
#line 107
  return;
}
}
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline u_int l2headersize(struct layer2 *l2 , int ui ) 
{ 
  int tmp ;
  int tmp___1 ;

  {
#line 112
  tmp = constant_test_bit(3, & l2->flag);
#line 112
  tmp___1 = constant_test_bit(1, & l2->flag);
#line 112
  return ((tmp && ! ui ? 2 : 1) + (tmp___1 ? 2 : 1));
}
}
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline u_int l2addrsize(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 119
  tmp = constant_test_bit(1, & l2->flag);
#line 119
  return (tmp ? 2 : 1);
}
}
#line 128
static u_int l2_newid(struct layer2 *l2 ) ;
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1632  __attribute__((__section__("_ftrace_branch")))  =    {"l2_newid",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    128, {{0UL, 0UL}}};
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static u_int l2_newid(struct layer2 *l2 ) 
{ 
  u_int id ;
  u_int tmp ;
  int ______r ;

  {
#line 127
  tmp = l2->next_id;
#line 127
  l2->next_id = l2->next_id + (u_int )1;
#line 127
  id = tmp;
#line 128
  ______r = ! (! (id == (u_int )32767));
#line 128
  ______f___1632.__annonCompField3.miss_hit[______r] = ______f___1632.__annonCompField3.miss_hit[______r] + 1UL;
#line 128
  if (______r) {
#line 129
    l2->next_id = 1;
  } else {

  }
#line 130
  id = id << 16;
#line 131
  id = id | (unsigned int )((int )l2->tei << 8);
#line 132
  id = id | (unsigned int )l2->sapi;
#line 133
  return (id);
}
}
#line 141
static void l2up(struct layer2 *l2 , u_int prim , struct sk_buff *skb ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1633  __attribute__((__section__("_ftrace_branch")))  =    {"l2up",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    141, {{0UL, 0UL}}};
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1634  __attribute__((__section__("_ftrace_branch")))  =    {"l2up",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    146, {{0UL, 0UL}}};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2up(struct layer2 *l2 , u_int prim , struct sk_buff *skb ) 
{ 
  int err ;
  int ______r ;
  int ______r___0 ;

  {
#line 141
  ______r = ! (! (! l2->up));
#line 141
  ______f___1633.__annonCompField3.miss_hit[______r] = ______f___1633.__annonCompField3.miss_hit[______r] + 1UL;
#line 141
  if (______r) {
#line 142
    return;
  } else {

  }
#line 143
  ((struct mISDNhead *)(& skb->cb[0]))->prim = prim;
#line 144
  ((struct mISDNhead *)(& skb->cb[0]))->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 145
  err = (*((l2->up)->send))(l2->up, skb);
#line 146
  ______r___0 = ! (! err);
#line 146
  ______f___1634.__annonCompField3.miss_hit[______r___0] = ______f___1634.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 146
  if (______r___0) {
#line 147
    printk("<4>%s: err=%d\n", "l2up", err);
#line 148
    consume_skb(skb);
  } else {

  }
#line 150
  return;
}
}
#line 159
static void l2up_create(struct layer2 *l2 , u_int prim , int len , void *arg ) ;
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1635  __attribute__((__section__("_ftrace_branch")))  =    {"l2up_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    159, {{0UL, 0UL}}};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1636  __attribute__((__section__("_ftrace_branch")))  =    {"l2up_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    162, {{0UL, 0UL}}};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1637  __attribute__((__section__("_ftrace_branch")))  =    {"l2up_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    167, {{0UL, 0UL}}};
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1638  __attribute__((__section__("_ftrace_branch")))  =    {"l2up_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    170, {{0UL, 0UL}}};
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2up_create(struct layer2 *l2 , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  int ______r ;
  int ______r___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___2 ;
  int ______r___3 ;

  {
#line 159
  ______r = ! (! (! l2->up));
#line 159
  ______f___1635.__annonCompField3.miss_hit[______r] = ______f___1635.__annonCompField3.miss_hit[______r] + 1UL;
#line 159
  if (______r) {
#line 160
    return;
  } else {

  }
#line 161
  skb = mI_alloc_skb___0(len, 32U);
#line 162
  ______r___0 = ! (! (! skb));
#line 162
  ______f___1636.__annonCompField3.miss_hit[______r___0] = ______f___1636.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 162
  if (______r___0) {
#line 163
    return;
  } else {

  }
#line 164
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 165
  hh->prim = prim;
#line 166
  hh->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 167
  ______r___2 = ! (! len);
#line 167
  ______f___1637.__annonCompField3.miss_hit[______r___2] = ______f___1637.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 167
  if (______r___2) {
#line 168
    __len = len;
#line 168
    tmp___0 = skb_put(skb, len);
#line 168
    __ret = __builtin_memcpy(tmp___0, arg, __len);
  } else {

  }
#line 169
  err = (*((l2->up)->send))(l2->up, skb);
#line 170
  ______r___3 = ! (! err);
#line 170
  ______f___1638.__annonCompField3.miss_hit[______r___3] = ______f___1638.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 170
  if (______r___3) {
#line 171
    printk("<4>%s: err=%d\n", "l2up_create", err);
#line 172
    consume_skb(skb);
  } else {

  }
#line 174
  return;
}
}
#line 181
static int l2down_skb(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1639  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_skb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    181, {{0UL, 0UL}}};
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2down_skb(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ret ;
  int ______r ;

  {
#line 180
  ret = (*(l2->ch.recv))(l2->ch.peer, skb);
#line 181
  ______r = ! (! (ret && *debug___4 & 524288U));
#line 181
  ______f___1639.__annonCompField3.miss_hit[______r] = ______f___1639.__annonCompField3.miss_hit[______r] + 1UL;
#line 181
  if (______r) {
#line 182
    printk("<7>l2down_skb: ret(%d)\n", ret);
  } else {

  }
#line 183
  return (ret);
}
}
#line 192
static int l2down_raw(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1640  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_raw",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    192, {{0UL, 0UL}}};
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1641  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_raw",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    191, {{0UL, 0UL}}};
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2down_raw(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___0 ;
  int tmp___4 ;

  {
#line 189
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 191
  ______r___0 = ! (! (hh->prim == 8193U));
#line 191
  ______f___1641.__annonCompField3.miss_hit[______r___0] = ______f___1641.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 191
  if (______r___0) {
#line 192
    tmp___2 = test_and_set_bit(17, & l2->flag);
#line 192
    if (tmp___2) {
#line 192
      tmp___3 = 1;
    } else {
#line 192
      tmp___3 = 0;
    }
#line 192
    ______r = tmp___3;
#line 192
    ______f___1640.__annonCompField3.miss_hit[______r] = ______f___1640.__annonCompField3.miss_hit[______r] + 1UL;
#line 192
    if (______r) {
#line 193
      skb_queue_tail(& l2->down_queue, skb);
#line 194
      return (0);
    } else {

    }
#line 196
    l2->down_id = ((struct mISDNhead *)(& skb->cb[0]))->id;
  } else {

  }
#line 198
  tmp___4 = l2down_skb(l2, skb);
#line 198
  return (tmp___4);
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2down(struct layer2 *l2 , u_int prim , u_int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
#line 204
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 206
  hh->prim = prim;
#line 207
  hh->id = id;
#line 208
  tmp = l2down_raw(l2, skb);
#line 208
  return (tmp);
}
}
#line 219
static int l2down_create(struct layer2 *l2 , u_int prim , u_int id , int len , void *arg ) ;
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1642  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    219, {{0UL, 0UL}}};
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1643  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    224, {{0UL, 0UL}}};
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1644  __attribute__((__section__("_ftrace_branch")))  =    {"l2down_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    227, {{0UL, 0UL}}};
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2down_create(struct layer2 *l2 , u_int prim , u_int id , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  int err ;
  struct mISDNhead *hh ;
  int ______r ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 218
  skb = mI_alloc_skb___0(len, 32U);
#line 219
  ______r = ! (! (! skb));
#line 219
  ______f___1642.__annonCompField3.miss_hit[______r] = ______f___1642.__annonCompField3.miss_hit[______r] + 1UL;
#line 219
  if (______r) {
#line 220
    return (-12);
  } else {

  }
#line 221
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 222
  hh->prim = prim;
#line 223
  hh->id = id;
#line 224
  ______r___1 = ! (! len);
#line 224
  ______f___1643.__annonCompField3.miss_hit[______r___1] = ______f___1643.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 224
  if (______r___1) {
#line 225
    __len = len;
#line 225
    tmp___0 = skb_put(skb, len);
#line 225
    __ret = __builtin_memcpy(tmp___0, arg, __len);
  } else {

  }
#line 226
  err = l2down_raw(l2, skb);
#line 227
  ______r___2 = ! (! err);
#line 227
  ______f___1644.__annonCompField3.miss_hit[______r___2] = ______f___1644.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 227
  if (______r___2) {
#line 228
    consume_skb(skb);
  } else {

  }
#line 229
  return (err);
}
}
#line 242
static int ph_data_confirm(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) ;
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1645  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    242, {{0UL, 0UL}}};
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1646  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    240, {{0UL, 0UL}}};
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1647  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    248, {{0UL, 0UL}}};
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1648  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    252, {{0UL, 0UL}}};
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1649  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    238, {{0UL, 0UL}}};
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1650  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    237, {{0UL, 0UL}}};
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1651  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    262, {{0UL, 0UL}}};
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1652  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    260, {{0UL, 0UL}}};
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1653  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_confirm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    258, {{0UL, 0UL}}};
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int ph_data_confirm(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  struct sk_buff *nskb ;
  int ret ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int tmp___9 ;
  int tmp___11 ;
  int ______r___5 ;
  int tmp___15 ;
  int tmp___16 ;
  int ______r___6 ;
  int ______r___7 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 234
  nskb = skb;
#line 235
  ret = -11;
#line 237
  tmp___9 = constant_test_bit(17, & l2->flag);
#line 237
  if (tmp___9) {
#line 237
    tmp___11 = 1;
  } else {
#line 237
    tmp___11 = 0;
  }
#line 237
  ______r___4 = tmp___11;
#line 237
  ______f___1650.__annonCompField3.miss_hit[______r___4] = ______f___1650.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 237
  if (______r___4) {
#line 238
    ______r___3 = ! (! (hh->id == l2->down_id));
#line 238
    ______f___1649.__annonCompField3.miss_hit[______r___3] = ______f___1649.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 238
    if (______r___3) {
#line 239
      nskb = skb_dequeue(& l2->down_queue);
#line 240
      ______r___0 = ! (! nskb);
#line 240
      ______f___1646.__annonCompField3.miss_hit[______r___0] = ______f___1646.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 240
      if (______r___0) {
#line 241
        l2->down_id = ((struct mISDNhead *)(& nskb->cb[0]))->id;
#line 242
        tmp___2 = l2down_skb(l2, nskb);
#line 242
        if (tmp___2) {
#line 242
          tmp___3 = 1;
        } else {
#line 242
          tmp___3 = 0;
        }
#line 242
        ______r = tmp___3;
#line 242
        ______f___1645.__annonCompField3.miss_hit[______r] = ______f___1645.__annonCompField3.miss_hit[______r] + 1UL;
#line 242
        if (______r) {
#line 243
          consume_skb(nskb);
#line 244
          l2->down_id = 65534;
        } else {

        }
      } else {
#line 247
        l2->down_id = 65534;
      }
#line 248
      ______r___1 = ! (! ret);
#line 248
      ______f___1647.__annonCompField3.miss_hit[______r___1] = ______f___1647.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 248
      if (______r___1) {
#line 249
        consume_skb(skb);
#line 250
        ret = 0;
      } else {

      }
#line 252
      ______r___2 = ! (! (l2->down_id == (u_int )65534));
#line 252
      ______f___1648.__annonCompField3.miss_hit[______r___2] = ______f___1648.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 252
      if (______r___2) {
#line 253
        test_and_clear_bit(17, & l2->flag);
#line 254
        mISDN_FsmEvent(& l2->l2m, EV_L2_ACK_PULL, (void *)0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 258
  tmp___21 = test_and_set_bit(17, & l2->flag);
#line 258
  if (tmp___21) {
#line 258
    tmp___22 = 0;
  } else {
#line 258
    tmp___22 = 1;
  }
#line 258
  ______r___7 = tmp___22;
#line 258
  ______f___1653.__annonCompField3.miss_hit[______r___7] = ______f___1653.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 258
  if (______r___7) {
#line 259
    nskb = skb_dequeue(& l2->down_queue);
#line 260
    ______r___6 = ! (! nskb);
#line 260
    ______f___1652.__annonCompField3.miss_hit[______r___6] = ______f___1652.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 260
    if (______r___6) {
#line 261
      l2->down_id = ((struct mISDNhead *)(& nskb->cb[0]))->id;
#line 262
      tmp___15 = l2down_skb(l2, nskb);
#line 262
      if (tmp___15) {
#line 262
        tmp___16 = 1;
      } else {
#line 262
        tmp___16 = 0;
      }
#line 262
      ______r___5 = tmp___16;
#line 262
      ______f___1651.__annonCompField3.miss_hit[______r___5] = ______f___1651.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 262
      if (______r___5) {
#line 263
        consume_skb(nskb);
#line 264
        l2->down_id = 65534;
#line 265
        test_and_clear_bit(17, & l2->flag);
      } else {

      }
    } else {
#line 268
      test_and_clear_bit(17, & l2->flag);
    }
  } else {

  }
#line 270
  return (ret);
}
}
#line 279
static int l2mgr(struct layer2 *l2 , u_int prim , void *arg ) ;
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1654  __attribute__((__section__("_ftrace_branch")))  =    {"l2mgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    280, {{0UL, 0UL}}};
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2mgr(struct layer2 *l2 , u_int prim , void *arg ) 
{ 
  long c ;
  int ______r ;
  int tmp___9 ;
  int tmp___11 ;
  int tmp___13 ;

  {
#line 275
  c = (long )arg;
#line 277
  printk("<4>l2mgr: addr:%x prim %x %c\n", l2->id, prim, (char )c);
#line 279
  tmp___9 = constant_test_bit(1, & l2->flag);
#line 279
  if (tmp___9) {
#line 279
    tmp___11 = constant_test_bit(15, & l2->flag);
#line 279
    if (tmp___11) {
#line 279
      tmp___13 = 0;
    } else {
#line 279
      tmp___13 = 1;
    }
  } else {
#line 279
    tmp___13 = 0;
  }
#line 279
  ______r = tmp___13;
#line 279
  ______f___1654.__annonCompField3.miss_hit[______r] = ______f___1654.__annonCompField3.miss_hit[______r] + 1UL;
#line 279
  if (______r) {
#line 281
    switch (c) {
    case (long )'H': 
    case (long )'G': 
    case (long )'D': 
    case (long )'C': 
#line 286
    l2_tei(l2, prim, (u_long )arg);
#line 287
    break;
    }
  } else {

  }
#line 290
  return (0);
}
}
#line 296
static void set_peer_busy(struct layer2 *l2 ) ;
#line 296 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1655  __attribute__((__section__("_ftrace_branch")))  =    {"set_peer_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    296, {{0UL, 0UL}}};
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void set_peer_busy(struct layer2 *l2 ) 
{ 
  int ______r ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;

  {
#line 295
  test_and_set_bit(10, & l2->flag);
#line 296
  tmp___5 = skb_queue_len(& l2->i_queue);
#line 296
  if (tmp___5) {
#line 296
    tmp___7 = 1;
  } else {
#line 296
    tmp___6 = skb_queue_len(& l2->ui_queue);
#line 296
    if (tmp___6) {
#line 296
      tmp___7 = 1;
    } else {
#line 296
      tmp___7 = 0;
    }
  }
#line 296
  ______r = tmp___7;
#line 296
  ______f___1655.__annonCompField3.miss_hit[______r] = ______f___1655.__annonCompField3.miss_hit[______r] + 1UL;
#line 296
  if (______r) {
#line 297
    test_and_set_bit(16, & l2->flag);
  } else {

  }
#line 298
  return;
}
}
#line 302
static void clear_peer_busy(struct layer2 *l2 ) ;
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1656  __attribute__((__section__("_ftrace_branch")))  =    {"clear_peer_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    302, {{0UL, 0UL}}};
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void clear_peer_busy(struct layer2 *l2 ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 302
  tmp___2 = test_and_clear_bit(10, & l2->flag);
#line 302
  if (tmp___2) {
#line 302
    tmp___3 = 1;
  } else {
#line 302
    tmp___3 = 0;
  }
#line 302
  ______r = tmp___3;
#line 302
  ______f___1656.__annonCompField3.miss_hit[______r] = ______f___1656.__annonCompField3.miss_hit[______r] + 1UL;
#line 302
  if (______r) {
#line 303
    test_and_clear_bit(16, & l2->flag);
  } else {

  }
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void InitWin(struct layer2 *l2 ) 
{ 
  int i ;

  {
#line 311
  i = 0;
#line 311
  while (1) {
#line 311
    if (i < 8) {

    } else {
#line 311
      break;
    }
#line 312
    l2->windowar[i] = (void *)0;
#line 311
    i = i + 1;
  }
#line 313
  return;
}
}
#line 321
static int freewin(struct layer2 *l2 ) ;
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1657  __attribute__((__section__("_ftrace_branch")))  =    {"freewin",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    321, {{0UL, 0UL}}};
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int freewin(struct layer2 *l2 ) 
{ 
  int i ;
  int cnt ;
  int ______r ;

  {
#line 318
  cnt = 0;
#line 320
  i = 0;
#line 320
  while (1) {
#line 320
    if (i < 8) {

    } else {
#line 320
      break;
    }
#line 321
    ______r = ! (! l2->windowar[i]);
#line 321
    ______f___1657.__annonCompField3.miss_hit[______r] = ______f___1657.__annonCompField3.miss_hit[______r] + 1UL;
#line 321
    if (______r) {
#line 322
      cnt = cnt + 1;
#line 323
      consume_skb(l2->windowar[i]);
#line 324
      l2->windowar[i] = (void *)0;
    } else {

    }
#line 320
    i = i + 1;
  }
#line 327
  return (cnt);
}
}
#line 335
static void ReleaseWin(struct layer2 *l2 ) ;
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1658  __attribute__((__section__("_ftrace_branch")))  =    {"ReleaseWin",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    335, {{0UL, 0UL}}};
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void ReleaseWin(struct layer2 *l2 ) 
{ 
  int cnt ;
  int tmp ;
  int ______r ;

  {
#line 333
  tmp = freewin(l2);
#line 333
  cnt = tmp;
#line 335
  ______r = ! (! cnt);
#line 335
  ______f___1658.__annonCompField3.miss_hit[______r] = ______f___1658.__annonCompField3.miss_hit[______r] + 1UL;
#line 335
  if (______r) {
#line 336
    printk("<4>isdnl2 freed %d skbuffs in release\n", cnt);
  } else {

  }
#line 338
  return;
}
}
#line 345
__inline unsigned int cansend(struct layer2 *l2 ) ;
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1659  __attribute__((__section__("_ftrace_branch")))  =    {"cansend",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    345, {{0UL, 0UL}}};
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline unsigned int cansend(struct layer2 *l2 ) 
{ 
  unsigned int p1 ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___9 ;

  {
#line 345
  tmp___4 = constant_test_bit(3, & l2->flag);
#line 345
  if (tmp___4) {
#line 345
    tmp___6 = 1;
  } else {
#line 345
    tmp___6 = 0;
  }
#line 345
  ______r = tmp___6;
#line 345
  ______f___1659.__annonCompField3.miss_hit[______r] = ______f___1659.__annonCompField3.miss_hit[______r] + 1UL;
#line 345
  if (______r) {
#line 346
    p1 = (l2->vs - l2->va) % 128U;
  } else {
#line 348
    p1 = (l2->vs - l2->va) % 8U;
  }
#line 349
  if (p1 < l2->window) {
#line 349
    tmp___7 = constant_test_bit(10, & l2->flag);
#line 349
    if (tmp___7) {
#line 349
      tmp___9 = 0;
    } else {
#line 349
      tmp___9 = 1;
    }
  } else {
#line 349
    tmp___9 = 0;
  }
#line 349
  return (tmp___9);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void clear_exception(struct layer2 *l2 ) 
{ 


  {
#line 355
  test_and_clear_bit(7, & l2->flag);
#line 356
  test_and_clear_bit(8, & l2->flag);
#line 357
  test_and_clear_bit(9, & l2->flag);
#line 358
  clear_peer_busy(l2);
#line 359
  return;
}
}
#line 368
static int sethdraddr(struct layer2 *l2 , u_char *header , int rsp ) ;
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1660  __attribute__((__section__("_ftrace_branch")))  =    {"sethdraddr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    368, {{0UL, 0UL}}};
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1661  __attribute__((__section__("_ftrace_branch")))  =    {"sethdraddr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    374, {{0UL, 0UL}}};
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1662  __attribute__((__section__("_ftrace_branch")))  =    {"sethdraddr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    376, {{0UL, 0UL}}};
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1663  __attribute__((__section__("_ftrace_branch")))  =    {"sethdraddr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    367, {{0UL, 0UL}}};
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int sethdraddr(struct layer2 *l2 , u_char *header , int rsp ) 
{ 
  u_char *ptr ;
  int crbit ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  u_char *tmp___7 ;
  u_char *tmp___8 ;
  int ______r___0 ;
  int tmp___14 ;
  int tmp___16 ;
  u_char *tmp___17 ;
  u_char *tmp___18 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___24 ;
  int tmp___26 ;

  {
#line 364
  ptr = header;
#line 365
  crbit = rsp;
#line 367
  tmp___24 = constant_test_bit(1, & l2->flag);
#line 367
  if (tmp___24) {
#line 367
    tmp___26 = 1;
  } else {
#line 367
    tmp___26 = 0;
  }
#line 367
  ______r___2 = tmp___26;
#line 367
  ______f___1663.__annonCompField3.miss_hit[______r___2] = ______f___1663.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 367
  if (______r___2) {
#line 368
    tmp___4 = constant_test_bit(18, & l2->flag);
#line 368
    if (tmp___4) {
#line 368
      tmp___6 = 1;
    } else {
#line 368
      tmp___6 = 0;
    }
#line 368
    ______r = tmp___6;
#line 368
    ______f___1660.__annonCompField3.miss_hit[______r] = ______f___1660.__annonCompField3.miss_hit[______r] + 1UL;
#line 368
    if (______r) {
#line 369
      crbit = ! crbit;
    } else {

    }
#line 370
    tmp___7 = ptr;
#line 370
    ptr = ptr + 1;
#line 370
    *tmp___7 = ((int )l2->sapi << 2) | (crbit ? 2 : 0);
#line 371
    tmp___8 = ptr;
#line 371
    ptr = ptr + 1;
#line 371
    *tmp___8 = ((int )l2->tei << 1) | 1;
#line 372
    return (2);
  } else {
#line 374
    tmp___14 = constant_test_bit(2, & l2->flag);
#line 374
    if (tmp___14) {
#line 374
      tmp___16 = 1;
    } else {
#line 374
      tmp___16 = 0;
    }
#line 374
    ______r___0 = tmp___16;
#line 374
    ______f___1661.__annonCompField3.miss_hit[______r___0] = ______f___1661.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 374
    if (______r___0) {
#line 375
      crbit = ! crbit;
    } else {

    }
#line 376
    ______r___1 = ! (! crbit);
#line 376
    ______f___1662.__annonCompField3.miss_hit[______r___1] = ______f___1662.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 376
    if (______r___1) {
#line 377
      tmp___17 = ptr;
#line 377
      ptr = ptr + 1;
#line 377
      *tmp___17 = l2->addr.B;
    } else {
#line 379
      tmp___18 = ptr;
#line 379
      ptr = ptr + 1;
#line 379
      *tmp___18 = l2->addr.A;
    }
#line 380
    return (1);
  }
}
}
#line 387
__inline static void enqueue_super(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1664  __attribute__((__section__("_ftrace_branch")))  =    {"enqueue_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    387, {{0UL, 0UL}}};
#line 384 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline static void enqueue_super(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  u_int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 387
  tmp___4 = l2_newid(l2);
#line 387
  tmp___5 = l2down(l2, 8193, tmp___4, skb);
#line 387
  if (tmp___5) {
#line 387
    tmp___6 = 1;
  } else {
#line 387
    tmp___6 = 0;
  }
#line 387
  ______r = tmp___6;
#line 387
  ______f___1664.__annonCompField3.miss_hit[______r] = ______f___1664.__annonCompField3.miss_hit[______r] + 1UL;
#line 387
  if (______r) {
#line 388
    consume_skb(skb);
  } else {

  }
#line 389
  return;
}
}
#line 394
__inline static void enqueue_ui(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1665  __attribute__((__section__("_ftrace_branch")))  =    {"enqueue_ui",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    394, {{0UL, 0UL}}};
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1666  __attribute__((__section__("_ftrace_branch")))  =    {"enqueue_ui",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    396, {{0UL, 0UL}}};
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline static void enqueue_ui(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  int ______r___0 ;
  u_int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 394
  ______r = ! (! l2->tm);
#line 394
  ______f___1665.__annonCompField3.miss_hit[______r] = ______f___1665.__annonCompField3.miss_hit[______r] + 1UL;
#line 394
  if (______r) {
#line 395
    l2_tei(l2, 7684, 0);
  } else {

  }
#line 396
  tmp___4 = l2_newid(l2);
#line 396
  tmp___5 = l2down(l2, 8193, tmp___4, skb);
#line 396
  if (tmp___5) {
#line 396
    tmp___6 = 1;
  } else {
#line 396
    tmp___6 = 0;
  }
#line 396
  ______r___0 = tmp___6;
#line 396
  ______f___1666.__annonCompField3.miss_hit[______r___0] = ______f___1666.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 396
  if (______r___0) {
#line 397
    consume_skb(skb);
  } else {

  }
#line 398
  return;
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsUI(u_char *data ) 
{ 


  {
#line 403
  return (((int )*(data + 0) & 239) == 3);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsUA(u_char *data ) 
{ 


  {
#line 409
  return (((int )*(data + 0) & 239) == 99);
}
}
#line 412 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsDM(u_char *data ) 
{ 


  {
#line 415
  return (((int )*(data + 0) & 239) == 15);
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsDISC(u_char *data ) 
{ 


  {
#line 421
  return (((int )*(data + 0) & 239) == 67);
}
}
#line 438
__inline int IsSFrame(u_char *data , struct layer2 *l2 ) ;
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1667  __attribute__((__section__("_ftrace_branch")))  =    {"IsSFrame",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    438, {{0UL, 0UL}}};
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsSFrame(u_char *data , struct layer2 *l2 ) 
{ 
  register u_char d ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 436
  d = *data;
#line 438
  tmp___5 = constant_test_bit(3, & l2->flag);
#line 438
  if (tmp___5) {
#line 438
    tmp___7 = 0;
  } else {
#line 438
    tmp___7 = 1;
  }
#line 438
  ______r = tmp___7;
#line 438
  ______f___1667.__annonCompField3.miss_hit[______r] = ______f___1667.__annonCompField3.miss_hit[______r] + 1UL;
#line 438
  if (______r) {
#line 439
    d = (int )d & 15;
  } else {

  }
#line 440
  return (((int )d & 243) == 1 && ((int )d & 12) != 12);
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsSABME(u_char *data , struct layer2 *l2 ) 
{ 
  u_char d ;
  int tmp ;

  {
#line 446
  d = (int )*(data + 0) & ~ 16;
#line 448
  tmp = constant_test_bit(3, & l2->flag);
#line 448
  return (tmp ? (int )d == 111 : (int )d == 47);
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsREJ(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 454
  tmp = constant_test_bit(3, & l2->flag);
#line 454
  return (tmp ? (int )*(data + 0) == 9 : ((int )*(data + 0) & 15) == 9);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsFRMR(u_char *data ) 
{ 


  {
#line 461
  return (((int )*(data + 0) & 239) == 135);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline int IsRNR(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 467
  tmp = constant_test_bit(3, & l2->flag);
#line 467
  return (tmp ? (int )*(data + 0) == 5 : ((int )*(data + 0) & 15) == 5);
}
}
#line 478
static int iframe_error(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1668  __attribute__((__section__("_ftrace_branch")))  =    {"iframe_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    478, {{0UL, 0UL}}};
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1669  __attribute__((__section__("_ftrace_branch")))  =    {"iframe_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    480, {{0UL, 0UL}}};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1670  __attribute__((__section__("_ftrace_branch")))  =    {"iframe_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    482, {{0UL, 0UL}}};
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1671  __attribute__((__section__("_ftrace_branch")))  =    {"iframe_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    484, {{0UL, 0UL}}};
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int iframe_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int i ;
  int rsp ;
  u_int tmp ;
  int tmp___0 ;
  int ______r ;
  int tmp___7 ;
  int tmp___9 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 475
  rsp = (int )*(skb->data) & 2;
#line 477
  tmp = l2addrsize(l2);
#line 477
  tmp___0 = constant_test_bit(3, & l2->flag);
#line 477
  i = tmp + (u_int )(tmp___0 ? 2 : 1);
#line 478
  tmp___7 = constant_test_bit(2, & l2->flag);
#line 478
  if (tmp___7) {
#line 478
    tmp___9 = 1;
  } else {
#line 478
    tmp___9 = 0;
  }
#line 478
  ______r = tmp___9;
#line 478
  ______f___1668.__annonCompField3.miss_hit[______r] = ______f___1668.__annonCompField3.miss_hit[______r] + 1UL;
#line 478
  if (______r) {
#line 479
    rsp = ! rsp;
  } else {

  }
#line 480
  ______r___0 = ! (! rsp);
#line 480
  ______f___1669.__annonCompField3.miss_hit[______r___0] = ______f___1669.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 480
  if (______r___0) {
#line 481
    return ('L');
  } else {

  }
#line 482
  ______r___1 = ! (! (skb->len < i));
#line 482
  ______f___1670.__annonCompField3.miss_hit[______r___1] = ______f___1670.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 482
  if (______r___1) {
#line 483
    return ('N');
  } else {

  }
#line 484
  ______r___2 = ! (! (skb->len - i > l2->maxlen));
#line 484
  ______f___1671.__annonCompField3.miss_hit[______r___2] = ______f___1671.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 484
  if (______r___2) {
#line 485
    return ('O');
  } else {

  }
#line 486
  return (0);
}
}
#line 492
static int super_error(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1672  __attribute__((__section__("_ftrace_branch")))  =    {"super_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    493, {{0UL, 0UL}}};
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int super_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ______r ;
  u_int tmp___6 ;
  int tmp___7 ;
  int tmp___9 ;

  {
#line 492
  tmp___6 = l2addrsize(l2);
#line 492
  tmp___7 = constant_test_bit(3, & l2->flag);
#line 492
  if (skb->len != tmp___6 + (u_int )(tmp___7 ? 2 : 1)) {
#line 492
    tmp___9 = 1;
  } else {
#line 492
    tmp___9 = 0;
  }
#line 492
  ______r = tmp___9;
#line 492
  ______f___1672.__annonCompField3.miss_hit[______r] = ______f___1672.__annonCompField3.miss_hit[______r] + 1UL;
#line 492
  if (______r) {
#line 494
    return ('N');
  } else {

  }
#line 495
  return (0);
}
}
#line 502
static int unnum_error(struct layer2 *l2 , struct sk_buff *skb , int wantrsp ) ;
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1673  __attribute__((__section__("_ftrace_branch")))  =    {"unnum_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    502, {{0UL, 0UL}}};
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1674  __attribute__((__section__("_ftrace_branch")))  =    {"unnum_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    504, {{0UL, 0UL}}};
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1675  __attribute__((__section__("_ftrace_branch")))  =    {"unnum_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    506, {{0UL, 0UL}}};
#line 498 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int unnum_error(struct layer2 *l2 , struct sk_buff *skb , int wantrsp ) 
{ 
  int rsp ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int ______r___1 ;
  u_int tmp___10 ;
  int tmp___11 ;

  {
#line 501
  rsp = ((int )*(skb->data) & 2) >> 1;
#line 502
  tmp___4 = constant_test_bit(2, & l2->flag);
#line 502
  if (tmp___4) {
#line 502
    tmp___6 = 1;
  } else {
#line 502
    tmp___6 = 0;
  }
#line 502
  ______r = tmp___6;
#line 502
  ______f___1673.__annonCompField3.miss_hit[______r] = ______f___1673.__annonCompField3.miss_hit[______r] + 1UL;
#line 502
  if (______r) {
#line 503
    rsp = ! rsp;
  } else {

  }
#line 504
  ______r___0 = ! (! (rsp != wantrsp));
#line 504
  ______f___1674.__annonCompField3.miss_hit[______r___0] = ______f___1674.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 504
  if (______r___0) {
#line 505
    return ('L');
  } else {

  }
#line 506
  tmp___10 = l2addrsize(l2);
#line 506
  if (skb->len != tmp___10 + (u_int )1) {
#line 506
    tmp___11 = 1;
  } else {
#line 506
    tmp___11 = 0;
  }
#line 506
  ______r___1 = tmp___11;
#line 506
  ______f___1675.__annonCompField3.miss_hit[______r___1] = ______f___1675.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 506
  if (______r___1) {
#line 507
    return ('N');
  } else {

  }
#line 508
  return (0);
}
}
#line 515
static int UI_error(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1676  __attribute__((__section__("_ftrace_branch")))  =    {"UI_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    515, {{0UL, 0UL}}};
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1677  __attribute__((__section__("_ftrace_branch")))  =    {"UI_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    517, {{0UL, 0UL}}};
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1678  __attribute__((__section__("_ftrace_branch")))  =    {"UI_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    519, {{0UL, 0UL}}};
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int UI_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int rsp ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int ______r___1 ;
  u_int tmp___10 ;
  int tmp___11 ;

  {
#line 514
  rsp = (int )*(skb->data) & 2;
#line 515
  tmp___4 = constant_test_bit(2, & l2->flag);
#line 515
  if (tmp___4) {
#line 515
    tmp___6 = 1;
  } else {
#line 515
    tmp___6 = 0;
  }
#line 515
  ______r = tmp___6;
#line 515
  ______f___1676.__annonCompField3.miss_hit[______r] = ______f___1676.__annonCompField3.miss_hit[______r] + 1UL;
#line 515
  if (______r) {
#line 516
    rsp = ! rsp;
  } else {

  }
#line 517
  ______r___0 = ! (! rsp);
#line 517
  ______f___1677.__annonCompField3.miss_hit[______r___0] = ______f___1677.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 517
  if (______r___0) {
#line 518
    return ('L');
  } else {

  }
#line 519
  tmp___10 = l2addrsize(l2);
#line 519
  if (skb->len > (l2->maxlen + tmp___10) + (u_int )1) {
#line 519
    tmp___11 = 1;
  } else {
#line 519
    tmp___11 = 0;
  }
#line 519
  ______r___1 = tmp___11;
#line 519
  ______f___1678.__annonCompField3.miss_hit[______r___1] = ______f___1678.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 519
  if (______r___1) {
#line 520
    return ('O');
  } else {

  }
#line 521
  return (0);
}
}
#line 531
static int FRMR_error(struct layer2 *l2 , struct sk_buff *skb ) ;
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1679  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    531, {{0UL, 0UL}}};
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1680  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    533, {{0UL, 0UL}}};
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1681  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    538, {{0UL, 0UL}}};
#line 536 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1682  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    536, {{0UL, 0UL}}};
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1683  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    545, {{0UL, 0UL}}};
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1684  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    543, {{0UL, 0UL}}};
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1685  __attribute__((__section__("_ftrace_branch")))  =    {"FRMR_error",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    535, {{0UL, 0UL}}};
#line 524 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int FRMR_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int headers ;
  u_int tmp ;
  u_char *datap ;
  int rsp ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int tmp___13 ;
  int tmp___15 ;

  {
#line 527
  tmp = l2addrsize(l2);
#line 527
  headers = tmp + (u_int )1;
#line 528
  datap = skb->data + headers;
#line 529
  rsp = (int )*(skb->data) & 2;
#line 531
  tmp___5 = constant_test_bit(2, & l2->flag);
#line 531
  if (tmp___5) {
#line 531
    tmp___7 = 1;
  } else {
#line 531
    tmp___7 = 0;
  }
#line 531
  ______r = tmp___7;
#line 531
  ______f___1679.__annonCompField3.miss_hit[______r] = ______f___1679.__annonCompField3.miss_hit[______r] + 1UL;
#line 531
  if (______r) {
#line 532
    rsp = ! rsp;
  } else {

  }
#line 533
  ______r___0 = ! (! (! rsp));
#line 533
  ______f___1680.__annonCompField3.miss_hit[______r___0] = ______f___1680.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 533
  if (______r___0) {
#line 534
    return ('L');
  } else {

  }
#line 535
  tmp___13 = constant_test_bit(3, & l2->flag);
#line 535
  if (tmp___13) {
#line 535
    tmp___15 = 1;
  } else {
#line 535
    tmp___15 = 0;
  }
#line 535
  ______r___5 = tmp___15;
#line 535
  ______f___1685.__annonCompField3.miss_hit[______r___5] = ______f___1685.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 535
  if (______r___5) {
#line 536
    ______r___2 = ! (! (skb->len < headers + (u_int )5));
#line 536
    ______f___1682.__annonCompField3.miss_hit[______r___2] = ______f___1682.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 536
    if (______r___2) {
#line 537
      return ('N');
    } else {
#line 538
      ______r___1 = ! (! (*debug___4 & 16711680U));
#line 538
      ______f___1681.__annonCompField3.miss_hit[______r___1] = ______f___1681.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 538
      if (______r___1) {
#line 539
        l2m_debug(& l2->l2m, "FRMR information %2x %2x %2x %2x %2x", *(datap + 0),
                  *(datap + 1), *(datap + 2), *(datap + 3), *(datap + 4));
      } else {

      }
    }
  } else {
#line 543
    ______r___4 = ! (! (skb->len < headers + (u_int )3));
#line 543
    ______f___1684.__annonCompField3.miss_hit[______r___4] = ______f___1684.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 543
    if (______r___4) {
#line 544
      return ('N');
    } else {
#line 545
      ______r___3 = ! (! (*debug___4 & 16711680U));
#line 545
      ______f___1683.__annonCompField3.miss_hit[______r___3] = ______f___1683.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 545
      if (______r___3) {
#line 546
        l2m_debug(& l2->l2m, "FRMR information %2x %2x %2x", *(datap + 0), *(datap + 1),
                  *(datap + 2));
      } else {

      }
    }
  }
#line 550
  return (0);
}
}
#line 556
static unsigned int legalnr(struct layer2 *l2 , unsigned int nr ) ;
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1686  __attribute__((__section__("_ftrace_branch")))  =    {"legalnr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    556, {{0UL, 0UL}}};
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static unsigned int legalnr(struct layer2 *l2 , unsigned int nr ) 
{ 
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 556
  tmp___4 = constant_test_bit(3, & l2->flag);
#line 556
  if (tmp___4) {
#line 556
    tmp___6 = 1;
  } else {
#line 556
    tmp___6 = 0;
  }
#line 556
  ______r = tmp___6;
#line 556
  ______f___1686.__annonCompField3.miss_hit[______r] = ______f___1686.__annonCompField3.miss_hit[______r] + 1UL;
#line 556
  if (______r) {
#line 557
    return ((nr - l2->va) % 128U <= (l2->vs - l2->va) % 128U);
  } else {
#line 559
    return ((nr - l2->va) % 8U <= (l2->vs - l2->va) % 8U);
  }
}
}
#line 569
static void setva(struct layer2 *l2 , unsigned int nr ) ;
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1687  __attribute__((__section__("_ftrace_branch")))  =    {"setva",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    569, {{0UL, 0UL}}};
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1688  __attribute__((__section__("_ftrace_branch")))  =    {"setva",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    573, {{0UL, 0UL}}};
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void setva(struct layer2 *l2 , unsigned int nr ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;

  {
#line 567
  while (1) {
#line 567
    if (l2->va != nr) {

    } else {
#line 567
      break;
    }
#line 568
    l2->va = l2->va + (u_int )1;
#line 569
    tmp___4 = constant_test_bit(3, & l2->flag);
#line 569
    if (tmp___4) {
#line 569
      tmp___6 = 1;
    } else {
#line 569
      tmp___6 = 0;
    }
#line 569
    ______r = tmp___6;
#line 569
    ______f___1687.__annonCompField3.miss_hit[______r] = ______f___1687.__annonCompField3.miss_hit[______r] + 1UL;
#line 569
    if (______r) {
#line 570
      l2->va = l2->va % 128U;
    } else {
#line 572
      l2->va = l2->va % 8U;
    }
#line 573
    ______r___0 = ! (! l2->windowar[l2->sow]);
#line 573
    ______f___1688.__annonCompField3.miss_hit[______r___0] = ______f___1688.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 573
    if (______r___0) {
#line 574
      skb_trim(l2->windowar[l2->sow], 0);
#line 575
      skb_queue_tail(& l2->tmp_queue, l2->windowar[l2->sow]);
#line 576
      l2->windowar[l2->sow] = (void *)0;
    } else {

    }
#line 578
    l2->sow = (l2->sow + (u_int )1) % l2->window;
  }
#line 580
  skb = skb_dequeue(& l2->tmp_queue);
#line 581
  while (1) {
#line 581
    if (skb) {

    } else {
#line 581
      break;
    }
#line 582
    consume_skb(skb);
#line 583
    skb = skb_dequeue(& l2->tmp_queue);
  }
#line 585
  return;
}
}
#line 599
static void send_uframe(struct layer2 *l2 , struct sk_buff *skb , u_char cmd , u_char cr ) ;
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1689  __attribute__((__section__("_ftrace_branch")))  =    {"send_uframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    599, {{0UL, 0UL}}};
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1690  __attribute__((__section__("_ftrace_branch")))  =    {"send_uframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    595, {{0UL, 0UL}}};
#line 587 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void send_uframe(struct layer2 *l2 , struct sk_buff *skb , u_char cmd , u_char cr ) 
{ 
  u_char tmp[4] ;
  int i ;
  int tmp___0 ;
  int ______r ;
  int ______r___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
#line 593
  i = sethdraddr(l2, tmp, cr);
#line 594
  tmp___0 = i;
#line 594
  i = i + 1;
#line 594
  tmp[tmp___0] = cmd;
#line 595
  ______r___0 = ! (! skb);
#line 595
  ______f___1690.__annonCompField3.miss_hit[______r___0] = ______f___1690.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 595
  if (______r___0) {
#line 596
    skb_trim(skb, 0);
  } else {
#line 598
    skb = mI_alloc_skb___0(i, 32U);
#line 599
    ______r = ! (! (! skb));
#line 599
    ______f___1689.__annonCompField3.miss_hit[______r] = ______f___1689.__annonCompField3.miss_hit[______r] + 1UL;
#line 599
    if (______r) {
#line 600
      printk("<4>%s: can\'t alloc skbuff\n", "send_uframe");
#line 602
      return;
    } else {

    }
  }
#line 605
  __len = i;
#line 605
  tmp___2 = skb_put(skb, i);
#line 605
  __ret = __builtin_memcpy(tmp___2, tmp, __len);
#line 606
  enqueue_super(l2, skb);
#line 607
  return;
}
}
#line 610 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline u_char get_PollFlag(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;

  {
#line 613
  tmp = l2addrsize(l2);
#line 613
  return ((int )*(skb->data + tmp) & 16);
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline u_char get_PollFlagFree(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_char PF ;

  {
#line 621
  PF = get_PollFlag(l2, skb);
#line 622
  consume_skb(skb);
#line 623
  return (PF);
}
}
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void start_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 629
  mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, i);
#line 630
  test_and_set_bit(6, & l2->flag);
#line 631
  return;
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void restart_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 636
  mISDN_FsmRestartTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, i);
#line 637
  test_and_set_bit(6, & l2->flag);
#line 638
  return;
}
}
#line 643
__inline void stop_t200(struct layer2 *l2 , int i ) ;
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1691  __attribute__((__section__("_ftrace_branch")))  =    {"stop_t200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    643, {{0UL, 0UL}}};
#line 640 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void stop_t200(struct layer2 *l2 , int i ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 643
  tmp___2 = test_and_clear_bit(6, & l2->flag);
#line 643
  if (tmp___2) {
#line 643
    tmp___3 = 1;
  } else {
#line 643
    tmp___3 = 0;
  }
#line 643
  ______r = tmp___3;
#line 643
  ______f___1691.__annonCompField3.miss_hit[______r] = ______f___1691.__annonCompField3.miss_hit[______r] + 1UL;
#line 643
  if (______r) {
#line 644
    mISDN_FsmDelTimer(& l2->t200, i);
  } else {

  }
#line 645
  return;
}
}
#line 652
__inline void st5_dl_release_l2l3(struct layer2 *l2 ) ;
#line 652 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1692  __attribute__((__section__("_ftrace_branch")))  =    {"st5_dl_release_l2l3",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    652, {{0UL, 0UL}}};
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void st5_dl_release_l2l3(struct layer2 *l2 ) 
{ 
  int pr ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 652
  tmp___2 = test_and_clear_bit(4, & l2->flag);
#line 652
  if (tmp___2) {
#line 652
    tmp___3 = 1;
  } else {
#line 652
    tmp___3 = 0;
  }
#line 652
  ______r = tmp___3;
#line 652
  ______f___1692.__annonCompField3.miss_hit[______r] = ______f___1692.__annonCompField3.miss_hit[______r] + 1UL;
#line 652
  if (______r) {
#line 653
    pr = 20744;
  } else {
#line 655
    pr = 4360;
  }
#line 656
  l2up_create(l2, pr, 0, (void *)0);
#line 657
  return;
}
}
#line 662
__inline void lapb_dl_release_l2l3(struct layer2 *l2 , int f ) ;
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1693  __attribute__((__section__("_ftrace_branch")))  =    {"lapb_dl_release_l2l3",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    662, {{0UL, 0UL}}};
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void lapb_dl_release_l2l3(struct layer2 *l2 , int f ) 
{ 
  u_int tmp ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 662
  tmp___5 = constant_test_bit(0, & l2->flag);
#line 662
  if (tmp___5) {
#line 662
    tmp___7 = 1;
  } else {
#line 662
    tmp___7 = 0;
  }
#line 662
  ______r = tmp___7;
#line 662
  ______f___1693.__annonCompField3.miss_hit[______r] = ______f___1693.__annonCompField3.miss_hit[______r] + 1UL;
#line 662
  if (______r) {
#line 663
    tmp = l2_newid(l2);
#line 663
    l2down_create(l2, 513, tmp, 0, (void *)0);
  } else {

  }
#line 664
  l2up_create(l2, f, 0, (void *)0);
#line 665
  return;
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void establishlink(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;
  u_char cmd ;
  int tmp ;

  {
#line 670
  l2 = fi->userdata;
#line 673
  clear_exception(l2);
#line 674
  l2->rc = 0;
#line 675
  tmp = constant_test_bit(3, & l2->flag);
#line 675
  cmd = (tmp ? 111 : 47) | 16;
#line 676
  send_uframe(l2, (void *)0, cmd, 0);
#line 677
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 678
  restart_t200(l2, 1);
#line 679
  test_and_clear_bit(4, & l2->flag);
#line 680
  freewin(l2);
#line 681
  mISDN_FsmChangeState(fi, ST_L2_5);
#line 682
  return;
}
}
#line 690
static void l2_mdl_error_ua(struct FsmInst *fi , int event , void *arg ) ;
#line 690 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1694  __attribute__((__section__("_ftrace_branch")))  =    {"l2_mdl_error_ua",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    690, {{0UL, 0UL}}};
#line 684 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_mdl_error_ua(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  u_char tmp___2 ;
  int tmp___3 ;

  {
#line 687
  skb = arg;
#line 688
  l2 = fi->userdata;
#line 690
  tmp___2 = get_PollFlagFree(l2, skb);
#line 690
  if (tmp___2) {
#line 690
    tmp___3 = 1;
  } else {
#line 690
    tmp___3 = 0;
  }
#line 690
  ______r = tmp___3;
#line 690
  ______f___1694.__annonCompField3.miss_hit[______r] = ______f___1694.__annonCompField3.miss_hit[______r] + 1UL;
#line 690
  if (______r) {
#line 691
    l2mgr(l2, 7940, (void *)'C');
  } else {
#line 693
    l2mgr(l2, 7940, (void *)'D');
  }
#line 695
  return;
}
}
#line 703
static void l2_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) ;
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1695  __attribute__((__section__("_ftrace_branch")))  =    {"l2_mdl_error_dm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    703, {{0UL, 0UL}}};
#line 697 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  u_char tmp___2 ;
  int tmp___3 ;

  {
#line 700
  skb = arg;
#line 701
  l2 = fi->userdata;
#line 703
  tmp___2 = get_PollFlagFree(l2, skb);
#line 703
  if (tmp___2) {
#line 703
    tmp___3 = 1;
  } else {
#line 703
    tmp___3 = 0;
  }
#line 703
  ______r = tmp___3;
#line 703
  ______f___1695.__annonCompField3.miss_hit[______r] = ______f___1695.__annonCompField3.miss_hit[______r] + 1UL;
#line 703
  if (______r) {
#line 704
    l2mgr(l2, 7940, (void *)'B');
  } else {
#line 706
    l2mgr(l2, 7940, (void *)'E');
#line 707
    establishlink(fi);
#line 708
    test_and_clear_bit(5, & l2->flag);
  }
#line 710
  return;
}
}
#line 718
static void l2_st8_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) ;
#line 718 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1696  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_mdl_error_dm",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    718, {{0UL, 0UL}}};
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st8_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  int ______r ;
  u_char tmp___2 ;
  int tmp___3 ;

  {
#line 715
  skb = arg;
#line 716
  l2 = fi->userdata;
#line 718
  tmp___2 = get_PollFlagFree(l2, skb);
#line 718
  if (tmp___2) {
#line 718
    tmp___3 = 1;
  } else {
#line 718
    tmp___3 = 0;
  }
#line 718
  ______r = tmp___3;
#line 718
  ______f___1696.__annonCompField3.miss_hit[______r] = ______f___1696.__annonCompField3.miss_hit[______r] + 1UL;
#line 718
  if (______r) {
#line 719
    l2mgr(l2, 7940, (void *)'B');
  } else {
#line 721
    l2mgr(l2, 7940, (void *)'E');
  }
#line 722
  establishlink(fi);
#line 723
  test_and_clear_bit(5, & l2->flag);
#line 724
  return;
}
}
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_go_st3(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 729
  consume_skb((struct sk_buff *)arg);
#line 730
  mISDN_FsmChangeState(fi, ST_L2_3);
#line 731
  return;
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_mdl_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 736
  l2 = fi->userdata;
#line 738
  mISDN_FsmChangeState(fi, ST_L2_3);
#line 739
  consume_skb((struct sk_buff *)arg);
#line 740
  l2_tei(l2, 6404, 0);
#line 741
  return;
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_queue_ui_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 746
  l2 = fi->userdata;
#line 747
  skb = arg;
#line 749
  skb_queue_tail(& l2->ui_queue, skb);
#line 750
  mISDN_FsmChangeState(fi, ST_L2_2);
#line 751
  l2_tei(l2, 6404, 0);
#line 752
  return;
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_queue_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 757
  l2 = fi->userdata;
#line 758
  skb = arg;
#line 760
  skb_queue_tail(& l2->ui_queue, skb);
#line 761
  return;
}
}
#line 771
static void tx_ui(struct layer2 *l2 ) ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1697  __attribute__((__section__("_ftrace_branch")))  =    {"tx_ui",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    771, {{0UL, 0UL}}};
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void tx_ui(struct layer2 *l2 ) 
{ 
  struct sk_buff *skb ;
  u_char header[4] ;
  int i ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int tmp___7 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___9 ;

  {
#line 770
  i = sethdraddr(l2, header, 0);
#line 771
  tmp___4 = constant_test_bit(18, & l2->flag);
#line 771
  if (tmp___4) {
#line 771
    tmp___6 = 1;
  } else {
#line 771
    tmp___6 = 0;
  }
#line 771
  ______r = tmp___6;
#line 771
  ______f___1697.__annonCompField3.miss_hit[______r] = ______f___1697.__annonCompField3.miss_hit[______r] + 1UL;
#line 771
  if (______r) {
#line 772
    header[1] = 255;
  } else {

  }
#line 773
  tmp___7 = i;
#line 773
  i = i + 1;
#line 773
  header[tmp___7] = 3;
#line 774
  while (1) {
#line 774
    skb = skb_dequeue(& l2->ui_queue);
#line 774
    if (skb) {

    } else {
#line 774
      break;
    }
#line 775
    __len = i;
#line 775
    tmp___9 = skb_push(skb, i);
#line 775
    __ret = __builtin_memcpy(tmp___9, header, __len);
#line 776
    enqueue_ui(l2, skb);
  }
#line 778
  return;
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_send_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 783
  l2 = fi->userdata;
#line 784
  skb = arg;
#line 786
  skb_queue_tail(& l2->ui_queue, skb);
#line 787
  tx_ui(l2);
#line 788
  return;
}
}
#line 801
static void l2_got_ui(struct FsmInst *fi , int event , void *arg ) ;
#line 801 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1698  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_ui",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    801, {{0UL, 0UL}}};
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_got_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int ______r ;

  {
#line 793
  l2 = fi->userdata;
#line 794
  skb = arg;
#line 796
  tmp = l2headersize(l2, 1);
#line 796
  skb_pull(skb, tmp);
#line 801
  ______r = ! (! l2->tm);
#line 801
  ______f___1698.__annonCompField3.miss_hit[______r] = ______f___1698.__annonCompField3.miss_hit[______r] + 1UL;
#line 801
  if (______r) {
#line 802
    l2_tei(l2, 7684, 0);
  } else {

  }
#line 803
  l2up(l2, 12552, skb);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_establish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 809
  skb = arg;
#line 810
  l2 = fi->userdata;
#line 812
  establishlink(fi);
#line 813
  test_and_set_bit(5, & l2->flag);
#line 814
  consume_skb(skb);
#line 815
  return;
}
}
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_discard_i_setl3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 820
  skb = arg;
#line 821
  l2 = fi->userdata;
#line 823
  skb_queue_purge(& l2->i_queue);
#line 824
  test_and_set_bit(5, & l2->flag);
#line 825
  test_and_clear_bit(4, & l2->flag);
#line 826
  consume_skb(skb);
#line 827
  return;
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_l3_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 832
  skb = arg;
#line 833
  l2 = fi->userdata;
#line 835
  skb_queue_purge(& l2->i_queue);
#line 836
  establishlink(fi);
#line 837
  test_and_set_bit(5, & l2->flag);
#line 838
  consume_skb(skb);
#line 839
  return;
}
}
#line 841 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 844
  l2 = fi->userdata;
#line 845
  skb = arg;
#line 847
  skb_trim(skb, 0);
#line 848
  l2up(l2, 20744, skb);
#line 849
  return;
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_pend_rel(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 854
  skb = arg;
#line 855
  l2 = fi->userdata;
#line 857
  test_and_set_bit(4, & l2->flag);
#line 858
  consume_skb(skb);
#line 859
  return;
}
}
#line 874
static void l2_disconnect(struct FsmInst *fi , int event , void *arg ) ;
#line 874 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1699  __attribute__((__section__("_ftrace_branch")))  =    {"l2_disconnect",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    874, {{0UL, 0UL}}};
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_disconnect(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;

  {
#line 864
  l2 = fi->userdata;
#line 865
  skb = arg;
#line 867
  skb_queue_purge(& l2->i_queue);
#line 868
  freewin(l2);
#line 869
  mISDN_FsmChangeState(fi, ST_L2_6);
#line 870
  l2->rc = 0;
#line 871
  send_uframe(l2, (void *)0, 67 | 16, 0);
#line 872
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 873
  restart_t200(l2, 2);
#line 874
  ______r = ! (! skb);
#line 874
  ______f___1699.__annonCompField3.miss_hit[______r] = ______f___1699.__annonCompField3.miss_hit[______r] + 1UL;
#line 874
  if (______r) {
#line 875
    consume_skb(skb);
  } else {

  }
#line 876
  return;
}
}
#line 894
static void l2_start_multi(struct FsmInst *fi , int event , void *arg ) ;
#line 894 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1700  __attribute__((__section__("_ftrace_branch")))  =    {"l2_start_multi",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    894, {{0UL, 0UL}}};
#line 878 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_start_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;
  int ______r ;

  {
#line 881
  l2 = fi->userdata;
#line 882
  skb = arg;
#line 884
  l2->vs = 0;
#line 885
  l2->va = 0;
#line 886
  l2->vr = 0;
#line 887
  l2->sow = 0;
#line 888
  clear_exception(l2);
#line 889
  tmp = get_PollFlag(l2, skb);
#line 889
  send_uframe(l2, (void *)0, 99 | (int )tmp, 1);
#line 890
  mISDN_FsmChangeState(fi, ST_L2_7);
#line 891
  mISDN_FsmAddTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 3);
#line 892
  skb_trim(skb, 0);
#line 893
  l2up(l2, 4104, skb);
#line 894
  ______r = ! (! l2->tm);
#line 894
  ______f___1700.__annonCompField3.miss_hit[______r] = ______f___1700.__annonCompField3.miss_hit[______r] + 1UL;
#line 894
  if (______r) {
#line 895
    l2_tei(l2, 7172, 0);
  } else {

  }
#line 896
  return;
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_send_UA(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 901
  l2 = fi->userdata;
#line 902
  skb = arg;
#line 904
  tmp = get_PollFlag(l2, skb);
#line 904
  send_uframe(l2, skb, 99 | (int )tmp, 1);
#line 905
  return;
}
}
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_send_DM(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 910
  l2 = fi->userdata;
#line 911
  skb = arg;
#line 913
  tmp = get_PollFlag(l2, skb);
#line 913
  send_uframe(l2, skb, 15 | (int )tmp, 1);
#line 914
  return;
}
}
#line 927
static void l2_restart_multi(struct FsmInst *fi , int event , void *arg ) ;
#line 927 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1701  __attribute__((__section__("_ftrace_branch")))  =    {"l2_restart_multi",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    927, {{0UL, 0UL}}};
#line 941 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1702  __attribute__((__section__("_ftrace_branch")))  =    {"l2_restart_multi",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    941, {{0UL, 0UL}}};
#line 947 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1703  __attribute__((__section__("_ftrace_branch")))  =    {"l2_restart_multi",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    947, {{0UL, 0UL}}};
#line 916 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_restart_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int est ;
  u_char tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  __u32 tmp___6 ;
  unsigned int tmp___7 ;
  int tmp___8 ;

  {
#line 919
  l2 = fi->userdata;
#line 920
  skb = arg;
#line 921
  est = 0;
#line 923
  tmp = get_PollFlag(l2, skb);
#line 923
  send_uframe(l2, skb, 99 | (int )tmp, 1);
#line 925
  l2mgr(l2, 7940, (void *)'F');
#line 927
  ______r = ! (! (l2->vs != l2->va));
#line 927
  ______f___1701.__annonCompField3.miss_hit[______r] = ______f___1701.__annonCompField3.miss_hit[______r] + 1UL;
#line 927
  if (______r) {
#line 928
    skb_queue_purge(& l2->i_queue);
#line 929
    est = 1;
  } else {

  }
#line 932
  clear_exception(l2);
#line 933
  l2->vs = 0;
#line 934
  l2->va = 0;
#line 935
  l2->vr = 0;
#line 936
  l2->sow = 0;
#line 937
  mISDN_FsmChangeState(fi, ST_L2_7);
#line 938
  stop_t200(l2, 3);
#line 939
  mISDN_FsmRestartTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 3);
#line 941
  ______r___0 = ! (! est);
#line 941
  ______f___1702.__annonCompField3.miss_hit[______r___0] = ______f___1702.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 941
  if (______r___0) {
#line 942
    l2up_create(l2, 4104, 0, (void *)0);
  } else {

  }
#line 947
  tmp___6 = skb_queue_len(& l2->i_queue);
#line 947
  if (tmp___6) {
#line 947
    tmp___7 = cansend(l2);
#line 947
    if (tmp___7) {
#line 947
      tmp___8 = 1;
    } else {
#line 947
      tmp___8 = 0;
    }
  } else {
#line 947
    tmp___8 = 0;
  }
#line 947
  ______r___1 = tmp___8;
#line 947
  ______f___1703.__annonCompField3.miss_hit[______r___1] = ______f___1703.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 947
  if (______r___1) {
#line 948
    mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
  } else {

  }
#line 949
  return;
}
}
#line 965
static void l2_stop_multi(struct FsmInst *fi , int event , void *arg ) ;
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1704  __attribute__((__section__("_ftrace_branch")))  =    {"l2_stop_multi",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    965, {{0UL, 0UL}}};
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_stop_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;
  int ______r ;

  {
#line 954
  l2 = fi->userdata;
#line 955
  skb = arg;
#line 957
  mISDN_FsmChangeState(fi, ST_L2_4);
#line 958
  mISDN_FsmDelTimer(& l2->t203, 3);
#line 959
  stop_t200(l2, 4);
#line 961
  tmp = get_PollFlag(l2, skb);
#line 961
  send_uframe(l2, skb, 99 | (int )tmp, 1);
#line 962
  skb_queue_purge(& l2->i_queue);
#line 963
  freewin(l2);
#line 964
  lapb_dl_release_l2l3(l2, 4360);
#line 965
  ______r = ! (! l2->tm);
#line 965
  ______f___1704.__annonCompField3.miss_hit[______r] = ______f___1704.__annonCompField3.miss_hit[______r] + 1UL;
#line 965
  if (______r) {
#line 966
    l2_tei(l2, 7428, 0);
  } else {

  }
#line 967
  return;
}
}
#line 976
static void l2_connected(struct FsmInst *fi , int event , void *arg ) ;
#line 976 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1705  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    976, {{0UL, 0UL}}};
#line 981 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1706  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    981, {{0UL, 0UL}}};
#line 985 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1707  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    985, {{0UL, 0UL}}};
#line 983 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1708  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    983, {{0UL, 0UL}}};
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1709  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    996, {{0UL, 0UL}}};
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1710  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    999, {{0UL, 0UL}}};
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1711  __attribute__((__section__("_ftrace_branch")))  =    {"l2_connected",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1002, {{0UL, 0UL}}};
#line 969 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_connected(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int pr ;
  int ______r ;
  u_char tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;
  int tmp___8 ;
  int tmp___9 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___13 ;
  int tmp___14 ;
  int ______r___3 ;
  int ______r___4 ;
  __u32 tmp___21 ;
  unsigned int tmp___22 ;
  int tmp___23 ;
  int ______r___5 ;

  {
#line 972
  l2 = fi->userdata;
#line 973
  skb = arg;
#line 974
  pr = -1;
#line 976
  tmp___3 = get_PollFlag(l2, skb);
#line 976
  if (tmp___3) {
#line 976
    tmp___4 = 0;
  } else {
#line 976
    tmp___4 = 1;
  }
#line 976
  ______r = tmp___4;
#line 976
  ______f___1705.__annonCompField3.miss_hit[______r] = ______f___1705.__annonCompField3.miss_hit[______r] + 1UL;
#line 976
  if (______r) {
#line 977
    l2_mdl_error_ua(fi, event, arg);
#line 978
    return;
  } else {

  }
#line 980
  consume_skb(skb);
#line 981
  tmp___8 = test_and_clear_bit(4, & l2->flag);
#line 981
  if (tmp___8) {
#line 981
    tmp___9 = 1;
  } else {
#line 981
    tmp___9 = 0;
  }
#line 981
  ______r___0 = tmp___9;
#line 981
  ______f___1706.__annonCompField3.miss_hit[______r___0] = ______f___1706.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 981
  if (______r___0) {
#line 982
    l2_disconnect(fi, event, (void *)0);
  } else {

  }
#line 983
  tmp___13 = test_and_clear_bit(5, & l2->flag);
#line 983
  if (tmp___13) {
#line 983
    tmp___14 = 1;
  } else {
#line 983
    tmp___14 = 0;
  }
#line 983
  ______r___2 = tmp___14;
#line 983
  ______f___1708.__annonCompField3.miss_hit[______r___2] = ______f___1708.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 983
  if (______r___2) {
#line 984
    pr = 20488;
  } else {
#line 985
    ______r___1 = ! (! (l2->vs != l2->va));
#line 985
    ______f___1707.__annonCompField3.miss_hit[______r___1] = ______f___1707.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 985
    if (______r___1) {
#line 986
      skb_queue_purge(& l2->i_queue);
#line 987
      pr = 4104;
    } else {

    }
  }
#line 989
  stop_t200(l2, 5);
#line 990
  l2->vr = 0;
#line 991
  l2->vs = 0;
#line 992
  l2->va = 0;
#line 993
  l2->sow = 0;
#line 994
  mISDN_FsmChangeState(fi, ST_L2_7);
#line 995
  mISDN_FsmAddTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 4);
#line 996
  ______r___3 = ! (! (pr != -1));
#line 996
  ______f___1709.__annonCompField3.miss_hit[______r___3] = ______f___1709.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 996
  if (______r___3) {
#line 997
    l2up_create(l2, pr, 0, (void *)0);
  } else {

  }
#line 999
  tmp___21 = skb_queue_len(& l2->i_queue);
#line 999
  if (tmp___21) {
#line 999
    tmp___22 = cansend(l2);
#line 999
    if (tmp___22) {
#line 999
      tmp___23 = 1;
    } else {
#line 999
      tmp___23 = 0;
    }
  } else {
#line 999
    tmp___23 = 0;
  }
#line 999
  ______r___4 = tmp___23;
#line 999
  ______f___1710.__annonCompField3.miss_hit[______r___4] = ______f___1710.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 999
  if (______r___4) {
#line 1000
    mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
  } else {

  }
#line 1002
  ______r___5 = ! (! l2->tm);
#line 1002
  ______f___1711.__annonCompField3.miss_hit[______r___5] = ______f___1711.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1002
  if (______r___5) {
#line 1003
    l2_tei(l2, 7172, 0);
  } else {

  }
#line 1004
  return;
}
}
#line 1012
static void l2_released(struct FsmInst *fi , int event , void *arg ) ;
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1712  __attribute__((__section__("_ftrace_branch")))  =    {"l2_released",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1012, {{0UL, 0UL}}};
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1713  __attribute__((__section__("_ftrace_branch")))  =    {"l2_released",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1020, {{0UL, 0UL}}};
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_released(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  u_char tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;

  {
#line 1009
  l2 = fi->userdata;
#line 1010
  skb = arg;
#line 1012
  tmp___3 = get_PollFlag(l2, skb);
#line 1012
  if (tmp___3) {
#line 1012
    tmp___4 = 0;
  } else {
#line 1012
    tmp___4 = 1;
  }
#line 1012
  ______r = tmp___4;
#line 1012
  ______f___1712.__annonCompField3.miss_hit[______r] = ______f___1712.__annonCompField3.miss_hit[______r] + 1UL;
#line 1012
  if (______r) {
#line 1013
    l2_mdl_error_ua(fi, event, arg);
#line 1014
    return;
  } else {

  }
#line 1016
  consume_skb(skb);
#line 1017
  stop_t200(l2, 6);
#line 1018
  lapb_dl_release_l2l3(l2, 20744);
#line 1019
  mISDN_FsmChangeState(fi, ST_L2_4);
#line 1020
  ______r___0 = ! (! l2->tm);
#line 1020
  ______f___1713.__annonCompField3.miss_hit[______r___0] = ______f___1713.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1020
  if (______r___0) {
#line 1021
    l2_tei(l2, 7428, 0);
  } else {

  }
#line 1022
  return;
}
}
#line 1030
static void l2_reestablish(struct FsmInst *fi , int event , void *arg ) ;
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1714  __attribute__((__section__("_ftrace_branch")))  =    {"l2_reestablish",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1030, {{0UL, 0UL}}};
#line 1024 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  u_char tmp___3 ;
  int tmp___4 ;

  {
#line 1027
  l2 = fi->userdata;
#line 1028
  skb = arg;
#line 1030
  tmp___3 = get_PollFlagFree(l2, skb);
#line 1030
  if (tmp___3) {
#line 1030
    tmp___4 = 0;
  } else {
#line 1030
    tmp___4 = 1;
  }
#line 1030
  ______r = tmp___4;
#line 1030
  ______f___1714.__annonCompField3.miss_hit[______r] = ______f___1714.__annonCompField3.miss_hit[______r] + 1UL;
#line 1030
  if (______r) {
#line 1031
    establishlink(fi);
#line 1032
    test_and_set_bit(5, & l2->flag);
  } else {

  }
#line 1034
  return;
}
}
#line 1044
static void l2_st5_dm_release(struct FsmInst *fi , int event , void *arg ) ;
#line 1044 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1715  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1044, {{0UL, 0UL}}};
#line 1046 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1716  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1046, {{0UL, 0UL}}};
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1717  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1051, {{0UL, 0UL}}};
#line 1042 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1718  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1042, {{0UL, 0UL}}};
#line 1036 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st5_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  u_int tmp___8 ;
  int ______r___0 ;
  int tmp___14 ;
  int tmp___16 ;
  int ______r___1 ;
  int ______r___2 ;
  u_char tmp___20 ;
  int tmp___21 ;

  {
#line 1039
  l2 = fi->userdata;
#line 1040
  skb = arg;
#line 1042
  tmp___20 = get_PollFlagFree(l2, skb);
#line 1042
  if (tmp___20) {
#line 1042
    tmp___21 = 1;
  } else {
#line 1042
    tmp___21 = 0;
  }
#line 1042
  ______r___2 = tmp___21;
#line 1042
  ______f___1718.__annonCompField3.miss_hit[______r___2] = ______f___1718.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1042
  if (______r___2) {
#line 1043
    stop_t200(l2, 7);
#line 1044
    tmp___5 = constant_test_bit(5, & l2->flag);
#line 1044
    if (tmp___5) {
#line 1044
      tmp___7 = 0;
    } else {
#line 1044
      tmp___7 = 1;
    }
#line 1044
    ______r = tmp___7;
#line 1044
    ______f___1715.__annonCompField3.miss_hit[______r] = ______f___1715.__annonCompField3.miss_hit[______r] + 1UL;
#line 1044
    if (______r) {
#line 1045
      skb_queue_purge(& l2->i_queue);
    } else {

    }
#line 1046
    tmp___14 = constant_test_bit(0, & l2->flag);
#line 1046
    if (tmp___14) {
#line 1046
      tmp___16 = 1;
    } else {
#line 1046
      tmp___16 = 0;
    }
#line 1046
    ______r___0 = tmp___16;
#line 1046
    ______f___1716.__annonCompField3.miss_hit[______r___0] = ______f___1716.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1046
    if (______r___0) {
#line 1047
      tmp___8 = l2_newid(l2);
#line 1047
      l2down_create(l2, 513, tmp___8, 0, (void *)0);
    } else {

    }
#line 1049
    st5_dl_release_l2l3(l2);
#line 1050
    mISDN_FsmChangeState(fi, ST_L2_4);
#line 1051
    ______r___1 = ! (! l2->tm);
#line 1051
    ______f___1717.__annonCompField3.miss_hit[______r___1] = ______f___1717.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1051
    if (______r___1) {
#line 1052
      l2_tei(l2, 7428, 0);
    } else {

    }
  } else {

  }
#line 1054
  return;
}
}
#line 1066
static void l2_st6_dm_release(struct FsmInst *fi , int event , void *arg ) ;
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1719  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1066, {{0UL, 0UL}}};
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1720  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_dm_release",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1062, {{0UL, 0UL}}};
#line 1056 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st6_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int ______r___0 ;
  u_char tmp___2 ;
  int tmp___3 ;

  {
#line 1059
  l2 = fi->userdata;
#line 1060
  skb = arg;
#line 1062
  tmp___2 = get_PollFlagFree(l2, skb);
#line 1062
  if (tmp___2) {
#line 1062
    tmp___3 = 1;
  } else {
#line 1062
    tmp___3 = 0;
  }
#line 1062
  ______r___0 = tmp___3;
#line 1062
  ______f___1720.__annonCompField3.miss_hit[______r___0] = ______f___1720.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1062
  if (______r___0) {
#line 1063
    stop_t200(l2, 8);
#line 1064
    lapb_dl_release_l2l3(l2, 20744);
#line 1065
    mISDN_FsmChangeState(fi, ST_L2_4);
#line 1066
    ______r = ! (! l2->tm);
#line 1066
    ______f___1719.__annonCompField3.miss_hit[______r] = ______f___1719.__annonCompField3.miss_hit[______r] + 1UL;
#line 1066
    if (______r) {
#line 1067
      l2_tei(l2, 7428, 0);
    } else {

    }
  } else {

  }
#line 1069
  return;
}
}
#line 1079
static void enquiry_cr(struct layer2 *l2 , u_char typ , u_char cr , u_char pf ) ;
#line 1079 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1721  __attribute__((__section__("_ftrace_branch")))  =    {"enquiry_cr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1079, {{0UL, 0UL}}};
#line 1085 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1722  __attribute__((__section__("_ftrace_branch")))  =    {"enquiry_cr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1085, {{0UL, 0UL}}};
#line 1071 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void enquiry_cr(struct layer2 *l2 , u_char typ , u_char cr , u_char pf ) 
{ 
  struct sk_buff *skb ;
  u_char tmp[4] ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int ______r ;
  int tmp___8 ;
  int tmp___10 ;
  int ______r___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___12 ;

  {
#line 1078
  i = sethdraddr(l2, tmp, cr);
#line 1079
  tmp___8 = constant_test_bit(3, & l2->flag);
#line 1079
  if (tmp___8) {
#line 1079
    tmp___10 = 1;
  } else {
#line 1079
    tmp___10 = 0;
  }
#line 1079
  ______r = tmp___10;
#line 1079
  ______f___1721.__annonCompField3.miss_hit[______r] = ______f___1721.__annonCompField3.miss_hit[______r] + 1UL;
#line 1079
  if (______r) {
#line 1080
    tmp___0 = i;
#line 1080
    i = i + 1;
#line 1080
    tmp[tmp___0] = typ;
#line 1081
    tmp___1 = i;
#line 1081
    i = i + 1;
#line 1081
    tmp[tmp___1] = (l2->vr << 1) | (unsigned int )(pf ? 1 : 0);
  } else {
#line 1083
    tmp___2 = i;
#line 1083
    i = i + 1;
#line 1083
    tmp[tmp___2] = ((l2->vr << 5) | (unsigned int )typ) | (unsigned int )(pf ? 16 : 0);
  }
#line 1084
  skb = mI_alloc_skb___0(i, 32U);
#line 1085
  ______r___0 = ! (! (! skb));
#line 1085
  ______f___1722.__annonCompField3.miss_hit[______r___0] = ______f___1722.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1085
  if (______r___0) {
#line 1086
    printk("<4>isdnl2 can\'t alloc sbbuff for enquiry_cr\n");
#line 1088
    return;
  } else {

  }
#line 1090
  __len = i;
#line 1090
  tmp___12 = skb_put(skb, i);
#line 1090
  __ret = __builtin_memcpy(tmp___12, tmp, __len);
#line 1091
  enqueue_super(l2, skb);
#line 1092
  return;
}
}
#line 1097
__inline void enquiry_response(struct layer2 *l2 ) ;
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1723  __attribute__((__section__("_ftrace_branch")))  =    {"enquiry_response",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1097, {{0UL, 0UL}}};
#line 1094 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void enquiry_response(struct layer2 *l2 ) 
{ 
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 1097
  tmp___4 = constant_test_bit(9, & l2->flag);
#line 1097
  if (tmp___4) {
#line 1097
    tmp___6 = 1;
  } else {
#line 1097
    tmp___6 = 0;
  }
#line 1097
  ______r = tmp___6;
#line 1097
  ______f___1723.__annonCompField3.miss_hit[______r] = ______f___1723.__annonCompField3.miss_hit[______r] + 1UL;
#line 1097
  if (______r) {
#line 1098
    enquiry_cr(l2, 5, 1, 1);
  } else {
#line 1100
    enquiry_cr(l2, 1, 1, 1);
  }
#line 1101
  test_and_clear_bit(7, & l2->flag);
#line 1102
  return;
}
}
#line 1107
__inline void transmit_enquiry(struct layer2 *l2 ) ;
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1724  __attribute__((__section__("_ftrace_branch")))  =    {"transmit_enquiry",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1107, {{0UL, 0UL}}};
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
__inline void transmit_enquiry(struct layer2 *l2 ) 
{ 
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 1107
  tmp___4 = constant_test_bit(9, & l2->flag);
#line 1107
  if (tmp___4) {
#line 1107
    tmp___6 = 1;
  } else {
#line 1107
    tmp___6 = 0;
  }
#line 1107
  ______r = tmp___6;
#line 1107
  ______f___1724.__annonCompField3.miss_hit[______r] = ______f___1724.__annonCompField3.miss_hit[______r] + 1UL;
#line 1107
  if (______r) {
#line 1108
    enquiry_cr(l2, 5, 0, 1);
  } else {
#line 1110
    enquiry_cr(l2, 1, 0, 1);
  }
#line 1111
  test_and_clear_bit(7, & l2->flag);
#line 1112
  start_t200(l2, 9);
#line 1113
  return;
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void nrerrorrecovery(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;

  {
#line 1119
  l2 = fi->userdata;
#line 1121
  l2mgr(l2, 7940, (void *)'J');
#line 1122
  establishlink(fi);
#line 1123
  test_and_clear_bit(5, & l2->flag);
#line 1124
  return;
}
}
#line 1134
static void invoke_retransmission(struct layer2 *l2 , unsigned int nr ) ;
#line 1134 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1725  __attribute__((__section__("_ftrace_branch")))  =    {"invoke_retransmission",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1134, {{0UL, 0UL}}};
#line 1142 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1726  __attribute__((__section__("_ftrace_branch")))  =    {"invoke_retransmission",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1142, {{0UL, 0UL}}};
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1727  __attribute__((__section__("_ftrace_branch")))  =    {"invoke_retransmission",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1131, {{0UL, 0UL}}};
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void invoke_retransmission(struct layer2 *l2 , unsigned int nr ) 
{ 
  u_int p1 ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 1131
  ______r___1 = ! (! (l2->vs != nr));
#line 1131
  ______f___1727.__annonCompField3.miss_hit[______r___1] = ______f___1727.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1131
  if (______r___1) {
#line 1132
    while (1) {
#line 1132
      if (l2->vs != nr) {

      } else {
#line 1132
        break;
      }
#line 1133
      l2->vs = l2->vs - (u_int )1;
#line 1134
      tmp___4 = constant_test_bit(3, & l2->flag);
#line 1134
      if (tmp___4) {
#line 1134
        tmp___6 = 1;
      } else {
#line 1134
        tmp___6 = 0;
      }
#line 1134
      ______r = tmp___6;
#line 1134
      ______f___1725.__annonCompField3.miss_hit[______r] = ______f___1725.__annonCompField3.miss_hit[______r] + 1UL;
#line 1134
      if (______r) {
#line 1135
        l2->vs = l2->vs % 128U;
#line 1136
        p1 = (l2->vs - l2->va) % 128U;
      } else {
#line 1138
        l2->vs = l2->vs % 8U;
#line 1139
        p1 = (l2->vs - l2->va) % 8U;
      }
#line 1141
      p1 = (p1 + l2->sow) % l2->window;
#line 1142
      ______r___0 = ! (! l2->windowar[p1]);
#line 1142
      ______f___1726.__annonCompField3.miss_hit[______r___0] = ______f___1726.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1142
      if (______r___0) {
#line 1143
        skb_queue_head(& l2->i_queue, l2->windowar[p1]);
      } else {
#line 1145
        printk("<4>%s: windowar[%d] is NULL\n", "invoke_retransmission", p1);
      }
#line 1148
      l2->windowar[p1] = (void *)0;
    }
#line 1150
    mISDN_FsmEvent(& l2->l2m, EV_L2_ACK_PULL, (void *)0);
  } else {

  }
#line 1152
  return;
}
}
#line 1163
static void l2_st7_got_super(struct FsmInst *fi , int event , void *arg ) ;
#line 1163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1728  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1163, {{0UL, 0UL}}};
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1729  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1167, {{0UL, 0UL}}};
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1730  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1172, {{0UL, 0UL}}};
#line 1175 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1731  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1175, {{0UL, 0UL}}};
#line 1185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1732  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1185, {{0UL, 0UL}}};
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1733  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1184, {{0UL, 0UL}}};
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1734  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1196, {{0UL, 0UL}}};
#line 1205 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1735  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1205, {{0UL, 0UL}}};
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1736  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1203, {{0UL, 0UL}}};
#line 1198 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1737  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1198, {{0UL, 0UL}}};
#line 1191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1738  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1191, {{0UL, 0UL}}};
#line 1209 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1739  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1209, {{0UL, 0UL}}};
#line 1190 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1740  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1190, {{0UL, 0UL}}};
#line 1154 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st7_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int typ ;
  unsigned int nr ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  u_int tmp___7 ;
  int ______r___0 ;
  int tmp___11 ;
  int tmp___12 ;
  int ______r___1 ;
  int tmp___16 ;
  int tmp___17 ;
  int ______r___2 ;
  int tmp___23 ;
  int tmp___25 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int tmp___29 ;
  int tmp___30 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  __u32 tmp___34 ;
  int tmp___35 ;
  int ______r___11 ;
  unsigned int tmp___39 ;
  int tmp___40 ;

  {
#line 1157
  l2 = fi->userdata;
#line 1158
  skb = arg;
#line 1159
  typ = 1;
#line 1162
  rsp = (int )*(skb->data) & 2;
#line 1163
  tmp___4 = constant_test_bit(2, & l2->flag);
#line 1163
  if (tmp___4) {
#line 1163
    tmp___6 = 1;
  } else {
#line 1163
    tmp___6 = 0;
  }
#line 1163
  ______r = tmp___6;
#line 1163
  ______f___1728.__annonCompField3.miss_hit[______r] = ______f___1728.__annonCompField3.miss_hit[______r] + 1UL;
#line 1163
  if (______r) {
#line 1164
    rsp = ! rsp;
  } else {

  }
#line 1166
  tmp___7 = l2addrsize(l2);
#line 1166
  skb_pull(skb, tmp___7);
#line 1167
  tmp___11 = IsRNR(skb->data, l2);
#line 1167
  if (tmp___11) {
#line 1167
    tmp___12 = 1;
  } else {
#line 1167
    tmp___12 = 0;
  }
#line 1167
  ______r___0 = tmp___12;
#line 1167
  ______f___1729.__annonCompField3.miss_hit[______r___0] = ______f___1729.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1167
  if (______r___0) {
#line 1168
    set_peer_busy(l2);
#line 1169
    typ = 5;
  } else {
#line 1171
    clear_peer_busy(l2);
  }
#line 1172
  tmp___16 = IsREJ(skb->data, l2);
#line 1172
  if (tmp___16) {
#line 1172
    tmp___17 = 1;
  } else {
#line 1172
    tmp___17 = 0;
  }
#line 1172
  ______r___1 = tmp___17;
#line 1172
  ______f___1730.__annonCompField3.miss_hit[______r___1] = ______f___1730.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1172
  if (______r___1) {
#line 1173
    typ = 9;
  } else {

  }
#line 1175
  tmp___23 = constant_test_bit(3, & l2->flag);
#line 1175
  if (tmp___23) {
#line 1175
    tmp___25 = 1;
  } else {
#line 1175
    tmp___25 = 0;
  }
#line 1175
  ______r___2 = tmp___25;
#line 1175
  ______f___1731.__annonCompField3.miss_hit[______r___2] = ______f___1731.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1175
  if (______r___2) {
#line 1176
    PollFlag = ((int )*(skb->data + 1) & 1) == 1;
#line 1177
    nr = (int )*(skb->data + 1) >> 1;
  } else {
#line 1179
    PollFlag = (int )*(skb->data + 0) & 16;
#line 1180
    nr = ((int )*(skb->data + 0) >> 5) & 7;
  }
#line 1182
  consume_skb(skb);
#line 1184
  ______r___4 = ! (! PollFlag);
#line 1184
  ______f___1733.__annonCompField3.miss_hit[______r___4] = ______f___1733.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1184
  if (______r___4) {
#line 1185
    ______r___3 = ! (! rsp);
#line 1185
    ______f___1732.__annonCompField3.miss_hit[______r___3] = ______f___1732.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1185
    if (______r___3) {
#line 1186
      l2mgr(l2, 7940, (void *)'A');
    } else {
#line 1188
      enquiry_response(l2);
    }
  } else {

  }
#line 1190
  tmp___39 = legalnr(l2, nr);
#line 1190
  if (tmp___39) {
#line 1190
    tmp___40 = 1;
  } else {
#line 1190
    tmp___40 = 0;
  }
#line 1190
  ______r___11 = tmp___40;
#line 1190
  ______f___1740.__annonCompField3.miss_hit[______r___11] = ______f___1740.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 1190
  if (______r___11) {
#line 1191
    ______r___9 = ! (! (typ == 9));
#line 1191
    ______f___1738.__annonCompField3.miss_hit[______r___9] = ______f___1738.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 1191
    if (______r___9) {
#line 1192
      setva(l2, nr);
#line 1193
      invoke_retransmission(l2, nr);
#line 1194
      stop_t200(l2, 10);
#line 1195
      tmp___29 = mISDN_FsmAddTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 6);
#line 1195
      if (tmp___29) {
#line 1195
        tmp___30 = 1;
      } else {
#line 1195
        tmp___30 = 0;
      }
#line 1195
      ______r___5 = tmp___30;
#line 1195
      ______f___1734.__annonCompField3.miss_hit[______r___5] = ______f___1734.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1195
      if (______r___5) {
#line 1197
        l2m_debug(& l2->l2m, "Restart T203 ST7 REJ");
      } else {

      }
    } else {
#line 1198
      ______r___8 = ! (! (nr == l2->vs && typ == 1));
#line 1198
      ______f___1737.__annonCompField3.miss_hit[______r___8] = ______f___1737.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1198
      if (______r___8) {
#line 1199
        setva(l2, nr);
#line 1200
        stop_t200(l2, 11);
#line 1201
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 7);
      } else {
#line 1203
        ______r___7 = ! (! (l2->va != nr || typ == 5));
#line 1203
        ______f___1736.__annonCompField3.miss_hit[______r___7] = ______f___1736.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1203
        if (______r___7) {
#line 1204
          setva(l2, nr);
#line 1205
          ______r___6 = ! (! (typ != 1));
#line 1205
          ______f___1735.__annonCompField3.miss_hit[______r___6] = ______f___1735.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1205
          if (______r___6) {
#line 1206
            mISDN_FsmDelTimer(& l2->t203, 9);
          } else {

          }
#line 1207
          restart_t200(l2, 12);
        } else {

        }
      }
    }
#line 1209
    tmp___34 = skb_queue_len(& l2->i_queue);
#line 1209
    if (tmp___34 && typ == 1) {
#line 1209
      tmp___35 = 1;
    } else {
#line 1209
      tmp___35 = 0;
    }
#line 1209
    ______r___10 = tmp___35;
#line 1209
    ______f___1739.__annonCompField3.miss_hit[______r___10] = ______f___1739.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 1209
    if (______r___10) {
#line 1210
      mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
    } else {

    }
  } else {
#line 1212
    nrerrorrecovery(fi);
  }
#line 1213
  return;
}
}
#line 1221
static void l2_feed_i_if_reest(struct FsmInst *fi , int event , void *arg ) ;
#line 1221 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1741  __attribute__((__section__("_ftrace_branch")))  =    {"l2_feed_i_if_reest",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1221, {{0UL, 0UL}}};
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_feed_i_if_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 1218
  l2 = fi->userdata;
#line 1219
  skb = arg;
#line 1221
  tmp___5 = constant_test_bit(5, & l2->flag);
#line 1221
  if (tmp___5) {
#line 1221
    tmp___7 = 0;
  } else {
#line 1221
    tmp___7 = 1;
  }
#line 1221
  ______r = tmp___7;
#line 1221
  ______f___1741.__annonCompField3.miss_hit[______r] = ______f___1741.__annonCompField3.miss_hit[______r] + 1UL;
#line 1221
  if (______r) {
#line 1222
    skb_queue_tail(& l2->i_queue, skb);
  } else {
#line 1224
    consume_skb(skb);
  }
#line 1225
  return;
}
}
#line 1227 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_feed_i_pull(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1230
  l2 = fi->userdata;
#line 1231
  skb = arg;
#line 1233
  skb_queue_tail(& l2->i_queue, skb);
#line 1234
  mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
#line 1235
  return;
}
}
#line 1237 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_feed_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1240
  l2 = fi->userdata;
#line 1241
  skb = arg;
#line 1243
  skb_queue_tail(& l2->i_queue, skb);
#line 1244
  return;
}
}
#line 1255
static void l2_got_iframe(struct FsmInst *fi , int event , void *arg ) ;
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1742  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1255, {{0UL, 0UL}}};
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1743  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1266, {{0UL, 0UL}}};
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1744  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1271, {{0UL, 0UL}}};
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1745  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1276, {{0UL, 0UL}}};
#line 1286 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1746  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1286, {{0UL, 0UL}}};
#line 1285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1747  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1285, {{0UL, 0UL}}};
#line 1269 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1748  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1269, {{0UL, 0UL}}};
#line 1264 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1749  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1264, {{0UL, 0UL}}};
#line 1301 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1750  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1301, {{0UL, 0UL}}};
#line 1297 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1751  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1297, {{0UL, 0UL}}};
#line 1295 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1752  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1296, {{0UL, 0UL}}};
#line 1294 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1753  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1294, {{0UL, 0UL}}};
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1754  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1309, {{0UL, 0UL}}};
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1755  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_iframe",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1311, {{0UL, 0UL}}};
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_got_iframe(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int i ;
  u_int ns ;
  u_int nr ;
  u_int tmp ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___13 ;
  int tmp___15 ;
  int ______r___2 ;
  u_int tmp___16 ;
  int ______r___3 ;
  int ______r___4 ;
  int tmp___20 ;
  int tmp___21 ;
  int ______r___5 ;
  int ______r___6 ;
  int tmp___27 ;
  int tmp___29 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int tmp___36 ;
  int tmp___38 ;
  int ______r___10 ;
  unsigned int tmp___42 ;
  int tmp___43 ;
  int ______r___11 ;
  __u32 tmp___47 ;
  int tmp___48 ;
  int ______r___12 ;
  int tmp___52 ;
  int tmp___53 ;

  {
#line 1249
  l2 = fi->userdata;
#line 1250
  skb = arg;
#line 1254
  tmp = l2addrsize(l2);
#line 1254
  i = tmp;
#line 1255
  tmp___5 = constant_test_bit(3, & l2->flag);
#line 1255
  if (tmp___5) {
#line 1255
    tmp___7 = 1;
  } else {
#line 1255
    tmp___7 = 0;
  }
#line 1255
  ______r = tmp___7;
#line 1255
  ______f___1742.__annonCompField3.miss_hit[______r] = ______f___1742.__annonCompField3.miss_hit[______r] + 1UL;
#line 1255
  if (______r) {
#line 1256
    PollFlag = ((int )*(skb->data + (i + 1)) & 1) == 1;
#line 1257
    ns = (int )*(skb->data + i) >> 1;
#line 1258
    nr = ((int )*(skb->data + (i + 1)) >> 1) & 127;
  } else {
#line 1260
    PollFlag = (int )*(skb->data + i) & 16;
#line 1261
    ns = ((int )*(skb->data + i) >> 1) & 7;
#line 1262
    nr = ((int )*(skb->data + i) >> 5) & 7;
  }
#line 1264
  tmp___27 = constant_test_bit(9, & l2->flag);
#line 1264
  if (tmp___27) {
#line 1264
    tmp___29 = 1;
  } else {
#line 1264
    tmp___29 = 0;
  }
#line 1264
  ______r___6 = tmp___29;
#line 1264
  ______f___1749.__annonCompField3.miss_hit[______r___6] = ______f___1749.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1264
  if (______r___6) {
#line 1265
    consume_skb(skb);
#line 1266
    ______r___0 = ! (! PollFlag);
#line 1266
    ______f___1743.__annonCompField3.miss_hit[______r___0] = ______f___1743.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1266
    if (______r___0) {
#line 1267
      enquiry_response(l2);
    } else {

    }
  } else {
#line 1269
    ______r___5 = ! (! (l2->vr == ns));
#line 1269
    ______f___1748.__annonCompField3.miss_hit[______r___5] = ______f___1748.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1269
    if (______r___5) {
#line 1270
      l2->vr = l2->vr + (u_int )1;
#line 1271
      tmp___13 = constant_test_bit(3, & l2->flag);
#line 1271
      if (tmp___13) {
#line 1271
        tmp___15 = 1;
      } else {
#line 1271
        tmp___15 = 0;
      }
#line 1271
      ______r___1 = tmp___15;
#line 1271
      ______f___1744.__annonCompField3.miss_hit[______r___1] = ______f___1744.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1271
      if (______r___1) {
#line 1272
        l2->vr = l2->vr % 128U;
      } else {
#line 1274
        l2->vr = l2->vr % 8U;
      }
#line 1275
      test_and_clear_bit(8, & l2->flag);
#line 1276
      ______r___2 = ! (! PollFlag);
#line 1276
      ______f___1745.__annonCompField3.miss_hit[______r___2] = ______f___1745.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1276
      if (______r___2) {
#line 1277
        enquiry_response(l2);
      } else {
#line 1279
        test_and_set_bit(7, & l2->flag);
      }
#line 1280
      tmp___16 = l2headersize(l2, 0);
#line 1280
      skb_pull(skb, tmp___16);
#line 1281
      l2up(l2, 12296, skb);
    } else {
#line 1284
      consume_skb(skb);
#line 1285
      tmp___20 = test_and_set_bit(8, & l2->flag);
#line 1285
      if (tmp___20) {
#line 1285
        tmp___21 = 1;
      } else {
#line 1285
        tmp___21 = 0;
      }
#line 1285
      ______r___4 = tmp___21;
#line 1285
      ______f___1747.__annonCompField3.miss_hit[______r___4] = ______f___1747.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1285
      if (______r___4) {
#line 1286
        ______r___3 = ! (! PollFlag);
#line 1286
        ______f___1746.__annonCompField3.miss_hit[______r___3] = ______f___1746.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1286
        if (______r___3) {
#line 1287
          enquiry_response(l2);
        } else {

        }
      } else {
#line 1289
        enquiry_cr(l2, 9, 1, PollFlag);
#line 1290
        test_and_clear_bit(7, & l2->flag);
      }
    }
  }
#line 1294
  tmp___42 = legalnr(l2, nr);
#line 1294
  if (tmp___42) {
#line 1294
    tmp___43 = 1;
  } else {
#line 1294
    tmp___43 = 0;
  }
#line 1294
  ______r___10 = tmp___43;
#line 1294
  ______f___1753.__annonCompField3.miss_hit[______r___10] = ______f___1753.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 1294
  if (______r___10) {
#line 1295
    tmp___36 = constant_test_bit(10, & l2->flag);
#line 1295
    if (tmp___36) {
#line 1295
      tmp___38 = 0;
    } else
#line 1295
    if (fi->state == ST_L2_7) {
#line 1295
      tmp___38 = 1;
    } else {
#line 1295
      tmp___38 = 0;
    }
#line 1295
    ______r___9 = tmp___38;
#line 1295
    ______f___1752.__annonCompField3.miss_hit[______r___9] = ______f___1752.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 1295
    if (______r___9) {
#line 1297
      ______r___8 = ! (! (nr == l2->vs));
#line 1297
      ______f___1751.__annonCompField3.miss_hit[______r___8] = ______f___1751.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1297
      if (______r___8) {
#line 1298
        stop_t200(l2, 13);
#line 1299
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 7);
      } else {
#line 1301
        ______r___7 = ! (! (nr != l2->va));
#line 1301
        ______f___1750.__annonCompField3.miss_hit[______r___7] = ______f___1750.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1301
        if (______r___7) {
#line 1302
          restart_t200(l2, 14);
        } else {

        }
      }
    } else {

    }
#line 1304
    setva(l2, nr);
  } else {
#line 1306
    nrerrorrecovery(fi);
#line 1307
    return;
  }
#line 1309
  tmp___47 = skb_queue_len(& l2->i_queue);
#line 1309
  if (tmp___47 && fi->state == ST_L2_7) {
#line 1309
    tmp___48 = 1;
  } else {
#line 1309
    tmp___48 = 0;
  }
#line 1309
  ______r___11 = tmp___48;
#line 1309
  ______f___1754.__annonCompField3.miss_hit[______r___11] = ______f___1754.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 1309
  if (______r___11) {
#line 1310
    mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
  } else {

  }
#line 1311
  tmp___52 = test_and_clear_bit(7, & l2->flag);
#line 1311
  if (tmp___52) {
#line 1311
    tmp___53 = 1;
  } else {
#line 1311
    tmp___53 = 0;
  }
#line 1311
  ______r___12 = tmp___53;
#line 1311
  ______f___1755.__annonCompField3.miss_hit[______r___12] = ______f___1755.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 1311
  if (______r___12) {
#line 1312
    enquiry_cr(l2, 1, 1, 0);
  } else {

  }
#line 1313
  return;
}
}
#line 1325
static void l2_got_tei(struct FsmInst *fi , int event , void *arg ) ;
#line 1325 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1756  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1325, {{0UL, 0UL}}};
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1757  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1330, {{0UL, 0UL}}};
#line 1315 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_got_tei(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int info ;
  int ______r ;
  int ______r___0 ;
  __u32 tmp___2 ;
  int tmp___3 ;

  {
#line 1318
  l2 = fi->userdata;
#line 1321
  l2->tei = (signed char )((long )arg);
#line 1322
  set_channel_address(& l2->ch, l2->sapi, l2->tei);
#line 1323
  info = 1;
#line 1324
  l2up_create(l2, 8, sizeof(info), & info);
#line 1325
  ______r = ! (! (fi->state == ST_L2_3));
#line 1325
  ______f___1756.__annonCompField3.miss_hit[______r] = ______f___1756.__annonCompField3.miss_hit[______r] + 1UL;
#line 1325
  if (______r) {
#line 1326
    establishlink(fi);
#line 1327
    test_and_set_bit(5, & l2->flag);
  } else {
#line 1329
    mISDN_FsmChangeState(fi, ST_L2_4);
  }
#line 1330
  tmp___2 = skb_queue_len(& l2->ui_queue);
#line 1330
  if (tmp___2) {
#line 1330
    tmp___3 = 1;
  } else {
#line 1330
    tmp___3 = 0;
  }
#line 1330
  ______r___0 = tmp___3;
#line 1330
  ______f___1757.__annonCompField3.miss_hit[______r___0] = ______f___1757.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1330
  if (______r___0) {
#line 1331
    tx_ui(l2);
  } else {

  }
#line 1332
  return;
}
}
#line 1347
static void l2_st5_tout_200(struct FsmInst *fi , int event , void *arg ) ;
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1758  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1347, {{0UL, 0UL}}};
#line 1351 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1759  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1351, {{0UL, 0UL}}};
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1760  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1342, {{0UL, 0UL}}};
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1761  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1340, {{0UL, 0UL}}};
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st5_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int tmp ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___0 ;
  int tmp___8 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___20 ;
  int tmp___22 ;
  int tmp___24 ;

  {
#line 1337
  l2 = fi->userdata;
#line 1339
  tmp___20 = constant_test_bit(1, & l2->flag);
#line 1339
  if (tmp___20) {
#line 1339
    tmp___22 = constant_test_bit(11, & l2->flag);
#line 1339
    if (tmp___22) {
#line 1339
      tmp___24 = 1;
    } else {
#line 1339
      tmp___24 = 0;
    }
  } else {
#line 1339
    tmp___24 = 0;
  }
#line 1339
  ______r___2 = tmp___24;
#line 1339
  ______f___1761.__annonCompField3.miss_hit[______r___2] = ______f___1761.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1339
  if (______r___2) {
#line 1341
    mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
  } else {
#line 1342
    ______r___1 = ! (! (l2->rc == l2->N200));
#line 1342
    ______f___1760.__annonCompField3.miss_hit[______r___1] = ______f___1760.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1342
    if (______r___1) {
#line 1343
      mISDN_FsmChangeState(fi, ST_L2_4);
#line 1344
      test_and_clear_bit(6, & l2->flag);
#line 1345
      skb_queue_purge(& l2->i_queue);
#line 1346
      l2mgr(l2, 7940, (void *)'G');
#line 1347
      tmp___5 = constant_test_bit(0, & l2->flag);
#line 1347
      if (tmp___5) {
#line 1347
        tmp___7 = 1;
      } else {
#line 1347
        tmp___7 = 0;
      }
#line 1347
      ______r = tmp___7;
#line 1347
      ______f___1758.__annonCompField3.miss_hit[______r] = ______f___1758.__annonCompField3.miss_hit[______r] + 1UL;
#line 1347
      if (______r) {
#line 1348
        tmp = l2_newid(l2);
#line 1348
        l2down_create(l2, 513, tmp, 0, (void *)0);
      } else {

      }
#line 1350
      st5_dl_release_l2l3(l2);
#line 1351
      ______r___0 = ! (! l2->tm);
#line 1351
      ______f___1759.__annonCompField3.miss_hit[______r___0] = ______f___1759.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1351
      if (______r___0) {
#line 1352
        l2_tei(l2, 7428, 0);
      } else {

      }
    } else {
#line 1354
      l2->rc = l2->rc + 1;
#line 1355
      mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
#line 1356
      tmp___8 = constant_test_bit(3, & l2->flag);
#line 1356
      send_uframe(l2, (void *)0, (tmp___8 ? 111 : 47) | 16, 0);
    }
  }
#line 1359
  return;
}
}
#line 1374
static void l2_st6_tout_200(struct FsmInst *fi , int event , void *arg ) ;
#line 1374 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1762  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1374, {{0UL, 0UL}}};
#line 1369 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1763  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1369, {{0UL, 0UL}}};
#line 1366 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1764  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1367, {{0UL, 0UL}}};
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st6_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___9 ;
  int tmp___11 ;
  int tmp___13 ;

  {
#line 1364
  l2 = fi->userdata;
#line 1366
  tmp___9 = constant_test_bit(1, & l2->flag);
#line 1366
  if (tmp___9) {
#line 1366
    tmp___11 = constant_test_bit(11, & l2->flag);
#line 1366
    if (tmp___11) {
#line 1366
      tmp___13 = 1;
    } else {
#line 1366
      tmp___13 = 0;
    }
  } else {
#line 1366
    tmp___13 = 0;
  }
#line 1366
  ______r___1 = tmp___13;
#line 1366
  ______f___1764.__annonCompField3.miss_hit[______r___1] = ______f___1764.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1366
  if (______r___1) {
#line 1368
    mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
  } else {
#line 1369
    ______r___0 = ! (! (l2->rc == l2->N200));
#line 1369
    ______f___1763.__annonCompField3.miss_hit[______r___0] = ______f___1763.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1369
    if (______r___0) {
#line 1370
      mISDN_FsmChangeState(fi, ST_L2_4);
#line 1371
      test_and_clear_bit(6, & l2->flag);
#line 1372
      l2mgr(l2, 7940, (void *)'H');
#line 1373
      lapb_dl_release_l2l3(l2, 20744);
#line 1374
      ______r = ! (! l2->tm);
#line 1374
      ______f___1762.__annonCompField3.miss_hit[______r] = ______f___1762.__annonCompField3.miss_hit[______r] + 1UL;
#line 1374
      if (______r) {
#line 1375
        l2_tei(l2, 7428, 0);
      } else {

      }
    } else {
#line 1377
      l2->rc = l2->rc + 1;
#line 1378
      mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
#line 1380
      send_uframe(l2, (void *)0, 67 | 16, 0);
    }
  }
#line 1382
  return;
}
}
#line 1389
static void l2_st7_tout_200(struct FsmInst *fi , int event , void *arg ) ;
#line 1389 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1765  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1390, {{0UL, 0UL}}};
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st7_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  int tmp___9 ;
  int tmp___11 ;
  int tmp___13 ;

  {
#line 1387
  l2 = fi->userdata;
#line 1389
  tmp___9 = constant_test_bit(1, & l2->flag);
#line 1389
  if (tmp___9) {
#line 1389
    tmp___11 = constant_test_bit(11, & l2->flag);
#line 1389
    if (tmp___11) {
#line 1389
      tmp___13 = 1;
    } else {
#line 1389
      tmp___13 = 0;
    }
  } else {
#line 1389
    tmp___13 = 0;
  }
#line 1389
  ______r = tmp___13;
#line 1389
  ______f___1765.__annonCompField3.miss_hit[______r] = ______f___1765.__annonCompField3.miss_hit[______r] + 1UL;
#line 1389
  if (______r) {
#line 1391
    mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
#line 1392
    return;
  } else {

  }
#line 1394
  test_and_clear_bit(6, & l2->flag);
#line 1395
  l2->rc = 0;
#line 1396
  mISDN_FsmChangeState(fi, ST_L2_8);
#line 1397
  transmit_enquiry(l2);
#line 1398
  l2->rc = l2->rc + 1;
#line 1399
  return;
}
}
#line 1406
static void l2_st8_tout_200(struct FsmInst *fi , int event , void *arg ) ;
#line 1406 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1766  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1407, {{0UL, 0UL}}};
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1767  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_tout_200",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1412, {{0UL, 0UL}}};
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st8_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  int tmp___9 ;
  int tmp___11 ;
  int tmp___13 ;
  int ______r___0 ;

  {
#line 1404
  l2 = fi->userdata;
#line 1406
  tmp___9 = constant_test_bit(1, & l2->flag);
#line 1406
  if (tmp___9) {
#line 1406
    tmp___11 = constant_test_bit(11, & l2->flag);
#line 1406
    if (tmp___11) {
#line 1406
      tmp___13 = 1;
    } else {
#line 1406
      tmp___13 = 0;
    }
  } else {
#line 1406
    tmp___13 = 0;
  }
#line 1406
  ______r = tmp___13;
#line 1406
  ______f___1766.__annonCompField3.miss_hit[______r] = ______f___1766.__annonCompField3.miss_hit[______r] + 1UL;
#line 1406
  if (______r) {
#line 1408
    mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 9);
#line 1409
    return;
  } else {

  }
#line 1411
  test_and_clear_bit(6, & l2->flag);
#line 1412
  ______r___0 = ! (! (l2->rc == l2->N200));
#line 1412
  ______f___1767.__annonCompField3.miss_hit[______r___0] = ______f___1767.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1412
  if (______r___0) {
#line 1413
    l2mgr(l2, 7940, (void *)'I');
#line 1414
    establishlink(fi);
#line 1415
    test_and_clear_bit(5, & l2->flag);
  } else {
#line 1417
    transmit_enquiry(l2);
#line 1418
    l2->rc = l2->rc + 1;
  }
#line 1420
  return;
}
}
#line 1427
static void l2_st7_tout_203(struct FsmInst *fi , int event , void *arg ) ;
#line 1427 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1768  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st7_tout_203",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1428, {{0UL, 0UL}}};
#line 1422 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st7_tout_203(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  int tmp___9 ;
  int tmp___11 ;
  int tmp___13 ;

  {
#line 1425
  l2 = fi->userdata;
#line 1427
  tmp___9 = constant_test_bit(1, & l2->flag);
#line 1427
  if (tmp___9) {
#line 1427
    tmp___11 = constant_test_bit(11, & l2->flag);
#line 1427
    if (tmp___11) {
#line 1427
      tmp___13 = 1;
    } else {
#line 1427
      tmp___13 = 0;
    }
  } else {
#line 1427
    tmp___13 = 0;
  }
#line 1427
  ______r = tmp___13;
#line 1427
  ______f___1768.__annonCompField3.miss_hit[______r] = ______f___1768.__annonCompField3.miss_hit[______r] + 1UL;
#line 1427
  if (______r) {
#line 1429
    mISDN_FsmAddTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 9);
#line 1430
    return;
  } else {

  }
#line 1432
  mISDN_FsmChangeState(fi, ST_L2_8);
#line 1433
  transmit_enquiry(l2);
#line 1434
  l2->rc = 0;
#line 1435
  return;
}
}
#line 1445
static void l2_pull_iqueue(struct FsmInst *fi , int event , void *arg ) ;
#line 1445 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1769  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1445, {{0UL, 0UL}}};
#line 1449 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1770  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1449, {{0UL, 0UL}}};
#line 1452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1771  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1452, {{0UL, 0UL}}};
#line 1457 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1772  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1457, {{0UL, 0UL}}};
#line 1464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1773  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1464, {{0UL, 0UL}}};
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1774  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1482, {{0UL, 0UL}}};
#line 1475 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1775  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1475, {{0UL, 0UL}}};
#line 1493 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1776  __attribute__((__section__("_ftrace_branch")))  =    {"l2_pull_iqueue",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1493, {{0UL, 0UL}}};
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_pull_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  struct sk_buff *nskb ;
  struct sk_buff *oskb ;
  u_char header[4] ;
  u_int i ;
  u_int p1 ;
  int ______r ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___10 ;
  int tmp___12 ;
  int ______r___2 ;
  int tmp___13 ;
  u_int tmp___14 ;
  u_int tmp___15 ;
  u_int tmp___16 ;
  int ______r___3 ;
  int tmp___22 ;
  int tmp___24 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___26 ;
  int ______r___5 ;
  size_t __len___0 ;
  void *__ret___0 ;
  unsigned char *tmp___28 ;
  size_t __len___1 ;
  void *__ret___1 ;
  unsigned char *tmp___30 ;
  int ______r___8 ;
  u_int tmp___31 ;
  int ______r___9 ;
  int tmp___36 ;
  int tmp___37 ;

  {
#line 1440
  l2 = fi->userdata;
#line 1445
  tmp___3 = cansend(l2);
#line 1445
  if (tmp___3) {
#line 1445
    tmp___4 = 0;
  } else {
#line 1445
    tmp___4 = 1;
  }
#line 1445
  ______r = tmp___4;
#line 1445
  ______f___1769.__annonCompField3.miss_hit[______r] = ______f___1769.__annonCompField3.miss_hit[______r] + 1UL;
#line 1445
  if (______r) {
#line 1446
    return;
  } else {

  }
#line 1448
  skb = skb_dequeue(& l2->i_queue);
#line 1449
  ______r___0 = ! (! (! skb));
#line 1449
  ______f___1770.__annonCompField3.miss_hit[______r___0] = ______f___1770.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1449
  if (______r___0) {
#line 1450
    return;
  } else {

  }
#line 1452
  tmp___10 = constant_test_bit(3, & l2->flag);
#line 1452
  if (tmp___10) {
#line 1452
    tmp___12 = 1;
  } else {
#line 1452
    tmp___12 = 0;
  }
#line 1452
  ______r___1 = tmp___12;
#line 1452
  ______f___1771.__annonCompField3.miss_hit[______r___1] = ______f___1771.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1452
  if (______r___1) {
#line 1453
    p1 = (l2->vs - l2->va) % 128U;
  } else {
#line 1455
    p1 = (l2->vs - l2->va) % 8U;
  }
#line 1456
  p1 = (p1 + l2->sow) % l2->window;
#line 1457
  ______r___2 = ! (! l2->windowar[p1]);
#line 1457
  ______f___1772.__annonCompField3.miss_hit[______r___2] = ______f___1772.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1457
  if (______r___2) {
#line 1458
    printk("<4>isdnl2 try overwrite ack queue entry %d\n", p1);
#line 1460
    consume_skb(l2->windowar[p1]);
  } else {

  }
#line 1462
  l2->windowar[p1] = skb;
#line 1463
  tmp___13 = sethdraddr(l2, header, 0);
#line 1463
  i = tmp___13;
#line 1464
  tmp___22 = constant_test_bit(3, & l2->flag);
#line 1464
  if (tmp___22) {
#line 1464
    tmp___24 = 1;
  } else {
#line 1464
    tmp___24 = 0;
  }
#line 1464
  ______r___3 = tmp___24;
#line 1464
  ______f___1773.__annonCompField3.miss_hit[______r___3] = ______f___1773.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1464
  if (______r___3) {
#line 1465
    tmp___14 = i;
#line 1465
    i = i + (u_int )1;
#line 1465
    header[tmp___14] = l2->vs << 1;
#line 1466
    tmp___15 = i;
#line 1466
    i = i + (u_int )1;
#line 1466
    header[tmp___15] = l2->vr << 1;
#line 1467
    l2->vs = (l2->vs + (u_int )1) % 128U;
  } else {
#line 1469
    tmp___16 = i;
#line 1469
    i = i + (u_int )1;
#line 1469
    header[tmp___16] = (l2->vr << 5) | (l2->vs << 1);
#line 1470
    l2->vs = (l2->vs + (u_int )1) % 8U;
  }
#line 1473
  nskb = skb_clone(skb, 32U);
#line 1474
  p1 = skb_headroom(nskb);
#line 1475
  ______r___8 = ! (! (p1 >= i));
#line 1475
  ______f___1775.__annonCompField3.miss_hit[______r___8] = ______f___1775.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1475
  if (______r___8) {
#line 1476
    __len = i;
#line 1476
    tmp___26 = skb_push(nskb, i);
#line 1476
    __ret = __builtin_memcpy(tmp___26, header, __len);
  } else {
#line 1478
    printk("<4>isdnl2 pull_iqueue skb header(%d/%d) too short\n", i, p1);
#line 1480
    oskb = nskb;
#line 1481
    nskb = mI_alloc_skb___0(oskb->len + i, 32U);
#line 1482
    ______r___5 = ! (! (! nskb));
#line 1482
    ______f___1774.__annonCompField3.miss_hit[______r___5] = ______f___1774.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1482
    if (______r___5) {
#line 1483
      consume_skb(oskb);
#line 1484
      printk("<4>%s: no skb mem\n", "l2_pull_iqueue");
#line 1485
      return;
    } else {

    }
#line 1487
    __len___0 = i;
#line 1487
    tmp___28 = skb_put(nskb, i);
#line 1487
    __ret___0 = __builtin_memcpy(tmp___28, header, __len___0);
#line 1488
    __len___1 = oskb->len;
#line 1488
    tmp___30 = skb_put(nskb, oskb->len);
#line 1488
    __ret___1 = __builtin_memcpy(tmp___30, oskb->data, __len___1);
#line 1489
    consume_skb(oskb);
  }
#line 1491
  tmp___31 = l2_newid(l2);
#line 1491
  l2down(l2, 8193, tmp___31, nskb);
#line 1492
  test_and_clear_bit(7, & l2->flag);
#line 1493
  tmp___36 = test_and_set_bit(6, & l2->flag);
#line 1493
  if (tmp___36) {
#line 1493
    tmp___37 = 0;
  } else {
#line 1493
    tmp___37 = 1;
  }
#line 1493
  ______r___9 = tmp___37;
#line 1493
  ______f___1776.__annonCompField3.miss_hit[______r___9] = ______f___1776.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 1493
  if (______r___9) {
#line 1494
    mISDN_FsmDelTimer(& l2->t203, 13);
#line 1495
    mISDN_FsmAddTimer(& l2->t200, l2->T200, EV_L2_T200, (void *)0, 11);
  } else {

  }
#line 1497
  return;
}
}
#line 1508
static void l2_st8_got_super(struct FsmInst *fi , int event , void *arg ) ;
#line 1508 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1777  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1508, {{0UL, 0UL}}};
#line 1513 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1778  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1513, {{0UL, 0UL}}};
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1779  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1519, {{0UL, 0UL}}};
#line 1529 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1780  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1529, {{0UL, 0UL}}};
#line 1539 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1781  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1539, {{0UL, 0UL}}};
#line 1528 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1782  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1528, {{0UL, 0UL}}};
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1783  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1544, {{0UL, 0UL}}};
#line 1546 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1784  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1546, {{0UL, 0UL}}};
#line 1527 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1785  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st8_got_super",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1527, {{0UL, 0UL}}};
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st8_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int rnr ;
  unsigned int nr ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  u_int tmp___7 ;
  int ______r___0 ;
  int tmp___11 ;
  int tmp___12 ;
  int ______r___1 ;
  int tmp___18 ;
  int tmp___20 ;
  int ______r___2 ;
  int ______r___3 ;
  __u32 tmp___27 ;
  unsigned int tmp___28 ;
  int tmp___29 ;
  int ______r___4 ;
  unsigned int tmp___33 ;
  int tmp___34 ;
  int ______r___5 ;
  int ______r___6 ;
  unsigned int tmp___38 ;
  int tmp___39 ;
  int ______r___7 ;

  {
#line 1502
  l2 = fi->userdata;
#line 1503
  skb = arg;
#line 1504
  rnr = 0;
#line 1507
  rsp = (int )*(skb->data) & 2;
#line 1508
  tmp___4 = constant_test_bit(2, & l2->flag);
#line 1508
  if (tmp___4) {
#line 1508
    tmp___6 = 1;
  } else {
#line 1508
    tmp___6 = 0;
  }
#line 1508
  ______r = tmp___6;
#line 1508
  ______f___1777.__annonCompField3.miss_hit[______r] = ______f___1777.__annonCompField3.miss_hit[______r] + 1UL;
#line 1508
  if (______r) {
#line 1509
    rsp = ! rsp;
  } else {

  }
#line 1511
  tmp___7 = l2addrsize(l2);
#line 1511
  skb_pull(skb, tmp___7);
#line 1513
  tmp___11 = IsRNR(skb->data, l2);
#line 1513
  if (tmp___11) {
#line 1513
    tmp___12 = 1;
  } else {
#line 1513
    tmp___12 = 0;
  }
#line 1513
  ______r___0 = tmp___12;
#line 1513
  ______f___1778.__annonCompField3.miss_hit[______r___0] = ______f___1778.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1513
  if (______r___0) {
#line 1514
    set_peer_busy(l2);
#line 1515
    rnr = 1;
  } else {
#line 1517
    clear_peer_busy(l2);
  }
#line 1519
  tmp___18 = constant_test_bit(3, & l2->flag);
#line 1519
  if (tmp___18) {
#line 1519
    tmp___20 = 1;
  } else {
#line 1519
    tmp___20 = 0;
  }
#line 1519
  ______r___1 = tmp___20;
#line 1519
  ______f___1779.__annonCompField3.miss_hit[______r___1] = ______f___1779.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1519
  if (______r___1) {
#line 1520
    PollFlag = ((int )*(skb->data + 1) & 1) == 1;
#line 1521
    nr = (int )*(skb->data + 1) >> 1;
  } else {
#line 1523
    PollFlag = (int )*(skb->data + 0) & 16;
#line 1524
    nr = ((int )*(skb->data + 0) >> 5) & 7;
  }
#line 1526
  consume_skb(skb);
#line 1527
  ______r___7 = ! (! (rsp && PollFlag));
#line 1527
  ______f___1785.__annonCompField3.miss_hit[______r___7] = ______f___1785.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1527
  if (______r___7) {
#line 1528
    tmp___33 = legalnr(l2, nr);
#line 1528
    if (tmp___33) {
#line 1528
      tmp___34 = 1;
    } else {
#line 1528
      tmp___34 = 0;
    }
#line 1528
    ______r___4 = tmp___34;
#line 1528
    ______f___1782.__annonCompField3.miss_hit[______r___4] = ______f___1782.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1528
    if (______r___4) {
#line 1529
      ______r___2 = ! (! rnr);
#line 1529
      ______f___1780.__annonCompField3.miss_hit[______r___2] = ______f___1780.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1529
      if (______r___2) {
#line 1530
        restart_t200(l2, 15);
      } else {
#line 1532
        stop_t200(l2, 16);
#line 1533
        mISDN_FsmAddTimer(& l2->t203, l2->T203, EV_L2_T203, (void *)0, 5);
#line 1535
        setva(l2, nr);
      }
#line 1537
      invoke_retransmission(l2, nr);
#line 1538
      mISDN_FsmChangeState(fi, ST_L2_7);
#line 1539
      tmp___27 = skb_queue_len(& l2->i_queue);
#line 1539
      if (tmp___27) {
#line 1539
        tmp___28 = cansend(l2);
#line 1539
        if (tmp___28) {
#line 1539
          tmp___29 = 1;
        } else {
#line 1539
          tmp___29 = 0;
        }
      } else {
#line 1539
        tmp___29 = 0;
      }
#line 1539
      ______r___3 = tmp___29;
#line 1539
      ______f___1781.__annonCompField3.miss_hit[______r___3] = ______f___1781.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1539
      if (______r___3) {
#line 1540
        mISDN_FsmEvent(fi, EV_L2_ACK_PULL, (void *)0);
      } else {

      }
    } else {
#line 1542
      nrerrorrecovery(fi);
    }
  } else {
#line 1544
    ______r___5 = ! (! (! rsp && PollFlag));
#line 1544
    ______f___1783.__annonCompField3.miss_hit[______r___5] = ______f___1783.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1544
    if (______r___5) {
#line 1545
      enquiry_response(l2);
    } else {

    }
#line 1546
    tmp___38 = legalnr(l2, nr);
#line 1546
    if (tmp___38) {
#line 1546
      tmp___39 = 1;
    } else {
#line 1546
      tmp___39 = 0;
    }
#line 1546
    ______r___6 = tmp___39;
#line 1546
    ______f___1784.__annonCompField3.miss_hit[______r___6] = ______f___1784.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1546
    if (______r___6) {
#line 1547
      setva(l2, nr);
    } else {
#line 1549
      nrerrorrecovery(fi);
    }
  }
#line 1551
  return;
}
}
#line 1561
static void l2_got_FRMR(struct FsmInst *fi , int event , void *arg ) ;
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1786  __attribute__((__section__("_ftrace_branch")))  =    {"l2_got_FRMR",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1562, {{0UL, 0UL}}};
#line 1553 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_got_FRMR(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int ______r ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1556
  l2 = fi->userdata;
#line 1557
  skb = arg;
#line 1559
  tmp = l2addrsize(l2);
#line 1559
  skb_pull(skb, tmp + (u_int )1);
#line 1561
  if (! ((int )*(skb->data + 0) & 1) || ((int )*(skb->data + 0) & 3) == 1) {
#line 1561
    tmp___5 = 1;
  } else {
#line 1561
    tmp___4 = IsUA(skb->data);
#line 1561
    if (tmp___4 && fi->state == ST_L2_7) {
#line 1561
      tmp___5 = 1;
    } else {
#line 1561
      tmp___5 = 0;
    }
  }
#line 1561
  ______r = tmp___5;
#line 1561
  ______f___1786.__annonCompField3.miss_hit[______r] = ______f___1786.__annonCompField3.miss_hit[______r] + 1UL;
#line 1561
  if (______r) {
#line 1563
    l2mgr(l2, 7940, (void *)'K');
#line 1564
    establishlink(fi);
#line 1565
    test_and_clear_bit(5, & l2->flag);
  } else {

  }
#line 1567
  consume_skb(skb);
#line 1568
  return;
}
}
#line 1570 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st24_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1573
  l2 = fi->userdata;
#line 1575
  skb_queue_purge(& l2->ui_queue);
#line 1576
  l2->tei = 127;
#line 1577
  mISDN_FsmChangeState(fi, ST_L2_1);
#line 1578
  return;
}
}
#line 1580 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st3_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1583
  l2 = fi->userdata;
#line 1585
  skb_queue_purge(& l2->ui_queue);
#line 1586
  l2->tei = 127;
#line 1587
  l2up_create(l2, 4360, 0, (void *)0);
#line 1588
  mISDN_FsmChangeState(fi, ST_L2_1);
#line 1589
  return;
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st5_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1594
  l2 = fi->userdata;
#line 1596
  skb_queue_purge(& l2->i_queue);
#line 1597
  skb_queue_purge(& l2->ui_queue);
#line 1598
  freewin(l2);
#line 1599
  l2->tei = 127;
#line 1600
  stop_t200(l2, 17);
#line 1601
  st5_dl_release_l2l3(l2);
#line 1602
  mISDN_FsmChangeState(fi, ST_L2_1);
#line 1603
  return;
}
}
#line 1605 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st6_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1608
  l2 = fi->userdata;
#line 1610
  skb_queue_purge(& l2->ui_queue);
#line 1611
  l2->tei = 127;
#line 1612
  stop_t200(l2, 18);
#line 1613
  l2up_create(l2, 4360, 0, (void *)0);
#line 1614
  mISDN_FsmChangeState(fi, ST_L2_1);
#line 1615
  return;
}
}
#line 1617 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1620
  l2 = fi->userdata;
#line 1622
  skb_queue_purge(& l2->i_queue);
#line 1623
  skb_queue_purge(& l2->ui_queue);
#line 1624
  freewin(l2);
#line 1625
  l2->tei = 127;
#line 1626
  stop_t200(l2, 17);
#line 1627
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1628
  l2up_create(l2, 4360, 0, (void *)0);
#line 1633
  mISDN_FsmChangeState(fi, ST_L2_1);
#line 1634
  return;
}
}
#line 1644
static void l2_st14_persistant_da(struct FsmInst *fi , int event , void *arg ) ;
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1787  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st14_persistant_da",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1644, {{0UL, 0UL}}};
#line 1636 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st14_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1639
  l2 = fi->userdata;
#line 1640
  skb = arg;
#line 1642
  skb_queue_purge(& l2->i_queue);
#line 1643
  skb_queue_purge(& l2->ui_queue);
#line 1644
  tmp___2 = test_and_clear_bit(13, & l2->flag);
#line 1644
  if (tmp___2) {
#line 1644
    tmp___3 = 1;
  } else {
#line 1644
    tmp___3 = 0;
  }
#line 1644
  ______r = tmp___3;
#line 1644
  ______f___1787.__annonCompField3.miss_hit[______r] = ______f___1787.__annonCompField3.miss_hit[______r] + 1UL;
#line 1644
  if (______r) {
#line 1645
    l2up(l2, 4360, skb);
  } else {
#line 1647
    consume_skb(skb);
  }
#line 1648
  return;
}
}
#line 1662
static void l2_st5_persistant_da(struct FsmInst *fi , int event , void *arg ) ;
#line 1662 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1788  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st5_persistant_da",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1662, {{0UL, 0UL}}};
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st5_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;

  {
#line 1653
  l2 = fi->userdata;
#line 1654
  skb = arg;
#line 1656
  skb_queue_purge(& l2->i_queue);
#line 1657
  skb_queue_purge(& l2->ui_queue);
#line 1658
  freewin(l2);
#line 1659
  stop_t200(l2, 19);
#line 1660
  st5_dl_release_l2l3(l2);
#line 1661
  mISDN_FsmChangeState(fi, ST_L2_4);
#line 1662
  ______r = ! (! l2->tm);
#line 1662
  ______f___1788.__annonCompField3.miss_hit[______r] = ______f___1788.__annonCompField3.miss_hit[______r] + 1UL;
#line 1662
  if (______r) {
#line 1663
    l2_tei(l2, 7428, 0);
  } else {

  }
#line 1664
  consume_skb(skb);
#line 1665
  return;
}
}
#line 1677
static void l2_st6_persistant_da(struct FsmInst *fi , int event , void *arg ) ;
#line 1677 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1789  __attribute__((__section__("_ftrace_branch")))  =    {"l2_st6_persistant_da",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1677, {{0UL, 0UL}}};
#line 1667 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_st6_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;

  {
#line 1670
  l2 = fi->userdata;
#line 1671
  skb = arg;
#line 1673
  skb_queue_purge(& l2->ui_queue);
#line 1674
  stop_t200(l2, 20);
#line 1675
  l2up(l2, 20744, skb);
#line 1676
  mISDN_FsmChangeState(fi, ST_L2_4);
#line 1677
  ______r = ! (! l2->tm);
#line 1677
  ______f___1789.__annonCompField3.miss_hit[______r] = ______f___1789.__annonCompField3.miss_hit[______r] + 1UL;
#line 1677
  if (______r) {
#line 1678
    l2_tei(l2, 7428, 0);
  } else {

  }
#line 1679
  return;
}
}
#line 1694
static void l2_persistant_da(struct FsmInst *fi , int event , void *arg ) ;
#line 1694 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1790  __attribute__((__section__("_ftrace_branch")))  =    {"l2_persistant_da",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1694, {{0UL, 0UL}}};
#line 1681 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;

  {
#line 1684
  l2 = fi->userdata;
#line 1685
  skb = arg;
#line 1687
  skb_queue_purge(& l2->i_queue);
#line 1688
  skb_queue_purge(& l2->ui_queue);
#line 1689
  freewin(l2);
#line 1690
  stop_t200(l2, 19);
#line 1691
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1692
  l2up(l2, 4360, skb);
#line 1693
  mISDN_FsmChangeState(fi, ST_L2_4);
#line 1694
  ______r = ! (! l2->tm);
#line 1694
  ______f___1790.__annonCompField3.miss_hit[______r] = ______f___1790.__annonCompField3.miss_hit[______r] + 1UL;
#line 1694
  if (______r) {
#line 1695
    l2_tei(l2, 7428, 0);
  } else {

  }
#line 1696
  return;
}
}
#line 1704
static void l2_set_own_busy(struct FsmInst *fi , int event , void *arg ) ;
#line 1704 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1791  __attribute__((__section__("_ftrace_branch")))  =    {"l2_set_own_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1704, {{0UL, 0UL}}};
#line 1708 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1792  __attribute__((__section__("_ftrace_branch")))  =    {"l2_set_own_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1708, {{0UL, 0UL}}};
#line 1698 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_set_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;

  {
#line 1701
  l2 = fi->userdata;
#line 1702
  skb = arg;
#line 1704
  tmp___3 = test_and_set_bit(9, & l2->flag);
#line 1704
  if (tmp___3) {
#line 1704
    tmp___4 = 0;
  } else {
#line 1704
    tmp___4 = 1;
  }
#line 1704
  ______r = tmp___4;
#line 1704
  ______f___1791.__annonCompField3.miss_hit[______r] = ______f___1791.__annonCompField3.miss_hit[______r] + 1UL;
#line 1704
  if (______r) {
#line 1705
    enquiry_cr(l2, 5, 1, 0);
#line 1706
    test_and_clear_bit(7, & l2->flag);
  } else {

  }
#line 1708
  ______r___0 = ! (! skb);
#line 1708
  ______f___1792.__annonCompField3.miss_hit[______r___0] = ______f___1792.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1708
  if (______r___0) {
#line 1709
    consume_skb(skb);
  } else {

  }
#line 1710
  return;
}
}
#line 1718
static void l2_clear_own_busy(struct FsmInst *fi , int event , void *arg ) ;
#line 1718 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1793  __attribute__((__section__("_ftrace_branch")))  =    {"l2_clear_own_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1718, {{0UL, 0UL}}};
#line 1722 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1794  __attribute__((__section__("_ftrace_branch")))  =    {"l2_clear_own_busy",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1722, {{0UL, 0UL}}};
#line 1712 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_clear_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;

  {
#line 1715
  l2 = fi->userdata;
#line 1716
  skb = arg;
#line 1718
  tmp___3 = test_and_clear_bit(9, & l2->flag);
#line 1718
  if (tmp___3) {
#line 1718
    tmp___4 = 0;
  } else {
#line 1718
    tmp___4 = 1;
  }
#line 1718
  ______r = tmp___4;
#line 1718
  ______f___1793.__annonCompField3.miss_hit[______r] = ______f___1793.__annonCompField3.miss_hit[______r] + 1UL;
#line 1718
  if (______r) {
#line 1719
    enquiry_cr(l2, 1, 1, 0);
#line 1720
    test_and_clear_bit(7, & l2->flag);
  } else {

  }
#line 1722
  ______r___0 = ! (! skb);
#line 1722
  ______f___1794.__annonCompField3.miss_hit[______r___0] = ______f___1794.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1722
  if (______r___0) {
#line 1723
    consume_skb(skb);
  } else {

  }
#line 1724
  return;
}
}
#line 1726 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_frame_error(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1729
  l2 = fi->userdata;
#line 1731
  l2mgr(l2, 7940, arg);
#line 1732
  return;
}
}
#line 1734 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void l2_frame_error_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1737
  l2 = fi->userdata;
#line 1739
  l2mgr(l2, 7940, arg);
#line 1740
  establishlink(fi);
#line 1741
  test_and_clear_bit(5, & l2->flag);
#line 1742
  return;
}
}
#line 1744 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct FsmNode L2FnList[88]  = 
#line 1744
  {      {ST_L2_1, EV_L2_DL_ESTABLISH_REQ, & l2_mdl_assign}, 
        {ST_L2_2, EV_L2_DL_ESTABLISH_REQ, & l2_go_st3}, 
        {ST_L2_4, EV_L2_DL_ESTABLISH_REQ, & l2_establish}, 
        {ST_L2_5, EV_L2_DL_ESTABLISH_REQ, & l2_discard_i_setl3}, 
        {ST_L2_7, EV_L2_DL_ESTABLISH_REQ, & l2_l3_reestablish}, 
        {ST_L2_8, EV_L2_DL_ESTABLISH_REQ, & l2_l3_reestablish}, 
        {ST_L2_4, EV_L2_DL_RELEASE_REQ, & l2_release}, 
        {ST_L2_5, EV_L2_DL_RELEASE_REQ, & l2_pend_rel}, 
        {ST_L2_7, EV_L2_DL_RELEASE_REQ, & l2_disconnect}, 
        {ST_L2_8, EV_L2_DL_RELEASE_REQ, & l2_disconnect}, 
        {ST_L2_5, EV_L2_DL_DATA, & l2_feed_i_if_reest}, 
        {ST_L2_7, EV_L2_DL_DATA, & l2_feed_i_pull}, 
        {ST_L2_8, EV_L2_DL_DATA, & l2_feed_iqueue}, 
        {ST_L2_1, EV_L2_DL_UNITDATA, & l2_queue_ui_assign}, 
        {ST_L2_2, EV_L2_DL_UNITDATA, & l2_queue_ui}, 
        {ST_L2_3, EV_L2_DL_UNITDATA, & l2_queue_ui}, 
        {ST_L2_4, EV_L2_DL_UNITDATA, & l2_send_ui}, 
        {ST_L2_5, EV_L2_DL_UNITDATA, & l2_send_ui}, 
        {ST_L2_6, EV_L2_DL_UNITDATA, & l2_send_ui}, 
        {ST_L2_7, EV_L2_DL_UNITDATA, & l2_send_ui}, 
        {ST_L2_8, EV_L2_DL_UNITDATA, & l2_send_ui}, 
        {ST_L2_1, EV_L2_MDL_ASSIGN, & l2_got_tei}, 
        {ST_L2_2, EV_L2_MDL_ASSIGN, & l2_got_tei}, 
        {ST_L2_3, EV_L2_MDL_ASSIGN, & l2_got_tei}, 
        {ST_L2_2, EV_L2_MDL_ERROR, & l2_st24_tei_remove}, 
        {ST_L2_3, EV_L2_MDL_ERROR, & l2_st3_tei_remove}, 
        {ST_L2_4, EV_L2_MDL_REMOVE, & l2_st24_tei_remove}, 
        {ST_L2_5, EV_L2_MDL_REMOVE, & l2_st5_tei_remove}, 
        {ST_L2_6, EV_L2_MDL_REMOVE, & l2_st6_tei_remove}, 
        {ST_L2_7, EV_L2_MDL_REMOVE, & l2_tei_remove}, 
        {ST_L2_8, EV_L2_MDL_REMOVE, & l2_tei_remove}, 
        {ST_L2_4, EV_L2_SABME, & l2_start_multi}, 
        {ST_L2_5, EV_L2_SABME, & l2_send_UA}, 
        {ST_L2_6, EV_L2_SABME, & l2_send_DM}, 
        {ST_L2_7, EV_L2_SABME, & l2_restart_multi}, 
        {ST_L2_8, EV_L2_SABME, & l2_restart_multi}, 
        {ST_L2_4, EV_L2_DISC, & l2_send_DM}, 
        {ST_L2_5, EV_L2_DISC, & l2_send_DM}, 
        {ST_L2_6, EV_L2_DISC, & l2_send_UA}, 
        {ST_L2_7, EV_L2_DISC, & l2_stop_multi}, 
        {ST_L2_8, EV_L2_DISC, & l2_stop_multi}, 
        {ST_L2_4, EV_L2_UA, & l2_mdl_error_ua}, 
        {ST_L2_5, EV_L2_UA, & l2_connected}, 
        {ST_L2_6, EV_L2_UA, & l2_released}, 
        {ST_L2_7, EV_L2_UA, & l2_mdl_error_ua}, 
        {ST_L2_8, EV_L2_UA, & l2_mdl_error_ua}, 
        {ST_L2_4, EV_L2_DM, & l2_reestablish}, 
        {ST_L2_5, EV_L2_DM, & l2_st5_dm_release}, 
        {ST_L2_6, EV_L2_DM, & l2_st6_dm_release}, 
        {ST_L2_7, EV_L2_DM, & l2_mdl_error_dm}, 
        {ST_L2_8, EV_L2_DM, & l2_st8_mdl_error_dm}, 
        {ST_L2_1, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_2, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_3, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_4, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_5, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_6, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_7, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_8, EV_L2_UI, & l2_got_ui}, 
        {ST_L2_7, EV_L2_FRMR, & l2_got_FRMR}, 
        {ST_L2_8, EV_L2_FRMR, & l2_got_FRMR}, 
        {ST_L2_7, EV_L2_SUPER, & l2_st7_got_super}, 
        {ST_L2_8, EV_L2_SUPER, & l2_st8_got_super}, 
        {ST_L2_7, EV_L2_I, & l2_got_iframe}, 
        {ST_L2_8, EV_L2_I, & l2_got_iframe}, 
        {ST_L2_5, EV_L2_T200, & l2_st5_tout_200}, 
        {ST_L2_6, EV_L2_T200, & l2_st6_tout_200}, 
        {ST_L2_7, EV_L2_T200, & l2_st7_tout_200}, 
        {ST_L2_8, EV_L2_T200, & l2_st8_tout_200}, 
        {ST_L2_7, EV_L2_T203, & l2_st7_tout_203}, 
        {ST_L2_7, EV_L2_ACK_PULL, & l2_pull_iqueue}, 
        {ST_L2_7, EV_L2_SET_OWN_BUSY, & l2_set_own_busy}, 
        {ST_L2_8, EV_L2_SET_OWN_BUSY, & l2_set_own_busy}, 
        {ST_L2_7, EV_L2_CLEAR_OWN_BUSY, & l2_clear_own_busy}, 
        {ST_L2_8, EV_L2_CLEAR_OWN_BUSY, & l2_clear_own_busy}, 
        {ST_L2_4, EV_L2_FRAME_ERROR, & l2_frame_error}, 
        {ST_L2_5, EV_L2_FRAME_ERROR, & l2_frame_error}, 
        {ST_L2_6, EV_L2_FRAME_ERROR, & l2_frame_error}, 
        {ST_L2_7, EV_L2_FRAME_ERROR, & l2_frame_error_reest}, 
        {ST_L2_8, EV_L2_FRAME_ERROR, & l2_frame_error_reest}, 
        {ST_L2_1, EV_L1_DEACTIVATE, & l2_st14_persistant_da}, 
        {ST_L2_2, EV_L1_DEACTIVATE, & l2_st24_tei_remove}, 
        {ST_L2_3, EV_L1_DEACTIVATE, & l2_st3_tei_remove}, 
        {ST_L2_4, EV_L1_DEACTIVATE, & l2_st14_persistant_da}, 
        {ST_L2_5, EV_L1_DEACTIVATE, & l2_st5_persistant_da}, 
        {ST_L2_6, EV_L1_DEACTIVATE, & l2_st6_persistant_da}, 
        {ST_L2_7, EV_L1_DEACTIVATE, & l2_persistant_da}, 
        {ST_L2_8, EV_L1_DEACTIVATE, & l2_persistant_da}};
#line 1848
static int ph_data_indication(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) ;
#line 1848 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1795  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1848, {{0UL, 0UL}}};
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1796  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1855, {{0UL, 0UL}}};
#line 1862 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1797  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1862, {{0UL, 0UL}}};
#line 1871 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1798  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1871, {{0UL, 0UL}}};
#line 1852 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1799  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1852, {{0UL, 0UL}}};
#line 1884 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1800  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1884, {{0UL, 0UL}}};
#line 1888 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1801  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1888, {{0UL, 0UL}}};
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1802  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1892, {{0UL, 0UL}}};
#line 1896 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1803  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1896, {{0UL, 0UL}}};
#line 1900 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1804  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1900, {{0UL, 0UL}}};
#line 1904 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1805  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1904, {{0UL, 0UL}}};
#line 1908 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1806  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1908, {{0UL, 0UL}}};
#line 1912 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1807  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1912, {{0UL, 0UL}}};
#line 1910 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1808  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1910, {{0UL, 0UL}}};
#line 1906 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1809  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1906, {{0UL, 0UL}}};
#line 1902 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1810  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1902, {{0UL, 0UL}}};
#line 1898 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1811  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1898, {{0UL, 0UL}}};
#line 1894 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1812  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1894, {{0UL, 0UL}}};
#line 1890 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1813  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1890, {{0UL, 0UL}}};
#line 1886 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1814  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1886, {{0UL, 0UL}}};
#line 1882 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1815  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1882, {{0UL, 0UL}}};
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1816  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_indication",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1916, {{0UL, 0UL}}};
#line 1838 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int ph_data_indication(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  u_char *datap ;
  int ret ;
  int psapi ;
  int ptei ;
  u_int l ;
  int c ;
  int ______r ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___6 ;
  int tmp___8 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int tmp___12 ;
  int tmp___13 ;
  int ______r___13 ;
  int tmp___17 ;
  int tmp___18 ;
  int ______r___14 ;
  int tmp___22 ;
  int tmp___23 ;
  int ______r___15 ;
  int tmp___27 ;
  int tmp___28 ;
  int ______r___16 ;
  int tmp___32 ;
  int tmp___33 ;
  int ______r___17 ;
  int tmp___37 ;
  int tmp___38 ;
  int ______r___18 ;
  int tmp___42 ;
  int tmp___43 ;
  int ______r___19 ;
  int ______r___20 ;

  {
#line 1841
  datap = skb->data;
#line 1842
  ret = -22;
#line 1845
  c = 0;
#line 1847
  l = l2addrsize(l2);
#line 1848
  ______r = ! (! (skb->len <= l));
#line 1848
  ______f___1795.__annonCompField3.miss_hit[______r] = ______f___1795.__annonCompField3.miss_hit[______r] + 1UL;
#line 1848
  if (______r) {
#line 1849
    mISDN_FsmEvent(& l2->l2m, EV_L2_FRAME_ERROR, (void *)'N');
#line 1850
    return (ret);
  } else {

  }
#line 1852
  tmp___6 = constant_test_bit(1, & l2->flag);
#line 1852
  if (tmp___6) {
#line 1852
    tmp___8 = 1;
  } else {
#line 1852
    tmp___8 = 0;
  }
#line 1852
  ______r___3 = tmp___8;
#line 1852
  ______f___1799.__annonCompField3.miss_hit[______r___3] = ______f___1799.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1852
  if (______r___3) {
#line 1853
    tmp = datap;
#line 1853
    datap = datap + 1;
#line 1853
    psapi = *tmp;
#line 1854
    tmp___0 = datap;
#line 1854
    datap = datap + 1;
#line 1854
    ptei = *tmp___0;
#line 1855
    ______r___0 = ! (! (psapi & 1 || ! (ptei & 1)));
#line 1855
    ______f___1796.__annonCompField3.miss_hit[______r___0] = ______f___1796.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1855
    if (______r___0) {
#line 1856
      printk("<4>l2 D-channel frame wrong EA0/EA1\n");
#line 1858
      return (ret);
    } else {

    }
#line 1860
    psapi = psapi >> 2;
#line 1861
    ptei = ptei >> 1;
#line 1862
    ______r___1 = ! (! (psapi != (int )l2->sapi));
#line 1862
    ______f___1797.__annonCompField3.miss_hit[______r___1] = ______f___1797.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1862
    if (______r___1) {
#line 1868
      consume_skb(skb);
#line 1869
      return (0);
    } else {

    }
#line 1871
    ______r___2 = ! (! (ptei != (int )l2->tei && ptei != 127));
#line 1871
    ______f___1798.__annonCompField3.miss_hit[______r___2] = ______f___1798.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1871
    if (______r___2) {
#line 1877
      consume_skb(skb);
#line 1878
      return (0);
    } else {

    }
  } else {
#line 1881
    datap = datap + l;
  }
#line 1882
  ______r___19 = ! (! (! ((int )*datap & 1)));
#line 1882
  ______f___1815.__annonCompField3.miss_hit[______r___19] = ______f___1815.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 1882
  if (______r___19) {
#line 1883
    c = iframe_error(l2, skb);
#line 1884
    ______r___4 = ! (! (! c));
#line 1884
    ______f___1800.__annonCompField3.miss_hit[______r___4] = ______f___1800.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1884
    if (______r___4) {
#line 1885
      ret = mISDN_FsmEvent(& l2->l2m, EV_L2_I, skb);
    } else {

    }
  } else {
#line 1886
    tmp___42 = IsSFrame(datap, l2);
#line 1886
    if (tmp___42) {
#line 1886
      tmp___43 = 1;
    } else {
#line 1886
      tmp___43 = 0;
    }
#line 1886
    ______r___18 = tmp___43;
#line 1886
    ______f___1814.__annonCompField3.miss_hit[______r___18] = ______f___1814.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 1886
    if (______r___18) {
#line 1887
      c = super_error(l2, skb);
#line 1888
      ______r___5 = ! (! (! c));
#line 1888
      ______f___1801.__annonCompField3.miss_hit[______r___5] = ______f___1801.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1888
      if (______r___5) {
#line 1889
        ret = mISDN_FsmEvent(& l2->l2m, EV_L2_SUPER, skb);
      } else {

      }
    } else {
#line 1890
      tmp___37 = IsUI(datap);
#line 1890
      if (tmp___37) {
#line 1890
        tmp___38 = 1;
      } else {
#line 1890
        tmp___38 = 0;
      }
#line 1890
      ______r___17 = tmp___38;
#line 1890
      ______f___1813.__annonCompField3.miss_hit[______r___17] = ______f___1813.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 1890
      if (______r___17) {
#line 1891
        c = UI_error(l2, skb);
#line 1892
        ______r___6 = ! (! (! c));
#line 1892
        ______f___1802.__annonCompField3.miss_hit[______r___6] = ______f___1802.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1892
        if (______r___6) {
#line 1893
          ret = mISDN_FsmEvent(& l2->l2m, EV_L2_UI, skb);
        } else {

        }
      } else {
#line 1894
        tmp___32 = IsSABME(datap, l2);
#line 1894
        if (tmp___32) {
#line 1894
          tmp___33 = 1;
        } else {
#line 1894
          tmp___33 = 0;
        }
#line 1894
        ______r___16 = tmp___33;
#line 1894
        ______f___1812.__annonCompField3.miss_hit[______r___16] = ______f___1812.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 1894
        if (______r___16) {
#line 1895
          c = unnum_error(l2, skb, 0);
#line 1896
          ______r___7 = ! (! (! c));
#line 1896
          ______f___1803.__annonCompField3.miss_hit[______r___7] = ______f___1803.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1896
          if (______r___7) {
#line 1897
            ret = mISDN_FsmEvent(& l2->l2m, EV_L2_SABME, skb);
          } else {

          }
        } else {
#line 1898
          tmp___27 = IsUA(datap);
#line 1898
          if (tmp___27) {
#line 1898
            tmp___28 = 1;
          } else {
#line 1898
            tmp___28 = 0;
          }
#line 1898
          ______r___15 = tmp___28;
#line 1898
          ______f___1811.__annonCompField3.miss_hit[______r___15] = ______f___1811.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 1898
          if (______r___15) {
#line 1899
            c = unnum_error(l2, skb, 1);
#line 1900
            ______r___8 = ! (! (! c));
#line 1900
            ______f___1804.__annonCompField3.miss_hit[______r___8] = ______f___1804.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1900
            if (______r___8) {
#line 1901
              ret = mISDN_FsmEvent(& l2->l2m, EV_L2_UA, skb);
            } else {

            }
          } else {
#line 1902
            tmp___22 = IsDISC(datap);
#line 1902
            if (tmp___22) {
#line 1902
              tmp___23 = 1;
            } else {
#line 1902
              tmp___23 = 0;
            }
#line 1902
            ______r___14 = tmp___23;
#line 1902
            ______f___1810.__annonCompField3.miss_hit[______r___14] = ______f___1810.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 1902
            if (______r___14) {
#line 1903
              c = unnum_error(l2, skb, 0);
#line 1904
              ______r___9 = ! (! (! c));
#line 1904
              ______f___1805.__annonCompField3.miss_hit[______r___9] = ______f___1805.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 1904
              if (______r___9) {
#line 1905
                ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DISC, skb);
              } else {

              }
            } else {
#line 1906
              tmp___17 = IsDM(datap);
#line 1906
              if (tmp___17) {
#line 1906
                tmp___18 = 1;
              } else {
#line 1906
                tmp___18 = 0;
              }
#line 1906
              ______r___13 = tmp___18;
#line 1906
              ______f___1809.__annonCompField3.miss_hit[______r___13] = ______f___1809.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 1906
              if (______r___13) {
#line 1907
                c = unnum_error(l2, skb, 1);
#line 1908
                ______r___10 = ! (! (! c));
#line 1908
                ______f___1806.__annonCompField3.miss_hit[______r___10] = ______f___1806.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 1908
                if (______r___10) {
#line 1909
                  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DM, skb);
                } else {

                }
              } else {
#line 1910
                tmp___12 = IsFRMR(datap);
#line 1910
                if (tmp___12) {
#line 1910
                  tmp___13 = 1;
                } else {
#line 1910
                  tmp___13 = 0;
                }
#line 1910
                ______r___12 = tmp___13;
#line 1910
                ______f___1808.__annonCompField3.miss_hit[______r___12] = ______f___1808.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 1910
                if (______r___12) {
#line 1911
                  c = FRMR_error(l2, skb);
#line 1912
                  ______r___11 = ! (! (! c));
#line 1912
                  ______f___1807.__annonCompField3.miss_hit[______r___11] = ______f___1807.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 1912
                  if (______r___11) {
#line 1913
                    ret = mISDN_FsmEvent(& l2->l2m, EV_L2_FRMR, skb);
                  } else {

                  }
                } else {
#line 1915
                  c = 'L';
                }
              }
            }
          }
        }
      }
    }
  }
#line 1916
  ______r___20 = ! (! c);
#line 1916
  ______f___1816.__annonCompField3.miss_hit[______r___20] = ______f___1816.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 1916
  if (______r___20) {
#line 1917
    printk("<4>l2 D-channel frame error %c\n", c);
#line 1918
    mISDN_FsmEvent(& l2->l2m, EV_L2_FRAME_ERROR, (void *)((long )c));
  } else {

  }
#line 1920
  return (ret);
}
}
#line 1930
static int l2_send(struct mISDNchannel *ch , struct sk_buff *skb ) ;
#line 1930 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1817  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1930, {{0UL, 0UL}}};
#line 1943 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1818  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1943, {{0UL, 0UL}}};
#line 1953 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1819  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1953, {{0UL, 0UL}}};
#line 1964 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1820  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1964, {{0UL, 0UL}}};
#line 1967 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1821  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1968, {{0UL, 0UL}}};
#line 1972 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1822  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1973, {{0UL, 0UL}}};
#line 1966 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1823  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1966, {{0UL, 0UL}}};
#line 1982 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1824  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1982, {{0UL, 0UL}}};
#line 1989 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1825  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1989, {{0UL, 0UL}}};
#line 1993 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1826  __attribute__((__section__("_ftrace_branch")))  =    {"l2_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    1993, {{0UL, 0UL}}};
#line 1923 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  int ret ;
  int ______r ;
  int ______r___0 ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___9 ;
  int tmp___11 ;
  int ______r___3 ;
  int tmp___22 ;
  int tmp___24 ;
  int tmp___26 ;
  int ______r___4 ;
  int tmp___37 ;
  int tmp___39 ;
  int tmp___41 ;
  u_int tmp___42 ;
  int ______r___5 ;
  int tmp___48 ;
  int tmp___50 ;
  u_int tmp___51 ;
  int ______r___6 ;
  int tmp___57 ;
  int tmp___59 ;
  int ______r___7 ;
  int ______r___8 ;

  {
#line 1926
  __mptr = ch;
#line 1926
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->ch));
#line 1927
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 1928
  ret = -22;
#line 1930
  ______r = ! (! (*debug___4 & 524288U));
#line 1930
  ______f___1817.__annonCompField3.miss_hit[______r] = ______f___1817.__annonCompField3.miss_hit[______r] + 1UL;
#line 1930
  if (______r) {
#line 1931
    printk("<7>%s: prim(%x) id(%x) tei(%d)\n", "l2_send", hh->prim, hh->id, l2->tei);
  } else {

  }
#line 1933
  switch (hh->prim) {
  case 8194U: 
#line 1935
  ret = ph_data_indication(l2, hh, skb);
#line 1936
  break;
  case 24578U: 
#line 1938
  ret = ph_data_confirm(l2, hh, skb);
#line 1939
  break;
  case 258U: 
#line 1941
  test_and_set_bit(12, & l2->flag);
#line 1942
  l2up_create(l2, 1282, 0, (void *)0);
#line 1943
  tmp___2 = test_and_clear_bit(13, & l2->flag);
#line 1943
  if (tmp___2) {
#line 1943
    tmp___3 = 1;
  } else {
#line 1943
    tmp___3 = 0;
  }
#line 1943
  ______r___0 = tmp___3;
#line 1943
  ______f___1818.__annonCompField3.miss_hit[______r___0] = ______f___1818.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1943
  if (______r___0) {
#line 1944
    ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DL_ESTABLISH_REQ, skb);
  } else {

  }
#line 1946
  break;
  case 514U: 
#line 1948
  test_and_clear_bit(12, & l2->flag);
#line 1949
  l2up_create(l2, 1538, 0, (void *)0);
#line 1950
  ret = mISDN_FsmEvent(& l2->l2m, EV_L1_DEACTIVATE, skb);
#line 1951
  break;
  case 1794U: 
#line 1953
  ______r___1 = ! (! (! l2->up));
#line 1953
  ______f___1819.__annonCompField3.miss_hit[______r___1] = ______f___1819.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1953
  if (______r___1) {
#line 1954
    break;
  } else {

  }
#line 1955
  ret = (*((l2->up)->send))(l2->up, skb);
#line 1956
  break;
  case 12292U: 
#line 1958
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DL_DATA, skb);
#line 1959
  break;
  case 12548U: 
#line 1961
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DL_UNITDATA, skb);
#line 1962
  break;
  case 4100U: 
#line 1964
  tmp___9 = constant_test_bit(0, & l2->flag);
#line 1964
  if (tmp___9) {
#line 1964
    tmp___11 = 1;
  } else {
#line 1964
    tmp___11 = 0;
  }
#line 1964
  ______r___2 = tmp___11;
#line 1964
  ______f___1820.__annonCompField3.miss_hit[______r___2] = ______f___1820.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1964
  if (______r___2) {
#line 1965
    test_and_set_bit(2, & l2->flag);
  } else {

  }
#line 1966
  tmp___48 = constant_test_bit(12, & l2->flag);
#line 1966
  if (tmp___48) {
#line 1966
    tmp___50 = 1;
  } else {
#line 1966
    tmp___50 = 0;
  }
#line 1966
  ______r___5 = tmp___50;
#line 1966
  ______f___1823.__annonCompField3.miss_hit[______r___5] = ______f___1823.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1966
  if (______r___5) {
#line 1967
    tmp___22 = constant_test_bit(1, & l2->flag);
#line 1967
    if (tmp___22) {
#line 1967
      tmp___26 = 1;
    } else {
#line 1967
      tmp___24 = constant_test_bit(2, & l2->flag);
#line 1967
      if (tmp___24) {
#line 1967
        tmp___26 = 1;
      } else {
#line 1967
        tmp___26 = 0;
      }
    }
#line 1967
    ______r___3 = tmp___26;
#line 1967
    ______f___1821.__annonCompField3.miss_hit[______r___3] = ______f___1821.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1967
    if (______r___3) {
#line 1969
      ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DL_ESTABLISH_REQ, skb);
    } else {

    }
  } else {
#line 1972
    tmp___37 = constant_test_bit(1, & l2->flag);
#line 1972
    if (tmp___37) {
#line 1972
      tmp___41 = 1;
    } else {
#line 1972
      tmp___39 = constant_test_bit(2, & l2->flag);
#line 1972
      if (tmp___39) {
#line 1972
        tmp___41 = 1;
      } else {
#line 1972
        tmp___41 = 0;
      }
    }
#line 1972
    ______r___4 = tmp___41;
#line 1972
    ______f___1822.__annonCompField3.miss_hit[______r___4] = ______f___1822.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1972
    if (______r___4) {
#line 1974
      test_and_set_bit(13, & l2->flag);
    } else {

    }
#line 1977
    tmp___42 = l2_newid(l2);
#line 1977
    ret = l2down(l2, 257, tmp___42, skb);
  }
#line 1980
  break;
  case 4356U: 
#line 1982
  tmp___57 = constant_test_bit(0, & l2->flag);
#line 1982
  if (tmp___57) {
#line 1982
    tmp___59 = 1;
  } else {
#line 1982
    tmp___59 = 0;
  }
#line 1982
  ______r___6 = tmp___59;
#line 1982
  ______f___1824.__annonCompField3.miss_hit[______r___6] = ______f___1824.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1982
  if (______r___6) {
#line 1983
    tmp___51 = l2_newid(l2);
#line 1983
    l2down_create(l2, 513, tmp___51, 0, (void *)0);
  } else {

  }
#line 1985
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_DL_RELEASE_REQ, skb);
#line 1987
  break;
  default: 
#line 1989
  ______r___7 = ! (! (*debug___4 & 16711680U));
#line 1989
  ______f___1825.__annonCompField3.miss_hit[______r___7] = ______f___1825.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1989
  if (______r___7) {
#line 1990
    l2m_debug(& l2->l2m, "l2 unknown pr %04x", hh->prim);
  } else {

  }
  }
#line 1993
  ______r___8 = ! (! ret);
#line 1993
  ______f___1826.__annonCompField3.miss_hit[______r___8] = ______f___1826.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1993
  if (______r___8) {
#line 1994
    consume_skb(skb);
#line 1995
    ret = 0;
  } else {

  }
#line 1997
  return (ret);
}
}
#line 2005 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1827  __attribute__((__section__("_ftrace_branch")))  =    {"tei_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2005, {{0UL, 0UL}}};
#line 2000 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  int ret ;
  int ______r ;

  {
#line 2003
  ret = -22;
#line 2005
  ______r = ! (! (*debug___4 & 1048576U));
#line 2005
  ______f___1827.__annonCompField3.miss_hit[______r] = ______f___1827.__annonCompField3.miss_hit[______r] + 1UL;
#line 2005
  if (______r) {
#line 2006
    printk("<7>%s: cmd(%x)\n", "tei_l2", cmd);
  } else {

  }
#line 2007
  switch (cmd) {
  case (u_int )6148: 
#line 2009
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_MDL_ASSIGN, (void *)arg);
#line 2010
  break;
  case (u_int )6660: 
#line 2012
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_MDL_REMOVE, (void *)0);
#line 2013
  break;
  case (u_int )7940: 
#line 2015
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_MDL_ERROR, (void *)0);
#line 2016
  break;
  case (u_int )24324: 
#line 2019
  printk("<5>MDL_ERROR|REQ (tei_l2)\n");
#line 2020
  ret = mISDN_FsmEvent(& l2->l2m, EV_L2_MDL_ERROR, (void *)0);
#line 2021
  break;
  }
#line 2023
  return (ret);
}
}
#line 2037
static void release_l2(struct layer2 *l2 ) ;
#line 2037 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1828  __attribute__((__section__("_ftrace_branch")))  =    {"release_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2037, {{0UL, 0UL}}};
#line 2035 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1829  __attribute__((__section__("_ftrace_branch")))  =    {"release_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2035, {{0UL, 0UL}}};
#line 2026 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static void release_l2(struct layer2 *l2 ) 
{ 
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___6 ;

  {
#line 2029
  mISDN_FsmDelTimer(& l2->t200, 21);
#line 2030
  mISDN_FsmDelTimer(& l2->t203, 16);
#line 2031
  skb_queue_purge(& l2->i_queue);
#line 2032
  skb_queue_purge(& l2->ui_queue);
#line 2033
  skb_queue_purge(& l2->down_queue);
#line 2034
  ReleaseWin(l2);
#line 2035
  tmp___4 = constant_test_bit(1, & l2->flag);
#line 2035
  if (tmp___4) {
#line 2035
    tmp___6 = 1;
  } else {
#line 2035
    tmp___6 = 0;
  }
#line 2035
  ______r___0 = tmp___6;
#line 2035
  ______f___1829.__annonCompField3.miss_hit[______r___0] = ______f___1829.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 2035
  if (______r___0) {
#line 2036
    TEIrelease(l2);
#line 2037
    ______r = ! (! l2->ch.st);
#line 2037
    ______f___1828.__annonCompField3.miss_hit[______r] = ______f___1828.__annonCompField3.miss_hit[______r] + 1UL;
#line 2037
    if (______r) {
#line 2038
      (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 512, (void *)0);
    } else {

    }
  } else {

  }
#line 2041
  kfree(l2);
#line 2042
  return;
}
}
#line 2050
static int l2_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) ;
#line 2050 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1830  __attribute__((__section__("_ftrace_branch")))  =    {"l2_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2050, {{0UL, 0UL}}};
#line 2055 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1831  __attribute__((__section__("_ftrace_branch")))  =    {"l2_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2055, {{0UL, 0UL}}};
#line 2063 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1832  __attribute__((__section__("_ftrace_branch")))  =    {"l2_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2063, {{0UL, 0UL}}};
#line 2044 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int l2_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  u_int info ;
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___1 ;

  {
#line 2047
  __mptr = ch;
#line 2047
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->ch));
#line 2050
  ______r = ! (! (*debug___4 & 262144U));
#line 2050
  ______f___1830.__annonCompField3.miss_hit[______r] = ______f___1830.__annonCompField3.miss_hit[______r] + 1UL;
#line 2050
  if (______r) {
#line 2051
    printk("<7>%s:(%x)\n", "l2_ctrl", cmd);
  } else {

  }
#line 2053
  switch (cmd) {
  case (u_int )256: 
#line 2055
  tmp___4 = constant_test_bit(1, & l2->flag);
#line 2055
  if (tmp___4) {
#line 2055
    tmp___6 = 1;
  } else {
#line 2055
    tmp___6 = 0;
  }
#line 2055
  ______r___0 = tmp___6;
#line 2055
  ______f___1831.__annonCompField3.miss_hit[______r___0] = ______f___1831.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 2055
  if (______r___0) {
#line 2056
    set_channel_address(& l2->ch, l2->sapi, l2->tei);
#line 2057
    info = 1;
#line 2058
    l2up_create(l2, 8, sizeof(info), & info);
  } else {

  }
#line 2061
  break;
  case (u_int )512: 
#line 2063
  ______r___1 = ! (! l2->ch.peer);
#line 2063
  ______f___1832.__annonCompField3.miss_hit[______r___1] = ______f___1832.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 2063
  if (______r___1) {
#line 2064
    (*((l2->ch.peer)->ctrl))(l2->ch.peer, 512, (void *)0);
  } else {

  }
#line 2065
  release_l2(l2);
#line 2066
  break;
  }
#line 2068
  return (0);
}
}
#line 2079 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1833  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2079, {{0UL, 0UL}}};
#line 2096 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1834  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2096, {{0UL, 0UL}}};
#line 2100 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1835  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2100, {{0UL, 0UL}}};
#line 2102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1836  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2102, {{0UL, 0UL}}};
#line 2108 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1837  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2108, {{0UL, 0UL}}};
#line 2121 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1838  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2121, {{0UL, 0UL}}};
#line 2125 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1839  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2125, {{0UL, 0UL}}};
#line 2127 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1840  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2127, {{0UL, 0UL}}};
#line 2133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1841  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2133, {{0UL, 0UL}}};
#line 2162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1842  __attribute__((__section__("_ftrace_branch")))  =    {"create_l2",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2164, {{0UL, 0UL}}};
#line 2071 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) 
{ 
  struct layer2 *l2 ;
  struct channel_req rq ;
  void *tmp ;
  int ______r ;
  int ______r___0 ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___1 ;
  int tmp___13 ;
  int tmp___15 ;
  int ______r___2 ;
  int tmp___21 ;
  int tmp___23 ;
  int ______r___3 ;
  int tmp___29 ;
  int tmp___31 ;
  int ______r___4 ;
  int tmp___37 ;
  int tmp___39 ;
  int ______r___5 ;
  int tmp___45 ;
  int tmp___47 ;
  int ______r___6 ;
  int tmp___53 ;
  int tmp___55 ;
  int ______r___7 ;
  int tmp___61 ;
  int tmp___63 ;
  int ______r___8 ;
  int tmp___78 ;
  int tmp___80 ;
  int tmp___82 ;
  int tmp___84 ;

  {
#line 2078
  tmp = kzalloc___3(sizeof(struct layer2 ), (16U | 64U) | 128U);
#line 2078
  l2 = tmp;
#line 2079
  ______r = ! (! (! l2));
#line 2079
  ______f___1833.__annonCompField3.miss_hit[______r] = ______f___1833.__annonCompField3.miss_hit[______r] + 1UL;
#line 2079
  if (______r) {
#line 2080
    printk("<3>kzalloc layer2 failed\n");
#line 2081
    return ((void *)0);
  } else {

  }
#line 2083
  l2->next_id = 1;
#line 2084
  l2->down_id = 65534;
#line 2085
  l2->up = ch;
#line 2086
  l2->ch.st = ch->st;
#line 2087
  l2->ch.send = & l2_send;
#line 2088
  l2->ch.ctrl = & l2_ctrl;
#line 2089
  switch (protocol) {
  case (u_int )17: 
#line 2091
  test_and_set_bit(1, & l2->flag);
#line 2092
  test_and_set_bit(18, & l2->flag);
#line 2093
  test_and_set_bit(3, & l2->flag);
#line 2094
  l2->sapi = sapi;
#line 2095
  l2->maxlen = 260;
#line 2096
  tmp___5 = constant_test_bit(1, & options);
#line 2096
  if (tmp___5) {
#line 2096
    tmp___7 = 1;
  } else {
#line 2096
    tmp___7 = 0;
  }
#line 2096
  ______r___0 = tmp___7;
#line 2096
  ______f___1834.__annonCompField3.miss_hit[______r___0] = ______f___1834.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 2096
  if (______r___0) {
#line 2097
    l2->window = 7;
  } else {
#line 2099
    l2->window = 1;
  }
#line 2100
  tmp___13 = constant_test_bit(2, & options);
#line 2100
  if (tmp___13) {
#line 2100
    tmp___15 = 1;
  } else {
#line 2100
    tmp___15 = 0;
  }
#line 2100
  ______r___1 = tmp___15;
#line 2100
  ______f___1835.__annonCompField3.miss_hit[______r___1] = ______f___1835.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 2100
  if (______r___1) {
#line 2101
    test_and_set_bit(14, & l2->flag);
  } else {

  }
#line 2102
  tmp___21 = constant_test_bit(3, & options);
#line 2102
  if (tmp___21) {
#line 2102
    tmp___23 = 1;
  } else {
#line 2102
    tmp___23 = 0;
  }
#line 2102
  ______r___2 = tmp___23;
#line 2102
  ______f___1836.__annonCompField3.miss_hit[______r___2] = ______f___1836.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 2102
  if (______r___2) {
#line 2103
    test_and_set_bit(15, & l2->flag);
  } else {

  }
#line 2104
  l2->tei = tei;
#line 2105
  l2->T200 = 1000;
#line 2106
  l2->N200 = 3;
#line 2107
  l2->T203 = 10000;
#line 2108
  tmp___29 = constant_test_bit(1, & options);
#line 2108
  if (tmp___29) {
#line 2108
    tmp___31 = 1;
  } else {
#line 2108
    tmp___31 = 0;
  }
#line 2108
  ______r___3 = tmp___31;
#line 2108
  ______f___1837.__annonCompField3.miss_hit[______r___3] = ______f___1837.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 2108
  if (______r___3) {
#line 2109
    rq.protocol = 4;
  } else {
#line 2111
    rq.protocol = 2;
  }
#line 2112
  rq.adr.channel = 0;
#line 2113
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256, & rq);
#line 2114
  break;
  case (u_int )16: 
#line 2116
  test_and_set_bit(1, & l2->flag);
#line 2117
  test_and_set_bit(3, & l2->flag);
#line 2118
  test_and_set_bit(2, & l2->flag);
#line 2119
  l2->sapi = sapi;
#line 2120
  l2->maxlen = 260;
#line 2121
  tmp___37 = constant_test_bit(1, & options);
#line 2121
  if (tmp___37) {
#line 2121
    tmp___39 = 1;
  } else {
#line 2121
    tmp___39 = 0;
  }
#line 2121
  ______r___4 = tmp___39;
#line 2121
  ______f___1838.__annonCompField3.miss_hit[______r___4] = ______f___1838.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 2121
  if (______r___4) {
#line 2122
    l2->window = 7;
  } else {
#line 2124
    l2->window = 1;
  }
#line 2125
  tmp___45 = constant_test_bit(2, & options);
#line 2125
  if (tmp___45) {
#line 2125
    tmp___47 = 1;
  } else {
#line 2125
    tmp___47 = 0;
  }
#line 2125
  ______r___5 = tmp___47;
#line 2125
  ______f___1839.__annonCompField3.miss_hit[______r___5] = ______f___1839.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 2125
  if (______r___5) {
#line 2126
    test_and_set_bit(14, & l2->flag);
  } else {

  }
#line 2127
  tmp___53 = constant_test_bit(3, & options);
#line 2127
  if (tmp___53) {
#line 2127
    tmp___55 = 1;
  } else {
#line 2127
    tmp___55 = 0;
  }
#line 2127
  ______r___6 = tmp___55;
#line 2127
  ______f___1840.__annonCompField3.miss_hit[______r___6] = ______f___1840.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 2127
  if (______r___6) {
#line 2128
    test_and_set_bit(15, & l2->flag);
  } else {

  }
#line 2129
  l2->tei = tei;
#line 2130
  l2->T200 = 1000;
#line 2131
  l2->N200 = 3;
#line 2132
  l2->T203 = 10000;
#line 2133
  tmp___61 = constant_test_bit(1, & options);
#line 2133
  if (tmp___61) {
#line 2133
    tmp___63 = 1;
  } else {
#line 2133
    tmp___63 = 0;
  }
#line 2133
  ______r___7 = tmp___63;
#line 2133
  ______f___1841.__annonCompField3.miss_hit[______r___7] = ______f___1841.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 2133
  if (______r___7) {
#line 2134
    rq.protocol = 3;
  } else {
#line 2136
    rq.protocol = 1;
  }
#line 2137
  rq.adr.channel = 0;
#line 2138
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256, & rq);
#line 2139
  break;
  case (u_int )35: 
#line 2141
  test_and_set_bit(0, & l2->flag);
#line 2142
  l2->window = 7;
#line 2143
  l2->maxlen = 2048;
#line 2144
  l2->T200 = 1000;
#line 2145
  l2->N200 = 4;
#line 2146
  l2->T203 = 5000;
#line 2147
  l2->addr.A = 3;
#line 2148
  l2->addr.B = 1;
#line 2149
  break;
  default: 
#line 2151
  printk("<3>layer2 create failed prt %x\n", protocol);
#line 2153
  kfree(l2);
#line 2154
  return ((void *)0);
  }
#line 2156
  skb_queue_head_init___1(& l2->i_queue);
#line 2157
  skb_queue_head_init___1(& l2->ui_queue);
#line 2158
  skb_queue_head_init___1(& l2->down_queue);
#line 2159
  skb_queue_head_init___1(& l2->tmp_queue);
#line 2160
  InitWin(l2);
#line 2161
  l2->l2m.fsm = & l2fsm;
#line 2162
  tmp___78 = constant_test_bit(0, & l2->flag);
#line 2162
  if (tmp___78) {
#line 2162
    tmp___84 = 1;
  } else {
#line 2162
    tmp___80 = constant_test_bit(14, & l2->flag);
#line 2162
    if (tmp___80) {
#line 2162
      tmp___84 = 1;
    } else {
#line 2162
      tmp___82 = constant_test_bit(18, & l2->flag);
#line 2162
      if (tmp___82) {
#line 2162
        tmp___84 = 1;
      } else {
#line 2162
        tmp___84 = 0;
      }
    }
  }
#line 2162
  ______r___8 = tmp___84;
#line 2162
  ______f___1842.__annonCompField3.miss_hit[______r___8] = ______f___1842.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 2162
  if (______r___8) {
#line 2165
    l2->l2m.state = ST_L2_4;
  } else {
#line 2167
    l2->l2m.state = ST_L2_1;
  }
#line 2168
  l2->l2m.debug = *debug___4;
#line 2169
  l2->l2m.userdata = l2;
#line 2170
  l2->l2m.userint = 0;
#line 2171
  l2->l2m.printdebug = & l2m_debug;
#line 2173
  mISDN_FsmInitTimer(& l2->l2m, & l2->t200);
#line 2174
  mISDN_FsmInitTimer(& l2->l2m, & l2->t203);
#line 2175
  return (l2);
}
}
#line 2183
static int x75create(struct channel_req *crq ) ;
#line 2183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1843  __attribute__((__section__("_ftrace_branch")))  =    {"x75create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2183, {{0UL, 0UL}}};
#line 2186 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1844  __attribute__((__section__("_ftrace_branch")))  =    {"x75create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c",
    2186, {{0UL, 0UL}}};
#line 2178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static int x75create(struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  int ______r ;
  int ______r___0 ;

  {
#line 2183
  ______r = ! (! (crq->protocol != (u_int )35));
#line 2183
  ______f___1843.__annonCompField3.miss_hit[______r] = ______f___1843.__annonCompField3.miss_hit[______r] + 1UL;
#line 2183
  if (______r) {
#line 2184
    return (-93);
  } else {

  }
#line 2185
  l2 = create_l2(crq->ch, crq->protocol, 0, 0, 0);
#line 2186
  ______r___0 = ! (! (! l2));
#line 2186
  ______f___1844.__annonCompField3.miss_hit[______r___0] = ______f___1844.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 2186
  if (______r___0) {
#line 2187
    return (-12);
  } else {

  }
#line 2188
  crq->ch = & l2->ch;
#line 2189
  crq->protocol = 34;
#line 2190
  return (0);
}
}
#line 2193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
static struct Bprotocol X75SLP  =    {{0, 0}, "X75SLP", 1 << (35 & 31), & x75create};
#line 2199 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
int Isdnl2_Init(u_int *deb ) 
{ 


  {
#line 2202
  debug___4 = deb;
#line 2203
  mISDN_register_Bprotocol(& X75SLP);
#line 2204
  l2fsm.state_count = ST_L2_8 + 1;
#line 2205
  l2fsm.event_count = EV_L2_FRAME_ERROR + 1;
#line 2206
  l2fsm.strEvent = strL2Event;
#line 2207
  l2fsm.strState = strL2State;
#line 2208
  mISDN_FsmNew(& l2fsm, L2FnList, sizeof(L2FnList) / sizeof(L2FnList[0]) + (sizeof(char [1 - 2 * 0]) - 1UL));
#line 2209
  TEIInit(deb);
#line 2210
  return (0);
}
}
#line 2213 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
void Isdnl2_cleanup(void) 
{ 


  {
#line 2216
  mISDN_unregister_Bprotocol(& X75SLP);
#line 2217
  TEIFree();
#line 2218
  mISDN_FsmFree(& l2fsm);
#line 2219
  return;
}
}
#line 2259 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/layer2.c"
void ldv_main7_sequence_infinite_withcheck_stateful(void) 
{ 
  struct channel_req *var_group1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 2280
  LDV_IN_INTERRUPT = 1;
#line 2289
  ldv_initialize();
#line 2293
  while (1) {
#line 2293
    tmp___0 = nondet_int();
#line 2293
    if (tmp___0) {

    } else {
#line 2293
      break;
    }
#line 2296
    tmp = nondet_int();
#line 2296
    switch (tmp) {
    case 0: 
#line 2309
    ldv_handler_precall();
#line 2310
    x75create(var_group1);
#line 2317
    break;
    default: 
#line 2318
    break;
    }
  }
#line 2327
  ldv_check_final_state();
#line 2330
  return;
}
}
#line 53 "include/linux/random.h"
extern void get_random_bytes(void *buf , int nbytes ) ;
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1845  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1846  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1847  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___1847, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___1846.__annonCompField3.miss_hit[______r___2] = ______f___1846.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___1845.__annonCompField3.miss_hit[______r] = ______f___1845.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___4)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1848  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1849  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1850  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1851  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1852  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1853  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1854  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1855  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1856  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1857  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1858  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1859  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1860  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1861  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1862  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1863  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1864  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1865  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1866  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1867  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1868  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1869  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1870  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___4)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___1848.__annonCompField3.miss_hit[______r] = ______f___1848.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___1849.__annonCompField3.miss_hit[______r___0] = ______f___1849.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___1850.__annonCompField3.miss_hit[______r___1] = ______f___1850.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___1851.__annonCompField3.miss_hit[______r___2] = ______f___1851.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___1852.__annonCompField3.miss_hit[______r___3] = ______f___1852.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___1853.__annonCompField3.miss_hit[______r___4] = ______f___1853.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___1854.__annonCompField3.miss_hit[______r___5] = ______f___1854.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___1855.__annonCompField3.miss_hit[______r___6] = ______f___1855.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___1856.__annonCompField3.miss_hit[______r___7] = ______f___1856.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___1857.__annonCompField3.miss_hit[______r___8] = ______f___1857.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___1858.__annonCompField3.miss_hit[______r___9] = ______f___1858.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___1859.__annonCompField3.miss_hit[______r___10] = ______f___1859.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___1860.__annonCompField3.miss_hit[______r___11] = ______f___1860.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___1861.__annonCompField3.miss_hit[______r___12] = ______f___1861.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___1862.__annonCompField3.miss_hit[______r___13] = ______f___1862.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___1863.__annonCompField3.miss_hit[______r___14] = ______f___1863.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___1864.__annonCompField3.miss_hit[______r___15] = ______f___1864.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___1865.__annonCompField3.miss_hit[______r___16] = ______f___1865.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___1866.__annonCompField3.miss_hit[______r___17] = ______f___1866.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___1867.__annonCompField3.miss_hit[______r___18] = ______f___1867.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___1868.__annonCompField3.miss_hit[______r___19] = ______f___1868.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___1869.__annonCompField3.miss_hit[______r___20] = ______f___1869.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___1870.__annonCompField3.miss_hit[______r___21] = ______f___1870.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___4)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1871  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___4)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___4(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___1871.__annonCompField3.miss_hit[______r] = ______f___1871.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___4)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___4((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___4)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1872  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1873  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1874  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___4)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___1872.__annonCompField3.miss_hit[______r] = ______f___1872.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___4(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___1874.__annonCompField3.miss_hit[______r___1] = ______f___1874.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___4(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___1873.__annonCompField3.miss_hit[______r___0] = ______f___1873.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___4((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___4(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___4(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 815 "include/linux/skbuff.h"
static struct lock_class_key __key___11  ;
#line 813 "include/linux/skbuff.h"
__inline static void skb_queue_head_init___2(struct sk_buff_head *list ) 
{ 


  {
#line 815
  while (1) {
#line 815
    __spin_lock_init(& list->lock, "&list->lock", & __key___11);
#line 815
    break;
  }
#line 816
  __skb_queue_head_init(list);
#line 817
  return;
}
}
#line 516 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___1(unsigned int len , gfp_t gfp_mask ) ;
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1875  __attribute__((__section__("_ftrace_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 516 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1876  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"mI_alloc_skb",
    "include/linux/mISDNif.h", 516, {{0UL, 0UL}}};
#line 510 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb___1(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r___1 ;
  int ______r___2 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 515
  skb = alloc_skb((unsigned long )len + sizeof(struct mISDNhead ), gfp_mask);
#line 516
  tmp___2 = __builtin_expect(! (! skb), 1);
#line 516
  ______r___2 = tmp___2;
#line 516
  ftrace_likely_update(& ______f___1876, ______r___2, 1);
#line 516
  if (______r___2) {
#line 516
    tmp___3 = 1;
  } else {
#line 516
    tmp___3 = 0;
  }
#line 516
  ______r___1 = tmp___3;
#line 516
  ______f___1875.__annonCompField3.miss_hit[______r___1] = ______f___1875.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 516
  if (______r___1) {
#line 517
    skb_reserve(skb, sizeof(struct mISDNhead ));
  } else {

  }
#line 518
  return (skb);
}
}
#line 527
__inline static struct sk_buff *_alloc_mISDN_skb___0(u_int prim , u_int id , u_int len ,
                                                     void *dp , gfp_t gfp_mask ) ;
#line 527 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1877  __attribute__((__section__("_ftrace_branch")))  =    {"_alloc_mISDN_skb",
    "include/linux/mISDNif.h", 527, {{0UL, 0UL}}};
#line 529 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1878  __attribute__((__section__("_ftrace_branch")))  =    {"_alloc_mISDN_skb",
    "include/linux/mISDNif.h", 529, {{0UL, 0UL}}};
#line 521 "include/linux/mISDNif.h"
__inline static struct sk_buff *_alloc_mISDN_skb___0(u_int prim , u_int id , u_int len ,
                                                     void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  int ______r ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;
  int ______r___1 ;

  {
#line 524
  tmp = mI_alloc_skb___1(len, gfp_mask);
#line 524
  skb = tmp;
#line 527
  ______r = ! (! (! skb));
#line 527
  ______f___1877.__annonCompField3.miss_hit[______r] = ______f___1877.__annonCompField3.miss_hit[______r] + 1UL;
#line 527
  if (______r) {
#line 528
    return ((void *)0);
  } else {

  }
#line 529
  ______r___1 = ! (! len);
#line 529
  ______f___1878.__annonCompField3.miss_hit[______r___1] = ______f___1878.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 529
  if (______r___1) {
#line 530
    __len = len;
#line 530
    tmp___1 = skb_put(skb, len);
#line 530
    __ret = __builtin_memcpy(tmp___1, dp, __len);
  } else {

  }
#line 531
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 532
  hh->prim = prim;
#line 533
  hh->id = id;
#line 534
  return (skb);
}
}
#line 543
__inline static void _queue_data___0(struct mISDNchannel *ch , u_int prim , u_int id ,
                                     u_int len , void *dp , gfp_t gfp_mask ) ;
#line 543 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1879  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 543, {{0UL, 0UL}}};
#line 546 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1880  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 546, {{0UL, 0UL}}};
#line 548 "include/linux/mISDNif.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1881  __attribute__((__section__("_ftrace_branch")))  =    {"_queue_data",
    "include/linux/mISDNif.h", 548, {{0UL, 0UL}}};
#line 537 "include/linux/mISDNif.h"
__inline static void _queue_data___0(struct mISDNchannel *ch , u_int prim , u_int id ,
                                     u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 543
  ______r = ! (! (! ch->peer));
#line 543
  ______f___1879.__annonCompField3.miss_hit[______r] = ______f___1879.__annonCompField3.miss_hit[______r] + 1UL;
#line 543
  if (______r) {
#line 544
    return;
  } else {

  }
#line 545
  skb = _alloc_mISDN_skb___0(prim, id, len, dp, gfp_mask);
#line 546
  ______r___0 = ! (! (! skb));
#line 546
  ______f___1880.__annonCompField3.miss_hit[______r___0] = ______f___1880.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 546
  if (______r___0) {
#line 547
    return;
  } else {

  }
#line 548
  tmp___2 = (*(ch->recv))(ch->peer, skb);
#line 548
  if (tmp___2) {
#line 548
    tmp___3 = 1;
  } else {
#line 548
    tmp___3 = 0;
  }
#line 548
  ______r___1 = tmp___3;
#line 548
  ______f___1881.__annonCompField3.miss_hit[______r___1] = ______f___1881.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 548
  if (______r___1) {
#line 549
    consume_skb(skb);
  } else {

  }
#line 550
  return;
}
}
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static u_int *debug___5  ;
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct Fsm deactfsm  =    {(void *)0, 0, 0, (void *)0, (void *)0};
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct Fsm teifsmu  =    {(void *)0, 0, 0, (void *)0, (void *)0};
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct Fsm teifsmn  =    {(void *)0, 0, 0, (void *)0, (void *)0};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static char *strDeactState[3]  = {      "ST_L1_DEACT",      "ST_L1_DEACT_PENDING",      "ST_L1_ACTIV"};
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static char *strDeactEvent[6]  = {      "EV_ACTIVATE",      "EV_ACTIVATE_IND",      "EV_DEACTIVATE",      "EV_DEACTIVATE_IND", 
        "EV_UI",      "EV_DATIMER"};
#line 83
static void da_debug(struct FsmInst *fi , char *fmt  , ...) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1882  __attribute__((__section__("_ftrace_branch")))  =    {"da_debug",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    83, {{0UL, 0UL}}};
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct manager *mgr ;
  va_list va ;
  int ______r ;

  {
#line 80
  mgr = fi->userdata;
#line 83
  ______r = ! (! (! (*debug___5 & 2097152U)));
#line 83
  ______f___1882.__annonCompField3.miss_hit[______r] = ______f___1882.__annonCompField3.miss_hit[______r] + 1UL;
#line 83
  if (______r) {
#line 84
    return;
  } else {

  }
#line 85
  __builtin_va_start(va);
#line 86
  printk("<7>mgr(%d): ", ((mgr->ch.st)->dev)->id);
#line 87
  vprintk(fmt, va);
#line 88
  printk("\n");
#line 89
  __builtin_va_end(va);
#line 90
  return;
}
}
#line 97
static void da_activate(struct FsmInst *fi , int event , void *arg ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1883  __attribute__((__section__("_ftrace_branch")))  =    {"da_activate",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    97, {{0UL, 0UL}}};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_activate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  int ______r ;

  {
#line 95
  mgr = fi->userdata;
#line 97
  ______r = ! (! (fi->state == ST_L1_DEACT_PENDING));
#line 97
  ______f___1883.__annonCompField3.miss_hit[______r] = ______f___1883.__annonCompField3.miss_hit[______r] + 1UL;
#line 97
  if (______r) {
#line 98
    mISDN_FsmDelTimer(& mgr->datimer, 1);
  } else {

  }
#line 99
  mISDN_FsmChangeState(fi, ST_L1_ACTIV);
#line 100
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_deactivate_ind(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 105
  mISDN_FsmChangeState(fi, ST_L1_DEACT);
#line 106
  return;
}
}
#line 117
static void da_deactivate(struct FsmInst *fi , int event , void *arg ) ;
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1884  __attribute__((__section__("_ftrace_branch")))  =    {"da_deactivate",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    117, {{0UL, 0UL}}};
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1885  __attribute__((__section__("_ftrace_branch")))  =    {"da_deactivate",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    125, {{0UL, 0UL}}};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_deactivate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;
  int ______r___0 ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 111
  mgr = fi->userdata;
#line 115
  while (1) {
#line 115
    flags = _read_lock_irqsave(& mgr->lock);
#line 115
    break;
  }
#line 116
  __mptr = mgr->layer2.next;
#line 116
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 116
  while (1) {
#line 116
    __builtin_prefetch(l2->list.next);
#line 116
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 116
      break;
    }
#line 117
    ______r = ! (! (l2->l2m.state > ST_L2_4));
#line 117
    ______f___1884.__annonCompField3.miss_hit[______r] = ______f___1884.__annonCompField3.miss_hit[______r] + 1UL;
#line 117
    if (______r) {
#line 119
      while (1) {
#line 119
        _read_unlock_irqrestore(& mgr->lock, flags);
#line 119
        break;
      }
#line 120
      return;
    } else {

    }
#line 116
    __mptr___0 = l2->list.next;
#line 116
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 123
  while (1) {
#line 123
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 123
    break;
  }
#line 125
  tmp___5 = constant_test_bit(5, & mgr->options);
#line 125
  if (tmp___5) {
#line 125
    tmp___7 = 0;
  } else {
#line 125
    tmp___7 = 1;
  }
#line 125
  ______r___0 = tmp___7;
#line 125
  ______f___1885.__annonCompField3.miss_hit[______r___0] = ______f___1885.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 125
  if (______r___0) {
#line 126
    mISDN_FsmAddTimer(& mgr->datimer, 10000, EV_DATIMER, (void *)0, 1);
#line 128
    mISDN_FsmChangeState(fi, ST_L1_DEACT_PENDING);
  } else {

  }
#line 130
  return;
}
}
#line 138
static void da_ui(struct FsmInst *fi , int event , void *arg ) ;
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1886  __attribute__((__section__("_ftrace_branch")))  =    {"da_ui",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    138, {{0UL, 0UL}}};
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 135
  mgr = fi->userdata;
#line 138
  tmp___5 = constant_test_bit(5, & mgr->options);
#line 138
  if (tmp___5) {
#line 138
    tmp___7 = 0;
  } else {
#line 138
    tmp___7 = 1;
  }
#line 138
  ______r = tmp___7;
#line 138
  ______f___1886.__annonCompField3.miss_hit[______r] = ______f___1886.__annonCompField3.miss_hit[______r] + 1UL;
#line 138
  if (______r) {
#line 139
    mISDN_FsmDelTimer(& mgr->datimer, 2);
#line 140
    mISDN_FsmAddTimer(& mgr->datimer, 10000, EV_DATIMER, (void *)0, 2);
  } else {

  }
#line 143
  return;
}
}
#line 155
static void da_timer(struct FsmInst *fi , int event , void *arg ) ;
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1887  __attribute__((__section__("_ftrace_branch")))  =    {"da_timer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    155, {{0UL, 0UL}}};
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void da_timer(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;

  {
#line 148
  mgr = fi->userdata;
#line 153
  while (1) {
#line 153
    flags = _read_lock_irqsave(& mgr->lock);
#line 153
    break;
  }
#line 154
  __mptr = mgr->layer2.next;
#line 154
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 154
  while (1) {
#line 154
    __builtin_prefetch(l2->list.next);
#line 154
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 154
      break;
    }
#line 155
    ______r = ! (! (l2->l2m.state > ST_L2_4));
#line 155
    ______f___1887.__annonCompField3.miss_hit[______r] = ______f___1887.__annonCompField3.miss_hit[______r] + 1UL;
#line 155
    if (______r) {
#line 157
      while (1) {
#line 157
        _read_unlock_irqrestore(& mgr->lock, flags);
#line 157
        break;
      }
#line 158
      mISDN_FsmChangeState(fi, ST_L1_ACTIV);
#line 159
      return;
    } else {

    }
#line 154
    __mptr___0 = l2->list.next;
#line 154
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 162
  while (1) {
#line 162
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 162
    break;
  }
#line 164
  mISDN_FsmChangeState(fi, ST_L1_DEACT);
#line 165
  _queue_data___0(& mgr->ch, 513, 65535, 0, (void *)0, 32U);
#line 167
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct FsmNode DeactFnList[6]  = {      {ST_L1_DEACT, EV_ACTIVATE_IND, & da_activate}, 
        {ST_L1_ACTIV, EV_DEACTIVATE_IND, & da_deactivate_ind}, 
        {ST_L1_ACTIV, EV_DEACTIVATE, & da_deactivate}, 
        {ST_L1_DEACT_PENDING, EV_ACTIVATE, & da_activate}, 
        {ST_L1_DEACT_PENDING, EV_UI, & da_ui}, 
        {ST_L1_DEACT_PENDING, EV_DATIMER, & da_timer}};
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static char *strTeiState[3]  = {      "ST_TEI_NOP",      "ST_TEI_IDREQ",      "ST_TEI_IDVERIFY"};
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static char *strTeiEvent[9]  = 
#line 208
  {      "EV_IDREQ",      "EV_ASSIGN",      "EV_ASSIGN_REQ",      "EV_DENIED", 
        "EV_CHKREQ",      "EV_CHKRESP",      "EV_REMOVE",      "EV_VERIFY", 
        "EV_TIMER"};
#line 227
static void tei_debug(struct FsmInst *fi , char *fmt  , ...) ;
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1888  __attribute__((__section__("_ftrace_branch")))  =    {"tei_debug",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    227, {{0UL, 0UL}}};
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct teimgr *tm ;
  va_list va ;
  int ______r ;

  {
#line 224
  tm = fi->userdata;
#line 227
  ______r = ! (! (! (*debug___5 & 2097152U)));
#line 227
  ______f___1888.__annonCompField3.miss_hit[______r] = ______f___1888.__annonCompField3.miss_hit[______r] + 1UL;
#line 227
  if (______r) {
#line 228
    return;
  } else {

  }
#line 229
  __builtin_va_start(va);
#line 230
  printk("<7>tei(%d): ", (tm->l2)->tei);
#line 231
  vprintk(fmt, va);
#line 232
  printk("\n");
#line 233
  __builtin_va_end(va);
#line 234
  return;
}
}
#line 246
static int get_free_id(struct manager *mgr ) ;
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1889  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    246, {{0UL, 0UL}}};
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1890  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    255, {{0UL, 0UL}}};
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int get_free_id(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;
  int ______r___0 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 241
  ids = 0;
#line 245
  __mptr = mgr->layer2.next;
#line 245
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 245
  while (1) {
#line 245
    __builtin_prefetch(l2->list.next);
#line 245
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 245
      break;
    }
#line 246
    ______r = ! (! (l2->ch.nr > (u_int )63));
#line 246
    ______f___1889.__annonCompField3.miss_hit[______r] = ______f___1889.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 250
      return (-16);
    } else {

    }
#line 252
    test_and_set_bit(l2->ch.nr, (u_long *)(& ids));
#line 245
    __mptr___0 = l2->list.next;
#line 245
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 254
  i = 1;
#line 254
  while (1) {
#line 254
    if (i < 64) {

    } else {
#line 254
      break;
    }
#line 255
    tmp___6 = variable_test_bit(i, (u_long *)(& ids));
#line 255
    if (tmp___6) {
#line 255
      tmp___7 = 0;
    } else {
#line 255
      tmp___7 = 1;
    }
#line 255
    ______r___0 = tmp___7;
#line 255
    ______f___1890.__annonCompField3.miss_hit[______r___0] = ______f___1890.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 255
    if (______r___0) {
#line 256
      return (i);
    } else {

    }
#line 254
    i = i + 1;
  }
#line 257
  printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 259
  return (-16);
}
}
#line 270
static int get_free_tei(struct manager *mgr ) ;
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1891  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    270, {{0UL, 0UL}}};
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1892  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    272, {{0UL, 0UL}}};
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1893  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    275, {{0UL, 0UL}}};
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1894  __attribute__((__section__("_ftrace_branch")))  =    {"get_free_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    282, {{0UL, 0UL}}};
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int get_free_tei(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 265
  ids = 0;
#line 269
  __mptr = mgr->layer2.next;
#line 269
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 269
  while (1) {
#line 269
    __builtin_prefetch(l2->list.next);
#line 269
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 269
      break;
    }
#line 270
    ______r = ! (! (l2->ch.nr == (u_int )0));
#line 270
    ______f___1891.__annonCompField3.miss_hit[______r] = ______f___1891.__annonCompField3.miss_hit[______r] + 1UL;
#line 270
    if (______r) {
#line 271
      goto __Cont;
    } else {

    }
#line 272
    ______r___0 = ! (! ((l2->ch.addr & 255U) != 0U));
#line 272
    ______f___1892.__annonCompField3.miss_hit[______r___0] = ______f___1892.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 272
    if (______r___0) {
#line 273
      goto __Cont;
    } else {

    }
#line 274
    i = l2->ch.addr >> 8;
#line 275
    ______r___1 = ! (! (i < 64));
#line 275
    ______f___1893.__annonCompField3.miss_hit[______r___1] = ______f___1893.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 275
    if (______r___1) {
#line 276
      goto __Cont;
    } else {

    }
#line 277
    i = i - 64;
#line 279
    test_and_set_bit(i, (u_long *)(& ids));
    __Cont: /* CIL Label */ 
#line 269
    __mptr___0 = l2->list.next;
#line 269
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 281
  i = 0;
#line 281
  while (1) {
#line 281
    if (i < 64) {

    } else {
#line 281
      break;
    }
#line 282
    tmp___6 = variable_test_bit(i, (u_long *)(& ids));
#line 282
    if (tmp___6) {
#line 282
      tmp___7 = 0;
    } else {
#line 282
      tmp___7 = 1;
    }
#line 282
    ______r___2 = tmp___7;
#line 282
    ______f___1894.__annonCompField3.miss_hit[______r___2] = ______f___1894.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 282
    if (______r___2) {
#line 283
      return (i + 64);
    } else {

    }
#line 281
    i = i + 1;
  }
#line 284
  printk("<4>%s: more as 63 dynamic tei for one device\n", "get_free_tei");
#line 286
  return (-1);
}
}
#line 297
static void teiup_create(struct manager *mgr , u_int prim , int len , void *arg ) ;
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1895  __attribute__((__section__("_ftrace_branch")))  =    {"teiup_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    297, {{0UL, 0UL}}};
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1896  __attribute__((__section__("_ftrace_branch")))  =    {"teiup_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    302, {{0UL, 0UL}}};
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1897  __attribute__((__section__("_ftrace_branch")))  =    {"teiup_create",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    305, {{0UL, 0UL}}};
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void teiup_create(struct manager *mgr , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  int ______r ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 296
  skb = mI_alloc_skb___1(len, 32U);
#line 297
  ______r = ! (! (! skb));
#line 297
  ______f___1895.__annonCompField3.miss_hit[______r] = ______f___1895.__annonCompField3.miss_hit[______r] + 1UL;
#line 297
  if (______r) {
#line 298
    return;
  } else {

  }
#line 299
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 300
  hh->prim = prim;
#line 301
  hh->id = (mgr->ch.nr << 16) | mgr->ch.addr;
#line 302
  ______r___1 = ! (! len);
#line 302
  ______f___1896.__annonCompField3.miss_hit[______r___1] = ______f___1896.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 302
  if (______r___1) {
#line 303
    __len = len;
#line 303
    tmp___0 = skb_put(skb, len);
#line 303
    __ret = __builtin_memcpy(tmp___0, arg, __len);
  } else {

  }
#line 304
  err = (*((mgr->up)->send))(mgr->up, skb);
#line 305
  ______r___2 = ! (! err);
#line 305
  ______f___1897.__annonCompField3.miss_hit[______r___2] = ______f___1897.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 305
  if (______r___2) {
#line 306
    printk("<4>%s: err=%d\n", "teiup_create", err);
#line 307
    consume_skb(skb);
  } else {

  }
#line 309
  return;
}
}
#line 317
static u_int new_id(struct manager *mgr ) ;
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1898  __attribute__((__section__("_ftrace_branch")))  =    {"new_id",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    317, {{0UL, 0UL}}};
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static u_int new_id(struct manager *mgr ) 
{ 
  u_int id ;
  u_int tmp ;
  int ______r ;

  {
#line 316
  tmp = mgr->nextid;
#line 316
  mgr->nextid = mgr->nextid + (u_int )1;
#line 316
  id = tmp;
#line 317
  ______r = ! (! (id == (u_int )32767));
#line 317
  ______f___1898.__annonCompField3.miss_hit[______r] = ______f___1898.__annonCompField3.miss_hit[______r] + 1UL;
#line 317
  if (______r) {
#line 318
    mgr->nextid = 1;
  } else {

  }
#line 319
  id = id << 16;
#line 320
  id = id | (unsigned int )(127 << 8);
#line 321
  id = id | 63U;
#line 322
  return (id);
}
}
#line 328
static void do_send(struct manager *mgr ) ;
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1899  __attribute__((__section__("_ftrace_branch")))  =    {"do_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    328, {{0UL, 0UL}}};
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1900  __attribute__((__section__("_ftrace_branch")))  =    {"do_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    334, {{0UL, 0UL}}};
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1901  __attribute__((__section__("_ftrace_branch")))  =    {"do_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    340, {{0UL, 0UL}}};
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1902  __attribute__((__section__("_ftrace_branch")))  =    {"do_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    331, {{0UL, 0UL}}};
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void do_send(struct manager *mgr ) 
{ 
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  struct sk_buff *skb ;
  struct sk_buff *tmp___8 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___12 ;
  int tmp___13 ;
  int ______r___2 ;
  int tmp___18 ;
  int tmp___19 ;

  {
#line 328
  tmp___5 = constant_test_bit(16, & mgr->options);
#line 328
  if (tmp___5) {
#line 328
    tmp___7 = 0;
  } else {
#line 328
    tmp___7 = 1;
  }
#line 328
  ______r = tmp___7;
#line 328
  ______f___1899.__annonCompField3.miss_hit[______r] = ______f___1899.__annonCompField3.miss_hit[______r] + 1UL;
#line 328
  if (______r) {
#line 329
    return;
  } else {

  }
#line 331
  tmp___18 = test_and_set_bit(17, & mgr->options);
#line 331
  if (tmp___18) {
#line 331
    tmp___19 = 0;
  } else {
#line 331
    tmp___19 = 1;
  }
#line 331
  ______r___2 = tmp___19;
#line 331
  ______f___1902.__annonCompField3.miss_hit[______r___2] = ______f___1902.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 331
  if (______r___2) {
#line 332
    tmp___8 = skb_dequeue(& mgr->sendq);
#line 332
    skb = tmp___8;
#line 334
    ______r___0 = ! (! (! skb));
#line 334
    ______f___1900.__annonCompField3.miss_hit[______r___0] = ______f___1900.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 334
    if (______r___0) {
#line 335
      test_and_clear_bit(17, & mgr->options);
#line 336
      return;
    } else {

    }
#line 338
    mgr->lastid = ((struct mISDNhead *)(& skb->cb[0]))->id;
#line 339
    mISDN_FsmEvent(& mgr->deact, EV_UI, (void *)0);
#line 340
    tmp___12 = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 340
    if (tmp___12) {
#line 340
      tmp___13 = 1;
    } else {
#line 340
      tmp___13 = 0;
    }
#line 340
    ______r___1 = tmp___13;
#line 340
    ______f___1901.__annonCompField3.miss_hit[______r___1] = ______f___1901.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 340
    if (______r___1) {
#line 341
      consume_skb(skb);
#line 342
      test_and_clear_bit(17, & mgr->options);
#line 343
      mgr->lastid = 65534;
    } else {

    }
  } else {

  }
#line 346
  return;
}
}
#line 359
static void do_ack(struct manager *mgr , u_int id ) ;
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1903  __attribute__((__section__("_ftrace_branch")))  =    {"do_ack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    359, {{0UL, 0UL}}};
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1904  __attribute__((__section__("_ftrace_branch")))  =    {"do_ack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    357, {{0UL, 0UL}}};
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1905  __attribute__((__section__("_ftrace_branch")))  =    {"do_ack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    353, {{0UL, 0UL}}};
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1906  __attribute__((__section__("_ftrace_branch")))  =    {"do_ack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    352, {{0UL, 0UL}}};
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1907  __attribute__((__section__("_ftrace_branch")))  =    {"do_ack",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    351, {{0UL, 0UL}}};
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void do_ack(struct manager *mgr , u_int id ) 
{ 
  struct sk_buff *skb ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___10 ;
  int tmp___12 ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___18 ;
  int tmp___20 ;

  {
#line 351
  tmp___18 = constant_test_bit(17, & mgr->options);
#line 351
  if (tmp___18) {
#line 351
    tmp___20 = 1;
  } else {
#line 351
    tmp___20 = 0;
  }
#line 351
  ______r___3 = tmp___20;
#line 351
  ______f___1907.__annonCompField3.miss_hit[______r___3] = ______f___1907.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 351
  if (______r___3) {
#line 352
    ______r___2 = ! (! (id == mgr->lastid));
#line 352
    ______f___1906.__annonCompField3.miss_hit[______r___2] = ______f___1906.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 352
    if (______r___2) {
#line 353
      tmp___10 = constant_test_bit(16, & mgr->options);
#line 353
      if (tmp___10) {
#line 353
        tmp___12 = 1;
      } else {
#line 353
        tmp___12 = 0;
      }
#line 353
      ______r___1 = tmp___12;
#line 353
      ______f___1905.__annonCompField3.miss_hit[______r___1] = ______f___1905.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 353
      if (______r___1) {
#line 356
        skb = skb_dequeue(& mgr->sendq);
#line 357
        ______r___0 = ! (! skb);
#line 357
        ______f___1904.__annonCompField3.miss_hit[______r___0] = ______f___1904.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 357
        if (______r___0) {
#line 358
          mgr->lastid = ((struct mISDNhead *)(& skb->cb[0]))->id;
#line 359
          tmp___3 = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 359
          if (tmp___3) {
#line 359
            tmp___4 = 0;
          } else {
#line 359
            tmp___4 = 1;
          }
#line 359
          ______r = tmp___4;
#line 359
          ______f___1903.__annonCompField3.miss_hit[______r] = ______f___1903.__annonCompField3.miss_hit[______r] + 1UL;
#line 359
          if (______r) {
#line 360
            return;
          } else {

          }
#line 361
          consume_skb(skb);
        } else {

        }
      } else {

      }
#line 364
      mgr->lastid = 65534;
#line 365
      test_and_clear_bit(17, & mgr->options);
    } else {

    }
  } else {

  }
#line 368
  return;
}
}
#line 374
static void mgr_send_down(struct manager *mgr , struct sk_buff *skb ) ;
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1908  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_send_down",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    374, {{0UL, 0UL}}};
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void mgr_send_down(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;

  {
#line 373
  skb_queue_tail(& mgr->sendq, skb);
#line 374
  tmp___5 = constant_test_bit(16, & mgr->options);
#line 374
  if (tmp___5) {
#line 374
    tmp___7 = 0;
  } else {
#line 374
    tmp___7 = 1;
  }
#line 374
  ______r = tmp___7;
#line 374
  ______f___1908.__annonCompField3.miss_hit[______r] = ______f___1908.__annonCompField3.miss_hit[______r] + 1UL;
#line 374
  if (______r) {
#line 375
    _queue_data___0(& mgr->ch, 257, 65535, 0, (void *)0, (16U | 64U) | 128U);
  } else {
#line 378
    do_send(mgr);
  }
#line 380
  return;
}
}
#line 385
static int dl_unit_data(struct manager *mgr , struct sk_buff *skb ) ;
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1909  __attribute__((__section__("_ftrace_branch")))  =    {"dl_unit_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    385, {{0UL, 0UL}}};
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1910  __attribute__((__section__("_ftrace_branch")))  =    {"dl_unit_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    387, {{0UL, 0UL}}};
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int dl_unit_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ______r ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___0 ;
  int tmp___14 ;
  int tmp___16 ;

  {
#line 385
  tmp___5 = constant_test_bit(25, & mgr->options);
#line 385
  if (tmp___5) {
#line 385
    tmp___7 = 0;
  } else {
#line 385
    tmp___7 = 1;
  }
#line 385
  ______r = tmp___7;
#line 385
  ______f___1909.__annonCompField3.miss_hit[______r] = ______f___1909.__annonCompField3.miss_hit[______r] + 1UL;
#line 385
  if (______r) {
#line 386
    return (-22);
  } else {

  }
#line 387
  tmp___14 = constant_test_bit(16, & mgr->options);
#line 387
  if (tmp___14) {
#line 387
    tmp___16 = 0;
  } else {
#line 387
    tmp___16 = 1;
  }
#line 387
  ______r___0 = tmp___16;
#line 387
  ______f___1910.__annonCompField3.miss_hit[______r___0] = ______f___1910.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 387
  if (______r___0) {
#line 388
    _queue_data___0(& mgr->ch, 257, 65535, 0, (void *)0, (16U | 64U) | 128U);
  } else {

  }
#line 390
  skb_push(skb, 3);
#line 391
  *(skb->data + 0) = 2;
#line 392
  *(skb->data + 1) = 255;
#line 393
  *(skb->data + 2) = 3;
#line 394
  ((struct mISDNhead *)(& skb->cb[0]))->prim = 8193;
#line 395
  ((struct mISDNhead *)(& skb->cb[0]))->id = new_id(mgr);
#line 396
  skb_queue_tail(& mgr->sendq, skb);
#line 397
  do_send(mgr);
#line 398
  return (0);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static unsigned int random_ri(void) 
{ 
  u16 x ;

  {
#line 406
  get_random_bytes(& x, sizeof(x));
#line 407
  return (x);
}
}
#line 418
static struct layer2 *findtei(struct manager *mgr , int tei ) ;
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1911  __attribute__((__section__("_ftrace_branch")))  =    {"findtei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    419, {{0UL, 0UL}}};
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct layer2 *findtei(struct manager *mgr , int tei ) 
{ 
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;

  {
#line 416
  while (1) {
#line 416
    flags = _read_lock_irqsave(& mgr->lock);
#line 416
    break;
  }
#line 417
  __mptr = mgr->layer2.next;
#line 417
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 417
  while (1) {
#line 417
    __builtin_prefetch(l2->list.next);
#line 417
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 417
      break;
    }
#line 418
    ______r = ! (! ((((int )l2->sapi == 0 && (int )l2->tei > 0) && (int )l2->tei != 127) && (int )l2->tei == tei));
#line 418
    ______f___1911.__annonCompField3.miss_hit[______r] = ______f___1911.__annonCompField3.miss_hit[______r] + 1UL;
#line 418
    if (______r) {
#line 420
      goto done;
    } else {

    }
#line 417
    __mptr___0 = l2->list.next;
#line 417
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 422
  l2 = (void *)0;
  done: 
#line 424
  while (1) {
#line 424
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 424
    break;
  }
#line 425
  return (l2);
}
}
#line 435
static void put_tei_msg(struct manager *mgr , u_char m_id , unsigned int ri , int tei ) ;
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1912  __attribute__((__section__("_ftrace_branch")))  =    {"put_tei_msg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    435, {{0UL, 0UL}}};
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1913  __attribute__((__section__("_ftrace_branch")))  =    {"put_tei_msg",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    445, {{0UL, 0UL}}};
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void put_tei_msg(struct manager *mgr , u_char m_id , unsigned int ri , int tei ) 
{ 
  struct sk_buff *skb ;
  u_char bp[8] ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  u_int tmp___7 ;
  int ______r___0 ;

  {
#line 434
  bp[0] = 63 << 2;
#line 435
  tmp___4 = constant_test_bit(25, & mgr->options);
#line 435
  if (tmp___4) {
#line 435
    tmp___6 = 1;
  } else {
#line 435
    tmp___6 = 0;
  }
#line 435
  ______r = tmp___6;
#line 435
  ______f___1912.__annonCompField3.miss_hit[______r] = ______f___1912.__annonCompField3.miss_hit[______r] + 1UL;
#line 435
  if (______r) {
#line 436
    bp[0] = (int )bp[0] | 2;
  } else {

  }
#line 437
  bp[1] = (127 << 1) | 1;
#line 438
  bp[2] = 3;
#line 439
  bp[3] = 15;
#line 440
  bp[4] = ri >> 8;
#line 441
  bp[5] = ri & 255U;
#line 442
  bp[6] = m_id;
#line 443
  bp[7] = ((tei << 1) & 255) | 1;
#line 444
  tmp___7 = new_id(mgr);
#line 444
  skb = _alloc_mISDN_skb___0(8193, tmp___7, 8, bp, 32U);
#line 445
  ______r___0 = ! (! (! skb));
#line 445
  ______f___1913.__annonCompField3.miss_hit[______r___0] = ______f___1913.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 445
  if (______r___0) {
#line 446
    printk("<4>%s: no skb for tei msg\n", "put_tei_msg");
#line 447
    return;
  } else {

  }
#line 449
  mgr_send_down(mgr, skb);
#line 450
  return;
}
}
#line 457
static void tei_id_request(struct FsmInst *fi , int event , void *arg ) ;
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1914  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_request",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    457, {{0UL, 0UL}}};
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1915  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_request",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    464, {{0UL, 0UL}}};
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_request(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  unsigned int tmp ;
  int ______r___0 ;

  {
#line 455
  tm = fi->userdata;
#line 457
  ______r = ! (! ((int )(tm->l2)->tei != 127));
#line 457
  ______f___1914.__annonCompField3.miss_hit[______r] = ______f___1914.__annonCompField3.miss_hit[______r] + 1UL;
#line 457
  if (______r) {
#line 458
    (*(tm->tei_m.printdebug))(& tm->tei_m, "assign request for allready assigned tei %d",
                              (tm->l2)->tei);
#line 461
    return;
  } else {

  }
#line 463
  tmp = random_ri();
#line 463
  tm->ri = tmp;
#line 464
  ______r___0 = ! (! (*debug___5 & 1048576U));
#line 464
  ______f___1915.__annonCompField3.miss_hit[______r___0] = ______f___1915.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 464
  if (______r___0) {
#line 465
    (*(tm->tei_m.printdebug))(& tm->tei_m, "assign request ri %d", tm->ri);
  } else {

  }
#line 467
  put_tei_msg(tm->mgr, 1, tm->ri, 127);
#line 468
  mISDN_FsmChangeState(fi, ST_TEI_IDREQ);
#line 469
  mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 1);
#line 470
  tm->nval = 3;
#line 471
  return;
}
}
#line 485
static void tei_id_assign(struct FsmInst *fi , int event , void *arg ) ;
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1916  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_assign",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    485, {{0UL, 0UL}}};
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1917  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_assign",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    490, {{0UL, 0UL}}};
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1918  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_assign",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    495, {{0UL, 0UL}}};
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1919  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_assign",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    489, {{0UL, 0UL}}};
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 476
  tm = fi->userdata;
#line 478
  dp = arg;
#line 481
  tmp = dp;
#line 481
  dp = dp + 1;
#line 481
  ri = (unsigned int )*tmp << 8;
#line 482
  tmp___0 = dp;
#line 482
  dp = dp + 1;
#line 482
  ri = ri + (int )*tmp___0;
#line 483
  dp = dp + 1;
#line 484
  tei = (int )*dp >> 1;
#line 485
  ______r = ! (! (*debug___5 & 1048576U));
#line 485
  ______f___1916.__annonCompField3.miss_hit[______r] = ______f___1916.__annonCompField3.miss_hit[______r] + 1UL;
#line 485
  if (______r) {
#line 486
    (*(tm->tei_m.printdebug))(fi, "identity assign ri %d tei %d", ri, tei);
  } else {

  }
#line 488
  l2 = findtei(tm->mgr, tei);
#line 489
  ______r___2 = ! (! l2);
#line 489
  ______f___1919.__annonCompField3.miss_hit[______r___2] = ______f___1919.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 489
  if (______r___2) {
#line 490
    ______r___0 = ! (! (ri != (l2->tm)->ri));
#line 490
    ______f___1917.__annonCompField3.miss_hit[______r___0] = ______f___1917.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 490
    if (______r___0) {
#line 491
      (*(tm->tei_m.printdebug))(fi, "possible duplicate assignment tei %d", tei);
#line 493
      tei_l2(l2, 24324, 0);
    } else {

    }
  } else {
#line 495
    ______r___1 = ! (! (ri == tm->ri));
#line 495
    ______f___1918.__annonCompField3.miss_hit[______r___1] = ______f___1918.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 495
    if (______r___1) {
#line 496
      mISDN_FsmDelTimer(& tm->timer, 1);
#line 497
      mISDN_FsmChangeState(fi, ST_TEI_NOP);
#line 498
      tei_l2(tm->l2, 6148, tei);
    } else {

    }
  }
#line 500
  return;
}
}
#line 514
static void tei_id_test_dup(struct FsmInst *fi , int event , void *arg ) ;
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1920  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_test_dup",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    514, {{0UL, 0UL}}};
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1921  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_test_dup",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    519, {{0UL, 0UL}}};
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1922  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_test_dup",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    518, {{0UL, 0UL}}};
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_test_dup(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int tei ;
  int ri ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 505
  tm = fi->userdata;
#line 507
  dp = arg;
#line 510
  tmp = dp;
#line 510
  dp = dp + 1;
#line 510
  ri = (unsigned int )*tmp << 8;
#line 511
  tmp___0 = dp;
#line 511
  dp = dp + 1;
#line 511
  ri = ri + (int )*tmp___0;
#line 512
  dp = dp + 1;
#line 513
  tei = (int )*dp >> 1;
#line 514
  ______r = ! (! (*debug___5 & 1048576U));
#line 514
  ______f___1920.__annonCompField3.miss_hit[______r] = ______f___1920.__annonCompField3.miss_hit[______r] + 1UL;
#line 514
  if (______r) {
#line 515
    (*(tm->tei_m.printdebug))(fi, "foreign identity assign ri %d tei %d", ri, tei);
  } else {

  }
#line 517
  l2 = findtei(tm->mgr, tei);
#line 518
  ______r___1 = ! (! l2);
#line 518
  ______f___1922.__annonCompField3.miss_hit[______r___1] = ______f___1922.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 518
  if (______r___1) {
#line 519
    ______r___0 = ! (! (ri != (l2->tm)->ri));
#line 519
    ______f___1921.__annonCompField3.miss_hit[______r___0] = ______f___1921.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 519
    if (______r___0) {
#line 520
      (*(tm->tei_m.printdebug))(fi, "possible duplicate assignment tei %d", tei);
#line 522
      mISDN_FsmEvent(& (l2->tm)->tei_m, EV_VERIFY, (void *)0);
    } else {

    }
  } else {

  }
#line 525
  return;
}
}
#line 538
static void tei_id_denied(struct FsmInst *fi , int event , void *arg ) ;
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1923  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_denied",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    538, {{0UL, 0UL}}};
#line 527 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_denied(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r ;

  {
#line 530
  tm = fi->userdata;
#line 531
  dp = arg;
#line 534
  tmp = dp;
#line 534
  dp = dp + 1;
#line 534
  ri = (unsigned int )*tmp << 8;
#line 535
  tmp___0 = dp;
#line 535
  dp = dp + 1;
#line 535
  ri = ri + (int )*tmp___0;
#line 536
  dp = dp + 1;
#line 537
  tei = (int )*dp >> 1;
#line 538
  ______r = ! (! (*debug___5 & 1048576U));
#line 538
  ______f___1923.__annonCompField3.miss_hit[______r] = ______f___1923.__annonCompField3.miss_hit[______r] + 1UL;
#line 538
  if (______r) {
#line 539
    (*(tm->tei_m.printdebug))(fi, "identity denied ri %d tei %d", ri, tei);
  } else {

  }
#line 541
  return;
}
}
#line 551
static void tei_id_chk_req(struct FsmInst *fi , int event , void *arg ) ;
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1924  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_chk_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    551, {{0UL, 0UL}}};
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1925  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_chk_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    554, {{0UL, 0UL}}};
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_chk_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  unsigned int tmp ;
  int ______r___0 ;

  {
#line 546
  tm = fi->userdata;
#line 547
  dp = arg;
#line 550
  tei = (int )*(dp + 3) >> 1;
#line 551
  ______r = ! (! (*debug___5 & 1048576U));
#line 551
  ______f___1924.__annonCompField3.miss_hit[______r] = ______f___1924.__annonCompField3.miss_hit[______r] + 1UL;
#line 551
  if (______r) {
#line 552
    (*(tm->tei_m.printdebug))(fi, "identity check req tei %d", tei);
  } else {

  }
#line 553
  ______r___0 = ! (! ((int )(tm->l2)->tei != 127 && (tei == 127 || tei == (int )(tm->l2)->tei)));
#line 553
  ______f___1925.__annonCompField3.miss_hit[______r___0] = ______f___1925.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 553
  if (______r___0) {
#line 555
    mISDN_FsmDelTimer(& tm->timer, 4);
#line 556
    mISDN_FsmChangeState(& tm->tei_m, ST_TEI_NOP);
#line 557
    tmp = random_ri();
#line 557
    put_tei_msg(tm->mgr, 5, tmp, (tm->l2)->tei);
  } else {

  }
#line 559
  return;
}
}
#line 569
static void tei_id_remove(struct FsmInst *fi , int event , void *arg ) ;
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1926  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_remove",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    569, {{0UL, 0UL}}};
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1927  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_remove",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    572, {{0UL, 0UL}}};
#line 561 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  int ______r___0 ;

  {
#line 564
  tm = fi->userdata;
#line 565
  dp = arg;
#line 568
  tei = (int )*(dp + 3) >> 1;
#line 569
  ______r = ! (! (*debug___5 & 1048576U));
#line 569
  ______f___1926.__annonCompField3.miss_hit[______r] = ______f___1926.__annonCompField3.miss_hit[______r] + 1UL;
#line 569
  if (______r) {
#line 570
    (*(tm->tei_m.printdebug))(fi, "identity remove tei %d", tei);
  } else {

  }
#line 571
  ______r___0 = ! (! ((int )(tm->l2)->tei != 127 && (tei == 127 || tei == (int )(tm->l2)->tei)));
#line 571
  ______f___1927.__annonCompField3.miss_hit[______r___0] = ______f___1927.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 571
  if (______r___0) {
#line 573
    mISDN_FsmDelTimer(& tm->timer, 5);
#line 574
    mISDN_FsmChangeState(& tm->tei_m, ST_TEI_NOP);
#line 575
    tei_l2(tm->l2, 6660, 0);
  } else {

  }
#line 577
  return;
}
}
#line 584
static void tei_id_verify(struct FsmInst *fi , int event , void *arg ) ;
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1928  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_verify",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    584, {{0UL, 0UL}}};
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_verify(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;

  {
#line 582
  tm = fi->userdata;
#line 584
  ______r = ! (! (*debug___5 & 1048576U));
#line 584
  ______f___1928.__annonCompField3.miss_hit[______r] = ______f___1928.__annonCompField3.miss_hit[______r] + 1UL;
#line 584
  if (______r) {
#line 585
    (*(tm->tei_m.printdebug))(fi, "id verify request for tei %d", (tm->l2)->tei);
  } else {

  }
#line 587
  put_tei_msg(tm->mgr, 7, 0, (tm->l2)->tei);
#line 588
  mISDN_FsmChangeState(& tm->tei_m, ST_TEI_IDVERIFY);
#line 589
  mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 2);
#line 590
  tm->nval = 2;
#line 591
  return;
}
}
#line 600
static void tei_id_req_tout(struct FsmInst *fi , int event , void *arg ) ;
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1929  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_req_tout",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    600, {{0UL, 0UL}}};
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1930  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_req_tout",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    598, {{0UL, 0UL}}};
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_req_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;
  int ______r ;
  int ______r___0 ;
  int tmp___1 ;

  {
#line 596
  tm = fi->userdata;
#line 598
  tm->nval = tm->nval - 1;
#line 598
  if (tm->nval) {
#line 598
    tmp___1 = 1;
  } else {
#line 598
    tmp___1 = 0;
  }
#line 598
  ______r___0 = tmp___1;
#line 598
  ______f___1930.__annonCompField3.miss_hit[______r___0] = ______f___1930.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 598
  if (______r___0) {
#line 599
    tmp = random_ri();
#line 599
    tm->ri = tmp;
#line 600
    ______r = ! (! (*debug___5 & 1048576U));
#line 600
    ______f___1929.__annonCompField3.miss_hit[______r] = ______f___1929.__annonCompField3.miss_hit[______r] + 1UL;
#line 600
    if (______r) {
#line 601
      (*(tm->tei_m.printdebug))(fi, "assign req(%d) ri %d", 4 - tm->nval, tm->ri);
    } else {

    }
#line 603
    put_tei_msg(tm->mgr, 1, tm->ri, 127);
#line 604
    mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 3);
  } else {
#line 606
    (*(tm->tei_m.printdebug))(fi, "assign req failed");
#line 607
    tei_l2(tm->l2, 24324, 0);
#line 608
    mISDN_FsmChangeState(fi, ST_TEI_NOP);
  }
#line 610
  return;
}
}
#line 618
static void tei_id_ver_tout(struct FsmInst *fi , int event , void *arg ) ;
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1931  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    618, {{0UL, 0UL}}};
#line 617 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1932  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    617, {{0UL, 0UL}}};
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_ver_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  int ______r___0 ;
  int tmp___0 ;

  {
#line 615
  tm = fi->userdata;
#line 617
  tm->nval = tm->nval - 1;
#line 617
  if (tm->nval) {
#line 617
    tmp___0 = 1;
  } else {
#line 617
    tmp___0 = 0;
  }
#line 617
  ______r___0 = tmp___0;
#line 617
  ______f___1932.__annonCompField3.miss_hit[______r___0] = ______f___1932.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 617
  if (______r___0) {
#line 618
    ______r = ! (! (*debug___5 & 1048576U));
#line 618
    ______f___1931.__annonCompField3.miss_hit[______r] = ______f___1931.__annonCompField3.miss_hit[______r] + 1UL;
#line 618
    if (______r) {
#line 619
      (*(tm->tei_m.printdebug))(fi, "id verify req(%d) for tei %d", 3 - tm->nval,
                                (tm->l2)->tei);
    } else {

    }
#line 622
    put_tei_msg(tm->mgr, 7, 0, (tm->l2)->tei);
#line 623
    mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 4);
  } else {
#line 625
    (*(tm->tei_m.printdebug))(fi, "verify req for tei %d failed", (tm->l2)->tei);
#line 627
    tei_l2(tm->l2, 6660, 0);
#line 628
    mISDN_FsmChangeState(fi, ST_TEI_NOP);
  }
#line 630
  return;
}
}
#line 632 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct FsmNode TeiFnListUser[11]  = 
#line 632
  {      {ST_TEI_NOP, EV_IDREQ, & tei_id_request}, 
        {ST_TEI_NOP, EV_ASSIGN, & tei_id_test_dup}, 
        {ST_TEI_NOP, EV_VERIFY, & tei_id_verify}, 
        {ST_TEI_NOP, EV_REMOVE, & tei_id_remove}, 
        {ST_TEI_NOP, EV_CHKREQ, & tei_id_chk_req}, 
        {ST_TEI_IDREQ, EV_TIMER, & tei_id_req_tout}, 
        {ST_TEI_IDREQ, EV_ASSIGN, & tei_id_assign}, 
        {ST_TEI_IDREQ, EV_DENIED, & tei_id_denied}, 
        {ST_TEI_IDVERIFY, EV_TIMER, & tei_id_ver_tout}, 
        {ST_TEI_IDVERIFY, EV_REMOVE, & tei_id_remove}, 
        {ST_TEI_IDVERIFY, EV_CHKREQ, & tei_id_chk_req}};
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_l2remove(struct layer2 *l2 ) 
{ 


  {
#line 650
  put_tei_msg((l2->tm)->mgr, 6, 0, l2->tei);
#line 651
  tei_l2(l2, 6660, 0);
#line 652
  list_del(& l2->ch.list);
#line 653
  (*(l2->ch.ctrl))(& l2->ch, 512, (void *)0);
#line 654
  return;
}
}
#line 662
static void tei_assign_req(struct FsmInst *fi , int event , void *arg ) ;
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1933  __attribute__((__section__("_ftrace_branch")))  =    {"tei_assign_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    662, {{0UL, 0UL}}};
#line 669 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1934  __attribute__((__section__("_ftrace_branch")))  =    {"tei_assign_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    669, {{0UL, 0UL}}};
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_assign_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ______r ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int ______r___0 ;

  {
#line 659
  tm = fi->userdata;
#line 660
  dp = arg;
#line 662
  ______r = ! (! ((int )(tm->l2)->tei == 127));
#line 662
  ______f___1933.__annonCompField3.miss_hit[______r] = ______f___1933.__annonCompField3.miss_hit[______r] + 1UL;
#line 662
  if (______r) {
#line 663
    (*(tm->tei_m.printdebug))(& tm->tei_m, "net tei assign request without tei");
#line 665
    return;
  } else {

  }
#line 667
  tmp = dp;
#line 667
  dp = dp + 1;
#line 667
  tm->ri = (unsigned int )*tmp << 8;
#line 668
  tmp___0 = dp;
#line 668
  dp = dp + 1;
#line 668
  tm->ri = tm->ri + (int )*tmp___0;
#line 669
  ______r___0 = ! (! (*debug___5 & 1048576U));
#line 669
  ______f___1934.__annonCompField3.miss_hit[______r___0] = ______f___1934.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 669
  if (______r___0) {
#line 670
    (*(tm->tei_m.printdebug))(& tm->tei_m, "net assign request ri %d teim %d", tm->ri,
                              *dp);
  } else {

  }
#line 672
  put_tei_msg(tm->mgr, 2, tm->ri, (tm->l2)->tei);
#line 673
  mISDN_FsmChangeState(fi, ST_TEI_NOP);
#line 674
  return;
}
}
#line 681
static void tei_id_chk_req_net(struct FsmInst *fi , int event , void *arg ) ;
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1935  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_chk_req_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    681, {{0UL, 0UL}}};
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_chk_req_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;

  {
#line 679
  tm = fi->userdata;
#line 681
  ______r = ! (! (*debug___5 & 1048576U));
#line 681
  ______f___1935.__annonCompField3.miss_hit[______r] = ______f___1935.__annonCompField3.miss_hit[______r] + 1UL;
#line 681
  if (______r) {
#line 682
    (*(tm->tei_m.printdebug))(fi, "id check request for tei %d", (tm->l2)->tei);
  } else {

  }
#line 684
  tm->rcnt = 0;
#line 685
  put_tei_msg(tm->mgr, 4, 0, (tm->l2)->tei);
#line 686
  mISDN_FsmChangeState(& tm->tei_m, ST_TEI_IDVERIFY);
#line 687
  mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 2);
#line 688
  tm->nval = 2;
#line 689
  return;
}
}
#line 699
static void tei_id_chk_resp(struct FsmInst *fi , int event , void *arg ) ;
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1936  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_chk_resp",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    699, {{0UL, 0UL}}};
#line 701 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1937  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_chk_resp",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    701, {{0UL, 0UL}}};
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_chk_resp(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  int ______r___0 ;

  {
#line 694
  tm = fi->userdata;
#line 695
  dp = arg;
#line 698
  tei = (int )*(dp + 3) >> 1;
#line 699
  ______r = ! (! (*debug___5 & 1048576U));
#line 699
  ______f___1936.__annonCompField3.miss_hit[______r] = ______f___1936.__annonCompField3.miss_hit[______r] + 1UL;
#line 699
  if (______r) {
#line 700
    (*(tm->tei_m.printdebug))(fi, "identity check resp tei %d", tei);
  } else {

  }
#line 701
  ______r___0 = ! (! (tei == (int )(tm->l2)->tei));
#line 701
  ______f___1937.__annonCompField3.miss_hit[______r___0] = ______f___1937.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 701
  if (______r___0) {
#line 702
    tm->rcnt = tm->rcnt + 1;
  } else {

  }
#line 703
  return;
}
}
#line 713
static void tei_id_verify_net(struct FsmInst *fi , int event , void *arg ) ;
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1938  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_verify_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    713, {{0UL, 0UL}}};
#line 716 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1939  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_verify_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    716, {{0UL, 0UL}}};
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_verify_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  int ______r ;
  int ______r___0 ;

  {
#line 708
  tm = fi->userdata;
#line 709
  dp = arg;
#line 712
  tei = (int )*(dp + 3) >> 1;
#line 713
  ______r = ! (! (*debug___5 & 1048576U));
#line 713
  ______f___1938.__annonCompField3.miss_hit[______r] = ______f___1938.__annonCompField3.miss_hit[______r] + 1UL;
#line 713
  if (______r) {
#line 714
    (*(tm->tei_m.printdebug))(fi, "identity verify req tei %d/%d", tei, (tm->l2)->tei);
  } else {

  }
#line 716
  ______r___0 = ! (! (tei == (int )(tm->l2)->tei));
#line 716
  ______f___1939.__annonCompField3.miss_hit[______r___0] = ______f___1939.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 716
  if (______r___0) {
#line 717
    tei_id_chk_req_net(fi, event, arg);
  } else {

  }
#line 718
  return;
}
}
#line 726
static void tei_id_ver_tout_net(struct FsmInst *fi , int event , void *arg ) ;
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1940  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    726, {{0UL, 0UL}}};
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1941  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    734, {{0UL, 0UL}}};
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1942  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    733, {{0UL, 0UL}}};
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1943  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    730, {{0UL, 0UL}}};
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1944  __attribute__((__section__("_ftrace_branch")))  =    {"tei_id_ver_tout_net",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    725, {{0UL, 0UL}}};
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_id_ver_tout_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___0 ;
  int ______r___2 ;
  int ______r___3 ;

  {
#line 723
  tm = fi->userdata;
#line 725
  ______r___3 = ! (! (tm->rcnt == 1));
#line 725
  ______f___1944.__annonCompField3.miss_hit[______r___3] = ______f___1944.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 725
  if (______r___3) {
#line 726
    ______r = ! (! (*debug___5 & 1048576U));
#line 726
    ______f___1940.__annonCompField3.miss_hit[______r] = ______f___1940.__annonCompField3.miss_hit[______r] + 1UL;
#line 726
    if (______r) {
#line 727
      (*(tm->tei_m.printdebug))(fi, "check req for tei %d sucessful\n", (tm->l2)->tei);
    } else {

    }
#line 729
    mISDN_FsmChangeState(fi, ST_TEI_NOP);
  } else {
#line 730
    ______r___2 = ! (! (tm->rcnt > 1));
#line 730
    ______f___1943.__annonCompField3.miss_hit[______r___2] = ______f___1943.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 730
    if (______r___2) {
#line 732
      tei_l2remove(tm->l2);
    } else {
#line 733
      tm->nval = tm->nval - 1;
#line 733
      if (tm->nval) {
#line 733
        tmp___0 = 1;
      } else {
#line 733
        tmp___0 = 0;
      }
#line 733
      ______r___1 = tmp___0;
#line 733
      ______f___1942.__annonCompField3.miss_hit[______r___1] = ______f___1942.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 733
      if (______r___1) {
#line 734
        ______r___0 = ! (! (*debug___5 & 1048576U));
#line 734
        ______f___1941.__annonCompField3.miss_hit[______r___0] = ______f___1941.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 734
        if (______r___0) {
#line 735
          (*(tm->tei_m.printdebug))(fi, "id check req(%d) for tei %d", 3 - tm->nval,
                                    (tm->l2)->tei);
        } else {

        }
#line 738
        put_tei_msg(tm->mgr, 4, 0, (tm->l2)->tei);
#line 739
        mISDN_FsmAddTimer(& tm->timer, tm->tval, EV_TIMER, (void *)0, 4);
      } else {
#line 741
        (*(tm->tei_m.printdebug))(fi, "check req for tei %d failed", (tm->l2)->tei);
#line 743
        mISDN_FsmChangeState(fi, ST_TEI_NOP);
#line 744
        tei_l2remove(tm->l2);
      }
    }
  }
#line 746
  return;
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct FsmNode TeiFnListNet[5]  = {      {ST_TEI_NOP, EV_ASSIGN_REQ, & tei_assign_req}, 
        {ST_TEI_NOP, EV_VERIFY, & tei_id_verify_net}, 
        {ST_TEI_NOP, EV_CHKREQ, & tei_id_chk_req_net}, 
        {ST_TEI_IDVERIFY, EV_TIMER, & tei_id_ver_tout_net}, 
        {ST_TEI_IDVERIFY, EV_CHKRESP, & tei_id_chk_resp}};
#line 760
static void tei_ph_data_ind(struct teimgr *tm , u_int mt , u_char *dp , int len ) ;
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1945  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    760, {{0UL, 0UL}}};
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1946  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    762, {{0UL, 0UL}}};
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1947  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    774, {{0UL, 0UL}}};
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1948  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    772, {{0UL, 0UL}}};
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1949  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    770, {{0UL, 0UL}}};
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1950  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    768, {{0UL, 0UL}}};
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1951  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    766, {{0UL, 0UL}}};
#line 764 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1952  __attribute__((__section__("_ftrace_branch")))  =    {"tei_ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    764, {{0UL, 0UL}}};
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void tei_ph_data_ind(struct teimgr *tm , u_int mt , u_char *dp , int len ) 
{ 
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;

  {
#line 760
  tmp___4 = constant_test_bit(15, & (tm->l2)->flag);
#line 760
  if (tmp___4) {
#line 760
    tmp___6 = 1;
  } else {
#line 760
    tmp___6 = 0;
  }
#line 760
  ______r = tmp___6;
#line 760
  ______f___1945.__annonCompField3.miss_hit[______r] = ______f___1945.__annonCompField3.miss_hit[______r] + 1UL;
#line 760
  if (______r) {
#line 761
    return;
  } else {

  }
#line 762
  ______r___0 = ! (! (*debug___5 & 1048576U));
#line 762
  ______f___1946.__annonCompField3.miss_hit[______r___0] = ______f___1946.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 762
  if (______r___0) {
#line 763
    (*(tm->tei_m.printdebug))(& tm->tei_m, "tei handler mt %x", mt);
  } else {

  }
#line 764
  ______r___6 = ! (! (mt == (u_int )2));
#line 764
  ______f___1952.__annonCompField3.miss_hit[______r___6] = ______f___1952.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 764
  if (______r___6) {
#line 765
    mISDN_FsmEvent(& tm->tei_m, EV_ASSIGN, dp);
  } else {
#line 766
    ______r___5 = ! (! (mt == (u_int )3));
#line 766
    ______f___1951.__annonCompField3.miss_hit[______r___5] = ______f___1951.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 766
    if (______r___5) {
#line 767
      mISDN_FsmEvent(& tm->tei_m, EV_DENIED, dp);
    } else {
#line 768
      ______r___4 = ! (! (mt == (u_int )4));
#line 768
      ______f___1950.__annonCompField3.miss_hit[______r___4] = ______f___1950.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 768
      if (______r___4) {
#line 769
        mISDN_FsmEvent(& tm->tei_m, EV_CHKREQ, dp);
      } else {
#line 770
        ______r___3 = ! (! (mt == (u_int )6));
#line 770
        ______f___1949.__annonCompField3.miss_hit[______r___3] = ______f___1949.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 770
        if (______r___3) {
#line 771
          mISDN_FsmEvent(& tm->tei_m, EV_REMOVE, dp);
        } else {
#line 772
          ______r___2 = ! (! (mt == (u_int )7));
#line 772
          ______f___1948.__annonCompField3.miss_hit[______r___2] = ______f___1948.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 772
          if (______r___2) {
#line 773
            mISDN_FsmEvent(& tm->tei_m, EV_VERIFY, dp);
          } else {
#line 774
            ______r___1 = ! (! (mt == (u_int )5));
#line 774
            ______f___1947.__annonCompField3.miss_hit[______r___1] = ______f___1947.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 774
            if (______r___1) {
#line 775
              mISDN_FsmEvent(& tm->tei_m, EV_CHKRESP, dp);
            } else {

            }
          }
        }
      }
    }
  }
#line 776
  return;
}
}
#line 786
static struct layer2 *create_new_tei(struct manager *mgr , int tei , int sapi ) ;
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1953  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    786, {{0UL, 0UL}}};
#line 788 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1954  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    788, {{0UL, 0UL}}};
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1955  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    791, {{0UL, 0UL}}};
#line 794 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1956  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    794, {{0UL, 0UL}}};
#line 799 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1957  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    799, {{0UL, 0UL}}};
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1958  __attribute__((__section__("_ftrace_branch")))  =    {"create_new_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    817, {{0UL, 0UL}}};
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct layer2 *create_new_tei(struct manager *mgr , int tei , int sapi ) 
{ 
  u_long opt ;
  u_long flags ;
  int id ;
  struct layer2 *l2 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  void *tmp ;
  int ______r___3 ;
  int ______r___4 ;

  {
#line 781
  opt = 0;
#line 786
  ______r = ! (! (! mgr->up));
#line 786
  ______f___1953.__annonCompField3.miss_hit[______r] = ______f___1953.__annonCompField3.miss_hit[______r] + 1UL;
#line 786
  if (______r) {
#line 787
    return ((void *)0);
  } else {

  }
#line 788
  ______r___0 = ! (! (tei >= 0 && tei < 64));
#line 788
  ______f___1954.__annonCompField3.miss_hit[______r___0] = ______f___1954.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 788
  if (______r___0) {
#line 789
    test_and_set_bit(3, & opt);
  } else {

  }
#line 790
  ______r___1 = ! (! (((mgr->ch.st)->dev)->Dprotocols & (unsigned int )((1 << 3) | (1 << 4))));
#line 790
  ______f___1955.__annonCompField3.miss_hit[______r___1] = ______f___1955.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 790
  if (______r___1) {
#line 792
    test_and_set_bit(1, & opt);
  } else {

  }
#line 793
  l2 = create_l2(mgr->up, 17, opt, tei, sapi);
#line 794
  ______r___2 = ! (! (! l2));
#line 794
  ______f___1956.__annonCompField3.miss_hit[______r___2] = ______f___1956.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 794
  if (______r___2) {
#line 795
    printk("<4>%s:no memory for layer2\n", "create_new_tei");
#line 796
    return ((void *)0);
  } else {

  }
#line 798
  tmp = kzalloc___4(sizeof(struct teimgr ), (16U | 64U) | 128U);
#line 798
  l2->tm = tmp;
#line 799
  ______r___3 = ! (! (! l2->tm));
#line 799
  ______f___1957.__annonCompField3.miss_hit[______r___3] = ______f___1957.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 799
  if (______r___3) {
#line 800
    kfree(l2);
#line 801
    printk("<4>%s:no memory for teimgr\n", "create_new_tei");
#line 802
    return ((void *)0);
  } else {

  }
#line 804
  (l2->tm)->mgr = mgr;
#line 805
  (l2->tm)->l2 = l2;
#line 806
  (l2->tm)->tei_m.debug = *debug___5 & 2097152U;
#line 807
  (l2->tm)->tei_m.userdata = l2->tm;
#line 808
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 809
  (l2->tm)->tei_m.fsm = & teifsmn;
#line 810
  (l2->tm)->tei_m.state = ST_TEI_NOP;
#line 811
  (l2->tm)->tval = 2000;
#line 812
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 813
  while (1) {
#line 813
    flags = _write_lock_irqsave(& mgr->lock);
#line 813
    break;
  }
#line 814
  id = get_free_id(mgr);
#line 815
  list_add_tail(& l2->list, & mgr->layer2);
#line 816
  while (1) {
#line 816
    _write_unlock_irqrestore(& mgr->lock, flags);
#line 816
    break;
  }
#line 817
  ______r___4 = ! (! (id < 0));
#line 817
  ______f___1958.__annonCompField3.miss_hit[______r___4] = ______f___1958.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 817
  if (______r___4) {
#line 818
    (*(l2->ch.ctrl))(& l2->ch, 512, (void *)0);
#line 819
    printk("<4>%s:no free id\n", "create_new_tei");
#line 820
    return ((void *)0);
  } else {
#line 822
    l2->ch.nr = id;
#line 823
    __add_layer2(& l2->ch, mgr->ch.st);
#line 824
    l2->ch.recv = mgr->ch.recv;
#line 825
    l2->ch.peer = mgr->ch.peer;
#line 826
    (*(l2->ch.ctrl))(& l2->ch, 256, (void *)0);
  }
#line 828
  return (l2);
}
}
#line 839
static void new_tei_req(struct manager *mgr , u_char *dp ) ;
#line 839 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1959  __attribute__((__section__("_ftrace_branch")))  =    {"new_tei_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    839, {{0UL, 0UL}}};
#line 841 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1960  __attribute__((__section__("_ftrace_branch")))  =    {"new_tei_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    841, {{0UL, 0UL}}};
#line 843 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1961  __attribute__((__section__("_ftrace_branch")))  =    {"new_tei_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    843, {{0UL, 0UL}}};
#line 847 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1962  __attribute__((__section__("_ftrace_branch")))  =    {"new_tei_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    847, {{0UL, 0UL}}};
#line 852 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1963  __attribute__((__section__("_ftrace_branch")))  =    {"new_tei_req",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    852, {{0UL, 0UL}}};
#line 831 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static void new_tei_req(struct manager *mgr , u_char *dp ) 
{ 
  int tei ;
  int ri ;
  struct layer2 *l2 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;

  {
#line 837
  ri = (int )*(dp + 0) << 8;
#line 838
  ri = ri + (int )*(dp + 1);
#line 839
  ______r = ! (! (! mgr->up));
#line 839
  ______f___1959.__annonCompField3.miss_hit[______r] = ______f___1959.__annonCompField3.miss_hit[______r] + 1UL;
#line 839
  if (______r) {
#line 840
    goto denied;
  } else {

  }
#line 841
  ______r___0 = ! (! (! ((int )*(dp + 3) & 1)));
#line 841
  ______f___1960.__annonCompField3.miss_hit[______r___0] = ______f___1960.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 841
  if (______r___0) {
#line 842
    goto denied;
  } else {

  }
#line 843
  ______r___1 = ! (! ((int )*(dp + 3) != 255));
#line 843
  ______f___1961.__annonCompField3.miss_hit[______r___1] = ______f___1961.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 843
  if (______r___1) {
#line 844
    tei = (int )*(dp + 3) >> 1;
  } else {
#line 846
    tei = get_free_tei(mgr);
  }
#line 847
  ______r___2 = ! (! (tei < 0));
#line 847
  ______f___1962.__annonCompField3.miss_hit[______r___2] = ______f___1962.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 847
  if (______r___2) {
#line 848
    printk("<4>%s:No free tei\n", "new_tei_req");
#line 849
    goto denied;
  } else {

  }
#line 851
  l2 = create_new_tei(mgr, tei, 0);
#line 852
  ______r___3 = ! (! (! l2));
#line 852
  ______f___1963.__annonCompField3.miss_hit[______r___3] = ______f___1963.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 852
  if (______r___3) {
#line 853
    goto denied;
  } else {
#line 855
    mISDN_FsmEvent(& (l2->tm)->tei_m, EV_ASSIGN_REQ, dp);
  }
#line 856
  return;
  denied: 
#line 858
  put_tei_msg(mgr, 3, ri, 127);
#line 859
  return;
}
}
#line 870
static int ph_data_ind(struct manager *mgr , struct sk_buff *skb ) ;
#line 870 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1964  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    870, {{0UL, 0UL}}};
#line 869 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1965  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    869, {{0UL, 0UL}}};
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1966  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    877, {{0UL, 0UL}}};
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1967  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    875, {{0UL, 0UL}}};
#line 879 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1968  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    879, {{0UL, 0UL}}};
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1969  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    881, {{0UL, 0UL}}};
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1970  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    883, {{0UL, 0UL}}};
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1971  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    885, {{0UL, 0UL}}};
#line 887 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1972  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    887, {{0UL, 0UL}}};
#line 894 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1973  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    894, {{0UL, 0UL}}};
#line 901 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1974  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    901, {{0UL, 0UL}}};
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1975  __attribute__((__section__("_ftrace_branch")))  =    {"ph_data_ind",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    908, {{0UL, 0UL}}};
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int ph_data_ind(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ret ;
  struct layer2 *l2 ;
  u_long flags ;
  u_char mt ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___9 ;
  int tmp___13 ;
  int tmp___15 ;
  int ______r___10 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 864
  ret = -22;
#line 869
  ______r___0 = ! (! (skb->len < 8U));
#line 869
  ______f___1965.__annonCompField3.miss_hit[______r___0] = ______f___1965.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 869
  if (______r___0) {
#line 870
    ______r = ! (! (*debug___5 & 1048576U));
#line 870
    ______f___1964.__annonCompField3.miss_hit[______r] = ______f___1964.__annonCompField3.miss_hit[______r] + 1UL;
#line 870
    if (______r) {
#line 871
      printk("<7>%s: short mgr frame %d/8\n", "ph_data_ind", skb->len);
    } else {

    }
#line 873
    goto done;
  } else {

  }
#line 875
  ______r___2 = ! (! (*debug___5 & 1048576U));
#line 875
  ______f___1967.__annonCompField3.miss_hit[______r___2] = ______f___1967.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 875
  if (______r___2) {
#line 877
    ______r___1 = ! (! ((int )*(skb->data + 0) >> 2 != 63));
#line 877
    ______f___1966.__annonCompField3.miss_hit[______r___1] = ______f___1966.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 877
    if (______r___1) {
#line 878
      goto done;
    } else {

    }
  } else {

  }
#line 879
  ______r___3 = ! (! ((int )*(skb->data + 0) & 1));
#line 879
  ______f___1968.__annonCompField3.miss_hit[______r___3] = ______f___1968.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 879
  if (______r___3) {
#line 880
    goto done;
  } else {

  }
#line 881
  ______r___4 = ! (! (! ((int )*(skb->data + 1) & 1)));
#line 881
  ______f___1969.__annonCompField3.miss_hit[______r___4] = ______f___1969.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 881
  if (______r___4) {
#line 882
    goto done;
  } else {

  }
#line 883
  ______r___5 = ! (! ((int )*(skb->data + 1) >> 1 != 127));
#line 883
  ______f___1970.__annonCompField3.miss_hit[______r___5] = ______f___1970.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 883
  if (______r___5) {
#line 884
    goto done;
  } else {

  }
#line 885
  ______r___6 = ! (! (((int )*(skb->data + 2) & 239) != 3));
#line 885
  ______f___1971.__annonCompField3.miss_hit[______r___6] = ______f___1971.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 885
  if (______r___6) {
#line 886
    goto done;
  } else {

  }
#line 887
  ______r___7 = ! (! ((int )*(skb->data + 3) != 15));
#line 887
  ______f___1972.__annonCompField3.miss_hit[______r___7] = ______f___1972.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 887
  if (______r___7) {
#line 888
    goto done;
  } else {

  }
#line 889
  mt = *(skb->data + 6);
#line 890
  switch ((int )mt) {
  case 7: 
  case 5: 
  case 1: 
#line 894
  tmp___5 = constant_test_bit(25, & mgr->options);
#line 894
  if (tmp___5) {
#line 894
    tmp___7 = 0;
  } else {
#line 894
    tmp___7 = 1;
  }
#line 894
  ______r___8 = tmp___7;
#line 894
  ______f___1973.__annonCompField3.miss_hit[______r___8] = ______f___1973.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 894
  if (______r___8) {
#line 895
    goto done;
  } else {

  }
#line 896
  break;
  case 6: 
  case 4: 
  case 3: 
  case 2: 
#line 901
  tmp___13 = constant_test_bit(25, & mgr->options);
#line 901
  if (tmp___13) {
#line 901
    tmp___15 = 1;
  } else {
#line 901
    tmp___15 = 0;
  }
#line 901
  ______r___9 = tmp___15;
#line 901
  ______f___1974.__annonCompField3.miss_hit[______r___9] = ______f___1974.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 901
  if (______r___9) {
#line 902
    goto done;
  } else {

  }
#line 903
  break;
  default: 
#line 905
  goto done;
  }
#line 907
  ret = 0;
#line 908
  ______r___10 = ! (! ((int )mt == 1));
#line 908
  ______f___1975.__annonCompField3.miss_hit[______r___10] = ______f___1975.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 908
  if (______r___10) {
#line 909
    new_tei_req(mgr, skb->data + 4);
#line 910
    goto done;
  } else {

  }
#line 912
  while (1) {
#line 912
    flags = _read_lock_irqsave(& mgr->lock);
#line 912
    break;
  }
#line 913
  __mptr = mgr->layer2.next;
#line 913
  l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 913
  while (1) {
#line 913
    __builtin_prefetch(l2->list.next);
#line 913
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 913
      break;
    }
#line 914
    tei_ph_data_ind(l2->tm, mt, skb->data + 4, skb->len - 4U);
#line 913
    __mptr___0 = l2->list.next;
#line 913
    l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 916
  while (1) {
#line 916
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 916
    break;
  }
  done: 
#line 918
  return (ret);
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1976  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    926, {{0UL, 0UL}}};
#line 928 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1977  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    928, {{0UL, 0UL}}};
#line 935 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1978  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    935, {{0UL, 0UL}}};
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1979  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    937, {{0UL, 0UL}}};
#line 941 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1980  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    941, {{0UL, 0UL}}};
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1981  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    945, {{0UL, 0UL}}};
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1982  __attribute__((__section__("_ftrace_branch")))  =    {"l2_tei",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    949, {{0UL, 0UL}}};
#line 921 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  struct teimgr *tm ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___12 ;
  int tmp___14 ;
  int ______r___2 ;
  int tmp___20 ;
  int tmp___22 ;
  int ______r___3 ;
  int tmp___28 ;
  int tmp___30 ;
  int ______r___4 ;
  int tmp___36 ;
  int tmp___38 ;
  int ______r___5 ;
  int tmp___44 ;
  int tmp___46 ;

  {
#line 924
  tm = l2->tm;
#line 926
  tmp___4 = constant_test_bit(15, & l2->flag);
#line 926
  if (tmp___4) {
#line 926
    tmp___6 = 1;
  } else {
#line 926
    tmp___6 = 0;
  }
#line 926
  ______r = tmp___6;
#line 926
  ______f___1976.__annonCompField3.miss_hit[______r] = ______f___1976.__annonCompField3.miss_hit[______r] + 1UL;
#line 926
  if (______r) {
#line 927
    return (0);
  } else {

  }
#line 928
  ______r___0 = ! (! (*debug___5 & 1048576U));
#line 928
  ______f___1977.__annonCompField3.miss_hit[______r___0] = ______f___1977.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 928
  if (______r___0) {
#line 929
    printk("<7>%s: cmd(%x)\n", "l2_tei", cmd);
  } else {

  }
#line 930
  switch (cmd) {
  case (u_int )6404: 
#line 932
  mISDN_FsmEvent(& tm->tei_m, EV_IDREQ, (void *)0);
#line 933
  break;
  case (u_int )7940: 
#line 935
  tmp___12 = constant_test_bit(25, & (tm->mgr)->options);
#line 935
  if (tmp___12) {
#line 935
    tmp___14 = 1;
  } else {
#line 935
    tmp___14 = 0;
  }
#line 935
  ______r___1 = tmp___14;
#line 935
  ______f___1978.__annonCompField3.miss_hit[______r___1] = ______f___1978.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 935
  if (______r___1) {
#line 936
    mISDN_FsmEvent(& tm->tei_m, EV_CHKREQ, & l2->tei);
  } else {

  }
#line 937
  tmp___20 = constant_test_bit(24, & (tm->mgr)->options);
#line 937
  if (tmp___20) {
#line 937
    tmp___22 = 1;
  } else {
#line 937
    tmp___22 = 0;
  }
#line 937
  ______r___2 = tmp___22;
#line 937
  ______f___1979.__annonCompField3.miss_hit[______r___2] = ______f___1979.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 937
  if (______r___2) {
#line 938
    mISDN_FsmEvent(& tm->tei_m, EV_VERIFY, (void *)0);
  } else {

  }
#line 939
  break;
  case (u_int )7172: 
#line 941
  tmp___28 = constant_test_bit(25, & (tm->mgr)->options);
#line 941
  if (tmp___28) {
#line 941
    tmp___30 = 1;
  } else {
#line 941
    tmp___30 = 0;
  }
#line 941
  ______r___3 = tmp___30;
#line 941
  ______f___1980.__annonCompField3.miss_hit[______r___3] = ______f___1980.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 941
  if (______r___3) {
#line 942
    mISDN_FsmEvent(& (tm->mgr)->deact, EV_ACTIVATE, (void *)0);
  } else {

  }
#line 943
  break;
  case (u_int )7428: 
#line 945
  tmp___36 = constant_test_bit(25, & (tm->mgr)->options);
#line 945
  if (tmp___36) {
#line 945
    tmp___38 = 1;
  } else {
#line 945
    tmp___38 = 0;
  }
#line 945
  ______r___4 = tmp___38;
#line 945
  ______f___1981.__annonCompField3.miss_hit[______r___4] = ______f___1981.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 945
  if (______r___4) {
#line 946
    mISDN_FsmEvent(& (tm->mgr)->deact, EV_DEACTIVATE, (void *)0);
  } else {

  }
#line 947
  break;
  case (u_int )7684: 
#line 949
  tmp___44 = constant_test_bit(25, & (tm->mgr)->options);
#line 949
  if (tmp___44) {
#line 949
    tmp___46 = 1;
  } else {
#line 949
    tmp___46 = 0;
  }
#line 949
  ______r___5 = tmp___46;
#line 949
  ______f___1982.__annonCompField3.miss_hit[______r___5] = ______f___1982.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 949
  if (______r___5) {
#line 950
    mISDN_FsmEvent(& (tm->mgr)->deact, EV_UI, (void *)0);
  } else {

  }
#line 951
  break;
  }
#line 953
  return (0);
}
}
#line 956 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
void TEIrelease(struct layer2 *l2 ) 
{ 
  struct teimgr *tm ;
  u_long flags ;

  {
#line 959
  tm = l2->tm;
#line 962
  mISDN_FsmDelTimer(& tm->timer, 1);
#line 963
  while (1) {
#line 963
    flags = _write_lock_irqsave(& (tm->mgr)->lock);
#line 963
    break;
  }
#line 964
  list_del(& l2->list);
#line 965
  while (1) {
#line 965
    _write_unlock_irqrestore(& (tm->mgr)->lock, flags);
#line 965
    break;
  }
#line 966
  l2->tm = (void *)0;
#line 967
  kfree(tm);
#line 968
  return;
}
}
#line 978
static int create_teimgr(struct manager *mgr , struct channel_req *crq ) ;
#line 978 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1983  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    978, {{0UL, 0UL}}};
#line 983 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1984  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    983, {{0UL, 0UL}}};
#line 985 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1985  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    985, {{0UL, 0UL}}};
#line 987 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1986  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    987, {{0UL, 0UL}}};
#line 990 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1987  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    990, {{0UL, 0UL}}};
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1988  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    992, {{0UL, 0UL}}};
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1989  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    994, {{0UL, 0UL}}};
#line 1001 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1990  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1001, {{0UL, 0UL}}};
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1991  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1003, {{0UL, 0UL}}};
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1992  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1006, {{0UL, 0UL}}};
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1993  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1008, {{0UL, 0UL}}};
#line 1000 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1994  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1000, {{0UL, 0UL}}};
#line 989 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1995  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    989, {{0UL, 0UL}}};
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1996  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1012, {{0UL, 0UL}}};
#line 1019 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1997  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1019, {{0UL, 0UL}}};
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1998  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1014, {{0UL, 0UL}}};
#line 1031 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___1999  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1031, {{0UL, 0UL}}};
#line 1034 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2000  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1034, {{0UL, 0UL}}};
#line 1044 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2001  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1044, {{0UL, 0UL}}};
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2002  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimgr",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1058, {{0UL, 0UL}}};
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int create_teimgr(struct manager *mgr , struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  u_long opt ;
  u_long flags ;
  int id ;
  char const   *tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int tmp___5 ;
  int tmp___7 ;
  int ______r___11 ;
  int tmp___13 ;
  int tmp___15 ;
  int ______r___12 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r___13 ;
  int tmp___20 ;
  int tmp___21 ;
  int ______r___14 ;
  int ______r___15 ;
  void *tmp___22 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;

  {
#line 974
  opt = 0;
#line 978
  ______r = ! (! (*debug___5 & 1048576U));
#line 978
  ______f___1983.__annonCompField3.miss_hit[______r] = ______f___1983.__annonCompField3.miss_hit[______r] + 1UL;
#line 978
  if (______r) {
#line 979
    tmp = dev_name(& ((mgr->ch.st)->dev)->dev);
#line 979
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_teimgr", tmp, crq->protocol,
           crq->adr.dev, crq->adr.channel, crq->adr.sapi, crq->adr.tei);
  } else {

  }
#line 983
  ______r___0 = ! (! ((int )crq->adr.tei > 127));
#line 983
  ______f___1984.__annonCompField3.miss_hit[______r___0] = ______f___1984.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 983
  if (______r___0) {
#line 984
    return (-22);
  } else {

  }
#line 985
  ______r___1 = ! (! ((int )crq->adr.tei < 64));
#line 985
  ______f___1985.__annonCompField3.miss_hit[______r___1] = ______f___1985.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 985
  if (______r___1) {
#line 986
    test_and_set_bit(3, & opt);
  } else {

  }
#line 987
  ______r___2 = ! (! ((int )crq->adr.tei == 0));
#line 987
  ______f___1986.__annonCompField3.miss_hit[______r___2] = ______f___1986.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 987
  if (______r___2) {
#line 988
    test_and_set_bit(2, & opt);
  } else {

  }
#line 989
  tmp___13 = constant_test_bit(25, & mgr->options);
#line 989
  if (tmp___13) {
#line 989
    tmp___15 = 1;
  } else {
#line 989
    tmp___15 = 0;
  }
#line 989
  ______r___11 = tmp___15;
#line 989
  ______f___1995.__annonCompField3.miss_hit[______r___11] = ______f___1995.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 989
  if (______r___11) {
#line 990
    ______r___3 = ! (! (crq->protocol == (u_int )16));
#line 990
    ______f___1987.__annonCompField3.miss_hit[______r___3] = ______f___1987.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 990
    if (______r___3) {
#line 991
      return (-93);
    } else {

    }
#line 992
    ______r___4 = ! (! ((int )crq->adr.tei != 0 && (int )crq->adr.tei != 127));
#line 992
    ______f___1988.__annonCompField3.miss_hit[______r___4] = ______f___1988.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 992
    if (______r___4) {
#line 993
      return (-22);
    } else {

    }
#line 994
    ______r___5 = ! (! mgr->up);
#line 994
    ______f___1989.__annonCompField3.miss_hit[______r___5] = ______f___1989.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 994
    if (______r___5) {
#line 995
      printk("<4>%s: only one network manager is allowed\n", "create_teimgr");
#line 998
      return (-16);
    } else {

    }
  } else {
#line 1000
    tmp___5 = constant_test_bit(24, & mgr->options);
#line 1000
    if (tmp___5) {
#line 1000
      tmp___7 = 1;
    } else {
#line 1000
      tmp___7 = 0;
    }
#line 1000
    ______r___10 = tmp___7;
#line 1000
    ______f___1994.__annonCompField3.miss_hit[______r___10] = ______f___1994.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 1000
    if (______r___10) {
#line 1001
      ______r___6 = ! (! (crq->protocol == (u_int )17));
#line 1001
      ______f___1990.__annonCompField3.miss_hit[______r___6] = ______f___1990.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1001
      if (______r___6) {
#line 1002
        return (-93);
      } else {

      }
#line 1003
      ______r___7 = ! (! ((int )crq->adr.tei >= 64 && (int )crq->adr.tei < 127));
#line 1003
      ______f___1991.__annonCompField3.miss_hit[______r___7] = ______f___1991.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1003
      if (______r___7) {
#line 1004
        return (-22);
      } else {

      }
    } else {
#line 1006
      ______r___8 = ! (! (crq->protocol == (u_int )17));
#line 1006
      ______f___1992.__annonCompField3.miss_hit[______r___8] = ______f___1992.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 1006
      if (______r___8) {
#line 1007
        test_and_set_bit(25, & mgr->options);
      } else {

      }
#line 1008
      ______r___9 = ! (! (crq->protocol == (u_int )16));
#line 1008
      ______f___1993.__annonCompField3.miss_hit[______r___9] = ______f___1993.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 1008
      if (______r___9) {
#line 1009
        test_and_set_bit(24, & mgr->options);
      } else {

      }
    }
  }
#line 1011
  ______r___12 = ! (! (((mgr->ch.st)->dev)->Dprotocols & (unsigned int )((1 << 3) | (1 << 4))));
#line 1011
  ______f___1996.__annonCompField3.miss_hit[______r___12] = ______f___1996.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 1011
  if (______r___12) {
#line 1013
    test_and_set_bit(1, & opt);
  } else {

  }
#line 1014
  ______r___14 = ! (! (crq->protocol == (u_int )17 && (int )crq->adr.tei == 127));
#line 1014
  ______f___1998.__annonCompField3.miss_hit[______r___14] = ______f___1998.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 1014
  if (______r___14) {
#line 1015
    mgr->up = crq->ch;
#line 1016
    id = 1;
#line 1017
    teiup_create(mgr, 8, sizeof(id), & id);
#line 1018
    crq->ch = (void *)0;
#line 1019
    tmp___20 = list_empty(& mgr->layer2);
#line 1019
    if (tmp___20) {
#line 1019
      tmp___21 = 0;
    } else {
#line 1019
      tmp___21 = 1;
    }
#line 1019
    ______r___13 = tmp___21;
#line 1019
    ______f___1997.__annonCompField3.miss_hit[______r___13] = ______f___1997.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 1019
    if (______r___13) {
#line 1020
      while (1) {
#line 1020
        flags = _read_lock_irqsave(& mgr->lock);
#line 1020
        break;
      }
#line 1021
      __mptr = mgr->layer2.next;
#line 1021
      l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1021
      while (1) {
#line 1021
        __builtin_prefetch(l2->list.next);
#line 1021
        if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

        } else {
#line 1021
          break;
        }
#line 1022
        l2->up = mgr->up;
#line 1023
        (*(l2->ch.ctrl))(& l2->ch, 256, (void *)0);
#line 1021
        __mptr___0 = l2->list.next;
#line 1021
        l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
      }
#line 1025
      while (1) {
#line 1025
        _read_unlock_irqrestore(& mgr->lock, flags);
#line 1025
        break;
      }
    } else {

    }
#line 1027
    return (0);
  } else {

  }
#line 1029
  l2 = create_l2(crq->ch, crq->protocol, opt, crq->adr.tei, crq->adr.sapi);
#line 1031
  ______r___15 = ! (! (! l2));
#line 1031
  ______f___1999.__annonCompField3.miss_hit[______r___15] = ______f___1999.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 1031
  if (______r___15) {
#line 1032
    return (-12);
  } else {

  }
#line 1033
  tmp___22 = kzalloc___4(sizeof(struct teimgr ), (16U | 64U) | 128U);
#line 1033
  l2->tm = tmp___22;
#line 1034
  ______r___16 = ! (! (! l2->tm));
#line 1034
  ______f___2000.__annonCompField3.miss_hit[______r___16] = ______f___2000.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 1034
  if (______r___16) {
#line 1035
    kfree(l2);
#line 1036
    printk("<3>kmalloc teimgr failed\n");
#line 1037
    return (-12);
  } else {

  }
#line 1039
  (l2->tm)->mgr = mgr;
#line 1040
  (l2->tm)->l2 = l2;
#line 1041
  (l2->tm)->tei_m.debug = *debug___5 & 2097152U;
#line 1042
  (l2->tm)->tei_m.userdata = l2->tm;
#line 1043
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 1044
  ______r___17 = ! (! (crq->protocol == (u_int )16));
#line 1044
  ______f___2001.__annonCompField3.miss_hit[______r___17] = ______f___2001.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 1044
  if (______r___17) {
#line 1045
    (l2->tm)->tei_m.fsm = & teifsmu;
#line 1046
    (l2->tm)->tei_m.state = ST_TEI_NOP;
#line 1047
    (l2->tm)->tval = 1000;
  } else {
#line 1049
    (l2->tm)->tei_m.fsm = & teifsmn;
#line 1050
    (l2->tm)->tei_m.state = ST_TEI_NOP;
#line 1051
    (l2->tm)->tval = 2000;
  }
#line 1053
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 1054
  while (1) {
#line 1054
    flags = _write_lock_irqsave(& mgr->lock);
#line 1054
    break;
  }
#line 1055
  id = get_free_id(mgr);
#line 1056
  list_add_tail(& l2->list, & mgr->layer2);
#line 1057
  while (1) {
#line 1057
    _write_unlock_irqrestore(& mgr->lock, flags);
#line 1057
    break;
  }
#line 1058
  ______r___18 = ! (! (id < 0));
#line 1058
  ______f___2002.__annonCompField3.miss_hit[______r___18] = ______f___2002.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 1058
  if (______r___18) {
#line 1059
    (*(l2->ch.ctrl))(& l2->ch, 512, (void *)0);
  } else {
#line 1061
    l2->ch.nr = id;
#line 1062
    (l2->up)->nr = id;
#line 1063
    crq->ch = & l2->ch;
#line 1064
    id = 0;
  }
#line 1066
  return (id);
}
}
#line 1077
static int mgr_send(struct mISDNchannel *ch , struct sk_buff *skb ) ;
#line 1077 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2003  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1077, {{0UL, 0UL}}};
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2004  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_send",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1103, {{0UL, 0UL}}};
#line 1069 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int mgr_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNhead *hh ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;
  int tmp ;
  int ______r___0 ;

  {
#line 1073
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 1074
  ret = -22;
#line 1076
  __mptr = ch;
#line 1076
  mgr = (struct manager *)((char *)__mptr - (unsigned int )(& ((struct manager *)0)->ch));
#line 1077
  ______r = ! (! (*debug___5 & 524288U));
#line 1077
  ______f___2003.__annonCompField3.miss_hit[______r] = ______f___2003.__annonCompField3.miss_hit[______r] + 1UL;
#line 1077
  if (______r) {
#line 1078
    printk("<7>%s: prim(%x) id(%x)\n", "mgr_send", hh->prim, hh->id);
  } else {

  }
#line 1080
  switch (hh->prim) {
  case 8194U: 
#line 1082
  mISDN_FsmEvent(& mgr->deact, EV_UI, (void *)0);
#line 1083
  ret = ph_data_ind(mgr, skb);
#line 1084
  break;
  case 24578U: 
#line 1086
  do_ack(mgr, hh->id);
#line 1087
  ret = 0;
#line 1088
  break;
  case 258U: 
#line 1090
  test_and_set_bit(16, & mgr->options);
#line 1091
  mISDN_FsmEvent(& mgr->deact, EV_ACTIVATE_IND, (void *)0);
#line 1092
  do_send(mgr);
#line 1093
  ret = 0;
#line 1094
  break;
  case 514U: 
#line 1096
  test_and_clear_bit(16, & mgr->options);
#line 1097
  mISDN_FsmEvent(& mgr->deact, EV_DEACTIVATE_IND, (void *)0);
#line 1098
  ret = 0;
#line 1099
  break;
  case 12548U: 
#line 1101
  tmp = dl_unit_data(mgr, skb);
#line 1101
  return (tmp);
  }
#line 1103
  ______r___0 = ! (! (! ret));
#line 1103
  ______f___2004.__annonCompField3.miss_hit[______r___0] = ______f___2004.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1103
  if (______r___0) {
#line 1104
    consume_skb(skb);
  } else {

  }
#line 1105
  return (ret);
}
}
#line 1117
static int free_teimanager(struct manager *mgr ) ;
#line 1117 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2005  __attribute__((__section__("_ftrace_branch")))  =    {"free_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1117, {{0UL, 0UL}}};
#line 1114 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2006  __attribute__((__section__("_ftrace_branch")))  =    {"free_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1114, {{0UL, 0UL}}};
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2007  __attribute__((__section__("_ftrace_branch")))  =    {"free_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1133, {{0UL, 0UL}}};
#line 1132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2008  __attribute__((__section__("_ftrace_branch")))  =    {"free_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1132, {{0UL, 0UL}}};
#line 1108 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int free_teimanager(struct manager *mgr ) 
{ 
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int ______r ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___0 ;
  int tmp___12 ;
  int tmp___14 ;
  int ______r___1 ;
  int tmp___18 ;
  int tmp___19 ;
  int ______r___2 ;
  int tmp___25 ;
  int tmp___27 ;

  {
#line 1113
  test_and_clear_bit(5, & mgr->options);
#line 1114
  tmp___12 = constant_test_bit(25, & mgr->options);
#line 1114
  if (tmp___12) {
#line 1114
    tmp___14 = 1;
  } else {
#line 1114
    tmp___14 = 0;
  }
#line 1114
  ______r___0 = tmp___14;
#line 1114
  ______f___2006.__annonCompField3.miss_hit[______r___0] = ______f___2006.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1114
  if (______r___0) {
#line 1116
    mgr->up = (void *)0;
#line 1117
    tmp___4 = constant_test_bit(4, & mgr->options);
#line 1117
    if (tmp___4) {
#line 1117
      tmp___6 = 1;
    } else {
#line 1117
      tmp___6 = 0;
    }
#line 1117
    ______r = tmp___6;
#line 1117
    ______f___2005.__annonCompField3.miss_hit[______r] = ______f___2005.__annonCompField3.miss_hit[______r] + 1UL;
#line 1117
    if (______r) {
#line 1118
      __mptr = mgr->layer2.next;
#line 1118
      l2 = (struct layer2 *)((char *)__mptr - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1118
      __mptr___0 = l2->list.next;
#line 1118
      nl2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1118
      while (1) {
#line 1118
        if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

        } else {
#line 1118
          break;
        }
#line 1119
        put_tei_msg(mgr, 6, 0, l2->tei);
#line 1120
        mutex_lock_nested(& (mgr->ch.st)->lmutex, 0);
#line 1121
        list_del(& l2->ch.list);
#line 1122
        mutex_unlock(& (mgr->ch.st)->lmutex);
#line 1123
        (*(l2->ch.ctrl))(& l2->ch, 512, (void *)0);
#line 1118
        l2 = nl2;
#line 1118
        __mptr___1 = nl2->list.next;
#line 1118
        nl2 = (struct layer2 *)((char *)__mptr___1 - (unsigned int )(& ((struct layer2 *)0)->list));
      }
#line 1125
      test_and_clear_bit(25, & mgr->options);
    } else {
#line 1127
      __mptr___2 = mgr->layer2.next;
#line 1127
      l2 = (struct layer2 *)((char *)__mptr___2 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1127
      __mptr___3 = l2->list.next;
#line 1127
      nl2 = (struct layer2 *)((char *)__mptr___3 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1127
      while (1) {
#line 1127
        if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

        } else {
#line 1127
          break;
        }
#line 1128
        l2->up = (void *)0;
#line 1127
        l2 = nl2;
#line 1127
        __mptr___4 = nl2->list.next;
#line 1127
        nl2 = (struct layer2 *)((char *)__mptr___4 - (unsigned int )(& ((struct layer2 *)0)->list));
      }
    }
  } else {

  }
#line 1132
  tmp___25 = constant_test_bit(24, & mgr->options);
#line 1132
  if (tmp___25) {
#line 1132
    tmp___27 = 1;
  } else {
#line 1132
    tmp___27 = 0;
  }
#line 1132
  ______r___2 = tmp___27;
#line 1132
  ______f___2008.__annonCompField3.miss_hit[______r___2] = ______f___2008.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1132
  if (______r___2) {
#line 1133
    tmp___18 = list_empty(& mgr->layer2);
#line 1133
    if (tmp___18) {
#line 1133
      tmp___19 = 1;
    } else {
#line 1133
      tmp___19 = 0;
    }
#line 1133
    ______r___1 = tmp___19;
#line 1133
    ______f___2007.__annonCompField3.miss_hit[______r___1] = ______f___2007.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1133
    if (______r___1) {
#line 1134
      test_and_clear_bit(24, & mgr->options);
    } else {

    }
  } else {

  }
#line 1136
  (*(((mgr->ch.st)->dev)->D.ctrl))(& ((mgr->ch.st)->dev)->D, 512, (void *)0);
#line 1137
  return (0);
}
}
#line 1149
static int ctrl_teimanager(struct manager *mgr , void *arg ) ;
#line 1149 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2009  __attribute__((__section__("_ftrace_branch")))  =    {"ctrl_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1149, {{0UL, 0UL}}};
#line 1155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2010  __attribute__((__section__("_ftrace_branch")))  =    {"ctrl_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1155, {{0UL, 0UL}}};
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int ctrl_teimanager(struct manager *mgr , void *arg ) 
{ 
  int *val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
#line 1144
  val = (int *)arg;
#line 1145
  ret = 0;
#line 1147
  switch (*(val + 0)) {
  case (int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(70 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 1149
  ______r = ! (! *(val + 1));
#line 1149
  ______f___2009.__annonCompField3.miss_hit[______r] = ______f___2009.__annonCompField3.miss_hit[______r] + 1UL;
#line 1149
  if (______r) {
#line 1150
    test_and_set_bit(4, & mgr->options);
  } else {
#line 1152
    test_and_clear_bit(4, & mgr->options);
  }
#line 1153
  break;
  case (int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(72 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 1155
  ______r___0 = ! (! *(val + 1));
#line 1155
  ______f___2010.__annonCompField3.miss_hit[______r___0] = ______f___2010.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1155
  if (______r___0) {
#line 1156
    test_and_set_bit(5, & mgr->options);
  } else {
#line 1158
    test_and_clear_bit(5, & mgr->options);
  }
#line 1159
  break;
  default: 
#line 1161
  ret = -22;
  }
#line 1163
  return (ret);
}
}
#line 1174
static int check_data(struct manager *mgr , struct sk_buff *skb ) ;
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2011  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1174, {{0UL, 0UL}}};
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2012  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1177, {{0UL, 0UL}}};
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2013  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1179, {{0UL, 0UL}}};
#line 1181 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2014  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1181, {{0UL, 0UL}}};
#line 1183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2015  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1183, {{0UL, 0UL}}};
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2016  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1186, {{0UL, 0UL}}};
#line 1189 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2017  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1189, {{0UL, 0UL}}};
#line 1191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2018  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1191, {{0UL, 0UL}}};
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2019  __attribute__((__section__("_ftrace_branch")))  =    {"check_data",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1195, {{0UL, 0UL}}};
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int check_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ret ;
  int tei ;
  int sapi ;
  struct layer2 *l2 ;
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___6 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;

  {
#line 1170
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 1174
  ______r = ! (! (*debug___5 & 262144U));
#line 1174
  ______f___2011.__annonCompField3.miss_hit[______r] = ______f___2011.__annonCompField3.miss_hit[______r] + 1UL;
#line 1174
  if (______r) {
#line 1175
    printk("<7>%s: prim(%x) id(%x)\n", "check_data", hh->prim, hh->id);
  } else {

  }
#line 1177
  tmp___4 = constant_test_bit(24, & mgr->options);
#line 1177
  if (tmp___4) {
#line 1177
    tmp___6 = 1;
  } else {
#line 1177
    tmp___6 = 0;
  }
#line 1177
  ______r___0 = tmp___6;
#line 1177
  ______f___2012.__annonCompField3.miss_hit[______r___0] = ______f___2012.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1177
  if (______r___0) {
#line 1178
    return (-107);
  } else {

  }
#line 1179
  ______r___1 = ! (! (hh->prim != 8194U));
#line 1179
  ______f___2013.__annonCompField3.miss_hit[______r___1] = ______f___2013.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1179
  if (______r___1) {
#line 1180
    return (-107);
  } else {

  }
#line 1181
  ______r___2 = ! (! (skb->len != 3U));
#line 1181
  ______f___2014.__annonCompField3.miss_hit[______r___2] = ______f___2014.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1181
  if (______r___2) {
#line 1182
    return (-107);
  } else {

  }
#line 1183
  ______r___3 = ! (! ((int )*(skb->data + 0) & 3));
#line 1183
  ______f___2015.__annonCompField3.miss_hit[______r___3] = ______f___2015.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1183
  if (______r___3) {
#line 1184
    return (-22);
  } else {

  }
#line 1185
  sapi = (int )*(skb->data + 0) >> 2;
#line 1186
  ______r___4 = ! (! (! ((int )*(skb->data + 1) & 1)));
#line 1186
  ______f___2016.__annonCompField3.miss_hit[______r___4] = ______f___2016.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1186
  if (______r___4) {
#line 1187
    return (-22);
  } else {

  }
#line 1188
  tei = (int )*(skb->data + 1) >> 1;
#line 1189
  ______r___5 = ! (! (tei > 63));
#line 1189
  ______f___2017.__annonCompField3.miss_hit[______r___5] = ______f___2017.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1189
  if (______r___5) {
#line 1190
    return (-107);
  } else {

  }
#line 1191
  ______r___6 = ! (! (((int )*(skb->data + 2) & ~ 16) != 111));
#line 1191
  ______f___2018.__annonCompField3.miss_hit[______r___6] = ______f___2018.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1191
  if (______r___6) {
#line 1192
    return (-107);
  } else {

  }
#line 1194
  l2 = create_new_tei(mgr, tei, sapi);
#line 1195
  ______r___7 = ! (! (! l2));
#line 1195
  ______f___2019.__annonCompField3.miss_hit[______r___7] = ______f___2019.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 1195
  if (______r___7) {
#line 1196
    return (-12);
  } else {

  }
#line 1197
  ret = (*(l2->ch.send))(& l2->ch, skb);
#line 1198
  return (ret);
}
}
#line 1201 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
void delete_teimanager(struct mISDNchannel *ch ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct mISDNchannel  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 1207
  __mptr = ch;
#line 1207
  mgr = (struct manager *)((char *)__mptr - (unsigned int )(& ((struct manager *)0)->ch));
#line 1209
  __mptr___0 = mgr->layer2.next;
#line 1209
  l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1209
  __mptr___1 = l2->list.next;
#line 1209
  nl2 = (struct layer2 *)((char *)__mptr___1 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1209
  while (1) {
#line 1209
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 1209
      break;
    }
#line 1210
    mutex_lock_nested(& (mgr->ch.st)->lmutex, 0);
#line 1211
    list_del(& l2->ch.list);
#line 1212
    mutex_unlock(& (mgr->ch.st)->lmutex);
#line 1213
    (*(l2->ch.ctrl))(& l2->ch, 512, (void *)0);
#line 1209
    l2 = nl2;
#line 1209
    __mptr___2 = nl2->list.next;
#line 1209
    nl2 = (struct layer2 *)((char *)__mptr___2 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
#line 1215
  list_del(& mgr->ch.list);
#line 1216
  list_del(& mgr->bcast.list);
#line 1217
  skb_queue_purge(& mgr->sendq);
#line 1218
  kfree(mgr);
#line 1219
  return;
}
}
#line 1228
static int mgr_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) ;
#line 1228 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2020  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_ctrl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1228, {{0UL, 0UL}}};
#line 1221 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int mgr_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct manager *mgr ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int ______r ;

  {
#line 1225
  ret = -22;
#line 1227
  __mptr = ch;
#line 1227
  mgr = (struct manager *)((char *)__mptr - (unsigned int )(& ((struct manager *)0)->ch));
#line 1228
  ______r = ! (! (*debug___5 & 262144U));
#line 1228
  ______f___2020.__annonCompField3.miss_hit[______r] = ______f___2020.__annonCompField3.miss_hit[______r] + 1UL;
#line 1228
  if (______r) {
#line 1229
    printk("<7>%s(%x, %p)\n", "mgr_ctrl", cmd, arg);
  } else {

  }
#line 1230
  switch (cmd) {
  case (u_int )256: 
#line 1232
  ret = create_teimgr(mgr, arg);
#line 1233
  break;
  case (u_int )512: 
#line 1235
  ret = free_teimanager(mgr);
#line 1236
  break;
  case (u_int )768: 
#line 1238
  ret = ctrl_teimanager(mgr, arg);
#line 1239
  break;
  case (u_int )1024: 
#line 1241
  ret = check_data(mgr, arg);
#line 1242
  break;
  }
#line 1244
  return (ret);
}
}
#line 1265
static int mgr_bcast(struct mISDNchannel *ch , struct sk_buff *skb ) ;
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2021  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1265, {{0UL, 0UL}}};
#line 1261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2022  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1261, {{0UL, 0UL}}};
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2023  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1271, {{0UL, 0UL}}};
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2024  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1270, {{0UL, 0UL}}};
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2025  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1268, {{0UL, 0UL}}};
#line 1259 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2026  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1260, {{0UL, 0UL}}};
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2027  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1288, {{0UL, 0UL}}};
#line 1290 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2028  __attribute__((__section__("_ftrace_branch")))  =    {"mgr_bcast",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1290, {{0UL, 0UL}}};
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int mgr_bcast(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  struct sk_buff *cskb ;
  struct layer2 *l2 ;
  u_long flags ;
  int ret ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int ______r ;
  int ______r___0 ;
  int tmp___2 ;
  int tmp___3 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;

  {
#line 1250
  __mptr = ch;
#line 1250
  mgr = (struct manager *)((char *)__mptr - (unsigned int )(& ((struct manager *)0)->bcast));
#line 1251
  hh = (struct mISDNhead *)(& skb->cb[0]);
#line 1252
  cskb = (void *)0;
#line 1257
  while (1) {
#line 1257
    flags = _read_lock_irqsave(& mgr->lock);
#line 1257
    break;
  }
#line 1258
  __mptr___0 = mgr->layer2.next;
#line 1258
  l2 = (struct layer2 *)((char *)__mptr___0 - (unsigned int )(& ((struct layer2 *)0)->list));
#line 1258
  while (1) {
#line 1258
    __builtin_prefetch(l2->list.next);
#line 1258
    if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {

    } else {
#line 1258
      break;
    }
#line 1259
    ______r___4 = ! (! ((hh->id & 255U) == (l2->ch.addr & 255U)));
#line 1259
    ______f___2026.__annonCompField3.miss_hit[______r___4] = ______f___2026.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 1259
    if (______r___4) {
#line 1261
      tmp___2 = list_is_last(& l2->list, & mgr->layer2);
#line 1261
      if (tmp___2) {
#line 1261
        tmp___3 = 1;
      } else {
#line 1261
        tmp___3 = 0;
      }
#line 1261
      ______r___0 = tmp___3;
#line 1261
      ______f___2022.__annonCompField3.miss_hit[______r___0] = ______f___2022.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 1261
      if (______r___0) {
#line 1262
        cskb = skb;
#line 1263
        skb = (void *)0;
      } else {
#line 1265
        ______r = ! (! (! cskb));
#line 1265
        ______f___2021.__annonCompField3.miss_hit[______r] = ______f___2021.__annonCompField3.miss_hit[______r] + 1UL;
#line 1265
        if (______r) {
#line 1266
          cskb = skb_copy(skb, (16U | 64U) | 128U);
        } else {

        }
      }
#line 1268
      ______r___3 = ! (! cskb);
#line 1268
      ______f___2025.__annonCompField3.miss_hit[______r___3] = ______f___2025.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 1268
      if (______r___3) {
#line 1269
        ret = (*(l2->ch.send))(& l2->ch, cskb);
#line 1270
        ______r___2 = ! (! ret);
#line 1270
        ______f___2024.__annonCompField3.miss_hit[______r___2] = ______f___2024.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 1270
        if (______r___2) {
#line 1271
          ______r___1 = ! (! (*debug___5 & 16U));
#line 1271
          ______f___2023.__annonCompField3.miss_hit[______r___1] = ______f___2023.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 1271
          if (______r___1) {
#line 1272
            printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "mgr_bcast", l2->ch.nr,
                   hh->prim, l2->ch.addr, ret);
          } else {

          }
        } else {
#line 1278
          cskb = (void *)0;
        }
      } else {
#line 1280
        printk("<4>%s ch%d addr %x no mem\n", "mgr_bcast", ch->nr, ch->addr);
#line 1282
        goto out;
      }
    } else {

    }
#line 1258
    __mptr___1 = l2->list.next;
#line 1258
    l2 = (struct layer2 *)((char *)__mptr___1 - (unsigned int )(& ((struct layer2 *)0)->list));
  }
  out: 
#line 1287
  while (1) {
#line 1287
    _read_unlock_irqrestore(& mgr->lock, flags);
#line 1287
    break;
  }
#line 1288
  ______r___5 = ! (! cskb);
#line 1288
  ______f___2027.__annonCompField3.miss_hit[______r___5] = ______f___2027.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 1288
  if (______r___5) {
#line 1289
    consume_skb(cskb);
  } else {

  }
#line 1290
  ______r___6 = ! (! skb);
#line 1290
  ______f___2028.__annonCompField3.miss_hit[______r___6] = ______f___2028.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 1290
  if (______r___6) {
#line 1291
    consume_skb(skb);
  } else {

  }
#line 1292
  return (0);
}
}
#line 1295 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static int mgr_bcast_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 


  {
#line 1299
  return (-22);
}
}
#line 1308 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2029  __attribute__((__section__("_ftrace_branch")))  =    {"create_teimanager",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c",
    1308, {{0UL, 0UL}}};
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
static struct lock_class_key __key___12  ;
#line 1302 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
int create_teimanager(struct mISDNdevice *dev ) 
{ 
  struct manager *mgr ;
  void *tmp ;
  int ______r ;

  {
#line 1307
  tmp = kzalloc___4(sizeof(struct manager ), (16U | 64U) | 128U);
#line 1307
  mgr = tmp;
#line 1308
  ______r = ! (! (! mgr));
#line 1308
  ______f___2029.__annonCompField3.miss_hit[______r] = ______f___2029.__annonCompField3.miss_hit[______r] + 1UL;
#line 1308
  if (______r) {
#line 1309
    return (-12);
  } else {

  }
#line 1310
  INIT_LIST_HEAD(& mgr->layer2);
#line 1311
  while (1) {
#line 1311
    __rwlock_init(& mgr->lock, "&mgr->lock", & __key___12);
#line 1311
    break;
  }
#line 1312
  skb_queue_head_init___2(& mgr->sendq);
#line 1313
  mgr->nextid = 1;
#line 1314
  mgr->lastid = 65534;
#line 1315
  mgr->ch.send = & mgr_send;
#line 1316
  mgr->ch.ctrl = & mgr_ctrl;
#line 1317
  mgr->ch.st = dev->D.st;
#line 1318
  set_channel_address(& mgr->ch, 63, 127);
#line 1319
  add_layer2(& mgr->ch, dev->D.st);
#line 1320
  mgr->bcast.send = & mgr_bcast;
#line 1321
  mgr->bcast.ctrl = & mgr_bcast_ctrl;
#line 1322
  mgr->bcast.st = dev->D.st;
#line 1323
  set_channel_address(& mgr->bcast, 0, 127);
#line 1324
  add_layer2(& mgr->bcast, dev->D.st);
#line 1325
  mgr->deact.debug = *debug___5 & 8U;
#line 1326
  mgr->deact.userdata = mgr;
#line 1327
  mgr->deact.printdebug = & da_debug;
#line 1328
  mgr->deact.fsm = & deactfsm;
#line 1329
  mgr->deact.state = ST_L1_DEACT;
#line 1330
  mISDN_FsmInitTimer(& mgr->deact, & mgr->datimer);
#line 1331
  dev->teimgr = & mgr->ch;
#line 1332
  return (0);
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
int TEIInit(u_int *deb ) 
{ 


  {
#line 1337
  debug___5 = deb;
#line 1338
  teifsmu.state_count = ST_TEI_IDVERIFY + 1;
#line 1339
  teifsmu.event_count = EV_TIMER + 1;
#line 1340
  teifsmu.strEvent = strTeiEvent;
#line 1341
  teifsmu.strState = strTeiState;
#line 1342
  mISDN_FsmNew(& teifsmu, TeiFnListUser, sizeof(TeiFnListUser) / sizeof(TeiFnListUser[0]) + (sizeof(char [1 - 2 * 0]) - 1UL));
#line 1343
  teifsmn.state_count = ST_TEI_IDVERIFY + 1;
#line 1344
  teifsmn.event_count = EV_TIMER + 1;
#line 1345
  teifsmn.strEvent = strTeiEvent;
#line 1346
  teifsmn.strState = strTeiState;
#line 1347
  mISDN_FsmNew(& teifsmn, TeiFnListNet, sizeof(TeiFnListNet) / sizeof(TeiFnListNet[0]) + (sizeof(char [1 - 2 * 0]) - 1UL));
#line 1348
  deactfsm.state_count = ST_L1_ACTIV + 1;
#line 1349
  deactfsm.event_count = EV_DATIMER + 1;
#line 1350
  deactfsm.strEvent = strDeactEvent;
#line 1351
  deactfsm.strState = strDeactState;
#line 1352
  mISDN_FsmNew(& deactfsm, DeactFnList, sizeof(DeactFnList) / sizeof(DeactFnList[0]) + (sizeof(char [1 - 2 * 0]) - 1UL));
#line 1353
  return (0);
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/tei.c"
void TEIFree(void) 
{ 


  {
#line 1358
  mISDN_FsmFree(& teifsmu);
#line 1359
  mISDN_FsmFree(& teifsmn);
#line 1360
  mISDN_FsmFree(& deactfsm);
#line 1361
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 35 "include/linux/spinlock_api_smp.h"
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 2222 "include/linux/fs.h"
extern int nonseekable_open(struct inode *inode , struct file *filp ) ;
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) ;
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___678  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2030  __attribute__((__section__("_ftrace_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2031  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"trace_kmalloc",
    "include/trace/kmemtrace.h", 29, {{0UL, 0UL}}};
#line 23 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  int ______r___2 ;
  int ______r___3 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 23
  tmp___2 = __builtin_expect(! (! __tracepoint_kmalloc.state), 1);
#line 23
  ______r___3 = tmp___2;
#line 23
  ftrace_likely_update(& ______f___2031, ______r___3, 0);
#line 23
  if (______r___3) {
#line 23
    tmp___3 = 1;
  } else {
#line 23
    tmp___3 = 0;
  }
#line 23
  ______r___2 = tmp___3;
#line 23
  ______f___2030.__annonCompField3.miss_hit[______r___2] = ______f___2030.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 23
  if (______r___2) {
#line 23
    while (1) {
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      it_func = _________p1;
#line 23
      ______r = ! (! it_func);
#line 23
      ______f___678.__annonCompField3.miss_hit[______r] = ______f___678.__annonCompField3.miss_hit[______r] + 1UL;
#line 23
      if (______r) {
#line 23
        while (1) {
#line 23
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 23
          it_func = it_func + 1;
#line 23
          if (*it_func) {

          } else {
#line 23
            break;
          }
        }
      } else {

      }
#line 23
      while (1) {
#line 23
        break;
      }
#line 23
      break;
    }
  } else {

  }
#line 23
  return;
}
}
#line 149 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___5)(size_t size ) ;
#line 149 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___708  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
#line 152 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___709  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
#line 156 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___710  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
#line 158 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___711  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
#line 161 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___712  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
#line 162 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___713  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
#line 163 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___714  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
#line 164 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___715  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
#line 165 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___716  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
#line 166 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___717  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
#line 167 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___718  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
#line 168 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___719  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
#line 169 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___720  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
#line 170 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___721  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
#line 175 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___722  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
#line 176 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___723  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
#line 177 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___724  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
#line 178 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___725  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
#line 179 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___726  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
#line 180 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___727  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
#line 181 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___728  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
#line 182 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___729  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
#line 183 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___730  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index___5)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
#line 149
  ______r = ! (! (! size));
#line 149
  ______f___708.__annonCompField3.miss_hit[______r] = ______f___708.__annonCompField3.miss_hit[______r] + 1UL;
#line 149
  if (______r) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______r___0 = ! (! (size <= (size_t )8));
#line 152
  ______f___709.__annonCompField3.miss_hit[______r___0] = ______f___709.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
#line 156
  ______f___710.__annonCompField3.miss_hit[______r___1] = ______f___710.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
#line 158
  ______f___711.__annonCompField3.miss_hit[______r___2] = ______f___711.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______r___3 = ! (! (size <= (size_t )8));
#line 161
  ______f___712.__annonCompField3.miss_hit[______r___3] = ______f___712.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______r___4 = ! (! (size <= (size_t )16));
#line 162
  ______f___713.__annonCompField3.miss_hit[______r___4] = ______f___713.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______r___5 = ! (! (size <= (size_t )32));
#line 163
  ______f___714.__annonCompField3.miss_hit[______r___5] = ______f___714.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______r___6 = ! (! (size <= (size_t )64));
#line 164
  ______f___715.__annonCompField3.miss_hit[______r___6] = ______f___715.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______r___7 = ! (! (size <= (size_t )128));
#line 165
  ______f___716.__annonCompField3.miss_hit[______r___7] = ______f___716.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______r___8 = ! (! (size <= (size_t )256));
#line 166
  ______f___717.__annonCompField3.miss_hit[______r___8] = ______f___717.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______r___9 = ! (! (size <= (size_t )512));
#line 167
  ______f___718.__annonCompField3.miss_hit[______r___9] = ______f___718.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______r___10 = ! (! (size <= (size_t )1024));
#line 168
  ______f___719.__annonCompField3.miss_hit[______r___10] = ______f___719.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
#line 169
  ______f___720.__annonCompField3.miss_hit[______r___11] = ______f___720.__annonCompField3.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
#line 170
  ______f___721.__annonCompField3.miss_hit[______r___12] = ______f___721.__annonCompField3.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
#line 175
  ______f___722.__annonCompField3.miss_hit[______r___13] = ______f___722.__annonCompField3.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
#line 176
  ______f___723.__annonCompField3.miss_hit[______r___14] = ______f___723.__annonCompField3.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
#line 177
  ______f___724.__annonCompField3.miss_hit[______r___15] = ______f___724.__annonCompField3.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
#line 178
  ______f___725.__annonCompField3.miss_hit[______r___16] = ______f___725.__annonCompField3.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
#line 179
  ______f___726.__annonCompField3.miss_hit[______r___17] = ______f___726.__annonCompField3.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
#line 180
  ______f___727.__annonCompField3.miss_hit[______r___18] = ______f___727.__annonCompField3.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
#line 181
  ______f___728.__annonCompField3.miss_hit[______r___19] = ______f___728.__annonCompField3.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
#line 182
  ______f___729.__annonCompField3.miss_hit[______r___20] = ______f___729.__annonCompField3.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
#line 183
  ______f___730.__annonCompField3.miss_hit[______r___21] = ______f___730.__annonCompField3.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 205
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___5)(size_t size ) ;
#line 205 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___731  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab___5)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
#line 203
  tmp = kmalloc_index___5(size);
#line 203
  index = tmp;
#line 205
  ______r = ! (! (index == 0));
#line 205
  ______f___731.__annonCompField3.miss_hit[______r] = ______f___731.__annonCompField3.miss_hit[______r] + 1UL;
#line 205
  if (______r) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large___5)(size_t size ,
                                                                              gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc___5((unsigned long )((void *)0), ret, size, (1UL << 12) << order,
                    flags);
#line 238
  return (ret);
}
}
#line 246
__inline static void *( __attribute__((__always_inline__)) kmalloc___5)(size_t size ,
                                                                        gfp_t flags ) ;
#line 246 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___732  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 246, {{0UL, 0UL}}};
#line 252 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___733  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 252, {{0UL, 0UL}}};
#line 249 "include/linux/slub_def.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___734  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 249, {{0UL, 0UL}}};
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc___5)(size_t size ,
                                                                        gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______r = ! (! (size > 2UL * (1UL << 12)));
#line 246
    ______f___732.__annonCompField3.miss_hit[______r] = ______f___732.__annonCompField3.miss_hit[______r] + 1UL;
#line 246
    if (______r) {
#line 247
      tmp = kmalloc_large___5(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______r___1 = ! (! (! (flags & 1U)));
#line 249
    ______f___734.__annonCompField3.miss_hit[______r___1] = ______f___734.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1) {
#line 250
      tmp___0 = kmalloc_slab___5(size);
#line 250
      s = tmp___0;
#line 252
      ______r___0 = ! (! (! s));
#line 252
      ______f___733.__annonCompField3.miss_hit[______r___0] = ______f___733.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___5((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc___5(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc___5(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 2189 "include/linux/sched.h"
__inline static int signal_pending___0(struct task_struct *p ) ;
#line 2189 "include/linux/sched.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___770  __attribute__((__section__("_ftrace_annotated_branch")))  =    {"signal_pending",
    "include/linux/sched.h", 2189, {{0UL, 0UL}}};
#line 2187 "include/linux/sched.h"
__inline static int signal_pending___0(struct task_struct *p ) 
{ 
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
#line 2189
  tmp___2 = test_tsk_thread_flag(p, 2);
#line 2189
  if (tmp___2) {
#line 2189
    tmp___3 = 1;
  } else {
#line 2189
    tmp___3 = 0;
  }
#line 2189
  tmp___4 = __builtin_expect(tmp___3, 1);
#line 2189
  ______r = tmp___4;
#line 2189
  ftrace_likely_update(& ______f___770, ______r, 0);
#line 2189
  return (______r);
}
}
#line 39 "include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) ;
#line 39 "include/linux/poll.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___809  __attribute__((__section__("_ftrace_branch")))  =    {"poll_wait",
    "include/linux/poll.h", 39, {{0UL, 0UL}}};
#line 37 "include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 
  int ______r ;

  {
#line 39
  ______r = ! (! (p && wait_address));
#line 39
  ______f___809.__annonCompField3.miss_hit[______r] = ______f___809.__annonCompField3.miss_hit[______r] + 1UL;
#line 39
  if (______r) {
#line 40
    (*(p->qproc))(filp, wait_address, p);
  } else {

  }
#line 41
  return;
}
}
#line 449 "include/linux/module.h"
__inline static void __module_get___0(struct module *module ) ;
#line 449 "include/linux/module.h"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___814  __attribute__((__section__("_ftrace_branch")))  =    {"__module_get",
    "include/linux/module.h", 449, {{0UL, 0UL}}};
#line 447 "include/linux/module.h"
__inline static void __module_get___0(struct module *module ) 
{ 
  int ret__ ;
  local_t *tmp ;
  int ______r ;

  {
#line 449
  ______r = ! (! module);
#line 449
  ______f___814.__annonCompField3.miss_hit[______r] = ______f___814.__annonCompField3.miss_hit[______r] + 1UL;
#line 449
  if (______r) {
#line 450
    while (1) {
#line 450
      break;
    }
#line 450
    switch (sizeof(per_cpu__cpu_number)) {
    case 1UL: 
#line 450
    __asm__  ("mov"
              "b "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 2UL: 
#line 450
    __asm__  ("mov"
              "w "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 4UL: 
#line 450
    __asm__  ("mov"
              "l "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    case 8UL: 
#line 450
    __asm__  ("mov"
              "q "
              "%%"
              "gs"
              ":%P"
              "1"
              ",%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 450
    break;
    default: 
#line 450
    __bad_percpu_size();
    }
#line 450
    tmp = __module_ref_addr(module, ret__);
#line 450
    local_inc(tmp);
#line 451
    while (1) {
#line 451
      break;
    }
  } else {

  }
#line 453
  return;
}
}
#line 46 "include/linux/miscdevice.h"
extern int misc_register(struct miscdevice *misc ) ;
#line 47
extern int misc_deregister(struct miscdevice *misc ) ;
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static u_int *debug___6  ;
#line 53
static int mISDN_open(struct inode *ino , struct file *filep ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2032  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_open",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    53, {{0UL, 0UL}}};
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2033  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_open",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    56, {{0UL, 0UL}}};
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct lock_class_key __key___13  ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int mISDN_open(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  int ______r ;
  void *tmp ;
  int ______r___0 ;
  int tmp___0 ;

  {
#line 53
  ______r = ! (! (*debug___6 & 16777216U));
#line 53
  ______f___2032.__annonCompField3.miss_hit[______r] = ______f___2032.__annonCompField3.miss_hit[______r] + 1UL;
#line 53
  if (______r) {
#line 54
    printk("<7>%s(%p,%p)\n", "mISDN_open", ino, filep);
  } else {

  }
#line 55
  tmp = kmalloc___5(sizeof(struct mISDNtimerdev ), (16U | 64U) | 128U);
#line 55
  dev = tmp;
#line 56
  ______r___0 = ! (! (! dev));
#line 56
  ______f___2033.__annonCompField3.miss_hit[______r___0] = ______f___2033.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 56
  if (______r___0) {
#line 57
    return (-12);
  } else {

  }
#line 58
  dev->next_id = 1;
#line 59
  INIT_LIST_HEAD(& dev->pending);
#line 60
  INIT_LIST_HEAD(& dev->expired);
#line 61
  while (1) {
#line 61
    __spin_lock_init(& dev->lock, "&dev->lock", & __key___13);
#line 61
    break;
  }
#line 62
  dev->work = 0;
#line 63
  init_waitqueue_head(& dev->wait);
#line 64
  filep->private_data = dev;
#line 65
  __module_get___0(& __this_module);
#line 66
  tmp___0 = nonseekable_open(ino, filep);
#line 66
  return (tmp___0);
}
}
#line 75
static int mISDN_close(struct inode *ino , struct file *filep ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2034  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_close",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    75, {{0UL, 0UL}}};
#line 69 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int mISDN_close(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  struct mISDNtimer *next ;
  int ______r ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;

  {
#line 72
  dev = filep->private_data;
#line 75
  ______r = ! (! (*debug___6 & 16777216U));
#line 75
  ______f___2034.__annonCompField3.miss_hit[______r] = ______f___2034.__annonCompField3.miss_hit[______r] + 1UL;
#line 75
  if (______r) {
#line 76
    printk("<7>%s(%p,%p)\n", "mISDN_close", ino, filep);
  } else {

  }
#line 77
  __mptr = dev->pending.next;
#line 77
  timer = (struct mISDNtimer *)((char *)__mptr - (unsigned int )(& ((struct mISDNtimer *)0)->list));
#line 77
  __mptr___0 = timer->list.next;
#line 77
  next = (struct mISDNtimer *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
#line 77
  while (1) {
#line 77
    if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {

    } else {
#line 77
      break;
    }
#line 78
    del_timer(& timer->tl);
#line 79
    kfree(timer);
#line 77
    timer = next;
#line 77
    __mptr___1 = next->list.next;
#line 77
    next = (struct mISDNtimer *)((char *)__mptr___1 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
  }
#line 81
  __mptr___2 = dev->expired.next;
#line 81
  timer = (struct mISDNtimer *)((char *)__mptr___2 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
#line 81
  __mptr___3 = timer->list.next;
#line 81
  next = (struct mISDNtimer *)((char *)__mptr___3 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
#line 81
  while (1) {
#line 81
    if ((unsigned long )(& timer->list) != (unsigned long )(& dev->expired)) {

    } else {
#line 81
      break;
    }
#line 82
    kfree(timer);
#line 81
    timer = next;
#line 81
    __mptr___4 = next->list.next;
#line 81
    next = (struct mISDNtimer *)((char *)__mptr___4 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
  }
#line 84
  kfree(dev);
#line 85
  module_put(& __this_module);
#line 86
  return (0);
}
}
#line 97
static ssize_t mISDN_read(struct file *filep , char *buf , size_t count , loff_t *off ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2035  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    97, {{0UL, 0UL}}};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2036  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    100, {{0UL, 0UL}}};
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2037  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    104, {{0UL, 0UL}}};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2038  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    107, {{0UL, 0UL}}};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2039  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    107, {{0UL, 0UL}}};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2040  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    107, {{0UL, 0UL}}};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2041  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    108, {{0UL, 0UL}}};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2042  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    103, {{0UL, 0UL}}};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2043  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    111, {{0UL, 0UL}}};
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2044  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    113, {{0UL, 0UL}}};
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2045  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    120, {{0UL, 0UL}}};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2046  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_read",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    115, {{0UL, 0UL}}};
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static ssize_t mISDN_read(struct file *filep , char *buf , size_t count , loff_t *off ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  u_long flags ;
  int ret ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int ______r___2 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___3 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int ______r___4 ;
  int tmp___19 ;
  int tmp___20 ;
  int ______r___5 ;
  struct task_struct *tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int ______r___6 ;
  int tmp___32 ;
  int tmp___33 ;
  int ______r___7 ;
  int ______r___8 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___34 ;
  int ______r___9 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int tmp___35 ;
  int tmp___36 ;
  int ______r___10 ;
  int tmp___41 ;
  int tmp___42 ;

  {
#line 92
  dev = filep->private_data;
#line 95
  ret = 0;
#line 97
  ______r = ! (! (*debug___6 & 16777216U));
#line 97
  ______f___2035.__annonCompField3.miss_hit[______r] = ______f___2035.__annonCompField3.miss_hit[______r] + 1UL;
#line 97
  if (______r) {
#line 98
    printk("<7>%s(%p, %p, %d, %p)\n", "mISDN_read", filep, buf, (int )count, off);
  } else {

  }
#line 100
  ______r___0 = ! (! (*off != filep->f_pos));
#line 100
  ______f___2036.__annonCompField3.miss_hit[______r___0] = ______f___2036.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 100
  if (______r___0) {
#line 101
    return (-29);
  } else {

  }
#line 103
  tmp___32 = list_empty(& dev->expired);
#line 103
  if (tmp___32 && dev->work == (u_int )0) {
#line 103
    tmp___33 = 1;
  } else {
#line 103
    tmp___33 = 0;
  }
#line 103
  ______r___6 = tmp___33;
#line 103
  ______f___2042.__annonCompField3.miss_hit[______r___6] = ______f___2042.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 103
  if (______r___6) {
#line 104
    ______r___1 = ! (! (filep->f_flags & 2048U));
#line 104
    ______f___2037.__annonCompField3.miss_hit[______r___1] = ______f___2037.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 104
    if (______r___1) {
#line 105
      return (-11);
    } else {

    }
#line 106
    __ret = 0;
#line 106
    if (dev->work) {
#line 106
      tmp___20 = 0;
    } else {
#line 106
      tmp___19 = list_empty(& dev->expired);
#line 106
      if (tmp___19) {
#line 106
        tmp___20 = 1;
      } else {
#line 106
        tmp___20 = 0;
      }
    }
#line 106
    ______r___4 = tmp___20;
#line 106
    ______f___2040.__annonCompField3.miss_hit[______r___4] = ______f___2040.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 106
    if (______r___4) {
#line 106
      while (1) {
#line 106
        tmp = get_current();
#line 106
        __wait.flags = 0U;
#line 106
        __wait.private = tmp;
#line 106
        __wait.func = & autoremove_wake_function;
#line 106
        __wait.task_list.next = & __wait.task_list;
#line 106
        __wait.task_list.prev = & __wait.task_list;
#line 106
        while (1) {
#line 106
          prepare_to_wait(& dev->wait, & __wait, 1);
#line 106
          if (dev->work) {
#line 106
            tmp___5 = 1;
          } else {
#line 106
            tmp___4 = list_empty(& dev->expired);
#line 106
            if (tmp___4) {
#line 106
              tmp___5 = 0;
            } else {
#line 106
              tmp___5 = 1;
            }
          }
#line 106
          ______r___2 = tmp___5;
#line 106
          ______f___2038.__annonCompField3.miss_hit[______r___2] = ______f___2038.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 106
          if (______r___2) {
#line 106
            break;
          } else {

          }
#line 106
          tmp___12 = get_current();
#line 106
          tmp___13 = signal_pending___0(tmp___12);
#line 106
          if (tmp___13) {
#line 106
            tmp___14 = 0;
          } else {
#line 106
            tmp___14 = 1;
          }
#line 106
          ______r___3 = tmp___14;
#line 106
          ______f___2039.__annonCompField3.miss_hit[______r___3] = ______f___2039.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 106
          if (______r___3) {
#line 106
            schedule();
#line 106
            goto __Cont;
          } else {

          }
#line 106
          __ret = -512;
#line 106
          break;
          __Cont: /* CIL Label */ ;
        }
#line 106
        finish_wait(& dev->wait, & __wait);
#line 106
        break;
      }
    } else {

    }
#line 108
    tmp___26 = get_current();
#line 108
    tmp___27 = signal_pending___0(tmp___26);
#line 108
    if (tmp___27) {
#line 108
      tmp___28 = 1;
    } else {
#line 108
      tmp___28 = 0;
    }
#line 108
    ______r___5 = tmp___28;
#line 108
    ______f___2041.__annonCompField3.miss_hit[______r___5] = ______f___2041.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 108
    if (______r___5) {
#line 109
      return (-512);
    } else {

    }
  } else {

  }
#line 111
  ______r___7 = ! (! (count < sizeof(int )));
#line 111
  ______f___2043.__annonCompField3.miss_hit[______r___7] = ______f___2043.__annonCompField3.miss_hit[______r___7] + 1UL;
#line 111
  if (______r___7) {
#line 112
    return (-28);
  } else {

  }
#line 113
  ______r___8 = ! (! dev->work);
#line 113
  ______f___2044.__annonCompField3.miss_hit[______r___8] = ______f___2044.__annonCompField3.miss_hit[______r___8] + 1UL;
#line 113
  if (______r___8) {
#line 114
    dev->work = 0;
  } else {

  }
#line 115
  tmp___41 = list_empty(& dev->expired);
#line 115
  if (tmp___41) {
#line 115
    tmp___42 = 0;
  } else {
#line 115
    tmp___42 = 1;
  }
#line 115
  ______r___10 = tmp___42;
#line 115
  ______f___2046.__annonCompField3.miss_hit[______r___10] = ______f___2046.__annonCompField3.miss_hit[______r___10] + 1UL;
#line 115
  if (______r___10) {
#line 116
    while (1) {
#line 116
      flags = _spin_lock_irqsave(& dev->lock);
#line 116
      break;
    }
#line 117
    timer = (struct mISDNtimer *)dev->expired.next;
#line 118
    list_del(& timer->list);
#line 119
    while (1) {
#line 119
      _spin_unlock_irqrestore(& dev->lock, flags);
#line 119
      break;
    }
#line 120
    if (0) {
#line 120
      might_fault();
#line 120
      __pu_val___0 = timer->id;
#line 120
      switch (sizeof(*((int *)buf))) {
      case 1UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "1": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 2UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "2": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 4UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "4": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 8UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "8": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)buf): "ebx");
#line 120
      break;
      default: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "X": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)buf): "ebx");
#line 120
      break;
      }
#line 120
      if (__ret_pu___0) {
#line 120
        tmp___34 = 1;
      } else {
#line 120
        tmp___34 = 0;
      }
#line 120
      tmp___36 = tmp___34;
    } else {
#line 120
      might_fault();
#line 120
      __pu_val___1 = timer->id;
#line 120
      switch (sizeof(*((int *)buf))) {
      case 1UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "1": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 2UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "2": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 4UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "4": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)buf): "ebx");
#line 120
      break;
      case 8UL: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "8": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)buf): "ebx");
#line 120
      break;
      default: 
#line 120
      __asm__  volatile   ("call __put_user_"
                           "X": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)buf): "ebx");
#line 120
      break;
      }
#line 120
      if (__ret_pu___1) {
#line 120
        tmp___35 = 1;
      } else {
#line 120
        tmp___35 = 0;
      }
#line 120
      ______r___9 = tmp___35;
#line 120
      ______f___2045.__annonCompField3.miss_hit[______r___9] = ______f___2045.__annonCompField3.miss_hit[______r___9] + 1UL;
#line 120
      tmp___36 = ______r___9;
    }
#line 120
    if (tmp___36) {
#line 121
      ret = -14;
    } else {
#line 123
      ret = sizeof(int );
    }
#line 124
    kfree(timer);
  } else {

  }
#line 126
  return (ret);
}
}
#line 135
static unsigned int mISDN_poll(struct file *filep , poll_table *wait ) ;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2047  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_poll",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    135, {{0UL, 0UL}}};
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2048  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_poll",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    140, {{0UL, 0UL}}};
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2049  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_poll",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    142, {{0UL, 0UL}}};
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2050  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_poll",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    137, {{0UL, 0UL}}};
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static unsigned int mISDN_poll(struct file *filep , poll_table *wait ) 
{ 
  struct mISDNtimerdev *dev ;
  unsigned int mask ;
  int ______r ;
  int ______r___0 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___1 ;
  int ______r___2 ;

  {
#line 132
  dev = filep->private_data;
#line 133
  mask = 8;
#line 135
  ______r = ! (! (*debug___6 & 16777216U));
#line 135
  ______f___2047.__annonCompField3.miss_hit[______r] = ______f___2047.__annonCompField3.miss_hit[______r] + 1UL;
#line 135
  if (______r) {
#line 136
    printk("<7>%s(%p, %p)\n", "mISDN_poll", filep, wait);
  } else {

  }
#line 137
  ______r___2 = ! (! dev);
#line 137
  ______f___2050.__annonCompField3.miss_hit[______r___2] = ______f___2050.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 137
  if (______r___2) {
#line 138
    poll_wait(filep, & dev->wait, wait);
#line 139
    mask = 0;
#line 140
    if (dev->work) {
#line 140
      tmp___4 = 1;
    } else {
#line 140
      tmp___3 = list_empty(& dev->expired);
#line 140
      if (tmp___3) {
#line 140
        tmp___4 = 0;
      } else {
#line 140
        tmp___4 = 1;
      }
    }
#line 140
    ______r___0 = tmp___4;
#line 140
    ______f___2048.__annonCompField3.miss_hit[______r___0] = ______f___2048.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 140
    if (______r___0) {
#line 141
      mask = mask | (unsigned int )(1 | 64);
    } else {

    }
#line 142
    ______r___1 = ! (! (*debug___6 & 16777216U));
#line 142
    ______f___2049.__annonCompField3.miss_hit[______r___1] = ______f___2049.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 142
    if (______r___1) {
#line 143
      tmp___5 = list_empty(& dev->expired);
#line 143
      printk("<7>%s work(%d) empty(%d)\n", "mISDN_poll", dev->work, tmp___5);
    } else {

    }
  } else {

  }
#line 146
  return (mask);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static void dev_expire_timer(unsigned long data ) 
{ 
  struct mISDNtimer *timer ;
  u_long flags ;

  {
#line 152
  timer = (void *)data;
#line 155
  while (1) {
#line 155
    flags = _spin_lock_irqsave(& (timer->dev)->lock);
#line 155
    break;
  }
#line 156
  list_move_tail(& timer->list, & (timer->dev)->expired);
#line 157
  while (1) {
#line 157
    _spin_unlock_irqrestore(& (timer->dev)->lock, flags);
#line 157
    break;
  }
#line 158
  __wake_up(& (timer->dev)->wait, 1, 1, (void *)0);
#line 159
  return;
}
}
#line 174
static int misdn_add_timer(struct mISDNtimerdev *dev , int timeout ) ;
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2051  __attribute__((__section__("_ftrace_branch")))  =    {"misdn_add_timer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    174, {{0UL, 0UL}}};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2052  __attribute__((__section__("_ftrace_branch")))  =    {"misdn_add_timer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    178, {{0UL, 0UL}}};
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct lock_class_key __key___14  ;
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2053  __attribute__((__section__("_ftrace_branch")))  =    {"misdn_add_timer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    168, {{0UL, 0UL}}};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int misdn_add_timer(struct mISDNtimerdev *dev , int timeout ) 
{ 
  int id ;
  u_long flags ;
  struct mISDNtimer *timer ;
  void *tmp ;
  int ______r ;
  int tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;

  {
#line 168
  ______r___1 = ! (! (! timeout));
#line 168
  ______f___2053.__annonCompField3.miss_hit[______r___1] = ______f___2053.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 168
  if (______r___1) {
#line 169
    dev->work = 1;
#line 170
    __wake_up(& dev->wait, 1, 1, (void *)0);
#line 171
    id = 0;
  } else {
#line 173
    tmp = kzalloc___5(sizeof(struct mISDNtimer ), (16U | 64U) | 128U);
#line 173
    timer = tmp;
#line 174
    ______r = ! (! (! timer));
#line 174
    ______f___2051.__annonCompField3.miss_hit[______r] = ______f___2051.__annonCompField3.miss_hit[______r] + 1UL;
#line 174
    if (______r) {
#line 175
      return (-12);
    } else {

    }
#line 176
    while (1) {
#line 176
      flags = _spin_lock_irqsave(& dev->lock);
#line 176
      break;
    }
#line 177
    tmp___0 = dev->next_id;
#line 177
    dev->next_id = dev->next_id + 1;
#line 177
    timer->id = tmp___0;
#line 178
    ______r___0 = ! (! (dev->next_id < 0));
#line 178
    ______f___2052.__annonCompField3.miss_hit[______r___0] = ______f___2052.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 178
    if (______r___0) {
#line 179
      dev->next_id = 1;
    } else {

    }
#line 180
    list_add_tail(& timer->list, & dev->pending);
#line 181
    while (1) {
#line 181
      _spin_unlock_irqrestore(& dev->lock, flags);
#line 181
      break;
    }
#line 182
    timer->dev = dev;
#line 183
    timer->tl.data = (long )timer;
#line 184
    timer->tl.function = & dev_expire_timer;
#line 185
    while (1) {
#line 185
      init_timer_key(& timer->tl, "&timer->tl", & __key___14);
#line 185
      break;
    }
#line 186
    timer->tl.expires = jiffies + (unsigned long volatile   )(((u_long )250 * (u_long )timeout) / (u_long )1000);
#line 187
    add_timer(& timer->tl);
#line 188
    id = timer->id;
  }
#line 190
  return (id);
}
}
#line 202
static int misdn_del_timer(struct mISDNtimerdev *dev , int id ) ;
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2054  __attribute__((__section__("_ftrace_branch")))  =    {"misdn_del_timer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    202, {{0UL, 0UL}}};
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int misdn_del_timer(struct mISDNtimerdev *dev , int id ) 
{ 
  u_long flags ;
  struct mISDNtimer *timer ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int ______r ;

  {
#line 198
  ret = 0;
#line 200
  while (1) {
#line 200
    flags = _spin_lock_irqsave(& dev->lock);
#line 200
    break;
  }
#line 201
  __mptr = dev->pending.next;
#line 201
  timer = (struct mISDNtimer *)((char *)__mptr - (unsigned int )(& ((struct mISDNtimer *)0)->list));
#line 201
  while (1) {
#line 201
    __builtin_prefetch(timer->list.next);
#line 201
    if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {

    } else {
#line 201
      break;
    }
#line 202
    ______r = ! (! (timer->id == id));
#line 202
    ______f___2054.__annonCompField3.miss_hit[______r] = ______f___2054.__annonCompField3.miss_hit[______r] + 1UL;
#line 202
    if (______r) {
#line 203
      list_del_init(& timer->list);
#line 207
      del_timer(& timer->tl);
#line 208
      ret = timer->id;
#line 209
      kfree(timer);
#line 210
      goto unlock;
    } else {

    }
#line 201
    __mptr___0 = timer->list.next;
#line 201
    timer = (struct mISDNtimer *)((char *)__mptr___0 - (unsigned int )(& ((struct mISDNtimer *)0)->list));
  }
  unlock: 
#line 214
  while (1) {
#line 214
    _spin_unlock_irqrestore(& dev->lock, flags);
#line 214
    break;
  }
#line 215
  return (ret);
}
}
#line 226
static int mISDN_ioctl(struct inode *inode , struct file *filep , unsigned int cmd ,
                       unsigned long arg ) ;
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2055  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    226, {{0UL, 0UL}}};
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2056  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    231, {{0UL, 0UL}}};
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2057  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    236, {{0UL, 0UL}}};
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2058  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    239, {{0UL, 0UL}}};
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2059  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    243, {{0UL, 0UL}}};
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2060  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    247, {{0UL, 0UL}}};
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2061  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    251, {{0UL, 0UL}}};
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2062  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_ioctl",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    254, {{0UL, 0UL}}};
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int mISDN_ioctl(struct inode *inode , struct file *filep , unsigned int cmd ,
                       unsigned long arg ) 
{ 
  struct mISDNtimerdev *dev ;
  int id ;
  int tout ;
  int ret ;
  int ______r ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int tmp ;
  int ______r___0 ;
  int __ret_gu___1 ;
  unsigned long __val_gu___1 ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r___1 ;
  int ______r___2 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;
  int tmp___2 ;
  int ______r___3 ;
  int __ret_pu___1 ;
  int __pu_val___1 ;
  int tmp___3 ;
  int tmp___4 ;
  int __ret_gu___4 ;
  unsigned long __val_gu___4 ;
  int tmp___5 ;
  int ______r___4 ;
  int __ret_gu___5 ;
  unsigned long __val_gu___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int ______r___5 ;
  int __ret_pu___4 ;
  int __pu_val___4 ;
  int tmp___8 ;
  int ______r___6 ;
  int __ret_pu___5 ;
  int __pu_val___5 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 222
  dev = filep->private_data;
#line 223
  ret = 0;
#line 226
  ______r = ! (! (*debug___6 & 16777216U));
#line 226
  ______f___2055.__annonCompField3.miss_hit[______r] = ______f___2055.__annonCompField3.miss_hit[______r] + 1UL;
#line 226
  if (______r) {
#line 227
    printk("<7>%s(%p, %x, %lx)\n", "mISDN_ioctl", filep, cmd, arg);
  } else {

  }
#line 229
  switch (cmd) {
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(64 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 231
  if (0) {
#line 231
    might_fault();
#line 231
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 231
    break;
    case 2UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 231
    break;
    case 4UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 231
    break;
    case 8UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 231
    break;
    default: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 231
    break;
    }
#line 231
    tout = (int )__val_gu___0;
#line 231
    if (__ret_gu___0) {
#line 231
      tmp = 1;
    } else {
#line 231
      tmp = 0;
    }
#line 231
    tmp___1 = tmp;
  } else {
#line 231
    might_fault();
#line 231
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 231
    break;
    case 2UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 231
    break;
    case 4UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 231
    break;
    case 8UL: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 231
    break;
    default: 
#line 231
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int *)arg));
#line 231
    break;
    }
#line 231
    tout = (int )__val_gu___1;
#line 231
    if (__ret_gu___1) {
#line 231
      tmp___0 = 1;
    } else {
#line 231
      tmp___0 = 0;
    }
#line 231
    ______r___0 = tmp___0;
#line 231
    ______f___2056.__annonCompField3.miss_hit[______r___0] = ______f___2056.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 231
    tmp___1 = ______r___0;
  }
#line 231
  if (tmp___1) {
#line 232
    ret = -14;
#line 233
    break;
  } else {

  }
#line 235
  id = misdn_add_timer(dev, tout);
#line 236
  ______r___1 = ! (! (*debug___6 & 16777216U));
#line 236
  ______f___2057.__annonCompField3.miss_hit[______r___1] = ______f___2057.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 236
  if (______r___1) {
#line 237
    printk("<7>%s add %d id %d\n", "mISDN_ioctl", tout, id);
  } else {

  }
#line 239
  ______r___2 = ! (! (id < 0));
#line 239
  ______f___2058.__annonCompField3.miss_hit[______r___2] = ______f___2058.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 239
  if (______r___2) {
#line 240
    ret = id;
#line 241
    break;
  } else {

  }
#line 243
  if (0) {
#line 243
    might_fault();
#line 243
    __pu_val___0 = id;
#line 243
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 2UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 4UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 8UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 243
    break;
    default: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___0): "0" (__pu_val___0), "c" ((int *)arg): "ebx");
#line 243
    break;
    }
#line 243
    if (__ret_pu___0) {
#line 243
      tmp___2 = 1;
    } else {
#line 243
      tmp___2 = 0;
    }
#line 243
    tmp___4 = tmp___2;
  } else {
#line 243
    might_fault();
#line 243
    __pu_val___1 = id;
#line 243
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 2UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 4UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 243
    break;
    case 8UL: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 243
    break;
    default: 
#line 243
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___1): "0" (__pu_val___1), "c" ((int *)arg): "ebx");
#line 243
    break;
    }
#line 243
    if (__ret_pu___1) {
#line 243
      tmp___3 = 1;
    } else {
#line 243
      tmp___3 = 0;
    }
#line 243
    ______r___3 = tmp___3;
#line 243
    ______f___2059.__annonCompField3.miss_hit[______r___3] = ______f___2059.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 243
    tmp___4 = ______r___3;
  }
#line 243
  if (tmp___4) {
#line 244
    ret = -14;
  } else {

  }
#line 245
  break;
  case (unsigned int )((unsigned long )(((2U << (((0 + 8) + 8) + 14)) | (unsigned int )('I' << (0 + 8))) | (unsigned int )(65 << 0)) | ((sizeof(int ) == sizeof(int [1]) && sizeof(int ) < (unsigned long )(1 << 14) ? sizeof(int ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8))): 
#line 247
  if (0) {
#line 247
    might_fault();
#line 247
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)arg));
#line 247
    break;
    case 2UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)arg));
#line 247
    break;
    case 4UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)arg));
#line 247
    break;
    case 8UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)arg));
#line 247
    break;
    default: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___4), "=d" (__val_gu___4): "0" ((int *)arg));
#line 247
    break;
    }
#line 247
    id = (int )__val_gu___4;
#line 247
    if (__ret_gu___4) {
#line 247
      tmp___5 = 1;
    } else {
#line 247
      tmp___5 = 0;
    }
#line 247
    tmp___7 = tmp___5;
  } else {
#line 247
    might_fault();
#line 247
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "1": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)arg));
#line 247
    break;
    case 2UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "2": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)arg));
#line 247
    break;
    case 4UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "4": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)arg));
#line 247
    break;
    case 8UL: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "8": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)arg));
#line 247
    break;
    default: 
#line 247
    __asm__  volatile   ("call __get_user_"
                         "X": "=a" (__ret_gu___5), "=d" (__val_gu___5): "0" ((int *)arg));
#line 247
    break;
    }
#line 247
    id = (int )__val_gu___5;
#line 247
    if (__ret_gu___5) {
#line 247
      tmp___6 = 1;
    } else {
#line 247
      tmp___6 = 0;
    }
#line 247
    ______r___4 = tmp___6;
#line 247
    ______f___2060.__annonCompField3.miss_hit[______r___4] = ______f___2060.__annonCompField3.miss_hit[______r___4] + 1UL;
#line 247
    tmp___7 = ______r___4;
  }
#line 247
  if (tmp___7) {
#line 248
    ret = -14;
#line 249
    break;
  } else {

  }
#line 251
  ______r___5 = ! (! (*debug___6 & 16777216U));
#line 251
  ______f___2061.__annonCompField3.miss_hit[______r___5] = ______f___2061.__annonCompField3.miss_hit[______r___5] + 1UL;
#line 251
  if (______r___5) {
#line 252
    printk("<7>%s del id %d\n", "mISDN_ioctl", id);
  } else {

  }
#line 253
  id = misdn_del_timer(dev, id);
#line 254
  if (0) {
#line 254
    might_fault();
#line 254
    __pu_val___4 = id;
#line 254
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___4): "0" (__pu_val___4), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 2UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___4): "0" (__pu_val___4), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 4UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___4): "0" (__pu_val___4), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 8UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___4): "0" (__pu_val___4), "c" ((int *)arg): "ebx");
#line 254
    break;
    default: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___4): "0" (__pu_val___4), "c" ((int *)arg): "ebx");
#line 254
    break;
    }
#line 254
    if (__ret_pu___4) {
#line 254
      tmp___8 = 1;
    } else {
#line 254
      tmp___8 = 0;
    }
#line 254
    tmp___10 = tmp___8;
  } else {
#line 254
    might_fault();
#line 254
    __pu_val___5 = id;
#line 254
    switch (sizeof(*((int *)arg))) {
    case 1UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "1": "=a" (__ret_pu___5): "0" (__pu_val___5), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 2UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "2": "=a" (__ret_pu___5): "0" (__pu_val___5), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 4UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "4": "=a" (__ret_pu___5): "0" (__pu_val___5), "c" ((int *)arg): "ebx");
#line 254
    break;
    case 8UL: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "8": "=a" (__ret_pu___5): "0" (__pu_val___5), "c" ((int *)arg): "ebx");
#line 254
    break;
    default: 
#line 254
    __asm__  volatile   ("call __put_user_"
                         "X": "=a" (__ret_pu___5): "0" (__pu_val___5), "c" ((int *)arg): "ebx");
#line 254
    break;
    }
#line 254
    if (__ret_pu___5) {
#line 254
      tmp___9 = 1;
    } else {
#line 254
      tmp___9 = 0;
    }
#line 254
    ______r___6 = tmp___9;
#line 254
    ______f___2062.__annonCompField3.miss_hit[______r___6] = ______f___2062.__annonCompField3.miss_hit[______r___6] + 1UL;
#line 254
    tmp___10 = ______r___6;
  }
#line 254
  if (tmp___10) {
#line 255
    ret = -14;
  } else {

  }
#line 256
  break;
  default: 
#line 258
  ret = -22;
  }
#line 260
  return (ret);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct file_operations mISDN_fops  = 
#line 263
     {0, 0, & mISDN_read, 0, 0, 0, 0, & mISDN_poll, & mISDN_ioctl, 0, 0, 0, & mISDN_open,
    0, & mISDN_close, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct miscdevice mISDNtimer  =    {255, "mISDNtimer", & mISDN_fops, {0, 0}, 0, 0};
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2063  __attribute__((__section__("_ftrace_branch")))  =    {"mISDN_inittimer",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    284, {{0UL, 0UL}}};
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
int mISDN_inittimer(u_int *deb ) 
{ 
  int err ;
  int ______r ;

  {
#line 282
  debug___6 = deb;
#line 283
  err = misc_register(& mISDNtimer);
#line 284
  ______r = ! (! err);
#line 284
  ______f___2063.__annonCompField3.miss_hit[______r] = ______f___2063.__annonCompField3.miss_hit[______r] + 1UL;
#line 284
  if (______r) {
#line 285
    printk("<4>mISDN: Could not register timer device\n");
  } else {

  }
#line 286
  return (err);
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
void mISDN_timer_cleanup(void) 
{ 


  {
#line 291
  misc_deregister(& mISDNtimer);
#line 292
  return;
}
}
#line 313
extern void ldv_check_return_value(int res ) ;
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static ssize_t res_mISDN_read_2  ;
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static int res_mISDN_open_0  ;
#line 414
void ldv_main9_sequence_infinite_withcheck_stateful(void) ;
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2064  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main9_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    414, {{0UL, 0UL}}};
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2065  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main9_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    406, {{0UL, 0UL}}};
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2066  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main9_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    434, {{0UL, 0UL}}};
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2067  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main9_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    426, {{0UL, 0UL}}};
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___2068  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_main9_sequence_infinite_withcheck_stateful",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c",
    446, {{0UL, 0UL}}};
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/68_1/drivers/isdn/mISDN/timerdev.c"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct file *var_group1 ;
  char *var_mISDN_read_2_p1 ;
  size_t var_mISDN_read_2_p2 ;
  loff_t *var_mISDN_read_2_p3 ;
  poll_table *var_mISDN_poll_3_p1 ;
  struct inode *var_group2 ;
  unsigned int var_mISDN_ioctl_7_p2 ;
  unsigned long var_mISDN_ioctl_7_p3 ;
  unsigned long var_dev_expire_timer_4_p0 ;
  int ldv_s_mISDN_fops_file_operations ;
  int tmp ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___0 ;

  {
#line 381
  LDV_IN_INTERRUPT = 1;
#line 390
  ldv_initialize();
#line 391
  ldv_s_mISDN_fops_file_operations = 0;
#line 397
  while (1) {
#line 397
    tmp___0 = nondet_int();
#line 397
    if (tmp___0 || ! (ldv_s_mISDN_fops_file_operations == 0)) {

    } else {
#line 397
      break;
    }
#line 401
    tmp = nondet_int();
#line 401
    switch (tmp) {
    case 0: 
#line 406
    ______r___0 = ! (! (ldv_s_mISDN_fops_file_operations == 0));
#line 406
    ______f___2065.__annonCompField3.miss_hit[______r___0] = ______f___2065.__annonCompField3.miss_hit[______r___0] + 1UL;
#line 406
    if (______r___0) {
#line 411
      ldv_handler_precall();
#line 412
      res_mISDN_open_0 = mISDN_open(var_group2, var_group1);
#line 413
      ldv_check_return_value(res_mISDN_open_0);
#line 414
      ______r = ! (! res_mISDN_open_0);
#line 414
      ______f___2064.__annonCompField3.miss_hit[______r] = ______f___2064.__annonCompField3.miss_hit[______r] + 1UL;
#line 414
      if (______r) {
#line 415
        goto ldv_module_exit;
      } else {

      }
#line 416
      ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
    } else {

    }
#line 422
    break;
    case 1: 
#line 426
    ______r___2 = ! (! (ldv_s_mISDN_fops_file_operations == 1));
#line 426
    ______f___2067.__annonCompField3.miss_hit[______r___2] = ______f___2067.__annonCompField3.miss_hit[______r___2] + 1UL;
#line 426
    if (______r___2) {
#line 431
      ldv_handler_precall();
#line 432
      res_mISDN_read_2 = mISDN_read(var_group1, var_mISDN_read_2_p1, var_mISDN_read_2_p2,
                                    var_mISDN_read_2_p3);
#line 433
      ldv_check_return_value(res_mISDN_read_2);
#line 434
      ______r___1 = ! (! (res_mISDN_read_2 < (ssize_t )0));
#line 434
      ______f___2066.__annonCompField3.miss_hit[______r___1] = ______f___2066.__annonCompField3.miss_hit[______r___1] + 1UL;
#line 434
      if (______r___1) {
#line 435
        goto ldv_module_exit;
      } else {

      }
#line 436
      ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
    } else {

    }
#line 442
    break;
    case 2: 
#line 446
    ______r___3 = ! (! (ldv_s_mISDN_fops_file_operations == 2));
#line 446
    ______f___2068.__annonCompField3.miss_hit[______r___3] = ______f___2068.__annonCompField3.miss_hit[______r___3] + 1UL;
#line 446
    if (______r___3) {
#line 451
      ldv_handler_precall();
#line 452
      mISDN_close(var_group2, var_group1);
#line 453
      ldv_s_mISDN_fops_file_operations = 0;
    } else {

    }
#line 459
    break;
    case 3: 
#line 468
    ldv_handler_precall();
#line 469
    mISDN_poll(var_group1, var_mISDN_poll_3_p1);
#line 476
    break;
    case 4: 
#line 485
    ldv_handler_precall();
#line 486
    mISDN_ioctl(var_group2, var_group1, var_mISDN_ioctl_7_p2, var_mISDN_ioctl_7_p3);
#line 493
    break;
    case 5: 
#line 502
    ldv_handler_precall();
#line 503
    dev_expire_timer(var_dev_expire_timer_4_p0);
#line 510
    break;
    default: 
#line 511
    break;
    }
  }
  ldv_module_exit: 
#line 520
  ldv_check_final_state();
#line 523
  return;
}
}
#line 1299 "include/linux/usb.h"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1300
void usb_free_urb(struct urb *urb ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 47
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) ;
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___810  __attribute__((__section__("_ftrace_branch")))  =    {"usb_alloc_coherent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    47, {{0UL, 0UL}}};
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;
  int ______r ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    ______r = ! (! (! arbitrary_memory));
#line 47
    ______f___810.__annonCompField3.miss_hit[______r] = ______f___810.__annonCompField3.miss_hit[______r] + 1UL;
#line 47
    if (______r) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 53
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___811  __attribute__((__section__("_ftrace_branch")))  =    {"usb_free_coherent",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    53, {{0UL, 0UL}}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 
  int ______r ;

  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    ______r = ! (! addr);
#line 53
    ______f___811.__annonCompField3.miss_hit[______r] = ______f___811.__annonCompField3.miss_hit[______r] + 1UL;
#line 53
    if (______r) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___812  __attribute__((__section__("_ftrace_branch")))  =    {"usb_alloc_urb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    58, {{0UL, 0UL}}};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;
  int ______r ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    ______r = ! (! (! arbitrary_memory));
#line 58
    ______f___812.__annonCompField3.miss_hit[______r] = ______f___812.__annonCompField3.miss_hit[______r] + 1UL;
#line 58
    if (______r) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___813  __attribute__((__section__("_ftrace_branch")))  =    {"usb_free_urb",
    "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    63, {{0UL, 0UL}}};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 
  int ______r ;

  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    ______r = ! (! urb);
#line 63
    ______f___813.__annonCompField3.miss_hit[______r] = ______f___813.__annonCompField3.miss_hit[______r] + 1UL;
#line 63
    if (______r) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
