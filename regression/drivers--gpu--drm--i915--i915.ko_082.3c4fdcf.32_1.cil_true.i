/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 22 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 120 "include/linux/types.h"
typedef __u32 uint32_t;
#line 123 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 193 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 196 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 201 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 99 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 191
struct pid;
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgd_t_7 {
   pgdval_t pgd ;
};
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgd_t_7 pgd_t;
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgprot_t_8 {
   pgprotval_t pgprot ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgprot_t_8 pgprot_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_11 {
   struct __anonstruct____missing_field_name_12 __annonCompField2 ;
   struct __anonstruct____missing_field_name_13 __annonCompField3 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_11 __annonCompField4 ;
} __attribute__((__packed__)) ;
#line 144 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((8UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct thread_struct;
#line 326
struct raw_spinlock;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 88
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_19 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_20 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_18 {
   struct __anonstruct____missing_field_name_19 __annonCompField5 ;
   struct __anonstruct____missing_field_name_20 __annonCompField6 ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_21 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_18 __annonCompField7 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_21 __annonCompField8 ;
} __attribute__((__aligned__(16))) ;
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
};
#line 589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_22 {
   unsigned long seg ;
};
#line 589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_22 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_24 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_25 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_26 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_27 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_23 {
   struct __anonstruct____missing_field_name_24 __annonCompField9 ;
   struct __anonstruct_futex_25 futex ;
   struct __anonstruct_nanosleep_26 nanosleep ;
   struct __anonstruct_poll_27 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_23 __annonCompField10 ;
};
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_28 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_28 raw_rwlock_t;
#line 350 "include/linux/lockdep.h"
struct lock_class_key {

};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_29 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_29 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_30 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic_t_31 {
   int counter ;
};
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_31 atomic_t;
#line 196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_32 {
   long counter ;
};
#line 196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_32 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 14 "include/linux/time.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[(((unsigned long )(1 << 6) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
};
#line 67 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
};
#line 745 "include/linux/mmzone.h"
struct file;
#line 37 "include/linux/pm.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 145 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
};
#line 203 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 334
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 344 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 40 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 65 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute *attr , struct vm_area_struct *vma ) ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
#line 104 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 110 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 117 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 151 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 39
struct kparam_string;
#line 39
struct kparam_array;
#line 39 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_93 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 39 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_93 __annonCompField11 ;
};
#line 52 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 58 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 18 "include/linux/marker.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 35 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 9 "include/linux/timer.h"
struct tvec_base;
#line 11 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 181
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 35 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 70 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 6] ;
   struct kmem_cache_cpu *cpu_slab[8] ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 50 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(8))) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_94 {
   atomic_long_t a ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_94 local_t;
#line 5 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/module.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 71
struct exception_table_entry;
#line 222 "include/linux/module.h"
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 227
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 234
struct module_sect_attrs;
#line 234
struct module_notes_attrs;
#line 234 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8] ;
};
#line 579
struct device_driver;
#line 36 "include/linux/miscdevice.h"
struct file_operations;
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 78
struct dcookie_struct;
#line 82
struct inode;
#line 82 "include/linux/dcache.h"
union __anonunion_d_u_95 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 82
struct dentry_operations;
#line 82
struct super_block;
#line 82 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_95 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
#line 129 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 95 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 95 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 14 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 309 "include/linux/fs.h"
struct export_operations;
#line 311
struct iovec;
#line 313
struct kiocb;
#line 314
struct pipe_inode_info;
#line 315
struct poll_table_struct;
#line 316
struct kstatfs;
#line 361 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 98 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 21 "include/linux/dqblk_v1.h"
struct v1_mem_dqinfo {

};
#line 20 "include/linux/dqblk_v2.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 203
struct quota_format_type;
#line 205 "include/linux/quota.h"
union __anonunion_u_99 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 205 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_99 u ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 275 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 286 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 302 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 316 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 330 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 422 "include/linux/fs.h"
struct address_space;
#line 423
struct writeback_control;
#line 466 "include/linux/fs.h"
union __anonunion_arg_101 {
   char *buf ;
   void *data ;
};
#line 466 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_100 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_101 arg ;
   int error ;
};
#line 466 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_100 read_descriptor_t;
#line 479 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 528
struct backing_dev_info;
#line 529 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 553
struct hd_struct;
#line 553
struct gendisk;
#line 553 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 623
struct inode_operations;
#line 623
struct file_lock;
#line 623
struct cdev;
#line 623 "include/linux/fs.h"
union __anonunion____missing_field_name_102 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 623
struct dnotify_struct;
#line 623 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_102 __annonCompField12 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 778 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 789 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 812 "include/linux/fs.h"
union __anonunion_f_u_103 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 812 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_103 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 931
struct files_struct;
#line 931 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 933 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 938 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 960 "include/linux/fs.h"
struct fasync_struct;
#line 960 "include/linux/fs.h"
struct __anonstruct_afs_105 {
   struct list_head link ;
   int state ;
};
#line 960 "include/linux/fs.h"
union __anonunion_fl_u_104 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_105 afs ;
};
#line 960 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_104 fl_u ;
};
#line 1071 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1106
struct file_system_type;
#line 1106
struct super_operations;
#line 1106
struct xattr_handler;
#line 1106
struct mtd_info;
#line 1106 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1229 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1281 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1311 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1340
struct seq_file;
#line 1354 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1536 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1915
struct bio;
#line 49 "include/linux/proc_fs.h"
typedef int read_proc_t(char *page , char **start , off_t off , int count , int *eof ,
                        void *data );
#line 51 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file *file , char const   *buffer , unsigned long count ,
                         void *data );
#line 54 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 17 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 18 "include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 26
struct pci_dev;
#line 20 "include/linux/klist.h"
struct klist_node;
#line 21 "include/linux/klist.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 40 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_mapping_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 32 "include/linux/device.h"
struct driver_private;
#line 33
struct class;
#line 34
struct class_private;
#line 35
struct bus_type;
#line 36
struct bus_type_private;
#line 38 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 51
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 205
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 285 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
};
#line 298 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 358 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 367
struct dma_coherent_mem;
#line 367 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 60 "include/linux/pci.h"
struct hotplug_slot;
#line 60 "include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 87 "include/linux/pci.h"
typedef int pci_power_t;
#line 101 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 103
enum pci_channel_state {
    pci_channel_io_normal = (pci_channel_state_t )1,
    pci_channel_io_frozen = (pci_channel_state_t )2,
    pci_channel_io_perm_failure = (pci_channel_state_t )3
} ;
#line 127 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 137 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 149
struct pcie_link_state;
#line 150
struct pci_vpd;
#line 155
struct pci_driver;
#line 155 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12] ;
   unsigned int transparent : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_added : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int block_ucfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12] ;
   struct bin_attribute *res_attr_wc[12] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 289
struct pci_ops;
#line 289 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 335 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus *bus , unsigned int devfn , int where , int size , u32 *val ) ;
   int (*write)(struct pci_bus *bus , unsigned int devfn , int where , int size ,
                u32 val ) ;
};
#line 354 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 366 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 386 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *dev , enum pci_channel_state error ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *dev ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *dev ) ;
   void (*resume)(struct pci_dev *dev ) ;
};
#line 407 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev *dev , struct pci_device_id  const  *id ) ;
   void (*remove)(struct pci_dev *dev ) ;
   int (*suspend)(struct pci_dev *dev , pm_message_t state ) ;
   int (*suspend_late)(struct pci_dev *dev , pm_message_t state ) ;
   int (*resume_early)(struct pci_dev *dev ) ;
   int (*resume)(struct pci_dev *dev ) ;
   void (*shutdown)(struct pci_dev *dev ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/scatterlist.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_111 {
   u16 inuse ;
   u16 objects ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_110 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_111 __annonCompField13 ;
};
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_113 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_112 {
   struct __anonstruct____missing_field_name_113 __annonCompField15 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_114 {
   unsigned long index ;
   void *freelist ;
};
#line 39 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_110 __annonCompField14 ;
   union __anonunion____missing_field_name_112 __annonCompField16 ;
   union __anonunion____missing_field_name_114 __annonCompField17 ;
   struct list_head lru ;
};
#line 105 "include/linux/mm_types.h"
struct __anonstruct_vm_set_116 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 105 "include/linux/mm_types.h"
union __anonunion_shared_115 {
   struct __anonstruct_vm_set_116 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 105
struct anon_vma;
#line 105
struct vm_operations_struct;
#line 105
struct mempolicy;
#line 105 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_115 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 162 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 167 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 173
struct kioctx;
#line 173
struct mmu_notifier_mm;
#line 173 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 18) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 20 "include/linux/mm.h"
struct user_struct;
#line 158 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 175 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *area ) ;
   void (*close)(struct vm_area_struct *area ) ;
   int (*fault)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*page_mkwrite)(struct vm_area_struct *vma , struct page *page ) ;
   int (*access)(struct vm_area_struct *vma , unsigned long addr , void *buf , int len ,
                 int write ) ;
   int (*set_policy)(struct vm_area_struct *vma , struct mempolicy *new ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *vma , unsigned long addr ) ;
   int (*migrate)(struct vm_area_struct *vma , nodemask_t const   *from , nodemask_t const   *to ,
                  unsigned long flags ) ;
};
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
struct dma_mapping_ops {
   int (*mapping_error)(struct device *dev , dma_addr_t dma_addr ) ;
   void *(*alloc_coherent)(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                           gfp_t gfp ) ;
   void (*free_coherent)(struct device *dev , size_t size , void *vaddr , dma_addr_t dma_handle ) ;
   dma_addr_t (*map_single)(struct device *hwdev , phys_addr_t ptr , size_t size ,
                            int direction ) ;
   void (*unmap_single)(struct device *dev , dma_addr_t addr , size_t size , int direction ) ;
   void (*sync_single_for_cpu)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                               int direction ) ;
   void (*sync_single_for_device)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                                  int direction ) ;
   void (*sync_single_range_for_cpu)(struct device *hwdev , dma_addr_t dma_handle ,
                                     unsigned long offset , size_t size , int direction ) ;
   void (*sync_single_range_for_device)(struct device *hwdev , dma_addr_t dma_handle ,
                                        unsigned long offset , size_t size , int direction ) ;
   void (*sync_sg_for_cpu)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                           int direction ) ;
   void (*sync_sg_for_device)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                              int direction ) ;
   int (*map_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   void (*unmap_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   int (*dma_supported)(struct device *hwdev , u64 mask ) ;
   int is_phys ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_118 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_118 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 172 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_120 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_121 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_122 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_123 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_124 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_125 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_119 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_120 _kill ;
   struct __anonstruct__timer_121 _timer ;
   struct __anonstruct__rt_122 _rt ;
   struct __anonstruct__sigchld_123 _sigchld ;
   struct __anonstruct__sigfault_124 _sigfault ;
   struct __anonstruct__sigpoll_125 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_119 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_128 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_128 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 26 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 27
struct hrtimer_cpu_base;
#line 40
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 59
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE_PERCPU = 1,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 2
} ;
#line 124 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   enum hrtimer_cb_mode cb_mode ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 164 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 196 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 17 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 140
struct cfs_rq;
#line 141
struct task_group;
#line 335
struct nsproxy;
#line 57 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 86 "include/linux/aio.h"
union __anonunion_ki_obj_130 {
   void *user ;
   struct task_struct *tsk ;
};
#line 86 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_130 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 166 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 422 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 429 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 448 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 466 "include/linux/sched.h"
struct thread_group_cputime {
   struct task_cputime *totals ;
};
#line 477 "include/linux/sched.h"
union __anonunion____missing_field_name_131 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 477 "include/linux/sched.h"
union __anonunion____missing_field_name_132 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 477
struct tty_struct;
#line 477
struct taskstats;
#line 477
struct tty_audit_buf;
#line 477 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputime cputime ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   union __anonunion____missing_field_name_131 __annonCompField18 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_132 __annonCompField19 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   struct rlimit rlim[16] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 624 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 669
struct reclaim_state;
#line 672 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 689 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 734
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 778 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 795
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 813 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 890
struct io_context;
#line 893 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
#line 930
struct audit_context;
#line 935
struct rq;
#line 938 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 988 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1002 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1059
struct rt_rq;
#line 1059 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1075
struct linux_binfmt;
#line 1075
struct css_set;
#line 1075
struct compat_robust_list_head;
#line 1075 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
};
#line 12 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 150 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 154 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 35 "include/linux/agp_backend.h"
enum chipset_type {
    NOT_SUPPORTED = 0,
    SUPPORTED = 1
} ;
#line 40 "include/linux/agp_backend.h"
struct agp_version {
   u16 major ;
   u16 minor ;
};
#line 45 "include/linux/agp_backend.h"
struct agp_kern_info {
   struct agp_version version ;
   struct pci_dev *device ;
   enum chipset_type chipset ;
   unsigned long mode ;
   unsigned long aper_base ;
   size_t aper_size ;
   int max_memory ;
   int current_memory ;
   bool cant_use_aperture ;
   unsigned long page_mask ;
   struct vm_operations_struct *vm_ops ;
};
#line 67
struct agp_bridge_data;
#line 31 "include/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 33 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 19 "include/linux/irqreturn.h"
typedef int irqreturn_t;
#line 66 "include/drm/drm.h"
typedef unsigned int drm_magic_t;
#line 110 "include/drm/drm.h"
struct drm_hw_lock {
   unsigned int volatile   lock ;
   char padding[60] ;
};
#line 169
enum drm_map_type {
    _DRM_FRAME_BUFFER = 0,
    _DRM_REGISTERS = 1,
    _DRM_SHM = 2,
    _DRM_AGP = 3,
    _DRM_SCATTER_GATHER = 4,
    _DRM_CONSISTENT = 5,
    _DRM_GEM = 6
} ;
#line 182
enum drm_map_flags {
    _DRM_RESTRICTED = 1,
    _DRM_READ_ONLY = 2,
    _DRM_LOCKED = 4,
    _DRM_KERNEL = 8,
    _DRM_WRITE_COMBINING = 16,
    _DRM_CONTAINS_LOCK = 32,
    _DRM_REMOVABLE = 64,
    _DRM_DRIVER = 128
} ;
#line 204 "include/drm/drm.h"
struct drm_map {
   unsigned long offset ;
   unsigned long size ;
   enum drm_map_type type ;
   enum drm_map_flags flags ;
   void *handle ;
   int mtrr ;
};
#line 227
enum drm_stat_type {
    _DRM_STAT_LOCK = 0,
    _DRM_STAT_OPENS = 1,
    _DRM_STAT_CLOSES = 2,
    _DRM_STAT_IOCTLS = 3,
    _DRM_STAT_LOCKS = 4,
    _DRM_STAT_UNLOCKS = 5,
    _DRM_STAT_VALUE = 6,
    _DRM_STAT_BYTE = 7,
    _DRM_STAT_COUNT = 8,
    _DRM_STAT_IRQ = 9,
    _DRM_STAT_PRIMARY = 10,
    _DRM_STAT_SECONDARY = 11,
    _DRM_STAT_DMA = 12,
    _DRM_STAT_SPECIAL = 13,
    _DRM_STAT_MISSED = 14
} ;
#line 392
enum drm_ctx_flags {
    _DRM_CONTEXT_PRESERVED = 1,
    _DRM_CONTEXT_2DONLY = 2
} ;
#line 567 "include/drm/drm.h"
struct drm_set_version {
   int drm_di_major ;
   int drm_di_minor ;
   int drm_dd_major ;
   int drm_dd_minor ;
};
#line 218 "include/drm/drm_mode.h"
struct drm_mode_fb_cmd {
   uint32_t fb_id ;
   uint32_t width ;
   uint32_t height ;
   uint32_t pitch ;
   uint32_t bpp ;
   uint32_t depth ;
   uint32_t handle ;
};
#line 51 "include/linux/idr.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[1 << 6] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 59 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 84 "include/drm/drmP.h"
struct drm_file;
#line 85
struct drm_device;
#line 40 "include/drm/drm_hashtab.h"
struct drm_hash_item {
   struct hlist_node head ;
   unsigned long key ;
};
#line 45 "include/drm/drm_hashtab.h"
struct drm_open_hash {
   unsigned int size ;
   unsigned int order ;
   unsigned int fill ;
   struct hlist_head *table ;
   int use_vmalloc ;
};
#line 271 "include/drm/drmP.h"
typedef int drm_ioctl_t(struct drm_device *dev , void *data , struct drm_file *file_priv );
#line 282 "include/drm/drmP.h"
struct drm_ioctl_desc {
   unsigned int cmd ;
   drm_ioctl_t *func ;
   int flags ;
};
#line 310
enum __anonenum_list_143 {
    DRM_LIST_NONE = 0,
    DRM_LIST_FREE = 1,
    DRM_LIST_WAIT = 2,
    DRM_LIST_PEND = 3,
    DRM_LIST_PRIO = 4,
    DRM_LIST_RECLAIM = 5
} ;
#line 310 "include/drm/drmP.h"
struct drm_buf {
   int idx ;
   int total ;
   int order ;
   int used ;
   unsigned long offset ;
   void *address ;
   unsigned long bus_address ;
   struct drm_buf *next ;
   int volatile   waiting ;
   int volatile   pending ;
   wait_queue_head_t dma_wait ;
   struct drm_file *file_priv ;
   int context ;
   int while_locked ;
   enum __anonenum_list_143 list ;
   int dev_priv_size ;
   void *dev_private ;
};
#line 339 "include/drm/drmP.h"
struct drm_waitlist {
   int count ;
   struct drm_buf **bufs ;
   struct drm_buf **rp ;
   struct drm_buf **wp ;
   struct drm_buf **end ;
   spinlock_t read_lock ;
   spinlock_t write_lock ;
};
#line 349 "include/drm/drmP.h"
struct drm_freelist {
   int initialized ;
   atomic_t count ;
   struct drm_buf *next ;
   wait_queue_head_t waiting ;
   int low_mark ;
   int high_mark ;
   atomic_t wfh ;
   spinlock_t lock ;
};
#line 361 "include/drm/drmP.h"
struct drm_dma_handle {
   dma_addr_t busaddr ;
   void *vaddr ;
   size_t size ;
};
#line 361 "include/drm/drmP.h"
typedef struct drm_dma_handle drm_dma_handle_t;
#line 370 "include/drm/drmP.h"
struct drm_buf_entry {
   int buf_size ;
   int buf_count ;
   struct drm_buf *buflist ;
   int seg_count ;
   int page_order ;
   struct drm_dma_handle **seglist ;
   struct drm_freelist freelist ;
};
#line 382
struct drm_minor;
#line 382
struct drm_master;
#line 382 "include/drm/drmP.h"
struct drm_file {
   int authenticated ;
   pid_t pid ;
   uid_t uid ;
   drm_magic_t magic ;
   unsigned long ioctl_count ;
   struct list_head lhead ;
   struct drm_minor *minor ;
   unsigned long lock_count ;
   struct idr object_idr ;
   spinlock_t table_lock ;
   struct file *filp ;
   void *driver_priv ;
   int is_master ;
   struct drm_master *master ;
   struct list_head fbs ;
};
#line 407 "include/drm/drmP.h"
struct drm_queue {
   atomic_t use_count ;
   atomic_t finalization ;
   atomic_t block_count ;
   atomic_t block_read ;
   wait_queue_head_t read_queue ;
   atomic_t block_write ;
   wait_queue_head_t write_queue ;
   atomic_t total_queued ;
   atomic_t total_flushed ;
   atomic_t total_locks ;
   enum drm_ctx_flags flags ;
   struct drm_waitlist waitlist ;
   wait_queue_head_t flush_queue ;
};
#line 426 "include/drm/drmP.h"
struct drm_lock_data {
   struct drm_hw_lock *hw_lock ;
   struct drm_file *file_priv ;
   wait_queue_head_t lock_queue ;
   unsigned long lock_time ;
   spinlock_t spinlock ;
   uint32_t kernel_waiters ;
   uint32_t user_waiters ;
   int idle_has_lock ;
};
#line 441
enum __anonenum_flags_144 {
    _DRM_DMA_USE_AGP = 1,
    _DRM_DMA_USE_SG = 2,
    _DRM_DMA_USE_FB = 4,
    _DRM_DMA_USE_PCI_RO = 8
} ;
#line 441 "include/drm/drmP.h"
struct drm_device_dma {
   struct drm_buf_entry bufs[22 + 1] ;
   int buf_count ;
   struct drm_buf **buflist ;
   int seg_count ;
   int page_count ;
   unsigned long *pagelist ;
   unsigned long byte_count ;
   enum __anonenum_flags_144 flags ;
};
#line 475 "include/drm/drmP.h"
struct drm_agp_head {
   struct agp_kern_info agp_info ;
   struct list_head memory ;
   unsigned long mode ;
   struct agp_bridge_data *bridge ;
   int enabled ;
   int acquired ;
   unsigned long base ;
   int agp_mtrr ;
   int cant_use_aperture ;
   unsigned long page_mask ;
};
#line 491 "include/drm/drmP.h"
struct drm_sg_mem {
   unsigned long handle ;
   void *virtual ;
   int pages ;
   struct page **pagelist ;
   dma_addr_t *busaddr ;
};
#line 499 "include/drm/drmP.h"
struct drm_sigdata {
   int context ;
   struct drm_hw_lock *lock ;
};
#line 509
struct drm_mm;
#line 509 "include/drm/drmP.h"
struct drm_mm_node {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
   int free ;
   unsigned long start ;
   unsigned long size ;
   struct drm_mm *mm ;
   void *private ;
};
#line 519 "include/drm/drmP.h"
struct drm_mm {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
};
#line 528 "include/drm/drmP.h"
struct drm_map_list {
   struct list_head head ;
   struct drm_hash_item hash ;
   struct drm_map *map ;
   uint64_t user_token ;
   struct drm_master *master ;
   struct drm_mm_node *file_offset_node ;
};
#line 537 "include/drm/drmP.h"
typedef struct drm_map drm_local_map_t;
#line 586 "include/drm/drmP.h"
struct drm_gem_object {
   struct kref refcount ;
   struct kref handlecount ;
   struct drm_device *dev ;
   struct file *filp ;
   struct drm_map_list map_list ;
   size_t size ;
   int name ;
   uint32_t read_domains ;
   uint32_t write_domain ;
   uint32_t pending_read_domains ;
   uint32_t pending_write_domain ;
   void *driver_private ;
};
#line 37 "include/drm/drm_crtc.h"
struct drm_framebuffer;
#line 48 "include/drm/drm_crtc.h"
struct drm_mode_object {
   uint32_t id ;
   uint32_t type ;
};
#line 61
enum drm_mode_status {
    MODE_OK = 0,
    MODE_HSYNC = 1,
    MODE_VSYNC = 2,
    MODE_H_ILLEGAL = 3,
    MODE_V_ILLEGAL = 4,
    MODE_BAD_WIDTH = 5,
    MODE_NOMODE = 6,
    MODE_NO_INTERLACE = 7,
    MODE_NO_DBLESCAN = 8,
    MODE_NO_VSCAN = 9,
    MODE_MEM = 10,
    MODE_VIRTUAL_X = 11,
    MODE_VIRTUAL_Y = 12,
    MODE_MEM_VIRT = 13,
    MODE_NOCLOCK = 14,
    MODE_CLOCK_HIGH = 15,
    MODE_CLOCK_LOW = 16,
    MODE_CLOCK_RANGE = 17,
    MODE_BAD_HVALUE = 18,
    MODE_BAD_VVALUE = 19,
    MODE_BAD_VSCAN = 20,
    MODE_HSYNC_NARROW = 21,
    MODE_HSYNC_WIDE = 22,
    MODE_HBLANK_NARROW = 23,
    MODE_HBLANK_WIDE = 24,
    MODE_VSYNC_NARROW = 25,
    MODE_VSYNC_WIDE = 26,
    MODE_VBLANK_NARROW = 27,
    MODE_VBLANK_WIDE = 28,
    MODE_PANEL = 29,
    MODE_INTERLACE_WIDTH = 30,
    MODE_ONE_WIDTH = 31,
    MODE_ONE_HEIGHT = 32,
    MODE_ONE_SIZE = 33,
    MODE_NO_REDUCED = 34,
    MODE_UNVERIFIED = -3,
    MODE_BAD = -2,
    MODE_ERROR = -1
} ;
#line 114 "include/drm/drm_crtc.h"
struct drm_display_mode {
   struct list_head head ;
   struct drm_mode_object base ;
   char name[32] ;
   int connector_count ;
   enum drm_mode_status status ;
   int type ;
   int clock ;
   int hdisplay ;
   int hsync_start ;
   int hsync_end ;
   int htotal ;
   int hskew ;
   int vdisplay ;
   int vsync_start ;
   int vsync_end ;
   int vtotal ;
   int vscan ;
   unsigned int flags ;
   int width_mm ;
   int height_mm ;
   int clock_index ;
   int synth_clock ;
   int crtc_hdisplay ;
   int crtc_hblank_start ;
   int crtc_hblank_end ;
   int crtc_hsync_start ;
   int crtc_hsync_end ;
   int crtc_htotal ;
   int crtc_hskew ;
   int crtc_vdisplay ;
   int crtc_vblank_start ;
   int crtc_vblank_end ;
   int crtc_vsync_start ;
   int crtc_vsync_end ;
   int crtc_vtotal ;
   int crtc_hadjusted ;
   int crtc_vadjusted ;
   int private_size ;
   int *private ;
   int private_flags ;
   int vrefresh ;
   float hsync ;
};
#line 240 "include/drm/drm_crtc.h"
struct drm_framebuffer_funcs {
   void (*destroy)(struct drm_framebuffer *framebuffer ) ;
   int (*create_handle)(struct drm_framebuffer *fb , struct drm_file *file_priv ,
                        unsigned int *handle ) ;
};
#line 247 "include/drm/drm_crtc.h"
struct drm_framebuffer {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   struct drm_framebuffer_funcs  const  *funcs ;
   unsigned int pitch ;
   unsigned int width ;
   unsigned int height ;
   unsigned int depth ;
   int bits_per_pixel ;
   int flags ;
   void *fbdev ;
   u32 pseudo_palette[17] ;
   struct list_head filp_head ;
};
#line 277 "include/drm/drm_crtc.h"
struct drm_property {
   struct list_head head ;
   struct drm_mode_object base ;
   uint32_t flags ;
   char name[32] ;
   uint32_t num_values ;
   uint64_t *values ;
   struct list_head enum_blob_list ;
};
#line 512 "include/drm/drm_crtc.h"
struct drm_mode_config_funcs {
   struct drm_framebuffer *(*fb_create)(struct drm_device *dev , struct drm_file *file_priv ,
                                        struct drm_mode_fb_cmd *mode_cmd ) ;
   int (*fb_changed)(struct drm_device *dev ) ;
};
#line 517 "include/drm/drm_crtc.h"
struct drm_mode_group {
   uint32_t num_crtcs ;
   uint32_t num_encoders ;
   uint32_t num_connectors ;
   uint32_t *id_list ;
};
#line 530 "include/drm/drm_crtc.h"
struct drm_mode_config {
   struct mutex mutex ;
   struct idr crtc_idr ;
   int num_fb ;
   struct list_head fb_list ;
   int num_connector ;
   struct list_head connector_list ;
   int num_encoder ;
   struct list_head encoder_list ;
   int num_crtc ;
   struct list_head crtc_list ;
   struct list_head property_list ;
   struct list_head fb_kernel_list ;
   int min_width ;
   int min_height ;
   int max_width ;
   int max_height ;
   struct drm_mode_config_funcs *funcs ;
   unsigned long fb_base ;
   struct list_head property_blob_list ;
   struct drm_property *edid_property ;
   struct drm_property *dpms_property ;
   struct drm_property *dvi_i_subconnector_property ;
   struct drm_property *dvi_i_select_subconnector_property ;
   struct drm_property *tv_subconnector_property ;
   struct drm_property *tv_select_subconnector_property ;
   struct drm_property *tv_mode_property ;
   struct drm_property *tv_left_margin_property ;
   struct drm_property *tv_right_margin_property ;
   struct drm_property *tv_top_margin_property ;
   struct drm_property *tv_bottom_margin_property ;
   struct drm_property *scaling_mode_property ;
   struct drm_property *dithering_mode_property ;
};
#line 638 "include/drm/drmP.h"
struct drm_master {
   struct kref refcount ;
   struct list_head head ;
   struct drm_minor *minor ;
   char *unique ;
   int unique_len ;
   int unique_size ;
   int blocked ;
   struct drm_open_hash magiclist ;
   struct list_head magicfree ;
   struct drm_lock_data lock ;
   void *driver_priv ;
};
#line 667 "include/drm/drmP.h"
struct drm_driver {
   int (*load)(struct drm_device * , unsigned long flags ) ;
   int (*firstopen)(struct drm_device * ) ;
   int (*open)(struct drm_device * , struct drm_file * ) ;
   void (*preclose)(struct drm_device * , struct drm_file *file_priv ) ;
   void (*postclose)(struct drm_device * , struct drm_file * ) ;
   void (*lastclose)(struct drm_device * ) ;
   int (*unload)(struct drm_device * ) ;
   int (*suspend)(struct drm_device * , pm_message_t state ) ;
   int (*resume)(struct drm_device * ) ;
   int (*dma_ioctl)(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
   void (*dma_ready)(struct drm_device * ) ;
   int (*dma_quiescent)(struct drm_device * ) ;
   int (*context_ctor)(struct drm_device *dev , int context ) ;
   int (*context_dtor)(struct drm_device *dev , int context ) ;
   int (*kernel_context_switch)(struct drm_device *dev , int old , int new ) ;
   void (*kernel_context_switch_unlock)(struct drm_device *dev ) ;
   int (*dri_library_name)(struct drm_device *dev , char *buf ) ;
   u32 (*get_vblank_counter)(struct drm_device *dev , int crtc ) ;
   int (*enable_vblank)(struct drm_device *dev , int crtc ) ;
   void (*disable_vblank)(struct drm_device *dev , int crtc ) ;
   int (*device_is_agp)(struct drm_device *dev ) ;
   irqreturn_t (*irq_handler)(int irq , void *arg ) ;
   void (*irq_preinstall)(struct drm_device *dev ) ;
   int (*irq_postinstall)(struct drm_device *dev ) ;
   void (*irq_uninstall)(struct drm_device *dev ) ;
   void (*reclaim_buffers)(struct drm_device *dev , struct drm_file *file_priv ) ;
   void (*reclaim_buffers_locked)(struct drm_device *dev , struct drm_file *file_priv ) ;
   void (*reclaim_buffers_idlelocked)(struct drm_device *dev , struct drm_file *file_priv ) ;
   unsigned long (*get_map_ofs)(struct drm_map *map ) ;
   unsigned long (*get_reg_ofs)(struct drm_device *dev ) ;
   void (*set_version)(struct drm_device *dev , struct drm_set_version *sv ) ;
   int (*master_create)(struct drm_device *dev , struct drm_master *master ) ;
   void (*master_destroy)(struct drm_device *dev , struct drm_master *master ) ;
   int (*proc_init)(struct drm_minor *minor ) ;
   void (*proc_cleanup)(struct drm_minor *minor ) ;
   int (*gem_init_object)(struct drm_gem_object *obj ) ;
   void (*gem_free_object)(struct drm_gem_object *obj ) ;
   struct vm_operations_struct *gem_vm_ops ;
   int major ;
   int minor ;
   int patchlevel ;
   char *name ;
   char *desc ;
   char *date ;
   u32 driver_features ;
   int dev_priv_size ;
   struct drm_ioctl_desc *ioctls ;
   int num_ioctls ;
   struct file_operations fops ;
   struct pci_driver pci_driver ;
   struct list_head device_list ;
};
#line 806 "include/drm/drmP.h"
struct drm_minor {
   int index ;
   int type ;
   dev_t device ;
   struct device kdev ;
   struct drm_device *dev ;
   struct proc_dir_entry *dev_root ;
   struct drm_master *master ;
   struct list_head master_list ;
   struct drm_mode_group mode_group ;
};
#line 822 "include/drm/drmP.h"
struct drm_device {
   struct list_head driver_item ;
   char *devname ;
   int if_version ;
   spinlock_t count_lock ;
   struct mutex struct_mutex ;
   int open_count ;
   atomic_t ioctl_count ;
   atomic_t vma_count ;
   int buf_use ;
   atomic_t buf_alloc ;
   unsigned long counters ;
   enum drm_stat_type types[15] ;
   atomic_t counts[15] ;
   struct list_head filelist ;
   struct list_head maplist ;
   int map_count ;
   struct drm_open_hash map_hash ;
   struct list_head ctxlist ;
   int ctx_count ;
   struct mutex ctxlist_mutex ;
   struct idr ctx_idr ;
   struct list_head vmalist ;
   int queue_count ;
   int queue_reserved ;
   int queue_slots ;
   struct drm_queue **queuelist ;
   struct drm_device_dma *dma ;
   int irq_enabled ;
   long volatile   context_flag ;
   long volatile   interrupt_flag ;
   long volatile   dma_flag ;
   struct timer_list timer ;
   wait_queue_head_t context_wait ;
   int last_checked ;
   int last_context ;
   unsigned long last_switch ;
   struct work_struct work ;
   int vblank_disable_allowed ;
   wait_queue_head_t *vbl_queue ;
   atomic_t *_vblank_count ;
   spinlock_t vbl_lock ;
   struct list_head *vbl_sigs ;
   atomic_t vbl_signal_pending ;
   atomic_t *vblank_refcount ;
   u32 *last_vblank ;
   int *vblank_enabled ;
   int *vblank_inmodeset ;
   struct timer_list vblank_disable_timer ;
   u32 max_vblank_count ;
   cycles_t ctx_start ;
   cycles_t lck_start ;
   struct fasync_struct *buf_async ;
   wait_queue_head_t buf_readers ;
   wait_queue_head_t buf_writers ;
   struct drm_agp_head *agp ;
   struct pci_dev *pdev ;
   int pci_vendor ;
   int pci_device ;
   struct drm_sg_mem *sg ;
   int num_crtcs ;
   void *dev_private ;
   void *mm_private ;
   struct address_space *dev_mapping ;
   struct drm_sigdata sigdata ;
   sigset_t sigmask ;
   struct drm_driver *driver ;
   drm_local_map_t *agp_buffer_map ;
   unsigned int agp_buffer_token ;
   struct drm_minor *control ;
   struct drm_minor *primary ;
   spinlock_t drw_lock ;
   struct idr drw_idr ;
   struct drm_mode_config mode_config ;
   spinlock_t object_name_lock ;
   struct idr object_name_idr ;
   atomic_t object_count ;
   atomic_t object_memory ;
   atomic_t pin_count ;
   atomic_t pin_memory ;
   atomic_t gtt_count ;
   atomic_t gtt_memory ;
   uint32_t gtt_total ;
   uint32_t invalidate_domains ;
   uint32_t flush_domains ;
};
#line 34 "include/linux/io-mapping.h"
struct io_mapping;
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct _drm_i915_ring_buffer {
   int tail_mask ;
   unsigned long Size ;
   u8 *virtual_start ;
   int head ;
   int tail ;
   int space ;
   drm_local_map_t map ;
   struct drm_gem_object *ring_obj ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_ring_buffer drm_i915_ring_buffer_t;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct mem_block {
   struct mem_block *next ;
   struct mem_block *prev ;
   int start ;
   int size ;
   struct drm_file *file_priv ;
};
#line 94
struct opregion_header;
#line 95
struct opregion_acpi;
#line 96
struct opregion_swsci;
#line 97
struct opregion_asle;
#line 99 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_opregion {
   struct opregion_header *header ;
   struct opregion_acpi *acpi ;
   struct opregion_swsci *swsci ;
   struct opregion_asle *asle ;
   int enabled ;
};
#line 113 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_fence_reg {
   struct drm_gem_object *obj ;
};
#line 117 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_148 {
   struct drm_mm gtt_space ;
   struct io_mapping *gtt_mapping ;
   struct list_head active_list ;
   struct list_head flushing_list ;
   struct list_head inactive_list ;
   struct list_head request_list ;
   struct delayed_work retire_work ;
   uint32_t next_gem_seqno ;
   uint32_t waiting_gem_seqno ;
   uint32_t irq_gem_seqno ;
   int suspended ;
   int wedged ;
   uint32_t bit_6_swizzle_x ;
   uint32_t bit_6_swizzle_y ;
};
#line 117 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_private {
   struct drm_device *dev ;
   int has_gem ;
   void *regs ;
   drm_i915_ring_buffer_t ring ;
   drm_dma_handle_t *status_page_dmah ;
   void *hw_status_page ;
   dma_addr_t dma_status_page ;
   uint32_t counter ;
   unsigned int status_gfx_addr ;
   drm_local_map_t hws_map ;
   struct drm_gem_object *hws_obj ;
   unsigned int cpp ;
   int back_offset ;
   int front_offset ;
   int current_page ;
   int page_flipping ;
   wait_queue_head_t irq_queue ;
   atomic_t irq_received ;
   spinlock_t user_irq_lock ;
   int user_irq_refcount ;
   u32 irq_mask_reg ;
   u32 pipestat[2] ;
   int tex_lru_log_granularity ;
   int allow_batchbuffer ;
   struct mem_block *agp_heap ;
   unsigned int sr01 ;
   unsigned int adpa ;
   unsigned int ppcr ;
   unsigned int dvob ;
   unsigned int dvoc ;
   unsigned int lvds ;
   int vblank_pipe ;
   bool cursor_needs_physical ;
   struct drm_mm vram ;
   int irq_enabled ;
   struct intel_opregion opregion ;
   int backlight_duty_cycle ;
   bool panel_wants_dither ;
   struct drm_display_mode *panel_fixed_mode ;
   struct drm_display_mode *vbt_mode ;
   unsigned int int_tv_support : 1 ;
   unsigned int lvds_dither : 1 ;
   unsigned int lvds_vbt : 1 ;
   unsigned int int_crt_support : 1 ;
   struct drm_i915_fence_reg fence_regs[16] ;
   int fence_reg_start ;
   int num_fence_regs ;
   u8 saveLBB ;
   u32 saveDSPACNTR ;
   u32 saveDSPBCNTR ;
   u32 saveDSPARB ;
   u32 saveRENDERSTANDBY ;
   u32 saveHWS ;
   u32 savePIPEACONF ;
   u32 savePIPEBCONF ;
   u32 savePIPEASRC ;
   u32 savePIPEBSRC ;
   u32 saveFPA0 ;
   u32 saveFPA1 ;
   u32 saveDPLL_A ;
   u32 saveDPLL_A_MD ;
   u32 saveHTOTAL_A ;
   u32 saveHBLANK_A ;
   u32 saveHSYNC_A ;
   u32 saveVTOTAL_A ;
   u32 saveVBLANK_A ;
   u32 saveVSYNC_A ;
   u32 saveBCLRPAT_A ;
   u32 savePIPEASTAT ;
   u32 saveDSPASTRIDE ;
   u32 saveDSPASIZE ;
   u32 saveDSPAPOS ;
   u32 saveDSPAADDR ;
   u32 saveDSPASURF ;
   u32 saveDSPATILEOFF ;
   u32 savePFIT_PGM_RATIOS ;
   u32 saveBLC_PWM_CTL ;
   u32 saveBLC_PWM_CTL2 ;
   u32 saveFPB0 ;
   u32 saveFPB1 ;
   u32 saveDPLL_B ;
   u32 saveDPLL_B_MD ;
   u32 saveHTOTAL_B ;
   u32 saveHBLANK_B ;
   u32 saveHSYNC_B ;
   u32 saveVTOTAL_B ;
   u32 saveVBLANK_B ;
   u32 saveVSYNC_B ;
   u32 saveBCLRPAT_B ;
   u32 savePIPEBSTAT ;
   u32 saveDSPBSTRIDE ;
   u32 saveDSPBSIZE ;
   u32 saveDSPBPOS ;
   u32 saveDSPBADDR ;
   u32 saveDSPBSURF ;
   u32 saveDSPBTILEOFF ;
   u32 saveVGA0 ;
   u32 saveVGA1 ;
   u32 saveVGA_PD ;
   u32 saveVGACNTRL ;
   u32 saveADPA ;
   u32 saveLVDS ;
   u32 savePP_ON_DELAYS ;
   u32 savePP_OFF_DELAYS ;
   u32 saveDVOA ;
   u32 saveDVOB ;
   u32 saveDVOC ;
   u32 savePP_ON ;
   u32 savePP_OFF ;
   u32 savePP_CONTROL ;
   u32 savePP_DIVISOR ;
   u32 savePFIT_CONTROL ;
   u32 save_palette_a[256] ;
   u32 save_palette_b[256] ;
   u32 saveFBC_CFB_BASE ;
   u32 saveFBC_LL_BASE ;
   u32 saveFBC_CONTROL ;
   u32 saveFBC_CONTROL2 ;
   u32 saveIER ;
   u32 saveIIR ;
   u32 saveIMR ;
   u32 saveCACHE_MODE_0 ;
   u32 saveD_STATE ;
   u32 saveCG_2D_DIS ;
   u32 saveMI_ARB_STATE ;
   u32 saveSWF0[16] ;
   u32 saveSWF1[16] ;
   u32 saveSWF2[3] ;
   u8 saveMSR ;
   u8 saveSR[8] ;
   u8 saveGR[25] ;
   u8 saveAR_INDEX ;
   u8 saveAR[21] ;
   u8 saveDACMASK ;
   u8 saveDACDATA[256 * 3] ;
   u8 saveCR[37] ;
   struct __anonstruct_mm_148 mm ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1 {
    false = 0,
    true = 1
} ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pda.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100] ;
};
#line 63 "include/drm/drm.h"
typedef unsigned int drm_handle_t;
#line 77 "include/drm/drm.h"
struct drm_clip_rect {
   unsigned short x1 ;
   unsigned short y1 ;
   unsigned short x2 ;
   unsigned short y2 ;
};
#line 95 "include/drm/drm.h"
struct drm_tex_region {
   unsigned char next ;
   unsigned char prev ;
   unsigned char in_use ;
   unsigned char padding ;
   unsigned int age ;
};
#line 42 "include/drm/i915_drm.h"
enum __anonenum_func_147 {
    I915_INIT_DMA = 1,
    I915_CLEANUP_DMA = 2,
    I915_RESUME_DMA = 3
} ;
#line 42 "include/drm/i915_drm.h"
struct _drm_i915_init {
   enum __anonenum_func_147 func ;
   unsigned int mmio_offset ;
   int sarea_priv_offset ;
   unsigned int ring_start ;
   unsigned int ring_end ;
   unsigned int ring_size ;
   unsigned int front_offset ;
   unsigned int back_offset ;
   unsigned int depth_offset ;
   unsigned int w ;
   unsigned int h ;
   unsigned int pitch ;
   unsigned int pitch_bits ;
   unsigned int back_pitch ;
   unsigned int depth_pitch ;
   unsigned int cpp ;
   unsigned int chipset ;
};
#line 42 "include/drm/i915_drm.h"
typedef struct _drm_i915_init drm_i915_init_t;
#line 66 "include/drm/i915_drm.h"
struct _drm_i915_sarea {
   struct drm_tex_region texList[255 + 1] ;
   int last_upload ;
   int last_enqueue ;
   int last_dispatch ;
   int ctxOwner ;
   int texAge ;
   int pf_enabled ;
   int pf_active ;
   int pf_current_page ;
   int perf_boxes ;
   int width ;
   int height ;
   drm_handle_t front_handle ;
   int front_offset ;
   int front_size ;
   drm_handle_t back_handle ;
   int back_offset ;
   int back_size ;
   drm_handle_t depth_handle ;
   int depth_offset ;
   int depth_size ;
   drm_handle_t tex_handle ;
   int tex_offset ;
   int tex_size ;
   int log_tex_granularity ;
   int pitch ;
   int rotation ;
   int rotated_offset ;
   int rotated_size ;
   int rotated_pitch ;
   int virtualX ;
   int virtualY ;
   unsigned int front_tiled ;
   unsigned int back_tiled ;
   unsigned int depth_tiled ;
   unsigned int rotated_tiled ;
   unsigned int rotated2_tiled ;
   int pipeA_x ;
   int pipeA_y ;
   int pipeA_w ;
   int pipeA_h ;
   int pipeB_x ;
   int pipeB_y ;
   int pipeB_w ;
   int pipeB_h ;
   drm_handle_t unused_handle ;
   uint32_t unused1 ;
   uint32_t unused2 ;
   uint32_t unused3 ;
   uint32_t front_bo_handle ;
   uint32_t back_bo_handle ;
   uint32_t unused_bo_handle ;
   uint32_t depth_bo_handle ;
};
#line 66 "include/drm/i915_drm.h"
typedef struct _drm_i915_sarea drm_i915_sarea_t;
#line 226 "include/drm/i915_drm.h"
struct drm_i915_batchbuffer {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 226 "include/drm/i915_drm.h"
typedef struct drm_i915_batchbuffer drm_i915_batchbuffer_t;
#line 238 "include/drm/i915_drm.h"
struct _drm_i915_cmdbuffer {
   char *buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 238 "include/drm/i915_drm.h"
typedef struct _drm_i915_cmdbuffer drm_i915_cmdbuffer_t;
#line 265 "include/drm/i915_drm.h"
struct drm_i915_getparam {
   int param ;
   int *value ;
};
#line 265 "include/drm/i915_drm.h"
typedef struct drm_i915_getparam drm_i915_getparam_t;
#line 276 "include/drm/i915_drm.h"
struct drm_i915_setparam {
   int param ;
   int value ;
};
#line 276 "include/drm/i915_drm.h"
typedef struct drm_i915_setparam drm_i915_setparam_t;
#line 327 "include/drm/i915_drm.h"
struct drm_i915_hws_addr {
   uint64_t addr ;
};
#line 327 "include/drm/i915_drm.h"
typedef struct drm_i915_hws_addr drm_i915_hws_addr_t;
#line 107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_master_private {
   drm_local_map_t *sarea ;
   struct _drm_i915_sarea *sarea_priv ;
};
#line 117 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct drm_i915_private drm_i915_private_t;
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_149 {
   uint32_t last_gem_seqno ;
   uint32_t last_gem_throttle_seqno ;
};
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_file_private {
   struct __anonstruct_mm_149 mm ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 249 "include/drm/i915_drm.h"
struct drm_i915_irq_emit {
   int *irq_seq ;
};
#line 249 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_emit drm_i915_irq_emit_t;
#line 253 "include/drm/i915_drm.h"
struct drm_i915_irq_wait {
   int irq_seq ;
};
#line 253 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_wait drm_i915_irq_wait_t;
#line 315 "include/drm/i915_drm.h"
struct drm_i915_vblank_pipe {
   int pipe ;
};
#line 315 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_pipe drm_i915_vblank_pipe_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 285 "include/drm/i915_drm.h"
struct drm_i915_mem_alloc {
   int region ;
   int alignment ;
   int size ;
   int *region_offset ;
};
#line 285 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_alloc drm_i915_mem_alloc_t;
#line 292 "include/drm/i915_drm.h"
struct drm_i915_mem_free {
   int region ;
   int region_offset ;
};
#line 292 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_free drm_i915_mem_free_t;
#line 297 "include/drm/i915_drm.h"
struct drm_i915_mem_init_heap {
   int region ;
   int size ;
   int start ;
};
#line 297 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_init_heap drm_i915_mem_init_heap_t;
#line 306 "include/drm/i915_drm.h"
struct drm_i915_mem_destroy_heap {
   int region ;
};
#line 306 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_destroy_heap drm_i915_mem_destroy_heap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
enum pipe {
    PIPE_A = 0,
    PIPE_B = 1
} ;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 40 "include/linux/types.h"
typedef unsigned long uintptr_t;
#line 114 "include/linux/types.h"
typedef __s32 int32_t;
#line 118 "include/linux/types.h"
typedef __u8 uint8_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 69 "include/linux/agp_backend.h"
struct agp_memory {
   struct agp_memory *next ;
   struct agp_memory *prev ;
   struct agp_bridge_data *bridge ;
   unsigned long *memory ;
   size_t page_count ;
   int key ;
   int num_scratch_pages ;
   off_t pg_start ;
   u32 type ;
   u32 physical ;
   bool is_bound ;
   bool is_flushed ;
   bool vmalloc_flag ;
   struct list_head mapped_list ;
};
#line 229 "include/linux/pagemap.h"
typedef int filler_t(void * , struct page * );
#line 577 "include/drm/drmP.h"
struct drm_gem_mm {
   struct drm_mm offset_manager ;
   struct drm_open_hash offset_hash ;
};
#line 331 "include/drm/i915_drm.h"
struct drm_i915_gem_init {
   uint64_t gtt_start ;
   uint64_t gtt_end ;
};
#line 344 "include/drm/i915_drm.h"
struct drm_i915_gem_create {
   uint64_t size ;
   uint32_t handle ;
   uint32_t pad ;
};
#line 360 "include/drm/i915_drm.h"
struct drm_i915_gem_pread {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 376 "include/drm/i915_drm.h"
struct drm_i915_gem_pwrite {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 392 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t addr_ptr ;
};
#line 412 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap_gtt {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
};
#line 424 "include/drm/i915_drm.h"
struct drm_i915_gem_set_domain {
   uint32_t handle ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 435 "include/drm/i915_drm.h"
struct drm_i915_gem_sw_finish {
   uint32_t handle ;
};
#line 440 "include/drm/i915_drm.h"
struct drm_i915_gem_relocation_entry {
   uint32_t target_handle ;
   uint32_t delta ;
   uint64_t offset ;
   uint64_t presumed_offset ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 508 "include/drm/i915_drm.h"
struct drm_i915_gem_exec_object {
   uint32_t handle ;
   uint32_t relocation_count ;
   uint64_t relocs_ptr ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 533 "include/drm/i915_drm.h"
struct drm_i915_gem_execbuffer {
   uint64_t buffers_ptr ;
   uint32_t buffer_count ;
   uint32_t batch_start_offset ;
   uint32_t batch_len ;
   uint32_t DR1 ;
   uint32_t DR4 ;
   uint32_t num_cliprects ;
   uint64_t cliprects_ptr ;
};
#line 558 "include/drm/i915_drm.h"
struct drm_i915_gem_pin {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 576 "include/drm/i915_drm.h"
struct drm_i915_gem_busy {
   uint32_t handle ;
   uint32_t busy ;
};
#line 644 "include/drm/i915_drm.h"
struct drm_i915_gem_get_aperture {
   uint64_t aper_size ;
   uint64_t aper_available_size ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_object {
   struct drm_gem_object *obj ;
   struct drm_mm_node *gtt_space ;
   struct list_head list ;
   int active ;
   int dirty ;
   struct agp_memory *agp_mem ;
   struct page **page_list ;
   uint32_t gtt_offset ;
   uint32_t gtt_alignment ;
   uint64_t mmap_offset ;
   int fence_reg ;
   int gtt_bound ;
   int pin_count ;
   uint32_t last_rendering_seqno ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t agp_type ;
   uint8_t *page_cpu_valid ;
   uint32_t user_pin_count ;
   struct drm_file *pin_filp ;
};
#line 451 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_request {
   uint32_t seqno ;
   unsigned long emitted_jiffies ;
   struct list_head list ;
};
#line 87 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 2437 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
struct drm_i915_relocation_entry;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
struct drm_proc_list {
   char const   *name ;
   int (*f)(char * , char ** , off_t  , int  , int * , void * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 596 "include/drm/i915_drm.h"
struct drm_i915_gem_set_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t swizzle_mode ;
};
#line 627 "include/drm/i915_drm.h"
struct drm_i915_gem_get_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t swizzle_mode ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___0 {
    false___0 = 0,
    true___0 = 1
} ;
#line 119 "include/linux/types.h"
typedef __u16 uint16_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 396 "include/linux/mod_devicetable.h"
struct i2c_device_id {
   char name[20] ;
   kernel_ulong_t driver_data  __attribute__((__aligned__(sizeof(kernel_ulong_t )))) ;
};
#line 42 "include/linux/i2c.h"
struct i2c_msg;
#line 43
struct i2c_algorithm;
#line 44
struct i2c_adapter;
#line 45
struct i2c_client;
#line 46
struct i2c_driver;
#line 47
union i2c_smbus_data;
#line 48
struct i2c_board_info;
#line 136
struct i2c_client_address_data;
#line 136 "include/linux/i2c.h"
struct i2c_driver {
   int id ;
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*detach_client)(struct i2c_client * ) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t mesg ) ;
   int (*resume)(struct i2c_client * ) ;
   int (*command)(struct i2c_client *client , unsigned int cmd , void *arg ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , int kind , struct i2c_board_info * ) ;
   struct i2c_client_address_data  const  *address_data ;
   struct list_head clients ;
};
#line 202 "include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head list ;
   struct list_head detected ;
   struct completion released ;
};
#line 257 "include/linux/i2c.h"
struct i2c_board_info {
   char type[20] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   int irq ;
};
#line 327 "include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *adap , struct i2c_msg *msgs , int num ) ;
   int (*smbus_xfer)(struct i2c_adapter *adap , u16 addr , unsigned short flags ,
                     char read_write , u8 command , int size , union i2c_smbus_data *data ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
#line 348 "include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int id ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   int (*client_register)(struct i2c_client * ) ;
   int (*client_unregister)(struct i2c_client * ) ;
   u8 level ;
   struct mutex bus_lock ;
   struct mutex clist_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   struct list_head clients ;
   char name[48] ;
   struct completion dev_released ;
};
#line 406 "include/linux/i2c.h"
struct i2c_client_address_data {
   unsigned short const   *normal_i2c ;
   unsigned short const   *probe ;
   unsigned short const   *ignore ;
   unsigned short const   * const  *forces ;
};
#line 514 "include/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 572 "include/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[32 + 2] ;
};
#line 36 "include/drm/drm_crtc.h"
struct drm_mode_set;
#line 171
enum drm_connector_status {
    connector_status_connected = 1,
    connector_status_disconnected = 2,
    connector_status_unknown = 3
} ;
#line 177
enum subpixel_order {
    SubPixelUnknown = 0,
    SubPixelHorizontalRGB = 1,
    SubPixelHorizontalBGR = 2,
    SubPixelVerticalRGB = 3,
    SubPixelVerticalBGR = 4,
    SubPixelNone = 5
} ;
#line 190
enum __anonenum_display_type_146 {
    monochrome = 0,
    rgb = 1,
    other = 2,
    unknown = 3
} ;
#line 190 "include/drm/drm_crtc.h"
struct drm_display_info {
   char name[32] ;
   bool serration_vsync ;
   bool sync_on_green ;
   bool composite_sync ;
   bool separate_syncs ;
   bool blank_to_black ;
   unsigned char video_level ;
   bool digital ;
   unsigned int width_mm ;
   unsigned int height_mm ;
   unsigned char gamma ;
   bool gtf_supported ;
   bool standard_color ;
   enum __anonenum_display_type_146 display_type ;
   bool active_off_supported ;
   bool suspend_supported ;
   bool standby_supported ;
   unsigned short redx ;
   unsigned short redy ;
   unsigned short greenx ;
   unsigned short greeny ;
   unsigned short bluex ;
   unsigned short bluey ;
   unsigned short whitex ;
   unsigned short whitey ;
   unsigned int min_vfreq ;
   unsigned int max_vfreq ;
   unsigned int min_hfreq ;
   unsigned int max_hfreq ;
   unsigned int pixel_clock ;
   unsigned int wpx1 ;
   unsigned int wpy1 ;
   unsigned int wpgamma1 ;
   unsigned int wpx2 ;
   unsigned int wpy2 ;
   unsigned int wpgamma2 ;
   enum subpixel_order subpixel_order ;
   char *raw_edid ;
};
#line 264 "include/drm/drm_crtc.h"
struct drm_property_blob {
   struct drm_mode_object base ;
   struct list_head head ;
   unsigned int length ;
   void *data ;
};
#line 288
struct drm_crtc;
#line 289
struct drm_connector;
#line 290
struct drm_encoder;
#line 316 "include/drm/drm_crtc.h"
struct drm_crtc_funcs {
   void (*save)(struct drm_crtc *crtc ) ;
   void (*restore)(struct drm_crtc *crtc ) ;
   int (*cursor_set)(struct drm_crtc *crtc , struct drm_file *file_priv , uint32_t handle ,
                     uint32_t width , uint32_t height ) ;
   int (*cursor_move)(struct drm_crtc *crtc , int x , int y ) ;
   void (*gamma_set)(struct drm_crtc *crtc , u16 *r , u16 *g , u16 *b , uint32_t size ) ;
   void (*destroy)(struct drm_crtc *crtc ) ;
   int (*set_config)(struct drm_mode_set *set ) ;
};
#line 349 "include/drm/drm_crtc.h"
struct drm_crtc {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   struct drm_framebuffer *fb ;
   bool enabled ;
   struct drm_display_mode mode ;
   int x ;
   int y ;
   struct drm_display_mode *desired_mode ;
   int desired_x ;
   int desired_y ;
   struct drm_crtc_funcs  const  *funcs ;
   uint32_t gamma_size ;
   uint16_t *gamma_store ;
   void *helper_private ;
};
#line 393 "include/drm/drm_crtc.h"
struct drm_connector_funcs {
   void (*dpms)(struct drm_connector *connector , int mode ) ;
   void (*save)(struct drm_connector *connector ) ;
   void (*restore)(struct drm_connector *connector ) ;
   enum drm_connector_status (*detect)(struct drm_connector *connector ) ;
   void (*fill_modes)(struct drm_connector *connector , uint32_t max_width , uint32_t max_height ) ;
   int (*set_property)(struct drm_connector *connector , struct drm_property *property ,
                       uint64_t val ) ;
   void (*destroy)(struct drm_connector *connector ) ;
};
#line 404 "include/drm/drm_crtc.h"
struct drm_encoder_funcs {
   void (*destroy)(struct drm_encoder *encoder ) ;
};
#line 416 "include/drm/drm_crtc.h"
struct drm_encoder {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   int encoder_type ;
   uint32_t possible_crtcs ;
   uint32_t possible_clones ;
   struct drm_crtc *crtc ;
   struct drm_encoder_funcs  const  *funcs ;
   void *helper_private ;
};
#line 446 "include/drm/drm_crtc.h"
struct drm_connector {
   struct drm_device *dev ;
   struct device kdev ;
   struct device_attribute *attr ;
   struct list_head head ;
   struct drm_mode_object base ;
   int connector_type ;
   int connector_type_id ;
   bool interlace_allowed ;
   bool doublescan_allowed ;
   struct list_head modes ;
   int initial_x ;
   int initial_y ;
   enum drm_connector_status status ;
   struct list_head probed_modes ;
   struct drm_display_info display_info ;
   struct drm_connector_funcs  const  *funcs ;
   struct list_head user_modes ;
   struct drm_property_blob *edid_blob_ptr ;
   u32 property_ids[16] ;
   uint64_t property_values[16] ;
   void *helper_private ;
   uint32_t encoder_ids[2] ;
   uint32_t force_encoder_id ;
   struct drm_encoder *encoder ;
};
#line 489 "include/drm/drm_crtc.h"
struct drm_mode_set {
   struct list_head head ;
   struct drm_framebuffer *fb ;
   struct drm_crtc *crtc ;
   struct drm_display_mode *mode ;
   uint32_t x ;
   uint32_t y ;
   struct drm_connector **connectors ;
   size_t num_connectors ;
};
#line 33 "include/linux/i2c-algo-bit.h"
struct i2c_algo_bit_data {
   void *data ;
   void (*setsda)(void *data , int state ) ;
   void (*setscl)(void *data , int state ) ;
   int (*getsda)(void *data ) ;
   int (*getscl)(void *data ) ;
   int udelay ;
   int timeout ;
};
#line 43 "include/drm/drm_crtc_helper.h"
struct drm_crtc_helper_funcs {
   void (*dpms)(struct drm_crtc *crtc , int mode ) ;
   void (*prepare)(struct drm_crtc *crtc ) ;
   void (*commit)(struct drm_crtc *crtc ) ;
   bool (*mode_fixup)(struct drm_crtc *crtc , struct drm_display_mode *mode , struct drm_display_mode *adjusted_mode ) ;
   void (*mode_set)(struct drm_crtc *crtc , struct drm_display_mode *mode , struct drm_display_mode *adjusted_mode ,
                    int x , int y , struct drm_framebuffer *old_fb ) ;
   void (*mode_set_base)(struct drm_crtc *crtc , int x , int y , struct drm_framebuffer *old_fb ) ;
};
#line 66 "include/drm/drm_crtc_helper.h"
struct drm_encoder_helper_funcs {
   void (*dpms)(struct drm_encoder *encoder , int mode ) ;
   void (*save)(struct drm_encoder *encoder ) ;
   void (*restore)(struct drm_encoder *encoder ) ;
   bool (*mode_fixup)(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                      struct drm_display_mode *adjusted_mode ) ;
   void (*prepare)(struct drm_encoder *encoder ) ;
   void (*commit)(struct drm_encoder *encoder ) ;
   void (*mode_set)(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                    struct drm_display_mode *adjusted_mode ) ;
   enum drm_connector_status (*detect)(struct drm_encoder *encoder , struct drm_connector *connector ) ;
};
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_i2c_chan {
   struct drm_device *drm_dev ;
   u32 reg ;
   struct i2c_adapter adapter ;
   struct i2c_algo_bit_data algo ;
   u8 slave_addr ;
};
#line 70 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_framebuffer {
   struct drm_framebuffer base ;
   struct drm_gem_object *obj ;
};
#line 76 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_output {
   struct drm_connector base ;
   struct drm_encoder enc ;
   int type ;
   struct intel_i2c_chan *i2c_bus ;
   struct intel_i2c_chan *ddc_bus ;
   bool load_detect_temp ;
   void *dev_priv ;
};
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_crtc {
   struct drm_crtc base ;
   int pipe ;
   int plane ;
   uint32_t cursor_addr ;
   u8 lut_r[256] ;
   u8 lut_g[256] ;
   u8 lut_b[256] ;
   int dpms_mode ;
   struct intel_framebuffer *fbdev_fb ;
   struct drm_mode_set mode_set ;
};
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct __anonstruct_intel_clock_t_150 {
   int n ;
   int m1 ;
   int m2 ;
   int p1 ;
   int p2 ;
   int dot ;
   int vco ;
   int m ;
   int p ;
};
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
typedef struct __anonstruct_intel_clock_t_150 intel_clock_t;
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct __anonstruct_intel_range_t_151 {
   int min ;
   int max ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
typedef struct __anonstruct_intel_range_t_151 intel_range_t;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct __anonstruct_intel_p2_t_152 {
   int dot_limit ;
   int p2_slow ;
   int p2_fast ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
typedef struct __anonstruct_intel_p2_t_152 intel_p2_t;
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct __anonstruct_intel_limit_t_153 {
   intel_range_t dot ;
   intel_range_t vco ;
   intel_range_t n ;
   intel_range_t m ;
   intel_range_t m1 ;
   intel_range_t m2 ;
   intel_range_t p ;
   intel_range_t p1 ;
   intel_p2_t p2 ;
};
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
typedef struct __anonstruct_intel_limit_t_153 intel_limit_t;
#line 15 "include/linux/stddef.h"
enum __anonenum_1___1 {
    false___1 = 0,
    true___1 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 84 "include/drm/drm_crtc_helper.h"
struct drm_connector_helper_funcs {
   int (*get_modes)(struct drm_connector *connector ) ;
   int (*mode_valid)(struct drm_connector *connector , struct drm_display_mode *mode ) ;
   struct drm_encoder *(*best_encoder)(struct drm_connector *connector ) ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___2 {
    false___2 = 0,
    true___2 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 182
enum hrtimer_restart;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct vbt_header {
   u8 signature[20] ;
   u16 version ;
   u16 header_size ;
   u16 vbt_size ;
   u8 vbt_checksum ;
   u8 reserved0 ;
   u32 bdb_offset ;
   u32 aim_offset[4] ;
} __attribute__((__packed__)) ;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_header {
   u8 signature[16] ;
   u16 version ;
   u16 header_size ;
   u16 bdb_size ;
};
#line 108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_general_features {
   u8 panel_fitting : 2 ;
   u8 flexaim : 1 ;
   u8 msg_enable : 1 ;
   u8 clear_screen : 3 ;
   u8 color_flip : 1 ;
   u8 download_ext_vbt : 1 ;
   u8 enable_ssc : 1 ;
   u8 ssc_freq : 1 ;
   u8 enable_lfp_on_override : 1 ;
   u8 disable_ssc_ddt : 1 ;
   u8 rsvd8 : 3 ;
   u8 disable_smooth_vision : 1 ;
   u8 single_dvi : 1 ;
   u8 rsvd9 : 6 ;
   u8 legacy_monitor_detect ;
   u8 int_crt_support : 1 ;
   u8 int_tv_support : 1 ;
   u8 rsvd11 : 6 ;
} __attribute__((__packed__)) ;
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_options {
   u8 panel_type ;
   u8 rsvd1 ;
   u8 rsvd2 : 1 ;
   u8 lvds_edid : 1 ;
   u8 pixel_dither : 1 ;
   u8 pfit_ratio_auto : 1 ;
   u8 pfit_gfx_mode_enhanced : 1 ;
   u8 pfit_text_mode_enhanced : 1 ;
   u8 pfit_mode : 2 ;
   u8 rsvd4 ;
} __attribute__((__packed__)) ;
#line 191 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_fp_timing {
   u16 x_res ;
   u16 y_res ;
   u32 lvds_reg ;
   u32 lvds_reg_val ;
   u32 pp_on_reg ;
   u32 pp_on_reg_val ;
   u32 pp_off_reg ;
   u32 pp_off_reg_val ;
   u32 pp_cycle_reg ;
   u32 pp_cycle_reg_val ;
   u32 pfit_reg ;
   u32 pfit_reg_val ;
   u16 terminator ;
} __attribute__((__packed__)) ;
#line 207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_dvo_timing {
   u16 clock ;
   u8 hactive_lo ;
   u8 hblank_lo ;
   u8 hblank_hi : 4 ;
   u8 hactive_hi : 4 ;
   u8 vactive_lo ;
   u8 vblank_lo ;
   u8 vblank_hi : 4 ;
   u8 vactive_hi : 4 ;
   u8 hsync_off_lo ;
   u8 hsync_pulse_width ;
   u8 vsync_pulse_width : 4 ;
   u8 vsync_off : 4 ;
   u8 rsvd0 : 6 ;
   u8 hsync_off_hi : 2 ;
   u8 h_image ;
   u8 v_image ;
   u8 max_hv ;
   u8 h_border ;
   u8 v_border ;
   u8 rsvd1 : 3 ;
   u8 digital : 2 ;
   u8 vsync_positive : 1 ;
   u8 hsync_positive : 1 ;
   u8 rsvd2 : 1 ;
} __attribute__((__packed__)) ;
#line 235 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_pnp_id {
   u16 mfg_name ;
   u16 product_code ;
   u32 serial ;
   u8 mfg_week ;
   u8 mfg_year ;
} __attribute__((__packed__)) ;
#line 243 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_lfp_data_entry {
   struct lvds_fp_timing fp_timing ;
   struct lvds_dvo_timing dvo_timing ;
   struct lvds_pnp_id pnp_id ;
} __attribute__((__packed__)) ;
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_lfp_data {
   struct bdb_lvds_lfp_data_entry data[16] ;
} __attribute__((__packed__)) ;
#line 15 "include/linux/stddef.h"
enum __anonenum_1___3 {
    false___3 = 0,
    true___3 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_caps {
   u8 vendor_id ;
   u8 device_id ;
   u8 device_rev_id ;
   u8 sdvo_version_major ;
   u8 sdvo_version_minor ;
   unsigned int sdvo_inputs_mask : 2 ;
   unsigned int smooth_scaling : 1 ;
   unsigned int sharp_scaling : 1 ;
   unsigned int up_scaling : 1 ;
   unsigned int down_scaling : 1 ;
   unsigned int stall_support : 1 ;
   unsigned int pad : 1 ;
   u16 output_flags ;
} __attribute__((__packed__)) ;
#line 65 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct __anonstruct_part1_150 {
   u16 clock ;
   u8 h_active ;
   u8 h_blank ;
   u8 h_high ;
   u8 v_active ;
   u8 v_blank ;
   u8 v_high ;
};
#line 65 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct __anonstruct_part2_151 {
   u8 h_sync_off ;
   u8 h_sync_width ;
   u8 v_sync_off_width ;
   u8 sync_off_width_high ;
   u8 dtd_flags ;
   u8 sdvo_flags ;
   u8 v_sync_off_high ;
   u8 reserved ;
};
#line 65 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_dtd {
   struct __anonstruct_part1_150 part1 ;
   struct __anonstruct_part2_151 part2 ;
} __attribute__((__packed__)) ;
#line 94 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_pixel_clock_range {
   u16 min ;
   u16 max ;
} __attribute__((__packed__)) ;
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_get_trained_inputs_response {
   unsigned int input0_trained : 1 ;
   unsigned int input1_trained : 1 ;
   unsigned int pad : 6 ;
} __attribute__((__packed__)) ;
#line 220 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_set_target_input_args {
   unsigned int target_1 : 1 ;
   unsigned int pad : 7 ;
} __attribute__((__packed__)) ;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
struct intel_sdvo_priv {
   struct intel_i2c_chan *i2c_bus ;
   int slaveaddr ;
   int output_device ;
   u16 active_outputs ;
   struct intel_sdvo_caps caps ;
   int pixel_clock_min ;
   int pixel_clock_max ;
   int save_sdvo_mult ;
   u16 save_active_outputs ;
   struct intel_sdvo_dtd save_input_dtd_1 ;
   struct intel_sdvo_dtd save_input_dtd_2 ;
   struct intel_sdvo_dtd save_output_dtd[16] ;
   u32 save_SDVOX ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___4 {
    false___4 = 0,
    true___4 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 613 "include/drm/drm_crtc.h"
struct edid;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 144 "include/linux/kernel.h"
struct atomic_notifier_head;
#line 50 "include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 56 "include/linux/notifier.h"
struct atomic_notifier_head {
   spinlock_t lock ;
   struct notifier_block *head ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 9 "include/linux/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5] ;
   __u16 x_sflag ;
};
#line 225 "include/linux/tty_driver.h"
struct tty_driver;
#line 227 "include/linux/tty_driver.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver *driver , struct inode *inode ,
                                int idx ) ;
   int (*install)(struct tty_driver *driver , struct tty_struct *tty ) ;
   void (*remove)(struct tty_driver *driver , struct tty_struct *tty ) ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   void (*shutdown)(struct tty_struct *tty ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*read_proc)(char *page , char **start , off_t off , int count , int *eof ,
                    void *data ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct tty_struct *real_tty , struct winsize *ws ) ;
   int (*set_termiox)(struct tty_struct *tty , struct termiox *tnew ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
};
#line 271 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 107 "include/linux/tty_ldisc.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 145 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 57 "include/linux/tty.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
#line 69 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 183 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 211 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 31 "include/linux/sysrq.h"
struct sysrq_key_op {
   void (*handler)(int  , struct tty_struct * ) ;
   char *help_msg ;
   char *action_msg ;
   int enable_mask ;
};
#line 152 "include/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3] ;
};
#line 178 "include/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 231 "include/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5] ;
};
#line 270 "include/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 291
enum __anonenum_132 {
    FB_BLANK_UNBLANK = 0,
    FB_BLANK_NORMAL = 0 + 1,
    FB_BLANK_VSYNC_SUSPEND = 1 + 1,
    FB_BLANK_HSYNC_SUSPEND = 2 + 1,
    FB_BLANK_POWERDOWN = 3 + 1
} ;
#line 330 "include/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 339 "include/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 348 "include/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 372 "include/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 376 "include/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 30 "include/linux/backlight.h"
struct backlight_device;
#line 31
struct fb_info;
#line 33 "include/linux/backlight.h"
struct backlight_ops {
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
#line 45 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
};
#line 57 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 432 "include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 443
struct fb_videomode;
#line 443 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4] ;
   __u8 monitor[14] ;
   __u8 serial_no[14] ;
   __u8 ascii[14] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 546 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 569 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
   void (*readio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
};
#line 587 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info *info , struct list_head *pagelist ) ;
};
#line 605 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *info , int user ) ;
   int (*fb_release)(struct fb_info *info , int user ) ;
   ssize_t (*fb_read)(struct fb_info *info , char *buf , size_t count , loff_t *ppos ) ;
   ssize_t (*fb_write)(struct fb_info *info , char const   *buf , size_t count , loff_t *ppos ) ;
   int (*fb_check_var)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   int (*fb_set_par)(struct fb_info *info ) ;
   int (*fb_setcolreg)(unsigned int regno , unsigned int red , unsigned int green ,
                       unsigned int blue , unsigned int transp , struct fb_info *info ) ;
   int (*fb_setcmap)(struct fb_cmap *cmap , struct fb_info *info ) ;
   int (*fb_blank)(int blank , struct fb_info *info ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   void (*fb_fillrect)(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
   void (*fb_copyarea)(struct fb_info *info , struct fb_copyarea  const  *region ) ;
   void (*fb_imageblit)(struct fb_info *info , struct fb_image  const  *image ) ;
   int (*fb_cursor)(struct fb_info *info , struct fb_cursor *cursor ) ;
   void (*fb_rotate)(struct fb_info *info , int angle ) ;
   int (*fb_sync)(struct fb_info *info ) ;
   int (*fb_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_compat_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_mmap)(struct fb_info *info , struct vm_area_struct *vma ) ;
   void (*fb_save_state)(struct fb_info *info ) ;
   void (*fb_restore_state)(struct fb_info *info ) ;
   void (*fb_get_caps)(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
};
#line 685 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 694 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 705 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 714 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 725 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 734 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *info , struct fb_tilemap *map ) ;
   void (*fb_tilecopy)(struct fb_info *info , struct fb_tilearea *area ) ;
   void (*fb_tilefill)(struct fb_info *info , struct fb_tilerect *rect ) ;
   void (*fb_tileblit)(struct fb_info *info , struct fb_tileblit *blit ) ;
   void (*fb_tilecursor)(struct fb_info *info , struct fb_tilecursor *cursor ) ;
   int (*fb_get_tilemax)(struct fb_info *info ) ;
};
#line 808 "include/linux/fb.h"
struct fb_info {
   int node ;
   int flags ;
   struct mutex lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
};
#line 1075 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
struct intelfb_par {
   struct drm_device *dev ;
   struct drm_display_mode *our_mode ;
   struct intel_framebuffer *intel_fb ;
   int crtc_count ;
   uint32_t crtc_ids[2] ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___5 {
    false___5 = 0,
    true___5 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
enum tv_margin {
    TV_MARGIN_LEFT = 0,
    TV_MARGIN_TOP = 1,
    TV_MARGIN_RIGHT = 2,
    TV_MARGIN_BOTTOM = 3
} ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
struct intel_tv_priv {
   int type ;
   char *tv_format ;
   int margin[4] ;
   u32 save_TV_H_CTL_1 ;
   u32 save_TV_H_CTL_2 ;
   u32 save_TV_H_CTL_3 ;
   u32 save_TV_V_CTL_1 ;
   u32 save_TV_V_CTL_2 ;
   u32 save_TV_V_CTL_3 ;
   u32 save_TV_V_CTL_4 ;
   u32 save_TV_V_CTL_5 ;
   u32 save_TV_V_CTL_6 ;
   u32 save_TV_V_CTL_7 ;
   u32 save_TV_SC_CTL_1 ;
   u32 save_TV_SC_CTL_2 ;
   u32 save_TV_SC_CTL_3 ;
   u32 save_TV_CSC_Y ;
   u32 save_TV_CSC_Y2 ;
   u32 save_TV_CSC_U ;
   u32 save_TV_CSC_U2 ;
   u32 save_TV_CSC_V ;
   u32 save_TV_CSC_V2 ;
   u32 save_TV_CLR_KNOBS ;
   u32 save_TV_CLR_LEVEL ;
   u32 save_TV_WIN_POS ;
   u32 save_TV_WIN_SIZE ;
   u32 save_TV_FILTER_CTL_1 ;
   u32 save_TV_FILTER_CTL_2 ;
   u32 save_TV_FILTER_CTL_3 ;
   u32 save_TV_H_LUMA[60] ;
   u32 save_TV_H_CHROMA[60] ;
   u32 save_TV_V_LUMA[43] ;
   u32 save_TV_V_CHROMA[43] ;
   u32 save_TV_DAC ;
   u32 save_TV_CTL ;
};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
struct video_levels {
   int blank ;
   int black ;
   int burst ;
};
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
struct color_conversion {
   u16 ry ;
   u16 gy ;
   u16 by ;
   u16 ay ;
   u16 ru ;
   u16 gu ;
   u16 bu ;
   u16 au ;
   u16 rv ;
   u16 gv ;
   u16 bv ;
   u16 av ;
};
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
struct tv_mode {
   char *name ;
   int clock ;
   int refresh ;
   u32 oversample ;
   int hsync_end ;
   int hblank_start ;
   int hblank_end ;
   int htotal ;
   bool progressive ;
   bool trilevel_sync ;
   bool component_only ;
   int vsync_start_f1 ;
   int vsync_start_f2 ;
   int vsync_len ;
   bool veq_ena ;
   int veq_start_f1 ;
   int veq_start_f2 ;
   int veq_len ;
   int vi_end_f1 ;
   int vi_end_f2 ;
   int nbr_end ;
   bool burst_ena ;
   int hburst_start ;
   int hburst_len ;
   int vburst_start_f1 ;
   int vburst_end_f1 ;
   int vburst_start_f2 ;
   int vburst_end_f2 ;
   int vburst_start_f3 ;
   int vburst_end_f3 ;
   int vburst_start_f4 ;
   int vburst_end_f4 ;
   int dda2_size ;
   int dda3_size ;
   int dda1_inc ;
   int dda2_inc ;
   int dda3_inc ;
   u32 sc_reset ;
   bool pal_burst ;
   struct video_levels  const  *composite_levels ;
   struct video_levels  const  *svideo_levels ;
   struct color_conversion  const  *composite_color ;
   struct color_conversion  const  *svideo_color ;
   u32 const   *filter_table ;
   int max_srcw ;
};
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
struct input_res {
   char *name ;
   int w ;
   int h ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___6 {
    false___6 = 0,
    true___6 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_dev_ops;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_device {
   char *name ;
   int type ;
   u32 dvo_reg ;
   u32 gpio ;
   int slave_addr ;
   struct intel_i2c_chan *i2c_bus ;
   struct intel_dvo_dev_ops  const  *dev_ops ;
   void *dev_priv ;
   struct drm_display_mode *panel_fixed_mode ;
   bool panel_wants_dither ;
};
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_dev_ops {
   bool (*init)(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) ;
   void (*create_resources)(struct intel_dvo_device *dvo ) ;
   void (*dpms)(struct intel_dvo_device *dvo , int mode ) ;
   void (*save)(struct intel_dvo_device *dvo ) ;
   void (*restore)(struct intel_dvo_device *dvo ) ;
   int (*mode_valid)(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) ;
   bool (*mode_fixup)(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                      struct drm_display_mode *adjusted_mode ) ;
   void (*prepare)(struct intel_dvo_device *dvo ) ;
   void (*commit)(struct intel_dvo_device *dvo ) ;
   void (*mode_set)(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                    struct drm_display_mode *adjusted_mode ) ;
   enum drm_connector_status (*detect)(struct intel_dvo_device *dvo ) ;
   struct drm_display_mode *(*get_modes)(struct intel_dvo_device *dvo ) ;
   void (*destroy)(struct intel_dvo_device *dvo ) ;
   void (*dump_regs)(struct intel_dvo_device *dvo ) ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___7 {
    false___7 = 0,
    true___7 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
struct ch7xxx_id_struct {
   uint8_t vid ;
   char *name ;
};
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
struct ch7xxx_reg_state {
   uint8_t regs[76] ;
};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
struct ch7xxx_priv {
   bool quiet ;
   struct ch7xxx_reg_state save_reg ;
   struct ch7xxx_reg_state mode_reg ;
   uint8_t save_TCTL ;
   uint8_t save_TPCP ;
   uint8_t save_TPD ;
   uint8_t save_TPVT ;
   uint8_t save_TLPF ;
   uint8_t save_TCT ;
   uint8_t save_PM ;
   uint8_t save_IDF ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___8 {
    false___8 = 0,
    true___8 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
struct ch7017_priv {
   uint8_t save_hapi ;
   uint8_t save_vali ;
   uint8_t save_valo ;
   uint8_t save_ailo ;
   uint8_t save_lvds_pll_vco ;
   uint8_t save_feedback_div ;
   uint8_t save_lvds_control_2 ;
   uint8_t save_outputs_enable ;
   uint8_t save_lvds_power_down ;
   uint8_t save_power_management ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___9 {
    false___9 = 0,
    true___9 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
struct ivch_priv {
   bool quiet ;
   uint16_t width ;
   uint16_t height ;
   uint16_t save_VR01 ;
   uint16_t save_VR40 ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___10 {
    false___10 = 0,
    true___10 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
struct tfp410_save_rec {
   uint8_t ctl1 ;
   uint8_t ctl2 ;
};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
struct tfp410_priv {
   bool quiet ;
   struct tfp410_save_rec saved_reg ;
   struct tfp410_save_rec mode_reg ;
};
#line 15 "include/linux/stddef.h"
enum __anonenum_1___11 {
    false___11 = 0,
    true___11 = 1
} ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
struct sil164_save_rec {
   uint8_t reg8 ;
   uint8_t reg9 ;
   uint8_t regc ;
};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
struct sil164_priv {
   bool quiet ;
   struct sil164_save_rec save_regs ;
   struct sil164_save_rec mode_regs ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 992 "include/acpi/actypes.h"
#pragma pack(1)
#line 1240
#pragma pack()
#line 65 "include/acpi/actbl.h"
#pragma pack(1)
#line 287
#pragma pack()
#line 89 "include/acpi/actbl1.h"
#pragma pack(1)
#line 1340
#pragma pack()
#line 60 "include/acpi/acobject.h"
#pragma pack(8)
#line 444
#pragma pack()
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_header {
   u8 signature[16] ;
   u32 size ;
   u32 opregion_ver ;
   u8 bios_ver[32] ;
   u8 vbios_ver[16] ;
   u8 driver_ver[16] ;
   u32 mboxes ;
   u8 reserved[164] ;
} __attribute__((__packed__)) ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_acpi {
   u32 drdy ;
   u32 csts ;
   u32 cevt ;
   u8 rsvd1[20] ;
   u32 didl[8] ;
   u32 cpdl[8] ;
   u32 cadl[8] ;
   u32 nadl[8] ;
   u32 aslp ;
   u32 tidx ;
   u32 chpd ;
   u32 clid ;
   u32 cdck ;
   u32 sxsw ;
   u32 evts ;
   u32 cnot ;
   u32 nrdy ;
   u8 rsvd2[60] ;
} __attribute__((__packed__)) ;
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_swsci {
   u32 scic ;
   u32 parm ;
   u32 dslp ;
   u8 rsvd[244] ;
} __attribute__((__packed__)) ;
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_asle {
   u32 ardy ;
   u32 aslc ;
   u32 tche ;
   u32 alsi ;
   u32 bclp ;
   u32 pfit ;
   u32 cblv ;
   u16 bclm[20] ;
   u32 cpfm ;
   u32 epfm ;
   u8 plut[74] ;
   u32 pfmb ;
   u8 rsvd[102] ;
} __attribute__((__packed__)) ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 274 "include/drm/drmP.h"
typedef int drm_ioctl_compat_t(struct file *filp , unsigned int cmd , unsigned long arg );
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct _drm_i915_batchbuffer32 {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct _drm_i915_batchbuffer32 drm_i915_batchbuffer32_t;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct _drm_i915_cmdbuffer32 {
   u32 buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct _drm_i915_cmdbuffer32 drm_i915_cmdbuffer32_t;
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_irq_emit32 {
   u32 irq_seq ;
};
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_irq_emit32 drm_i915_irq_emit32_t;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_getparam32 {
   int param ;
   u32 value ;
};
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_getparam32 drm_i915_getparam32_t;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_mem_alloc32 {
   int region ;
   int alignment ;
   int size ;
   u32 region_offset ;
};
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_mem_alloc32 drm_i915_mem_alloc32_t;
#line 221 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 159 "include/linux/moduleparam.h"
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
#line 160
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
#line 67 "include/linux/module.h"
int init_module(void) ;
#line 68
void cleanup_module(void) ;
#line 86
extern struct module __this_module ;
#line 613 "include/linux/pci.h"
extern int ( __attribute__((__warn_unused_result__)) pci_enable_device)(struct pci_dev *dev ) ;
#line 625
extern void pci_disable_device(struct pci_dev *dev ) ;
#line 626
extern void pci_set_master(struct pci_dev *dev ) ;
#line 657
extern int pci_save_state(struct pci_dev *dev ) ;
#line 658
extern int pci_restore_state(struct pci_dev *dev ) ;
#line 659
extern int pci_set_power_state(struct pci_dev *dev , pci_power_t state ) ;
#line 1042 "include/drm/drmP.h"
extern int drm_init(struct drm_driver *driver ) ;
#line 1043
extern void drm_exit(struct drm_driver *driver ) ;
#line 1044
extern int drm_ioctl(struct inode *inode , struct file *filp , unsigned int cmd ,
                     unsigned long arg ) ;
#line 1051
extern int drm_open(struct inode *inode , struct file *filp ) ;
#line 1053
extern int drm_fasync(int fd , struct file *filp , int on ) ;
#line 1054
extern int drm_release(struct inode *inode , struct file *filp ) ;
#line 1060
extern unsigned long drm_core_get_map_ofs(struct drm_map *map ) ;
#line 1061
extern unsigned long drm_core_get_reg_ofs(struct drm_device *dev ) ;
#line 1062
extern unsigned int drm_poll(struct file *filp , struct poll_table_struct *wait ) ;
#line 1193
extern void drm_core_reclaim_buffers(struct drm_device *dev , struct drm_file *filp ) ;
#line 1332
extern int drm_gem_mmap(struct file *filp , struct vm_area_struct *vma ) ;
#line 475 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_ioctl_desc i915_ioctls[37] ;
#line 476
int i915_max_ioctl ;
#line 477
unsigned int i915_fbpercrtc ;
#line 479
int i915_master_create(struct drm_device *dev , struct drm_master *master ) ;
#line 480
void i915_master_destroy(struct drm_device *dev , struct drm_master *master ) ;
#line 484
int i915_driver_load(struct drm_device *dev , unsigned long flags ) ;
#line 485
int i915_driver_unload(struct drm_device *dev ) ;
#line 486
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 487
void i915_driver_lastclose(struct drm_device *dev ) ;
#line 488
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 490
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 492
int i915_driver_device_is_agp(struct drm_device *dev ) ;
#line 493
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 508
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) ;
#line 509
void i915_driver_irq_preinstall(struct drm_device *dev ) ;
#line 510
int i915_driver_irq_postinstall(struct drm_device *dev ) ;
#line 511
void i915_driver_irq_uninstall(struct drm_device *dev ) ;
#line 516
int i915_enable_vblank(struct drm_device *dev , int pipe ) ;
#line 517
void i915_disable_vblank(struct drm_device *dev , int pipe ) ;
#line 518
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) ;
#line 580
int i915_gem_proc_init(struct drm_minor *minor ) ;
#line 581
void i915_gem_proc_cleanup(struct drm_minor *minor ) ;
#line 582
int i915_gem_init_object(struct drm_gem_object *obj ) ;
#line 583
void i915_gem_free_object(struct drm_gem_object *obj ) ;
#line 598
int i915_gem_fault(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
#line 619
int i915_save_state(struct drm_device *dev ) ;
#line 620
int i915_restore_state(struct drm_device *dev ) ;
#line 628
int intel_opregion_init(struct drm_device *dev ) ;
#line 629
void intel_opregion_free(struct drm_device *dev ) ;
#line 157 "include/linux/console.h"
extern bool vgacon_text_force(void) ;
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static unsigned int i915_modeset  =    -1;
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __param_str_modeset[8]  = 
#line 40
  {      'm',      'o',      'd',      'e', 
        's',      'e',      't',      '\000'};
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static struct kernel_param  const  __param_modeset  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_modeset, 256, & param_set_int, & param_get_int, {& i915_modeset}};
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_modesettype40[21]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 40
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      'o',      'd', 
        'e',      's',      'e',      't', 
        ':',      'i',      'n',      't', 
        '\000'};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
unsigned int i915_fbpercrtc  =    0;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __param_str_fbpercrtc[10]  = 
#line 43
  {      'f',      'b',      'p',      'e', 
        'r',      'c',      'r',      't', 
        'c',      '\000'};
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static struct kernel_param  const  __param_fbpercrtc  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_fbpercrtc, 256, & param_set_int, & param_get_int, {& i915_fbpercrtc}};
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_fbpercrtctype43[23]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 43
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'f',      'b',      'p', 
        'e',      'r',      'c',      'r', 
        't',      'c',      ':',      'i', 
        'n',      't',      '\000'};
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static struct pci_device_id pciidlist[24]  = 
#line 45
  {      {32902, 13687, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 9570, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 13698, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 9586, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 9602, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 9610, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 9618, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10098, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10146, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10158, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10610, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10626, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10642, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10658, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10674, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10690, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10706, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10754, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10770, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 10818, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 11778, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 11794, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {32902, 11810, ~ 0, ~ 0, 768 << 8, 16776960, 0}, 
        {0, 0, 0, 0U, 0U, 0U, 0UL}};
#line 50
extern struct pci_device_id  const  __mod_pci_device_table  __attribute__((__unused__,
__alias__("pciidlist"))) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_suspend(struct drm_device *dev , pm_message_t state ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 55
  dev_priv = dev->dev_private;
#line 57
  if (! dev || ! dev_priv) {
#line 58
    printk("<3>dev: %p, dev_priv: %p\n", dev, dev_priv);
#line 59
    printk("<3>DRM not initialized, aborting suspend.\n");
#line 60
    return (-19);
  } else {

  }
#line 63
  if (state.event == 8) {
#line 64
    return (0);
  } else {

  }
#line 66
  pci_save_state(dev->pdev);
#line 68
  i915_save_state(dev);
#line 70
  intel_opregion_free(dev);
#line 72
  if (state.event == 2) {
#line 74
    pci_disable_device(dev->pdev);
#line 75
    pci_set_power_state(dev->pdev, 3);
  } else {

  }
#line 78
  return (0);
}
}
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_resume(struct drm_device *dev ) 
{ 
  int tmp ;

  {
#line 83
  pci_set_power_state(dev->pdev, 0);
#line 84
  pci_restore_state(dev->pdev);
#line 85
  tmp = pci_enable_device(dev->pdev);
#line 85
  if (tmp) {
#line 86
    return (-1);
  } else {

  }
#line 87
  pci_set_master(dev->pdev);
#line 89
  i915_restore_state(dev);
#line 91
  intel_opregion_init(dev);
#line 93
  return (0);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static struct vm_operations_struct i915_gem_vm_ops  = 
#line 96
     {0, 0, & i915_gem_fault, 0, 0, 0, 0, 0};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static struct drm_driver driver  = 
#line 100
     {& i915_driver_load, 0, & i915_driver_open, & i915_driver_preclose, & i915_driver_postclose,
    & i915_driver_lastclose, & i915_driver_unload, & i915_suspend, & i915_resume,
    0, 0, 0, 0, 0, 0, 0, 0, & i915_get_vblank_counter, & i915_enable_vblank, & i915_disable_vblank,
    & i915_driver_device_is_agp, & i915_driver_irq_handler, & i915_driver_irq_preinstall,
    & i915_driver_irq_postinstall, & i915_driver_irq_uninstall, & drm_core_reclaim_buffers,
    0, 0, & drm_core_get_map_ofs, & drm_core_get_reg_ofs, 0, & i915_master_create,
    & i915_master_destroy, & i915_gem_proc_init, & i915_gem_proc_cleanup, & i915_gem_init_object,
    & i915_gem_free_object, & i915_gem_vm_ops, 1, 6, 0, "i915", "Intel Graphics",
    "20080730", (((1 | 2) | 64) | 128) | 4096, 0, i915_ioctls, 0, {& __this_module,
                                                                   0, 0, 0, 0, 0,
                                                                   0, & drm_poll,
                                                                   & drm_ioctl, 0,
                                                                   & i915_compat_ioctl,
                                                                   & drm_gem_mmap,
                                                                   & drm_open, 0,
                                                                   & drm_release,
                                                                   0, 0, & drm_fasync,
                                                                   0, 0, 0, 0, 0,
                                                                   0, 0, 0, 0}, {{0,
                                                                                  0},
                                                                                 "i915",
                                                                                 pciidlist,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 0,
                                                                                 {0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0,
                                                                                  0},
                                                                                 {{{0U},
                                                                                   0U,
                                                                                   0U,
                                                                                   0},
                                                                                  {0,
                                                                                   0}}},
    {0, 0}};
#line 160
static int i915_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_init(void) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
#line 162
  driver.num_ioctls = i915_max_ioctl;
#line 174
  if (i915_modeset != 0U) {
#line 175
    driver.driver_features = driver.driver_features | 8192U;
  } else {

  }
#line 177
  if (i915_modeset == 1U) {
#line 178
    driver.driver_features = driver.driver_features | 8192U;
  } else {

  }
#line 181
  tmp = vgacon_text_force();
#line 181
  if (tmp && i915_modeset == 4294967295U) {
#line 182
    driver.driver_features = driver.driver_features & (unsigned int )(~ 8192);
  } else {

  }
#line 185
  tmp___0 = drm_init(& driver);
#line 185
  return (tmp___0);
}
}
#line 188
static void i915_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static void i915_exit(void) 
{ 


  {
#line 190
  drm_exit(& driver);
#line 191
  return;
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 193
  tmp = i915_init();
#line 193
  return (tmp);
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
void cleanup_module(void) 
{ 


  {
#line 194
  i915_exit();
#line 194
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_author196[31]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 196
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'T', 
        'u',      'n',      'g',      's', 
        't',      'e',      'n',      ' ', 
        'G',      'r',      'a',      'p', 
        'h',      'i',      'c',      's', 
        ',',      ' ',      'I',      'n', 
        'c',      '.',      '\000'};
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_description197[27]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 197
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'I',      'n',      't',      'e', 
        'l',      ' ',      'G',      'r', 
        'a',      'p',      'h',      'i', 
        'c',      's',      '\000'};
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_license198[34]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 198
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      ' ', 
        'a',      'n',      'd',      ' ', 
        'a',      'd',      'd',      'i', 
        't',      'i',      'o',      'n', 
        'a',      'l',      ' ',      'r', 
        'i',      'g',      'h',      't', 
        's',      '\000'};
#line 216
void ldv_check_final_state(void) ;
#line 225
extern void ldv_initialize(void) ;
#line 228
extern void ldv_handler_precall(void) ;
#line 231
extern int nondet_int(void) ;
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
int LDV_IN_INTERRUPT  ;
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_drv.c"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_device *var_group1 ;
  pm_message_t var_i915_suspend_0_p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 281
  LDV_IN_INTERRUPT = 1;
#line 290
  ldv_initialize();
#line 301
  ldv_handler_precall();
#line 302
  tmp = i915_init();
#line 302
  if (tmp) {
#line 303
    goto ldv_final;
  } else {

  }
#line 307
  while (1) {
#line 307
    tmp___1 = nondet_int();
#line 307
    if (tmp___1) {

    } else {
#line 307
      break;
    }
#line 310
    tmp___0 = nondet_int();
#line 310
    switch (tmp___0) {
    case 0: 
#line 323
    ldv_handler_precall();
#line 324
    i915_suspend(var_group1, var_i915_suspend_0_p1);
#line 339
    break;
    case 1: 
#line 351
    ldv_handler_precall();
#line 352
    i915_resume(var_group1);
#line 367
    break;
    default: 
#line 368
    break;
    }
  }
#line 389
  ldv_handler_precall();
#line 390
  i915_exit();
  ldv_final: 
#line 393
  ldv_check_final_state();
#line 396
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 37 "include/asm-generic/bug.h"
extern void ( /* format attribute */  warn_slowpath)(char const   *file , int const   line ,
                                                     char const   *fmt  , ...) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 105 "include/linux/string.h"
extern char *kstrdup(char const   *s , gfp_t gfp ) ;
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pda.h"
extern  __attribute__((__noreturn__)) void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (sizeof(_proxy_pda.kernelstack)) {
  case 2UL: 
#line 208
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  case 4UL: 
#line 208
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  case 8UL: 
#line 208
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  default: 
#line 208
  __bad_pda_field();
  }
#line 208
  ti = (void *)((ret__ + (unsigned long )(5 * 8)) - ((1UL << 12) << 1));
#line 209
  return (ti);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 135 "include/linux/mutex.h"
void mutex_lock(struct mutex *lock ) ;
#line 149
void mutex_unlock(struct mutex *lock ) ;
#line 47 "include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int msecs ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 210 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 212
  if (size != (size_t )0 && n > ~ 0UL / size) {
#line 213
    return ((void *)0);
  } else {

  }
#line 214
  tmp = __kmalloc(n * size, flags | 32768U);
#line 214
  return (tmp);
}
}
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 20
  __asm__  volatile   ("mov"
                       "l"
                       " %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("mov"
                       "l"
                       " %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 28
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
extern void *ioremap_nocache(resource_size_t offset , unsigned long size ) ;
#line 181 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void *ioremap(resource_size_t offset , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 183
  tmp = ioremap_nocache(offset, size);
#line 183
  return (tmp);
}
}
#line 186
extern void iounmap(void volatile   *addr ) ;
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
extern void *ioremap_wc(unsigned long offset , unsigned long size ) ;
#line 532 "include/linux/pci.h"
extern void pci_dev_put(struct pci_dev *dev ) ;
#line 569
extern struct pci_dev *pci_get_bus_and_slot(unsigned int bus , unsigned int devfn ) ;
#line 575
extern int pci_bus_read_config_word(struct pci_bus *bus , unsigned int devfn , int where ,
                                    u16 *val ) ;
#line 590 "include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev *dev , int where , u16 *val ) 
{ 
  int tmp ;

  {
#line 592
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
#line 592
  return (tmp);
}
}
#line 778
extern int pci_enable_msi(struct pci_dev *dev ) ;
#line 780
extern void pci_disable_msi(struct pci_dev *dev ) ;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_user_generic)(void *to ,
                                                                                  void const   *from ,
                                                                                  unsigned int len ) ;
#line 21
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int ( __attribute__((__warn_unused_result__, __always_inline__)) __copy_from_user)(void *dst ,
                                                                                                   void const   *src ,
                                                                                                   unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 31
  ret = 0;
#line 33
  tmp = copy_user_generic(dst, (void *)src, size);
#line 33
  return (tmp);
#line 34
  switch (size) {
  case 1U: 
#line 35
  __asm__  volatile   ("1:\tmov"
                       "b"
                       " %2,%"
                       "b"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "b"
                       " %"
                       "b"
                       "1,%"
                       "b"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=q" (*((u8 *)dst)): "m" (*((struct __large_struct *)((u8 *)src))),
                       "i" (1), "0" (ret));
#line 37
  return (ret);
  case 2U: 
#line 38
  __asm__  volatile   ("1:\tmov"
                       "w"
                       " %2,%"
                       "w"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "w"
                       " %"
                       "w"
                       "1,%"
                       "w"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u16 *)dst)): "m" (*((struct __large_struct *)((u16 *)src))),
                       "i" (2), "0" (ret));
#line 40
  return (ret);
  case 4U: 
#line 41
  __asm__  volatile   ("1:\tmov"
                       "l"
                       " %2,%"
                       "k"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "l"
                       " %"
                       "k"
                       "1,%"
                       "k"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u32 *)dst)): "m" (*((struct __large_struct *)((u32 *)src))),
                       "i" (4), "0" (ret));
#line 43
  return (ret);
  case 8U: 
#line 44
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (8), "0" (ret));
#line 46
  return (ret);
  case 10U: 
#line 48
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (10), "0" (ret));
#line 50
  tmp___0 = __builtin_expect(! (! ret), 0);
#line 50
  if (tmp___0) {
#line 51
    return (ret);
  } else {

  }
#line 52
  __asm__  volatile   ("1:\tmov"
                       "w"
                       " %2,%"
                       "w"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "w"
                       " %"
                       "w"
                       "1,%"
                       "w"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u16 *)((char *)dst + 8))): "m" (*((struct __large_struct *)((u16 *)((char *)src + 8)))),
                       "i" (2), "0" (ret));
#line 55
  return (ret);
  case 16U: 
#line 57
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (16), "0" (ret));
#line 59
  tmp___1 = __builtin_expect(! (! ret), 0);
#line 59
  if (tmp___1) {
#line 60
    return (ret);
  } else {

  }
#line 61
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)((char *)dst + 8))): "m" (*((struct __large_struct *)((u64 *)((char *)src + 8)))),
                       "i" (8), "0" (ret));
#line 64
  return (ret);
  default: 
#line 66
  tmp___2 = copy_user_generic(dst, (void *)src, size);
#line 66
  return (tmp___2);
  }
}
}
#line 978 "include/drm/drmP.h"
__inline static int drm_core_check_feature(struct drm_device *dev , int feature ) 
{ 


  {
#line 981
  return ((dev->driver)->driver_features & (unsigned int )feature ? 1 : 0);
}
}
#line 1184
extern unsigned long drm_get_resource_start(struct drm_device *dev , unsigned int resource ) ;
#line 1186
extern unsigned long drm_get_resource_len(struct drm_device *dev , unsigned int resource ) ;
#line 1200
extern int drm_irq_install(struct drm_device *dev ) ;
#line 1201
extern int drm_irq_uninstall(struct drm_device *dev ) ;
#line 1206
extern int drm_vblank_init(struct drm_device *dev , int num_crtcs ) ;
#line 1265
extern unsigned int drm_debug ;
#line 1293
extern drm_dma_handle_t *drm_pci_alloc(struct drm_device *dev , size_t size , size_t align ,
                                       dma_addr_t maxaddr ) ;
#line 1296
extern void drm_pci_free(struct drm_device *dev , drm_dma_handle_t *dmah ) ;
#line 1318
extern int drm_mm_init(struct drm_mm *mm , unsigned long start , unsigned long size ) ;
#line 1319
extern void drm_mm_takedown(struct drm_mm *mm ) ;
#line 1387
extern void drm_core_ioremap(struct drm_map *map , struct drm_device *dev ) ;
#line 1389
extern void drm_core_ioremapfree(struct drm_map *map , struct drm_device *dev ) ;
#line 1425 "include/drm/drmP.h"
__inline static void *drm_alloc(size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1427
  tmp = kmalloc(size, (16U | 64U) | 128U);
#line 1427
  return (tmp);
}
}
#line 1431 "include/drm/drmP.h"
__inline static void drm_free(void *pt , size_t size , int area ) 
{ 


  {
#line 1433
  kfree(pt);
#line 1434
  return;
}
}
#line 1437 "include/drm/drmP.h"
__inline static void *drm_calloc(size_t nmemb , size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1439
  tmp = kcalloc(nmemb, size, (16U | 64U) | 128U);
#line 1439
  return (tmp);
}
}
#line 94 "include/drm/drm_crtc_helper.h"
extern bool drm_helper_initial_config(struct drm_device *dev , bool can_grow ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
void intelfb_restore(void) ;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
bool intel_init_bios(struct drm_device *dev ) ;
#line 87 "include/linux/io-mapping.h"
__inline static struct io_mapping *io_mapping_create_wc(unsigned long base , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 90
  tmp = ioremap_wc(base, size);
#line 90
  return ((struct io_mapping *)tmp);
}
}
#line 93 "include/linux/io-mapping.h"
__inline static void io_mapping_free(struct io_mapping *mapping ) 
{ 


  {
#line 96
  iounmap(mapping);
#line 97
  return;
}
}
#line 483 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_kernel_lost_context(struct drm_device *dev ) ;
#line 495
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) ;
#line 500
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 502
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 512
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 514
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 519
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 531
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 533
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 535
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 537
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 539
void i915_mem_takedown(struct mem_block **heap ) ;
#line 540
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) ;
#line 543
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 545
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 547
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 549
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 551
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 553
int i915_gem_mmap_gtt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 555
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 557
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 559
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 561
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 563
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 565
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 567
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 569
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 571
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 573
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 575
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 577
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 579
void i915_gem_load(struct drm_device *dev ) ;
#line 586
void i915_gem_lastclose(struct drm_device *dev ) ;
#line 594
int i915_gem_init_ringbuffer(struct drm_device *dev ) ;
#line 595
void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) ;
#line 596
int i915_gem_do_init(struct drm_device *dev , unsigned long start , unsigned long end ) ;
#line 640
void intel_modeset_init(struct drm_device *dev ) ;
#line 641
void intel_modeset_cleanup(struct drm_device *dev ) ;
#line 719
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) ;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_ring_buffer_t *ring ;
  u32 acthd_reg ;
  u32 last_acthd ;
  unsigned int tmp ;
  u32 acthd ;
  u32 last_head ;
  unsigned int tmp___0 ;
  int i ;
  unsigned int tmp___1 ;

  {
#line 43
  dev_priv = dev->dev_private;
#line 44
  master_priv = ((dev->primary)->master)->driver_priv;
#line 45
  ring = & dev_priv->ring;
#line 46
  acthd_reg = ((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810 ? 8308 : 8392;
#line 47
  tmp = readl(dev_priv->regs + acthd_reg);
#line 47
  last_acthd = tmp;
#line 49
  tmp___0 = readl(dev_priv->regs + 8244);
#line 49
  last_head = tmp___0 & 2097148U;
#line 52
  i = 0;
#line 52
  while (1) {
#line 52
    if (i < 100000) {

    } else {
#line 52
      break;
    }
#line 53
    tmp___1 = readl(dev_priv->regs + 8244);
#line 53
    ring->head = tmp___1 & 2097148U;
#line 54
    acthd = readl(dev_priv->regs + acthd_reg);
#line 55
    ring->space = ring->head - (ring->tail + 8);
#line 56
    if (ring->space < 0) {
#line 57
      ring->space = (unsigned long )ring->space + ring->Size;
    } else {

    }
#line 58
    if (ring->space >= n) {
#line 59
      return (0);
    } else {

    }
#line 61
    if (master_priv->sarea_priv) {
#line 62
      (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 4;
    } else {

    }
#line 64
    if ((u32 )ring->head != last_head) {
#line 65
      i = 0;
    } else {

    }
#line 66
    if (acthd != last_acthd) {
#line 67
      i = 0;
    } else {

    }
#line 69
    last_head = ring->head;
#line 70
    last_acthd = acthd;
#line 71
    msleep_interruptible(10);
#line 52
    i = i + 1;
  }
#line 75
  return (-16);
}
}
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_init_phys_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 84
  dev_priv = dev->dev_private;
#line 86
  dev_priv->status_page_dmah = drm_pci_alloc(dev, 1UL << 12, 1UL << 12, 4294967295U);
#line 89
  if (! dev_priv->status_page_dmah) {
#line 90
    printk("<3>[drm:%s] *ERROR* Can not allocate hardware status page\n", "i915_init_phys_hws");
#line 91
    return (-12);
  } else {

  }
#line 93
  dev_priv->hw_status_page = (dev_priv->status_page_dmah)->vaddr;
#line 94
  dev_priv->dma_status_page = (dev_priv->status_page_dmah)->busaddr;
#line 96
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 98
  writel(dev_priv->dma_status_page, dev_priv->regs + 8320);
#line 99
  while (1) {
#line 99
    if (drm_debug) {
#line 99
      printk("<7>[drm:%s] Enabled hardware status page\n", "i915_init_phys_hws");
    } else {

    }
#line 99
    break;
  }
#line 100
  return (0);
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static void i915_free_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 109
  dev_priv = dev->dev_private;
#line 110
  if (dev_priv->status_page_dmah) {
#line 111
    drm_pci_free(dev, dev_priv->status_page_dmah);
#line 112
    dev_priv->status_page_dmah = (void *)0;
  } else {

  }
#line 115
  if (dev_priv->status_gfx_addr) {
#line 116
    dev_priv->status_gfx_addr = 0;
#line 117
    drm_core_ioremapfree(& dev_priv->hws_map, dev);
  } else {

  }
#line 121
  writel(536866816, dev_priv->regs + 8320);
#line 122
  return;
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_kernel_lost_context(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_ring_buffer_t *ring ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 126
  dev_priv = dev->dev_private;
#line 128
  ring = & dev_priv->ring;
#line 134
  tmp = drm_core_check_feature(dev, 8192);
#line 134
  if (tmp) {
#line 135
    return;
  } else {

  }
#line 137
  tmp___0 = readl(dev_priv->regs + 8244);
#line 137
  ring->head = tmp___0 & 2097148U;
#line 138
  tmp___1 = readl(dev_priv->regs + 8240);
#line 138
  ring->tail = tmp___1 & 2097144U;
#line 139
  ring->space = ring->head - (ring->tail + 8);
#line 140
  if (ring->space < 0) {
#line 141
    ring->space = (unsigned long )ring->space + ring->Size;
  } else {

  }
#line 143
  if (! (dev->primary)->master) {
#line 144
    return;
  } else {

  }
#line 146
  master_priv = ((dev->primary)->master)->driver_priv;
#line 147
  if (ring->head == ring->tail && master_priv->sarea_priv) {
#line 148
    (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 1;
  } else {

  }
#line 149
  return;
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_cleanup(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 153
  dev_priv = dev->dev_private;
#line 158
  if (dev->irq_enabled) {
#line 159
    drm_irq_uninstall(dev);
  } else {

  }
#line 161
  if (dev_priv->ring.virtual_start) {
#line 162
    drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 163
    dev_priv->ring.virtual_start = (void *)0;
#line 164
    dev_priv->ring.map.handle = (void *)0;
#line 165
    dev_priv->ring.map.size = 0;
  } else {

  }
#line 169
  if ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818)) {
#line 170
    i915_free_hws(dev);
  } else {

  }
#line 172
  return (0);
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_initialize(struct drm_device *dev , drm_i915_init_t *init ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;

  {
#line 177
  dev_priv = dev->dev_private;
#line 178
  master_priv = ((dev->primary)->master)->driver_priv;
#line 180
  if (init->ring_size != 0U) {
#line 181
    if ((unsigned long )dev_priv->ring.ring_obj != (unsigned long )((void *)0)) {
#line 182
      i915_dma_cleanup(dev);
#line 183
      printk("<3>[drm:%s] *ERROR* Client tried to initialize ringbuffer in GEM mode\n",
             "i915_initialize");
#line 185
      return (-22);
    } else {

    }
#line 188
    dev_priv->ring.Size = init->ring_size;
#line 189
    dev_priv->ring.tail_mask = dev_priv->ring.Size - 1UL;
#line 191
    dev_priv->ring.map.offset = init->ring_start;
#line 192
    dev_priv->ring.map.size = init->ring_size;
#line 193
    dev_priv->ring.map.type = 0;
#line 194
    dev_priv->ring.map.flags = 0;
#line 195
    dev_priv->ring.map.mtrr = 0;
#line 197
    drm_core_ioremap(& dev_priv->ring.map, dev);
#line 199
    if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 200
      i915_dma_cleanup(dev);
#line 201
      printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
             "i915_initialize");
#line 203
      return (-12);
    } else {

    }
  } else {

  }
#line 207
  dev_priv->ring.virtual_start = dev_priv->ring.map.handle;
#line 209
  dev_priv->cpp = init->cpp;
#line 210
  dev_priv->back_offset = init->back_offset;
#line 211
  dev_priv->front_offset = init->front_offset;
#line 212
  dev_priv->current_page = 0;
#line 213
  if (master_priv->sarea_priv) {
#line 214
    (master_priv->sarea_priv)->pf_current_page = 0;
  } else {

  }
#line 218
  dev_priv->allow_batchbuffer = 1;
#line 220
  return (0);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_resume(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 225
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 227
  while (1) {
#line 227
    if (drm_debug) {
#line 227
      printk("<7>[drm:%s] %s\n", "i915_dma_resume", "i915_dma_resume");
    } else {

    }
#line 227
    break;
  }
#line 229
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 230
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_dma_resume");
#line 232
    return (-12);
  } else {

  }
#line 236
  if (! dev_priv->hw_status_page) {
#line 237
    printk("<3>[drm:%s] *ERROR* Can not find hardware status page\n", "i915_dma_resume");
#line 238
    return (-22);
  } else {

  }
#line 240
  while (1) {
#line 240
    if (drm_debug) {
#line 240
      printk("<7>[drm:%s] hw status page @ %p\n", "i915_dma_resume", dev_priv->hw_status_page);
    } else {

    }
#line 240
    break;
  }
#line 242
  if (dev_priv->status_gfx_addr != 0U) {
#line 243
    writel(dev_priv->status_gfx_addr, dev_priv->regs + 8320);
  } else {
#line 245
    writel(dev_priv->dma_status_page, dev_priv->regs + 8320);
  }
#line 246
  while (1) {
#line 246
    if (drm_debug) {
#line 246
      printk("<7>[drm:%s] Enabled hardware status page\n", "i915_dma_resume");
    } else {

    }
#line 246
    break;
  }
#line 248
  return (0);
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_init(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_init_t *init ;
  int retcode ;

  {
#line 254
  init = data;
#line 255
  retcode = 0;
#line 257
  switch ((unsigned int )init->func) {
  case (unsigned int )I915_INIT_DMA: 
#line 259
  retcode = i915_initialize(dev, init);
#line 260
  break;
  case (unsigned int )I915_CLEANUP_DMA: 
#line 262
  retcode = i915_dma_cleanup(dev);
#line 263
  break;
  case (unsigned int )I915_RESUME_DMA: 
#line 265
  retcode = i915_dma_resume(dev);
#line 266
  break;
  default: 
#line 268
  retcode = -22;
#line 269
  break;
  }
#line 272
  return (retcode);
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int do_validate_cmd(int cmd ) 
{ 


  {
#line 286
  switch ((cmd >> 29) & 7) {
  case 0: 
#line 288
  switch ((cmd >> 23) & 63) {
  case 0: 
#line 290
  return (1);
  case 4: 
#line 292
  return (1);
  default: 
#line 294
  return (0);
  }
#line 296
  break;
  case 1: 
#line 298
  return (0);
  case 2: 
#line 300
  return ((cmd & 255) + 2);
  case 3: 
#line 302
  if (((cmd >> 24) & 31) <= 24) {
#line 303
    return (1);
  } else {

  }
#line 305
  switch ((cmd >> 24) & 31) {
  case 28: 
#line 307
  return (1);
  case 29: 
#line 309
  switch ((cmd >> 16) & 255) {
  case 3: 
#line 311
  return ((cmd & 31) + 2);
  case 4: 
#line 313
  return ((cmd & 15) + 2);
  default: 
#line 315
  return ((cmd & 65535) + 2);
  }
  case 30: 
#line 318
  if (cmd & (1 << 23)) {
#line 319
    return ((cmd & 65535) + 1);
  } else {
#line 321
    return (1);
  }
  case 31: 
#line 323
  if ((cmd & (1 << 23)) == 0) {
#line 324
    return ((cmd & 131071) + 2);
  } else
#line 325
  if (cmd & (1 << 17)) {
#line 326
    if ((cmd & 65535) == 0) {
#line 327
      return (0);
    } else {
#line 329
      return (((cmd & 65535) + 1) / 2 + 1);
    }
  } else {
#line 331
    return (2);
  }
  default: 
#line 333
  return (0);
  }
  default: 
#line 336
  return (0);
  }
#line 339
  return (0);
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int validate_cmd(int cmd ) 
{ 
  int ret ;
  int tmp ;

  {
#line 344
  tmp = do_validate_cmd(cmd);
#line 344
  ret = tmp;
#line 348
  return (ret);
}
}
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_emit_cmds(struct drm_device *dev , int *buffer , int dwords ) 
{ 
  drm_i915_private_t *dev_priv ;
  int i ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int cmd ;
  int sz ;
  int tmp ;
  int tmp___0 ;

  {
#line 353
  dev_priv = dev->dev_private;
#line 357
  if ((unsigned long )(dwords + 1) * sizeof(int ) >= dev_priv->ring.Size - 8UL) {
#line 358
    return (-22);
  } else {

  }
#line 360
  while (1) {
#line 360
    if (dev_priv->ring.space < ((dwords + 1) & ~ 1) * 4) {
#line 360
      i915_wait_ring(dev, ((dwords + 1) & ~ 1) * 4, "i915_emit_cmds");
    } else {

    }
#line 360
    outcount = 0;
#line 360
    outring = dev_priv->ring.tail;
#line 360
    ringmask = dev_priv->ring.tail_mask;
#line 360
    virt = dev_priv->ring.virtual_start;
#line 360
    break;
  }
#line 362
  i = 0;
#line 362
  while (1) {
#line 362
    if (i < dwords) {

    } else {
#line 362
      break;
    }
#line 365
    tmp = __copy_from_user(& cmd, buffer + i, sizeof(cmd));
#line 365
    if (tmp) {
#line 366
      return (-22);
    } else {

    }
#line 368
    sz = validate_cmd(cmd);
#line 368
    if (sz == 0 || i + sz > dwords) {
#line 369
      return (-22);
    } else {

    }
#line 371
    while (1) {
#line 371
      *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 371
      outcount = outcount + 1U;
#line 371
      outring = outring + 4U;
#line 371
      outring = outring & ringmask;
#line 371
      break;
    }
#line 373
    while (1) {
#line 373
      i = i + 1;
#line 373
      sz = sz - 1;
#line 373
      if (sz) {

      } else {
#line 373
        break;
      }
#line 374
      tmp___0 = __copy_from_user(& cmd, buffer + i, sizeof(cmd));
#line 374
      if (tmp___0) {
#line 376
        return (-22);
      } else {

      }
#line 378
      while (1) {
#line 378
        *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 378
        outcount = outcount + 1U;
#line 378
        outring = outring + 4U;
#line 378
        outring = outring & ringmask;
#line 378
        break;
      }
    }
  }
#line 382
  if (dwords & 1) {
#line 383
    while (1) {
#line 383
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 383
      outcount = outcount + 1U;
#line 383
      outring = outring + 4U;
#line 383
      outring = outring & ringmask;
#line 383
      break;
    }
  } else {

  }
#line 385
  while (1) {
#line 385
    dev_priv->ring.tail = outring;
#line 385
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 385
    writel(outring, dev_priv->regs + 8240);
#line 385
    break;
  }
#line 387
  return (0);
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect box ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int tmp ;

  {
#line 395
  dev_priv = dev->dev_private;
#line 399
  tmp = __copy_from_user(& box, boxes + i, sizeof(box));
#line 399
  if (tmp) {
#line 400
    return (-14);
  } else {

  }
#line 403
  if ((((int )box.y2 <= (int )box.y1 || (int )box.x2 <= (int )box.x1) || (int )box.y2 <= 0) || (int )box.x2 <= 0) {
#line 404
    printk("<3>[drm:%s] *ERROR* Bad box %d,%d..%d,%d\n", "i915_emit_box", box.x1,
           box.y1, box.x2, box.y2);
#line 406
    return (-22);
  } else {

  }
#line 409
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 410
    while (1) {
#line 410
      if (dev_priv->ring.space < 4 * 4) {
#line 410
        i915_wait_ring(dev, 4 * 4, "i915_emit_box");
      } else {

      }
#line 410
      outcount = 0;
#line 410
      outring = dev_priv->ring.tail;
#line 410
      ringmask = dev_priv->ring.tail_mask;
#line 410
      virt = dev_priv->ring.virtual_start;
#line 410
      break;
    }
#line 411
    while (1) {
#line 411
      *((unsigned int volatile   *)(virt + outring)) = (30976 << 16) | 2;
#line 411
      outcount = outcount + 1U;
#line 411
      outring = outring + 4U;
#line 411
      outring = outring & ringmask;
#line 411
      break;
    }
#line 412
    while (1) {
#line 412
      *((unsigned int volatile   *)(virt + outring)) = ((int )box.x1 & 65535) | ((int )box.y1 << 16);
#line 412
      outcount = outcount + 1U;
#line 412
      outring = outring + 4U;
#line 412
      outring = outring & ringmask;
#line 412
      break;
    }
#line 413
    while (1) {
#line 413
      *((unsigned int volatile   *)(virt + outring)) = (((int )box.x2 - 1) & 65535) | (((int )box.y2 - 1) << 16);
#line 413
      outcount = outcount + 1U;
#line 413
      outring = outring + 4U;
#line 413
      outring = outring & ringmask;
#line 413
      break;
    }
#line 414
    while (1) {
#line 414
      *((unsigned int volatile   *)(virt + outring)) = DR4;
#line 414
      outcount = outcount + 1U;
#line 414
      outring = outring + 4U;
#line 414
      outring = outring & ringmask;
#line 414
      break;
    }
#line 415
    while (1) {
#line 415
      dev_priv->ring.tail = outring;
#line 415
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 415
      writel(outring, dev_priv->regs + 8240);
#line 415
      break;
    }
  } else {
#line 417
    while (1) {
#line 417
      if (dev_priv->ring.space < 6 * 4) {
#line 417
        i915_wait_ring(dev, 6 * 4, "i915_emit_box");
      } else {

      }
#line 417
      outcount = 0;
#line 417
      outring = dev_priv->ring.tail;
#line 417
      ringmask = dev_priv->ring.tail_mask;
#line 417
      virt = dev_priv->ring.virtual_start;
#line 417
      break;
    }
#line 418
    while (1) {
#line 418
      *((unsigned int volatile   *)(virt + outring)) = (((3 << 29) | (29 << 24)) | (128 << 16)) | 3;
#line 418
      outcount = outcount + 1U;
#line 418
      outring = outring + 4U;
#line 418
      outring = outring & ringmask;
#line 418
      break;
    }
#line 419
    while (1) {
#line 419
      *((unsigned int volatile   *)(virt + outring)) = DR1;
#line 419
      outcount = outcount + 1U;
#line 419
      outring = outring + 4U;
#line 419
      outring = outring & ringmask;
#line 419
      break;
    }
#line 420
    while (1) {
#line 420
      *((unsigned int volatile   *)(virt + outring)) = ((int )box.x1 & 65535) | ((int )box.y1 << 16);
#line 420
      outcount = outcount + 1U;
#line 420
      outring = outring + 4U;
#line 420
      outring = outring & ringmask;
#line 420
      break;
    }
#line 421
    while (1) {
#line 421
      *((unsigned int volatile   *)(virt + outring)) = (((int )box.x2 - 1) & 65535) | (((int )box.y2 - 1) << 16);
#line 421
      outcount = outcount + 1U;
#line 421
      outring = outring + 4U;
#line 421
      outring = outring & ringmask;
#line 421
      break;
    }
#line 422
    while (1) {
#line 422
      *((unsigned int volatile   *)(virt + outring)) = DR4;
#line 422
      outcount = outcount + 1U;
#line 422
      outring = outring + 4U;
#line 422
      outring = outring & ringmask;
#line 422
      break;
    }
#line 423
    while (1) {
#line 423
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 423
      outcount = outcount + 1U;
#line 423
      outring = outring + 4U;
#line 423
      outring = outring & ringmask;
#line 423
      break;
    }
#line 424
    while (1) {
#line 424
      dev_priv->ring.tail = outring;
#line 424
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 424
      writel(outring, dev_priv->regs + 8240);
#line 424
      break;
    }
  }
#line 427
  return (0);
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static void i915_emit_breadcrumb(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 436
  dev_priv = dev->dev_private;
#line 437
  master_priv = ((dev->primary)->master)->driver_priv;
#line 440
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 441
  if ((unsigned long )dev_priv->counter > 2147483647UL) {
#line 442
    dev_priv->counter = 0;
  } else {

  }
#line 443
  if (master_priv->sarea_priv) {
#line 444
    (master_priv->sarea_priv)->last_enqueue = dev_priv->counter;
  } else {

  }
#line 446
  while (1) {
#line 446
    if (dev_priv->ring.space < 4 * 4) {
#line 446
      i915_wait_ring(dev, 4 * 4, "i915_emit_breadcrumb");
    } else {

    }
#line 446
    outcount = 0;
#line 446
    outring = dev_priv->ring.tail;
#line 446
    ringmask = dev_priv->ring.tail_mask;
#line 446
    virt = dev_priv->ring.virtual_start;
#line 446
    break;
  }
#line 447
  while (1) {
#line 447
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 447
    outcount = outcount + 1U;
#line 447
    outring = outring + 4U;
#line 447
    outring = outring & ringmask;
#line 447
    break;
  }
#line 448
  while (1) {
#line 448
    *((unsigned int volatile   *)(virt + outring)) = 33 << 2;
#line 448
    outcount = outcount + 1U;
#line 448
    outring = outring + 4U;
#line 448
    outring = outring & ringmask;
#line 448
    break;
  }
#line 449
  while (1) {
#line 449
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 449
    outcount = outcount + 1U;
#line 449
    outring = outring + 4U;
#line 449
    outring = outring & ringmask;
#line 449
    break;
  }
#line 450
  while (1) {
#line 450
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 450
    outcount = outcount + 1U;
#line 450
    outring = outring + 4U;
#line 450
    outring = outring & ringmask;
#line 450
    break;
  }
#line 451
  while (1) {
#line 451
    dev_priv->ring.tail = outring;
#line 451
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 451
    writel(outring, dev_priv->regs + 8240);
#line 451
    break;
  }
#line 452
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_cmdbuffer(struct drm_device *dev , drm_i915_cmdbuffer_t *cmd ) 
{ 
  int nbox ;
  int i ;
  int count ;
  int ret ;

  {
#line 457
  nbox = cmd->num_cliprects;
#line 458
  i = 0;
#line 460
  if (cmd->sz & 3) {
#line 461
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_cmdbuffer");
#line 462
    return (-22);
  } else {

  }
#line 465
  i915_kernel_lost_context(dev);
#line 467
  count = nbox ? nbox : 1;
#line 469
  i = 0;
#line 469
  while (1) {
#line 469
    if (i < count) {

    } else {
#line 469
      break;
    }
#line 470
    if (i < nbox) {
#line 471
      ret = i915_emit_box(dev, cmd->cliprects, i, cmd->DR1, cmd->DR4);
#line 473
      if (ret) {
#line 474
        return (ret);
      } else {

      }
    } else {

    }
#line 477
    ret = i915_emit_cmds(dev, (int *)cmd->buf, cmd->sz / 4);
#line 478
    if (ret) {
#line 479
      return (ret);
    } else {

    }
#line 469
    i = i + 1;
  }
#line 482
  i915_emit_breadcrumb(dev);
#line 483
  return (0);
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_batchbuffer(struct drm_device *dev , drm_i915_batchbuffer_t *batch ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 489
  dev_priv = dev->dev_private;
#line 490
  boxes = batch->cliprects;
#line 491
  nbox = batch->num_cliprects;
#line 492
  i = 0;
#line 495
  if ((batch->start | batch->used) & 7) {
#line 496
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_batchbuffer");
#line 497
    return (-22);
  } else {

  }
#line 500
  i915_kernel_lost_context(dev);
#line 502
  count = nbox ? nbox : 1;
#line 504
  i = 0;
#line 504
  while (1) {
#line 504
    if (i < count) {

    } else {
#line 504
      break;
    }
#line 505
    if (i < nbox) {
#line 506
      tmp = i915_emit_box(dev, boxes, i, batch->DR1, batch->DR4);
#line 506
      ret = tmp;
#line 508
      if (ret) {
#line 509
        return (ret);
      } else {

      }
    } else {

    }
#line 512
    if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 513
      while (1) {
#line 513
        if (dev_priv->ring.space < 2 * 4) {
#line 513
          i915_wait_ring(dev, 2 * 4, "i915_dispatch_batchbuffer");
        } else {

        }
#line 513
        outcount = 0;
#line 513
        outring = dev_priv->ring.tail;
#line 513
        ringmask = dev_priv->ring.tail_mask;
#line 513
        virt = dev_priv->ring.virtual_start;
#line 513
        break;
      }
#line 514
      if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 515
        while (1) {
#line 515
          *((unsigned int volatile   *)(virt + outring)) = (((49 << 23) | 0) | (2 << 6)) | (1 << 8);
#line 515
          outcount = outcount + 1U;
#line 515
          outring = outring + 4U;
#line 515
          outring = outring & ringmask;
#line 515
          break;
        }
#line 516
        while (1) {
#line 516
          *((unsigned int volatile   *)(virt + outring)) = batch->start;
#line 516
          outcount = outcount + 1U;
#line 516
          outring = outring + 4U;
#line 516
          outring = outring & ringmask;
#line 516
          break;
        }
      } else {
#line 518
        while (1) {
#line 518
          *((unsigned int volatile   *)(virt + outring)) = ((49 << 23) | 0) | (2 << 6);
#line 518
          outcount = outcount + 1U;
#line 518
          outring = outring + 4U;
#line 518
          outring = outring & ringmask;
#line 518
          break;
        }
#line 519
        while (1) {
#line 519
          *((unsigned int volatile   *)(virt + outring)) = batch->start | 1;
#line 519
          outcount = outcount + 1U;
#line 519
          outring = outring + 4U;
#line 519
          outring = outring & ringmask;
#line 519
          break;
        }
      }
#line 521
      while (1) {
#line 521
        dev_priv->ring.tail = outring;
#line 521
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 521
        writel(outring, dev_priv->regs + 8240);
#line 521
        break;
      }
    } else {
#line 523
      while (1) {
#line 523
        if (dev_priv->ring.space < 4 * 4) {
#line 523
          i915_wait_ring(dev, 4 * 4, "i915_dispatch_batchbuffer");
        } else {

        }
#line 523
        outcount = 0;
#line 523
        outring = dev_priv->ring.tail;
#line 523
        ringmask = dev_priv->ring.tail_mask;
#line 523
        virt = dev_priv->ring.virtual_start;
#line 523
        break;
      }
#line 524
      while (1) {
#line 524
        *((unsigned int volatile   *)(virt + outring)) = (48 << 23) | 1;
#line 524
        outcount = outcount + 1U;
#line 524
        outring = outring + 4U;
#line 524
        outring = outring & ringmask;
#line 524
        break;
      }
#line 525
      while (1) {
#line 525
        *((unsigned int volatile   *)(virt + outring)) = batch->start | 1;
#line 525
        outcount = outcount + 1U;
#line 525
        outring = outring + 4U;
#line 525
        outring = outring & ringmask;
#line 525
        break;
      }
#line 526
      while (1) {
#line 526
        *((unsigned int volatile   *)(virt + outring)) = (batch->start + batch->used) - 4;
#line 526
        outcount = outcount + 1U;
#line 526
        outring = outring + 4U;
#line 526
        outring = outring & ringmask;
#line 526
        break;
      }
#line 527
      while (1) {
#line 527
        *((unsigned int volatile   *)(virt + outring)) = 0;
#line 527
        outcount = outcount + 1U;
#line 527
        outring = outring + 4U;
#line 527
        outring = outring & ringmask;
#line 527
        break;
      }
#line 528
      while (1) {
#line 528
        dev_priv->ring.tail = outring;
#line 528
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 528
        writel(outring, dev_priv->regs + 8240);
#line 528
        break;
      }
    }
#line 504
    i = i + 1;
  }
#line 532
  i915_emit_breadcrumb(dev);
#line 534
  return (0);
}
}
#line 537 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_flip(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  uint32_t tmp ;

  {
#line 539
  dev_priv = dev->dev_private;
#line 540
  master_priv = ((dev->primary)->master)->driver_priv;
#line 544
  if (! master_priv->sarea_priv) {
#line 545
    return (-22);
  } else {

  }
#line 547
  while (1) {
#line 547
    if (drm_debug) {
#line 547
      printk("<7>[drm:%s] %s: page=%d pfCurrentPage=%d\n", "i915_dispatch_flip", "i915_dispatch_flip",
             dev_priv->current_page, (master_priv->sarea_priv)->pf_current_page);
    } else {

    }
#line 547
    break;
  }
#line 552
  i915_kernel_lost_context(dev);
#line 554
  while (1) {
#line 554
    if (dev_priv->ring.space < 2 * 4) {
#line 554
      i915_wait_ring(dev, 2 * 4, "i915_dispatch_flip");
    } else {

    }
#line 554
    outcount = 0;
#line 554
    outring = dev_priv->ring.tail;
#line 554
    ringmask = dev_priv->ring.tail_mask;
#line 554
    virt = dev_priv->ring.virtual_start;
#line 554
    break;
  }
#line 555
  while (1) {
#line 555
    *((unsigned int volatile   *)(virt + outring)) = ((4 << 23) | 0) | (1 << 0);
#line 555
    outcount = outcount + 1U;
#line 555
    outring = outring + 4U;
#line 555
    outring = outring & ringmask;
#line 555
    break;
  }
#line 556
  while (1) {
#line 556
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 556
    outcount = outcount + 1U;
#line 556
    outring = outring + 4U;
#line 556
    outring = outring & ringmask;
#line 556
    break;
  }
#line 557
  while (1) {
#line 557
    dev_priv->ring.tail = outring;
#line 557
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 557
    writel(outring, dev_priv->regs + 8240);
#line 557
    break;
  }
#line 559
  while (1) {
#line 559
    if (dev_priv->ring.space < 6 * 4) {
#line 559
      i915_wait_ring(dev, 6 * 4, "i915_dispatch_flip");
    } else {

    }
#line 559
    outcount = 0;
#line 559
    outring = dev_priv->ring.tail;
#line 559
    ringmask = dev_priv->ring.tail_mask;
#line 559
    virt = dev_priv->ring.virtual_start;
#line 559
    break;
  }
#line 560
  while (1) {
#line 560
    *((unsigned int volatile   *)(virt + outring)) = (((0 << 29) | (20 << 23)) | 2) | (1 << 22);
#line 560
    outcount = outcount + 1U;
#line 560
    outring = outring + 4U;
#line 560
    outring = outring & ringmask;
#line 560
    break;
  }
#line 561
  while (1) {
#line 561
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 561
    outcount = outcount + 1U;
#line 561
    outring = outring + 4U;
#line 561
    outring = outring & ringmask;
#line 561
    break;
  }
#line 562
  if (dev_priv->current_page == 0) {
#line 563
    while (1) {
#line 563
      *((unsigned int volatile   *)(virt + outring)) = dev_priv->back_offset;
#line 563
      outcount = outcount + 1U;
#line 563
      outring = outring + 4U;
#line 563
      outring = outring & ringmask;
#line 563
      break;
    }
#line 564
    dev_priv->current_page = 1;
  } else {
#line 566
    while (1) {
#line 566
      *((unsigned int volatile   *)(virt + outring)) = dev_priv->front_offset;
#line 566
      outcount = outcount + 1U;
#line 566
      outring = outring + 4U;
#line 566
      outring = outring & ringmask;
#line 566
      break;
    }
#line 567
    dev_priv->current_page = 0;
  }
#line 569
  while (1) {
#line 569
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 569
    outcount = outcount + 1U;
#line 569
    outring = outring + 4U;
#line 569
    outring = outring & ringmask;
#line 569
    break;
  }
#line 570
  while (1) {
#line 570
    dev_priv->ring.tail = outring;
#line 570
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 570
    writel(outring, dev_priv->regs + 8240);
#line 570
    break;
  }
#line 572
  while (1) {
#line 572
    if (dev_priv->ring.space < 2 * 4) {
#line 572
      i915_wait_ring(dev, 2 * 4, "i915_dispatch_flip");
    } else {

    }
#line 572
    outcount = 0;
#line 572
    outring = dev_priv->ring.tail;
#line 572
    ringmask = dev_priv->ring.tail_mask;
#line 572
    virt = dev_priv->ring.virtual_start;
#line 572
    break;
  }
#line 573
  while (1) {
#line 573
    *((unsigned int volatile   *)(virt + outring)) = ((3 << 23) | 0) | (1 << 2);
#line 573
    outcount = outcount + 1U;
#line 573
    outring = outring + 4U;
#line 573
    outring = outring & ringmask;
#line 573
    break;
  }
#line 574
  while (1) {
#line 574
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 574
    outcount = outcount + 1U;
#line 574
    outring = outring + 4U;
#line 574
    outring = outring & ringmask;
#line 574
    break;
  }
#line 575
  while (1) {
#line 575
    dev_priv->ring.tail = outring;
#line 575
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 575
    writel(outring, dev_priv->regs + 8240);
#line 575
    break;
  }
#line 577
  tmp = dev_priv->counter;
#line 577
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 577
  (master_priv->sarea_priv)->last_enqueue = tmp;
#line 579
  while (1) {
#line 579
    if (dev_priv->ring.space < 4 * 4) {
#line 579
      i915_wait_ring(dev, 4 * 4, "i915_dispatch_flip");
    } else {

    }
#line 579
    outcount = 0;
#line 579
    outring = dev_priv->ring.tail;
#line 579
    ringmask = dev_priv->ring.tail_mask;
#line 579
    virt = dev_priv->ring.virtual_start;
#line 579
    break;
  }
#line 580
  while (1) {
#line 580
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 580
    outcount = outcount + 1U;
#line 580
    outring = outring + 4U;
#line 580
    outring = outring & ringmask;
#line 580
    break;
  }
#line 581
  while (1) {
#line 581
    *((unsigned int volatile   *)(virt + outring)) = 33 << 2;
#line 581
    outcount = outcount + 1U;
#line 581
    outring = outring + 4U;
#line 581
    outring = outring & ringmask;
#line 581
    break;
  }
#line 582
  while (1) {
#line 582
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 582
    outcount = outcount + 1U;
#line 582
    outring = outring + 4U;
#line 582
    outring = outring & ringmask;
#line 582
    break;
  }
#line 583
  while (1) {
#line 583
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 583
    outcount = outcount + 1U;
#line 583
    outring = outring + 4U;
#line 583
    outring = outring & ringmask;
#line 583
    break;
  }
#line 584
  while (1) {
#line 584
    dev_priv->ring.tail = outring;
#line 584
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 584
    writel(outring, dev_priv->regs + 8240);
#line 584
    break;
  }
#line 586
  (master_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 587
  return (0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_quiescent(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 592
  dev_priv = dev->dev_private;
#line 594
  i915_kernel_lost_context(dev);
#line 595
  tmp = i915_wait_ring(dev, dev_priv->ring.Size - 8UL, "i915_quiescent");
#line 595
  return (tmp);
}
}
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_flush_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 603
  while (1) {
#line 603
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 603
      while (1) {
#line 603
        if (! (((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 603
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_flush_ioctl", "i915_flush_ioctl", ((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 (file_priv->master)->lock.file_priv, file_priv);
#line 603
          return (-22);
        } else {

        }
#line 603
        break;
      }
    } else {

    }
#line 603
    break;
  }
#line 605
  mutex_lock(& dev->struct_mutex);
#line 606
  ret = i915_quiescent(dev);
#line 607
  mutex_unlock(& dev->struct_mutex);
#line 609
  return (ret);
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_batchbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_batchbuffer_t *batch ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 615
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 616
  master_priv = ((dev->primary)->master)->driver_priv;
#line 617
  sarea_priv = master_priv->sarea_priv;
#line 619
  batch = data;
#line 622
  if (! dev_priv->allow_batchbuffer) {
#line 623
    printk("<3>[drm:%s] *ERROR* Batchbuffer ioctl disabled\n", "i915_batchbuffer");
#line 624
    return (-22);
  } else {

  }
#line 627
  while (1) {
#line 627
    if (drm_debug) {
#line 627
      printk("<7>[drm:%s] i915 batchbuffer, start %x used %d cliprects %d\n", "i915_batchbuffer",
             batch->start, batch->used, batch->num_cliprects);
    } else {

    }
#line 627
    break;
  }
#line 630
  while (1) {
#line 630
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 630
      while (1) {
#line 630
        if (! (((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 630
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_batchbuffer", "i915_batchbuffer", ((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 (file_priv->master)->lock.file_priv, file_priv);
#line 630
          return (-22);
        } else {

        }
#line 630
        break;
      }
    } else {

    }
#line 630
    break;
  }
#line 632
  if (batch->num_cliprects) {
#line 632
    tmp = current_thread_info();
#line 632
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batch->cliprects),
              "g" ((long )((unsigned long )batch->num_cliprects * sizeof(struct drm_clip_rect ))),
              "rm" (tmp->addr_limit.seg));
#line 632
    if (flag == 0UL) {
#line 632
      tmp___0 = 1;
    } else {
#line 632
      tmp___0 = 0;
    }
#line 632
    tmp___1 = __builtin_expect(tmp___0, 1);
#line 632
    if (tmp___1 ? 0 : -14) {
#line 635
      return (-14);
    } else {

    }
  } else {

  }
#line 637
  mutex_lock(& dev->struct_mutex);
#line 638
  ret = i915_dispatch_batchbuffer(dev, batch);
#line 639
  mutex_unlock(& dev->struct_mutex);
#line 641
  if (sarea_priv) {
#line 642
    sarea_priv->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 33);
  } else {

  }
#line 643
  return (ret);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_cmdbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_cmdbuffer_t *cmdbuf ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 649
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 650
  master_priv = ((dev->primary)->master)->driver_priv;
#line 651
  sarea_priv = master_priv->sarea_priv;
#line 653
  cmdbuf = data;
#line 656
  while (1) {
#line 656
    if (drm_debug) {
#line 656
      printk("<7>[drm:%s] i915 cmdbuffer, buf %p sz %d cliprects %d\n", "i915_cmdbuffer",
             cmdbuf->buf, cmdbuf->sz, cmdbuf->num_cliprects);
    } else {

    }
#line 656
    break;
  }
#line 659
  while (1) {
#line 659
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 659
      while (1) {
#line 659
        if (! (((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 659
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_cmdbuffer", "i915_cmdbuffer", ((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 (file_priv->master)->lock.file_priv, file_priv);
#line 659
          return (-22);
        } else {

        }
#line 659
        break;
      }
    } else {

    }
#line 659
    break;
  }
#line 662
  if (cmdbuf->num_cliprects) {
#line 662
    tmp = current_thread_info();
#line 662
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuf->cliprects),
              "g" ((long )((unsigned long )cmdbuf->num_cliprects * sizeof(struct drm_clip_rect ))),
              "rm" (tmp->addr_limit.seg));
#line 662
    if (flag == 0UL) {
#line 662
      tmp___0 = 1;
    } else {
#line 662
      tmp___0 = 0;
    }
#line 662
    tmp___1 = __builtin_expect(tmp___0, 1);
#line 662
    if (tmp___1 ? 0 : -14) {
#line 665
      printk("<3>[drm:%s] *ERROR* Fault accessing cliprects\n", "i915_cmdbuffer");
#line 666
      return (-14);
    } else {

    }
  } else {

  }
#line 669
  mutex_lock(& dev->struct_mutex);
#line 670
  ret = i915_dispatch_cmdbuffer(dev, cmdbuf);
#line 671
  mutex_unlock(& dev->struct_mutex);
#line 672
  if (ret) {
#line 673
    printk("<3>[drm:%s] *ERROR* i915_dispatch_cmdbuffer failed\n", "i915_cmdbuffer");
#line 674
    return (ret);
  } else {

  }
#line 677
  if (sarea_priv) {
#line 678
    sarea_priv->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 33);
  } else {

  }
#line 679
  return (0);
}
}
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_flip_bufs(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 687
  while (1) {
#line 687
    if (drm_debug) {
#line 687
      printk("<7>[drm:%s] %s\n", "i915_flip_bufs", "i915_flip_bufs");
    } else {

    }
#line 687
    break;
  }
#line 689
  while (1) {
#line 689
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 689
      while (1) {
#line 689
        if (! (((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 689
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_flip_bufs", "i915_flip_bufs", ((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 (file_priv->master)->lock.file_priv, file_priv);
#line 689
          return (-22);
        } else {

        }
#line 689
        break;
      }
    } else {

    }
#line 689
    break;
  }
#line 691
  mutex_lock(& dev->struct_mutex);
#line 692
  ret = i915_dispatch_flip(dev);
#line 693
  mutex_unlock(& dev->struct_mutex);
#line 695
  return (ret);
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_getparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_getparam_t *param ;
  int value ;
  unsigned long tmp ;

  {
#line 701
  dev_priv = dev->dev_private;
#line 702
  param = data;
#line 705
  if (! dev_priv) {
#line 706
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_getparam");
#line 707
    return (-22);
  } else {

  }
#line 710
  switch (param->param) {
  case 1: 
#line 712
  value = (dev->pdev)->irq ? 1 : 0;
#line 713
  break;
  case 2: 
#line 715
  value = dev_priv->allow_batchbuffer ? 1 : 0;
#line 716
  break;
  case 3: 
#line 718
  value = *((u32 volatile   *)dev_priv->hw_status_page + 33);
#line 719
  break;
  case 4: 
#line 721
  value = dev->pci_device;
#line 722
  break;
  case 5: 
#line 724
  value = dev_priv->has_gem;
#line 725
  break;
  default: 
#line 727
  printk("<3>[drm:%s] *ERROR* Unknown parameter %d\n", "i915_getparam", param->param);
#line 728
  return (-22);
  }
#line 731
  tmp = copy_to_user(param->value, & value, sizeof(int ));
#line 731
  if (tmp) {
#line 732
    printk("<3>[drm:%s] *ERROR* DRM_COPY_TO_USER failed\n", "i915_getparam");
#line 733
    return (-14);
  } else {

  }
#line 736
  return (0);
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_setparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_setparam_t *param ;

  {
#line 742
  dev_priv = dev->dev_private;
#line 743
  param = data;
#line 745
  if (! dev_priv) {
#line 746
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_setparam");
#line 747
    return (-22);
  } else {

  }
#line 750
  switch (param->param) {
  case 1: 
#line 752
  break;
  case 2: 
#line 754
  dev_priv->tex_lru_log_granularity = param->value;
#line 755
  break;
  case 3: 
#line 757
  dev_priv->allow_batchbuffer = param->value;
#line 758
  break;
  default: 
#line 760
  printk("<3>[drm:%s] *ERROR* unknown parameter %d\n", "i915_setparam", param->param);
#line 761
  return (-22);
  }
#line 764
  return (0);
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_set_status_page(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_hws_addr_t *hws ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 770
  dev_priv = dev->dev_private;
#line 771
  hws = data;
#line 773
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818))) {
#line 774
    return (-22);
  } else {

  }
#line 776
  if (! dev_priv) {
#line 777
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_set_status_page");
#line 778
    return (-22);
  } else {

  }
#line 781
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 781
  if (tmp___0) {
#line 782
    __ret_warn_on = 1;
#line 782
    tmp = __builtin_expect(! (! __ret_warn_on), 0);
#line 782
    if (tmp) {
#line 782
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c",
                    782, "tried to set status page when mode setting active\n");
    } else {

    }
#line 782
    __builtin_expect(! (! __ret_warn_on), 0);
#line 783
    return (0);
  } else {

  }
#line 786
  printk("<7>set status page addr 0x%08x\n", (u32 )hws->addr);
#line 788
  dev_priv->status_gfx_addr = hws->addr & (unsigned long long )(131071 << 12);
#line 790
  dev_priv->hws_map.offset = (uint64_t )(dev->agp)->base + hws->addr;
#line 791
  dev_priv->hws_map.size = 4 * 1024;
#line 792
  dev_priv->hws_map.type = 0;
#line 793
  dev_priv->hws_map.flags = 0;
#line 794
  dev_priv->hws_map.mtrr = 0;
#line 796
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 797
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 798
    i915_dma_cleanup(dev);
#line 799
    dev_priv->status_gfx_addr = 0;
#line 800
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for G33 hw status page\n",
           "i915_set_status_page");
#line 802
    return (-12);
  } else {

  }
#line 804
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 806
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 807
  writel(dev_priv->status_gfx_addr, dev_priv->regs + 8320);
#line 808
  while (1) {
#line 808
    if (drm_debug) {
#line 808
      printk("<7>[drm:%s] load hws HWS_PGA with gfx mem 0x%x\n", "i915_set_status_page",
             dev_priv->status_gfx_addr);
    } else {

    }
#line 808
    break;
  }
#line 810
  while (1) {
#line 810
    if (drm_debug) {
#line 810
      printk("<7>[drm:%s] load hws at %p\n", "i915_set_status_page", dev_priv->hw_status_page);
    } else {

    }
#line 810
    break;
  }
#line 811
  return (0);
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_probe_agp(struct drm_device *dev , unsigned long *aperture_size ,
                          unsigned long *preallocated_size ) 
{ 
  struct pci_dev *bridge_dev ;
  u16 tmp ;
  unsigned long overhead ;

  {
#line 828
  tmp = 0;
#line 831
  bridge_dev = pci_get_bus_and_slot(0, ((0 & 31) << 3) | (0 & 7));
#line 832
  if (! bridge_dev) {
#line 833
    printk("<3>[drm:%s] *ERROR* bridge device not found\n", "i915_probe_agp");
#line 834
    return (-1);
  } else {

  }
#line 838
  pci_read_config_word(bridge_dev, 82, & tmp);
#line 839
  pci_dev_put(bridge_dev);
#line 841
  *aperture_size = 1024 * 1024;
#line 842
  *preallocated_size = 1024 * 1024;
#line 844
  switch ((int )(dev->pdev)->device) {
  case 9586: 
  case 13698: 
  case 9570: 
  case 13687: 
#line 849
  if (((int )tmp & 1) == 1) {
#line 850
    *aperture_size = *aperture_size * 64UL;
  } else {
#line 852
    *aperture_size = *aperture_size * 128UL;
  }
#line 853
  break;
  default: 
#line 856
  *aperture_size = (dev->pdev)->resource[2].start == (resource_size_t )0 && (dev->pdev)->resource[2].end == (dev->pdev)->resource[2].start ? 0 : ((dev->pdev)->resource[2].end - (dev->pdev)->resource[2].start) + (resource_size_t )1;
#line 857
  break;
  }
#line 864
  if (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818) {
#line 865
    overhead = 4096;
  } else {
#line 867
    overhead = *aperture_size / 1024UL + 4096UL;
  }
#line 869
  switch ((int )tmp & (7 << 4)) {
  case 1 << 4: 
#line 871
  break;
  case 2 << 4: 
#line 873
  *preallocated_size = *preallocated_size * 4UL;
#line 874
  break;
  case 3 << 4: 
#line 876
  *preallocated_size = *preallocated_size * 8UL;
#line 877
  break;
  case 4 << 4: 
#line 879
  *preallocated_size = *preallocated_size * 16UL;
#line 880
  break;
  case 5 << 4: 
#line 882
  *preallocated_size = *preallocated_size * 32UL;
#line 883
  break;
  case 6 << 4: 
#line 885
  *preallocated_size = *preallocated_size * 48UL;
#line 886
  break;
  case 7 << 4: 
#line 888
  *preallocated_size = *preallocated_size * 64UL;
#line 889
  break;
  case 0 << 4: 
#line 891
  printk("<3>[drm:%s] *ERROR* video memory is disabled\n", "i915_probe_agp");
#line 892
  return (-1);
  default: 
#line 894
  printk("<3>[drm:%s] *ERROR* unexpected GMCH_GMS value: 0x%02x\n", "i915_probe_agp",
         (int )tmp & (7 << 4));
#line 896
  return (-1);
  }
#line 898
  *preallocated_size = *preallocated_size - overhead;
#line 900
  return (0);
}
}
#line 903 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_load_modeset_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long agp_size ;
  unsigned long prealloc_size ;
  int fb_bar ;
  int ret ;
  unsigned long tmp ;
  bool tmp___0 ;

  {
#line 905
  dev_priv = dev->dev_private;
#line 907
  fb_bar = (((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) ? 2 : 0;
#line 908
  ret = 0;
#line 910
  tmp = drm_get_resource_start(dev, fb_bar);
#line 910
  dev->mode_config.fb_base = tmp & 4278190080UL;
#line 913
  while (1) {
#line 913
    if (drm_debug) {
#line 913
      printk("<7>[drm:%s] *** fb base 0x%08lx\n", "i915_load_modeset_init", dev->mode_config.fb_base);
    } else {

    }
#line 913
    break;
  }
#line 915
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) || ((((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && ! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) && ! ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 916
    dev_priv->cursor_needs_physical = true;
  } else {
#line 918
    dev_priv->cursor_needs_physical = false;
  }
#line 920
  i915_probe_agp(dev, & agp_size, & prealloc_size);
#line 923
  drm_mm_init(& dev_priv->vram, 0, prealloc_size);
#line 926
  i915_gem_do_init(dev, prealloc_size, agp_size);
#line 928
  ret = i915_gem_init_ringbuffer(dev);
#line 929
  if (ret) {
#line 930
    goto out;
  } else {

  }
#line 932
  dev_priv->mm.gtt_mapping = io_mapping_create_wc((dev->agp)->base, ((dev->agp)->agp_info.aper_size * (size_t )1024) * (size_t )1024);
#line 938
  dev_priv->allow_batchbuffer = 1;
#line 940
  tmp___0 = intel_init_bios(dev);
#line 940
  ret = tmp___0;
#line 941
  if (ret) {
#line 942
    printk("<6>[drm] failed to find VBIOS tables\n");
  } else {

  }
#line 944
  ret = drm_irq_install(dev);
#line 945
  if (ret) {
#line 946
    goto destroy_ringbuffer;
  } else {

  }
#line 957
  dev->vblank_disable_allowed = 1;
#line 963
  writel((1 << 5) | (1 << 21), dev_priv->regs + 8384);
#line 965
  intel_modeset_init(dev);
#line 967
  drm_helper_initial_config(dev, false);
#line 969
  dev->devname = kstrdup("i915", (16U | 64U) | 128U);
#line 970
  if (! dev->devname) {
#line 971
    ret = -12;
#line 972
    goto modeset_cleanup;
  } else {

  }
#line 975
  return (0);
  modeset_cleanup: 
#line 978
  intel_modeset_cleanup(dev);
  destroy_ringbuffer: 
#line 980
  i915_gem_cleanup_ringbuffer(dev);
  out: 
#line 982
  return (ret);
}
}
#line 985 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_master_create(struct drm_device *dev , struct drm_master *master ) 
{ 
  struct drm_i915_master_private *master_priv ;
  void *tmp ;

  {
#line 989
  tmp = drm_calloc(1, sizeof(*master_priv), 2);
#line 989
  master_priv = tmp;
#line 990
  if (! master_priv) {
#line 991
    return (-12);
  } else {

  }
#line 993
  master->driver_priv = master_priv;
#line 994
  return (0);
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_master_destroy(struct drm_device *dev , struct drm_master *master ) 
{ 
  struct drm_i915_master_private *master_priv ;

  {
#line 999
  master_priv = master->driver_priv;
#line 1001
  if (! master_priv) {
#line 1002
    return;
  } else {

  }
#line 1004
  drm_free(master_priv, sizeof(*master_priv), 2);
#line 1006
  master->driver_priv = (void *)0;
#line 1007
  return;
}
}
#line 1086 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
static struct lock_class_key __key___1  ;
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_load(struct drm_device *dev , unsigned long flags ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long base ;
  unsigned long size ;
  int ret ;
  int mmio_bar ;
  void *tmp ;
  int tmp___0 ;

  {
#line 1022
  dev_priv = dev->dev_private;
#line 1024
  ret = 0;
#line 1024
  mmio_bar = (((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) ? 0 : 1;
#line 1027
  dev->counters = dev->counters + 4UL;
#line 1028
  dev->types[6] = _DRM_STAT_IRQ;
#line 1029
  dev->types[7] = _DRM_STAT_PRIMARY;
#line 1030
  dev->types[8] = _DRM_STAT_SECONDARY;
#line 1031
  dev->types[9] = _DRM_STAT_DMA;
#line 1033
  tmp = drm_alloc(sizeof(drm_i915_private_t ), 2);
#line 1033
  dev_priv = tmp;
#line 1034
  if ((unsigned long )dev_priv == (unsigned long )((void *)0)) {
#line 1035
    return (-12);
  } else {

  }
#line 1037
  memset(dev_priv, 0, sizeof(drm_i915_private_t ));
#line 1039
  dev->dev_private = (void *)dev_priv;
#line 1040
  dev_priv->dev = dev;
#line 1043
  base = drm_get_resource_start(dev, mmio_bar);
#line 1044
  size = drm_get_resource_len(dev, mmio_bar);
#line 1046
  dev_priv->regs = ioremap(base, size);
#line 1047
  if (! dev_priv->regs) {
#line 1048
    printk("<3>[drm:%s] *ERROR* failed to map registers\n", "i915_driver_load");
#line 1049
    ret = -5;
#line 1050
    goto free_priv;
  } else {

  }
#line 1058
  dev_priv->has_gem = 1;
#line 1061
  i915_gem_load(dev);
#line 1064
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818))) {
#line 1065
    ret = i915_init_phys_hws(dev);
#line 1066
    if (ret != 0) {
#line 1067
      goto out_rmmap;
    } else {

    }
  } else {

  }
#line 1081
  if (! (dev->pci_device == 10098) && ! (dev->pci_device == 10146 || dev->pci_device == 10158)) {
#line 1082
    pci_enable_msi(dev->pdev);
  } else {

  }
#line 1084
  intel_opregion_init(dev);
#line 1086
  while (1) {
#line 1086
    __spin_lock_init(& dev_priv->user_irq_lock, "&dev_priv->user_irq_lock", & __key___1);
#line 1086
    break;
  }
#line 1087
  dev_priv->user_irq_refcount = 0;
#line 1089
  ret = drm_vblank_init(dev, 2);
#line 1091
  if (ret) {
#line 1092
    i915_driver_unload(dev);
#line 1093
    return (ret);
  } else {

  }
#line 1096
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 1096
  if (tmp___0) {
#line 1097
    ret = i915_load_modeset_init(dev);
#line 1098
    if (ret < 0) {
#line 1099
      printk("<3>[drm:%s] *ERROR* failed to init modeset\n", "i915_driver_load");
#line 1100
      goto out_rmmap;
    } else {

    }
  } else {

  }
#line 1104
  return (0);
  out_rmmap: 
#line 1107
  iounmap(dev_priv->regs);
  free_priv: 
#line 1109
  drm_free(dev_priv, sizeof(struct drm_i915_private ), 2);
#line 1110
  return (ret);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_unload(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int tmp ;
  int tmp___0 ;

  {
#line 1115
  dev_priv = dev->dev_private;
#line 1117
  tmp = drm_core_check_feature(dev, 8192);
#line 1117
  if (tmp) {
#line 1118
    io_mapping_free(dev_priv->mm.gtt_mapping);
#line 1119
    drm_irq_uninstall(dev);
  } else {

  }
#line 1122
  if ((dev->pdev)->msi_enabled) {
#line 1123
    pci_disable_msi(dev->pdev);
  } else {

  }
#line 1125
  if ((unsigned long )dev_priv->regs != (unsigned long )((void *)0)) {
#line 1126
    iounmap(dev_priv->regs);
  } else {

  }
#line 1128
  intel_opregion_free(dev);
#line 1130
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 1130
  if (tmp___0) {
#line 1131
    intel_modeset_cleanup(dev);
#line 1133
    mutex_lock(& dev->struct_mutex);
#line 1134
    i915_gem_cleanup_ringbuffer(dev);
#line 1135
    mutex_unlock(& dev->struct_mutex);
#line 1136
    drm_mm_takedown(& dev_priv->vram);
#line 1137
    i915_gem_lastclose(dev);
  } else {

  }
#line 1140
  drm_free(dev->dev_private, sizeof(drm_i915_private_t ), 2);
#line 1143
  return (0);
}
}
#line 1146 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  void *tmp ;

  {
#line 1150
  while (1) {
#line 1150
    if (drm_debug) {
#line 1150
      printk("<7>[drm:%s] \n", "i915_driver_open");
    } else {

    }
#line 1150
    break;
  }
#line 1151
  tmp = drm_alloc(sizeof(*i915_file_priv), 10);
#line 1151
  i915_file_priv = (struct drm_i915_file_private *)tmp;
#line 1154
  if (! i915_file_priv) {
#line 1155
    return (-12);
  } else {

  }
#line 1157
  file_priv->driver_priv = i915_file_priv;
#line 1159
  i915_file_priv->mm.last_gem_seqno = 0;
#line 1160
  i915_file_priv->mm.last_gem_throttle_seqno = 0;
#line 1162
  return (0);
}
}
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_lastclose(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 1179
  dev_priv = dev->dev_private;
#line 1181
  if (! dev_priv) {
#line 1182
    intelfb_restore();
#line 1183
    return;
  } else {
#line 1181
    tmp = drm_core_check_feature(dev, 8192);
#line 1181
    if (tmp) {
#line 1182
      intelfb_restore();
#line 1183
      return;
    } else {

    }
  }
#line 1186
  i915_gem_lastclose(dev);
#line 1188
  if (dev_priv->agp_heap) {
#line 1189
    i915_mem_takedown(& dev_priv->agp_heap);
  } else {

  }
#line 1191
  i915_dma_cleanup(dev);
#line 1192
  return;
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 1196
  dev_priv = dev->dev_private;
#line 1197
  tmp = drm_core_check_feature(dev, 8192);
#line 1197
  if (tmp) {

  } else {
#line 1198
    i915_mem_release(dev, file_priv, dev_priv->agp_heap);
  }
#line 1199
  return;
}
}
#line 1201 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;

  {
#line 1203
  i915_file_priv = file_priv->driver_priv;
#line 1205
  drm_free(i915_file_priv, sizeof(*i915_file_priv), 10);
#line 1206
  return;
}
}
#line 1208 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
struct drm_ioctl_desc i915_ioctls[37]  = 
#line 1208
  {      {0, & i915_dma_init, (1 | 2) | 4}, 
        {1, & i915_flush_ioctl, 1}, 
        {2, & i915_flip_bufs, 1}, 
        {3, & i915_batchbuffer, 1}, 
        {4, & i915_irq_emit, 1}, 
        {5, & i915_irq_wait, 1}, 
        {6, & i915_getparam, 1}, 
        {7, & i915_setparam, (1 | 2) | 4}, 
        {8, & i915_mem_alloc, 1}, 
        {9, & i915_mem_free, 1}, 
        {10, & i915_mem_init_heap, (1 | 2) | 4}, 
        {11, & i915_cmdbuffer, 1}, 
        {12, & i915_mem_destroy_heap, (1 | 2) | 4}, 
        {13, & i915_vblank_pipe_set, (1 | 2) | 4}, 
        {14, & i915_vblank_pipe_get, 1}, 
        {15, & i915_vblank_swap, 1}, 
        {0U, 0, 0}, 
        {17, & i915_set_status_page, (1 | 2) | 4}, 
        {0U, 0, 0}, 
        {19, & i915_gem_init_ioctl, (1 | 2) | 4}, 
        {20, & i915_gem_execbuffer, 1}, 
        {21, & i915_gem_pin_ioctl, 1 | 4}, 
        {22, & i915_gem_unpin_ioctl, 1 | 4}, 
        {23, & i915_gem_busy_ioctl, 1}, 
        {24, & i915_gem_throttle_ioctl, 1}, 
        {25, & i915_gem_entervt_ioctl, (1 | 2) | 4}, 
        {26, & i915_gem_leavevt_ioctl, (1 | 2) | 4}, 
        {27, & i915_gem_create_ioctl, 0}, 
        {28, & i915_gem_pread_ioctl, 0}, 
        {29, & i915_gem_pwrite_ioctl, 0}, 
        {30, & i915_gem_mmap_ioctl, 0}, 
        {31, & i915_gem_set_domain_ioctl, 0}, 
        {32, & i915_gem_sw_finish_ioctl, 0}, 
        {33, & i915_gem_set_tiling, 0}, 
        {34, & i915_gem_get_tiling, 0}, 
        {35, & i915_gem_get_aperture_ioctl, 0}, 
        {36, & i915_gem_mmap_gtt_ioctl, 0}};
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_max_ioctl  =    sizeof(i915_ioctls) / sizeof(i915_ioctls[0]) + (sizeof(char [1 - 2 * 0]) - 1UL);
#line 1259 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_device_is_agp(struct drm_device *dev ) 
{ 


  {
#line 1261
  return (1);
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (sizeof(_proxy_pda.pcurrent)) {
  case 2UL: 
#line 25
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 4UL: 
#line 25
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 8UL: 
#line 25
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  default: 
#line 25
  __bad_pda_field();
  }
#line 25
  return (ret__);
}
}
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
#line 86
  tmp___0 = variable_test_bit(flag, & ti->flags);
#line 86
  return (tmp___0);
}
}
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 35 "include/linux/spinlock_api_smp.h"
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                 void *key ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 111
extern void add_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 113
extern void remove_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 135
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies  __attribute__((__section__(".data"))) ;
#line 329 "include/linux/sched.h"
extern long schedule_timeout(long timeout ) ;
#line 2054 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2056
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2056
  return (tmp);
}
}
#line 2074 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 2076
  tmp = test_tsk_thread_flag(p, 2);
#line 2076
  if (tmp) {
#line 2076
    tmp___0 = 1;
  } else {
#line 2076
    tmp___0 = 0;
  }
#line 2076
  tmp___1 = __builtin_expect(tmp___0, 0);
#line 2076
  return (tmp___1);
}
}
#line 1211 "include/drm/drmP.h"
extern void drm_handle_vblank(struct drm_device *dev , int crtc ) ;
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_user_irq_get(struct drm_device *dev ) ;
#line 505
void i915_user_irq_put(struct drm_device *dev ) ;
#line 506
void i915_enable_interrupt(struct drm_device *dev ) ;
#line 521
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) ;
#line 523
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 526
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 587
uint32_t i915_get_gem_seqno(struct drm_device *dev ) ;
#line 630
void opregion_asle_intr(struct drm_device *dev ) ;
#line 631
void opregion_enable_asle(struct drm_device *dev ) ;
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 67
  if ((dev_priv->irq_mask_reg & mask) != 0U) {
#line 68
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & ~ mask;
#line 69
    writel(dev_priv->irq_mask_reg, dev_priv->regs + 8360);
#line 70
    readl(dev_priv->regs + 8360);
  } else {

  }
#line 72
  return;
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
__inline static void i915_disable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 77
  if ((dev_priv->irq_mask_reg & mask) != mask) {
#line 78
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg | mask;
#line 79
    writel(dev_priv->irq_mask_reg, dev_priv->regs + 8360);
#line 80
    readl(dev_priv->regs + 8360);
  } else {

  }
#line 82
  return;
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
__inline static u32 i915_pipestat(int pipe ) 
{ 


  {
#line 87
  if (pipe == 0) {
#line 88
    return (458788);
  } else {

  }
#line 89
  if (pipe == 1) {
#line 90
    return (462884);
  } else {

  }
#line 91
  while (1) {
#line 91
    __asm__  volatile   ("1:\tud2\n"
                         ".pushsection __bug_table,\"a\"\n"
                         "2:\t.quad 1b, %c0\n"
                         "\t.word %c1, 0\n"
                         "\t.org 2b+%c2\n"
                         ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"),
                         "i" (91), "i" (sizeof(struct bug_entry )));
#line 91
    while (1) {

    }
#line 91
    break;
  }
#line 92
  return (0U);
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 97
  if ((dev_priv->pipestat[pipe] & mask) != mask) {
#line 98
    tmp = i915_pipestat(pipe);
#line 98
    reg = tmp;
#line 100
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] | mask;
#line 102
    writel(dev_priv->pipestat[pipe] | (mask >> 16), dev_priv->regs + reg);
#line 103
    readl(dev_priv->regs + reg);
  } else {

  }
#line 105
  return;
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 110
  if ((dev_priv->pipestat[pipe] & mask) != 0U) {
#line 111
    tmp = i915_pipestat(pipe);
#line 111
    reg = tmp;
#line 113
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] & ~ mask;
#line 114
    writel(dev_priv->pipestat[pipe], dev_priv->regs + reg);
#line 115
    readl(dev_priv->regs + reg);
  } else {

  }
#line 117
  return;
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_pipe_enabled(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long pipeconf ;
  unsigned int tmp ;

  {
#line 131
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 132
  pipeconf = pipe ? 462856 : 458760;
#line 134
  tmp = readl(dev_priv->regs + pipeconf);
#line 134
  if (tmp & (unsigned int )(1 << 31)) {
#line 135
    return (1);
  } else {

  }
#line 137
  return (0);
}
}
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long high_frame ;
  unsigned long low_frame ;
  u32 high1 ;
  u32 high2 ;
  u32 low ;
  u32 count ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 145
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 150
  high_frame = pipe ? 462912 : 458816;
#line 151
  low_frame = pipe ? 462916 : 458820;
#line 153
  tmp = i915_pipe_enabled(dev, pipe);
#line 153
  if (tmp) {

  } else {
#line 154
    printk("<3>[drm:%s] *ERROR* trying to get vblank count for disabled pipe %d\n",
           "i915_get_vblank_counter", pipe);
#line 155
    return (0);
  }
#line 163
  while (1) {
#line 164
    tmp___0 = readl(dev_priv->regs + high_frame);
#line 164
    high1 = (tmp___0 & 65535U) >> 0;
#line 166
    tmp___1 = readl(dev_priv->regs + low_frame);
#line 166
    low = (tmp___1 & 4278190080U) >> 24;
#line 168
    tmp___2 = readl(dev_priv->regs + high_frame);
#line 168
    high2 = (tmp___2 & 65535U) >> 0;
#line 163
    if (high1 != high2) {

    } else {
#line 163
      break;
    }
  }
#line 172
  count = (high1 << 8) | low;
#line 174
  return (count);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  u32 iir ;
  u32 new_iir ;
  u32 pipea_stats ;
  u32 pipeb_stats ;
  u32 vblank_status ;
  u32 vblank_enable ;
  int vblank ;
  unsigned long irqflags ;
  int irq_received ;
  int ret ;

  {
#line 179
  dev = (struct drm_device *)arg;
#line 180
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 186
  vblank = 0;
#line 189
  ret = 0;
#line 191
  atomic_inc(& dev_priv->irq_received);
#line 193
  iir = readl(dev_priv->regs + 8356);
#line 195
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 196
    vblank_status = 1UL << 2;
#line 197
    vblank_enable = 1UL << 18;
  } else {
#line 199
    vblank_status = 1UL << 1;
#line 200
    vblank_enable = 1UL << 17;
  }
#line 203
  while (1) {
#line 204
    irq_received = iir != (u32 )0;
#line 211
    while (1) {
#line 211
      irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 211
      break;
    }
#line 212
    pipea_stats = readl(dev_priv->regs + 458788);
#line 213
    pipeb_stats = readl(dev_priv->regs + 462884);
#line 218
    if (pipea_stats & 2147549183U) {
#line 219
      writel(pipea_stats, dev_priv->regs + 458788);
#line 220
      irq_received = 1;
    } else {

    }
#line 223
    if (pipeb_stats & 2147549183U) {
#line 224
      writel(pipeb_stats, dev_priv->regs + 462884);
#line 225
      irq_received = 1;
    } else {

    }
#line 227
    while (1) {
#line 227
      _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 227
      break;
    }
#line 229
    if (! irq_received) {
#line 230
      break;
    } else {

    }
#line 232
    ret = 1;
#line 234
    writel(iir, dev_priv->regs + 8356);
#line 235
    new_iir = readl(dev_priv->regs + 8356);
#line 237
    if ((dev->primary)->master) {
#line 238
      master_priv = ((dev->primary)->master)->driver_priv;
#line 239
      if (master_priv->sarea_priv) {
#line 240
        (master_priv->sarea_priv)->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 33);
      } else {

      }
    } else {

    }
#line 244
    if (iir & (unsigned int )(1 << 1)) {
#line 245
      dev_priv->mm.irq_gem_seqno = i915_get_gem_seqno(dev);
#line 246
      __wake_up(& dev_priv->irq_queue, 1, 1, (void *)0);
    } else {

    }
#line 249
    if (pipea_stats & vblank_status) {
#line 250
      vblank = vblank + 1;
#line 251
      drm_handle_vblank(dev, 0);
    } else {

    }
#line 254
    if (pipeb_stats & vblank_status) {
#line 255
      vblank = vblank + 1;
#line 256
      drm_handle_vblank(dev, 1);
    } else {

    }
#line 259
    if ((unsigned long )pipeb_stats & (1UL << 6) || iir & (unsigned int )(1 << 0)) {
#line 261
      opregion_asle_intr(dev);
    } else {

    }
#line 278
    iir = new_iir;
  }
#line 281
  return (ret);
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_emit_irq(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 286
  dev_priv = dev->dev_private;
#line 287
  master_priv = ((dev->primary)->master)->driver_priv;
#line 290
  i915_kernel_lost_context(dev);
#line 292
  while (1) {
#line 292
    if (drm_debug) {
#line 292
      printk("<7>[drm:%s] \n", "i915_emit_irq");
    } else {

    }
#line 292
    break;
  }
#line 294
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 295
  if ((unsigned long )dev_priv->counter > 2147483647UL) {
#line 296
    dev_priv->counter = 1;
  } else {

  }
#line 297
  if (master_priv->sarea_priv) {
#line 298
    (master_priv->sarea_priv)->last_enqueue = dev_priv->counter;
  } else {

  }
#line 300
  while (1) {
#line 300
    if (dev_priv->ring.space < 4 * 4) {
#line 300
      i915_wait_ring(dev, 4 * 4, "i915_emit_irq");
    } else {

    }
#line 300
    outcount = 0;
#line 300
    outring = dev_priv->ring.tail;
#line 300
    ringmask = dev_priv->ring.tail_mask;
#line 300
    virt = dev_priv->ring.virtual_start;
#line 300
    break;
  }
#line 301
  while (1) {
#line 301
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 301
    outcount = outcount + 1U;
#line 301
    outring = outring + 4U;
#line 301
    outring = outring & ringmask;
#line 301
    break;
  }
#line 302
  while (1) {
#line 302
    *((unsigned int volatile   *)(virt + outring)) = 33 << 2;
#line 302
    outcount = outcount + 1U;
#line 302
    outring = outring + 4U;
#line 302
    outring = outring & ringmask;
#line 302
    break;
  }
#line 303
  while (1) {
#line 303
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 303
    outcount = outcount + 1U;
#line 303
    outring = outring + 4U;
#line 303
    outring = outring & ringmask;
#line 303
    break;
  }
#line 304
  while (1) {
#line 304
    *((unsigned int volatile   *)(virt + outring)) = (2 << 23) | 0;
#line 304
    outcount = outcount + 1U;
#line 304
    outring = outring + 4U;
#line 304
    outring = outring & ringmask;
#line 304
    break;
  }
#line 305
  while (1) {
#line 305
    dev_priv->ring.tail = outring;
#line 305
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 305
    writel(outring, dev_priv->regs + 8240);
#line 305
    break;
  }
#line 307
  return (dev_priv->counter);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_user_irq_get(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 312
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 315
  while (1) {
#line 315
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 315
    break;
  }
#line 316
  if (dev->irq_enabled) {
#line 316
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount + 1;
#line 316
    if (dev_priv->user_irq_refcount == 1) {
#line 317
      i915_enable_irq(dev_priv, 1 << 1);
    } else {

    }
  } else {

  }
#line 318
  while (1) {
#line 318
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 318
    break;
  }
#line 319
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_user_irq_put(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;
  long tmp ;

  {
#line 323
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 326
  while (1) {
#line 326
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 326
    break;
  }
#line 327
  while (1) {
#line 327
    tmp = __builtin_expect(! (! (dev->irq_enabled && dev_priv->user_irq_refcount <= 0)),
                           0);
#line 327
    if (tmp) {
#line 327
      while (1) {
#line 327
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"),
                             "i" (327), "i" (sizeof(struct bug_entry )));
#line 327
        while (1) {

        }
#line 327
        break;
      }
    } else {

    }
#line 327
    break;
  }
#line 328
  if (dev->irq_enabled) {
#line 328
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount - 1;
#line 328
    if (dev_priv->user_irq_refcount == 0) {
#line 329
      i915_disable_irq(dev_priv, 1 << 1);
    } else {

    }
  } else {

  }
#line 330
  while (1) {
#line 330
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 330
    break;
  }
#line 331
  return;
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_wait_irq(struct drm_device *dev , int irq_nr ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 335
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 336
  master_priv = ((dev->primary)->master)->driver_priv;
#line 337
  ret = 0;
#line 339
  while (1) {
#line 339
    if (drm_debug) {
#line 339
      printk("<7>[drm:%s] irq_nr=%d breadcrumb=%d\n", "i915_wait_irq", irq_nr, *((u32 volatile   *)dev_priv->hw_status_page + 33));
    } else {

    }
#line 339
    break;
  }
#line 342
  if (*((u32 volatile   *)dev_priv->hw_status_page + 33) >= (u32 volatile   )irq_nr) {
#line 343
    if (master_priv->sarea_priv) {
#line 344
      (master_priv->sarea_priv)->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 33);
    } else {

    }
#line 345
    return (0);
  } else {

  }
#line 348
  if (master_priv->sarea_priv) {
#line 349
    (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 351
  i915_user_irq_get(dev);
#line 352
  while (1) {
#line 352
    tmp = get_current();
#line 352
    entry.flags = 0U;
#line 352
    entry.private = tmp;
#line 352
    entry.func = & default_wake_function;
#line 352
    entry.task_list.next = (void *)0;
#line 352
    entry.task_list.prev = (void *)0;
#line 352
    end = jiffies + (unsigned long volatile   )(3 * 250);
#line 352
    add_wait_queue(& dev_priv->irq_queue, & entry);
#line 352
    while (1) {
#line 352
      while (1) {
#line 352
        tmp___0 = get_current();
#line 352
        tmp___0->state = 1;
#line 352
        break;
      }
#line 352
      if (*((u32 volatile   *)dev_priv->hw_status_page + 33) >= (u32 volatile   )irq_nr) {
#line 352
        break;
      } else {

      }
#line 352
      if ((long )jiffies - (long )end >= 0L) {
#line 352
        ret = -16;
#line 352
        break;
      } else {

      }
#line 352
      schedule_timeout(250 / 100 > 1 ? 250 / 100 : 1);
#line 352
      tmp___1 = get_current();
#line 352
      tmp___2 = signal_pending(tmp___1);
#line 352
      if (tmp___2) {
#line 352
        ret = -4;
#line 352
        break;
      } else {

      }
    }
#line 352
    while (1) {
#line 352
      tmp___3 = get_current();
#line 352
      tmp___3->state = 0;
#line 352
      break;
    }
#line 352
    remove_wait_queue(& dev_priv->irq_queue, & entry);
#line 352
    break;
  }
#line 354
  i915_user_irq_put(dev);
#line 356
  if (ret == -16) {
#line 357
    printk("<3>[drm:%s] *ERROR* EBUSY -- rec: %d emitted: %d\n", "i915_wait_irq",
           *((u32 volatile   *)dev_priv->hw_status_page + 33), (int )dev_priv->counter);
  } else {

  }
#line 361
  return (ret);
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_emit_t *emit ;
  int result ;
  unsigned long tmp ;

  {
#line 369
  dev_priv = dev->dev_private;
#line 370
  emit = data;
#line 373
  while (1) {
#line 373
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 373
      while (1) {
#line 373
        if (! (((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 373
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_irq_emit", "i915_irq_emit", ((file_priv->master)->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 (file_priv->master)->lock.file_priv, file_priv);
#line 373
          return (-22);
        } else {

        }
#line 373
        break;
      }
    } else {

    }
#line 373
    break;
  }
#line 375
  if (! dev_priv) {
#line 376
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_emit");
#line 377
    return (-22);
  } else {

  }
#line 379
  mutex_lock(& dev->struct_mutex);
#line 380
  result = i915_emit_irq(dev);
#line 381
  mutex_unlock(& dev->struct_mutex);
#line 383
  tmp = copy_to_user(emit->irq_seq, & result, sizeof(int ));
#line 383
  if (tmp) {
#line 384
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_irq_emit");
#line 385
    return (-14);
  } else {

  }
#line 388
  return (0);
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_wait_t *irqwait ;
  int tmp ;

  {
#line 396
  dev_priv = dev->dev_private;
#line 397
  irqwait = data;
#line 399
  if (! dev_priv) {
#line 400
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_wait");
#line 401
    return (-22);
  } else {

  }
#line 404
  tmp = i915_wait_irq(dev, irqwait->irq_seq);
#line 404
  return (tmp);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_enable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 412
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 415
  while (1) {
#line 415
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 415
    break;
  }
#line 416
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 417
    i915_enable_pipestat(dev_priv, pipe, 1UL << 18);
  } else {
#line 420
    i915_enable_pipestat(dev_priv, pipe, 1UL << 17);
  }
#line 422
  while (1) {
#line 422
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 422
    break;
  }
#line 423
  return (0);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_disable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 431
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 434
  while (1) {
#line 434
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 434
    break;
  }
#line 435
  i915_disable_pipestat(dev_priv, pipe, (1UL << 17) | (1UL << 18));
#line 438
  while (1) {
#line 438
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 438
    break;
  }
#line 439
  return;
}
}
#line 441 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_enable_interrupt(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 443
  dev_priv = dev->dev_private;
#line 444
  opregion_enable_asle(dev);
#line 445
  dev_priv->irq_enabled = 1;
#line 446
  return;
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 454
  dev_priv = dev->dev_private;
#line 456
  if (! dev_priv) {
#line 457
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_set");
#line 458
    return (-22);
  } else {

  }
#line 461
  return (0);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;

  {
#line 467
  dev_priv = dev->dev_private;
#line 468
  pipe = data;
#line 470
  if (! dev_priv) {
#line 471
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_get");
#line 472
    return (-22);
  } else {

  }
#line 475
  pipe->pipe = 1 | 2;
#line 477
  return (0);
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 


  {
#line 500
  return (-22);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_driver_irq_preinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 507
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 509
  dev_priv->irq_received.counter = 0;
#line 511
  writel(61438, dev_priv->regs + 8344);
#line 512
  writel(0, dev_priv->regs + 458788);
#line 513
  writel(0, dev_priv->regs + 462884);
#line 514
  writel(4294967295U, dev_priv->regs + 8360);
#line 515
  writel(0, dev_priv->regs + 8352);
#line 516
  readl(dev_priv->regs + 8352);
#line 517
  return;
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_driver_irq_postinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 521
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 523
  dev_priv->vblank_pipe = 1 | 2;
#line 525
  dev->max_vblank_count = 16777215;
#line 528
  dev_priv->irq_mask_reg = ~ (((1 << 0) | (1 << 6)) | (1 << 4));
#line 530
  dev_priv->pipestat[0] = 0;
#line 531
  dev_priv->pipestat[1] = 0;
#line 534
  tmp = readl(dev_priv->regs + 458788);
#line 534
  writel(tmp & 2147549183U, dev_priv->regs + 458788);
#line 535
  tmp___0 = readl(dev_priv->regs + 462884);
#line 535
  writel(tmp___0 & 2147549183U, dev_priv->regs + 462884);
#line 537
  tmp___1 = readl(dev_priv->regs + 8356);
#line 537
  writel(tmp___1, dev_priv->regs + 8356);
#line 539
  writel((((1 << 0) | (1 << 6)) | (1 << 4)) | (1 << 1), dev_priv->regs + 8352);
#line 540
  writel(dev_priv->irq_mask_reg, dev_priv->regs + 8360);
#line 541
  readl(dev_priv->regs + 8352);
#line 543
  opregion_enable_asle(dev);
#line 544
  init_waitqueue_head(& dev_priv->irq_queue);
#line 546
  return (0);
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_driver_irq_uninstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 551
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 553
  if (! dev_priv) {
#line 554
    return;
  } else {

  }
#line 556
  dev_priv->vblank_pipe = 0;
#line 558
  writel(4294967295U, dev_priv->regs + 8344);
#line 559
  writel(0, dev_priv->regs + 458788);
#line 560
  writel(0, dev_priv->regs + 462884);
#line 561
  writel(4294967295U, dev_priv->regs + 8360);
#line 562
  writel(0, dev_priv->regs + 8352);
#line 564
  tmp = readl(dev_priv->regs + 458788);
#line 564
  writel(tmp & 2147549183U, dev_priv->regs + 458788);
#line 565
  tmp___0 = readl(dev_priv->regs + 462884);
#line 565
  writel(tmp___0 & 2147549183U, dev_priv->regs + 462884);
#line 566
  tmp___1 = readl(dev_priv->regs + 8356);
#line 566
  writel(tmp___1, dev_priv->regs + 8356);
#line 567
  return;
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static void mark_block(struct drm_device *dev , struct mem_block *p , int in_use ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  struct drm_tex_region *list ;
  unsigned int shift ;
  unsigned int nr ;
  unsigned int start ;
  unsigned int end ;
  unsigned int i ;
  int age ;

  {
#line 48
  dev_priv = dev->dev_private;
#line 49
  master_priv = ((dev->primary)->master)->driver_priv;
#line 50
  sarea_priv = master_priv->sarea_priv;
#line 58
  shift = dev_priv->tex_lru_log_granularity;
#line 59
  nr = 255;
#line 61
  start = p->start >> shift;
#line 62
  end = ((p->start + p->size) - 1) >> shift;
#line 64
  sarea_priv->texAge = sarea_priv->texAge + 1;
#line 64
  age = sarea_priv->texAge;
#line 65
  list = sarea_priv->texList;
#line 70
  i = start;
#line 70
  while (1) {
#line 70
    if (i <= end) {

    } else {
#line 70
      break;
    }
#line 71
    (list + i)->in_use = in_use;
#line 72
    (list + i)->age = age;
#line 76
    (list + (unsigned int )(list + i)->next)->prev = (list + i)->prev;
#line 77
    (list + (unsigned int )(list + i)->prev)->next = (list + i)->next;
#line 81
    (list + i)->prev = nr;
#line 82
    (list + i)->next = (list + nr)->next;
#line 83
    (list + (unsigned int )(list + nr)->next)->prev = i;
#line 84
    (list + nr)->next = i;
#line 70
    i = i + 1U;
  }
#line 86
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *split_block(struct mem_block *p , int start , int size ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *newblock ;
  void *tmp ;
  struct mem_block *newblock___0 ;
  void *tmp___0 ;

  {
#line 96
  if (start > p->start) {
#line 97
    tmp = drm_alloc(sizeof(*newblock), 14);
#line 97
    newblock = tmp;
#line 99
    if (! newblock) {
#line 100
      goto out;
    } else {

    }
#line 101
    newblock->start = start;
#line 102
    newblock->size = p->size - (start - p->start);
#line 103
    newblock->file_priv = (void *)0;
#line 104
    newblock->next = p->next;
#line 105
    newblock->prev = p;
#line 106
    (p->next)->prev = newblock;
#line 107
    p->next = newblock;
#line 108
    p->size = p->size - newblock->size;
#line 109
    p = newblock;
  } else {

  }
#line 113
  if (size < p->size) {
#line 114
    tmp___0 = drm_alloc(sizeof(*newblock___0), 14);
#line 114
    newblock___0 = tmp___0;
#line 116
    if (! newblock___0) {
#line 117
      goto out;
    } else {

    }
#line 118
    newblock___0->start = start + size;
#line 119
    newblock___0->size = p->size - size;
#line 120
    newblock___0->file_priv = (void *)0;
#line 121
    newblock___0->next = p->next;
#line 122
    newblock___0->prev = p;
#line 123
    (p->next)->prev = newblock___0;
#line 124
    p->next = newblock___0;
#line 125
    p->size = size;
  } else {

  }
  out: 
#line 130
  p->file_priv = file_priv;
#line 131
  return (p);
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *alloc_block(struct mem_block *heap , int size , int align2 ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *p ;
  int mask ;
  int start ;
  struct mem_block *tmp ;

  {
#line 138
  mask = (1 << align2) - 1;
#line 140
  p = heap->next;
#line 140
  while (1) {
#line 140
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 140
      break;
    }
#line 141
    start = (p->start + mask) & ~ mask;
#line 142
    if ((unsigned long )p->file_priv == (unsigned long )((void *)0) && start + size <= p->start + p->size) {
#line 143
      tmp = split_block(p, start, size, file_priv);
#line 143
      return (tmp);
    } else {

    }
#line 140
    p = p->next;
  }
#line 146
  return ((void *)0);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *find_block(struct mem_block *heap , int start ) 
{ 
  struct mem_block *p ;

  {
#line 153
  p = heap->next;
#line 153
  while (1) {
#line 153
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 153
      break;
    }
#line 154
    if (p->start == start) {
#line 155
      return (p);
    } else {

    }
#line 153
    p = p->next;
  }
#line 157
  return ((void *)0);
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static void free_block(struct mem_block *p ) 
{ 
  struct mem_block *q ;
  struct mem_block *q___0 ;

  {
#line 162
  p->file_priv = (void *)0;
#line 167
  if ((unsigned long )(p->next)->file_priv == (unsigned long )((void *)0)) {
#line 168
    q = p->next;
#line 169
    p->size = p->size + q->size;
#line 170
    p->next = q->next;
#line 171
    (p->next)->prev = p;
#line 172
    drm_free(q, sizeof(*q), 14);
  } else {

  }
#line 175
  if ((unsigned long )(p->prev)->file_priv == (unsigned long )((void *)0)) {
#line 176
    q___0 = p->prev;
#line 177
    q___0->size = q___0->size + p->size;
#line 178
    q___0->next = p->next;
#line 179
    (q___0->next)->prev = q___0;
#line 180
    drm_free(p, sizeof(*q___0), 14);
  } else {

  }
#line 182
  return;
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static int init_heap(struct mem_block **heap , int start , int size ) 
{ 
  struct mem_block *blocks ;
  void *tmp ;
  void *tmp___0 ;
  struct mem_block *tmp___1 ;
  struct mem_block *tmp___2 ;

  {
#line 188
  tmp = drm_alloc(sizeof(*blocks), 14);
#line 188
  blocks = tmp;
#line 190
  if (! blocks) {
#line 191
    return (-12);
  } else {

  }
#line 193
  tmp___0 = drm_alloc(sizeof(*(*heap)), 14);
#line 193
  *heap = tmp___0;
#line 194
  if (! *heap) {
#line 195
    drm_free(blocks, sizeof(*blocks), 14);
#line 196
    return (-12);
  } else {

  }
#line 199
  blocks->start = start;
#line 200
  blocks->size = size;
#line 201
  blocks->file_priv = (void *)0;
#line 202
  tmp___1 = *heap;
#line 202
  blocks->prev = tmp___1;
#line 202
  blocks->next = tmp___1;
#line 204
  memset(*heap, 0, sizeof(*(*heap)));
#line 205
  (*heap)->file_priv = (struct drm_file *)-1;
#line 206
  tmp___2 = blocks;
#line 206
  (*heap)->prev = tmp___2;
#line 206
  (*heap)->next = tmp___2;
#line 207
  return (0);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 217
  if (! heap || ! heap->next) {
#line 218
    return;
  } else {

  }
#line 220
  p = heap->next;
#line 220
  while (1) {
#line 220
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 220
      break;
    }
#line 221
    if ((unsigned long )p->file_priv == (unsigned long )file_priv) {
#line 222
      p->file_priv = (void *)0;
#line 223
      mark_block(dev, p, 0);
    } else {

    }
#line 220
    p = p->next;
  }
#line 230
  p = heap->next;
#line 230
  while (1) {
#line 230
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 230
      break;
    }
#line 231
    while (1) {
#line 231
      if ((unsigned long )p->file_priv == (unsigned long )((void *)0) && (unsigned long )(p->next)->file_priv == (unsigned long )((void *)0)) {

      } else {
#line 231
        break;
      }
#line 232
      q = p->next;
#line 233
      p->size = p->size + q->size;
#line 234
      p->next = q->next;
#line 235
      (p->next)->prev = p;
#line 236
      drm_free(q, sizeof(*q), 14);
    }
#line 230
    p = p->next;
  }
#line 239
  return;
}
}
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
void i915_mem_takedown(struct mem_block **heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 247
  if (! *heap) {
#line 248
    return;
  } else {

  }
#line 250
  p = (*heap)->next;
#line 250
  while (1) {
#line 250
    if ((unsigned long )p != (unsigned long )*heap) {

    } else {
#line 250
      break;
    }
#line 251
    q = p;
#line 252
    p = p->next;
#line 253
    drm_free(q, sizeof(*q), 14);
  }
#line 256
  drm_free(*heap, sizeof(*(*heap)), 14);
#line 257
  *heap = (void *)0;
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block **get_heap(drm_i915_private_t *dev_priv , int region ) 
{ 


  {
#line 262
  switch (region) {
  case 1: 
#line 264
  return (& dev_priv->agp_heap);
  default: 
#line 266
  return ((void *)0);
  }
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_alloc_t *alloc ;
  struct mem_block *block ;
  struct mem_block **heap ;
  unsigned long tmp ;

  {
#line 275
  dev_priv = dev->dev_private;
#line 276
  alloc = data;
#line 279
  if (! dev_priv) {
#line 280
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_alloc");
#line 281
    return (-22);
  } else {

  }
#line 284
  heap = get_heap(dev_priv, alloc->region);
#line 285
  if (! heap || ! *heap) {
#line 286
    return (-14);
  } else {

  }
#line 291
  if (alloc->alignment < 12) {
#line 292
    alloc->alignment = 12;
  } else {

  }
#line 294
  block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
#line 296
  if (! block) {
#line 297
    return (-12);
  } else {

  }
#line 299
  mark_block(dev, block, 1);
#line 301
  tmp = copy_to_user(alloc->region_offset, & block->start, sizeof(int ));
#line 301
  if (tmp) {
#line 303
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_mem_alloc");
#line 304
    return (-14);
  } else {

  }
#line 307
  return (0);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_free_t *memfree ;
  struct mem_block *block ;
  struct mem_block **heap ;

  {
#line 313
  dev_priv = dev->dev_private;
#line 314
  memfree = data;
#line 317
  if (! dev_priv) {
#line 318
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_free");
#line 319
    return (-22);
  } else {

  }
#line 322
  heap = get_heap(dev_priv, memfree->region);
#line 323
  if (! heap || ! *heap) {
#line 324
    return (-14);
  } else {

  }
#line 326
  block = find_block(*heap, memfree->region_offset);
#line 327
  if (! block) {
#line 328
    return (-14);
  } else {

  }
#line 330
  if ((unsigned long )block->file_priv != (unsigned long )file_priv) {
#line 331
    return (-1);
  } else {

  }
#line 333
  mark_block(dev, block, 0);
#line 334
  free_block(block);
#line 335
  return (0);
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_init_heap_t *initheap ;
  struct mem_block **heap ;
  int tmp ;

  {
#line 341
  dev_priv = dev->dev_private;
#line 342
  initheap = data;
#line 345
  if (! dev_priv) {
#line 346
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_init_heap");
#line 347
    return (-22);
  } else {

  }
#line 350
  heap = get_heap(dev_priv, initheap->region);
#line 351
  if (! heap) {
#line 352
    return (-14);
  } else {

  }
#line 354
  if (*heap) {
#line 355
    printk("<3>[drm:%s] *ERROR* heap already initialized?", "i915_mem_init_heap");
#line 356
    return (-14);
  } else {

  }
#line 359
  tmp = init_heap(heap, initheap->start, initheap->size);
#line 359
  return (tmp);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_destroy_heap_t *destroyheap ;
  struct mem_block **heap ;

  {
#line 365
  dev_priv = dev->dev_private;
#line 366
  destroyheap = data;
#line 369
  if (! dev_priv) {
#line 370
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_destroy_heap");
#line 371
    return (-22);
  } else {

  }
#line 374
  heap = get_heap(dev_priv, destroyheap->region);
#line 375
  if (! heap) {
#line 376
    printk("<3>[drm:%s] *ERROR* get_heap failed", "i915_mem_destroy_heap");
#line 377
    return (-14);
  } else {

  }
#line 380
  if (! *heap) {
#line 381
    printk("<3>[drm:%s] *ERROR* heap not initialized?", "i915_mem_destroy_heap");
#line 382
    return (-14);
  } else {

  }
#line 385
  i915_mem_takedown(heap);
#line 386
  return (0);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __bad_udelay(void) ;
#line 16
extern void __const_udelay(unsigned long xloops ) ;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 18
  __asm__  volatile   ("mov"
                       "b"
                       " %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 18
  return (ret);
}
}
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 26
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 26
  return;
}
}
#line 573 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus *bus , unsigned int devfn , int where ,
                                    u8 *val ) ;
#line 579
extern int pci_bus_write_config_byte(struct pci_bus *bus , unsigned int devfn , int where ,
                                     u8 val ) ;
#line 586 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 588
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 588
  return (tmp);
}
}
#line 599 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 601
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, val);
#line 601
  return (tmp);
}
}
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static bool i915_pipe_enabled___0(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 34
  dev_priv = dev->dev_private;
#line 36
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 37
    tmp = readl(dev_priv->regs + 24596);
#line 37
    return (tmp & (unsigned int )(1 << 31));
  } else {
#line 39
    tmp___0 = readl(dev_priv->regs + 24600);
#line 39
    return (tmp___0 & (unsigned int )(1 << 31));
  }
}
}
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_save_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;

  {
#line 44
  dev_priv = dev->dev_private;
#line 45
  reg = (unsigned int )pipe == (unsigned int )PIPE_A ? 40960 : 43008;
#line 49
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 49
  if (tmp) {

  } else {
#line 50
    return;
  }
#line 52
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 53
    array = dev_priv->save_palette_a;
  } else {
#line 55
    array = dev_priv->save_palette_b;
  }
#line 57
  i = 0;
#line 57
  while (1) {
#line 57
    if (i < 256) {

    } else {
#line 57
      break;
    }
#line 58
    *(array + i) = readl(dev_priv->regs + (reg + (unsigned long )(i << 2)));
#line 57
    i = i + 1;
  }
#line 59
  return;
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_restore_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;

  {
#line 63
  dev_priv = dev->dev_private;
#line 64
  reg = (unsigned int )pipe == (unsigned int )PIPE_A ? 40960 : 43008;
#line 68
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 68
  if (tmp) {

  } else {
#line 69
    return;
  }
#line 71
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 72
    array = dev_priv->save_palette_a;
  } else {
#line 74
    array = dev_priv->save_palette_b;
  }
#line 76
  i = 0;
#line 76
  while (1) {
#line 76
    if (i < 256) {

    } else {
#line 76
      break;
    }
#line 77
    writel(*(array + i), dev_priv->regs + (reg + (unsigned long )(i << 2)));
#line 76
    i = i + 1;
  }
#line 78
  return;
}
}
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static u8 i915_read_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                            u8 reg ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 82
  dev_priv = dev->dev_private;
#line 84
  writeb(reg, dev_priv->regs + (int )index_port);
#line 85
  tmp = readb(dev_priv->regs + (int )data_port);
#line 85
  return (tmp);
}
}
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static u8 i915_read_ar(struct drm_device *dev , u16 st01 , u8 reg , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 90
  dev_priv = dev->dev_private;
#line 92
  readb(dev_priv->regs + (int )st01);
#line 93
  writeb((int )palette_enable | (int )reg, dev_priv->regs + 960);
#line 94
  tmp = readb(dev_priv->regs + 961);
#line 94
  return (tmp);
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_write_ar(struct drm_device *dev , u16 st01 , u8 reg , u8 val , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 99
  dev_priv = dev->dev_private;
#line 101
  readb(dev_priv->regs + (int )st01);
#line 102
  writeb((int )palette_enable | (int )reg, dev_priv->regs + 960);
#line 103
  writeb(val, dev_priv->regs + 960);
#line 104
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_write_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                               u8 reg , u8 val ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 108
  dev_priv = dev->dev_private;
#line 110
  writeb(reg, dev_priv->regs + (int )index_port);
#line 111
  writeb(val, dev_priv->regs + (int )data_port);
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_save_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;
  u8 tmp ;

  {
#line 116
  dev_priv = dev->dev_private;
#line 121
  dev_priv->saveDACMASK = readb(dev_priv->regs + 966);
#line 123
  writeb(0, dev_priv->regs + 967);
#line 125
  i = 0;
#line 125
  while (1) {
#line 125
    if (i < 256 * 3) {

    } else {
#line 125
      break;
    }
#line 126
    dev_priv->saveDACDATA[i] = readb(dev_priv->regs + 969);
#line 125
    i = i + 1;
  }
#line 129
  dev_priv->saveMSR = readb(dev_priv->regs + 972);
#line 130
  if ((int )dev_priv->saveMSR & (1 << 0)) {
#line 131
    cr_index = 980;
#line 132
    cr_data = 981;
#line 133
    st01 = 986;
  } else {
#line 135
    cr_index = 948;
#line 136
    cr_data = 949;
#line 137
    st01 = 954;
  }
#line 141
  tmp = i915_read_indexed(dev, cr_index, cr_data, 17);
#line 141
  i915_write_indexed(dev, cr_index, cr_data, 17, (int )tmp & ~ 128);
#line 144
  i = 0;
#line 144
  while (1) {
#line 144
    if (i <= 36) {

    } else {
#line 144
      break;
    }
#line 145
    dev_priv->saveCR[i] = i915_read_indexed(dev, cr_index, cr_data, i);
#line 144
    i = i + 1;
  }
#line 148
  dev_priv->saveCR[17] = (int )dev_priv->saveCR[17] & ~ 128;
#line 151
  readb(dev_priv->regs + (int )st01);
#line 152
  dev_priv->saveAR_INDEX = readb(dev_priv->regs + 960);
#line 153
  i = 0;
#line 153
  while (1) {
#line 153
    if (i <= 20) {

    } else {
#line 153
      break;
    }
#line 154
    dev_priv->saveAR[i] = i915_read_ar(dev, st01, i, 0);
#line 153
    i = i + 1;
  }
#line 155
  readb(dev_priv->regs + (int )st01);
#line 156
  writeb(dev_priv->saveAR_INDEX, dev_priv->regs + 960);
#line 157
  readb(dev_priv->regs + (int )st01);
#line 160
  i = 0;
#line 160
  while (1) {
#line 160
    if (i < 9) {

    } else {
#line 160
      break;
    }
#line 161
    dev_priv->saveGR[i] = i915_read_indexed(dev, 974, 975, i);
#line 160
    i = i + 1;
  }
#line 164
  dev_priv->saveGR[16] = i915_read_indexed(dev, 974, 975, 16);
#line 166
  dev_priv->saveGR[17] = i915_read_indexed(dev, 974, 975, 17);
#line 168
  dev_priv->saveGR[24] = i915_read_indexed(dev, 974, 975, 24);
#line 172
  i = 0;
#line 172
  while (1) {
#line 172
    if (i < 8) {

    } else {
#line 172
      break;
    }
#line 173
    dev_priv->saveSR[i] = i915_read_indexed(dev, 964, 965, i);
#line 172
    i = i + 1;
  }
#line 175
  return;
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_restore_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;

  {
#line 179
  dev_priv = dev->dev_private;
#line 184
  writeb(dev_priv->saveMSR, dev_priv->regs + 962);
#line 185
  if ((int )dev_priv->saveMSR & (1 << 0)) {
#line 186
    cr_index = 980;
#line 187
    cr_data = 981;
#line 188
    st01 = 986;
  } else {
#line 190
    cr_index = 948;
#line 191
    cr_data = 949;
#line 192
    st01 = 954;
  }
#line 196
  i = 0;
#line 196
  while (1) {
#line 196
    if (i < 7) {

    } else {
#line 196
      break;
    }
#line 197
    i915_write_indexed(dev, 964, 965, i, dev_priv->saveSR[i]);
#line 196
    i = i + 1;
  }
#line 202
  i915_write_indexed(dev, cr_index, cr_data, 17, dev_priv->saveCR[17]);
#line 203
  i = 0;
#line 203
  while (1) {
#line 203
    if (i <= 36) {

    } else {
#line 203
      break;
    }
#line 204
    i915_write_indexed(dev, cr_index, cr_data, i, dev_priv->saveCR[i]);
#line 203
    i = i + 1;
  }
#line 207
  i = 0;
#line 207
  while (1) {
#line 207
    if (i < 9) {

    } else {
#line 207
      break;
    }
#line 208
    i915_write_indexed(dev, 974, 975, i, dev_priv->saveGR[i]);
#line 207
    i = i + 1;
  }
#line 211
  i915_write_indexed(dev, 974, 975, 16, dev_priv->saveGR[16]);
#line 213
  i915_write_indexed(dev, 974, 975, 17, dev_priv->saveGR[17]);
#line 215
  i915_write_indexed(dev, 974, 975, 24, dev_priv->saveGR[24]);
#line 219
  readb(dev_priv->regs + (int )st01);
#line 220
  i = 0;
#line 220
  while (1) {
#line 220
    if (i <= 20) {

    } else {
#line 220
      break;
    }
#line 221
    i915_write_ar(dev, st01, i, dev_priv->saveAR[i], 0);
#line 220
    i = i + 1;
  }
#line 222
  readb(dev_priv->regs + (int )st01);
#line 223
  writeb((int )dev_priv->saveAR_INDEX | 32, dev_priv->regs + 960);
#line 224
  readb(dev_priv->regs + (int )st01);
#line 227
  writeb(dev_priv->saveDACMASK, dev_priv->regs + 966);
#line 229
  writeb(0, dev_priv->regs + 968);
#line 231
  i = 0;
#line 231
  while (1) {
#line 231
    if (i < 256 * 3) {

    } else {
#line 231
      break;
    }
#line 232
    writeb(dev_priv->saveDACDATA[i], dev_priv->regs + 969);
#line 231
    i = i + 1;
  }
#line 234
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
int i915_save_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;

  {
#line 238
  dev_priv = dev->dev_private;
#line 241
  pci_read_config_byte(dev->pdev, 244, & dev_priv->saveLBB);
#line 244
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 245
    dev_priv->saveRENDERSTANDBY = readl(dev_priv->regs + 70072);
  } else {

  }
#line 248
  dev_priv->saveHWS = readl(dev_priv->regs + 8320);
#line 251
  dev_priv->saveDSPARB = readl(dev_priv->regs + 458800);
#line 254
  dev_priv->savePIPEACONF = readl(dev_priv->regs + 458760);
#line 255
  dev_priv->savePIPEASRC = readl(dev_priv->regs + 393244);
#line 256
  dev_priv->saveFPA0 = readl(dev_priv->regs + 24640);
#line 257
  dev_priv->saveFPA1 = readl(dev_priv->regs + 24644);
#line 258
  dev_priv->saveDPLL_A = readl(dev_priv->regs + 24596);
#line 259
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 260
    dev_priv->saveDPLL_A_MD = readl(dev_priv->regs + 24604);
  } else {

  }
#line 261
  dev_priv->saveHTOTAL_A = readl(dev_priv->regs + 393216);
#line 262
  dev_priv->saveHBLANK_A = readl(dev_priv->regs + 393220);
#line 263
  dev_priv->saveHSYNC_A = readl(dev_priv->regs + 393224);
#line 264
  dev_priv->saveVTOTAL_A = readl(dev_priv->regs + 393228);
#line 265
  dev_priv->saveVBLANK_A = readl(dev_priv->regs + 393232);
#line 266
  dev_priv->saveVSYNC_A = readl(dev_priv->regs + 393236);
#line 267
  dev_priv->saveBCLRPAT_A = readl(dev_priv->regs + 393248);
#line 269
  dev_priv->saveDSPACNTR = readl(dev_priv->regs + 459136);
#line 270
  dev_priv->saveDSPASTRIDE = readl(dev_priv->regs + 459144);
#line 271
  dev_priv->saveDSPASIZE = readl(dev_priv->regs + 459152);
#line 272
  dev_priv->saveDSPAPOS = readl(dev_priv->regs + 459148);
#line 273
  dev_priv->saveDSPAADDR = readl(dev_priv->regs + 459140);
#line 274
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 275
    dev_priv->saveDSPASURF = readl(dev_priv->regs + 459164);
#line 276
    dev_priv->saveDSPATILEOFF = readl(dev_priv->regs + 459172);
  } else {

  }
#line 278
  i915_save_palette(dev, PIPE_A);
#line 279
  dev_priv->savePIPEASTAT = readl(dev_priv->regs + 458788);
#line 282
  dev_priv->savePIPEBCONF = readl(dev_priv->regs + 462856);
#line 283
  dev_priv->savePIPEBSRC = readl(dev_priv->regs + 397340);
#line 284
  dev_priv->saveFPB0 = readl(dev_priv->regs + 24648);
#line 285
  dev_priv->saveFPB1 = readl(dev_priv->regs + 24652);
#line 286
  dev_priv->saveDPLL_B = readl(dev_priv->regs + 24600);
#line 287
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 288
    dev_priv->saveDPLL_B_MD = readl(dev_priv->regs + 24608);
  } else {

  }
#line 289
  dev_priv->saveHTOTAL_B = readl(dev_priv->regs + 397312);
#line 290
  dev_priv->saveHBLANK_B = readl(dev_priv->regs + 397316);
#line 291
  dev_priv->saveHSYNC_B = readl(dev_priv->regs + 397320);
#line 292
  dev_priv->saveVTOTAL_B = readl(dev_priv->regs + 397324);
#line 293
  dev_priv->saveVBLANK_B = readl(dev_priv->regs + 397328);
#line 294
  dev_priv->saveVSYNC_B = readl(dev_priv->regs + 397332);
#line 295
  dev_priv->saveBCLRPAT_A = readl(dev_priv->regs + 393248);
#line 297
  dev_priv->saveDSPBCNTR = readl(dev_priv->regs + 463232);
#line 298
  dev_priv->saveDSPBSTRIDE = readl(dev_priv->regs + 463240);
#line 299
  dev_priv->saveDSPBSIZE = readl(dev_priv->regs + 463248);
#line 300
  dev_priv->saveDSPBPOS = readl(dev_priv->regs + 463244);
#line 301
  dev_priv->saveDSPBADDR = readl(dev_priv->regs + 463236);
#line 302
  if (dev->pci_device == 10754 || dev->pci_device == 10818) {
#line 303
    dev_priv->saveDSPBSURF = readl(dev_priv->regs + 463260);
#line 304
    dev_priv->saveDSPBTILEOFF = readl(dev_priv->regs + 463268);
  } else {

  }
#line 306
  i915_save_palette(dev, PIPE_B);
#line 307
  dev_priv->savePIPEBSTAT = readl(dev_priv->regs + 462884);
#line 310
  dev_priv->saveADPA = readl(dev_priv->regs + 397568);
#line 313
  dev_priv->savePP_CONTROL = readl(dev_priv->regs + 397828);
#line 314
  dev_priv->savePFIT_PGM_RATIOS = readl(dev_priv->regs + 397876);
#line 315
  dev_priv->saveBLC_PWM_CTL = readl(dev_priv->regs + 397908);
#line 316
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 317
    dev_priv->saveBLC_PWM_CTL2 = readl(dev_priv->regs + 397904);
  } else {

  }
#line 318
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && ! (dev->pci_device == 13687)) {
#line 319
    dev_priv->saveLVDS = readl(dev_priv->regs + 397696);
  } else {

  }
#line 320
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 321
    dev_priv->savePFIT_CONTROL = readl(dev_priv->regs + 397872);
  } else {

  }
#line 322
  dev_priv->savePP_ON_DELAYS = readl(dev_priv->regs + 397832);
#line 323
  dev_priv->savePP_OFF_DELAYS = readl(dev_priv->regs + 397836);
#line 324
  dev_priv->savePP_DIVISOR = readl(dev_priv->regs + 397840);
#line 329
  dev_priv->saveFBC_CFB_BASE = readl(dev_priv->regs + 12800);
#line 330
  dev_priv->saveFBC_LL_BASE = readl(dev_priv->regs + 12804);
#line 331
  dev_priv->saveFBC_CONTROL2 = readl(dev_priv->regs + 12820);
#line 332
  dev_priv->saveFBC_CONTROL = readl(dev_priv->regs + 12808);
#line 335
  dev_priv->saveIIR = readl(dev_priv->regs + 8356);
#line 336
  dev_priv->saveIER = readl(dev_priv->regs + 8352);
#line 337
  dev_priv->saveIMR = readl(dev_priv->regs + 8360);
#line 340
  dev_priv->saveVGA0 = readl(dev_priv->regs + 24576);
#line 341
  dev_priv->saveVGA1 = readl(dev_priv->regs + 24580);
#line 342
  dev_priv->saveVGA_PD = readl(dev_priv->regs + 24592);
#line 343
  dev_priv->saveVGACNTRL = readl(dev_priv->regs + 463872);
#line 346
  dev_priv->saveD_STATE = readl(dev_priv->regs + 24836);
#line 347
  dev_priv->saveCG_2D_DIS = readl(dev_priv->regs + 25088);
#line 350
  dev_priv->saveCACHE_MODE_0 = readl(dev_priv->regs + 8480);
#line 353
  dev_priv->saveMI_ARB_STATE = readl(dev_priv->regs + 8420);
#line 356
  i = 0;
#line 356
  while (1) {
#line 356
    if (i < 16) {

    } else {
#line 356
      break;
    }
#line 357
    dev_priv->saveSWF0[i] = readl(dev_priv->regs + (463888 + (i << 2)));
#line 358
    dev_priv->saveSWF1[i] = readl(dev_priv->regs + (459792 + (i << 2)));
#line 356
    i = i + 1;
  }
#line 360
  i = 0;
#line 360
  while (1) {
#line 360
    if (i < 3) {

    } else {
#line 360
      break;
    }
#line 361
    dev_priv->saveSWF2[i] = readl(dev_priv->regs + (467988 + (i << 2)));
#line 360
    i = i + 1;
  }
#line 363
  i915_save_vga(dev);
#line 365
  return (0);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_suspend.c"
int i915_restore_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 370
  dev_priv = dev->dev_private;
#line 373
  pci_write_config_byte(dev->pdev, 244, dev_priv->saveLBB);
#line 376
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 377
    writel(dev_priv->saveRENDERSTANDBY, dev_priv->regs + 70072);
  } else {

  }
#line 380
  writel(dev_priv->saveHWS, dev_priv->regs + 8320);
#line 383
  writel(dev_priv->saveDSPARB, dev_priv->regs + 458800);
#line 387
  if (dev_priv->saveDPLL_A & (unsigned int )(1 << 31)) {
#line 388
    writel(dev_priv->saveDPLL_A & (unsigned int )(~ (1 << 31)), dev_priv->regs + 24596);
#line 390
    if (150 > 20000) {
#line 390
      __bad_udelay();
    } else {
#line 390
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 392
  writel(dev_priv->saveFPA0, dev_priv->regs + 24640);
#line 393
  writel(dev_priv->saveFPA1, dev_priv->regs + 24644);
#line 395
  writel(dev_priv->saveDPLL_A, dev_priv->regs + 24596);
#line 396
  if (150 > 20000) {
#line 396
    __bad_udelay();
  } else {
#line 396
    __const_udelay(150UL * 4295UL);
  }
#line 397
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 398
    writel(dev_priv->saveDPLL_A_MD, dev_priv->regs + 24604);
  } else {

  }
#line 399
  if (150 > 20000) {
#line 399
    __bad_udelay();
  } else {
#line 399
    __const_udelay(150UL * 4295UL);
  }
#line 402
  writel(dev_priv->saveHTOTAL_A, dev_priv->regs + 393216);
#line 403
  writel(dev_priv->saveHBLANK_A, dev_priv->regs + 393220);
#line 404
  writel(dev_priv->saveHSYNC_A, dev_priv->regs + 393224);
#line 405
  writel(dev_priv->saveVTOTAL_A, dev_priv->regs + 393228);
#line 406
  writel(dev_priv->saveVBLANK_A, dev_priv->regs + 393232);
#line 407
  writel(dev_priv->saveVSYNC_A, dev_priv->regs + 393236);
#line 408
  writel(dev_priv->saveBCLRPAT_A, dev_priv->regs + 393248);
#line 411
  writel(dev_priv->saveDSPASIZE, dev_priv->regs + 459152);
#line 412
  writel(dev_priv->saveDSPAPOS, dev_priv->regs + 459148);
#line 413
  writel(dev_priv->savePIPEASRC, dev_priv->regs + 393244);
#line 414
  writel(dev_priv->saveDSPAADDR, dev_priv->regs + 459140);
#line 415
  writel(dev_priv->saveDSPASTRIDE, dev_priv->regs + 459144);
#line 416
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 417
    writel(dev_priv->saveDSPASURF, dev_priv->regs + 459164);
#line 418
    writel(dev_priv->saveDSPATILEOFF, dev_priv->regs + 459172);
  } else {

  }
#line 421
  writel(dev_priv->savePIPEACONF, dev_priv->regs + 458760);
#line 423
  i915_restore_palette(dev, PIPE_A);
#line 425
  writel(dev_priv->saveDSPACNTR, dev_priv->regs + 459136);
#line 426
  tmp = readl(dev_priv->regs + 459140);
#line 426
  writel(tmp, dev_priv->regs + 459140);
#line 429
  if (dev_priv->saveDPLL_B & (unsigned int )(1 << 31)) {
#line 430
    writel(dev_priv->saveDPLL_B & (unsigned int )(~ (1 << 31)), dev_priv->regs + 24600);
#line 432
    if (150 > 20000) {
#line 432
      __bad_udelay();
    } else {
#line 432
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 434
  writel(dev_priv->saveFPB0, dev_priv->regs + 24648);
#line 435
  writel(dev_priv->saveFPB1, dev_priv->regs + 24652);
#line 437
  writel(dev_priv->saveDPLL_B, dev_priv->regs + 24600);
#line 438
  if (150 > 20000) {
#line 438
    __bad_udelay();
  } else {
#line 438
    __const_udelay(150UL * 4295UL);
  }
#line 439
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 440
    writel(dev_priv->saveDPLL_B_MD, dev_priv->regs + 24608);
  } else {

  }
#line 441
  if (150 > 20000) {
#line 441
    __bad_udelay();
  } else {
#line 441
    __const_udelay(150UL * 4295UL);
  }
#line 444
  writel(dev_priv->saveHTOTAL_B, dev_priv->regs + 397312);
#line 445
  writel(dev_priv->saveHBLANK_B, dev_priv->regs + 397316);
#line 446
  writel(dev_priv->saveHSYNC_B, dev_priv->regs + 397320);
#line 447
  writel(dev_priv->saveVTOTAL_B, dev_priv->regs + 397324);
#line 448
  writel(dev_priv->saveVBLANK_B, dev_priv->regs + 397328);
#line 449
  writel(dev_priv->saveVSYNC_B, dev_priv->regs + 397332);
#line 450
  writel(dev_priv->saveBCLRPAT_B, dev_priv->regs + 397344);
#line 453
  writel(dev_priv->saveDSPBSIZE, dev_priv->regs + 463248);
#line 454
  writel(dev_priv->saveDSPBPOS, dev_priv->regs + 463244);
#line 455
  writel(dev_priv->savePIPEBSRC, dev_priv->regs + 397340);
#line 456
  writel(dev_priv->saveDSPBADDR, dev_priv->regs + 463236);
#line 457
  writel(dev_priv->saveDSPBSTRIDE, dev_priv->regs + 463240);
#line 458
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 459
    writel(dev_priv->saveDSPBSURF, dev_priv->regs + 463260);
#line 460
    writel(dev_priv->saveDSPBTILEOFF, dev_priv->regs + 463268);
  } else {

  }
#line 463
  writel(dev_priv->savePIPEBCONF, dev_priv->regs + 462856);
#line 465
  i915_restore_palette(dev, PIPE_B);
#line 467
  writel(dev_priv->saveDSPBCNTR, dev_priv->regs + 463232);
#line 468
  tmp___0 = readl(dev_priv->regs + 463236);
#line 468
  writel(tmp___0, dev_priv->regs + 463236);
#line 471
  writel(dev_priv->saveADPA, dev_priv->regs + 397568);
#line 474
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 475
    writel(dev_priv->saveBLC_PWM_CTL2, dev_priv->regs + 397904);
  } else {

  }
#line 476
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && ! (dev->pci_device == 13687)) {
#line 477
    writel(dev_priv->saveLVDS, dev_priv->regs + 397696);
  } else {

  }
#line 478
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 479
    writel(dev_priv->savePFIT_CONTROL, dev_priv->regs + 397872);
  } else {

  }
#line 481
  writel(dev_priv->savePFIT_PGM_RATIOS, dev_priv->regs + 397876);
#line 482
  writel(dev_priv->saveBLC_PWM_CTL, dev_priv->regs + 397908);
#line 483
  writel(dev_priv->savePP_ON_DELAYS, dev_priv->regs + 397832);
#line 484
  writel(dev_priv->savePP_OFF_DELAYS, dev_priv->regs + 397836);
#line 485
  writel(dev_priv->savePP_DIVISOR, dev_priv->regs + 397840);
#line 486
  writel(dev_priv->savePP_CONTROL, dev_priv->regs + 397828);
#line 491
  writel(dev_priv->saveFBC_CFB_BASE, dev_priv->regs + 12800);
#line 492
  writel(dev_priv->saveFBC_LL_BASE, dev_priv->regs + 12804);
#line 493
  writel(dev_priv->saveFBC_CONTROL2, dev_priv->regs + 12820);
#line 494
  writel(dev_priv->saveFBC_CONTROL, dev_priv->regs + 12808);
#line 497
  writel(dev_priv->saveVGACNTRL, dev_priv->regs + 463872);
#line 498
  writel(dev_priv->saveVGA0, dev_priv->regs + 24576);
#line 499
  writel(dev_priv->saveVGA1, dev_priv->regs + 24580);
#line 500
  writel(dev_priv->saveVGA_PD, dev_priv->regs + 24592);
#line 501
  if (150 > 20000) {
#line 501
    __bad_udelay();
  } else {
#line 501
    __const_udelay(150UL * 4295UL);
  }
#line 504
  writel(dev_priv->saveD_STATE, dev_priv->regs + 24836);
#line 505
  writel(dev_priv->saveCG_2D_DIS, dev_priv->regs + 25088);
#line 508
  writel(dev_priv->saveCACHE_MODE_0 | 4294901760U, dev_priv->regs + 8480);
#line 511
  writel(dev_priv->saveMI_ARB_STATE | 4294901760U, dev_priv->regs + 8420);
#line 513
  i = 0;
#line 513
  while (1) {
#line 513
    if (i < 16) {

    } else {
#line 513
      break;
    }
#line 514
    writel(dev_priv->saveSWF0[i], dev_priv->regs + (463888 + (i << 2)));
#line 515
    writel(dev_priv->saveSWF1[i + 7], dev_priv->regs + (459792 + (i << 2)));
#line 513
    i = i + 1;
  }
#line 517
  i = 0;
#line 517
  while (1) {
#line 517
    if (i < 3) {

    } else {
#line 517
      break;
    }
#line 518
    writel(dev_priv->saveSWF2[i], dev_priv->regs + (467988 + (i << 2)));
#line 517
    i = i + 1;
  }
#line 520
  i915_restore_vga(dev);
#line 522
  return (0);
}
}
#line 36 "include/asm-generic/bug.h"
extern void warn_on_slowpath(char const   *file , int const   line ) ;
#line 120 "include/linux/kernel.h"
extern void __might_sleep(char *file , int line ) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> (12 - 1);
#line 14
  order = -1;
#line 15
  while (1) {
#line 16
    size = size >> 1;
#line 17
    order = order + 1;
#line 15
    if (size) {

    } else {
#line 15
      break;
    }
  }
#line 19
  return (order);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head *new , struct list_head *prev , struct list_head *next ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head *entry ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )head->next == (unsigned long )head);
}
}
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 51
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "addl %1,%0": "=m" (v->counter): "ir" (i), "m" (v->counter));
#line 54
  return;
}
}
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 65
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "subl %1,%0": "=m" (v->counter): "ir" (i), "m" (v->counter));
#line 68
  return;
}
}
#line 108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 110
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "decl %0": "=m" (v->counter): "m" (v->counter));
#line 113
  return;
}
}
#line 431 "include/linux/wait.h"
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 433
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 434
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 38 "include/linux/rwsem.h"
extern void down_write(struct rw_semaphore *sem ) ;
#line 53
extern void up_write(struct rw_semaphore *sem ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int msecs ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref *kref ) ;
#line 28
extern int kref_put(struct kref *kref , void (*release)(struct kref *kref ) ) ;
#line 40 "include/linux/timer.h"
extern void init_timer(struct timer_list *timer ) ;
#line 196 "include/linux/workqueue.h"
extern int schedule_delayed_work(struct delayed_work *work , unsigned long delay ) ;
#line 226
extern int cancel_delayed_work_sync(struct delayed_work *work ) ;
#line 1347 "include/linux/fs.h"
extern ssize_t vfs_read(struct file * , char * , size_t  , loff_t * ) ;
#line 1348
extern ssize_t vfs_write(struct file * , char const   * , size_t  , loff_t * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect(! (! ((unsigned long )ptr >= 0xfffffffffffff001UL)), 0);
#line 34
  return (tmp);
}
}
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val , void volatile   *addr ) 
{ 


  {
#line 50
  __asm__  volatile   ("mov"
                       "q"
                       " %0,%1": : "r" (val), "m" (*((unsigned long volatile   *)addr)): "memory");
#line 50
  return;
}
}
#line 315 "include/linux/mm.h"
extern void put_page(struct page *page ) ;
#line 589 "include/linux/mm.h"
__inline static void *( __attribute__((__always_inline__)) lowmem_page_address)(struct page *page ) 
{ 


  {
#line 591
  return ((void *)((unsigned long )((page - (struct page *)0xffffe20000000000UL) << 12) + 0xffff880000000000UL));
}
}
#line 782
extern void unmap_mapping_range(struct address_space *mapping , loff_t const   holebegin ,
                                loff_t const   holelen , int even_cows ) ;
#line 823
extern int set_page_dirty(struct page *page ) ;
#line 1110
extern unsigned long do_mmap_pgoff(struct file *file , unsigned long addr , unsigned long len ,
                                   unsigned long prot , unsigned long flag , unsigned long pgoff ) ;
#line 1118 "include/linux/mm.h"
__inline static unsigned long do_mmap(struct file *file , unsigned long addr , unsigned long len ,
                                      unsigned long prot , unsigned long flag , unsigned long offset ) 
{ 
  unsigned long ret ;

  {
#line 1122
  ret = -22;
#line 1123
  if (offset + ((len + ((1UL << 12) - 1UL)) & ~ ((1UL << 12) - 1UL)) < offset) {
#line 1124
    goto out;
  } else {

  }
#line 1125
  if (! (offset & ~ (~ ((1UL << 12) - 1UL)))) {
#line 1126
    ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> 12);
  } else {

  }
  out: 
#line 1128
  return (ret);
}
}
#line 1205
extern int vm_insert_pfn(struct vm_area_struct *vma , unsigned long addr , unsigned long pfn ) ;
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 182
extern long __copy_user_nocache(void *dst , void const   *src , unsigned int size ,
                                int zerorest ) ;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_from_user_inatomic_nocache(void *dst , void const   *src ,
                                                      unsigned int size ) 
{ 
  long tmp ;

  {
#line 196
  tmp = __copy_user_nocache(dst, src, size, 0);
#line 196
  return (tmp);
}
}
#line 39 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 41
  while (1) {
#line 41
    __might_sleep("include/linux/highmem.h", 41);
#line 41
    while (1) {
#line 41
      break;
    }
#line 41
    break;
  }
#line 42
  tmp = lowmem_page_address(page);
#line 42
  return (tmp);
}
}
#line 260 "include/linux/pagemap.h"
extern struct page *read_cache_page(struct address_space *mapping , unsigned long index ,
                                    filler_t *filler , void *data ) ;
#line 274 "include/linux/pagemap.h"
__inline static struct page *read_mapping_page(struct address_space *mapping , unsigned long index ,
                                               void *data ) 
{ 
  filler_t *filler ;
  struct page *tmp ;

  {
#line 277
  filler = (filler_t *)(mapping->a_ops)->readpage;
#line 278
  tmp = read_cache_page(mapping, index, filler, data);
#line 278
  return (tmp);
}
}
#line 55 "include/drm/drm_hashtab.h"
extern int drm_ht_insert_item(struct drm_open_hash *ht , struct drm_hash_item *item ) ;
#line 63
extern int drm_ht_remove_item(struct drm_open_hash *ht , struct drm_hash_item *item ) ;
#line 1072 "include/drm/drmP.h"
extern int drm_free_agp(struct agp_memory *handle , int pages ) ;
#line 1074
extern struct agp_memory *drm_agp_bind_pages(struct drm_device *dev , struct page **pages ,
                                             unsigned long num_pages , uint32_t gtt_offset ,
                                             uint32_t type ) ;
#line 1079
extern int drm_unbind_agp(struct agp_memory *handle ) ;
#line 1142
extern void drm_clflush_pages(struct page **pages , unsigned long num_pages ) ;
#line 1251
extern void drm_agp_chipset_flush(struct drm_device *dev ) ;
#line 1312
extern struct drm_mm_node *drm_mm_get_block(struct drm_mm_node *parent , unsigned long size ,
                                            unsigned int alignment ) ;
#line 1315
extern void drm_mm_put_block(struct drm_mm_node *cur ) ;
#line 1316
extern struct drm_mm_node *drm_mm_search_free(struct drm_mm  const  *mm , unsigned long size ,
                                              unsigned int alignment , int best_match ) ;
#line 1328
extern void drm_gem_object_free(struct kref *kref ) ;
#line 1329
extern struct drm_gem_object *drm_gem_object_alloc(struct drm_device *dev , size_t size ) ;
#line 1331
extern void drm_gem_object_handle_free(struct kref *kref ) ;
#line 1334 "include/drm/drmP.h"
__inline static void drm_gem_object_reference(struct drm_gem_object *obj ) 
{ 


  {
#line 1337
  kref_get(& obj->refcount);
#line 1338
  return;
}
}
#line 1340 "include/drm/drmP.h"
__inline static void drm_gem_object_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1343
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 1344
    return;
  } else {

  }
#line 1346
  kref_put(& obj->refcount, & drm_gem_object_free);
#line 1347
  return;
}
}
#line 1349
extern int drm_gem_handle_create(struct drm_file *file_priv , struct drm_gem_object *obj ,
                                 int *handlep ) ;
#line 1360 "include/drm/drmP.h"
__inline static void drm_gem_object_handle_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1363
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 1364
    return;
  } else {

  }
#line 1371
  kref_put(& obj->handlecount, & drm_gem_object_handle_free);
#line 1372
  drm_gem_object_unreference(obj);
#line 1373
  return;
}
}
#line 1375
extern struct drm_gem_object *drm_gem_object_lookup(struct drm_device *dev , struct drm_file *filp ,
                                                    int handle ) ;
#line 1388
extern void drm_core_ioremap_wc(struct drm_map *map , struct drm_device *dev ) ;
#line 100 "include/linux/io-mapping.h"
__inline static void *io_mapping_map_atomic_wc(struct io_mapping *mapping , unsigned long offset ) 
{ 


  {
#line 103
  return ((char *)mapping + offset);
}
}
#line 106 "include/linux/io-mapping.h"
__inline static void io_mapping_unmap_atomic(void *vaddr ) 
{ 


  {
#line 109
  return;
}
}
#line 584 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) ;
#line 585
void i915_gem_object_unpin(struct drm_gem_object *obj ) ;
#line 588
void i915_gem_retire_requests(struct drm_device *dev ) ;
#line 589
void i915_gem_retire_work_handler(struct work_struct *work ) ;
#line 590
void i915_gem_clflush_object(struct drm_gem_object *obj ) ;
#line 599
int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) ;
#line 603
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) ;
#line 180 "include/linux/swap.h"
extern void mark_page_accessed(struct page * ) ;
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) ;
#line 41
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) ;
#line 42
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) ;
#line 43
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) ;
#line 44
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) ;
#line 46
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) ;
#line 49
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) ;
#line 50
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) ;
#line 51
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) ;
#line 52
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) ;
#line 53
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) ;
#line 55
static void i915_gem_object_get_fence_reg(struct drm_gem_object *obj ) ;
#line 56
static void i915_gem_clear_fence_reg(struct drm_gem_object *obj ) ;
#line 57
static int i915_gem_evict_something(struct drm_device *dev ) ;
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_do_init(struct drm_device *dev , unsigned long start , unsigned long end ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 62
  dev_priv = dev->dev_private;
#line 64
  if ((start >= end || (start & ((1UL << 12) - 1UL)) != 0UL) || (end & ((1UL << 12) - 1UL)) != 0UL) {
#line 67
    return (-22);
  } else {

  }
#line 70
  drm_mm_init(& dev_priv->mm.gtt_space, start, end - start);
#line 73
  dev->gtt_total = (uint32_t )(end - start);
#line 75
  return (0);
}
}
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_init *args ;
  int ret ;

  {
#line 82
  args = data;
#line 85
  mutex_lock(& dev->struct_mutex);
#line 86
  ret = i915_gem_do_init(dev, args->gtt_start, args->gtt_end);
#line 87
  mutex_unlock(& dev->struct_mutex);
#line 89
  return (ret);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_aperture *args ;

  {
#line 96
  args = data;
#line 98
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 99
    return (-19);
  } else {

  }
#line 101
  args->aper_size = dev->gtt_total;
#line 102
  args->aper_available_size = args->aper_size - (uint64_t )dev->pin_memory.counter;
#line 105
  return (0);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_create *args ;
  struct drm_gem_object *obj ;
  int handle ;
  int ret ;

  {
#line 116
  args = data;
#line 120
  args->size = ((args->size + (uint64_t )((1UL << 12) - 1UL)) / (uint64_t )(1UL << 12)) * (uint64_t )(1UL << 12);
#line 123
  obj = drm_gem_object_alloc(dev, args->size);
#line 124
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 125
    return (-12);
  } else {

  }
#line 127
  ret = drm_gem_handle_create(file_priv, obj, & handle);
#line 128
  mutex_lock(& dev->struct_mutex);
#line 129
  drm_gem_object_handle_unreference(obj);
#line 130
  mutex_unlock(& dev->struct_mutex);
#line 132
  if (ret) {
#line 133
    return (ret);
  } else {

  }
#line 135
  args->handle = handle;
#line 137
  return (0);
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pread *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  ssize_t read ;
  loff_t offset ;
  int ret ;

  {
#line 149
  args = data;
#line 156
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 157
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 158
    return (-9);
  } else {

  }
#line 159
  obj_priv = obj->driver_private;
#line 165
  if ((args->offset > (uint64_t )obj->size || args->size > (uint64_t )obj->size) || args->offset + args->size > (uint64_t )obj->size) {
#line 167
    drm_gem_object_unreference(obj);
#line 168
    return (-22);
  } else {

  }
#line 171
  mutex_lock(& dev->struct_mutex);
#line 173
  ret = i915_gem_object_set_cpu_read_domain_range(obj, args->offset, args->size);
#line 175
  if (ret != 0) {
#line 176
    drm_gem_object_unreference(obj);
#line 177
    mutex_unlock(& dev->struct_mutex);
#line 178
    return (ret);
  } else {

  }
#line 181
  offset = args->offset;
#line 183
  read = vfs_read(obj->filp, (char *)((uintptr_t )args->data_ptr), args->size, & offset);
#line 185
  if ((uint64_t )read != args->size) {
#line 186
    drm_gem_object_unreference(obj);
#line 187
    mutex_unlock(& dev->struct_mutex);
#line 188
    if (read < (ssize_t )0) {
#line 189
      return (read);
    } else {
#line 191
      return (-22);
    }
  } else {

  }
#line 194
  drm_gem_object_unreference(obj);
#line 195
  mutex_unlock(& dev->struct_mutex);
#line 197
  return (0);
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
__inline static int fast_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr_atomic ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 213
  tmp = io_mapping_map_atomic_wc(mapping, page_base);
#line 213
  vaddr_atomic = tmp;
#line 214
  tmp___0 = __copy_from_user_inatomic_nocache(vaddr_atomic + page_offset___0, user_data,
                                              length);
#line 214
  unwritten = tmp___0;
#line 216
  io_mapping_unmap_atomic(vaddr_atomic);
#line 217
  if (unwritten) {
#line 218
    return (-14);
  } else {

  }
#line 219
  return (0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
__inline static int slow_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 235
  tmp = io_mapping_map_atomic_wc(mapping, page_base);
#line 235
  vaddr = tmp;
#line 236
  if ((unsigned long )vaddr == (unsigned long )((void *)0)) {
#line 237
    return (-14);
  } else {

  }
#line 238
  tmp___0 = __copy_from_user(vaddr + page_offset___0, user_data, length);
#line 238
  unwritten = tmp___0;
#line 240
  io_mapping_unmap_atomic(vaddr);
#line 241
  if (unwritten) {
#line 242
    return (-14);
  } else {

  }
#line 243
  return (0);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_gtt_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                               struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  drm_i915_private_t *dev_priv ;
  ssize_t remain ;
  loff_t offset ;
  loff_t page_base ;
  char *user_data ;
  int page_offset___0 ;
  int page_length ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 251
  obj_priv = obj->driver_private;
#line 252
  dev_priv = dev->dev_private;
#line 259
  user_data = (char *)((uintptr_t )args->data_ptr);
#line 260
  remain = args->size;
#line 261
  tmp = current_thread_info();
#line 261
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (user_data),
            "g" (remain), "rm" (tmp->addr_limit.seg));
#line 261
  if (flag == 0UL) {
#line 261
    tmp___0 = 1;
  } else {
#line 261
    tmp___0 = 0;
  }
#line 261
  tmp___1 = __builtin_expect(tmp___0, 1);
#line 261
  if (tmp___1) {

  } else {
#line 262
    return (-14);
  }
#line 265
  mutex_lock(& dev->struct_mutex);
#line 266
  ret = i915_gem_object_pin(obj, 0);
#line 267
  if (ret) {
#line 268
    mutex_unlock(& dev->struct_mutex);
#line 269
    return (ret);
  } else {

  }
#line 271
  ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 272
  if (ret) {
#line 273
    goto fail;
  } else {

  }
#line 275
  obj_priv = obj->driver_private;
#line 276
  offset = (uint64_t )obj_priv->gtt_offset + args->offset;
#line 277
  obj_priv->dirty = 1;
#line 279
  while (1) {
#line 279
    if (remain > (ssize_t )0) {

    } else {
#line 279
      break;
    }
#line 286
    page_base = offset & (long long )(~ ((1UL << 12) - 1UL));
#line 287
    page_offset___0 = offset & (long long )((1UL << 12) - 1UL);
#line 288
    page_length = remain;
#line 289
    if ((unsigned long )((ssize_t )page_offset___0 + remain) > 1UL << 12) {
#line 290
      page_length = (1UL << 12) - (unsigned long )page_offset___0;
    } else {

    }
#line 292
    ret = fast_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0, user_data,
                          page_length);
#line 299
    if (ret) {
#line 300
      ret = slow_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0,
                            user_data, page_length);
#line 303
      if (ret) {
#line 304
        goto fail;
      } else {

      }
    } else {

    }
#line 307
    remain = remain - (ssize_t )page_length;
#line 308
    user_data = user_data + page_length;
#line 309
    offset = offset + (loff_t )page_length;
  }
  fail: 
#line 313
  i915_gem_object_unpin(obj);
#line 314
  mutex_unlock(& dev->struct_mutex);
#line 316
  return (ret);
}
}
#line 319 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_shmem_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                                 struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  int ret ;
  loff_t offset ;
  ssize_t written ;

  {
#line 328
  mutex_lock(& dev->struct_mutex);
#line 330
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 331
  if (ret) {
#line 332
    mutex_unlock(& dev->struct_mutex);
#line 333
    return (ret);
  } else {

  }
#line 336
  offset = args->offset;
#line 338
  written = vfs_write(obj->filp, (char *)((uintptr_t )args->data_ptr), args->size,
                      & offset);
#line 341
  if ((uint64_t )written != args->size) {
#line 342
    mutex_unlock(& dev->struct_mutex);
#line 343
    if (written < (ssize_t )0) {
#line 344
      return (written);
    } else {
#line 346
      return (-22);
    }
  } else {

  }
#line 349
  mutex_unlock(& dev->struct_mutex);
#line 351
  return (0);
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pwrite *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 363
  args = data;
#line 366
  ret = 0;
#line 368
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 369
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 370
    return (-9);
  } else {

  }
#line 371
  obj_priv = obj->driver_private;
#line 377
  if ((args->offset > (uint64_t )obj->size || args->size > (uint64_t )obj->size) || args->offset + args->size > (uint64_t )obj->size) {
#line 379
    drm_gem_object_unreference(obj);
#line 380
    return (-22);
  } else {

  }
#line 389
  if (obj_priv->tiling_mode == (uint32_t )0 && dev->gtt_total != (uint32_t )0) {
#line 391
    ret = i915_gem_gtt_pwrite(dev, obj, args, file_priv);
  } else {
#line 393
    ret = i915_gem_shmem_pwrite(dev, obj, args, file_priv);
  }
#line 400
  drm_gem_object_unreference(obj);
#line 402
  return (ret);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_domain *args ;
  struct drm_gem_object *obj ;
  uint32_t read_domains ;
  uint32_t write_domain ;
  int ret ;

  {
#line 413
  args = data;
#line 415
  read_domains = args->read_domains;
#line 416
  write_domain = args->write_domain;
#line 419
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 420
    return (-19);
  } else {

  }
#line 423
  if (write_domain & (unsigned int )(~ (1 | 64))) {
#line 424
    return (-22);
  } else {

  }
#line 426
  if (read_domains & (unsigned int )(~ (1 | 64))) {
#line 427
    return (-22);
  } else {

  }
#line 432
  if (write_domain != (uint32_t )0 && read_domains != write_domain) {
#line 433
    return (-22);
  } else {

  }
#line 435
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 436
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 437
    return (-9);
  } else {

  }
#line 439
  mutex_lock(& dev->struct_mutex);
#line 444
  if (read_domains & 64U) {
#line 445
    ret = i915_gem_object_set_to_gtt_domain(obj, write_domain != (uint32_t )0);
#line 451
    if (ret == -22) {
#line 452
      ret = 0;
    } else {

    }
  } else {
#line 454
    ret = i915_gem_object_set_to_cpu_domain(obj, write_domain != (uint32_t )0);
  }
#line 457
  drm_gem_object_unreference(obj);
#line 458
  mutex_unlock(& dev->struct_mutex);
#line 459
  return (ret);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_sw_finish *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 469
  args = data;
#line 472
  ret = 0;
#line 474
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 475
    return (-19);
  } else {

  }
#line 477
  mutex_lock(& dev->struct_mutex);
#line 478
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 479
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 480
    mutex_unlock(& dev->struct_mutex);
#line 481
    return (-9);
  } else {

  }
#line 488
  obj_priv = obj->driver_private;
#line 491
  if (obj_priv->pin_count) {
#line 492
    i915_gem_object_flush_cpu_write_domain(obj);
  } else {

  }
#line 494
  drm_gem_object_unreference(obj);
#line 495
  mutex_unlock(& dev->struct_mutex);
#line 496
  return (ret);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap *args ;
  struct drm_gem_object *obj ;
  loff_t offset ;
  unsigned long addr ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;

  {
#line 510
  args = data;
#line 515
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 516
    return (-19);
  } else {

  }
#line 518
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 519
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 520
    return (-9);
  } else {

  }
#line 522
  offset = args->offset;
#line 524
  tmp = get_current();
#line 524
  down_write(& (tmp->mm)->mmap_sem);
#line 525
  addr = do_mmap(obj->filp, 0, args->size, 1 | 2, 1, args->offset);
#line 528
  tmp___0 = get_current();
#line 528
  up_write(& (tmp___0->mm)->mmap_sem);
#line 529
  mutex_lock(& dev->struct_mutex);
#line 530
  drm_gem_object_unreference(obj);
#line 531
  mutex_unlock(& dev->struct_mutex);
#line 532
  tmp___1 = IS_ERR((void *)addr);
#line 532
  if (tmp___1) {
#line 533
    return (addr);
  } else {

  }
#line 535
  args->addr_ptr = (uint64_t )addr;
#line 537
  return (0);
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_fault(struct vm_area_struct *vma , struct vm_fault *vmf ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  unsigned long page_offset___0 ;
  unsigned long pfn ;
  int ret ;

  {
#line 558
  obj = vma->vm_private_data;
#line 559
  dev = obj->dev;
#line 560
  dev_priv = dev->dev_private;
#line 561
  obj_priv = obj->driver_private;
#line 564
  ret = 0;
#line 567
  page_offset___0 = ((unsigned long )vmf->virtual_address - vma->vm_start) >> 12;
#line 571
  mutex_lock(& dev->struct_mutex);
#line 572
  if (! obj_priv->gtt_space) {
#line 573
    ret = i915_gem_object_bind_to_gtt(obj, obj_priv->gtt_alignment);
#line 574
    if (ret) {
#line 575
      mutex_unlock(& dev->struct_mutex);
#line 576
      return (2);
    } else {

    }
#line 578
    list_add(& obj_priv->list, & dev_priv->mm.inactive_list);
  } else {

  }
#line 582
  if (obj_priv->fence_reg == -1 && obj_priv->tiling_mode != (uint32_t )0) {
#line 584
    i915_gem_object_get_fence_reg(obj);
  } else {

  }
#line 586
  pfn = (((dev->agp)->base + (unsigned long )obj_priv->gtt_offset) >> 12) + page_offset___0;
#line 590
  ret = vm_insert_pfn(vma, (unsigned long )vmf->virtual_address, pfn);
#line 592
  mutex_unlock(& dev->struct_mutex);
#line 594
  switch (ret) {
  case -11: 
  case -12: 
#line 597
  return (1);
  case -16: 
  case -14: 
#line 600
  printk("<3>[drm:%s] *ERROR* can\'t insert pfn??  fault or busy...\n", "i915_gem_fault");
#line 601
  return (2);
  default: 
#line 603
  return (256);
  }
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_create_mmap_offset(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_gem_mm *mm ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_map_list *list ;
  struct drm_map *map ;
  int ret ;
  void *tmp ;
  int tmp___0 ;

  {
#line 621
  dev = obj->dev;
#line 622
  mm = dev->mm_private;
#line 623
  obj_priv = obj->driver_private;
#line 626
  ret = 0;
#line 629
  list = & obj->map_list;
#line 630
  tmp = drm_calloc(1, sizeof(struct drm_map_list ), 2);
#line 630
  list->map = tmp;
#line 632
  if (! list->map) {
#line 633
    return (-12);
  } else {

  }
#line 635
  map = list->map;
#line 636
  map->type = _DRM_GEM;
#line 637
  map->size = obj->size;
#line 638
  map->handle = obj;
#line 641
  list->file_offset_node = drm_mm_search_free(& mm->offset_manager, obj->size / (1UL << 12),
                                              0, 0);
#line 643
  if (! list->file_offset_node) {
#line 644
    printk("<3>[drm:%s] *ERROR* failed to allocate offset for bo %d\n", "i915_gem_create_mmap_offset",
           obj->name);
#line 645
    ret = -12;
#line 646
    goto out_free_list;
  } else {

  }
#line 649
  list->file_offset_node = drm_mm_get_block(list->file_offset_node, obj->size / (1UL << 12),
                                            0);
#line 651
  if (! list->file_offset_node) {
#line 652
    ret = -12;
#line 653
    goto out_free_list;
  } else {

  }
#line 656
  list->hash.key = (list->file_offset_node)->start;
#line 657
  tmp___0 = drm_ht_insert_item(& mm->offset_hash, & list->hash);
#line 657
  if (tmp___0) {
#line 658
    printk("<3>[drm:%s] *ERROR* failed to add to map hash\n", "i915_gem_create_mmap_offset");
#line 659
    goto out_free_mm;
  } else {

  }
#line 664
  obj_priv->mmap_offset = (uint64_t )list->hash.key << 12;
#line 666
  return (0);
  out_free_mm: 
#line 669
  drm_mm_put_block(list->file_offset_node);
  out_free_list: 
#line 671
  drm_free(list->map, sizeof(struct drm_map_list ), 2);
#line 673
  return (ret);
}
}
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static uint32_t i915_gem_get_gtt_alignment(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int start ;
  int i ;

  {
#line 686
  dev = obj->dev;
#line 687
  obj_priv = obj->driver_private;
#line 694
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) || obj_priv->tiling_mode == (uint32_t )0) {
#line 695
    return (4096);
  } else {

  }
#line 701
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 702
    start = 1024 * 1024;
  } else {
#line 704
    start = 512 * 1024;
  }
#line 706
  i = start;
#line 706
  while (1) {
#line 706
    if ((size_t )i < obj->size) {

    } else {
#line 706
      break;
    }
#line 706
    i = i << 1;
  }
#line 709
  return (i);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_mmap_gtt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap_gtt *args ;
  struct drm_i915_private *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 731
  args = data;
#line 732
  dev_priv = dev->dev_private;
#line 737
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 738
    return (-19);
  } else {

  }
#line 740
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 741
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 742
    return (-9);
  } else {

  }
#line 744
  mutex_lock(& dev->struct_mutex);
#line 746
  obj_priv = obj->driver_private;
#line 748
  if (! obj_priv->mmap_offset) {
#line 749
    ret = i915_gem_create_mmap_offset(obj);
#line 750
    if (ret) {
#line 751
      return (ret);
    } else {

    }
  } else {

  }
#line 754
  args->offset = obj_priv->mmap_offset;
#line 756
  obj_priv->gtt_alignment = i915_gem_get_gtt_alignment(obj);
#line 759
  if (obj_priv->agp_mem && obj_priv->gtt_offset & (obj_priv->gtt_alignment - (uint32_t )1)) {
#line 761
    drm_gem_object_unreference(obj);
#line 762
    mutex_unlock(& dev->struct_mutex);
#line 763
    return (-22);
  } else {

  }
#line 770
  if (! obj_priv->agp_mem) {
#line 771
    ret = i915_gem_object_bind_to_gtt(obj, obj_priv->gtt_alignment);
#line 772
    if (ret) {
#line 773
      drm_gem_object_unreference(obj);
#line 774
      mutex_unlock(& dev->struct_mutex);
#line 775
      return (ret);
    } else {

    }
#line 777
    list_add(& obj_priv->list, & dev_priv->mm.inactive_list);
  } else {

  }
#line 780
  drm_gem_object_unreference(obj);
#line 781
  mutex_unlock(& dev->struct_mutex);
#line 783
  return (0);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;

  {
#line 789
  obj_priv = obj->driver_private;
#line 790
  page_count___0 = obj->size / (1UL << 12);
#line 793
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 794
    return;
  } else {

  }
#line 797
  i = 0;
#line 797
  while (1) {
#line 797
    if (i < page_count___0) {

    } else {
#line 797
      break;
    }
#line 798
    if ((unsigned long )*(obj_priv->page_list + i) != (unsigned long )((void *)0)) {
#line 799
      if (obj_priv->dirty) {
#line 800
        set_page_dirty(*(obj_priv->page_list + i));
      } else {

      }
#line 801
      mark_page_accessed(*(obj_priv->page_list + i));
#line 802
      put_page(*(obj_priv->page_list + i));
    } else {

    }
#line 797
    i = i + 1;
  }
#line 804
  obj_priv->dirty = 0;
#line 806
  drm_free(obj_priv->page_list, (unsigned long )page_count___0 * sizeof(struct page *),
           2);
#line 809
  obj_priv->page_list = (void *)0;
#line 810
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_move_to_active(struct drm_gem_object *obj , uint32_t seqno ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 815
  dev = obj->dev;
#line 816
  dev_priv = dev->dev_private;
#line 817
  obj_priv = obj->driver_private;
#line 820
  if (! obj_priv->active) {
#line 821
    drm_gem_object_reference(obj);
#line 822
    obj_priv->active = 1;
  } else {

  }
#line 825
  list_move_tail(& obj_priv->list, & dev_priv->mm.active_list);
#line 827
  obj_priv->last_rendering_seqno = seqno;
#line 828
  return;
}
}
#line 830 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_move_to_flushing(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;

  {
#line 833
  dev = obj->dev;
#line 834
  dev_priv = dev->dev_private;
#line 835
  obj_priv = obj->driver_private;
#line 837
  while (1) {
#line 837
    tmp = __builtin_expect(! (! (! obj_priv->active)), 0);
#line 837
    if (tmp) {
#line 837
      while (1) {
#line 837
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (837), "i" (sizeof(struct bug_entry )));
#line 837
        while (1) {

        }
#line 837
        break;
      }
    } else {

    }
#line 837
    break;
  }
#line 838
  list_move_tail(& obj_priv->list, & dev_priv->mm.flushing_list);
#line 839
  obj_priv->last_rendering_seqno = 0;
#line 840
  return;
}
}
#line 842 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_move_to_inactive(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 845
  dev = obj->dev;
#line 846
  dev_priv = dev->dev_private;
#line 847
  obj_priv = obj->driver_private;
#line 850
  if (obj_priv->pin_count != 0) {
#line 851
    list_del_init(& obj_priv->list);
  } else {
#line 853
    list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
  }
#line 855
  obj_priv->last_rendering_seqno = 0;
#line 856
  if (obj_priv->active) {
#line 857
    obj_priv->active = 0;
#line 858
    drm_gem_object_unreference(obj);
  } else {

  }
#line 861
  return;
}
}
#line 871 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static uint32_t i915_add_request(struct drm_device *dev , uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *request ;
  uint32_t seqno ;
  int was_empty ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  void *tmp ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_i915_gem_object *next ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct drm_gem_object *obj ;

  {
#line 874
  dev_priv = dev->dev_private;
#line 880
  tmp = drm_calloc(1, sizeof(*request), 2);
#line 880
  request = tmp;
#line 881
  if ((unsigned long )request == (unsigned long )((void *)0)) {
#line 882
    return (0);
  } else {

  }
#line 887
  seqno = dev_priv->mm.next_gem_seqno;
#line 888
  dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
#line 889
  if (dev_priv->mm.next_gem_seqno == (uint32_t )0) {
#line 890
    dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
  } else {

  }
#line 892
  while (1) {
#line 892
    if (dev_priv->ring.space < 4 * 4) {
#line 892
      i915_wait_ring(dev, 4 * 4, "i915_add_request");
    } else {

    }
#line 892
    outcount = 0;
#line 892
    outring = dev_priv->ring.tail;
#line 892
    ringmask = dev_priv->ring.tail_mask;
#line 892
    virt = dev_priv->ring.virtual_start;
#line 892
    break;
  }
#line 893
  while (1) {
#line 893
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 893
    outcount = outcount + 1U;
#line 893
    outring = outring + 4U;
#line 893
    outring = outring & ringmask;
#line 893
    break;
  }
#line 894
  while (1) {
#line 894
    *((unsigned int volatile   *)(virt + outring)) = 32 << 2;
#line 894
    outcount = outcount + 1U;
#line 894
    outring = outring + 4U;
#line 894
    outring = outring & ringmask;
#line 894
    break;
  }
#line 895
  while (1) {
#line 895
    *((unsigned int volatile   *)(virt + outring)) = seqno;
#line 895
    outcount = outcount + 1U;
#line 895
    outring = outring + 4U;
#line 895
    outring = outring & ringmask;
#line 895
    break;
  }
#line 897
  while (1) {
#line 897
    *((unsigned int volatile   *)(virt + outring)) = (2 << 23) | 0;
#line 897
    outcount = outcount + 1U;
#line 897
    outring = outring + 4U;
#line 897
    outring = outring & ringmask;
#line 897
    break;
  }
#line 898
  while (1) {
#line 898
    dev_priv->ring.tail = outring;
#line 898
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 898
    writel(outring, dev_priv->regs + 8240);
#line 898
    break;
  }
#line 900
  while (1) {
#line 900
    if (drm_debug) {
#line 900
      printk("<7>[drm:%s] %d\n", "i915_add_request", seqno);
    } else {

    }
#line 900
    break;
  }
#line 902
  request->seqno = seqno;
#line 903
  request->emitted_jiffies = jiffies;
#line 904
  was_empty = list_empty(& dev_priv->mm.request_list);
#line 905
  list_add_tail(& request->list, & dev_priv->mm.request_list);
#line 910
  if (flush_domains != (uint32_t )0) {
#line 913
    __mptr = dev_priv->mm.flushing_list.next;
#line 913
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 913
    __mptr___0 = obj_priv->list.next;
#line 913
    next = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 913
    while (1) {
#line 913
      if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {

      } else {
#line 913
        break;
      }
#line 915
      obj = obj_priv->obj;
#line 917
      if ((obj->write_domain & flush_domains) == obj->write_domain) {
#line 919
        obj->write_domain = 0;
#line 920
        i915_gem_object_move_to_active(obj, seqno);
      } else {

      }
#line 913
      obj_priv = next;
#line 913
      __mptr___1 = next->list.next;
#line 913
      next = (struct drm_i915_gem_object *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
    }
  } else {

  }
#line 926
  if (was_empty && ! dev_priv->mm.suspended) {
#line 927
    schedule_delayed_work(& dev_priv->mm.retire_work, 250);
  } else {

  }
#line 928
  return (seqno);
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static uint32_t i915_retire_commands(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  uint32_t flush_domains ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 940
  dev_priv = dev->dev_private;
#line 941
  cmd = ((4 << 23) | 0) | (1 << 2);
#line 942
  flush_domains = 0;
#line 946
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 947
    flush_domains = flush_domains | 4U;
  } else {

  }
#line 948
  while (1) {
#line 948
    if (dev_priv->ring.space < 2 * 4) {
#line 948
      i915_wait_ring(dev, 2 * 4, "i915_retire_commands");
    } else {

    }
#line 948
    outcount = 0;
#line 948
    outring = dev_priv->ring.tail;
#line 948
    ringmask = dev_priv->ring.tail_mask;
#line 948
    virt = dev_priv->ring.virtual_start;
#line 948
    break;
  }
#line 949
  while (1) {
#line 949
    *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 949
    outcount = outcount + 1U;
#line 949
    outring = outring + 4U;
#line 949
    outring = outring & ringmask;
#line 949
    break;
  }
#line 950
  while (1) {
#line 950
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 950
    outcount = outcount + 1U;
#line 950
    outring = outring + 4U;
#line 950
    outring = outring & ringmask;
#line 950
    break;
  }
#line 951
  while (1) {
#line 951
    dev_priv->ring.tail = outring;
#line 951
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 951
    writel(outring, dev_priv->regs + 8240);
#line 951
    break;
  }
#line 952
  return (flush_domains);
}
}
#line 959 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_retire_request(struct drm_device *dev , struct drm_i915_gem_request *request ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 963
  dev_priv = dev->dev_private;
#line 968
  while (1) {
#line 968
    tmp = list_empty(& dev_priv->mm.active_list);
#line 968
    if (tmp) {
#line 968
      break;
    } else {

    }
#line 972
    __mptr = dev_priv->mm.active_list.next;
#line 972
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 975
    obj = obj_priv->obj;
#line 981
    if (obj_priv->last_rendering_seqno != request->seqno) {
#line 982
      return;
    } else {

    }
#line 989
    if (obj->write_domain != (uint32_t )0) {
#line 990
      i915_gem_object_move_to_flushing(obj);
    } else {
#line 992
      i915_gem_object_move_to_inactive(obj);
    }
  }
#line 994
  return;
}
}
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_seqno_passed(uint32_t seq1 , uint32_t seq2 ) 
{ 


  {
#line 1002
  return ((int32_t )(seq1 - seq2) >= 0);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
uint32_t i915_get_gem_seqno(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 1008
  dev_priv = dev->dev_private;
#line 1010
  return (*((u32 volatile   *)dev_priv->hw_status_page + 32));
}
}
#line 1016 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_retire_requests(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  struct drm_i915_gem_request *request ;
  uint32_t retiring_seqno ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1019
  dev_priv = dev->dev_private;
#line 1022
  seqno = i915_get_gem_seqno(dev);
#line 1024
  while (1) {
#line 1024
    tmp___0 = list_empty(& dev_priv->mm.request_list);
#line 1024
    if (tmp___0) {
#line 1024
      break;
    } else {

    }
#line 1028
    __mptr = dev_priv->mm.request_list.next;
#line 1028
    request = (struct drm_i915_gem_request *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 1031
    retiring_seqno = request->seqno;
#line 1033
    tmp = i915_seqno_passed(seqno, retiring_seqno);
#line 1033
    if (tmp || dev_priv->mm.wedged) {
#line 1035
      i915_gem_retire_request(dev, request);
#line 1037
      list_del(& request->list);
#line 1038
      drm_free(request, sizeof(*request), 2);
    } else {
#line 1040
      break;
    }
  }
#line 1042
  return;
}
}
#line 1044 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_retire_work_handler(struct work_struct *work ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_device *dev ;
  struct work_struct  const  *__mptr ;
  int tmp ;

  {
#line 1050
  __mptr = work;
#line 1050
  dev_priv = (drm_i915_private_t *)((char *)__mptr - (unsigned int )(& ((drm_i915_private_t *)0)->mm.retire_work.work));
#line 1052
  dev = dev_priv->dev;
#line 1054
  mutex_lock(& dev->struct_mutex);
#line 1055
  i915_gem_retire_requests(dev);
#line 1056
  if (! dev_priv->mm.suspended) {
#line 1056
    tmp = list_empty(& dev_priv->mm.request_list);
#line 1056
    if (tmp) {

    } else {
#line 1058
      schedule_delayed_work(& dev_priv->mm.retire_work, 250);
    }
  } else {

  }
#line 1059
  mutex_unlock(& dev->struct_mutex);
#line 1060
  return;
}
}
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_wait_request(struct drm_device *dev , uint32_t seqno ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  long tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  uint32_t tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  uint32_t tmp___5 ;
  int tmp___6 ;
  uint32_t tmp___7 ;
  int tmp___8 ;
  uint32_t tmp___9 ;

  {
#line 1069
  dev_priv = dev->dev_private;
#line 1070
  ret = 0;
#line 1072
  while (1) {
#line 1072
    tmp = __builtin_expect(! (! (seqno == (uint32_t )0)), 0);
#line 1072
    if (tmp) {
#line 1072
      while (1) {
#line 1072
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1072), "i" (sizeof(struct bug_entry )));
#line 1072
        while (1) {

        }
#line 1072
        break;
      }
    } else {

    }
#line 1072
    break;
  }
#line 1074
  tmp___7 = i915_get_gem_seqno(dev);
#line 1074
  tmp___8 = i915_seqno_passed(tmp___7, seqno);
#line 1074
  if (tmp___8) {

  } else {
#line 1075
    dev_priv->mm.waiting_gem_seqno = seqno;
#line 1076
    i915_user_irq_get(dev);
#line 1077
    __ret = 0;
#line 1077
    tmp___5 = i915_get_gem_seqno(dev);
#line 1077
    tmp___6 = i915_seqno_passed(tmp___5, seqno);
#line 1077
    if (tmp___6 || dev_priv->mm.wedged) {

    } else {
#line 1077
      while (1) {
#line 1077
        tmp___0 = get_current();
#line 1077
        __wait.flags = 0U;
#line 1077
        __wait.private = tmp___0;
#line 1077
        __wait.func = & autoremove_wake_function;
#line 1077
        __wait.task_list.next = & __wait.task_list;
#line 1077
        __wait.task_list.prev = & __wait.task_list;
#line 1077
        while (1) {
#line 1077
          prepare_to_wait(& dev_priv->irq_queue, & __wait, 1);
#line 1077
          tmp___1 = i915_get_gem_seqno(dev);
#line 1077
          tmp___2 = i915_seqno_passed(tmp___1, seqno);
#line 1077
          if (tmp___2 || dev_priv->mm.wedged) {
#line 1077
            break;
          } else {

          }
#line 1077
          tmp___3 = get_current();
#line 1077
          tmp___4 = signal_pending(tmp___3);
#line 1077
          if (tmp___4) {

          } else {
#line 1077
            schedule();
#line 1077
            goto __Cont;
          }
#line 1077
          __ret = -512;
#line 1077
          break;
          __Cont: /* CIL Label */ ;
        }
#line 1077
        finish_wait(& dev_priv->irq_queue, & __wait);
#line 1077
        break;
      }
    }
#line 1077
    ret = __ret;
#line 1081
    i915_user_irq_put(dev);
#line 1082
    dev_priv->mm.waiting_gem_seqno = 0;
  }
#line 1084
  if (dev_priv->mm.wedged) {
#line 1085
    ret = -5;
  } else {

  }
#line 1087
  if (ret && ret != -512) {
#line 1088
    tmp___9 = i915_get_gem_seqno(dev);
#line 1088
    printk("<3>[drm:%s] *ERROR* %s returns %d (awaiting %d at %d)\n", "i915_wait_request",
           "i915_wait_request", ret, seqno, tmp___9);
  } else {

  }
#line 1096
  if (ret == 0) {
#line 1097
    i915_gem_retire_requests(dev);
  } else {

  }
#line 1099
  return (ret);
}
}
#line 1102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_flush(struct drm_device *dev , uint32_t invalidate_domains ,
                           uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 1107
  dev_priv = dev->dev_private;
#line 1116
  if (flush_domains & 1U) {
#line 1117
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 1119
  if ((invalidate_domains | flush_domains) & (unsigned int )(~ (1 | 64))) {
#line 1149
    cmd = ((4 << 23) | 0) | (1 << 2);
#line 1150
    if ((invalidate_domains | flush_domains) & 2U) {
#line 1152
      cmd = cmd & (unsigned int )(~ (1 << 2));
    } else {

    }
#line 1153
    if (! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 1158
      if (invalidate_domains & 4U) {
#line 1159
        cmd = cmd | (unsigned int )(1 << 0);
      } else {

      }
    } else {

    }
#line 1161
    if (invalidate_domains & 16U) {
#line 1162
      cmd = cmd | (unsigned int )(1 << 1);
    } else {

    }
#line 1167
    while (1) {
#line 1167
      if (dev_priv->ring.space < 2 * 4) {
#line 1167
        i915_wait_ring(dev, 2 * 4, "i915_gem_flush");
      } else {

      }
#line 1167
      outcount = 0;
#line 1167
      outring = dev_priv->ring.tail;
#line 1167
      ringmask = dev_priv->ring.tail_mask;
#line 1167
      virt = dev_priv->ring.virtual_start;
#line 1167
      break;
    }
#line 1168
    while (1) {
#line 1168
      *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 1168
      outcount = outcount + 1U;
#line 1168
      outring = outring + 4U;
#line 1168
      outring = outring & ringmask;
#line 1168
      break;
    }
#line 1169
    while (1) {
#line 1169
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 1169
      outcount = outcount + 1U;
#line 1169
      outring = outring + 4U;
#line 1169
      outring = outring & ringmask;
#line 1169
      break;
    }
#line 1170
    while (1) {
#line 1170
      dev_priv->ring.tail = outring;
#line 1170
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 1170
      writel(outring, dev_priv->regs + 8240);
#line 1170
      break;
    }
  } else {

  }
#line 1172
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 1181
  dev = obj->dev;
#line 1182
  obj_priv = obj->driver_private;
#line 1188
  while (1) {
#line 1188
    tmp = __builtin_expect(! (! ((obj->write_domain & (unsigned int )(~ (1 | 64))) != 0U)),
                           0);
#line 1188
    if (tmp) {
#line 1188
      while (1) {
#line 1188
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1188), "i" (sizeof(struct bug_entry )));
#line 1188
        while (1) {

        }
#line 1188
        break;
      }
    } else {

    }
#line 1188
    break;
  }
#line 1193
  if (obj_priv->active) {
#line 1198
    ret = i915_wait_request(dev, obj_priv->last_rendering_seqno);
#line 1199
    if (ret != 0) {
#line 1200
      return (ret);
    } else {

    }
  } else {

  }
#line 1203
  return (0);
}
}
#line 1209 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_unbind(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  loff_t offset ;
  int ret ;
  long tmp ;
  int tmp___0 ;

  {
#line 1212
  dev = obj->dev;
#line 1213
  obj_priv = obj->driver_private;
#line 1215
  ret = 0;
#line 1221
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1222
    return (0);
  } else {

  }
#line 1224
  if (obj_priv->pin_count != 0) {
#line 1225
    printk("<3>[drm:%s] *ERROR* Attempting to unbind pinned buffer\n", "i915_gem_object_unbind");
#line 1226
    return (-22);
  } else {

  }
#line 1235
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 1236
  if (ret) {
#line 1237
    if (ret != -512) {
#line 1238
      printk("<3>[drm:%s] *ERROR* set_domain failed: %d\n", "i915_gem_object_unbind",
             ret);
    } else {

    }
#line 1239
    return (ret);
  } else {

  }
#line 1242
  if ((unsigned long )obj_priv->agp_mem != (unsigned long )((void *)0)) {
#line 1243
    drm_unbind_agp(obj_priv->agp_mem);
#line 1244
    drm_free_agp(obj_priv->agp_mem, obj->size / (1UL << 12));
#line 1245
    obj_priv->agp_mem = (void *)0;
  } else {

  }
#line 1248
  while (1) {
#line 1248
    tmp = __builtin_expect(! (! obj_priv->active), 0);
#line 1248
    if (tmp) {
#line 1248
      while (1) {
#line 1248
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1248), "i" (sizeof(struct bug_entry )));
#line 1248
        while (1) {

        }
#line 1248
        break;
      }
    } else {

    }
#line 1248
    break;
  }
#line 1251
  offset = (loff_t )obj->map_list.hash.key << 12;
#line 1252
  if (dev->dev_mapping) {
#line 1253
    unmap_mapping_range(dev->dev_mapping, offset, obj->size, 1);
  } else {

  }
#line 1255
  if (obj_priv->fence_reg != -1) {
#line 1256
    i915_gem_clear_fence_reg(obj);
  } else {

  }
#line 1258
  i915_gem_object_free_page_list(obj);
#line 1260
  if (obj_priv->gtt_space) {
#line 1261
    atomic_dec(& dev->gtt_count);
#line 1262
    atomic_sub(obj->size, & dev->gtt_memory);
#line 1264
    drm_mm_put_block(obj_priv->gtt_space);
#line 1265
    obj_priv->gtt_space = (void *)0;
  } else {

  }
#line 1269
  tmp___0 = list_empty(& obj_priv->list);
#line 1269
  if (tmp___0) {

  } else {
#line 1270
    list_del_init(& obj_priv->list);
  }
#line 1272
  return (0);
}
}
#line 1275 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_evict_something(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct drm_i915_gem_request *request ;
  struct list_head  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1278
  dev_priv = dev->dev_private;
#line 1281
  ret = 0;
#line 1283
  while (1) {
#line 1287
    tmp___1 = list_empty(& dev_priv->mm.inactive_list);
#line 1287
    if (tmp___1) {

    } else {
#line 1288
      __mptr = dev_priv->mm.inactive_list.next;
#line 1288
      obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 1291
      obj = obj_priv->obj;
#line 1292
      while (1) {
#line 1292
        tmp = __builtin_expect(! (! (obj_priv->pin_count != 0)), 0);
#line 1292
        if (tmp) {
#line 1292
          while (1) {
#line 1292
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                                 "i" (1292), "i" (sizeof(struct bug_entry )));
#line 1292
            while (1) {

            }
#line 1292
            break;
          }
        } else {

        }
#line 1292
        break;
      }
#line 1296
      while (1) {
#line 1296
        tmp___0 = __builtin_expect(! (! obj_priv->active), 0);
#line 1296
        if (tmp___0) {
#line 1296
          while (1) {
#line 1296
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                                 "i" (1296), "i" (sizeof(struct bug_entry )));
#line 1296
            while (1) {

            }
#line 1296
            break;
          }
        } else {

        }
#line 1296
        break;
      }
#line 1299
      ret = i915_gem_object_unbind(obj);
#line 1300
      break;
    }
#line 1307
    tmp___3 = list_empty(& dev_priv->mm.request_list);
#line 1307
    if (tmp___3) {

    } else {
#line 1310
      __mptr___0 = dev_priv->mm.request_list.next;
#line 1310
      request = (struct drm_i915_gem_request *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 1314
      ret = i915_wait_request(dev, request->seqno);
#line 1315
      if (ret) {
#line 1316
        break;
      } else {

      }
#line 1323
      tmp___2 = list_empty(& dev_priv->mm.inactive_list);
#line 1323
      if (tmp___2) {

      } else {
#line 1324
        goto __Cont;
      }
#line 1325
      break;
    }
#line 1333
    tmp___4 = list_empty(& dev_priv->mm.flushing_list);
#line 1333
    if (tmp___4) {

    } else {
#line 1334
      __mptr___1 = dev_priv->mm.flushing_list.next;
#line 1334
      obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 1337
      obj = obj_priv->obj;
#line 1339
      i915_gem_flush(dev, obj->write_domain, obj->write_domain);
#line 1342
      i915_add_request(dev, obj->write_domain);
#line 1344
      obj = (void *)0;
#line 1345
      goto __Cont;
    }
#line 1348
    tmp___5 = list_empty(& dev_priv->mm.flushing_list);
#line 1348
    tmp___6 = list_empty(& dev_priv->mm.request_list);
#line 1348
    tmp___7 = list_empty(& dev_priv->mm.inactive_list);
#line 1348
    printk("<3>[drm:%s] *ERROR* inactive empty %d request empty %d flushing empty %d\n",
           "i915_gem_evict_something", tmp___7, tmp___6, tmp___5);
#line 1356
    return (-12);
    __Cont: /* CIL Label */ ;
  }
#line 1358
  return (ret);
}
}
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_evict_everything(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 1366
  while (1) {
#line 1367
    ret = i915_gem_evict_something(dev);
#line 1368
    if (ret != 0) {
#line 1369
      break;
    } else {

    }
  }
#line 1371
  if (ret == -12) {
#line 1372
    return (0);
  } else {

  }
#line 1373
  return (ret);
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct page *page ;
  int ret ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 1379
  obj_priv = obj->driver_private;
#line 1386
  if (obj_priv->page_list) {
#line 1387
    return (0);
  } else {

  }
#line 1392
  page_count___0 = obj->size / (1UL << 12);
#line 1393
  while (1) {
#line 1393
    tmp = __builtin_expect(! (! ((unsigned long )obj_priv->page_list != (unsigned long )((void *)0))),
                           0);
#line 1393
    if (tmp) {
#line 1393
      while (1) {
#line 1393
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1393), "i" (sizeof(struct bug_entry )));
#line 1393
        while (1) {

        }
#line 1393
        break;
      }
    } else {

    }
#line 1393
    break;
  }
#line 1394
  tmp___0 = drm_calloc(page_count___0, sizeof(struct page *), 2);
#line 1394
  obj_priv->page_list = tmp___0;
#line 1396
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 1397
    printk("<3>[drm:%s] *ERROR* Faled to allocate page list\n", "i915_gem_object_get_page_list");
#line 1398
    return (-12);
  } else {

  }
#line 1401
  inode = ((obj->filp)->f_path.dentry)->d_inode;
#line 1402
  mapping = inode->i_mapping;
#line 1403
  i = 0;
#line 1403
  while (1) {
#line 1403
    if (i < page_count___0) {

    } else {
#line 1403
      break;
    }
#line 1404
    page = read_mapping_page(mapping, i, (void *)0);
#line 1405
    tmp___2 = IS_ERR(page);
#line 1405
    if (tmp___2) {
#line 1406
      tmp___1 = PTR_ERR(page);
#line 1406
      ret = tmp___1;
#line 1407
      printk("<3>[drm:%s] *ERROR* read_mapping_page failed: %d\n", "i915_gem_object_get_page_list",
             ret);
#line 1408
      i915_gem_object_free_page_list(obj);
#line 1409
      return (ret);
    } else {

    }
#line 1411
    *(obj_priv->page_list + i) = page;
#line 1403
    i = i + 1;
  }
#line 1413
  return (0);
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i965_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint64_t val ;

  {
#line 1418
  obj = reg->obj;
#line 1419
  dev = obj->dev;
#line 1420
  dev_priv = dev->dev_private;
#line 1421
  obj_priv = obj->driver_private;
#line 1422
  regnum = obj_priv->fence_reg;
#line 1425
  val = (uint64_t )((((size_t )obj_priv->gtt_offset + obj->size) - (size_t )4096) & 4294963200UL) << 32;
#line 1427
  val = val | (unsigned long long )(obj_priv->gtt_offset & 4294963200U);
#line 1428
  val = val | (unsigned long long )((obj_priv->stride / (uint32_t )128 - (uint32_t )1) << 2);
#line 1429
  if (obj_priv->tiling_mode == (uint32_t )2) {
#line 1430
    val = val | (unsigned long long )(1 << 1);
  } else {

  }
#line 1431
  val = val | (unsigned long long )(1 << 0);
#line 1433
  writeq(val, dev_priv->regs + (12288 + regnum * 8));
#line 1434
  return;
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint32_t val ;
  uint32_t pitch_val ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 1438
  obj = reg->obj;
#line 1439
  dev = obj->dev;
#line 1440
  dev_priv = dev->dev_private;
#line 1441
  obj_priv = obj->driver_private;
#line 1442
  regnum = obj_priv->fence_reg;
#line 1446
  if (obj_priv->gtt_offset & (unsigned int )(~ 267386880) || (unsigned long )obj_priv->gtt_offset & (obj->size - (size_t )1)) {
#line 1448
    __ret_warn_on = 1;
#line 1448
    tmp = __builtin_expect(! (! __ret_warn_on), 0);
#line 1448
    if (tmp) {
#line 1448
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                    1448, "%s: object not 1M or size aligned\n", "i915_write_fence_reg");
    } else {

    }
#line 1448
    __builtin_expect(! (! __ret_warn_on), 0);
#line 1449
    return;
  } else {

  }
#line 1452
  if (obj_priv->tiling_mode == (uint32_t )2 && ((dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1455
    pitch_val = obj_priv->stride / (uint32_t )128 - (uint32_t )1;
  } else {
#line 1457
    pitch_val = obj_priv->stride / (uint32_t )512 - (uint32_t )1;
  }
#line 1459
  val = obj_priv->gtt_offset;
#line 1460
  if (obj_priv->tiling_mode == (uint32_t )2) {
#line 1461
    val = val | (unsigned int )(1 << 12);
  } else {

  }
#line 1462
  tmp___0 = get_order(obj->size >> 20);
#line 1462
  val = val | (unsigned int )((tmp___0 - 1) << 8);
#line 1463
  val = val | (pitch_val << 4);
#line 1464
  val = val | (unsigned int )(1 << 0);
#line 1466
  writel(val, dev_priv->regs + (8192 + regnum * 4));
#line 1467
  return;
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i830_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint32_t val ;
  uint32_t pitch_val ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 1471
  obj = reg->obj;
#line 1472
  dev = obj->dev;
#line 1473
  dev_priv = dev->dev_private;
#line 1474
  obj_priv = obj->driver_private;
#line 1475
  regnum = obj_priv->fence_reg;
#line 1479
  if (obj_priv->gtt_offset & (unsigned int )(~ 267386880) || (unsigned long )obj_priv->gtt_offset & (obj->size - (size_t )1)) {
#line 1481
    __ret_warn_on = 1;
#line 1481
    tmp = __builtin_expect(! (! __ret_warn_on), 0);
#line 1481
    if (tmp) {
#line 1481
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                    1481, "%s: object not 1M or size aligned\n", "i830_write_fence_reg");
    } else {

    }
#line 1481
    __builtin_expect(! (! __ret_warn_on), 0);
#line 1482
    return;
  } else {

  }
#line 1485
  pitch_val = obj_priv->stride / (uint32_t )128 - (uint32_t )1;
#line 1487
  val = obj_priv->gtt_offset;
#line 1488
  if (obj_priv->tiling_mode == (uint32_t )2) {
#line 1489
    val = val | (unsigned int )(1 << 12);
  } else {

  }
#line 1490
  tmp___0 = get_order(obj->size >> 19);
#line 1490
  val = val | (unsigned int )((tmp___0 - 1) << 8);
#line 1491
  val = val | (pitch_val << 4);
#line 1492
  val = val | (unsigned int )(1 << 0);
#line 1494
  writel(val, dev_priv->regs + (8192 + regnum * 4));
#line 1496
  return;
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_get_fence_reg(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_i915_fence_reg *reg ;
  int i ;
  int ret ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  int __ret_warn_on___1 ;
  long tmp___1 ;
  struct drm_i915_gem_object *old_obj_priv ;
  loff_t offset ;
  int __ret_warn_on___2 ;
  long tmp___2 ;

  {
#line 1514
  dev = obj->dev;
#line 1515
  dev_priv = dev->dev_private;
#line 1516
  obj_priv = obj->driver_private;
#line 1517
  reg = (void *)0;
#line 1520
  switch (obj_priv->tiling_mode) {
  case (uint32_t )0: 
#line 1522
  __ret_warn_on = 1;
#line 1522
  tmp = __builtin_expect(! (! __ret_warn_on), 0);
#line 1522
  if (tmp) {
#line 1522
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                  1522, "allocating a fence for non-tiled object?\n");
  } else {

  }
#line 1522
  __builtin_expect(! (! __ret_warn_on), 0);
#line 1523
  break;
  case (uint32_t )1: 
#line 1525
  __ret_warn_on___0 = ! (! (obj_priv->stride & (unsigned int )(512 - 1)));
#line 1525
  tmp___0 = __builtin_expect(! (! __ret_warn_on___0), 0);
#line 1525
  if (tmp___0) {
#line 1525
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                  1526, "object is X tiled but has non-512B pitch\n");
  } else {

  }
#line 1525
  __builtin_expect(! (! __ret_warn_on___0), 0);
#line 1527
  break;
  case (uint32_t )2: 
#line 1529
  __ret_warn_on___1 = ! (! (obj_priv->stride & (unsigned int )(128 - 1)));
#line 1529
  tmp___1 = __builtin_expect(! (! __ret_warn_on___1), 0);
#line 1529
  if (tmp___1) {
#line 1529
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                  1530, "object is Y tiled but has non-128B pitch\n");
  } else {

  }
#line 1529
  __builtin_expect(! (! __ret_warn_on___1), 0);
#line 1531
  break;
  }
#line 1535
  i = dev_priv->fence_reg_start;
#line 1535
  while (1) {
#line 1535
    if (i < dev_priv->num_fence_regs) {

    } else {
#line 1535
      break;
    }
#line 1536
    reg = & dev_priv->fence_regs[i];
#line 1537
    if (! reg->obj) {
#line 1538
      break;
    } else {

    }
#line 1535
    i = i + 1;
  }
#line 1542
  if (i == dev_priv->num_fence_regs) {
#line 1543
    old_obj_priv = (void *)0;
    try_again: 
#line 1548
    i = dev_priv->fence_reg_start;
#line 1548
    while (1) {
#line 1548
      if (i < dev_priv->num_fence_regs) {

      } else {
#line 1548
        break;
      }
#line 1550
      reg = & dev_priv->fence_regs[i];
#line 1551
      old_obj_priv = (reg->obj)->driver_private;
#line 1552
      if (! old_obj_priv->pin_count) {
#line 1553
        break;
      } else {

      }
#line 1548
      i = i + 1;
    }
#line 1560
    if (i == dev_priv->num_fence_regs) {
#line 1561
      ret = i915_gem_object_wait_rendering(reg->obj);
#line 1562
      if (ret) {
#line 1563
        __ret_warn_on___2 = ! (! ret);
#line 1563
        tmp___2 = __builtin_expect(! (! __ret_warn_on___2), 0);
#line 1563
        if (tmp___2) {
#line 1563
          warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                        1563, "wait_rendering failed: %d\n", ret);
        } else {

        }
#line 1563
        __builtin_expect(! (! __ret_warn_on___2), 0);
#line 1564
        return;
      } else {

      }
#line 1566
      goto try_again;
    } else {

    }
#line 1573
    offset = (loff_t )(reg->obj)->map_list.hash.key << 12;
#line 1574
    if (dev->dev_mapping) {
#line 1575
      unmap_mapping_range(dev->dev_mapping, offset, (reg->obj)->size, 1);
    } else {

    }
#line 1577
    old_obj_priv->fence_reg = -1;
  } else {

  }
#line 1580
  obj_priv->fence_reg = i;
#line 1581
  reg->obj = obj;
#line 1583
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1584
    i965_write_fence_reg(reg);
  } else
#line 1585
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1586
    i915_write_fence_reg(reg);
  } else {
#line 1588
    i830_write_fence_reg(reg);
  }
#line 1589
  return;
}
}
#line 1598 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_clear_fence_reg(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1601
  dev = obj->dev;
#line 1602
  dev_priv = dev->dev_private;
#line 1603
  obj_priv = obj->driver_private;
#line 1605
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1606
    writeq(0, dev_priv->regs + (12288 + obj_priv->fence_reg * 8));
  } else {
#line 1608
    writel(0, dev_priv->regs + (8192 + obj_priv->fence_reg * 4));
  }
#line 1610
  dev_priv->fence_regs[obj_priv->fence_reg].obj = (void *)0;
#line 1611
  obj_priv->fence_reg = -1;
#line 1612
  return;
}
}
#line 1617 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_mm_node *free_space ;
  int page_count___0 ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 1620
  dev = obj->dev;
#line 1621
  dev_priv = dev->dev_private;
#line 1622
  obj_priv = obj->driver_private;
#line 1626
  if (alignment == 0U) {
#line 1627
    alignment = 1UL << 12;
  } else {

  }
#line 1628
  if ((unsigned long )alignment & ((1UL << 12) - 1UL)) {
#line 1629
    printk("<3>[drm:%s] *ERROR* Invalid object alignment requested %u\n", "i915_gem_object_bind_to_gtt",
           alignment);
#line 1630
    return (-22);
  } else {

  }
  search_free: 
#line 1634
  free_space = drm_mm_search_free(& dev_priv->mm.gtt_space, obj->size, alignment,
                                  0);
#line 1636
  if ((unsigned long )free_space != (unsigned long )((void *)0)) {
#line 1637
    obj_priv->gtt_space = drm_mm_get_block(free_space, obj->size, alignment);
#line 1639
    if ((unsigned long )obj_priv->gtt_space != (unsigned long )((void *)0)) {
#line 1640
      (obj_priv->gtt_space)->private = obj;
#line 1641
      obj_priv->gtt_offset = (obj_priv->gtt_space)->start;
    } else {

    }
  } else {

  }
#line 1644
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1651
    tmp = list_empty(& dev_priv->mm.inactive_list);
#line 1651
    if (tmp) {
#line 1651
      tmp___0 = list_empty(& dev_priv->mm.flushing_list);
#line 1651
      if (tmp___0) {
#line 1651
        tmp___1 = list_empty(& dev_priv->mm.active_list);
#line 1651
        if (tmp___1) {
#line 1654
          printk("<3>[drm:%s] *ERROR* GTT full, but LRU list empty\n", "i915_gem_object_bind_to_gtt");
#line 1655
          return (-12);
        } else {

        }
      } else {

      }
    } else {

    }
#line 1658
    ret = i915_gem_evict_something(dev);
#line 1659
    if (ret != 0) {
#line 1660
      if (ret != -512) {
#line 1661
        printk("<3>[drm:%s] *ERROR* Failed to evict a buffer %d\n", "i915_gem_object_bind_to_gtt",
               ret);
      } else {

      }
#line 1662
      return (ret);
    } else {

    }
#line 1664
    goto search_free;
  } else {

  }
#line 1671
  ret = i915_gem_object_get_page_list(obj);
#line 1672
  if (ret) {
#line 1673
    drm_mm_put_block(obj_priv->gtt_space);
#line 1674
    obj_priv->gtt_space = (void *)0;
#line 1675
    return (ret);
  } else {

  }
#line 1678
  page_count___0 = obj->size / (1UL << 12);
#line 1682
  obj_priv->agp_mem = drm_agp_bind_pages(dev, obj_priv->page_list, page_count___0,
                                         obj_priv->gtt_offset, obj_priv->agp_type);
#line 1687
  if ((unsigned long )obj_priv->agp_mem == (unsigned long )((void *)0)) {
#line 1688
    i915_gem_object_free_page_list(obj);
#line 1689
    drm_mm_put_block(obj_priv->gtt_space);
#line 1690
    obj_priv->gtt_space = (void *)0;
#line 1691
    return (-12);
  } else {

  }
#line 1693
  atomic_inc(& dev->gtt_count);
#line 1694
  atomic_add(obj->size, & dev->gtt_memory);
#line 1700
  while (1) {
#line 1700
    tmp___2 = __builtin_expect(! (! (obj->read_domains & (unsigned int )(~ (1 | 64)))),
                               0);
#line 1700
    if (tmp___2) {
#line 1700
      while (1) {
#line 1700
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1700), "i" (sizeof(struct bug_entry )));
#line 1700
        while (1) {

        }
#line 1700
        break;
      }
    } else {

    }
#line 1700
    break;
  }
#line 1701
  while (1) {
#line 1701
    tmp___3 = __builtin_expect(! (! (obj->write_domain & (unsigned int )(~ (1 | 64)))),
                               0);
#line 1701
    if (tmp___3) {
#line 1701
      while (1) {
#line 1701
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1701), "i" (sizeof(struct bug_entry )));
#line 1701
        while (1) {

        }
#line 1701
        break;
      }
    } else {

    }
#line 1701
    break;
  }
#line 1703
  return (0);
}
}
#line 1706 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_clflush_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1709
  obj_priv = obj->driver_private;
#line 1715
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 1716
    return;
  } else {

  }
#line 1718
  drm_clflush_pages(obj_priv->page_list, obj->size / (1UL << 12));
#line 1719
  return;
}
}
#line 1722 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  uint32_t seqno ;

  {
#line 1725
  dev = obj->dev;
#line 1728
  if ((obj->write_domain & (unsigned int )(~ (1 | 64))) == 0U) {
#line 1729
    return;
  } else {

  }
#line 1732
  i915_gem_flush(dev, 0, obj->write_domain);
#line 1733
  seqno = i915_add_request(dev, obj->write_domain);
#line 1734
  obj->write_domain = 0;
#line 1735
  i915_gem_object_move_to_active(obj, seqno);
#line 1736
  return;
}
}
#line 1739 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) 
{ 


  {
#line 1742
  if (obj->write_domain != (uint32_t )64) {
#line 1743
    return;
  } else {

  }
#line 1749
  obj->write_domain = 0;
#line 1750
  return;
}
}
#line 1753 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;

  {
#line 1756
  dev = obj->dev;
#line 1758
  if (obj->write_domain != (uint32_t )1) {
#line 1759
    return;
  } else {

  }
#line 1761
  i915_gem_clflush_object(obj);
#line 1762
  drm_agp_chipset_flush(dev);
#line 1763
  obj->write_domain = 0;
#line 1764
  return;
}
}
#line 1772 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 1775
  obj_priv = obj->driver_private;
#line 1779
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1780
    return (-22);
  } else {

  }
#line 1782
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1784
  ret = i915_gem_object_wait_rendering(obj);
#line 1785
  if (ret != 0) {
#line 1786
    return (ret);
  } else {

  }
#line 1791
  if (write) {
#line 1792
    obj->read_domains = obj->read_domains & 64U;
  } else {

  }
#line 1794
  i915_gem_object_flush_cpu_write_domain(obj);
#line 1799
  while (1) {
#line 1799
    tmp = __builtin_expect(! (! ((obj->write_domain & (unsigned int )(~ 64)) != 0U)),
                           0);
#line 1799
    if (tmp) {
#line 1799
      while (1) {
#line 1799
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1799), "i" (sizeof(struct bug_entry )));
#line 1799
        while (1) {

        }
#line 1799
        break;
      }
    } else {

    }
#line 1799
    break;
  }
#line 1800
  obj->read_domains = obj->read_domains | 64U;
#line 1801
  if (write) {
#line 1802
    obj->write_domain = 64;
#line 1803
    obj_priv->dirty = 1;
  } else {

  }
#line 1806
  return (0);
}
}
#line 1815 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_device *dev ;
  int ret ;
  long tmp ;

  {
#line 1818
  dev = obj->dev;
#line 1821
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1823
  ret = i915_gem_object_wait_rendering(obj);
#line 1824
  if (ret != 0) {
#line 1825
    return (ret);
  } else {

  }
#line 1827
  i915_gem_object_flush_gtt_write_domain(obj);
#line 1832
  i915_gem_object_set_to_full_cpu_read_domain(obj);
#line 1835
  if ((obj->read_domains & 1U) == 0U) {
#line 1836
    i915_gem_clflush_object(obj);
#line 1837
    drm_agp_chipset_flush(dev);
#line 1839
    obj->read_domains = obj->read_domains | 1U;
  } else {

  }
#line 1845
  while (1) {
#line 1845
    tmp = __builtin_expect(! (! ((obj->write_domain & (unsigned int )(~ 1)) != 0U)),
                           0);
#line 1845
    if (tmp) {
#line 1845
      while (1) {
#line 1845
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1845), "i" (sizeof(struct bug_entry )));
#line 1845
        while (1) {

        }
#line 1845
        break;
      }
    } else {

    }
#line 1845
    break;
  }
#line 1850
  if (write) {
#line 1851
    obj->read_domains = obj->read_domains & 1U;
#line 1852
    obj->write_domain = 1;
  } else {

  }
#line 1855
  return (0);
}
}
#line 1969 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  uint32_t invalidate_domains ;
  uint32_t flush_domains ;
  long tmp ;
  long tmp___0 ;

  {
#line 1974
  dev = obj->dev;
#line 1975
  obj_priv = obj->driver_private;
#line 1976
  invalidate_domains = 0;
#line 1977
  flush_domains = 0;
#line 1979
  while (1) {
#line 1979
    tmp = __builtin_expect(! (! (read_domains & 1U)), 0);
#line 1979
    if (tmp) {
#line 1979
      while (1) {
#line 1979
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1979), "i" (sizeof(struct bug_entry )));
#line 1979
        while (1) {

        }
#line 1979
        break;
      }
    } else {

    }
#line 1979
    break;
  }
#line 1980
  while (1) {
#line 1980
    tmp___0 = __builtin_expect(! (! (write_domain == (uint32_t )1)), 0);
#line 1980
    if (tmp___0) {
#line 1980
      while (1) {
#line 1980
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1980), "i" (sizeof(struct bug_entry )));
#line 1980
        while (1) {

        }
#line 1980
        break;
      }
    } else {

    }
#line 1980
    break;
  }
#line 1992
  if (write_domain == (uint32_t )0) {
#line 1993
    read_domains = read_domains | obj->read_domains;
  } else {
#line 1995
    obj_priv->dirty = 1;
  }
#line 2003
  if (obj->write_domain && obj->write_domain != read_domains) {
#line 2004
    flush_domains = flush_domains | obj->write_domain;
#line 2005
    invalidate_domains = invalidate_domains | (read_domains & ~ obj->write_domain);
  } else {

  }
#line 2011
  invalidate_domains = invalidate_domains | (read_domains & ~ obj->read_domains);
#line 2012
  if ((flush_domains | invalidate_domains) & 1U) {
#line 2017
    i915_gem_clflush_object(obj);
  } else {

  }
#line 2020
  if ((write_domain | flush_domains) != 0U) {
#line 2021
    obj->write_domain = write_domain;
  } else {

  }
#line 2022
  obj->read_domains = read_domains;
#line 2024
  dev->invalidate_domains = dev->invalidate_domains | invalidate_domains;
#line 2025
  dev->flush_domains = dev->flush_domains | flush_domains;
#line 2032
  return;
}
}
#line 2040 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;

  {
#line 2043
  dev = obj->dev;
#line 2044
  obj_priv = obj->driver_private;
#line 2046
  if (! obj_priv->page_cpu_valid) {
#line 2047
    return;
  } else {

  }
#line 2051
  if (obj->read_domains & 1U) {
#line 2054
    i = 0;
#line 2054
    while (1) {
#line 2054
      if ((size_t )i <= (obj->size - (size_t )1) / (1UL << 12)) {

      } else {
#line 2054
        break;
      }
#line 2055
      if (*(obj_priv->page_cpu_valid + i)) {
#line 2056
        goto __Cont;
      } else {

      }
#line 2057
      drm_clflush_pages(obj_priv->page_list + i, 1);
      __Cont: /* CIL Label */ 
#line 2054
      i = i + 1;
    }
#line 2059
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 2065
  drm_free(obj_priv->page_cpu_valid, obj->size / (1UL << 12), 2);
#line 2067
  obj_priv->page_cpu_valid = (void *)0;
#line 2068
  return;
}
}
#line 2082 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  long tmp___1 ;

  {
#line 2086
  obj_priv = obj->driver_private;
#line 2089
  if (offset == (uint64_t )0 && size == (uint64_t )obj->size) {
#line 2090
    tmp = i915_gem_object_set_to_cpu_domain(obj, 0);
#line 2090
    return (tmp);
  } else {

  }
#line 2092
  i915_gem_object_flush_gpu_write_domain(obj);
#line 2094
  ret = i915_gem_object_wait_rendering(obj);
#line 2095
  if (ret != 0) {
#line 2096
    return (ret);
  } else {

  }
#line 2097
  i915_gem_object_flush_gtt_write_domain(obj);
#line 2100
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((void *)0) && (obj->read_domains & 1U) != 0U) {
#line 2102
    return (0);
  } else {

  }
#line 2107
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((void *)0)) {
#line 2108
    tmp___0 = drm_calloc(1, obj->size / (1UL << 12), 2);
#line 2108
    obj_priv->page_cpu_valid = tmp___0;
#line 2110
    if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((void *)0)) {
#line 2111
      return (-12);
    } else {

    }
  } else
#line 2112
  if ((obj->read_domains & 1U) == 0U) {
#line 2113
    memset(obj_priv->page_cpu_valid, 0, obj->size / (1UL << 12));
  } else {

  }
#line 2118
  i = offset / (uint64_t )(1UL << 12);
#line 2118
  while (1) {
#line 2118
    if ((uint64_t )i <= ((offset + size) - (uint64_t )1) / (uint64_t )(1UL << 12)) {

    } else {
#line 2118
      break;
    }
#line 2120
    if (*(obj_priv->page_cpu_valid + i)) {
#line 2121
      goto __Cont;
    } else {

    }
#line 2123
    drm_clflush_pages(obj_priv->page_list + i, 1);
#line 2125
    *(obj_priv->page_cpu_valid + i) = 1;
    __Cont: /* CIL Label */ 
#line 2118
    i = i + 1;
  }
#line 2131
  while (1) {
#line 2131
    tmp___1 = __builtin_expect(! (! ((obj->write_domain & (unsigned int )(~ 1)) != 0U)),
                               0);
#line 2131
    if (tmp___1) {
#line 2131
      while (1) {
#line 2131
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2131), "i" (sizeof(struct bug_entry )));
#line 2131
        while (1) {

        }
#line 2131
        break;
      }
    } else {

    }
#line 2131
    break;
  }
#line 2133
  obj->read_domains = obj->read_domains | 1U;
#line 2135
  return (0);
}
}
#line 2141 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_pin_and_relocate(struct drm_gem_object *obj , struct drm_file *file_priv ,
                                            struct drm_i915_gem_exec_object *entry ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_relocation_entry reloc ;
  struct drm_i915_gem_relocation_entry *relocs ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  void *reloc_page ;
  struct drm_gem_object *target_obj ;
  struct drm_i915_gem_object *target_obj_priv ;
  uint32_t reloc_val ;
  uint32_t reloc_offset ;
  uint32_t *reloc_entry ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 2146
  dev = obj->dev;
#line 2147
  dev_priv = dev->dev_private;
#line 2150
  obj_priv = obj->driver_private;
#line 2155
  ret = i915_gem_object_pin(obj, (uint32_t )entry->alignment);
#line 2156
  if (ret) {
#line 2157
    return (ret);
  } else {

  }
#line 2159
  entry->offset = obj_priv->gtt_offset;
#line 2161
  relocs = (struct drm_i915_gem_relocation_entry *)((uintptr_t )entry->relocs_ptr);
#line 2166
  i = 0;
#line 2166
  while (1) {
#line 2166
    if ((uint32_t )i < entry->relocation_count) {

    } else {
#line 2166
      break;
    }
#line 2172
    tmp = copy_from_user(& reloc, relocs + i, sizeof(reloc));
#line 2172
    ret = tmp;
#line 2173
    if (ret != 0) {
#line 2174
      i915_gem_object_unpin(obj);
#line 2175
      return (ret);
    } else {

    }
#line 2178
    target_obj = drm_gem_object_lookup(obj->dev, file_priv, reloc.target_handle);
#line 2180
    if ((unsigned long )target_obj == (unsigned long )((void *)0)) {
#line 2181
      i915_gem_object_unpin(obj);
#line 2182
      return (-9);
    } else {

    }
#line 2184
    target_obj_priv = target_obj->driver_private;
#line 2189
    if ((unsigned long )target_obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 2190
      printk("<3>[drm:%s] *ERROR* No GTT space found for object %d\n", "i915_gem_object_pin_and_relocate",
             reloc.target_handle);
#line 2192
      drm_gem_object_unreference(target_obj);
#line 2193
      i915_gem_object_unpin(obj);
#line 2194
      return (-22);
    } else {

    }
#line 2197
    if (reloc.offset > (uint64_t )(obj->size - (size_t )4)) {
#line 2198
      printk("<3>[drm:%s] *ERROR* Relocation beyond object bounds: obj %p target %d offset %d size %d.\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
             (int )obj->size);
#line 2202
      drm_gem_object_unreference(target_obj);
#line 2203
      i915_gem_object_unpin(obj);
#line 2204
      return (-22);
    } else {

    }
#line 2206
    if (reloc.offset & 3ULL) {
#line 2207
      printk("<3>[drm:%s] *ERROR* Relocation not 4-byte aligned: obj %p target %d offset %d.\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset);
#line 2211
      drm_gem_object_unreference(target_obj);
#line 2212
      i915_gem_object_unpin(obj);
#line 2213
      return (-22);
    } else {

    }
#line 2216
    if (reloc.write_domain & 1U || reloc.read_domains & 1U) {
#line 2218
      printk("<3>[drm:%s] *ERROR* reloc with read/write CPU domains: obj %p target %d offset %d read %08x write %08x",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
             reloc.read_domains, reloc.write_domain);
#line 2225
      return (-22);
    } else {

    }
#line 2228
    if ((reloc.write_domain && target_obj->pending_write_domain) && reloc.write_domain != target_obj->pending_write_domain) {
#line 2230
      printk("<3>[drm:%s] *ERROR* Write domain conflict: obj %p target %d offset %d new %08x old %08x\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
             reloc.write_domain, target_obj->pending_write_domain);
#line 2237
      drm_gem_object_unreference(target_obj);
#line 2238
      i915_gem_object_unpin(obj);
#line 2239
      return (-22);
    } else {

    }
#line 2257
    target_obj->pending_read_domains = target_obj->pending_read_domains | reloc.read_domains;
#line 2258
    target_obj->pending_write_domain = target_obj->pending_write_domain | reloc.write_domain;
#line 2263
    if ((uint64_t )target_obj_priv->gtt_offset == reloc.presumed_offset) {
#line 2264
      drm_gem_object_unreference(target_obj);
#line 2265
      goto __Cont;
    } else {

    }
#line 2268
    ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 2269
    if (ret != 0) {
#line 2270
      drm_gem_object_unreference(target_obj);
#line 2271
      i915_gem_object_unpin(obj);
#line 2272
      return (-22);
    } else {

    }
#line 2278
    reloc_offset = (uint64_t )obj_priv->gtt_offset + reloc.offset;
#line 2279
    reloc_page = io_mapping_map_atomic_wc(dev_priv->mm.gtt_mapping, (unsigned long )reloc_offset & ~ ((1UL << 12) - 1UL));
#line 2282
    reloc_entry = (uint32_t *)(reloc_page + ((unsigned long )reloc_offset & ((1UL << 12) - 1UL)));
#line 2284
    reloc_val = target_obj_priv->gtt_offset + reloc.delta;
#line 2291
    writel(reloc_val, reloc_entry);
#line 2292
    io_mapping_unmap_atomic(reloc_page);
#line 2297
    reloc.presumed_offset = target_obj_priv->gtt_offset;
#line 2298
    tmp___0 = copy_to_user(relocs + i, & reloc, sizeof(reloc));
#line 2298
    ret = tmp___0;
#line 2299
    if (ret != 0) {
#line 2300
      drm_gem_object_unreference(target_obj);
#line 2301
      i915_gem_object_unpin(obj);
#line 2302
      return (ret);
    } else {

    }
#line 2305
    drm_gem_object_unreference(target_obj);
    __Cont: /* CIL Label */ 
#line 2166
    i = i + 1;
  }
#line 2312
  return (0);
}
}
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_dispatch_gem_execbuffer(struct drm_device *dev , struct drm_i915_gem_execbuffer *exec ,
                                        uint64_t exec_offset ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  uint32_t exec_start ;
  uint32_t exec_len ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 2322
  dev_priv = dev->dev_private;
#line 2323
  boxes = (struct drm_clip_rect *)((uintptr_t )exec->cliprects_ptr);
#line 2325
  nbox = exec->num_cliprects;
#line 2326
  i = 0;
#line 2330
  exec_start = (uint32_t )exec_offset + exec->batch_start_offset;
#line 2331
  exec_len = exec->batch_len;
#line 2333
  if ((exec_start | exec_len) & 7U) {
#line 2334
    printk("<3>[drm:%s] *ERROR* alignment\n", "i915_dispatch_gem_execbuffer");
#line 2335
    return (-22);
  } else {

  }
#line 2338
  if (! exec_start) {
#line 2339
    return (-22);
  } else {

  }
#line 2341
  count = nbox ? nbox : 1;
#line 2343
  i = 0;
#line 2343
  while (1) {
#line 2343
    if (i < count) {

    } else {
#line 2343
      break;
    }
#line 2344
    if (i < nbox) {
#line 2345
      tmp = i915_emit_box(dev, boxes, i, exec->DR1, exec->DR4);
#line 2345
      ret = tmp;
#line 2347
      if (ret) {
#line 2348
        return (ret);
      } else {

      }
    } else {

    }
#line 2351
    if (dev->pci_device == 13687 || dev->pci_device == 9570) {
#line 2352
      while (1) {
#line 2352
        if (dev_priv->ring.space < 4 * 4) {
#line 2352
          i915_wait_ring(dev, 4 * 4, "i915_dispatch_gem_execbuffer");
        } else {

        }
#line 2352
        outcount = 0;
#line 2352
        outring = dev_priv->ring.tail;
#line 2352
        ringmask = dev_priv->ring.tail_mask;
#line 2352
        virt = dev_priv->ring.virtual_start;
#line 2352
        break;
      }
#line 2353
      while (1) {
#line 2353
        *((unsigned int volatile   *)(virt + outring)) = (48 << 23) | 1;
#line 2353
        outcount = outcount + 1U;
#line 2353
        outring = outring + 4U;
#line 2353
        outring = outring & ringmask;
#line 2353
        break;
      }
#line 2354
      while (1) {
#line 2354
        *((unsigned int volatile   *)(virt + outring)) = exec_start | 1U;
#line 2354
        outcount = outcount + 1U;
#line 2354
        outring = outring + 4U;
#line 2354
        outring = outring & ringmask;
#line 2354
        break;
      }
#line 2355
      while (1) {
#line 2355
        *((unsigned int volatile   *)(virt + outring)) = (exec_start + exec_len) - (uint32_t )4;
#line 2355
        outcount = outcount + 1U;
#line 2355
        outring = outring + 4U;
#line 2355
        outring = outring & ringmask;
#line 2355
        break;
      }
#line 2356
      while (1) {
#line 2356
        *((unsigned int volatile   *)(virt + outring)) = 0;
#line 2356
        outcount = outcount + 1U;
#line 2356
        outring = outring + 4U;
#line 2356
        outring = outring & ringmask;
#line 2356
        break;
      }
#line 2357
      while (1) {
#line 2357
        dev_priv->ring.tail = outring;
#line 2357
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 2357
        writel(outring, dev_priv->regs + 8240);
#line 2357
        break;
      }
    } else {
#line 2359
      while (1) {
#line 2359
        if (dev_priv->ring.space < 2 * 4) {
#line 2359
          i915_wait_ring(dev, 2 * 4, "i915_dispatch_gem_execbuffer");
        } else {

        }
#line 2359
        outcount = 0;
#line 2359
        outring = dev_priv->ring.tail;
#line 2359
        ringmask = dev_priv->ring.tail_mask;
#line 2359
        virt = dev_priv->ring.virtual_start;
#line 2359
        break;
      }
#line 2360
      if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 2361
        while (1) {
#line 2361
          *((unsigned int volatile   *)(virt + outring)) = (((49 << 23) | 0) | (2 << 6)) | (1 << 8);
#line 2361
          outcount = outcount + 1U;
#line 2361
          outring = outring + 4U;
#line 2361
          outring = outring & ringmask;
#line 2361
          break;
        }
#line 2364
        while (1) {
#line 2364
          *((unsigned int volatile   *)(virt + outring)) = exec_start;
#line 2364
          outcount = outcount + 1U;
#line 2364
          outring = outring + 4U;
#line 2364
          outring = outring & ringmask;
#line 2364
          break;
        }
      } else {
#line 2366
        while (1) {
#line 2366
          *((unsigned int volatile   *)(virt + outring)) = ((49 << 23) | 0) | (2 << 6);
#line 2366
          outcount = outcount + 1U;
#line 2366
          outring = outring + 4U;
#line 2366
          outring = outring & ringmask;
#line 2366
          break;
        }
#line 2368
        while (1) {
#line 2368
          *((unsigned int volatile   *)(virt + outring)) = exec_start | 1U;
#line 2368
          outcount = outcount + 1U;
#line 2368
          outring = outring + 4U;
#line 2368
          outring = outring & ringmask;
#line 2368
          break;
        }
      }
#line 2370
      while (1) {
#line 2370
        dev_priv->ring.tail = outring;
#line 2370
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 2370
        writel(outring, dev_priv->regs + 8240);
#line 2370
        break;
      }
    }
#line 2343
    i = i + 1;
  }
#line 2375
  return (0);
}
}
#line 2384 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_ring_throttle(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  int ret ;
  uint32_t seqno ;

  {
#line 2387
  i915_file_priv = file_priv->driver_priv;
#line 2388
  ret = 0;
#line 2391
  mutex_lock(& dev->struct_mutex);
#line 2392
  seqno = i915_file_priv->mm.last_gem_throttle_seqno;
#line 2393
  i915_file_priv->mm.last_gem_throttle_seqno = i915_file_priv->mm.last_gem_seqno;
#line 2395
  if (seqno) {
#line 2396
    ret = i915_wait_request(dev, seqno);
  } else {

  }
#line 2397
  mutex_unlock(& dev->struct_mutex);
#line 2398
  return (ret);
}
}
#line 2401 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_file_private *i915_file_priv ;
  struct drm_i915_gem_execbuffer *args ;
  struct drm_i915_gem_exec_object *exec_list ;
  struct drm_gem_object **object_list ;
  struct drm_gem_object *batch_obj ;
  int ret ;
  int i ;
  int pinned ;
  uint64_t exec_offset ;
  uint32_t seqno ;
  uint32_t flush_domains ;
  int pin_tries ;
  void *tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  struct drm_gem_object *obj ;
  long tmp___2 ;
  struct drm_gem_object *obj___0 ;
  unsigned long tmp___3 ;

  {
#line 2405
  dev_priv = dev->dev_private;
#line 2406
  i915_file_priv = file_priv->driver_priv;
#line 2407
  args = data;
#line 2408
  exec_list = (void *)0;
#line 2409
  object_list = (void *)0;
#line 2411
  pinned = 0;
#line 2421
  if (args->buffer_count < (uint32_t )1) {
#line 2422
    printk("<3>[drm:%s] *ERROR* execbuf with %d buffers\n", "i915_gem_execbuffer",
           args->buffer_count);
#line 2423
    return (-22);
  } else {

  }
#line 2426
  tmp = drm_calloc(sizeof(*exec_list), args->buffer_count, 2);
#line 2426
  exec_list = tmp;
#line 2428
  tmp___0 = drm_calloc(sizeof(*object_list), args->buffer_count, 2);
#line 2428
  object_list = tmp___0;
#line 2430
  if ((unsigned long )exec_list == (unsigned long )((void *)0) || (unsigned long )object_list == (unsigned long )((void *)0)) {
#line 2431
    printk("<3>[drm:%s] *ERROR* Failed to allocate exec or object list for %d buffers\n",
           "i915_gem_execbuffer", args->buffer_count);
#line 2434
    ret = -12;
#line 2435
    goto pre_mutex_err;
  } else {

  }
#line 2437
  tmp___1 = copy_from_user(exec_list, (struct drm_i915_relocation_entry *)((uintptr_t )args->buffers_ptr),
                           sizeof(*exec_list) * (unsigned long )args->buffer_count);
#line 2437
  ret = tmp___1;
#line 2441
  if (ret != 0) {
#line 2442
    printk("<3>[drm:%s] *ERROR* copy %d exec entries failed %d\n", "i915_gem_execbuffer",
           args->buffer_count, ret);
#line 2444
    goto pre_mutex_err;
  } else {

  }
#line 2447
  mutex_lock(& dev->struct_mutex);
#line 2451
  if (dev_priv->mm.wedged) {
#line 2452
    printk("<3>[drm:%s] *ERROR* Execbuf while wedged\n", "i915_gem_execbuffer");
#line 2453
    mutex_unlock(& dev->struct_mutex);
#line 2454
    return (-5);
  } else {

  }
#line 2457
  if (dev_priv->mm.suspended) {
#line 2458
    printk("<3>[drm:%s] *ERROR* Execbuf while VT-switched.\n", "i915_gem_execbuffer");
#line 2459
    mutex_unlock(& dev->struct_mutex);
#line 2460
    return (-16);
  } else {

  }
#line 2464
  i = 0;
#line 2464
  while (1) {
#line 2464
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 2464
      break;
    }
#line 2465
    *(object_list + i) = drm_gem_object_lookup(dev, file_priv, (exec_list + i)->handle);
#line 2467
    if ((unsigned long )*(object_list + i) == (unsigned long )((void *)0)) {
#line 2468
      printk("<3>[drm:%s] *ERROR* Invalid object handle %d at index %d\n", "i915_gem_execbuffer",
             (exec_list + i)->handle, i);
#line 2470
      ret = -9;
#line 2471
      goto err;
    } else {

    }
#line 2464
    i = i + 1;
  }
#line 2476
  pin_tries = 0;
#line 2476
  while (1) {
#line 2477
    ret = 0;
#line 2478
    i = 0;
#line 2478
    while (1) {
#line 2478
      if ((uint32_t )i < args->buffer_count) {

      } else {
#line 2478
        break;
      }
#line 2479
      (*(object_list + i))->pending_read_domains = 0;
#line 2480
      (*(object_list + i))->pending_write_domain = 0;
#line 2481
      ret = i915_gem_object_pin_and_relocate(*(object_list + i), file_priv, exec_list + i);
#line 2484
      if (ret) {
#line 2485
        break;
      } else {

      }
#line 2486
      pinned = i + 1;
#line 2478
      i = i + 1;
    }
#line 2489
    if (ret == 0) {
#line 2490
      break;
    } else {

    }
#line 2493
    if (ret != -12 || pin_tries >= 1) {
#line 2494
      printk("<3>[drm:%s] *ERROR* Failed to pin buffers %d\n", "i915_gem_execbuffer",
             ret);
#line 2495
      goto err;
    } else {

    }
#line 2499
    i = 0;
#line 2499
    while (1) {
#line 2499
      if (i < pinned) {

      } else {
#line 2499
        break;
      }
#line 2500
      i915_gem_object_unpin(*(object_list + i));
#line 2499
      i = i + 1;
    }
#line 2501
    pinned = 0;
#line 2504
    ret = i915_gem_evict_everything(dev);
#line 2505
    if (ret) {
#line 2506
      goto err;
    } else {

    }
#line 2476
    pin_tries = pin_tries + 1;
  }
#line 2510
  batch_obj = *(object_list + (args->buffer_count - (uint32_t )1));
#line 2511
  batch_obj->pending_read_domains = 8;
#line 2512
  batch_obj->pending_write_domain = 0;
#line 2520
  dev->invalidate_domains = 0;
#line 2521
  dev->flush_domains = 0;
#line 2523
  i = 0;
#line 2523
  while (1) {
#line 2523
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 2523
      break;
    }
#line 2524
    obj = *(object_list + i);
#line 2527
    i915_gem_object_set_to_gpu_domain(obj, obj->pending_read_domains, obj->pending_write_domain);
#line 2523
    i = i + 1;
  }
#line 2534
  if (dev->invalidate_domains | dev->flush_domains) {
#line 2541
    i915_gem_flush(dev, dev->invalidate_domains, dev->flush_domains);
#line 2544
    if (dev->flush_domains) {
#line 2545
      i915_add_request(dev, dev->flush_domains);
    } else {

    }
  } else {

  }
#line 2557
  exec_offset = (exec_list + (args->buffer_count - (uint32_t )1))->offset;
#line 2567
  ret = i915_dispatch_gem_execbuffer(dev, args, exec_offset);
#line 2568
  if (ret) {
#line 2569
    printk("<3>[drm:%s] *ERROR* dispatch failed %d\n", "i915_gem_execbuffer", ret);
#line 2570
    goto err;
  } else {

  }
#line 2577
  flush_domains = i915_retire_commands(dev);
#line 2588
  seqno = i915_add_request(dev, flush_domains);
#line 2589
  while (1) {
#line 2589
    tmp___2 = __builtin_expect(! (! (seqno == (uint32_t )0)), 0);
#line 2589
    if (tmp___2) {
#line 2589
      while (1) {
#line 2589
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2589), "i" (sizeof(struct bug_entry )));
#line 2589
        while (1) {

        }
#line 2589
        break;
      }
    } else {

    }
#line 2589
    break;
  }
#line 2590
  i915_file_priv->mm.last_gem_seqno = seqno;
#line 2591
  i = 0;
#line 2591
  while (1) {
#line 2591
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 2591
      break;
    }
#line 2592
    obj___0 = *(object_list + i);
#line 2594
    i915_gem_object_move_to_active(obj___0, seqno);
#line 2591
    i = i + 1;
  }
#line 2606
  tmp___3 = copy_to_user((struct drm_i915_relocation_entry *)((uintptr_t )args->buffers_ptr),
                         exec_list, sizeof(*exec_list) * (unsigned long )args->buffer_count);
#line 2606
  ret = tmp___3;
#line 2610
  if (ret) {
#line 2611
    printk("<3>[drm:%s] *ERROR* failed to copy %d exec entries back to user (%d)\n",
           "i915_gem_execbuffer", args->buffer_count, ret);
  } else {

  }
  err: 
#line 2615
  if ((unsigned long )object_list != (unsigned long )((void *)0)) {
#line 2616
    i = 0;
#line 2616
    while (1) {
#line 2616
      if (i < pinned) {

      } else {
#line 2616
        break;
      }
#line 2617
      i915_gem_object_unpin(*(object_list + i));
#line 2616
      i = i + 1;
    }
#line 2619
    i = 0;
#line 2619
    while (1) {
#line 2619
      if ((uint32_t )i < args->buffer_count) {

      } else {
#line 2619
        break;
      }
#line 2620
      drm_gem_object_unreference(*(object_list + i));
#line 2619
      i = i + 1;
    }
  } else {

  }
#line 2622
  mutex_unlock(& dev->struct_mutex);
  pre_mutex_err: 
#line 2625
  drm_free(object_list, sizeof(*object_list) * (unsigned long )args->buffer_count,
           2);
#line 2627
  drm_free(exec_list, sizeof(*exec_list) * (unsigned long )args->buffer_count, 2);
#line 2630
  return (ret);
}
}
#line 2633 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  int tmp ;

  {
#line 2636
  dev = obj->dev;
#line 2637
  obj_priv = obj->driver_private;
#line 2641
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 2642
    ret = i915_gem_object_bind_to_gtt(obj, alignment);
#line 2643
    if (ret != 0) {
#line 2644
      printk("<3>[drm:%s] *ERROR* Failure to bind: %d", "i915_gem_object_pin", ret);
#line 2645
      return (ret);
    } else {

    }
  } else {

  }
#line 2648
  obj_priv->pin_count = obj_priv->pin_count + 1;
#line 2653
  if (obj_priv->pin_count == 1) {
#line 2654
    atomic_inc(& dev->pin_count);
#line 2655
    atomic_add(obj->size, & dev->pin_memory);
#line 2656
    if (! obj_priv->active && (obj->write_domain & (unsigned int )(~ (1 | 64))) == 0U) {
#line 2656
      tmp = list_empty(& obj_priv->list);
#line 2656
      if (tmp) {

      } else {
#line 2660
        list_del_init(& obj_priv->list);
      }
    } else {

    }
  } else {

  }
#line 2664
  return (0);
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_object_unpin(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 2670
  dev = obj->dev;
#line 2671
  dev_priv = dev->dev_private;
#line 2672
  obj_priv = obj->driver_private;
#line 2675
  obj_priv->pin_count = obj_priv->pin_count - 1;
#line 2676
  while (1) {
#line 2676
    tmp = __builtin_expect(! (! (obj_priv->pin_count < 0)), 0);
#line 2676
    if (tmp) {
#line 2676
      while (1) {
#line 2676
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2676), "i" (sizeof(struct bug_entry )));
#line 2676
        while (1) {

        }
#line 2676
        break;
      }
    } else {

    }
#line 2676
    break;
  }
#line 2677
  while (1) {
#line 2677
    tmp___0 = __builtin_expect(! (! ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0))),
                               0);
#line 2677
    if (tmp___0) {
#line 2677
      while (1) {
#line 2677
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2677), "i" (sizeof(struct bug_entry )));
#line 2677
        while (1) {

        }
#line 2677
        break;
      }
    } else {

    }
#line 2677
    break;
  }
#line 2683
  if (obj_priv->pin_count == 0) {
#line 2684
    if (! obj_priv->active && (obj->write_domain & (unsigned int )(~ (1 | 64))) == 0U) {
#line 2687
      list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
    } else {

    }
#line 2689
    atomic_dec(& dev->pin_count);
#line 2690
    atomic_sub(obj->size, & dev->pin_memory);
  } else {

  }
#line 2693
  return;
}
}
#line 2695 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2699
  args = data;
#line 2704
  mutex_lock(& dev->struct_mutex);
#line 2706
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2707
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2708
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2710
    mutex_unlock(& dev->struct_mutex);
#line 2711
    return (-9);
  } else {

  }
#line 2713
  obj_priv = obj->driver_private;
#line 2715
  if ((unsigned long )obj_priv->pin_filp != (unsigned long )((void *)0) && (unsigned long )obj_priv->pin_filp != (unsigned long )file_priv) {
#line 2716
    printk("<3>[drm:%s] *ERROR* Already pinned in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2718
    mutex_unlock(& dev->struct_mutex);
#line 2719
    return (-22);
  } else {

  }
#line 2722
  obj_priv->user_pin_count = obj_priv->user_pin_count + (uint32_t )1;
#line 2723
  obj_priv->pin_filp = file_priv;
#line 2724
  if (obj_priv->user_pin_count == (uint32_t )1) {
#line 2725
    ret = i915_gem_object_pin(obj, args->alignment);
#line 2726
    if (ret != 0) {
#line 2727
      drm_gem_object_unreference(obj);
#line 2728
      mutex_unlock(& dev->struct_mutex);
#line 2729
      return (ret);
    } else {

    }
  } else {

  }
#line 2736
  i915_gem_object_flush_cpu_write_domain(obj);
#line 2737
  args->offset = obj_priv->gtt_offset;
#line 2738
  drm_gem_object_unreference(obj);
#line 2739
  mutex_unlock(& dev->struct_mutex);
#line 2741
  return (0);
}
}
#line 2744 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2748
  args = data;
#line 2752
  mutex_lock(& dev->struct_mutex);
#line 2754
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2755
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2756
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_unpin_ioctl(): %d\n", "i915_gem_unpin_ioctl",
           args->handle);
#line 2758
    mutex_unlock(& dev->struct_mutex);
#line 2759
    return (-9);
  } else {

  }
#line 2762
  obj_priv = obj->driver_private;
#line 2763
  if ((unsigned long )obj_priv->pin_filp != (unsigned long )file_priv) {
#line 2764
    printk("<3>[drm:%s] *ERROR* Not pinned by caller in i915_gem_pin_ioctl(): %d\n",
           "i915_gem_unpin_ioctl", args->handle);
#line 2766
    drm_gem_object_unreference(obj);
#line 2767
    mutex_unlock(& dev->struct_mutex);
#line 2768
    return (-22);
  } else {

  }
#line 2770
  obj_priv->user_pin_count = obj_priv->user_pin_count - (uint32_t )1;
#line 2771
  if (obj_priv->user_pin_count == (uint32_t )0) {
#line 2772
    obj_priv->pin_filp = (void *)0;
#line 2773
    i915_gem_object_unpin(obj);
  } else {

  }
#line 2776
  drm_gem_object_unreference(obj);
#line 2777
  mutex_unlock(& dev->struct_mutex);
#line 2778
  return (0);
}
}
#line 2781 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_busy *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2785
  args = data;
#line 2789
  mutex_lock(& dev->struct_mutex);
#line 2790
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2791
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2792
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_busy_ioctl(): %d\n", "i915_gem_busy_ioctl",
           args->handle);
#line 2794
    mutex_unlock(& dev->struct_mutex);
#line 2795
    return (-9);
  } else {

  }
#line 2798
  obj_priv = obj->driver_private;
#line 2806
  args->busy = obj_priv->active && obj_priv->last_rendering_seqno != (uint32_t )0;
#line 2808
  drm_gem_object_unreference(obj);
#line 2809
  mutex_unlock(& dev->struct_mutex);
#line 2810
  return (0);
}
}
#line 2813 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 2817
  tmp = i915_gem_ring_throttle(dev, file_priv);
#line 2817
  return (tmp);
}
}
#line 2820 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_init_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  void *tmp ;

  {
#line 2824
  tmp = drm_calloc(1, sizeof(*obj_priv), 2);
#line 2824
  obj_priv = tmp;
#line 2825
  if ((unsigned long )obj_priv == (unsigned long )((void *)0)) {
#line 2826
    return (-12);
  } else {

  }
#line 2834
  obj->write_domain = 1;
#line 2835
  obj->read_domains = 1;
#line 2837
  obj_priv->agp_type = 1 << 16;
#line 2839
  obj->driver_private = obj_priv;
#line 2840
  obj_priv->obj = obj;
#line 2841
  obj_priv->fence_reg = -1;
#line 2842
  INIT_LIST_HEAD(& obj_priv->list);
#line 2844
  return (0);
}
}
#line 2847 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_free_object(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_gem_mm *mm ;
  struct drm_map_list *list ;
  struct drm_map *map ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2849
  dev = obj->dev;
#line 2850
  mm = dev->mm_private;
#line 2853
  obj_priv = obj->driver_private;
#line 2855
  while (1) {
#line 2855
    if (obj_priv->pin_count > 0) {

    } else {
#line 2855
      break;
    }
#line 2856
    i915_gem_object_unpin(obj);
  }
#line 2858
  i915_gem_object_unbind(obj);
#line 2860
  list = & obj->map_list;
#line 2861
  drm_ht_remove_item(& mm->offset_hash, & list->hash);
#line 2863
  if (list->file_offset_node) {
#line 2864
    drm_mm_put_block(list->file_offset_node);
#line 2865
    list->file_offset_node = (void *)0;
  } else {

  }
#line 2868
  map = list->map;
#line 2869
  if (map) {
#line 2870
    drm_free(map, sizeof(*map), 2);
#line 2871
    list->map = (void *)0;
  } else {

  }
#line 2874
  drm_free(obj_priv->page_cpu_valid, 1, 2);
#line 2875
  drm_free(obj->driver_private, 1, 2);
#line 2876
  return;
}
}
#line 2879 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_evict_from_list(struct drm_device *dev , struct list_head *head ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 2886
  while (1) {
#line 2886
    tmp = list_empty(head);
#line 2886
    if (tmp) {
#line 2886
      break;
    } else {

    }
#line 2887
    __mptr = head->next;
#line 2887
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 2890
    obj = obj_priv->obj;
#line 2892
    if (obj_priv->pin_count != 0) {
#line 2893
      printk("<3>[drm:%s] *ERROR* Pinned object in unbind list\n", "i915_gem_evict_from_list");
#line 2894
      mutex_unlock(& dev->struct_mutex);
#line 2895
      return (-22);
    } else {

    }
#line 2898
    ret = i915_gem_object_unbind(obj);
#line 2899
    if (ret != 0) {
#line 2900
      printk("<3>[drm:%s] *ERROR* Error unbinding object in LeaveVT: %d\n", "i915_gem_evict_from_list",
             ret);
#line 2902
      mutex_unlock(& dev->struct_mutex);
#line 2903
      return (ret);
    } else {

    }
  }
#line 2908
  return (0);
}
}
#line 2911 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_idle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  uint32_t cur_seqno ;
  uint32_t last_seqno ;
  int stuck ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int __ret_warn_on ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int __ret_warn_on___1 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp___10 ;
  struct drm_i915_gem_object *obj_priv___0 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___11 ;
  int __ret_warn_on___2 ;
  int tmp___12 ;
  int tmp___13 ;
  long tmp___14 ;

  {
#line 2914
  dev_priv = dev->dev_private;
#line 2918
  mutex_lock(& dev->struct_mutex);
#line 2920
  if (dev_priv->mm.suspended || (unsigned long )dev_priv->ring.ring_obj == (unsigned long )((void *)0)) {
#line 2921
    mutex_unlock(& dev->struct_mutex);
#line 2922
    return (0);
  } else {

  }
#line 2928
  dev_priv->mm.suspended = 1;
#line 2932
  mutex_unlock(& dev->struct_mutex);
#line 2933
  cancel_delayed_work_sync(& dev_priv->mm.retire_work);
#line 2934
  mutex_lock(& dev->struct_mutex);
#line 2936
  i915_kernel_lost_context(dev);
#line 2940
  i915_gem_flush(dev, ~ (1 | 64), ~ (1 | 64));
#line 2942
  seqno = i915_add_request(dev, ~ 1);
#line 2944
  if (seqno == (uint32_t )0) {
#line 2945
    mutex_unlock(& dev->struct_mutex);
#line 2946
    return (-12);
  } else {

  }
#line 2949
  dev_priv->mm.waiting_gem_seqno = seqno;
#line 2950
  last_seqno = 0;
#line 2951
  stuck = 0;
#line 2952
  while (1) {
#line 2953
    cur_seqno = i915_get_gem_seqno(dev);
#line 2954
    tmp = i915_seqno_passed(cur_seqno, seqno);
#line 2954
    if (tmp) {
#line 2955
      break;
    } else {

    }
#line 2956
    if (last_seqno == cur_seqno) {
#line 2957
      tmp___0 = stuck;
#line 2957
      stuck = stuck + 1;
#line 2957
      if (tmp___0 > 100) {
#line 2958
        printk("<3>[drm:%s] *ERROR* hardware wedged\n", "i915_gem_idle");
#line 2959
        dev_priv->mm.wedged = 1;
#line 2960
        __wake_up(& dev_priv->irq_queue, 1, 1, (void *)0);
#line 2961
        break;
      } else {

      }
    } else {

    }
#line 2964
    msleep(10);
#line 2965
    last_seqno = cur_seqno;
  }
#line 2967
  dev_priv->mm.waiting_gem_seqno = 0;
#line 2969
  i915_gem_retire_requests(dev);
#line 2971
  if (! dev_priv->mm.wedged) {
#line 2975
    tmp___1 = list_empty(& dev_priv->mm.active_list);
#line 2975
    if (tmp___1) {
#line 2975
      tmp___2 = 0;
    } else {
#line 2975
      tmp___2 = 1;
    }
#line 2975
    __ret_warn_on = tmp___2;
#line 2975
    tmp___3 = __builtin_expect(! (! __ret_warn_on), 0);
#line 2975
    if (tmp___3) {
#line 2975
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                       2975);
    } else {

    }
#line 2975
    __builtin_expect(! (! __ret_warn_on), 0);
#line 2976
    tmp___4 = list_empty(& dev_priv->mm.flushing_list);
#line 2976
    if (tmp___4) {
#line 2976
      tmp___5 = 0;
    } else {
#line 2976
      tmp___5 = 1;
    }
#line 2976
    __ret_warn_on___0 = tmp___5;
#line 2976
    tmp___6 = __builtin_expect(! (! __ret_warn_on___0), 0);
#line 2976
    if (tmp___6) {
#line 2976
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                       2976);
    } else {

    }
#line 2976
    __builtin_expect(! (! __ret_warn_on___0), 0);
#line 2980
    tmp___7 = list_empty(& dev_priv->mm.request_list);
#line 2980
    if (tmp___7) {
#line 2980
      tmp___8 = 0;
    } else {
#line 2980
      tmp___8 = 1;
    }
#line 2980
    __ret_warn_on___1 = tmp___8;
#line 2980
    tmp___9 = __builtin_expect(! (! __ret_warn_on___1), 0);
#line 2980
    if (tmp___9) {
#line 2980
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                       2980);
    } else {

    }
#line 2980
    __builtin_expect(! (! __ret_warn_on___1), 0);
  } else {

  }
#line 2988
  while (1) {
#line 2988
    tmp___10 = list_empty(& dev_priv->mm.active_list);
#line 2988
    if (tmp___10) {
#line 2988
      break;
    } else {

    }
#line 2991
    __mptr = dev_priv->mm.active_list.next;
#line 2991
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 2994
    (obj_priv->obj)->write_domain = (obj_priv->obj)->write_domain & (unsigned int )(~ (~ (1 | 64)));
#line 2995
    i915_gem_object_move_to_inactive(obj_priv->obj);
  }
#line 2998
  while (1) {
#line 2998
    tmp___11 = list_empty(& dev_priv->mm.flushing_list);
#line 2998
    if (tmp___11) {
#line 2998
      break;
    } else {

    }
#line 3001
    __mptr___0 = dev_priv->mm.flushing_list.next;
#line 3001
    obj_priv___0 = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 3004
    (obj_priv___0->obj)->write_domain = (obj_priv___0->obj)->write_domain & (unsigned int )(~ (~ (1 | 64)));
#line 3005
    i915_gem_object_move_to_inactive(obj_priv___0->obj);
  }
#line 3010
  ret = i915_gem_evict_from_list(dev, & dev_priv->mm.inactive_list);
#line 3011
  tmp___12 = list_empty(& dev_priv->mm.inactive_list);
#line 3011
  if (tmp___12) {
#line 3011
    tmp___13 = 0;
  } else {
#line 3011
    tmp___13 = 1;
  }
#line 3011
  __ret_warn_on___2 = tmp___13;
#line 3011
  tmp___14 = __builtin_expect(! (! __ret_warn_on___2), 0);
#line 3011
  if (tmp___14) {
#line 3011
    warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c",
                     3011);
  } else {

  }
#line 3011
  __builtin_expect(! (! __ret_warn_on___2), 0);
#line 3012
  if (ret) {
#line 3013
    mutex_unlock(& dev->struct_mutex);
#line 3014
    return (ret);
  } else {

  }
#line 3017
  i915_gem_cleanup_ringbuffer(dev);
#line 3018
  mutex_unlock(& dev->struct_mutex);
#line 3020
  return (0);
}
}
#line 3023 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_init_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 3026
  dev_priv = dev->dev_private;
#line 3034
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818))) {
#line 3035
    return (0);
  } else {

  }
#line 3037
  obj = drm_gem_object_alloc(dev, 4096);
#line 3038
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 3039
    printk("<3>[drm:%s] *ERROR* Failed to allocate status page\n", "i915_gem_init_hws");
#line 3040
    return (-12);
  } else {

  }
#line 3042
  obj_priv = obj->driver_private;
#line 3043
  obj_priv->agp_type = (1 << 16) + 1;
#line 3045
  ret = i915_gem_object_pin(obj, 4096);
#line 3046
  if (ret != 0) {
#line 3047
    drm_gem_object_unreference(obj);
#line 3048
    return (ret);
  } else {

  }
#line 3051
  dev_priv->status_gfx_addr = obj_priv->gtt_offset;
#line 3053
  dev_priv->hw_status_page = kmap(*(obj_priv->page_list + 0));
#line 3054
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 3055
    printk("<3>[drm:%s] *ERROR* Failed to map status page.\n", "i915_gem_init_hws");
#line 3056
    memset(& dev_priv->hws_map, 0, sizeof(dev_priv->hws_map));
#line 3057
    drm_gem_object_unreference(obj);
#line 3058
    return (-22);
  } else {

  }
#line 3060
  dev_priv->hws_obj = obj;
#line 3061
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 3062
  writel(dev_priv->status_gfx_addr, dev_priv->regs + 8320);
#line 3063
  readl(dev_priv->regs + 8320);
#line 3064
  while (1) {
#line 3064
    if (drm_debug) {
#line 3064
      printk("<7>[drm:%s] hws offset: 0x%08x\n", "i915_gem_init_hws", dev_priv->status_gfx_addr);
    } else {

    }
#line 3064
    break;
  }
#line 3066
  return (0);
}
}
#line 3069 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_init_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  drm_i915_ring_buffer_t *ring ;
  int ret ;
  u32 head ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  unsigned int tmp___10 ;
  unsigned int tmp___11 ;
  unsigned int tmp___12 ;
  unsigned int tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;

  {
#line 3072
  dev_priv = dev->dev_private;
#line 3075
  ring = & dev_priv->ring;
#line 3079
  ret = i915_gem_init_hws(dev);
#line 3080
  if (ret != 0) {
#line 3081
    return (ret);
  } else {

  }
#line 3083
  obj = drm_gem_object_alloc(dev, 128 * 1024);
#line 3084
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 3085
    printk("<3>[drm:%s] *ERROR* Failed to allocate ringbuffer\n", "i915_gem_init_ringbuffer");
#line 3086
    return (-12);
  } else {

  }
#line 3088
  obj_priv = obj->driver_private;
#line 3090
  ret = i915_gem_object_pin(obj, 4096);
#line 3091
  if (ret != 0) {
#line 3092
    drm_gem_object_unreference(obj);
#line 3093
    return (ret);
  } else {

  }
#line 3097
  ring->Size = obj->size;
#line 3098
  ring->tail_mask = obj->size - (size_t )1;
#line 3100
  ring->map.offset = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
#line 3101
  ring->map.size = obj->size;
#line 3102
  ring->map.type = 0;
#line 3103
  ring->map.flags = 0;
#line 3104
  ring->map.mtrr = 0;
#line 3106
  drm_core_ioremap_wc(& ring->map, dev);
#line 3107
  if ((unsigned long )ring->map.handle == (unsigned long )((void *)0)) {
#line 3108
    printk("<3>[drm:%s] *ERROR* Failed to map ringbuffer.\n", "i915_gem_init_ringbuffer");
#line 3109
    memset(& dev_priv->ring, 0, sizeof(dev_priv->ring));
#line 3110
    drm_gem_object_unreference(obj);
#line 3111
    return (-22);
  } else {

  }
#line 3113
  ring->ring_obj = obj;
#line 3114
  ring->virtual_start = ring->map.handle;
#line 3117
  writel(0, dev_priv->regs + 8252);
#line 3118
  writel(0, dev_priv->regs + 8240);
#line 3119
  writel(0, dev_priv->regs + 8244);
#line 3122
  writel(obj_priv->gtt_offset, dev_priv->regs + 8248);
#line 3123
  tmp = readl(dev_priv->regs + 8244);
#line 3123
  head = tmp & 2097148U;
#line 3126
  if (head != (u32 )0) {
#line 3127
    tmp___0 = readl(dev_priv->regs + 8248);
#line 3127
    tmp___1 = readl(dev_priv->regs + 8240);
#line 3127
    tmp___2 = readl(dev_priv->regs + 8244);
#line 3127
    tmp___3 = readl(dev_priv->regs + 8252);
#line 3127
    printk("<3>[drm:%s] *ERROR* Ring head not reset to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___3, tmp___2, tmp___1, tmp___0);
#line 3133
    writel(0, dev_priv->regs + 8244);
#line 3135
    tmp___4 = readl(dev_priv->regs + 8248);
#line 3135
    tmp___5 = readl(dev_priv->regs + 8240);
#line 3135
    tmp___6 = readl(dev_priv->regs + 8244);
#line 3135
    tmp___7 = readl(dev_priv->regs + 8252);
#line 3135
    printk("<3>[drm:%s] *ERROR* Ring head forced to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___7, tmp___6, tmp___5, tmp___4);
  } else {

  }
#line 3143
  writel((((obj->size - (size_t )4096) & 2093056UL) | 0UL) | 1UL, dev_priv->regs + 8252);
#line 3148
  tmp___8 = readl(dev_priv->regs + 8244);
#line 3148
  head = tmp___8 & 2097148U;
#line 3151
  if (head != (u32 )0) {
#line 3152
    tmp___9 = readl(dev_priv->regs + 8248);
#line 3152
    tmp___10 = readl(dev_priv->regs + 8240);
#line 3152
    tmp___11 = readl(dev_priv->regs + 8244);
#line 3152
    tmp___12 = readl(dev_priv->regs + 8252);
#line 3152
    printk("<3>[drm:%s] *ERROR* Ring initialization failed ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___12, tmp___11, tmp___10, tmp___9);
#line 3158
    return (-5);
  } else {

  }
#line 3162
  tmp___15 = drm_core_check_feature(dev, 8192);
#line 3162
  if (tmp___15) {
#line 3165
    tmp___13 = readl(dev_priv->regs + 8244);
#line 3165
    ring->head = tmp___13 & 2097148U;
#line 3166
    tmp___14 = readl(dev_priv->regs + 8240);
#line 3166
    ring->tail = tmp___14 & 2097144U;
#line 3167
    ring->space = ring->head - (ring->tail + 8);
#line 3168
    if (ring->space < 0) {
#line 3169
      ring->space = (unsigned long )ring->space + ring->Size;
    } else {

    }
  } else {
#line 3163
    i915_kernel_lost_context(dev);
  }
#line 3172
  return (0);
}
}
#line 3175 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 3178
  dev_priv = dev->dev_private;
#line 3180
  if ((unsigned long )dev_priv->ring.ring_obj == (unsigned long )((void *)0)) {
#line 3181
    return;
  } else {

  }
#line 3183
  drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 3185
  i915_gem_object_unpin(dev_priv->ring.ring_obj);
#line 3186
  drm_gem_object_unreference(dev_priv->ring.ring_obj);
#line 3187
  dev_priv->ring.ring_obj = (void *)0;
#line 3188
  memset(& dev_priv->ring, 0, sizeof(dev_priv->ring));
#line 3190
  if ((unsigned long )dev_priv->hws_obj != (unsigned long )((void *)0)) {
#line 3191
    obj = dev_priv->hws_obj;
#line 3192
    obj_priv = obj->driver_private;
#line 3194
    while (1) {
#line 3194
      break;
    }
#line 3195
    i915_gem_object_unpin(obj);
#line 3196
    drm_gem_object_unreference(obj);
#line 3197
    dev_priv->hws_obj = (void *)0;
#line 3198
    memset(& dev_priv->hws_map, 0, sizeof(dev_priv->hws_map));
#line 3199
    dev_priv->hw_status_page = (void *)0;
#line 3202
    writel(536866816, dev_priv->regs + 8320);
  } else {

  }
#line 3204
  return;
}
}
#line 3206 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;

  {
#line 3210
  dev_priv = dev->dev_private;
#line 3213
  tmp = drm_core_check_feature(dev, 8192);
#line 3213
  if (tmp) {
#line 3214
    return (0);
  } else {

  }
#line 3216
  if (dev_priv->mm.wedged) {
#line 3217
    printk("<3>[drm:%s] *ERROR* Reenabling wedged hardware, good luck\n", "i915_gem_entervt_ioctl");
#line 3218
    dev_priv->mm.wedged = 0;
  } else {

  }
#line 3221
  ret = i915_gem_init_ringbuffer(dev);
#line 3222
  if (ret != 0) {
#line 3223
    return (ret);
  } else {

  }
#line 3225
  dev_priv->mm.gtt_mapping = io_mapping_create_wc((dev->agp)->base, ((dev->agp)->agp_info.aper_size * (size_t )1024) * (size_t )1024);
#line 3229
  mutex_lock(& dev->struct_mutex);
#line 3230
  while (1) {
#line 3230
    tmp___0 = list_empty(& dev_priv->mm.active_list);
#line 3230
    if (tmp___0) {
#line 3230
      tmp___1 = 0;
    } else {
#line 3230
      tmp___1 = 1;
    }
#line 3230
    tmp___2 = __builtin_expect(tmp___1, 0);
#line 3230
    if (tmp___2) {
#line 3230
      while (1) {
#line 3230
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (3230), "i" (sizeof(struct bug_entry )));
#line 3230
        while (1) {

        }
#line 3230
        break;
      }
    } else {

    }
#line 3230
    break;
  }
#line 3231
  while (1) {
#line 3231
    tmp___3 = list_empty(& dev_priv->mm.flushing_list);
#line 3231
    if (tmp___3) {
#line 3231
      tmp___4 = 0;
    } else {
#line 3231
      tmp___4 = 1;
    }
#line 3231
    tmp___5 = __builtin_expect(tmp___4, 0);
#line 3231
    if (tmp___5) {
#line 3231
      while (1) {
#line 3231
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (3231), "i" (sizeof(struct bug_entry )));
#line 3231
        while (1) {

        }
#line 3231
        break;
      }
    } else {

    }
#line 3231
    break;
  }
#line 3232
  while (1) {
#line 3232
    tmp___6 = list_empty(& dev_priv->mm.inactive_list);
#line 3232
    if (tmp___6) {
#line 3232
      tmp___7 = 0;
    } else {
#line 3232
      tmp___7 = 1;
    }
#line 3232
    tmp___8 = __builtin_expect(tmp___7, 0);
#line 3232
    if (tmp___8) {
#line 3232
      while (1) {
#line 3232
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (3232), "i" (sizeof(struct bug_entry )));
#line 3232
        while (1) {

        }
#line 3232
        break;
      }
    } else {

    }
#line 3232
    break;
  }
#line 3233
  while (1) {
#line 3233
    tmp___9 = list_empty(& dev_priv->mm.request_list);
#line 3233
    if (tmp___9) {
#line 3233
      tmp___10 = 0;
    } else {
#line 3233
      tmp___10 = 1;
    }
#line 3233
    tmp___11 = __builtin_expect(tmp___10, 0);
#line 3233
    if (tmp___11) {
#line 3233
      while (1) {
#line 3233
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (3233), "i" (sizeof(struct bug_entry )));
#line 3233
        while (1) {

        }
#line 3233
        break;
      }
    } else {

    }
#line 3233
    break;
  }
#line 3234
  dev_priv->mm.suspended = 0;
#line 3235
  mutex_unlock(& dev->struct_mutex);
#line 3237
  drm_irq_install(dev);
#line 3239
  return (0);
}
}
#line 3242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;

  {
#line 3246
  dev_priv = dev->dev_private;
#line 3249
  tmp = drm_core_check_feature(dev, 8192);
#line 3249
  if (tmp) {
#line 3250
    return (0);
  } else {

  }
#line 3252
  ret = i915_gem_idle(dev);
#line 3253
  drm_irq_uninstall(dev);
#line 3255
  io_mapping_free(dev_priv->mm.gtt_mapping);
#line 3256
  return (ret);
}
}
#line 3259 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_lastclose(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 3264
  ret = i915_gem_idle(dev);
#line 3265
  if (ret) {
#line 3266
    printk("<3>[drm:%s] *ERROR* failed to idle hardware: %d\n", "i915_gem_lastclose",
           ret);
  } else {

  }
#line 3267
  return;
}
}
#line 3269 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_load(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  atomic_long_t __constr_expr_0 ;

  {
#line 3272
  dev_priv = dev->dev_private;
#line 3274
  INIT_LIST_HEAD(& dev_priv->mm.active_list);
#line 3275
  INIT_LIST_HEAD(& dev_priv->mm.flushing_list);
#line 3276
  INIT_LIST_HEAD(& dev_priv->mm.inactive_list);
#line 3277
  INIT_LIST_HEAD(& dev_priv->mm.request_list);
#line 3278
  while (1) {
#line 3278
    while (1) {
#line 3278
      __constr_expr_0.counter = 0;
#line 3278
      dev_priv->mm.retire_work.work.data = __constr_expr_0;
#line 3278
      INIT_LIST_HEAD(& dev_priv->mm.retire_work.work.entry);
#line 3278
      while (1) {
#line 3278
        dev_priv->mm.retire_work.work.func = & i915_gem_retire_work_handler;
#line 3278
        break;
      }
#line 3278
      break;
    }
#line 3278
    init_timer(& dev_priv->mm.retire_work.timer);
#line 3278
    break;
  }
#line 3280
  dev_priv->mm.next_gem_seqno = 1;
#line 3283
  dev_priv->fence_reg_start = 3;
#line 3285
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 3286
    dev_priv->num_fence_regs = 16;
  } else {
#line 3288
    dev_priv->num_fence_regs = 8;
  }
#line 3290
  i915_gem_detect_bit_6_swizzle(dev);
#line 3291
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 163 "include/linux/kernel.h"
extern int ( /* format attribute */  sprintf)(char *buf , char const   *fmt  , ...) ;
#line 115 "include/linux/proc_fs.h"
extern struct proc_dir_entry *create_proc_entry(char const   *name , mode_t mode ,
                                                struct proc_dir_entry *parent ) ;
#line 121
extern void remove_proc_entry(char const   *name , struct proc_dir_entry *parent ) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_active_info(char *buf , char **start , off_t offset , int request ,
                                int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 37
  minor = (struct drm_minor *)data;
#line 38
  dev = minor->dev;
#line 39
  dev_priv = dev->dev_private;
#line 41
  len = 0;
#line 43
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 44
    *eof = 1;
#line 45
    return (0);
  } else {

  }
#line 48
  *start = buf + offset;
#line 49
  *eof = 0;
#line 50
  tmp = sprintf(buf + len, "Active:\n");
#line 50
  len = len + tmp;
#line 50
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 50
    *eof = 1;
#line 50
    return ((off_t )len - offset);
  } else {

  }
#line 51
  __mptr = dev_priv->mm.active_list.next;
#line 51
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 51
  while (1) {
#line 51
    __builtin_prefetch(obj_priv->list.next);
#line 51
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.active_list)) {

    } else {
#line 51
      break;
    }
#line 54
    obj = obj_priv->obj;
#line 55
    if (obj->name) {
#line 56
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 56
      len = len + tmp___0;
#line 56
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 56
        *eof = 1;
#line 56
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 61
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 61
      len = len + tmp___1;
#line 61
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 61
        *eof = 1;
#line 61
        return ((off_t )len - offset);
      } else {

      }
    }
#line 51
    __mptr___0 = obj_priv->list.next;
#line 51
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 67
  if ((off_t )len > (off_t )request + offset) {
#line 68
    return (request);
  } else {

  }
#line 69
  *eof = 1;
#line 70
  return ((off_t )len - offset);
}
}
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_flushing_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 76
  minor = (struct drm_minor *)data;
#line 77
  dev = minor->dev;
#line 78
  dev_priv = dev->dev_private;
#line 80
  len = 0;
#line 82
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 83
    *eof = 1;
#line 84
    return (0);
  } else {

  }
#line 87
  *start = buf + offset;
#line 88
  *eof = 0;
#line 89
  tmp = sprintf(buf + len, "Flushing:\n");
#line 89
  len = len + tmp;
#line 89
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 89
    *eof = 1;
#line 89
    return ((off_t )len - offset);
  } else {

  }
#line 90
  __mptr = dev_priv->mm.flushing_list.next;
#line 90
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 90
  while (1) {
#line 90
    __builtin_prefetch(obj_priv->list.next);
#line 90
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {

    } else {
#line 90
      break;
    }
#line 93
    obj = obj_priv->obj;
#line 94
    if (obj->name) {
#line 95
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 95
      len = len + tmp___0;
#line 95
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 95
        *eof = 1;
#line 95
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 100
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 100
      len = len + tmp___1;
#line 100
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 100
        *eof = 1;
#line 100
        return ((off_t )len - offset);
      } else {

      }
    }
#line 90
    __mptr___0 = obj_priv->list.next;
#line 90
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 105
  if ((off_t )len > (off_t )request + offset) {
#line 106
    return (request);
  } else {

  }
#line 107
  *eof = 1;
#line 108
  return ((off_t )len - offset);
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_inactive_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 114
  minor = (struct drm_minor *)data;
#line 115
  dev = minor->dev;
#line 116
  dev_priv = dev->dev_private;
#line 118
  len = 0;
#line 120
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 121
    *eof = 1;
#line 122
    return (0);
  } else {

  }
#line 125
  *start = buf + offset;
#line 126
  *eof = 0;
#line 127
  tmp = sprintf(buf + len, "Inactive:\n");
#line 127
  len = len + tmp;
#line 127
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 127
    *eof = 1;
#line 127
    return ((off_t )len - offset);
  } else {

  }
#line 128
  __mptr = dev_priv->mm.inactive_list.next;
#line 128
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 128
  while (1) {
#line 128
    __builtin_prefetch(obj_priv->list.next);
#line 128
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.inactive_list)) {

    } else {
#line 128
      break;
    }
#line 131
    obj = obj_priv->obj;
#line 132
    if (obj->name) {
#line 133
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 133
      len = len + tmp___0;
#line 133
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 133
        *eof = 1;
#line 133
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 138
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 138
      len = len + tmp___1;
#line 138
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 138
        *eof = 1;
#line 138
        return ((off_t )len - offset);
      } else {

      }
    }
#line 128
    __mptr___0 = obj_priv->list.next;
#line 128
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 143
  if ((off_t )len > (off_t )request + offset) {
#line 144
    return (request);
  } else {

  }
#line 145
  *eof = 1;
#line 146
  return ((off_t )len - offset);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_request_info(char *buf , char **start , off_t offset , int request ,
                                 int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *gem_request ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;

  {
#line 152
  minor = (struct drm_minor *)data;
#line 153
  dev = minor->dev;
#line 154
  dev_priv = dev->dev_private;
#line 156
  len = 0;
#line 158
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 159
    *eof = 1;
#line 160
    return (0);
  } else {

  }
#line 163
  *start = buf + offset;
#line 164
  *eof = 0;
#line 165
  tmp = sprintf(buf + len, "Request:\n");
#line 165
  len = len + tmp;
#line 165
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 165
    *eof = 1;
#line 165
    return ((off_t )len - offset);
  } else {

  }
#line 166
  __mptr = dev_priv->mm.request_list.next;
#line 166
  gem_request = (struct drm_i915_gem_request *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 166
  while (1) {
#line 166
    __builtin_prefetch(gem_request->list.next);
#line 166
    if ((unsigned long )(& gem_request->list) != (unsigned long )(& dev_priv->mm.request_list)) {

    } else {
#line 166
      break;
    }
#line 169
    tmp___0 = sprintf(buf + len, "    %d @ %d\n", gem_request->seqno, (int )(jiffies - (unsigned long volatile   )gem_request->emitted_jiffies));
#line 169
    len = len + tmp___0;
#line 169
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 169
      *eof = 1;
#line 169
      return ((off_t )len - offset);
    } else {

    }
#line 166
    __mptr___0 = gem_request->list.next;
#line 166
    gem_request = (struct drm_i915_gem_request *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
  }
#line 173
  if ((off_t )len > (off_t )request + offset) {
#line 174
    return (request);
  } else {

  }
#line 175
  *eof = 1;
#line 176
  return ((off_t )len - offset);
}
}
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_seqno_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  uint32_t tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 182
  minor = (struct drm_minor *)data;
#line 183
  dev = minor->dev;
#line 184
  dev_priv = dev->dev_private;
#line 185
  len = 0;
#line 187
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 188
    *eof = 1;
#line 189
    return (0);
  } else {

  }
#line 192
  *start = buf + offset;
#line 193
  *eof = 0;
#line 194
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 195
    tmp = i915_get_gem_seqno(dev);
#line 195
    tmp___0 = sprintf(buf + len, "Current sequence: %d\n", tmp);
#line 195
    len = len + tmp___0;
#line 195
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 195
      *eof = 1;
#line 195
      return ((off_t )len - offset);
    } else {

    }
  } else {
#line 198
    tmp___1 = sprintf(buf + len, "Current sequence: hws uninitialized\n");
#line 198
    len = len + tmp___1;
#line 198
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 198
      *eof = 1;
#line 198
      return ((off_t )len - offset);
    } else {

    }
  }
#line 200
  tmp___2 = sprintf(buf + len, "Waiter sequence:  %d\n", dev_priv->mm.waiting_gem_seqno);
#line 200
  len = len + tmp___2;
#line 200
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 200
    *eof = 1;
#line 200
    return ((off_t )len - offset);
  } else {

  }
#line 202
  tmp___3 = sprintf(buf + len, "IRQ sequence:     %d\n", dev_priv->mm.irq_gem_seqno);
#line 202
  len = len + tmp___3;
#line 202
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 202
    *eof = 1;
#line 202
    return ((off_t )len - offset);
  } else {

  }
#line 203
  if ((off_t )len > (off_t )request + offset) {
#line 204
    return (request);
  } else {

  }
#line 205
  *eof = 1;
#line 206
  return ((off_t )len - offset);
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_interrupt_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  int tmp___6 ;
  unsigned int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  uint32_t tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 213
  minor = (struct drm_minor *)data;
#line 214
  dev = minor->dev;
#line 215
  dev_priv = dev->dev_private;
#line 216
  len = 0;
#line 218
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 219
    *eof = 1;
#line 220
    return (0);
  } else {

  }
#line 223
  *start = buf + offset;
#line 224
  *eof = 0;
#line 225
  tmp = readl(dev_priv->regs + 8352);
#line 225
  tmp___0 = sprintf(buf + len, "Interrupt enable:    %08x\n", tmp);
#line 225
  len = len + tmp___0;
#line 225
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 225
    *eof = 1;
#line 225
    return ((off_t )len - offset);
  } else {

  }
#line 227
  tmp___1 = readl(dev_priv->regs + 8356);
#line 227
  tmp___2 = sprintf(buf + len, "Interrupt identity:  %08x\n", tmp___1);
#line 227
  len = len + tmp___2;
#line 227
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 227
    *eof = 1;
#line 227
    return ((off_t )len - offset);
  } else {

  }
#line 229
  tmp___3 = readl(dev_priv->regs + 8360);
#line 229
  tmp___4 = sprintf(buf + len, "Interrupt mask:      %08x\n", tmp___3);
#line 229
  len = len + tmp___4;
#line 229
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 229
    *eof = 1;
#line 229
    return ((off_t )len - offset);
  } else {

  }
#line 231
  tmp___5 = readl(dev_priv->regs + 458788);
#line 231
  tmp___6 = sprintf(buf + len, "Pipe A stat:         %08x\n", tmp___5);
#line 231
  len = len + tmp___6;
#line 231
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 231
    *eof = 1;
#line 231
    return ((off_t )len - offset);
  } else {

  }
#line 233
  tmp___7 = readl(dev_priv->regs + 462884);
#line 233
  tmp___8 = sprintf(buf + len, "Pipe B stat:         %08x\n", tmp___7);
#line 233
  len = len + tmp___8;
#line 233
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 233
    *eof = 1;
#line 233
    return ((off_t )len - offset);
  } else {

  }
#line 235
  tmp___9 = sprintf(buf + len, "Interrupts received: %d\n", dev_priv->irq_received.counter);
#line 235
  len = len + tmp___9;
#line 235
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 235
    *eof = 1;
#line 235
    return ((off_t )len - offset);
  } else {

  }
#line 237
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 238
    tmp___10 = i915_get_gem_seqno(dev);
#line 238
    tmp___11 = sprintf(buf + len, "Current sequence:    %d\n", tmp___10);
#line 238
    len = len + tmp___11;
#line 238
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 238
      *eof = 1;
#line 238
      return ((off_t )len - offset);
    } else {

    }
  } else {
#line 241
    tmp___12 = sprintf(buf + len, "Current sequence:    hws uninitialized\n");
#line 241
    len = len + tmp___12;
#line 241
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 241
      *eof = 1;
#line 241
      return ((off_t )len - offset);
    } else {

    }
  }
#line 243
  tmp___13 = sprintf(buf + len, "Waiter sequence:     %d\n", dev_priv->mm.waiting_gem_seqno);
#line 243
  len = len + tmp___13;
#line 243
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 243
    *eof = 1;
#line 243
    return ((off_t )len - offset);
  } else {

  }
#line 245
  tmp___14 = sprintf(buf + len, "IRQ sequence:        %d\n", dev_priv->mm.irq_gem_seqno);
#line 245
  len = len + tmp___14;
#line 245
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 245
    *eof = 1;
#line 245
    return ((off_t )len - offset);
  } else {

  }
#line 247
  if ((off_t )len > (off_t )request + offset) {
#line 248
    return (request);
  } else {

  }
#line 249
  *eof = 1;
#line 250
  return ((off_t )len - offset);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_hws_info(char *buf , char **start , off_t offset , int request , int *eof ,
                         void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  int i ;
  u32 volatile   *hws ;
  int tmp ;

  {
#line 256
  minor = (struct drm_minor *)data;
#line 257
  dev = minor->dev;
#line 258
  dev_priv = dev->dev_private;
#line 259
  len = 0;
#line 262
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 263
    *eof = 1;
#line 264
    return (0);
  } else {

  }
#line 267
  hws = (u32 volatile   *)dev_priv->hw_status_page;
#line 268
  if ((unsigned long )hws == (unsigned long )((void *)0)) {
#line 269
    *eof = 1;
#line 270
    return (0);
  } else {

  }
#line 273
  *start = buf + offset;
#line 274
  *eof = 0;
#line 275
  i = 0;
#line 275
  while (1) {
#line 275
    if ((unsigned long )i < (4096UL / sizeof(u32 )) / 4UL) {

    } else {
#line 275
      break;
    }
#line 276
    tmp = sprintf(buf + len, "0x%08x: 0x%08x 0x%08x 0x%08x 0x%08x\n", i * 4, *(hws + i),
                  *(hws + (i + 1)), *(hws + (i + 2)), *(hws + (i + 3)));
#line 276
    len = len + tmp;
#line 276
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 276
      *eof = 1;
#line 276
      return ((off_t )len - offset);
    } else {

    }
#line 275
    i = i + 4;
  }
#line 280
  if ((off_t )len > (off_t )request + offset) {
#line 281
    return (request);
  } else {

  }
#line 282
  *eof = 1;
#line 283
  return ((off_t )len - offset);
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static struct drm_proc_list i915_gem_proc_list[7]  = {      {"i915_gem_active", & i915_gem_active_info}, 
        {"i915_gem_flushing", & i915_gem_flushing_info}, 
        {"i915_gem_inactive", & i915_gem_inactive_info}, 
        {"i915_gem_request", & i915_gem_request_info}, 
        {"i915_gem_seqno", & i915_gem_seqno_info}, 
        {"i915_gem_interrupt", & i915_interrupt_info}, 
        {"i915_gem_hws", & i915_hws_info}};
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
int i915_gem_proc_init(struct drm_minor *minor ) 
{ 
  struct proc_dir_entry *ent ;
  int i ;
  int j ;

  {
#line 308
  i = 0;
#line 308
  while (1) {
#line 308
    if ((unsigned long )i < sizeof(i915_gem_proc_list) / sizeof(i915_gem_proc_list[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 308
      break;
    }
#line 309
    ent = create_proc_entry(i915_gem_proc_list[i].name, 32768 | ((256 | 32) | 4),
                            minor->dev_root);
#line 311
    if (! ent) {
#line 312
      printk("<3>[drm:%s] *ERROR* Cannot create /proc/dri/.../%s\n", "i915_gem_proc_init",
             i915_gem_proc_list[i].name);
#line 314
      j = 0;
#line 314
      while (1) {
#line 314
        if (j < i) {

        } else {
#line 314
          break;
        }
#line 315
        remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 314
        j = j + 1;
      }
#line 317
      return (-1);
    } else {

    }
#line 319
    ent->read_proc = i915_gem_proc_list[i].f;
#line 320
    ent->data = minor;
#line 308
    i = i + 1;
  }
#line 322
  return (0);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_proc.c"
void i915_gem_proc_cleanup(struct drm_minor *minor ) 
{ 
  int i ;

  {
#line 329
  if (! minor->dev_root) {
#line 330
    return;
  } else {

  }
#line 332
  i = 0;
#line 332
  while (1) {
#line 332
    if ((unsigned long )i < sizeof(i915_gem_proc_list) / sizeof(i915_gem_proc_list[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 332
      break;
    }
#line 333
    remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 332
    i = i + 1;
  }
#line 334
  return;
}
}
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile   *addr ) 
{ 
  unsigned short ret ;

  {
#line 19
  __asm__  volatile   ("mov"
                       "w"
                       " %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
#line 19
  return (ret);
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t swizzle_x ;
  uint32_t swizzle_y ;
  uint32_t dcc ;
  unsigned short tmp ;
  unsigned short tmp___0 ;

  {
#line 89
  dev_priv = dev->dev_private;
#line 90
  swizzle_x = 5;
#line 91
  swizzle_y = 5;
#line 93
  if (! ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 97
    swizzle_x = 0;
#line 98
    swizzle_y = 0;
  } else
#line 99
  if (((! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && ! ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 110
    dcc = readl(dev_priv->regs + 66048);
#line 111
    switch (dcc & (unsigned int )(3 << 0)) {
    case (unsigned int )(1 << 0): 
    case (unsigned int )(0 << 0): 
#line 114
    swizzle_x = 0;
#line 115
    swizzle_y = 0;
#line 116
    break;
    case (unsigned int )(2 << 0): 
#line 118
    if (((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dcc & (unsigned int )(1 << 10)) {
#line 120
      swizzle_x = 2;
#line 121
      swizzle_y = 1;
    } else
#line 122
    if ((dev->pci_device == 10754 || dev->pci_device == 10818) && (dcc & (unsigned int )(1 << 9)) == 0U) {
#line 127
      swizzle_x = 4;
#line 128
      swizzle_y = 3;
    } else {
#line 131
      swizzle_x = 5;
#line 132
      swizzle_y = 5;
    }
#line 134
    break;
    }
#line 136
    if (dcc == 4294967295U) {
#line 137
      printk("<3>[drm:%s] *ERROR* Couldn\'t read from MCHBAR.  Disabling tiling.\n",
             "i915_gem_detect_bit_6_swizzle");
#line 139
      swizzle_x = 5;
#line 140
      swizzle_y = 5;
    } else {

    }
  } else {
#line 163
    tmp = readw(dev_priv->regs + 66054);
#line 163
    tmp___0 = readw(dev_priv->regs + 67078);
#line 163
    if ((int )tmp != (int )tmp___0) {
#line 164
      swizzle_x = 0;
#line 165
      swizzle_y = 0;
    } else {
#line 167
      swizzle_x = 2;
#line 168
      swizzle_y = 1;
    }
  }
#line 172
  dev_priv->mm.bit_6_swizzle_x = swizzle_x;
#line 173
  dev_priv->mm.bit_6_swizzle_y = swizzle_y;
#line 174
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 184
  args = data;
#line 185
  dev_priv = dev->dev_private;
#line 189
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 190
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 191
    return (-22);
  } else {

  }
#line 192
  obj_priv = obj->driver_private;
#line 194
  mutex_lock(& dev->struct_mutex);
#line 196
  if (args->tiling_mode == (uint32_t )0) {
#line 197
    obj_priv->tiling_mode = 0;
#line 198
    args->swizzle_mode = 0;
  } else {
#line 200
    if (args->tiling_mode == (uint32_t )1) {
#line 201
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
    } else {
#line 203
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
    }
#line 205
    if (args->swizzle_mode == (uint32_t )5) {
#line 206
      args->tiling_mode = 0;
#line 207
      args->swizzle_mode = 0;
    } else {

    }
  }
#line 210
  obj_priv->tiling_mode = args->tiling_mode;
#line 211
  obj_priv->stride = args->stride;
#line 213
  mutex_unlock(& dev->struct_mutex);
#line 215
  drm_gem_object_unreference(obj);
#line 217
  return (0);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 227
  args = data;
#line 228
  dev_priv = dev->dev_private;
#line 232
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 233
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 234
    return (-22);
  } else {

  }
#line 235
  obj_priv = obj->driver_private;
#line 237
  mutex_lock(& dev->struct_mutex);
#line 239
  args->tiling_mode = obj_priv->tiling_mode;
#line 240
  switch (obj_priv->tiling_mode) {
  case (uint32_t )1: 
#line 242
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
#line 243
  break;
  case (uint32_t )2: 
#line 245
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
#line 246
  break;
  case (uint32_t )0: 
#line 248
  args->swizzle_mode = 0;
#line 249
  break;
  default: 
#line 251
  printk("<3>[drm:%s] *ERROR* unknown tiling mode\n", "i915_gem_get_tiling");
  }
#line 254
  mutex_unlock(& dev->struct_mutex);
#line 256
  drm_gem_object_unreference(obj);
#line 258
  return (0);
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x ) 
{ 
  int r ;

  {
#line 385
  __asm__  ("bsfl %1,%0\n\t"
            "cmovzl %2,%0": "=r" (r): "rm" (x), "r" (-1));
#line 394
  return (r + 1);
}
}
#line 303 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 305
  tmp = kmalloc(size, flags | 32768U);
#line 305
  return (tmp);
}
}
#line 586 "include/drm/drm_crtc.h"
extern void drm_crtc_init(struct drm_device *dev , struct drm_crtc *crtc , struct drm_crtc_funcs  const  *funcs ) ;
#line 589
extern void drm_crtc_cleanup(struct drm_crtc *crtc ) ;
#line 621
extern void drm_mode_debug_printmodeline(struct drm_display_mode *mode ) ;
#line 622
extern void drm_mode_config_init(struct drm_device *dev ) ;
#line 623
extern void drm_mode_config_cleanup(struct drm_device *dev ) ;
#line 624
extern void drm_mode_set_name(struct drm_display_mode *mode ) ;
#line 646
extern void drm_mode_set_crtcinfo(struct drm_display_mode *p , int adjust_flags ) ;
#line 660
extern int drm_framebuffer_init(struct drm_device *dev , struct drm_framebuffer *fb ,
                                struct drm_framebuffer_funcs  const  *funcs ) ;
#line 663
extern void drm_framebuffer_cleanup(struct drm_framebuffer *fb ) ;
#line 687
extern bool drm_mode_crtc_set_gamma_size(struct drm_crtc *crtc , int gamma_size ) ;
#line 1216 "include/drm/drmP.h"
extern void drm_vblank_pre_modeset(struct drm_device *dev , int crtc ) ;
#line 1217
extern void drm_vblank_post_modeset(struct drm_device *dev , int crtc ) ;
#line 92 "include/drm/drm_crtc_helper.h"
extern void drm_helper_disable_unused_functions(struct drm_device *dev ) ;
#line 95
extern int drm_crtc_helper_set_config(struct drm_mode_set *set ) ;
#line 96
extern bool drm_crtc_helper_set_mode(struct drm_crtc *crtc , struct drm_display_mode *mode ,
                                     int x , int y , struct drm_framebuffer *old_fb ) ;
#line 100
extern bool drm_helper_crtc_in_use(struct drm_crtc *crtc ) ;
#line 102
extern int drm_helper_mode_fill_fb_struct(struct drm_framebuffer *fb , struct drm_mode_fb_cmd *mode_cmd ) ;
#line 105 "include/drm/drm_crtc_helper.h"
__inline static void drm_crtc_helper_add(struct drm_crtc *crtc , struct drm_crtc_helper_funcs  const  *funcs ) 
{ 


  {
#line 108
  crtc->helper_private = (void *)funcs;
#line 109
  return;
}
}
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
void intel_crt_init(struct drm_device *dev ) ;
#line 111
void intel_sdvo_init(struct drm_device *dev , int output_device ) ;
#line 112
void intel_dvo_init(struct drm_device *dev ) ;
#line 113
void intel_tv_init(struct drm_device *dev ) ;
#line 114
void intel_lvds_init(struct drm_device *dev ) ;
#line 116
void intel_crtc_load_lut(struct drm_crtc *crtc ) ;
#line 117
void intel_encoder_prepare(struct drm_encoder *encoder ) ;
#line 118
void intel_encoder_commit(struct drm_encoder *encoder ) ;
#line 120
struct drm_encoder *intel_best_encoder(struct drm_connector *connector ) ;
#line 122
struct drm_display_mode *intel_crtc_mode_get(struct drm_device *dev , struct drm_crtc *crtc ) ;
#line 124
void intel_wait_for_vblank(struct drm_device *dev ) ;
#line 125
struct drm_crtc *intel_get_crtc_from_pipe(struct drm_device *dev , int pipe ) ;
#line 126
struct drm_crtc *intel_get_load_detect_pipe(struct intel_output *intel_output , struct drm_display_mode *mode ,
                                            int *dpms_mode ) ;
#line 129
void intel_release_load_detect_pipe(struct intel_output *intel_output , int dpms_mode ) ;
#line 135
int intelfb_probe(struct drm_device *dev ) ;
#line 136
int intelfb_remove(struct drm_device *dev , struct drm_framebuffer *fb ) ;
#line 139
void intel_crtc_fb_gamma_set(struct drm_crtc *crtc , u16 red , u16 green , u16 blue ,
                             int regno ) ;
#line 142
int intel_framebuffer_create(struct drm_device *dev , struct drm_mode_fb_cmd *mode_cmd ,
                             struct drm_framebuffer **fb , struct drm_gem_object *obj ) ;
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
bool intel_pipe_has_type(struct drm_crtc *crtc , int type ) ;
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static intel_limit_t const   intel_limits[4]  = {      {{25000, 350000}, {930000, 1400000}, {3, 16}, {96, 140}, {18, 26}, {6, 16}, {4,
                                                                                  128},
      {2, 33}, {165000, 4, 2}}, 
        {{25000, 350000}, {930000, 1400000}, {3, 16}, {96, 140}, {18, 26}, {6, 16}, {4,
                                                                                  128},
      {1, 6}, {165000, 14, 14}}, 
        {{20000, 400000}, {1400000, 2800000}, {3, 8}, {70, 120}, {10, 20}, {5, 9}, {5,
                                                                                 80},
      {1, 8}, {200000, 10, 5}}, 
        {{20000, 400000}, {1400000, 2800000}, {3, 8}, {70, 120}, {10, 20}, {5, 9}, {7,
                                                                                 98},
      {1, 8}, {112000, 14, 7}}};
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static intel_limit_t const   *intel_limit(struct drm_crtc *crtc ) 
{ 
  struct drm_device *dev ;
  intel_limit_t const   *limit ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 176
  dev = crtc->dev;
#line 179
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 180
    tmp = intel_pipe_has_type(crtc, 4);
#line 180
    if (tmp) {
#line 181
      limit = & intel_limits[3];
    } else {
#line 183
      limit = & intel_limits[2];
    }
  } else {
#line 185
    tmp___0 = intel_pipe_has_type(crtc, 4);
#line 185
    if (tmp___0) {
#line 186
      limit = & intel_limits[1];
    } else {
#line 188
      limit = & intel_limits[0];
    }
  }
#line 190
  return (limit);
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void i8xx_clock(int refclk , intel_clock_t *clock ) 
{ 


  {
#line 197
  clock->m = 5 * (clock->m1 + 2) + (clock->m2 + 2);
#line 198
  clock->p = clock->p1 * clock->p2;
#line 199
  clock->vco = (refclk * clock->m) / (clock->n + 2);
#line 200
  clock->dot = clock->vco / clock->p;
#line 201
  return;
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void i9xx_clock(int refclk , intel_clock_t *clock ) 
{ 


  {
#line 207
  clock->m = 5 * (clock->m1 + 2) + (clock->m2 + 2);
#line 208
  clock->p = clock->p1 * clock->p2;
#line 209
  clock->vco = (refclk * clock->m) / (clock->n + 2);
#line 210
  clock->dot = clock->vco / clock->p;
#line 211
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_clock(struct drm_device *dev , int refclk , intel_clock_t *clock ) 
{ 


  {
#line 216
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 217
    i9xx_clock(refclk, clock);
  } else {
#line 219
    i8xx_clock(refclk, clock);
  }
#line 220
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
bool intel_pipe_has_type(struct drm_crtc *crtc , int type ) 
{ 
  struct drm_device *dev ;
  struct drm_mode_config *mode_config ;
  struct drm_connector *l_entry ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___1 ;

  {
#line 227
  dev = crtc->dev;
#line 228
  mode_config = & dev->mode_config;
#line 231
  __mptr = mode_config->connector_list.next;
#line 231
  l_entry = (struct drm_connector *)((char *)__mptr - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 231
  while (1) {
#line 231
    __builtin_prefetch(l_entry->head.next);
#line 231
    if ((unsigned long )(& l_entry->head) != (unsigned long )(& mode_config->connector_list)) {

    } else {
#line 231
      break;
    }
#line 232
    if (l_entry->encoder && (unsigned long )(l_entry->encoder)->crtc == (unsigned long )crtc) {
#line 234
      __mptr___1 = l_entry;
#line 234
      intel_output = (struct intel_output *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_output *)0)->base));
#line 235
      if (intel_output->type == type) {
#line 236
        return (true);
      } else {

      }
    } else {

    }
#line 231
    __mptr___0 = l_entry->head.next;
#line 231
    l_entry = (struct drm_connector *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 239
  return (false);
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static bool intel_PLL_is_valid(struct drm_crtc *crtc , intel_clock_t *clock ) 
{ 
  intel_limit_t const   *limit ;
  intel_limit_t const   *tmp ;

  {
#line 250
  tmp = intel_limit(crtc);
#line 250
  limit = tmp;
#line 252
  if (clock->p1 < (int )limit->p1.min || limit->p1.max < (int const   )clock->p1) {
#line 253
    return (false);
  } else {

  }
#line 254
  if (clock->p < (int )limit->p.min || limit->p.max < (int const   )clock->p) {
#line 255
    return (false);
  } else {

  }
#line 256
  if (clock->m2 < (int )limit->m2.min || limit->m2.max < (int const   )clock->m2) {
#line 257
    return (false);
  } else {

  }
#line 258
  if (clock->m1 < (int )limit->m1.min || limit->m1.max < (int const   )clock->m1) {
#line 259
    return (false);
  } else {

  }
#line 260
  if (clock->m1 <= clock->m2) {
#line 261
    return (false);
  } else {

  }
#line 262
  if (clock->m < (int )limit->m.min || limit->m.max < (int const   )clock->m) {
#line 263
    return (false);
  } else {

  }
#line 264
  if (clock->n < (int )limit->n.min || limit->n.max < (int const   )clock->n) {
#line 265
    return (false);
  } else {

  }
#line 266
  if (clock->vco < (int )limit->vco.min || limit->vco.max < (int const   )clock->vco) {
#line 267
    return (false);
  } else {

  }
#line 271
  if (clock->dot < (int )limit->dot.min || limit->dot.max < (int const   )clock->dot) {
#line 272
    return (false);
  } else {

  }
#line 274
  return (true);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static bool intel_find_best_PLL(struct drm_crtc *crtc , int target , int refclk ,
                                intel_clock_t *best_clock ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  intel_clock_t clock ;
  intel_limit_t const   *limit ;
  intel_limit_t const   *tmp ;
  int err ;
  unsigned int tmp___0 ;
  bool tmp___1 ;
  unsigned int tmp___2 ;
  int this_err ;
  bool tmp___3 ;
  int __x ;

  {
#line 285
  dev = crtc->dev;
#line 286
  dev_priv = dev->dev_private;
#line 288
  tmp = intel_limit(crtc);
#line 288
  limit = tmp;
#line 289
  err = target;
#line 291
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 291
    tmp___1 = intel_pipe_has_type(crtc, 4);
#line 291
    if (tmp___1) {
#line 291
      tmp___2 = readl(dev_priv->regs + 397696);
#line 291
      if ((tmp___2 & (unsigned int )(1 << 31)) != 0U) {
#line 299
        tmp___0 = readl(dev_priv->regs + 397696);
#line 299
        if ((tmp___0 & (unsigned int )(3 << 4)) == (unsigned int )(3 << 4)) {
#line 301
          clock.p2 = limit->p2.p2_fast;
        } else {
#line 303
          clock.p2 = limit->p2.p2_slow;
        }
      } else {
#line 291
        goto _L___0;
      }
    } else {
#line 291
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
#line 305
  if (target < (int )limit->p2.dot_limit) {
#line 306
    clock.p2 = limit->p2.p2_slow;
  } else {
#line 308
    clock.p2 = limit->p2.p2_fast;
  }
#line 311
  memset(best_clock, 0, sizeof(*best_clock));
#line 313
  clock.m1 = limit->m1.min;
#line 313
  while (1) {
#line 313
    if (clock.m1 <= (int )limit->m1.max) {

    } else {
#line 313
      break;
    }
#line 314
    clock.m2 = limit->m2.min;
#line 314
    while (1) {
#line 314
      if (clock.m2 < clock.m1 && clock.m2 <= (int )limit->m2.max) {

      } else {
#line 314
        break;
      }
#line 316
      clock.n = limit->n.min;
#line 316
      while (1) {
#line 316
        if (clock.n <= (int )limit->n.max) {

        } else {
#line 316
          break;
        }
#line 318
        clock.p1 = limit->p1.min;
#line 318
        while (1) {
#line 318
          if (clock.p1 <= (int )limit->p1.max) {

          } else {
#line 318
            break;
          }
#line 322
          intel_clock(dev, refclk, & clock);
#line 324
          tmp___3 = intel_PLL_is_valid(crtc, & clock);
#line 324
          if (tmp___3) {

          } else {
#line 325
            goto __Cont;
          }
#line 327
          __x = clock.dot - target;
#line 327
          this_err = __x < 0 ? - __x : __x;
#line 328
          if (this_err < err) {
#line 329
            *best_clock = clock;
#line 330
            err = this_err;
          } else {

          }
          __Cont: /* CIL Label */ 
#line 318
          clock.p1 = clock.p1 + 1;
        }
#line 316
        clock.n = clock.n + 1;
      }
#line 314
      clock.m2 = clock.m2 + 1;
    }
#line 313
    clock.m1 = clock.m1 + 1;
  }
#line 337
  return (err != target);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_wait_for_vblank(struct drm_device *dev ) 
{ 


  {
#line 344
  if (20000 > 20000) {
#line 344
    __bad_udelay();
  } else {
#line 344
    __const_udelay(20000UL * 4295UL);
  }
#line 345
  return;
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_pipe_set_base(struct drm_crtc *crtc , int x , int y , struct drm_framebuffer *old_fb ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_framebuffer *intel_fb ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_gem_object *obj ;
  int pipe ;
  unsigned long Start ;
  unsigned long Offset ;
  int dspbase ;
  int dspsurf ;
  int dspstride ;
  int dspcntr_reg ;
  u32 dspcntr ;
  u32 alignment ;
  struct drm_framebuffer  const  *__mptr___0 ;
  int tmp ;
  struct drm_framebuffer  const  *__mptr___1 ;

  {
#line 351
  dev = crtc->dev;
#line 352
  dev_priv = dev->dev_private;
#line 354
  __mptr = crtc;
#line 354
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 358
  pipe = intel_crtc->pipe;
#line 360
  dspbase = pipe == 0 ? 459140 : 463236;
#line 361
  dspsurf = pipe == 0 ? 459164 : 463260;
#line 362
  dspstride = pipe == 0 ? 459144 : 463240;
#line 363
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 367
  if (! crtc->fb) {
#line 368
    while (1) {
#line 368
      if (drm_debug) {
#line 368
        printk("<7>[drm:%s] No FB bound\n", "intel_pipe_set_base");
      } else {

      }
#line 368
      break;
    }
#line 369
    return;
  } else {

  }
#line 372
  __mptr___0 = crtc->fb;
#line 372
  intel_fb = (struct intel_framebuffer *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 373
  obj = intel_fb->obj;
#line 374
  obj_priv = obj->driver_private;
#line 376
  switch (obj_priv->tiling_mode) {
  case (uint32_t )0: 
#line 378
  alignment = 64 * 1024;
#line 379
  break;
  case (uint32_t )1: 
#line 381
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 382
    alignment = 1024 * 1024;
  } else {
#line 384
    alignment = 512 * 1024;
  }
#line 385
  break;
  case (uint32_t )2: 
#line 388
  printk("<3>[drm:%s] *ERROR* Y tiled not allowed for scan out buffers\n", "intel_pipe_set_base");
#line 389
  return;
  default: 
#line 391
  while (1) {
#line 391
    __asm__  volatile   ("1:\tud2\n"
                         ".pushsection __bug_table,\"a\"\n"
                         "2:\t.quad 1b, %c0\n"
                         "\t.word %c1, 0\n"
                         "\t.org 2b+%c2\n"
                         ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"),
                         "i" (391), "i" (sizeof(struct bug_entry )));
#line 391
    while (1) {

    }
#line 391
    break;
  }
  }
#line 394
  tmp = i915_gem_object_pin(intel_fb->obj, alignment);
#line 394
  if (tmp) {
#line 395
    return;
  } else {

  }
#line 397
  i915_gem_object_set_to_gtt_domain(intel_fb->obj, 1);
#line 399
  Start = obj_priv->gtt_offset;
#line 400
  Offset = (unsigned int )y * (crtc->fb)->pitch + (unsigned int )(x * ((crtc->fb)->bits_per_pixel / 8));
#line 402
  writel((crtc->fb)->pitch, dev_priv->regs + dspstride);
#line 404
  dspcntr = readl(dev_priv->regs + dspcntr_reg);
#line 405
  switch ((crtc->fb)->bits_per_pixel) {
  case 8: 
#line 407
  dspcntr = dspcntr | (unsigned int )(2 << 26);
#line 408
  break;
  case 16: 
#line 410
  if ((crtc->fb)->depth == 15U) {
#line 411
    dspcntr = dspcntr | (unsigned int )(4 << 26);
  } else {
#line 413
    dspcntr = dspcntr | (unsigned int )(5 << 26);
  }
#line 414
  break;
  case 32: 
  case 24: 
#line 417
  dspcntr = dspcntr | (unsigned int )(6 << 26);
#line 418
  break;
  default: 
#line 420
  printk("<3>[drm:%s] *ERROR* Unknown color depth\n", "intel_pipe_set_base");
#line 421
  return;
  }
#line 423
  writel(dspcntr, dev_priv->regs + dspcntr_reg);
#line 425
  while (1) {
#line 425
    if (drm_debug) {
#line 425
      printk("<7>[drm:%s] Writing base %08lX %08lX %d %d\n", "intel_pipe_set_base",
             Start, Offset, x, y);
    } else {

    }
#line 425
    break;
  }
#line 426
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 427
    writel(Offset, dev_priv->regs + dspbase);
#line 428
    readl(dev_priv->regs + dspbase);
#line 429
    writel(Start, dev_priv->regs + dspsurf);
#line 430
    readl(dev_priv->regs + dspsurf);
  } else {
#line 432
    writel(Start + Offset, dev_priv->regs + dspbase);
#line 433
    readl(dev_priv->regs + dspbase);
  }
#line 436
  intel_wait_for_vblank(dev);
#line 438
  if (old_fb) {
#line 439
    __mptr___1 = old_fb;
#line 439
    intel_fb = (struct intel_framebuffer *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 440
    i915_gem_object_unpin(intel_fb->obj);
  } else {

  }
#line 443
  if (! (dev->primary)->master) {
#line 444
    return;
  } else {

  }
#line 446
  master_priv = ((dev->primary)->master)->driver_priv;
#line 447
  if (! master_priv->sarea_priv) {
#line 448
    return;
  } else {

  }
#line 450
  switch (pipe) {
  case 0: 
#line 452
  (master_priv->sarea_priv)->pipeA_x = x;
#line 453
  (master_priv->sarea_priv)->pipeA_y = y;
#line 454
  break;
  case 1: 
#line 456
  (master_priv->sarea_priv)->pipeB_x = x;
#line 457
  (master_priv->sarea_priv)->pipeB_y = y;
#line 458
  break;
  default: 
#line 460
  printk("<3>[drm:%s] *ERROR* Can\'t update pipe %d in SAREA\n", "intel_pipe_set_base",
         pipe);
#line 461
  break;
  }
#line 463
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_dpms(struct drm_crtc *crtc , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_master_private *master_priv ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  int dpll_reg ;
  int dspcntr_reg ;
  int dspbase_reg ;
  int pipeconf_reg ;
  u32 temp ;
  bool enabled ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 475
  dev = crtc->dev;
#line 477
  dev_priv = dev->dev_private;
#line 478
  __mptr = crtc;
#line 478
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 479
  pipe = intel_crtc->pipe;
#line 480
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 481
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 482
  dspbase_reg = pipe == 0 ? 459140 : 463236;
#line 483
  pipeconf_reg = pipe == 0 ? 458760 : 462856;
#line 490
  switch (mode) {
  case 2: 
  case 1: 
  case 0: 
#line 495
  temp = readl(dev_priv->regs + dpll_reg);
#line 496
  if ((temp & (unsigned int )(1 << 31)) == 0U) {
#line 497
    writel(temp, dev_priv->regs + dpll_reg);
#line 498
    readl(dev_priv->regs + dpll_reg);
#line 500
    if (150 > 20000) {
#line 500
      __bad_udelay();
    } else {
#line 500
      __const_udelay(150UL * 4295UL);
    }
#line 501
    writel(temp | (unsigned int )(1 << 31), dev_priv->regs + dpll_reg);
#line 502
    readl(dev_priv->regs + dpll_reg);
#line 504
    if (150 > 20000) {
#line 504
      __bad_udelay();
    } else {
#line 504
      __const_udelay(150UL * 4295UL);
    }
#line 505
    writel(temp | (unsigned int )(1 << 31), dev_priv->regs + dpll_reg);
#line 506
    readl(dev_priv->regs + dpll_reg);
#line 508
    if (150 > 20000) {
#line 508
      __bad_udelay();
    } else {
#line 508
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 512
  temp = readl(dev_priv->regs + pipeconf_reg);
#line 513
  if ((temp & (unsigned int )(1 << 31)) == 0U) {
#line 514
    writel(temp | (unsigned int )(1 << 31), dev_priv->regs + pipeconf_reg);
  } else {

  }
#line 517
  temp = readl(dev_priv->regs + dspcntr_reg);
#line 518
  if ((temp & (unsigned int )(1 << 31)) == 0U) {
#line 519
    writel(temp | (unsigned int )(1 << 31), dev_priv->regs + dspcntr_reg);
#line 521
    tmp = readl(dev_priv->regs + dspbase_reg);
#line 521
    writel(tmp, dev_priv->regs + dspbase_reg);
  } else {

  }
#line 524
  intel_crtc_load_lut(crtc);
#line 528
  break;
  case 3: 
#line 534
  writel(1 << 31, dev_priv->regs + 463872);
#line 537
  temp = readl(dev_priv->regs + dspcntr_reg);
#line 538
  if ((temp & (unsigned int )(1 << 31)) != 0U) {
#line 539
    writel(temp & (unsigned int )(~ (1 << 31)), dev_priv->regs + dspcntr_reg);
#line 541
    tmp___0 = readl(dev_priv->regs + dspbase_reg);
#line 541
    writel(tmp___0, dev_priv->regs + dspbase_reg);
#line 542
    readl(dev_priv->regs + dspbase_reg);
  } else {

  }
#line 545
  if (! ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 547
    intel_wait_for_vblank(dev);
  } else {

  }
#line 551
  temp = readl(dev_priv->regs + pipeconf_reg);
#line 552
  if ((temp & (unsigned int )(1 << 31)) != 0U) {
#line 553
    writel(temp & (unsigned int )(~ (1 << 31)), dev_priv->regs + pipeconf_reg);
#line 554
    readl(dev_priv->regs + pipeconf_reg);
  } else {

  }
#line 558
  intel_wait_for_vblank(dev);
#line 560
  temp = readl(dev_priv->regs + dpll_reg);
#line 561
  if ((temp & (unsigned int )(1 << 31)) != 0U) {
#line 562
    writel(temp & (unsigned int )(~ (1 << 31)), dev_priv->regs + dpll_reg);
#line 563
    readl(dev_priv->regs + dpll_reg);
  } else {

  }
#line 567
  if (150 > 20000) {
#line 567
    __bad_udelay();
  } else {
#line 567
    __const_udelay(150UL * 4295UL);
  }
#line 568
  break;
  }
#line 571
  if (! (dev->primary)->master) {
#line 572
    return;
  } else {

  }
#line 574
  master_priv = ((dev->primary)->master)->driver_priv;
#line 575
  if (! master_priv->sarea_priv) {
#line 576
    return;
  } else {

  }
#line 578
  enabled = crtc->enabled && mode != 3;
#line 580
  switch (pipe) {
  case 0: 
#line 582
  (master_priv->sarea_priv)->pipeA_w = enabled ? crtc->mode.hdisplay : 0;
#line 583
  (master_priv->sarea_priv)->pipeA_h = enabled ? crtc->mode.vdisplay : 0;
#line 584
  break;
  case 1: 
#line 586
  (master_priv->sarea_priv)->pipeB_w = enabled ? crtc->mode.hdisplay : 0;
#line 587
  (master_priv->sarea_priv)->pipeB_h = enabled ? crtc->mode.vdisplay : 0;
#line 588
  break;
  default: 
#line 590
  printk("<3>[drm:%s] *ERROR* Can\'t update pipe %d in SAREA\n", "intel_crtc_dpms",
         pipe);
#line 591
  break;
  }
#line 594
  intel_crtc->dpms_mode = mode;
#line 595
  return;
}
}
#line 597 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_prepare(struct drm_crtc *crtc ) 
{ 
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 599
  crtc_funcs = crtc->helper_private;
#line 600
  (*(crtc_funcs->dpms))(crtc, 3);
#line 601
  return;
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_commit(struct drm_crtc *crtc ) 
{ 
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 605
  crtc_funcs = crtc->helper_private;
#line 606
  (*(crtc_funcs->dpms))(crtc, 0);
#line 607
  return;
}
}
#line 609 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_encoder_prepare(struct drm_encoder *encoder ) 
{ 
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 611
  encoder_funcs = encoder->helper_private;
#line 613
  (*(encoder_funcs->dpms))(encoder, 3);
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_encoder_commit(struct drm_encoder *encoder ) 
{ 
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 618
  encoder_funcs = encoder->helper_private;
#line 620
  (*(encoder_funcs->dpms))(encoder, 0);
#line 621
  return;
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static bool intel_crtc_mode_fixup(struct drm_crtc *crtc , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 627
  return (true);
}
}
#line 632 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_get_core_clock_speed(struct drm_device *dev ) 
{ 
  u16 gcfgc ;
  u16 hpllcc ;

  {
#line 638
  if (dev->pci_device == 10098) {
#line 639
    return (400000);
  } else
#line 640
  if (dev->pci_device == 9602 || dev->pci_device == 9610) {
#line 641
    return (333000);
  } else
#line 642
  if ((dev->pci_device == 10146 || dev->pci_device == 10158) || dev->pci_device == 9570) {
#line 643
    return (200000);
  } else
#line 644
  if (dev->pci_device == 9618) {
#line 645
    gcfgc = 0;
#line 647
    pci_read_config_word(dev->pdev, 240, & gcfgc);
#line 649
    if ((int )gcfgc & (1 << 7)) {
#line 650
      return (133000);
    } else {
#line 652
      switch ((int )gcfgc & (7 << 4)) {
      case 4 << 4: 
#line 654
      return (333000);
      default: 
#line 657
      return (190000);
      }
    }
  } else
#line 660
  if (dev->pci_device == 9586) {
#line 661
    return (266000);
  } else
#line 662
  if (dev->pci_device == 13698) {
#line 663
    hpllcc = 0;
#line 667
    switch ((int )hpllcc & (3 << 0)) {
    case 1 << 0: 
    case 0 << 0: 
#line 670
    return (200000);
    case 3 << 0: 
#line 672
    return (250000);
    case 2 << 0: 
#line 674
    return (133000);
    }
  } else {
#line 677
    return (133000);
  }
#line 679
  return (0);
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_panel_fitter_pipe(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 pfit_control ;

  {
#line 689
  dev_priv = dev->dev_private;
#line 693
  if (dev->pci_device == 13687) {
#line 694
    return (-1);
  } else {

  }
#line 696
  pfit_control = readl(dev_priv->regs + 397872);
#line 699
  if ((pfit_control & (unsigned int )(1 << 31)) == 0U) {
#line 700
    return (-1);
  } else {

  }
#line 703
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 704
    return ((pfit_control >> 29) & 3U);
  } else {

  }
#line 707
  return (1);
}
}
#line 710 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_mode_set(struct drm_crtc *crtc , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode , int x , int y ,
                                struct drm_framebuffer *old_fb ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  int fp_reg ;
  int dpll_reg ;
  int dpll_md_reg ;
  int dspcntr_reg ;
  int pipeconf_reg ;
  int htot_reg ;
  int hblank_reg ;
  int hsync_reg ;
  int vtot_reg ;
  int vblank_reg ;
  int vsync_reg ;
  int dspsize_reg ;
  int dsppos_reg ;
  int pipesrc_reg ;
  int refclk ;
  intel_clock_t clock ;
  u32 dpll ;
  u32 fp ;
  u32 dspcntr ;
  u32 pipeconf ;
  bool ok ;
  bool is_sdvo ;
  bool is_dvo ;
  bool is_crt ;
  bool is_lvds ;
  bool is_tv ;
  struct drm_mode_config *mode_config ;
  struct drm_connector *connector ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___2 ;
  int sdvo_pixel_multiply ;
  int tmp ;
  int tmp___0 ;
  u32 lvds ;
  unsigned int tmp___1 ;
  int sdvo_pixel_multiply___0 ;

  {
#line 716
  dev = crtc->dev;
#line 717
  dev_priv = dev->dev_private;
#line 718
  __mptr = crtc;
#line 718
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 719
  pipe = intel_crtc->pipe;
#line 720
  fp_reg = pipe == 0 ? 24640 : 24648;
#line 721
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 722
  dpll_md_reg = intel_crtc->pipe == 0 ? 24604 : 24608;
#line 723
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 724
  pipeconf_reg = pipe == 0 ? 458760 : 462856;
#line 725
  htot_reg = pipe == 0 ? 393216 : 397312;
#line 726
  hblank_reg = pipe == 0 ? 393220 : 397316;
#line 727
  hsync_reg = pipe == 0 ? 393224 : 397320;
#line 728
  vtot_reg = pipe == 0 ? 393228 : 397324;
#line 729
  vblank_reg = pipe == 0 ? 393232 : 397328;
#line 730
  vsync_reg = pipe == 0 ? 393236 : 397332;
#line 731
  dspsize_reg = pipe == 0 ? 459152 : 463248;
#line 732
  dsppos_reg = pipe == 0 ? 459148 : 463244;
#line 733
  pipesrc_reg = pipe == 0 ? 393244 : 397340;
#line 736
  dpll = 0;
#line 736
  fp = 0;
#line 737
  is_sdvo = false;
#line 737
  is_dvo = false;
#line 738
  is_crt = false;
#line 738
  is_lvds = false;
#line 738
  is_tv = false;
#line 739
  mode_config = & dev->mode_config;
#line 742
  drm_vblank_pre_modeset(dev, pipe);
#line 744
  __mptr___0 = mode_config->connector_list.next;
#line 744
  connector = (struct drm_connector *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 744
  while (1) {
#line 744
    __builtin_prefetch(connector->head.next);
#line 744
    if ((unsigned long )(& connector->head) != (unsigned long )(& mode_config->connector_list)) {

    } else {
#line 744
      break;
    }
#line 745
    __mptr___2 = connector;
#line 745
    intel_output = (struct intel_output *)((char *)__mptr___2 - (unsigned int )(& ((struct intel_output *)0)->base));
#line 747
    if (! connector->encoder || (unsigned long )(connector->encoder)->crtc != (unsigned long )crtc) {
#line 748
      goto __Cont;
    } else {

    }
#line 750
    switch (intel_output->type) {
    case 4: 
#line 752
    is_lvds = true;
#line 753
    break;
    case 3: 
#line 755
    is_sdvo = true;
#line 756
    break;
    case 2: 
#line 758
    is_dvo = true;
#line 759
    break;
    case 5: 
#line 761
    is_tv = true;
#line 762
    break;
    case 1: 
#line 764
    is_crt = true;
#line 765
    break;
    }
    __Cont: /* CIL Label */ 
#line 744
    __mptr___1 = connector->head.next;
#line 744
    connector = (struct drm_connector *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 769
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 770
    refclk = 96000;
  } else {
#line 772
    refclk = 48000;
  }
#line 775
  ok = intel_find_best_PLL(crtc, adjusted_mode->clock, refclk, & clock);
#line 776
  if (! ok) {
#line 777
    printk("<3>[drm:%s] *ERROR* Couldn\'t find PLL settings for mode!\n", "intel_crtc_mode_set");
#line 778
    return;
  } else {

  }
#line 781
  fp = ((clock.n << 16) | (clock.m1 << 8)) | clock.m2;
#line 783
  dpll = 1 << 28;
#line 784
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 785
    if (is_lvds) {
#line 786
      dpll = dpll | (unsigned int )(2 << 26);
    } else {
#line 788
      dpll = dpll | (unsigned int )(1 << 26);
    }
#line 789
    if (is_sdvo) {
#line 790
      dpll = dpll | (unsigned int )(1 << 30);
#line 791
      if (dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) {
#line 792
        sdvo_pixel_multiply = adjusted_mode->clock / mode->clock;
#line 793
        dpll = dpll | (unsigned int )((sdvo_pixel_multiply - 1) << 4);
      } else {

      }
    } else {

    }
#line 798
    dpll = dpll | (unsigned int )((1 << (clock.p1 - 1)) << 16);
#line 799
    switch (clock.p2) {
    case 5: 
#line 801
    dpll = dpll | (unsigned int )(1 << 24);
#line 802
    break;
    case 7: 
#line 804
    dpll = dpll | (unsigned int )(1 << 24);
#line 805
    break;
    case 10: 
#line 807
    dpll = dpll | (unsigned int )(0 << 24);
#line 808
    break;
    case 14: 
#line 810
    dpll = dpll | (unsigned int )(0 << 24);
#line 811
    break;
    }
#line 813
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 814
      dpll = dpll | (unsigned int )(6 << 9);
    } else {

    }
  } else
#line 816
  if (is_lvds) {
#line 817
    dpll = dpll | (unsigned int )((1 << (clock.p1 - 1)) << 16);
  } else {
#line 819
    if (clock.p1 == 2) {
#line 820
      dpll = dpll | (unsigned int )(1 << 21);
    } else {
#line 822
      dpll = dpll | (unsigned int )((clock.p1 - 2) << 16);
    }
#line 823
    if (clock.p2 == 4) {
#line 824
      dpll = dpll | (unsigned int )(1 << 23);
    } else {

    }
  }
#line 828
  if (is_tv) {
#line 831
    dpll = dpll | 3U;
  } else {
#line 834
    dpll = dpll | (unsigned int )(0 << 13);
  }
#line 837
  pipeconf = readl(dev_priv->regs + pipeconf_reg);
#line 840
  dspcntr = 1 << 30;
#line 842
  if (pipe == 0) {
#line 843
    dspcntr = dspcntr | 0U;
  } else {
#line 845
    dspcntr = dspcntr | (unsigned int )(1 << 24);
  }
#line 847
  if (pipe == 0 && ! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 854
    tmp = intel_get_core_clock_speed(dev);
#line 854
    if (mode->clock > (tmp * 9) / 10) {
#line 855
      pipeconf = pipeconf | (unsigned int )(1 << 30);
    } else {
#line 857
      pipeconf = pipeconf & (unsigned int )(~ (1 << 30));
    }
  } else {

  }
#line 860
  dspcntr = dspcntr | (unsigned int )(1 << 31);
#line 861
  pipeconf = pipeconf | (unsigned int )(1 << 31);
#line 862
  dpll = dpll | (unsigned int )(1 << 31);
#line 866
  tmp___0 = intel_panel_fitter_pipe(dev);
#line 866
  if (tmp___0 == pipe) {
#line 867
    writel(0, dev_priv->regs + 397872);
  } else {

  }
#line 869
  while (1) {
#line 869
    if (drm_debug) {
#line 869
      printk("<7>[drm:%s] Mode for pipe %c:\n", "intel_crtc_mode_set", pipe == 0 ? 'A' : 'B');
    } else {

    }
#line 869
    break;
  }
#line 870
  drm_mode_debug_printmodeline(mode);
#line 873
  if (dpll & (unsigned int )(1 << 31)) {
#line 874
    writel(fp, dev_priv->regs + fp_reg);
#line 875
    writel(dpll & (unsigned int )(~ (1 << 31)), dev_priv->regs + dpll_reg);
#line 876
    readl(dev_priv->regs + dpll_reg);
#line 877
    if (150 > 20000) {
#line 877
      __bad_udelay();
    } else {
#line 877
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 884
  if (is_lvds) {
#line 885
    tmp___1 = readl(dev_priv->regs + 397696);
#line 885
    lvds = tmp___1;
#line 887
    lvds = lvds | (unsigned int )(((1 << 31) | (3 << 8)) | (1 << 30));
#line 891
    if (clock.p2 == 7) {
#line 892
      lvds = lvds | (unsigned int )((3 << 2) | (3 << 4));
    } else {
#line 894
      lvds = lvds & (unsigned int )(~ ((3 << 2) | (3 << 4)));
    }
#line 901
    writel(lvds, dev_priv->regs + 397696);
#line 902
    readl(dev_priv->regs + 397696);
  } else {

  }
#line 905
  writel(fp, dev_priv->regs + fp_reg);
#line 906
  writel(dpll, dev_priv->regs + dpll_reg);
#line 907
  readl(dev_priv->regs + dpll_reg);
#line 909
  if (150 > 20000) {
#line 909
    __bad_udelay();
  } else {
#line 909
    __const_udelay(150UL * 4295UL);
  }
#line 911
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 912
    sdvo_pixel_multiply___0 = adjusted_mode->clock / mode->clock;
#line 913
    writel((0 << 24) | ((sdvo_pixel_multiply___0 - 1) << 8), dev_priv->regs + dpll_md_reg);
  } else {
#line 917
    writel(dpll, dev_priv->regs + dpll_reg);
  }
#line 919
  readl(dev_priv->regs + dpll_reg);
#line 921
  if (150 > 20000) {
#line 921
    __bad_udelay();
  } else {
#line 921
    __const_udelay(150UL * 4295UL);
  }
#line 923
  writel((adjusted_mode->crtc_hdisplay - 1) | ((adjusted_mode->crtc_htotal - 1) << 16),
         dev_priv->regs + htot_reg);
#line 925
  writel((adjusted_mode->crtc_hblank_start - 1) | ((adjusted_mode->crtc_hblank_end - 1) << 16),
         dev_priv->regs + hblank_reg);
#line 927
  writel((adjusted_mode->crtc_hsync_start - 1) | ((adjusted_mode->crtc_hsync_end - 1) << 16),
         dev_priv->regs + hsync_reg);
#line 929
  writel((adjusted_mode->crtc_vdisplay - 1) | ((adjusted_mode->crtc_vtotal - 1) << 16),
         dev_priv->regs + vtot_reg);
#line 931
  writel((adjusted_mode->crtc_vblank_start - 1) | ((adjusted_mode->crtc_vblank_end - 1) << 16),
         dev_priv->regs + vblank_reg);
#line 933
  writel((adjusted_mode->crtc_vsync_start - 1) | ((adjusted_mode->crtc_vsync_end - 1) << 16),
         dev_priv->regs + vsync_reg);
#line 938
  writel(((mode->vdisplay - 1) << 16) | (mode->hdisplay - 1), dev_priv->regs + dspsize_reg);
#line 939
  writel(0, dev_priv->regs + dsppos_reg);
#line 940
  writel(((mode->hdisplay - 1) << 16) | (mode->vdisplay - 1), dev_priv->regs + pipesrc_reg);
#line 941
  writel(pipeconf, dev_priv->regs + pipeconf_reg);
#line 942
  readl(dev_priv->regs + pipeconf_reg);
#line 944
  intel_wait_for_vblank(dev);
#line 946
  writel(dspcntr, dev_priv->regs + dspcntr_reg);
#line 949
  intel_pipe_set_base(crtc, x, y, old_fb);
#line 951
  drm_vblank_post_modeset(dev, pipe);
#line 952
  return;
}
}
#line 955 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_crtc_load_lut(struct drm_crtc *crtc ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int palreg ;
  int i ;

  {
#line 957
  dev = crtc->dev;
#line 958
  dev_priv = dev->dev_private;
#line 959
  __mptr = crtc;
#line 959
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 960
  palreg = intel_crtc->pipe == 0 ? 40960 : 43008;
#line 964
  if (! crtc->enabled) {
#line 965
    return;
  } else {

  }
#line 967
  i = 0;
#line 967
  while (1) {
#line 967
    if (i < 256) {

    } else {
#line 967
      break;
    }
#line 968
    writel((((int )intel_crtc->lut_r[i] << 16) | ((int )intel_crtc->lut_g[i] << 8)) | (int )intel_crtc->lut_b[i],
           dev_priv->regs + (palreg + 4 * i));
#line 967
    i = i + 1;
  }
#line 973
  return;
}
}
#line 975 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_crtc_cursor_set(struct drm_crtc *crtc , struct drm_file *file_priv ,
                                 uint32_t handle , uint32_t width , uint32_t height ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_gem_object *bo ;
  struct drm_i915_gem_object *obj_priv ;
  int pipe ;
  uint32_t control ;
  uint32_t base ;
  uint32_t temp ;
  size_t addr ;

  {
#line 980
  dev = crtc->dev;
#line 981
  dev_priv = dev->dev_private;
#line 982
  __mptr = crtc;
#line 982
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 985
  pipe = intel_crtc->pipe;
#line 986
  control = pipe == 0 ? 458880 : 458944;
#line 987
  base = pipe == 0 ? 458884 : 458948;
#line 991
  while (1) {
#line 991
    if (drm_debug) {
#line 991
      printk("<7>[drm:%s] \n", "intel_crtc_cursor_set");
    } else {

    }
#line 991
    break;
  }
#line 994
  if (! handle) {
#line 995
    while (1) {
#line 995
      if (drm_debug) {
#line 995
        printk("<7>[drm:%s] cursor off\n", "intel_crtc_cursor_set");
      } else {

      }
#line 995
      break;
    }
#line 997
    temp = 0;
#line 998
    temp = temp | 0U;
#line 1000
    writel(temp, dev_priv->regs + control);
#line 1001
    writel(0, dev_priv->regs + base);
#line 1002
    return (0);
  } else {

  }
#line 1006
  if (width != (uint32_t )64 || height != (uint32_t )64) {
#line 1007
    printk("<3>[drm:%s] *ERROR* we currently only support 64x64 cursors\n", "intel_crtc_cursor_set");
#line 1008
    return (-22);
  } else {

  }
#line 1011
  bo = drm_gem_object_lookup(dev, file_priv, handle);
#line 1012
  if (! bo) {
#line 1013
    return (-2);
  } else {

  }
#line 1015
  obj_priv = bo->driver_private;
#line 1017
  if (bo->size < (size_t )((width * height) * (uint32_t )4)) {
#line 1018
    printk("<3>[drm:%s] *ERROR* buffer is to small\n", "intel_crtc_cursor_set");
#line 1019
    drm_gem_object_unreference(bo);
#line 1020
    return (-12);
  } else {

  }
#line 1023
  if (dev_priv->cursor_needs_physical) {
#line 1024
    addr = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
  } else {
#line 1026
    addr = obj_priv->gtt_offset;
  }
#line 1029
  intel_crtc->cursor_addr = addr;
#line 1030
  temp = 0;
#line 1032
  temp = temp | (unsigned int )(pipe << 28);
#line 1033
  temp = temp | (unsigned int )(((1 << 5) | 7) | (1 << 26));
#line 1035
  writel(temp, dev_priv->regs + control);
#line 1036
  writel(addr, dev_priv->regs + base);
#line 1038
  return (0);
}
}
#line 1041 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_crtc_cursor_move(struct drm_crtc *crtc , int x , int y ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  uint32_t temp ;
  uint32_t adder ;

  {
#line 1043
  dev = crtc->dev;
#line 1044
  dev_priv = dev->dev_private;
#line 1045
  __mptr = crtc;
#line 1045
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1046
  pipe = intel_crtc->pipe;
#line 1047
  temp = 0;
#line 1050
  if (x < 0) {
#line 1051
    temp = temp | (unsigned int )(32768 << 0);
#line 1052
    x = - x;
  } else {

  }
#line 1054
  if (y < 0) {
#line 1055
    temp = temp | (unsigned int )(32768 << 16);
#line 1056
    y = - y;
  } else {

  }
#line 1059
  temp = temp | (unsigned int )((x & 2047) << 0);
#line 1060
  temp = temp | (unsigned int )((y & 2047) << 16);
#line 1062
  adder = intel_crtc->cursor_addr;
#line 1063
  writel(temp, dev_priv->regs + (pipe == 0 ? 458888 : 458952));
#line 1064
  writel(adder, dev_priv->regs + (pipe == 0 ? 458884 : 458948));
#line 1066
  return (0);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_crtc_fb_gamma_set(struct drm_crtc *crtc , u16 red , u16 green , u16 blue ,
                             int regno ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;

  {
#line 1073
  __mptr = crtc;
#line 1073
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1075
  intel_crtc->lut_r[regno] = (int )red >> 8;
#line 1076
  intel_crtc->lut_g[regno] = (int )green >> 8;
#line 1077
  intel_crtc->lut_b[regno] = (int )blue >> 8;
#line 1078
  return;
}
}
#line 1080 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_gamma_set(struct drm_crtc *crtc , u16 *red , u16 *green , u16 *blue ,
                                 uint32_t size ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int i ;

  {
#line 1083
  __mptr = crtc;
#line 1083
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1086
  if (size != (uint32_t )256) {
#line 1087
    return;
  } else {

  }
#line 1089
  i = 0;
#line 1089
  while (1) {
#line 1089
    if (i < 256) {

    } else {
#line 1089
      break;
    }
#line 1090
    intel_crtc->lut_r[i] = (int )*(red + i) >> 8;
#line 1091
    intel_crtc->lut_g[i] = (int )*(green + i) >> 8;
#line 1092
    intel_crtc->lut_b[i] = (int )*(blue + i) >> 8;
#line 1089
    i = i + 1;
  }
#line 1095
  intel_crtc_load_lut(crtc);
#line 1096
  return;
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_display_mode load_detect_mode  = 
#line 1113
     {{0, 0}, {0U, 0U}, {'6', '4', '0', 'x', '4', '8', '0', '\000'}, 0, 0, 1 << 4, 31500,
    640, 664, 704, 832, 0, 480, 489, 491, 520, 0, (1 << 1) | (1 << 3), 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.f};
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct drm_crtc *intel_get_load_detect_pipe(struct intel_output *intel_output , struct drm_display_mode *mode ,
                                            int *dpms_mode ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc *possible_crtc ;
  struct drm_crtc *supported_crtc ;
  struct drm_encoder *encoder ;
  struct drm_crtc *crtc ;
  struct drm_device *dev ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  int i ;
  struct drm_crtc  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct drm_crtc  const  *__mptr___2 ;

  {
#line 1124
  supported_crtc = (void *)0;
#line 1125
  encoder = & intel_output->enc;
#line 1126
  crtc = (void *)0;
#line 1127
  dev = encoder->dev;
#line 1128
  encoder_funcs = encoder->helper_private;
#line 1130
  i = -1;
#line 1143
  if (encoder->crtc) {
#line 1144
    crtc = encoder->crtc;
#line 1146
    __mptr = crtc;
#line 1146
    intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1147
    *dpms_mode = intel_crtc->dpms_mode;
#line 1148
    if (intel_crtc->dpms_mode != 0) {
#line 1149
      crtc_funcs = crtc->helper_private;
#line 1150
      (*(crtc_funcs->dpms))(crtc, 0);
#line 1151
      (*(encoder_funcs->dpms))(encoder, 0);
    } else {

    }
#line 1153
    return (crtc);
  } else {

  }
#line 1157
  __mptr___0 = dev->mode_config.crtc_list.next;
#line 1157
  possible_crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 1157
  while (1) {
#line 1157
    __builtin_prefetch(possible_crtc->head.next);
#line 1157
    if ((unsigned long )(& possible_crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 1157
      break;
    }
#line 1158
    i = i + 1;
#line 1159
    if (! (encoder->possible_crtcs & (unsigned int )(1 << i))) {
#line 1160
      goto __Cont;
    } else {

    }
#line 1161
    if (! possible_crtc->enabled) {
#line 1162
      crtc = possible_crtc;
#line 1163
      break;
    } else {

    }
#line 1165
    if (! supported_crtc) {
#line 1166
      supported_crtc = possible_crtc;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 1157
    __mptr___1 = possible_crtc->head.next;
#line 1157
    possible_crtc = (struct drm_crtc *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 1172
  if (! crtc) {
#line 1173
    return ((void *)0);
  } else {

  }
#line 1176
  encoder->crtc = crtc;
#line 1177
  intel_output->load_detect_temp = true;
#line 1179
  __mptr___2 = crtc;
#line 1179
  intel_crtc = (struct intel_crtc *)((char *)__mptr___2 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1180
  *dpms_mode = intel_crtc->dpms_mode;
#line 1182
  if (! crtc->enabled) {
#line 1183
    if (! mode) {
#line 1184
      mode = & load_detect_mode;
    } else {

    }
#line 1185
    drm_crtc_helper_set_mode(crtc, mode, 0, 0, crtc->fb);
  } else {
#line 1187
    if (intel_crtc->dpms_mode != 0) {
#line 1188
      crtc_funcs = crtc->helper_private;
#line 1189
      (*(crtc_funcs->dpms))(crtc, 0);
    } else {

    }
#line 1193
    (*(encoder_funcs->mode_set))(encoder, & crtc->mode, & crtc->mode);
#line 1194
    (*(encoder_funcs->commit))(encoder);
  }
#line 1197
  intel_wait_for_vblank(dev);
#line 1199
  return (crtc);
}
}
#line 1202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_release_load_detect_pipe(struct intel_output *intel_output , int dpms_mode ) 
{ 
  struct drm_encoder *encoder ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 1204
  encoder = & intel_output->enc;
#line 1205
  dev = encoder->dev;
#line 1206
  crtc = encoder->crtc;
#line 1207
  encoder_funcs = encoder->helper_private;
#line 1208
  crtc_funcs = crtc->helper_private;
#line 1210
  if (intel_output->load_detect_temp) {
#line 1211
    encoder->crtc = (void *)0;
#line 1212
    intel_output->load_detect_temp = false;
#line 1213
    crtc->enabled = drm_helper_crtc_in_use(crtc);
#line 1214
    drm_helper_disable_unused_functions(dev);
  } else {

  }
#line 1218
  if (crtc->enabled && dpms_mode != 0) {
#line 1219
    if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 1220
      (*(encoder_funcs->dpms))(encoder, dpms_mode);
    } else {

    }
#line 1221
    (*(crtc_funcs->dpms))(crtc, dpms_mode);
  } else {

  }
#line 1223
  return;
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_crtc_clock_get(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  u32 dpll ;
  unsigned int tmp ;
  u32 fp ;
  intel_clock_t clock ;
  bool is_lvds ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1228
  dev_priv = dev->dev_private;
#line 1229
  __mptr = crtc;
#line 1229
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1230
  pipe = intel_crtc->pipe;
#line 1231
  tmp = readl(dev_priv->regs + (pipe == 0 ? 24596 : 24600));
#line 1231
  dpll = tmp;
#line 1235
  if ((dpll & (unsigned int )(1 << 8)) == 0U) {
#line 1236
    fp = readl(dev_priv->regs + (pipe == 0 ? 24640 : 24648));
  } else {
#line 1238
    fp = readl(dev_priv->regs + (pipe == 0 ? 24644 : 24652));
  }
#line 1240
  clock.m1 = (fp & 16128U) >> 8;
#line 1241
  clock.m2 = (fp & 63U) >> 0;
#line 1242
  clock.n = (fp & 4128768U) >> 16;
#line 1243
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1244
    clock.p1 = ffs((dpll & 16711680U) >> 16);
#line 1247
    switch (dpll & (unsigned int )(3 << 26)) {
    case (unsigned int )(1 << 26): 
#line 1249
    clock.p2 = dpll & (unsigned int )(1 << 24) ? 5 : 10;
#line 1251
    break;
    case (unsigned int )(2 << 26): 
#line 1253
    clock.p2 = dpll & (unsigned int )(1 << 24) ? 7 : 14;
#line 1255
    break;
    default: 
#line 1257
    while (1) {
#line 1257
      if (drm_debug) {
#line 1257
        printk("<7>[drm:%s] Unknown DPLL mode %08x in programmed mode\n", "intel_crtc_clock_get",
               (int )(dpll & (unsigned int )(3 << 26)));
      } else {

      }
#line 1257
      break;
    }
#line 1259
    return (0);
    }
#line 1263
    i9xx_clock(96000, & clock);
  } else {
#line 1265
    if (pipe == 1) {
#line 1265
      tmp___0 = readl(dev_priv->regs + 397696);
#line 1265
      if (tmp___0 & (unsigned int )(1 << 31)) {
#line 1265
        tmp___1 = 1;
      } else {
#line 1265
        tmp___1 = 0;
      }
    } else {
#line 1265
      tmp___1 = 0;
    }
#line 1265
    is_lvds = tmp___1;
#line 1267
    if (is_lvds) {
#line 1268
      clock.p1 = ffs((dpll & 4128768U) >> 16);
#line 1270
      clock.p2 = 14;
#line 1272
      if ((dpll & (unsigned int )(3 << 13)) == (unsigned int )(3 << 13)) {
#line 1275
        i8xx_clock(66000, & clock);
      } else {
#line 1277
        i8xx_clock(48000, & clock);
      }
    } else {
#line 1279
      if (dpll & (unsigned int )(1 << 21)) {
#line 1280
        clock.p1 = 2;
      } else {
#line 1282
        clock.p1 = ((dpll & 2031616U) >> 16) + 2U;
      }
#line 1285
      if (dpll & (unsigned int )(1 << 23)) {
#line 1286
        clock.p2 = 4;
      } else {
#line 1288
        clock.p2 = 2;
      }
#line 1290
      i8xx_clock(48000, & clock);
    }
  }
#line 1299
  return (clock.dot);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct drm_display_mode *intel_crtc_mode_get(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  struct drm_display_mode *mode ;
  int htot ;
  unsigned int tmp ;
  int hsync ;
  unsigned int tmp___0 ;
  int vtot ;
  unsigned int tmp___1 ;
  int vsync ;
  unsigned int tmp___2 ;
  void *tmp___3 ;

  {
#line 1306
  dev_priv = dev->dev_private;
#line 1307
  __mptr = crtc;
#line 1307
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1308
  pipe = intel_crtc->pipe;
#line 1310
  tmp = readl(dev_priv->regs + (pipe == 0 ? 393216 : 397312));
#line 1310
  htot = tmp;
#line 1311
  tmp___0 = readl(dev_priv->regs + (pipe == 0 ? 393224 : 397320));
#line 1311
  hsync = tmp___0;
#line 1312
  tmp___1 = readl(dev_priv->regs + (pipe == 0 ? 393228 : 397324));
#line 1312
  vtot = tmp___1;
#line 1313
  tmp___2 = readl(dev_priv->regs + (pipe == 0 ? 393236 : 397332));
#line 1313
  vsync = tmp___2;
#line 1315
  tmp___3 = kzalloc(sizeof(*mode), (16U | 64U) | 128U);
#line 1315
  mode = tmp___3;
#line 1316
  if (! mode) {
#line 1317
    return ((void *)0);
  } else {

  }
#line 1319
  mode->clock = intel_crtc_clock_get(dev, crtc);
#line 1320
  mode->hdisplay = (htot & 65535) + 1;
#line 1321
  mode->htotal = (((unsigned int )htot & 4294901760U) >> 16) + 1U;
#line 1322
  mode->hsync_start = (hsync & 65535) + 1;
#line 1323
  mode->hsync_end = (((unsigned int )hsync & 4294901760U) >> 16) + 1U;
#line 1324
  mode->vdisplay = (vtot & 65535) + 1;
#line 1325
  mode->vtotal = (((unsigned int )vtot & 4294901760U) >> 16) + 1U;
#line 1326
  mode->vsync_start = (vsync & 65535) + 1;
#line 1327
  mode->vsync_end = (((unsigned int )vsync & 4294901760U) >> 16) + 1U;
#line 1329
  drm_mode_set_name(mode);
#line 1330
  drm_mode_set_crtcinfo(mode, 0);
#line 1332
  return (mode);
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_destroy(struct drm_crtc *crtc ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;

  {
#line 1337
  __mptr = crtc;
#line 1337
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1339
  drm_crtc_cleanup(crtc);
#line 1340
  kfree(intel_crtc);
#line 1341
  return;
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_crtc_helper_funcs  const  intel_helper_funcs  =    {& intel_crtc_dpms, & intel_crtc_prepare, & intel_crtc_commit, & intel_crtc_mode_fixup,
    & intel_crtc_mode_set, & intel_pipe_set_base};
#line 1352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_crtc_funcs  const  intel_crtc_funcs  =    {0, 0, & intel_crtc_cursor_set, & intel_crtc_cursor_move, & intel_crtc_gamma_set,
    & intel_crtc_destroy, & drm_crtc_helper_set_config};
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_crtc_init(struct drm_device *dev , int pipe ) 
{ 
  struct intel_crtc *intel_crtc ;
  int i ;
  void *tmp ;

  {
#line 1366
  tmp = kzalloc(sizeof(struct intel_crtc ) + 4UL * sizeof(struct drm_connector *),
                (16U | 64U) | 128U);
#line 1366
  intel_crtc = tmp;
#line 1367
  if ((unsigned long )intel_crtc == (unsigned long )((void *)0)) {
#line 1368
    return;
  } else {

  }
#line 1370
  drm_crtc_init(dev, & intel_crtc->base, & intel_crtc_funcs);
#line 1372
  drm_mode_crtc_set_gamma_size(& intel_crtc->base, 256);
#line 1373
  intel_crtc->pipe = pipe;
#line 1374
  i = 0;
#line 1374
  while (1) {
#line 1374
    if (i < 256) {

    } else {
#line 1374
      break;
    }
#line 1375
    intel_crtc->lut_r[i] = i;
#line 1376
    intel_crtc->lut_g[i] = i;
#line 1377
    intel_crtc->lut_b[i] = i;
#line 1374
    i = i + 1;
  }
#line 1380
  intel_crtc->cursor_addr = 0;
#line 1381
  intel_crtc->dpms_mode = 3;
#line 1382
  drm_crtc_helper_add(& intel_crtc->base, & intel_helper_funcs);
#line 1384
  intel_crtc->mode_set.crtc = & intel_crtc->base;
#line 1385
  intel_crtc->mode_set.connectors = (struct drm_connector **)(intel_crtc + 1);
#line 1386
  intel_crtc->mode_set.num_connectors = 0;
#line 1393
  return;
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct drm_crtc *intel_get_crtc_from_pipe(struct drm_device *dev , int pipe ) 
{ 
  struct drm_crtc *crtc ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___1 ;

  {
#line 1397
  crtc = (void *)0;
#line 1399
  __mptr = dev->mode_config.crtc_list.next;
#line 1399
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 1399
  while (1) {
#line 1399
    __builtin_prefetch(crtc->head.next);
#line 1399
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 1399
      break;
    }
#line 1400
    __mptr___1 = crtc;
#line 1400
    intel_crtc = (struct intel_crtc *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1401
    if (intel_crtc->pipe == pipe) {
#line 1402
      break;
    } else {

    }
#line 1399
    __mptr___0 = crtc->head.next;
#line 1399
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 1404
  return (crtc);
}
}
#line 1407 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_connector_clones(struct drm_device *dev , int type_mask ) 
{ 
  int index_mask ;
  struct drm_connector *connector ;
  int entry ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___1 ;

  {
#line 1409
  index_mask = 0;
#line 1411
  entry = 0;
#line 1413
  __mptr = dev->mode_config.connector_list.next;
#line 1413
  connector = (struct drm_connector *)((char *)__mptr - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 1413
  while (1) {
#line 1413
    __builtin_prefetch(connector->head.next);
#line 1413
    if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {

    } else {
#line 1413
      break;
    }
#line 1414
    __mptr___1 = connector;
#line 1414
    intel_output = (struct intel_output *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1415
    if (type_mask & (1 << intel_output->type)) {
#line 1416
      index_mask = index_mask | (1 << entry);
    } else {

    }
#line 1417
    entry = entry + 1;
#line 1413
    __mptr___0 = connector->head.next;
#line 1413
    connector = (struct drm_connector *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 1419
  return (index_mask);
}
}
#line 1423 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_setup_outputs(struct drm_device *dev ) 
{ 
  struct drm_connector *connector ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___1 ;
  struct drm_encoder *encoder ;
  int crtc_mask ;
  int clone_mask ;
  int tmp ;

  {
#line 1427
  intel_crt_init(dev);
#line 1430
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && ! (dev->pci_device == 13687)) {
#line 1431
    intel_lvds_init(dev);
  } else {

  }
#line 1433
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1434
    intel_sdvo_init(dev, 397632);
#line 1435
    intel_sdvo_init(dev, 397664);
  } else {
#line 1437
    intel_dvo_init(dev);
  }
#line 1439
  if (((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && ! (dev->pci_device == 9602 || dev->pci_device == 9610)) {
#line 1440
    intel_tv_init(dev);
  } else {

  }
#line 1442
  __mptr = dev->mode_config.connector_list.next;
#line 1442
  connector = (struct drm_connector *)((char *)__mptr - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 1442
  while (1) {
#line 1442
    __builtin_prefetch(connector->head.next);
#line 1442
    if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {

    } else {
#line 1442
      break;
    }
#line 1443
    __mptr___1 = connector;
#line 1443
    intel_output = (struct intel_output *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1444
    encoder = & intel_output->enc;
#line 1445
    crtc_mask = 0;
#line 1445
    clone_mask = 0;
#line 1448
    switch (intel_output->type) {
    case 3: 
    case 2: 
#line 1451
    crtc_mask = (1 << 0) | (1 << 1);
#line 1453
    clone_mask = ((1 << 1) | (1 << 2)) | (1 << 3);
#line 1456
    break;
    case 1: 
#line 1458
    crtc_mask = (1 << 0) | (1 << 1);
#line 1460
    clone_mask = ((1 << 1) | (1 << 2)) | (1 << 3);
#line 1463
    break;
    case 4: 
#line 1465
    crtc_mask = 1 << 1;
#line 1466
    clone_mask = 1 << 4;
#line 1467
    break;
    case 5: 
#line 1469
    crtc_mask = (1 << 0) | (1 << 1);
#line 1471
    clone_mask = 1 << 5;
#line 1472
    break;
    }
#line 1474
    encoder->possible_crtcs = crtc_mask;
#line 1475
    tmp = intel_connector_clones(dev, clone_mask);
#line 1475
    encoder->possible_clones = tmp;
#line 1442
    __mptr___0 = connector->head.next;
#line 1442
    connector = (struct drm_connector *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 1477
  return;
}
}
#line 1479 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static void intel_user_framebuffer_destroy(struct drm_framebuffer *fb ) 
{ 
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer  const  *__mptr ;
  struct drm_device *dev ;

  {
#line 1481
  __mptr = fb;
#line 1481
  intel_fb = (struct intel_framebuffer *)((char *)__mptr - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 1482
  dev = fb->dev;
#line 1484
  if (fb->fbdev) {
#line 1485
    intelfb_remove(dev, fb);
  } else {

  }
#line 1487
  drm_framebuffer_cleanup(fb);
#line 1488
  mutex_lock(& dev->struct_mutex);
#line 1489
  drm_gem_object_unreference(intel_fb->obj);
#line 1490
  mutex_unlock(& dev->struct_mutex);
#line 1492
  kfree(intel_fb);
#line 1493
  return;
}
}
#line 1495 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static int intel_user_framebuffer_create_handle(struct drm_framebuffer *fb , struct drm_file *file_priv ,
                                                unsigned int *handle ) 
{ 
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer  const  *__mptr ;
  struct drm_gem_object *object ;
  int tmp ;

  {
#line 1499
  __mptr = fb;
#line 1499
  intel_fb = (struct intel_framebuffer *)((char *)__mptr - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 1500
  object = intel_fb->obj;
#line 1502
  tmp = drm_gem_handle_create(file_priv, object, handle);
#line 1502
  return (tmp);
}
}
#line 1505 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_framebuffer_funcs  const  intel_fb_funcs  =    {& intel_user_framebuffer_destroy, & intel_user_framebuffer_create_handle};
#line 1510 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
int intel_framebuffer_create(struct drm_device *dev , struct drm_mode_fb_cmd *mode_cmd ,
                             struct drm_framebuffer **fb , struct drm_gem_object *obj ) 
{ 
  struct intel_framebuffer *intel_fb ;
  int ret ;
  void *tmp ;

  {
#line 1518
  tmp = kzalloc(sizeof(*intel_fb), (16U | 64U) | 128U);
#line 1518
  intel_fb = tmp;
#line 1519
  if (! intel_fb) {
#line 1520
    return (-12);
  } else {

  }
#line 1522
  ret = drm_framebuffer_init(dev, & intel_fb->base, & intel_fb_funcs);
#line 1523
  if (ret) {
#line 1524
    printk("<3>[drm:%s] *ERROR* framebuffer init failed %d\n", "intel_framebuffer_create",
           ret);
#line 1525
    return (ret);
  } else {

  }
#line 1528
  drm_helper_mode_fill_fb_struct(& intel_fb->base, mode_cmd);
#line 1530
  intel_fb->obj = obj;
#line 1532
  *fb = & intel_fb->base;
#line 1534
  return (0);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_framebuffer *intel_user_framebuffer_create(struct drm_device *dev ,
                                                             struct drm_file *filp ,
                                                             struct drm_mode_fb_cmd *mode_cmd ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_framebuffer *fb ;
  int ret ;

  {
#line 1547
  obj = drm_gem_object_lookup(dev, filp, mode_cmd->handle);
#line 1548
  if (! obj) {
#line 1549
    return ((void *)0);
  } else {

  }
#line 1551
  ret = intel_framebuffer_create(dev, mode_cmd, & fb, obj);
#line 1552
  if (ret) {
#line 1553
    drm_gem_object_unreference(obj);
#line 1554
    return ((void *)0);
  } else {

  }
#line 1557
  return (fb);
}
}
#line 1560 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
static struct drm_mode_config_funcs  const  intel_mode_funcs  =    {& intel_user_framebuffer_create, & intelfb_probe};
#line 1565 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_modeset_init(struct drm_device *dev ) 
{ 
  int num_pipe ;
  int i ;

  {
#line 1570
  drm_mode_config_init(dev);
#line 1572
  dev->mode_config.min_width = 0;
#line 1573
  dev->mode_config.min_height = 0;
#line 1575
  dev->mode_config.funcs = (void *)(& intel_mode_funcs);
#line 1577
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1578
    dev->mode_config.max_width = 8192;
#line 1579
    dev->mode_config.max_height = 8192;
  } else {
#line 1581
    dev->mode_config.max_width = 2048;
#line 1582
    dev->mode_config.max_height = 2048;
  }
#line 1586
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1587
    dev->mode_config.fb_base = (dev->pdev)->resource[2].start;
  } else {
#line 1589
    dev->mode_config.fb_base = (dev->pdev)->resource[0].start;
  }
#line 1591
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) || ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1592
    num_pipe = 2;
  } else {
#line 1594
    num_pipe = 1;
  }
#line 1595
  while (1) {
#line 1595
    if (drm_debug) {
#line 1595
      printk("<7>[drm:%s] %d display pipe%s available.\n", "intel_modeset_init", num_pipe,
             num_pipe > 1 ? "s" : "");
    } else {

    }
#line 1595
    break;
  }
#line 1598
  i = 0;
#line 1598
  while (1) {
#line 1598
    if (i < num_pipe) {

    } else {
#line 1598
      break;
    }
#line 1599
    intel_crtc_init(dev, i);
#line 1598
    i = i + 1;
  }
#line 1602
  intel_setup_outputs(dev);
#line 1603
  return;
}
}
#line 1605 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void intel_modeset_cleanup(struct drm_device *dev ) 
{ 


  {
#line 1607
  drm_mode_config_cleanup(dev);
#line 1608
  return;
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
struct drm_encoder *intel_best_encoder(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 1616
  __mptr = connector;
#line 1616
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1618
  return (& intel_output->enc);
}
}
#line 1658 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_display.c"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_crtc *var_group1 ;
  int var_intel_crtc_dpms_9_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_crtc_mode_fixup_14_p2 ;
  struct drm_display_mode *var_intel_crtc_mode_set_17_p2 ;
  int var_intel_crtc_mode_set_17_p3 ;
  int var_intel_crtc_mode_set_17_p4 ;
  struct drm_framebuffer *var_intel_crtc_mode_set_17_p5 ;
  int var_intel_pipe_set_base_8_p1 ;
  int var_intel_pipe_set_base_8_p2 ;
  struct drm_framebuffer *var_intel_pipe_set_base_8_p3 ;
  struct drm_file *var_group3 ;
  uint32_t var_intel_crtc_cursor_set_19_p2 ;
  uint32_t var_intel_crtc_cursor_set_19_p3 ;
  uint32_t var_intel_crtc_cursor_set_19_p4 ;
  int var_intel_crtc_cursor_move_20_p1 ;
  int var_intel_crtc_cursor_move_20_p2 ;
  u16 *var_intel_crtc_gamma_set_22_p1 ;
  u16 *var_intel_crtc_gamma_set_22_p2 ;
  u16 *var_intel_crtc_gamma_set_22_p3 ;
  uint32_t var_intel_crtc_gamma_set_22_p4 ;
  struct drm_framebuffer *var_group4 ;
  unsigned int *var_intel_user_framebuffer_create_handle_33_p2 ;
  struct drm_device *var_group5 ;
  struct drm_mode_fb_cmd *var_intel_user_framebuffer_create_35_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 2456
  LDV_IN_INTERRUPT = 1;
#line 2465
  ldv_initialize();
#line 2475
  while (1) {
#line 2475
    tmp___0 = nondet_int();
#line 2475
    if (tmp___0) {

    } else {
#line 2475
      break;
    }
#line 2478
    tmp = nondet_int();
#line 2478
    switch (tmp) {
    case 0: 
#line 2542
    ldv_handler_precall();
#line 2543
    intel_crtc_dpms(var_group1, var_intel_crtc_dpms_9_p1);
#line 2550
    break;
    case 1: 
#line 2613
    ldv_handler_precall();
#line 2614
    intel_crtc_mode_fixup(var_group1, var_group2, var_intel_crtc_mode_fixup_14_p2);
#line 2621
    break;
    case 2: 
#line 2684
    ldv_handler_precall();
#line 2685
    intel_crtc_mode_set(var_group1, var_group2, var_intel_crtc_mode_set_17_p2, var_intel_crtc_mode_set_17_p3,
                        var_intel_crtc_mode_set_17_p4, var_intel_crtc_mode_set_17_p5);
#line 2692
    break;
    case 3: 
#line 2755
    ldv_handler_precall();
#line 2756
    intel_pipe_set_base(var_group1, var_intel_pipe_set_base_8_p1, var_intel_pipe_set_base_8_p2,
                        var_intel_pipe_set_base_8_p3);
#line 2763
    break;
    case 4: 
#line 2826
    ldv_handler_precall();
#line 2827
    intel_crtc_prepare(var_group1);
#line 2834
    break;
    case 5: 
#line 2897
    ldv_handler_precall();
#line 2898
    intel_crtc_commit(var_group1);
#line 2905
    break;
    case 6: 
#line 2968
    ldv_handler_precall();
#line 2969
    intel_crtc_cursor_set(var_group1, var_group3, var_intel_crtc_cursor_set_19_p2,
                          var_intel_crtc_cursor_set_19_p3, var_intel_crtc_cursor_set_19_p4);
#line 2976
    break;
    case 7: 
#line 3039
    ldv_handler_precall();
#line 3040
    intel_crtc_cursor_move(var_group1, var_intel_crtc_cursor_move_20_p1, var_intel_crtc_cursor_move_20_p2);
#line 3047
    break;
    case 8: 
#line 3110
    ldv_handler_precall();
#line 3111
    intel_crtc_gamma_set(var_group1, var_intel_crtc_gamma_set_22_p1, var_intel_crtc_gamma_set_22_p2,
                         var_intel_crtc_gamma_set_22_p3, var_intel_crtc_gamma_set_22_p4);
#line 3118
    break;
    case 9: 
#line 3181
    ldv_handler_precall();
#line 3182
    intel_crtc_destroy(var_group1);
#line 3189
    break;
    case 10: 
#line 3252
    ldv_handler_precall();
#line 3253
    intel_user_framebuffer_destroy(var_group4);
#line 3260
    break;
    case 11: 
#line 3323
    ldv_handler_precall();
#line 3324
    intel_user_framebuffer_create_handle(var_group4, var_group3, var_intel_user_framebuffer_create_handle_33_p2);
#line 3331
    break;
    case 12: 
#line 3394
    ldv_handler_precall();
#line 3395
    intel_user_framebuffer_create(var_group5, var_group3, var_intel_user_framebuffer_create_35_p2);
#line 3402
    break;
    default: 
#line 3403
    break;
    }
  }
#line 3412
  ldv_check_final_state();
#line 3415
  return;
}
}
#line 288 "include/linux/jiffies.h"
extern unsigned long msecs_to_jiffies(unsigned int const   m ) ;
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
#line 428
  return (dev->bus_id);
}
}
#line 536
extern char const   *dev_driver_string(struct device  const  *dev ) ;
#line 591 "include/drm/drm_crtc.h"
extern void drm_connector_init(struct drm_device *dev , struct drm_connector *connector ,
                               struct drm_connector_funcs  const  *funcs , int connector_type ) ;
#line 596
extern void drm_connector_cleanup(struct drm_connector *connector ) ;
#line 598
extern void drm_encoder_init(struct drm_device *dev , struct drm_encoder *encoder ,
                             struct drm_encoder_funcs  const  *funcs , int encoder_type ) ;
#line 603
extern void drm_encoder_cleanup(struct drm_encoder *encoder ) ;
#line 683
extern int drm_mode_connector_attach_encoder(struct drm_connector *connector , struct drm_encoder *encoder ) ;
#line 1306 "include/drm/drmP.h"
extern int drm_sysfs_connector_add(struct drm_connector *connector ) ;
#line 1307
extern void drm_sysfs_connector_remove(struct drm_connector *connector ) ;
#line 91 "include/drm/drm_crtc_helper.h"
extern void drm_helper_probe_single_connector_modes(struct drm_connector *connector ,
                                                    uint32_t maxX , uint32_t maxY ) ;
#line 111 "include/drm/drm_crtc_helper.h"
__inline static void drm_encoder_helper_add(struct drm_encoder *encoder , struct drm_encoder_helper_funcs  const  *funcs ) 
{ 


  {
#line 114
  encoder->helper_private = (void *)funcs;
#line 115
  return;
}
}
#line 117 "include/drm/drm_crtc_helper.h"
__inline static void drm_connector_helper_add(struct drm_connector *connector , struct drm_connector_helper_funcs  const  *funcs ) 
{ 


  {
#line 120
  connector->helper_private = (void *)funcs;
#line 121
  return;
}
}
#line 104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_i2c_chan *intel_i2c_create(struct drm_device *dev , u32 const   reg ,
                                        char const   *name ) ;
#line 106
void intel_i2c_destroy(struct intel_i2c_chan *chan ) ;
#line 107
int intel_ddc_get_modes(struct intel_output *intel_output ) ;
#line 108
bool intel_ddc_probe(struct intel_output *intel_output ) ;
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static void intel_crt_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 temp ;

  {
#line 39
  dev = encoder->dev;
#line 40
  dev_priv = dev->dev_private;
#line 43
  temp = readl(dev_priv->regs + 397568);
#line 44
  temp = temp & (unsigned int )(~ ((1 << 10) | (1 << 11)));
#line 45
  temp = temp & (unsigned int )(~ (1 << 31));
#line 47
  switch (mode) {
  case 0: 
#line 49
  temp = temp | (unsigned int )(1 << 31);
#line 50
  break;
  case 1: 
#line 52
  temp = temp | (unsigned int )((1 << 31) | (1 << 10));
#line 53
  break;
  case 2: 
#line 55
  temp = temp | (unsigned int )((1 << 31) | (1 << 11));
#line 56
  break;
  case 3: 
#line 58
  temp = temp | (unsigned int )((1 << 10) | (1 << 11));
#line 59
  break;
  }
#line 62
  writel(temp, dev_priv->regs + 397568);
#line 63
  return;
}
}
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static int intel_crt_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 


  {
#line 68
  if (mode->flags & (unsigned int )(1 << 5)) {
#line 69
    return (MODE_NO_DBLESCAN);
  } else {

  }
#line 71
  if (mode->clock > 400000 || mode->clock < 25000) {
#line 72
    return (MODE_CLOCK_RANGE);
  } else {

  }
#line 74
  return (MODE_OK);
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static bool intel_crt_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                 struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 81
  return (true);
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static void intel_crt_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                               struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_i915_private *dev_priv ;
  int dpll_md_reg ;
  u32 adpa ;
  u32 dpll_md ;

  {
#line 89
  dev = encoder->dev;
#line 90
  crtc = encoder->crtc;
#line 91
  __mptr = crtc;
#line 91
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 92
  dev_priv = dev->dev_private;
#line 96
  if (intel_crtc->pipe == 0) {
#line 97
    dpll_md_reg = 24604;
  } else {
#line 99
    dpll_md_reg = 24608;
  }
#line 105
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 106
    dpll_md = readl(dev_priv->regs + dpll_md_reg);
#line 107
    writel(dpll_md & (unsigned int )(~ 16128), dev_priv->regs + dpll_md_reg);
  } else {

  }
#line 111
  adpa = 0;
#line 112
  if (adjusted_mode->flags & (unsigned int )(1 << 0)) {
#line 113
    adpa = adpa | (unsigned int )(1 << 3);
  } else {

  }
#line 114
  if (adjusted_mode->flags & (unsigned int )(1 << 2)) {
#line 115
    adpa = adpa | (unsigned int )(1 << 4);
  } else {

  }
#line 117
  if (intel_crtc->pipe == 0) {
#line 118
    adpa = adpa | 0U;
  } else {
#line 120
    adpa = adpa | (unsigned int )(1 << 30);
  }
#line 122
  writel(adpa, dev_priv->regs + 397568);
#line 123
  return;
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static bool intel_crt_detect_hotplug(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 temp ;
  unsigned long timeout ;
  unsigned long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 135
  dev = connector->dev;
#line 136
  dev_priv = dev->dev_private;
#line 139
  tmp = msecs_to_jiffies(1000);
#line 139
  timeout = jiffies + (unsigned long volatile   )tmp;
#line 141
  temp = readl(dev_priv->regs + 397584);
#line 143
  writel((temp | (unsigned int )(1 << 3)) | (unsigned int )(1 << 5), dev_priv->regs + 397584);
#line 150
  while (1) {
#line 147
    tmp___0 = readl(dev_priv->regs + 397584);
#line 147
    if (tmp___0 & (unsigned int )(1 << 3)) {

    } else {
#line 148
      break;
    }
#line 149
    msleep(1);
#line 150
    if ((long )jiffies - (long )timeout < 0L) {

    } else {
#line 146
      break;
    }
  }
#line 152
  tmp___1 = readl(dev_priv->regs + 397588);
#line 152
  if ((tmp___1 & (unsigned int )(3 << 8)) == (unsigned int )(3 << 8)) {
#line 154
    return (true);
  } else {

  }
#line 156
  return (false);
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static bool intel_crt_detect_ddc(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  bool tmp ;

  {
#line 161
  __mptr = connector;
#line 161
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 164
  if (intel_output->type != 1) {
#line 165
    return (false);
  } else {

  }
#line 167
  tmp = intel_ddc_probe(intel_output);
#line 167
  return (tmp);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static enum drm_connector_status intel_crt_detect(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 172
  dev = connector->dev;
#line 174
  if ((((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && ! (dev->pci_device == 9602 || dev->pci_device == 9610)) && ! (dev->pci_device == 9618)) {
#line 175
    tmp = intel_crt_detect_hotplug(connector);
#line 175
    if (tmp) {
#line 176
      return (connector_status_connected);
    } else {
#line 178
      return (connector_status_disconnected);
    }
  } else {

  }
#line 181
  tmp___0 = intel_crt_detect_ddc(connector);
#line 181
  if (tmp___0) {
#line 182
    return (connector_status_connected);
  } else {

  }
#line 185
  return (connector_status_unknown);
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static void intel_crt_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 190
  __mptr = connector;
#line 190
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 192
  intel_i2c_destroy(intel_output->ddc_bus);
#line 193
  drm_sysfs_connector_remove(connector);
#line 194
  drm_connector_cleanup(connector);
#line 195
  kfree(connector);
#line 196
  return;
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static int intel_crt_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  int tmp ;

  {
#line 200
  __mptr = connector;
#line 200
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 201
  tmp = intel_ddc_get_modes(intel_output);
#line 201
  return (tmp);
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static int intel_crt_set_property(struct drm_connector *connector , struct drm_property *property ,
                                  uint64_t value ) 
{ 
  struct drm_device *dev ;

  {
#line 208
  dev = connector->dev;
#line 210
  if ((unsigned long )property == (unsigned long )dev->mode_config.dpms_property && connector->encoder) {
#line 211
    intel_crt_dpms(connector->encoder, (uint32_t )(value & 15ULL));
  } else {

  }
#line 213
  return (0);
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static struct drm_encoder_helper_funcs  const  intel_crt_helper_funcs  = 
#line 220
     {& intel_crt_dpms, 0, 0, & intel_crt_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_crt_mode_set, 0};
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static struct drm_connector_funcs  const  intel_crt_connector_funcs  =    {0, 0, 0, & intel_crt_detect, & drm_helper_probe_single_connector_modes, & intel_crt_set_property,
    & intel_crt_destroy};
#line 235 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static struct drm_connector_helper_funcs  const  intel_crt_connector_helper_funcs  =    {& intel_crt_get_modes,
    & intel_crt_mode_valid, & intel_best_encoder};
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static void intel_crt_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 243
  drm_encoder_cleanup(encoder);
#line 244
  return;
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
static struct drm_encoder_funcs  const  intel_crt_enc_funcs  =    {& intel_crt_enc_destroy};
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
void intel_crt_init(struct drm_device *dev ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 255
  tmp = kzalloc(sizeof(struct intel_output ), (16U | 64U) | 128U);
#line 255
  intel_output = tmp;
#line 256
  if (! intel_output) {
#line 257
    return;
  } else {

  }
#line 259
  connector = & intel_output->base;
#line 260
  drm_connector_init(dev, & intel_output->base, & intel_crt_connector_funcs, 1);
#line 263
  drm_encoder_init(dev, & intel_output->enc, & intel_crt_enc_funcs, 1);
#line 266
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 270
  intel_output->ddc_bus = intel_i2c_create(dev, 20496, "CRTDDC_A");
#line 271
  if (! intel_output->ddc_bus) {
#line 272
    tmp___0 = dev_name(& (dev->pdev)->dev);
#line 272
    tmp___1 = dev_driver_string(& (dev->pdev)->dev);
#line 272
    printk("<3>%s %s: DDC bus registration failed.\n", tmp___1, tmp___0);
#line 274
    return;
  } else {

  }
#line 277
  intel_output->type = 1;
#line 278
  connector->interlace_allowed = 0;
#line 279
  connector->doublescan_allowed = 0;
#line 281
  drm_encoder_helper_add(& intel_output->enc, & intel_crt_helper_funcs);
#line 282
  drm_connector_helper_add(connector, & intel_crt_connector_helper_funcs);
#line 284
  drm_sysfs_connector_add(connector);
#line 285
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_crt.c"
void ldv_main10_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_crt_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_crt_mode_fixup_2_p2 ;
  struct drm_display_mode *var_intel_crt_mode_set_3_p2 ;
  struct drm_connector *var_group3 ;
  struct drm_property *var_group4 ;
  uint64_t var_intel_crt_set_property_9_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 378
  LDV_IN_INTERRUPT = 1;
#line 387
  ldv_initialize();
#line 397
  while (1) {
#line 397
    tmp___0 = nondet_int();
#line 397
    if (tmp___0) {

    } else {
#line 397
      break;
    }
#line 400
    tmp = nondet_int();
#line 400
    switch (tmp) {
    case 0: 
#line 410
    ldv_handler_precall();
#line 411
    intel_crt_dpms(var_group1, var_intel_crt_dpms_0_p1);
#line 418
    break;
    case 1: 
#line 427
    ldv_handler_precall();
#line 428
    intel_crt_mode_fixup(var_group1, var_group2, var_intel_crt_mode_fixup_2_p2);
#line 435
    break;
    case 2: 
#line 444
    ldv_handler_precall();
#line 445
    intel_crt_mode_set(var_group1, var_group2, var_intel_crt_mode_set_3_p2);
#line 452
    break;
    case 3: 
#line 461
    ldv_handler_precall();
#line 462
    intel_crt_detect(var_group3);
#line 469
    break;
    case 4: 
#line 478
    ldv_handler_precall();
#line 479
    intel_crt_destroy(var_group3);
#line 486
    break;
    case 5: 
#line 495
    ldv_handler_precall();
#line 496
    intel_crt_set_property(var_group3, var_group4, var_intel_crt_set_property_9_p2);
#line 503
    break;
    case 6: 
#line 512
    ldv_handler_precall();
#line 513
    intel_crt_mode_valid(var_group3, var_group2);
#line 520
    break;
    case 7: 
#line 529
    ldv_handler_precall();
#line 530
    intel_crt_get_modes(var_group3);
#line 537
    break;
    case 8: 
#line 546
    ldv_handler_precall();
#line 547
    intel_crt_enc_destroy(var_group1);
#line 554
    break;
    default: 
#line 555
    break;
    }
  }
#line 564
  ldv_check_final_state();
#line 567
  return;
}
}
#line 617 "include/drm/drm_crtc.h"
extern void drm_mode_probed_add(struct drm_connector *connector , struct drm_display_mode *mode ) ;
#line 619
extern struct drm_display_mode *drm_mode_duplicate(struct drm_device *dev , struct drm_display_mode *mode ) ;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_set_backlight(struct drm_device *dev , int level ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;

  {
#line 47
  dev_priv = dev->dev_private;
#line 50
  tmp = readl(dev_priv->regs + 397908);
#line 50
  blc_pwm_ctl = tmp & (unsigned int )(~ 65535);
#line 51
  writel(blc_pwm_ctl | (unsigned int )(level << 0), dev_priv->regs + 397908);
#line 53
  return;
}
}
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static u32 intel_lvds_get_max_backlight(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;

  {
#line 60
  dev_priv = dev->dev_private;
#line 62
  tmp = readl(dev_priv->regs + 397908);
#line 62
  return (((tmp & (unsigned int )(32767 << 17)) >> 17) * 2U);
}
}
#line 69 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_set_power(struct drm_device *dev , bool on ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 pp_status ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 71
  dev_priv = dev->dev_private;
#line 74
  if (on) {
#line 75
    tmp = readl(dev_priv->regs + 397828);
#line 75
    writel(tmp | (unsigned int )(1 << 0), dev_priv->regs + 397828);
#line 77
    while (1) {
#line 78
      pp_status = readl(dev_priv->regs + 397824);
#line 77
      if ((pp_status & (unsigned int )(1 << 31)) == 0U) {

      } else {
#line 77
        break;
      }
    }
#line 81
    intel_lvds_set_backlight(dev, dev_priv->backlight_duty_cycle);
  } else {
#line 83
    intel_lvds_set_backlight(dev, 0);
#line 85
    tmp___0 = readl(dev_priv->regs + 397828);
#line 85
    writel(tmp___0 & (unsigned int )(~ (1 << 0)), dev_priv->regs + 397828);
#line 87
    while (1) {
#line 88
      pp_status = readl(dev_priv->regs + 397824);
#line 87
      if (pp_status & (unsigned int )(1 << 31)) {

      } else {
#line 87
        break;
      }
    }
  }
#line 91
  return;
}
}
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;

  {
#line 95
  dev = encoder->dev;
#line 97
  if (mode == 0) {
#line 98
    intel_lvds_set_power(dev, true);
  } else {
#line 100
    intel_lvds_set_power(dev, false);
  }
#line 103
  return;
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 tmp ;

  {
#line 107
  dev = connector->dev;
#line 108
  dev_priv = dev->dev_private;
#line 110
  dev_priv->savePP_ON = readl(dev_priv->regs + 397832);
#line 111
  dev_priv->savePP_OFF = readl(dev_priv->regs + 397836);
#line 112
  dev_priv->savePP_CONTROL = readl(dev_priv->regs + 397828);
#line 113
  dev_priv->savePP_DIVISOR = readl(dev_priv->regs + 397840);
#line 114
  dev_priv->saveBLC_PWM_CTL = readl(dev_priv->regs + 397908);
#line 115
  dev_priv->backlight_duty_cycle = dev_priv->saveBLC_PWM_CTL & 65535U;
#line 121
  if (dev_priv->backlight_duty_cycle == 0) {
#line 122
    tmp = intel_lvds_get_max_backlight(dev);
#line 122
    dev_priv->backlight_duty_cycle = tmp;
  } else {

  }
#line 124
  return;
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;

  {
#line 128
  dev = connector->dev;
#line 129
  dev_priv = dev->dev_private;
#line 131
  writel(dev_priv->saveBLC_PWM_CTL, dev_priv->regs + 397908);
#line 132
  writel(dev_priv->savePP_ON, dev_priv->regs + 397832);
#line 133
  writel(dev_priv->savePP_OFF, dev_priv->regs + 397836);
#line 134
  writel(dev_priv->savePP_DIVISOR, dev_priv->regs + 397840);
#line 135
  writel(dev_priv->savePP_CONTROL, dev_priv->regs + 397828);
#line 136
  if (dev_priv->savePP_CONTROL & (unsigned int )(1 << 0)) {
#line 137
    intel_lvds_set_power(dev, true);
  } else {
#line 139
    intel_lvds_set_power(dev, false);
  }
#line 140
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static int intel_lvds_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_display_mode *fixed_mode ;

  {
#line 145
  dev = connector->dev;
#line 146
  dev_priv = dev->dev_private;
#line 147
  fixed_mode = dev_priv->panel_fixed_mode;
#line 149
  if (fixed_mode) {
#line 150
    if (mode->hdisplay > fixed_mode->hdisplay) {
#line 151
      return (MODE_PANEL);
    } else {

    }
#line 152
    if (mode->vdisplay > fixed_mode->vdisplay) {
#line 153
      return (MODE_PANEL);
    } else {

    }
  } else {

  }
#line 156
  return (MODE_OK);
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static bool intel_lvds_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_encoder *tmp_encoder ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 163
  dev = encoder->dev;
#line 164
  dev_priv = dev->dev_private;
#line 165
  __mptr = encoder->crtc;
#line 165
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 169
  if (! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && intel_crtc->pipe == 0) {
#line 170
    printk("<3>Can\'t support LVDS on pipe A\n");
#line 171
    return (false);
  } else {

  }
#line 175
  __mptr___0 = dev->mode_config.encoder_list.next;
#line 175
  tmp_encoder = (struct drm_encoder *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_encoder *)0)->head));
#line 175
  while (1) {
#line 175
    __builtin_prefetch(tmp_encoder->head.next);
#line 175
    if ((unsigned long )(& tmp_encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {

    } else {
#line 175
      break;
    }
#line 176
    if ((unsigned long )tmp_encoder != (unsigned long )encoder && (unsigned long )tmp_encoder->crtc == (unsigned long )encoder->crtc) {
#line 177
      printk("<3>Can\'t enable LVDS and another encoder on the same pipe\n");
#line 179
      return (false);
    } else {

    }
#line 175
    __mptr___1 = tmp_encoder->head.next;
#line 175
    tmp_encoder = (struct drm_encoder *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_encoder *)0)->head));
  }
#line 189
  if ((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((void *)0)) {
#line 190
    adjusted_mode->hdisplay = (dev_priv->panel_fixed_mode)->hdisplay;
#line 191
    adjusted_mode->hsync_start = (dev_priv->panel_fixed_mode)->hsync_start;
#line 193
    adjusted_mode->hsync_end = (dev_priv->panel_fixed_mode)->hsync_end;
#line 195
    adjusted_mode->htotal = (dev_priv->panel_fixed_mode)->htotal;
#line 196
    adjusted_mode->vdisplay = (dev_priv->panel_fixed_mode)->vdisplay;
#line 197
    adjusted_mode->vsync_start = (dev_priv->panel_fixed_mode)->vsync_start;
#line 199
    adjusted_mode->vsync_end = (dev_priv->panel_fixed_mode)->vsync_end;
#line 201
    adjusted_mode->vtotal = (dev_priv->panel_fixed_mode)->vtotal;
#line 202
    adjusted_mode->clock = (dev_priv->panel_fixed_mode)->clock;
#line 203
    drm_mode_set_crtcinfo(adjusted_mode, 1);
  } else {

  }
#line 212
  return (true);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_prepare(struct drm_encoder *encoder ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;

  {
#line 217
  dev = encoder->dev;
#line 218
  dev_priv = dev->dev_private;
#line 220
  dev_priv->saveBLC_PWM_CTL = readl(dev_priv->regs + 397908);
#line 221
  dev_priv->backlight_duty_cycle = dev_priv->saveBLC_PWM_CTL & 65535U;
#line 224
  intel_lvds_set_power(dev, false);
#line 225
  return;
}
}
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_commit(struct drm_encoder *encoder ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 tmp ;

  {
#line 229
  dev = encoder->dev;
#line 230
  dev_priv = dev->dev_private;
#line 232
  if (dev_priv->backlight_duty_cycle == 0) {
#line 233
    tmp = intel_lvds_get_max_backlight(dev);
#line 233
    dev_priv->backlight_duty_cycle = tmp;
  } else {

  }
#line 236
  intel_lvds_set_power(dev, true);
#line 237
  return;
}
}
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  u32 pfit_control ;

  {
#line 243
  dev = encoder->dev;
#line 244
  dev_priv = dev->dev_private;
#line 245
  __mptr = encoder->crtc;
#line 245
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 259
  if (mode->hdisplay != adjusted_mode->hdisplay || mode->vdisplay != adjusted_mode->vdisplay) {
#line 261
    pfit_control = ((((1 << 31) | (1 << 9)) | (1 << 5)) | (1 << 10)) | (1 << 6);
  } else {
#line 265
    pfit_control = 0;
  }
#line 267
  if (! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 268
    if (dev_priv->panel_wants_dither) {
#line 269
      pfit_control = pfit_control | (unsigned int )(1 << 3);
    } else {

    }
  } else {
#line 272
    pfit_control = pfit_control | (unsigned int )(intel_crtc->pipe << 29);
  }
#line 274
  writel(pfit_control, dev_priv->regs + 397872);
#line 275
  return;
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static enum drm_connector_status intel_lvds_detect(struct drm_connector *connector ) 
{ 


  {
#line 285
  return (connector_status_connected);
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static int intel_lvds_get_modes(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct drm_i915_private *dev_priv ;
  int ret ;
  struct drm_display_mode *mode ;

  {
#line 293
  dev = connector->dev;
#line 294
  __mptr = connector;
#line 294
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 295
  dev_priv = dev->dev_private;
#line 296
  ret = 0;
#line 298
  ret = intel_ddc_get_modes(intel_output);
#line 300
  if (ret) {
#line 301
    return (ret);
  } else {

  }
#line 307
  connector->display_info.min_vfreq = 0;
#line 308
  connector->display_info.max_vfreq = 200;
#line 309
  connector->display_info.min_hfreq = 0;
#line 310
  connector->display_info.max_hfreq = 200;
#line 312
  if ((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((void *)0)) {
#line 315
    mutex_unlock(& dev->mode_config.mutex);
#line 316
    mode = drm_mode_duplicate(dev, dev_priv->panel_fixed_mode);
#line 317
    drm_mode_probed_add(connector, mode);
#line 318
    mutex_unlock(& dev->mode_config.mutex);
#line 320
    return (1);
  } else {

  }
#line 323
  return (0);
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 335
  __mptr = connector;
#line 335
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 337
  if (intel_output->ddc_bus) {
#line 338
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 339
  drm_sysfs_connector_remove(connector);
#line 340
  drm_connector_cleanup(connector);
#line 341
  kfree(connector);
#line 342
  return;
}
}
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static struct drm_encoder_helper_funcs  const  intel_lvds_helper_funcs  = 
#line 344
     {& intel_lvds_dpms, 0, 0, & intel_lvds_mode_fixup, & intel_lvds_prepare, & intel_lvds_commit,
    & intel_lvds_mode_set, 0};
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static struct drm_connector_helper_funcs  const  intel_lvds_connector_helper_funcs  =    {& intel_lvds_get_modes,
    & intel_lvds_mode_valid, & intel_best_encoder};
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static struct drm_connector_funcs  const  intel_lvds_connector_funcs  =    {0, & intel_lvds_save, & intel_lvds_restore, & intel_lvds_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_lvds_destroy};
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static void intel_lvds_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 369
  drm_encoder_cleanup(encoder);
#line 370
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
static struct drm_encoder_funcs  const  intel_lvds_enc_funcs  =    {& intel_lvds_enc_destroy};
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
void intel_lvds_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector *connector ;
  struct drm_encoder *encoder ;
  struct drm_display_mode *scan ;
  struct drm_crtc *crtc ;
  u32 lvds ;
  int pipe ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 387
  dev_priv = dev->dev_private;
#line 396
  tmp = kzalloc(sizeof(struct intel_output ), (16U | 64U) | 128U);
#line 396
  intel_output = tmp;
#line 397
  if (! intel_output) {
#line 398
    return;
  } else {

  }
#line 401
  connector = & intel_output->base;
#line 402
  encoder = & intel_output->enc;
#line 403
  drm_connector_init(dev, & intel_output->base, & intel_lvds_connector_funcs, 7);
#line 406
  drm_encoder_init(dev, & intel_output->enc, & intel_lvds_enc_funcs, 3);
#line 409
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 410
  intel_output->type = 4;
#line 412
  drm_encoder_helper_add(encoder, & intel_lvds_helper_funcs);
#line 413
  drm_connector_helper_add(connector, & intel_lvds_connector_helper_funcs);
#line 414
  connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 415
  connector->interlace_allowed = false;
#line 416
  connector->doublescan_allowed = false;
#line 430
  intel_output->ddc_bus = intel_i2c_create(dev, 20504, "LVDSDDC_C");
#line 431
  if (! intel_output->ddc_bus) {
#line 432
    tmp___0 = dev_name(& (dev->pdev)->dev);
#line 432
    tmp___1 = dev_driver_string(& (dev->pdev)->dev);
#line 432
    printk("<3>%s %s: DDC bus registration failed.\n", tmp___1, tmp___0);
#line 434
    goto failed;
  } else {

  }
#line 441
  intel_ddc_get_modes(intel_output);
#line 443
  __mptr = connector->probed_modes.next;
#line 443
  scan = (struct drm_display_mode *)((char *)__mptr - (unsigned int )(& ((struct drm_display_mode *)0)->head));
#line 443
  while (1) {
#line 443
    __builtin_prefetch(scan->head.next);
#line 443
    if ((unsigned long )(& scan->head) != (unsigned long )(& connector->probed_modes)) {

    } else {
#line 443
      break;
    }
#line 444
    mutex_lock(& dev->mode_config.mutex);
#line 445
    if (scan->type & (1 << 3)) {
#line 446
      dev_priv->panel_fixed_mode = drm_mode_duplicate(dev, scan);
#line 448
      mutex_unlock(& dev->mode_config.mutex);
#line 449
      goto out;
    } else {

    }
#line 451
    mutex_unlock(& dev->mode_config.mutex);
#line 443
    __mptr___0 = scan->head.next;
#line 443
    scan = (struct drm_display_mode *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_display_mode *)0)->head));
  }
#line 455
  if (dev_priv->vbt_mode) {
#line 456
    mutex_lock(& dev->mode_config.mutex);
#line 457
    dev_priv->panel_fixed_mode = drm_mode_duplicate(dev, dev_priv->vbt_mode);
#line 459
    mutex_unlock(& dev->mode_config.mutex);
  } else {

  }
#line 467
  lvds = readl(dev_priv->regs + 397696);
#line 468
  pipe = lvds & (unsigned int )(1 << 30) ? 1 : 0;
#line 469
  crtc = intel_get_crtc_from_pipe(dev, pipe);
#line 471
  if (crtc && lvds & (unsigned int )(1 << 31)) {
#line 472
    dev_priv->panel_fixed_mode = intel_crtc_mode_get(dev, crtc);
#line 473
    if (dev_priv->panel_fixed_mode) {
#line 474
      (dev_priv->panel_fixed_mode)->type = (dev_priv->panel_fixed_mode)->type | (1 << 3);
#line 476
      goto out;
    } else {

    }
  } else {

  }
#line 481
  if (! dev_priv->panel_fixed_mode) {
#line 482
    goto failed;
  } else {

  }
#line 489
  if (dev->pci_device == 10146 || dev->pci_device == 10158) {
#line 491
    if ((int )(dev->pdev)->subsystem_vendor == 41120) {
#line 492
      goto failed;
    } else {

    }
#line 494
    if ((int )(dev->pdev)->subsystem_vendor == 32902 && (int )(dev->pdev)->subsystem_device == 29296) {
#line 506
      if (((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((void *)0) && (dev_priv->panel_fixed_mode)->hdisplay == 800) && (dev_priv->panel_fixed_mode)->vdisplay == 600) {
#line 509
        while (1) {
#line 509
          if (drm_debug) {
#line 509
            printk("<7>[drm:%s] Suspected Mac Mini, ignoring the LVDS\n", "intel_lvds_init");
          } else {

          }
#line 509
          break;
        }
#line 510
        goto failed;
      } else {

      }
    } else {

    }
  } else {

  }
  out: 
#line 517
  drm_sysfs_connector_add(connector);
#line 518
  return;
  failed: 
#line 521
  while (1) {
#line 521
    if (drm_debug) {
#line 521
      printk("<7>[drm:%s] No LVDS modes found, disabling.\n", "intel_lvds_init");
    } else {

    }
#line 521
    break;
  }
#line 522
  if (intel_output->ddc_bus) {
#line 523
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 524
  drm_connector_cleanup(connector);
#line 525
  kfree(connector);
#line 526
  return;
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_lvds.c"
void ldv_main11_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_lvds_dpms_3_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_lvds_mode_fixup_7_p2 ;
  struct drm_display_mode *var_intel_lvds_mode_set_10_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 621
  LDV_IN_INTERRUPT = 1;
#line 630
  ldv_initialize();
#line 640
  while (1) {
#line 640
    tmp___0 = nondet_int();
#line 640
    if (tmp___0) {

    } else {
#line 640
      break;
    }
#line 643
    tmp = nondet_int();
#line 643
    switch (tmp) {
    case 0: 
#line 653
    ldv_handler_precall();
#line 654
    intel_lvds_dpms(var_group1, var_intel_lvds_dpms_3_p1);
#line 661
    break;
    case 1: 
#line 670
    ldv_handler_precall();
#line 671
    intel_lvds_mode_fixup(var_group1, var_group2, var_intel_lvds_mode_fixup_7_p2);
#line 678
    break;
    case 2: 
#line 687
    ldv_handler_precall();
#line 688
    intel_lvds_prepare(var_group1);
#line 695
    break;
    case 3: 
#line 704
    ldv_handler_precall();
#line 705
    intel_lvds_mode_set(var_group1, var_group2, var_intel_lvds_mode_set_10_p2);
#line 712
    break;
    case 4: 
#line 721
    ldv_handler_precall();
#line 722
    intel_lvds_commit(var_group1);
#line 729
    break;
    case 5: 
#line 738
    ldv_handler_precall();
#line 739
    intel_lvds_get_modes(var_group3);
#line 746
    break;
    case 6: 
#line 755
    ldv_handler_precall();
#line 756
    intel_lvds_mode_valid(var_group3, var_group2);
#line 763
    break;
    case 7: 
#line 772
    ldv_handler_precall();
#line 773
    intel_lvds_save(var_group3);
#line 780
    break;
    case 8: 
#line 789
    ldv_handler_precall();
#line 790
    intel_lvds_restore(var_group3);
#line 797
    break;
    case 9: 
#line 806
    ldv_handler_precall();
#line 807
    intel_lvds_detect(var_group3);
#line 814
    break;
    case 10: 
#line 823
    ldv_handler_precall();
#line 824
    intel_lvds_destroy(var_group3);
#line 831
    break;
    case 11: 
#line 840
    ldv_handler_precall();
#line 841
    intel_lvds_enc_destroy(var_group1);
#line 848
    break;
    default: 
#line 849
    break;
    }
  }
#line 858
  ldv_check_final_state();
#line 861
  return;
}
}
#line 52 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   *cs , void const   *ct , unsigned long count ) ;
#line 652 "include/linux/pci.h"
extern void *( __attribute__((__warn_unused_result__)) pci_map_rom)(struct pci_dev *pdev ,
                                                                    size_t *size ) ;
#line 653
extern void pci_unmap_rom(struct pci_dev *pdev , void *rom ) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_bios.c"
static void *find_section(struct bdb_header *bdb , int section_id ) 
{ 
  u8 *base ;
  int index ;
  u16 total ;
  u16 current_size ;
  u8 current_id ;

  {
#line 37
  base = (u8 *)bdb;
#line 38
  index = 0;
#line 43
  index = index + (int )bdb->header_size;
#line 44
  total = bdb->bdb_size;
#line 47
  while (1) {
#line 47
    if (index < (int )total) {

    } else {
#line 47
      break;
    }
#line 48
    current_id = *(base + index);
#line 49
    index = index + 1;
#line 50
    current_size = *((u16 *)(base + index));
#line 51
    index = index + 2;
#line 52
    if ((int )current_id == section_id) {
#line 53
      return (base + index);
    } else {

    }
#line 54
    index = index + (int )current_size;
  }
#line 57
  return ((void *)0);
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_bios.c"
static void parse_panel_data(struct drm_i915_private *dev_priv , struct bdb_header *bdb ) 
{ 
  struct bdb_lvds_options *lvds_options ;
  struct bdb_lvds_lfp_data *lvds_lfp_data ;
  struct bdb_lvds_lfp_data_entry *entry ;
  struct lvds_dvo_timing *dvo_timing ;
  struct drm_display_mode *panel_fixed_mode ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 71
  dev_priv->lvds_dither = 0;
#line 72
  dev_priv->lvds_vbt = 0;
#line 74
  tmp = find_section(bdb, 40);
#line 74
  lvds_options = tmp;
#line 75
  if (! lvds_options) {
#line 76
    return;
  } else {

  }
#line 78
  dev_priv->lvds_dither = lvds_options->pixel_dither;
#line 79
  if ((int )lvds_options->panel_type == 255) {
#line 80
    return;
  } else {

  }
#line 82
  tmp___0 = find_section(bdb, 42);
#line 82
  lvds_lfp_data = tmp___0;
#line 83
  if (! lvds_lfp_data) {
#line 84
    return;
  } else {

  }
#line 86
  dev_priv->lvds_vbt = 1;
#line 88
  entry = & lvds_lfp_data->data[lvds_options->panel_type];
#line 89
  dvo_timing = & entry->dvo_timing;
#line 91
  tmp___1 = drm_calloc(1, sizeof(*panel_fixed_mode), 2);
#line 91
  panel_fixed_mode = tmp___1;
#line 94
  panel_fixed_mode->hdisplay = ((int )dvo_timing->hactive_hi << 8) | (int )dvo_timing->hactive_lo;
#line 96
  panel_fixed_mode->hsync_start = panel_fixed_mode->hdisplay + (((int )dvo_timing->hsync_off_hi << 8) | (int )dvo_timing->hsync_off_lo);
#line 98
  panel_fixed_mode->hsync_end = panel_fixed_mode->hsync_start + (int )dvo_timing->hsync_pulse_width;
#line 100
  panel_fixed_mode->htotal = panel_fixed_mode->hdisplay + (((int )dvo_timing->hblank_hi << 8) | (int )dvo_timing->hblank_lo);
#line 103
  panel_fixed_mode->vdisplay = ((int )dvo_timing->vactive_hi << 8) | (int )dvo_timing->vactive_lo;
#line 105
  panel_fixed_mode->vsync_start = panel_fixed_mode->vdisplay + (int )dvo_timing->vsync_off;
#line 107
  panel_fixed_mode->vsync_end = panel_fixed_mode->vsync_start + (int )dvo_timing->vsync_pulse_width;
#line 109
  panel_fixed_mode->vtotal = panel_fixed_mode->vdisplay + (((int )dvo_timing->vblank_hi << 8) | (int )dvo_timing->vblank_lo);
#line 111
  panel_fixed_mode->clock = (int )dvo_timing->clock * 10;
#line 112
  panel_fixed_mode->type = 1 << 3;
#line 114
  drm_mode_set_name(panel_fixed_mode);
#line 116
  dev_priv->vbt_mode = panel_fixed_mode;
#line 118
  while (1) {
#line 118
    if (drm_debug) {
#line 118
      printk("<7>[drm:%s] Found panel mode in BIOS VBT tables:\n", "parse_panel_data");
    } else {

    }
#line 118
    break;
  }
#line 119
  drm_mode_debug_printmodeline(panel_fixed_mode);
#line 121
  return;
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_bios.c"
static void parse_general_features(struct drm_i915_private *dev_priv , struct bdb_header *bdb ) 
{ 
  struct bdb_general_features *general ;
  void *tmp ;

  {
#line 131
  dev_priv->int_tv_support = 1;
#line 132
  dev_priv->int_crt_support = 1;
#line 134
  tmp = find_section(bdb, 1);
#line 134
  general = tmp;
#line 135
  if (general) {
#line 136
    dev_priv->int_tv_support = general->int_tv_support;
#line 137
    dev_priv->int_crt_support = general->int_crt_support;
  } else {

  }
#line 139
  return;
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_bios.c"
bool intel_init_bios(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct pci_dev *pdev ;
  struct vbt_header *vbt ;
  struct bdb_header *bdb ;
  u8 *bios ;
  size_t size ;
  int i ;
  void *tmp ;
  int tmp___0 ;

  {
#line 158
  dev_priv = dev->dev_private;
#line 159
  pdev = dev->pdev;
#line 160
  vbt = (void *)0;
#line 166
  tmp = pci_map_rom(pdev, & size);
#line 166
  bios = tmp;
#line 167
  if (! bios) {
#line 168
    return (-1);
  } else {

  }
#line 171
  i = 0;
#line 171
  while (1) {
#line 171
    if ((size_t )(i + 4) < size) {

    } else {
#line 171
      break;
    }
#line 172
    tmp___0 = memcmp(bios + i, "$VBT", 4);
#line 172
    if (tmp___0) {

    } else {
#line 173
      vbt = (struct vbt_header *)(bios + i);
#line 174
      break;
    }
#line 171
    i = i + 1;
  }
#line 178
  if (! vbt) {
#line 179
    printk("<3>[drm:%s] *ERROR* VBT signature missing\n", "intel_init_bios");
#line 180
    pci_unmap_rom(pdev, bios);
#line 181
    return (-1);
  } else {

  }
#line 184
  bdb = (struct bdb_header *)((bios + i) + vbt->bdb_offset);
#line 187
  parse_general_features(dev_priv, bdb);
#line 188
  parse_panel_data(dev_priv, bdb);
#line 190
  pci_unmap_rom(pdev, bios);
#line 192
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void *to , void const   *from , size_t len ) ;
#line 62 "include/linux/i2c.h"
extern int i2c_transfer(struct i2c_adapter *adap , struct i2c_msg *msgs , int num ) ;
#line 132 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct drm_connector *intel_sdvo_find(struct drm_device *dev , int sdvoB ) ;
#line 133
int intel_sdvo_supports_hotplug(struct drm_connector *connector ) ;
#line 134
void intel_sdvo_set_hotplug(struct drm_connector *connector , int on ) ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_write_sdvox(struct intel_output *intel_output , u32 val ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_sdvo_priv *sdvo_priv ;
  u32 bval ;
  u32 cval ;
  int i ;

  {
#line 65
  dev = intel_output->base.dev;
#line 66
  dev_priv = dev->dev_private;
#line 67
  sdvo_priv = intel_output->dev_priv;
#line 68
  bval = val;
#line 68
  cval = val;
#line 71
  if (sdvo_priv->output_device == 397632) {
#line 72
    cval = readl(dev_priv->regs + 397664);
  } else {
#line 74
    bval = readl(dev_priv->regs + 397632);
  }
#line 81
  i = 0;
#line 81
  while (1) {
#line 81
    if (i < 2) {

    } else {
#line 81
      break;
    }
#line 83
    writel(bval, dev_priv->regs + 397632);
#line 84
    readl(dev_priv->regs + 397632);
#line 85
    writel(cval, dev_priv->regs + 397664);
#line 86
    readl(dev_priv->regs + 397664);
#line 81
    i = i + 1;
  }
#line 88
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_read_byte(struct intel_output *intel_output , u8 addr , u8 *ch ) 
{ 
  struct intel_sdvo_priv *sdvo_priv ;
  u8 out_buf[2] ;
  u8 buf[2] ;
  int ret ;
  struct i2c_msg msgs[2] ;

  {
#line 93
  sdvo_priv = intel_output->dev_priv;
#line 98
  msgs[0].addr = (sdvo_priv->i2c_bus)->slave_addr;
#line 98
  msgs[0].flags = 0;
#line 98
  msgs[0].len = 1;
#line 98
  msgs[0].buf = out_buf;
#line 98
  msgs[1].addr = (sdvo_priv->i2c_bus)->slave_addr;
#line 98
  msgs[1].flags = 1;
#line 98
  msgs[1].len = 1;
#line 98
  msgs[1].buf = buf;
#line 113
  out_buf[0] = addr;
#line 114
  out_buf[1] = 0;
#line 116
  ret = i2c_transfer(& (sdvo_priv->i2c_bus)->adapter, msgs, 2);
#line 116
  if (ret == 2) {
#line 118
    *ch = buf[0];
#line 119
    return (true);
  } else {

  }
#line 122
  while (1) {
#line 122
    if (drm_debug) {
#line 122
      printk("<7>[drm:%s] i2c transfer returned %d\n", "intel_sdvo_read_byte", ret);
    } else {

    }
#line 122
    break;
  }
#line 123
  return (false);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_write_byte(struct intel_output *intel_output , int addr , u8 ch ) 
{ 
  u8 out_buf[2] ;
  struct i2c_msg msgs[1] ;
  int tmp ;

  {
#line 130
  msgs[0].addr = (intel_output->i2c_bus)->slave_addr;
#line 130
  msgs[0].flags = 0;
#line 130
  msgs[0].len = 2;
#line 130
  msgs[0].buf = out_buf;
#line 139
  out_buf[0] = addr;
#line 140
  out_buf[1] = ch;
#line 142
  tmp = i2c_transfer(& (intel_output->i2c_bus)->adapter, msgs, 1);
#line 142
  if (tmp == 1) {
#line 144
    return (true);
  } else {

  }
#line 146
  return (false);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_write_cmd(struct intel_output *intel_output , u8 cmd , void *args ,
                                 int args_len ) 
{ 
  int i ;

  {
#line 230
  i = 0;
#line 230
  while (1) {
#line 230
    if (i < args_len) {

    } else {
#line 230
      break;
    }
#line 231
    intel_sdvo_write_byte(intel_output, 7 - i, *((u8 *)args + i));
#line 230
    i = i + 1;
  }
#line 235
  intel_sdvo_write_byte(intel_output, 8, cmd);
#line 236
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static u8 intel_sdvo_read_response(struct intel_output *intel_output , void *response ,
                                   int response_len ) 
{ 
  int i ;
  u8 status ;
  u8 retry ;
  unsigned long __ms ;
  unsigned long tmp ;
  u8 tmp___0 ;

  {
#line 275
  retry = 50;
#line 277
  while (1) {
#line 277
    tmp___0 = retry;
#line 277
    retry = (u8 )((int )retry - 1);
#line 277
    if (tmp___0) {

    } else {
#line 277
      break;
    }
#line 279
    i = 0;
#line 279
    while (1) {
#line 279
      if (i < response_len) {

      } else {
#line 279
        break;
      }
#line 280
      intel_sdvo_read_byte(intel_output, 10 + i, (u8 *)response + i);
#line 279
      i = i + 1;
    }
#line 286
    intel_sdvo_read_byte(intel_output, 9, & status);
#line 291
    if ((int )status != 4) {
#line 292
      return (status);
    } else {

    }
#line 294
    if (50 <= 5) {
#line 294
      if (50 * 1000 > 20000) {
#line 294
        __bad_udelay();
      } else {
#line 294
        __const_udelay((unsigned long )(50 * 1000) * 4295UL);
      }
    } else {
#line 294
      __ms = 50;
#line 294
      while (1) {
#line 294
        tmp = __ms;
#line 294
        __ms = __ms - 1UL;
#line 294
        if (tmp) {

        } else {
#line 294
          break;
        }
#line 294
        if (1000 > 20000) {
#line 294
          __bad_udelay();
        } else {
#line 294
          __const_udelay(1000UL * 4295UL);
        }
      }
    }
  }
#line 297
  return (status);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static int intel_sdvo_get_pixel_multiplier(struct drm_display_mode *mode ) 
{ 


  {
#line 302
  if (mode->clock >= 100000) {
#line 303
    return (1);
  } else
#line 304
  if (mode->clock >= 50000) {
#line 305
    return (2);
  } else {
#line 307
    return (4);
  }
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_set_control_bus_switch(struct intel_output *intel_output ,
                                              u8 target ) 
{ 


  {
#line 318
  intel_sdvo_write_cmd(intel_output, 122, & target, 1);
#line 319
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_target_input(struct intel_output *intel_output , bool target_0 ,
                                        bool target_1 ) 
{ 
  struct intel_sdvo_set_target_input_args targets ;
  u8 status ;

  {
#line 323
  targets.target_1 = 0;
#line 323
  targets.pad = 0U;
#line 326
  if (target_0 && target_1) {
#line 327
    return (2);
  } else {

  }
#line 329
  if (target_1) {
#line 330
    targets.target_1 = 1;
  } else {

  }
#line 332
  intel_sdvo_write_cmd(intel_output, 16, & targets, sizeof(targets));
#line 335
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 337
  return ((int )status == 1);
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_trained_inputs(struct intel_output *intel_output , bool *input_1 ,
                                          bool *input_2 ) 
{ 
  struct intel_sdvo_get_trained_inputs_response response ;
  u8 status ;

  {
#line 351
  intel_sdvo_write_cmd(intel_output, 3, (void *)0, 0);
#line 352
  status = intel_sdvo_read_response(intel_output, & response, sizeof(response));
#line 353
  if ((int )status != 1) {
#line 354
    return (false);
  } else {

  }
#line 356
  *input_1 = response.input0_trained;
#line 357
  *input_2 = response.input1_trained;
#line 358
  return (true);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_active_outputs(struct intel_output *intel_output , u16 *outputs ) 
{ 
  u8 status ;

  {
#line 366
  intel_sdvo_write_cmd(intel_output, 4, (void *)0, 0);
#line 367
  status = intel_sdvo_read_response(intel_output, outputs, sizeof(*outputs));
#line 369
  return ((int )status == 1);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_active_outputs(struct intel_output *intel_output , u16 outputs ) 
{ 
  u8 status ;

  {
#line 377
  intel_sdvo_write_cmd(intel_output, 5, & outputs, sizeof(outputs));
#line 379
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 380
  return ((int )status == 1);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_input_pixel_clock_range(struct intel_output *intel_output ,
                                                   int *clock_min , int *clock_max ) 
{ 
  struct intel_sdvo_pixel_clock_range clocks ;
  u8 status ;

  {
#line 417
  intel_sdvo_write_cmd(intel_output, 29, (void *)0, 0);
#line 420
  status = intel_sdvo_read_response(intel_output, & clocks, sizeof(clocks));
#line 422
  if ((int )status != 1) {
#line 423
    return (false);
  } else {

  }
#line 426
  *clock_min = (int )clocks.min * 10;
#line 427
  *clock_max = (int )clocks.max * 10;
#line 429
  return (true);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_target_output(struct intel_output *intel_output , u16 outputs ) 
{ 
  u8 status ;

  {
#line 437
  intel_sdvo_write_cmd(intel_output, 17, & outputs, sizeof(outputs));
#line 440
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 441
  return ((int )status == 1);
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_timing(struct intel_output *intel_output , u8 cmd , struct intel_sdvo_dtd *dtd ) 
{ 
  u8 status ;

  {
#line 449
  intel_sdvo_write_cmd(intel_output, cmd, (void *)0, 0);
#line 450
  status = intel_sdvo_read_response(intel_output, & dtd->part1, sizeof(dtd->part1));
#line 452
  if ((int )status != 1) {
#line 453
    return (false);
  } else {

  }
#line 455
  intel_sdvo_write_cmd(intel_output, (int )cmd + 1, (void *)0, 0);
#line 456
  status = intel_sdvo_read_response(intel_output, & dtd->part2, sizeof(dtd->part2));
#line 458
  if ((int )status != 1) {
#line 459
    return (false);
  } else {

  }
#line 461
  return (true);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_input_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 467
  tmp = intel_sdvo_get_timing(intel_output, 18, dtd);
#line 467
  return (tmp);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_output_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 474
  tmp = intel_sdvo_get_timing(intel_output, 24, dtd);
#line 474
  return (tmp);
}
}
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_timing(struct intel_output *intel_output , u8 cmd , struct intel_sdvo_dtd *dtd ) 
{ 
  u8 status ;

  {
#line 483
  intel_sdvo_write_cmd(intel_output, cmd, & dtd->part1, sizeof(dtd->part1));
#line 484
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 485
  if ((int )status != 1) {
#line 486
    return (false);
  } else {

  }
#line 488
  intel_sdvo_write_cmd(intel_output, (int )cmd + 1, & dtd->part2, sizeof(dtd->part2));
#line 489
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 490
  if ((int )status != 1) {
#line 491
    return (false);
  } else {

  }
#line 493
  return (true);
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_input_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 499
  tmp = intel_sdvo_set_timing(intel_output, 20, dtd);
#line 499
  return (tmp);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_output_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 506
  tmp = intel_sdvo_set_timing(intel_output, 22, dtd);
#line 506
  return (tmp);
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static int intel_sdvo_get_clock_rate_mult(struct intel_output *intel_output ) 
{ 
  u8 response ;
  u8 status ;

  {
#line 515
  intel_sdvo_write_cmd(intel_output, 32, (void *)0, 0);
#line 516
  status = intel_sdvo_read_response(intel_output, & response, 1);
#line 518
  if ((int )status != 1) {
#line 519
    while (1) {
#line 519
      if (drm_debug) {
#line 519
        printk("<7>[drm:%s] Couldn\'t get SDVO clock rate multiplier\n", "intel_sdvo_get_clock_rate_mult");
      } else {

      }
#line 519
      break;
    }
#line 520
    return (1 << 0);
  } else {
#line 522
    while (1) {
#line 522
      if (drm_debug) {
#line 522
        printk("<7>[drm:%s] Current clock rate multiplier: %d\n", "intel_sdvo_get_clock_rate_mult",
               response);
      } else {

      }
#line 522
      break;
    }
  }
#line 525
  return (response);
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_set_clock_rate_mult(struct intel_output *intel_output , u8 val ) 
{ 
  u8 status ;

  {
#line 532
  intel_sdvo_write_cmd(intel_output, 33, & val, 1);
#line 533
  status = intel_sdvo_read_response(intel_output, (void *)0, 0);
#line 534
  if ((int )status != 1) {
#line 535
    return (false);
  } else {

  }
#line 537
  return (true);
}
}
#line 540 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 
  int tmp ;

  {
#line 547
  tmp = intel_sdvo_get_pixel_multiplier(mode);
#line 547
  adjusted_mode->clock = adjusted_mode->clock * tmp;
#line 548
  return (true);
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_sdvo_priv *sdvo_priv ;
  u16 width ;
  u16 height ;
  u16 h_blank_len ;
  u16 h_sync_len ;
  u16 v_blank_len ;
  u16 v_sync_len ;
  u16 h_sync_offset ;
  u16 v_sync_offset ;
  u32 sdvox ;
  struct intel_sdvo_dtd output_dtd ;
  int sdvo_pixel_multiply ;
  int tmp ;

  {
#line 555
  dev = encoder->dev;
#line 556
  dev_priv = dev->dev_private;
#line 557
  crtc = encoder->crtc;
#line 558
  __mptr = crtc;
#line 558
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 559
  __mptr___0 = encoder;
#line 559
  intel_output = (struct intel_output *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 560
  sdvo_priv = intel_output->dev_priv;
#line 568
  if (! mode) {
#line 569
    return;
  } else {

  }
#line 571
  width = mode->crtc_hdisplay;
#line 572
  height = mode->crtc_vdisplay;
#line 575
  h_blank_len = mode->crtc_hblank_end - mode->crtc_hblank_start;
#line 576
  h_sync_len = mode->crtc_hsync_end - mode->crtc_hsync_start;
#line 578
  v_blank_len = mode->crtc_vblank_end - mode->crtc_vblank_start;
#line 579
  v_sync_len = mode->crtc_vsync_end - mode->crtc_vsync_start;
#line 581
  h_sync_offset = mode->crtc_hsync_start - mode->crtc_hblank_start;
#line 582
  v_sync_offset = mode->crtc_vsync_start - mode->crtc_vblank_start;
#line 584
  output_dtd.part1.clock = mode->clock / 10;
#line 585
  output_dtd.part1.h_active = (int )width & 255;
#line 586
  output_dtd.part1.h_blank = (int )h_blank_len & 255;
#line 587
  output_dtd.part1.h_high = ((((int )width >> 8) & 15) << 4) | (((int )h_blank_len >> 8) & 15);
#line 589
  output_dtd.part1.v_active = (int )height & 255;
#line 590
  output_dtd.part1.v_blank = (int )v_blank_len & 255;
#line 591
  output_dtd.part1.v_high = ((((int )height >> 8) & 15) << 4) | (((int )v_blank_len >> 8) & 15);
#line 594
  output_dtd.part2.h_sync_off = h_sync_offset;
#line 595
  output_dtd.part2.h_sync_width = (int )h_sync_len & 255;
#line 596
  output_dtd.part2.v_sync_off_width = (((int )v_sync_offset & 15) << 4) | ((int )v_sync_len & 15);
#line 598
  output_dtd.part2.sync_off_width_high = (((((int )h_sync_offset & 768) >> 2) | (((int )h_sync_len & 768) >> 4)) | (((int )v_sync_offset & 48) >> 2)) | (((int )v_sync_len & 48) >> 4);
#line 602
  output_dtd.part2.dtd_flags = 24;
#line 603
  if (mode->flags & (unsigned int )(1 << 0)) {
#line 604
    output_dtd.part2.dtd_flags = (int )output_dtd.part2.dtd_flags | 2;
  } else {

  }
#line 605
  if (mode->flags & (unsigned int )(1 << 2)) {
#line 606
    output_dtd.part2.dtd_flags = (int )output_dtd.part2.dtd_flags | 4;
  } else {

  }
#line 608
  output_dtd.part2.sdvo_flags = 0;
#line 609
  output_dtd.part2.v_sync_off_high = (int )v_sync_offset & 192;
#line 610
  output_dtd.part2.reserved = 0;
#line 613
  intel_sdvo_set_target_output(intel_output, sdvo_priv->active_outputs);
#line 614
  intel_sdvo_set_output_timing(intel_output, & output_dtd);
#line 617
  intel_sdvo_set_target_input(intel_output, true, false);
#line 624
  intel_sdvo_set_input_timing(intel_output, & output_dtd);
#line 626
  tmp = intel_sdvo_get_pixel_multiplier(mode);
#line 626
  switch (tmp) {
  case 1: 
#line 628
  intel_sdvo_set_clock_rate_mult(intel_output, 1 << 0);
#line 630
  break;
  case 2: 
#line 632
  intel_sdvo_set_clock_rate_mult(intel_output, 1 << 1);
#line 634
  break;
  case 4: 
#line 636
  intel_sdvo_set_clock_rate_mult(intel_output, 1 << 3);
#line 638
  break;
  }
#line 645
  sdvox = readl(dev_priv->regs + sdvo_priv->output_device);
#line 646
  switch (sdvo_priv->output_device) {
  case 397632: 
#line 648
  sdvox = sdvox & (unsigned int )((((1 << 17) | (1 << 16)) | (1 << 14)) | (1 << 26));
#line 649
  break;
  case 397664: 
#line 651
  sdvox = sdvox & (unsigned int )((1 << 17) | (1 << 26));
#line 652
  break;
  }
#line 654
  sdvox = sdvox | (unsigned int )((9 << 19) | (1 << 7));
#line 656
  if (intel_crtc->pipe == 1) {
#line 657
    sdvox = sdvox | (unsigned int )(1 << 30);
  } else {

  }
#line 659
  sdvo_pixel_multiply = intel_sdvo_get_pixel_multiplier(mode);
#line 660
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {

  } else
#line 663
  if (dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) {

  } else {
#line 667
    sdvox = sdvox | (unsigned int )((sdvo_pixel_multiply - 1) << 23);
  }
#line 670
  intel_sdvo_write_sdvox(intel_output, sdvox);
#line 671
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  u32 temp ;
  bool input1 ;
  bool input2 ;
  int i ;
  u8 status ;
  bool tmp ;

  {
#line 675
  dev = encoder->dev;
#line 676
  dev_priv = dev->dev_private;
#line 677
  __mptr = encoder;
#line 677
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 678
  sdvo_priv = intel_output->dev_priv;
#line 681
  if (mode != 0) {
#line 682
    intel_sdvo_set_active_outputs(intel_output, 0);
#line 686
    if (mode == 3) {
#line 687
      temp = readl(dev_priv->regs + sdvo_priv->output_device);
#line 688
      if ((temp & (unsigned int )(1 << 31)) != 0U) {
#line 689
        intel_sdvo_write_sdvox(intel_output, temp & (unsigned int )(~ (1 << 31)));
      } else {

      }
    } else {

    }
  } else {
#line 697
    temp = readl(dev_priv->regs + sdvo_priv->output_device);
#line 698
    if ((temp & (unsigned int )(1 << 31)) == 0U) {
#line 699
      intel_sdvo_write_sdvox(intel_output, temp | (unsigned int )(1 << 31));
    } else {

    }
#line 700
    i = 0;
#line 700
    while (1) {
#line 700
      if (i < 2) {

      } else {
#line 700
        break;
      }
#line 701
      intel_wait_for_vblank(dev);
#line 700
      i = i + 1;
    }
#line 703
    tmp = intel_sdvo_get_trained_inputs(intel_output, & input1, & input2);
#line 703
    status = tmp;
#line 711
    if ((int )status == 1 && ! input1) {
#line 712
      while (1) {
#line 712
        if (drm_debug) {
#line 712
          printk("<7>[drm:%s] First %s output reported failure to sync\n", "intel_sdvo_dpms",
                 sdvo_priv->output_device == 397632 ? "SDVOB" : "SDVOC");
        } else {

        }
#line 712
        break;
      }
    } else {

    }
#line 718
    intel_sdvo_set_active_outputs(intel_output, sdvo_priv->active_outputs);
  }
#line 720
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  int o ;
  u16 this_output ;

  {
#line 725
  dev = connector->dev;
#line 726
  dev_priv = dev->dev_private;
#line 727
  __mptr = connector;
#line 727
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 728
  sdvo_priv = intel_output->dev_priv;
#line 731
  sdvo_priv->save_sdvo_mult = intel_sdvo_get_clock_rate_mult(intel_output);
#line 732
  intel_sdvo_get_active_outputs(intel_output, & sdvo_priv->save_active_outputs);
#line 734
  if (sdvo_priv->caps.sdvo_inputs_mask & 1U) {
#line 735
    intel_sdvo_set_target_input(intel_output, true, false);
#line 736
    intel_sdvo_get_input_timing(intel_output, & sdvo_priv->save_input_dtd_1);
  } else {

  }
#line 740
  if (sdvo_priv->caps.sdvo_inputs_mask & 2U) {
#line 741
    intel_sdvo_set_target_input(intel_output, false, true);
#line 742
    intel_sdvo_get_input_timing(intel_output, & sdvo_priv->save_input_dtd_2);
  } else {

  }
#line 746
  o = 0;
#line 746
  while (1) {
#line 746
    if (o <= 14) {

    } else {
#line 746
      break;
    }
#line 748
    this_output = 1 << o;
#line 749
    if ((int )sdvo_priv->caps.output_flags & (int )this_output) {
#line 751
      intel_sdvo_set_target_output(intel_output, this_output);
#line 752
      intel_sdvo_get_output_timing(intel_output, & sdvo_priv->save_output_dtd[o]);
    } else {

    }
#line 746
    o = o + 1;
  }
#line 757
  sdvo_priv->save_SDVOX = readl(dev_priv->regs + sdvo_priv->output_device);
#line 758
  return;
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  int o ;
  int i ;
  bool input1 ;
  bool input2 ;
  u8 status ;
  u16 this_output ;
  bool tmp ;

  {
#line 762
  dev = connector->dev;
#line 763
  dev_priv = dev->dev_private;
#line 764
  __mptr = connector;
#line 764
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 765
  sdvo_priv = intel_output->dev_priv;
#line 771
  intel_sdvo_set_active_outputs(intel_output, 0);
#line 773
  o = 0;
#line 773
  while (1) {
#line 773
    if (o <= 14) {

    } else {
#line 773
      break;
    }
#line 775
    this_output = 1 << o;
#line 776
    if ((int )sdvo_priv->caps.output_flags & (int )this_output) {
#line 777
      intel_sdvo_set_target_output(intel_output, this_output);
#line 778
      intel_sdvo_set_output_timing(intel_output, & sdvo_priv->save_output_dtd[o]);
    } else {

    }
#line 773
    o = o + 1;
  }
#line 782
  if (sdvo_priv->caps.sdvo_inputs_mask & 1U) {
#line 783
    intel_sdvo_set_target_input(intel_output, true, false);
#line 784
    intel_sdvo_set_input_timing(intel_output, & sdvo_priv->save_input_dtd_1);
  } else {

  }
#line 787
  if (sdvo_priv->caps.sdvo_inputs_mask & 2U) {
#line 788
    intel_sdvo_set_target_input(intel_output, false, true);
#line 789
    intel_sdvo_set_input_timing(intel_output, & sdvo_priv->save_input_dtd_2);
  } else {

  }
#line 792
  intel_sdvo_set_clock_rate_mult(intel_output, sdvo_priv->save_sdvo_mult);
#line 794
  writel(sdvo_priv->save_SDVOX, dev_priv->regs + sdvo_priv->output_device);
#line 796
  if (sdvo_priv->save_SDVOX & (unsigned int )(1 << 31)) {
#line 798
    i = 0;
#line 798
    while (1) {
#line 798
      if (i < 2) {

      } else {
#line 798
        break;
      }
#line 799
      intel_wait_for_vblank(dev);
#line 798
      i = i + 1;
    }
#line 800
    tmp = intel_sdvo_get_trained_inputs(intel_output, & input1, & input2);
#line 800
    status = tmp;
#line 801
    if ((int )status == 1 && ! input1) {
#line 802
      while (1) {
#line 802
        if (drm_debug) {
#line 802
          printk("<7>[drm:%s] First %s output reported failure to sync\n", "intel_sdvo_restore",
                 sdvo_priv->output_device == 397632 ? "SDVOB" : "SDVOC");
        } else {

        }
#line 802
        break;
      }
    } else {

    }
  } else {

  }
#line 806
  intel_sdvo_set_active_outputs(intel_output, sdvo_priv->save_active_outputs);
#line 807
  return;
}
}
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static int intel_sdvo_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;

  {
#line 812
  __mptr = connector;
#line 812
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 813
  sdvo_priv = intel_output->dev_priv;
#line 815
  if (mode->flags & (unsigned int )(1 << 5)) {
#line 816
    return (MODE_NO_DBLESCAN);
  } else {

  }
#line 818
  if (sdvo_priv->pixel_clock_min > mode->clock) {
#line 819
    return (MODE_CLOCK_LOW);
  } else {

  }
#line 821
  if (sdvo_priv->pixel_clock_max < mode->clock) {
#line 822
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 824
  return (MODE_OK);
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static bool intel_sdvo_get_capabilities(struct intel_output *intel_output , struct intel_sdvo_caps *caps ) 
{ 
  u8 status ;

  {
#line 831
  intel_sdvo_write_cmd(intel_output, 2, (void *)0, 0);
#line 832
  status = intel_sdvo_read_response(intel_output, caps, sizeof(*caps));
#line 833
  if ((int )status != 1) {
#line 834
    return (false);
  } else {

  }
#line 836
  return (true);
}
}
#line 839 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
struct drm_connector *intel_sdvo_find(struct drm_device *dev , int sdvoB ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *iout ;
  struct intel_sdvo_priv *sdvo ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_connector  const  *__mptr___1 ;

  {
#line 841
  connector = (void *)0;
#line 842
  iout = (void *)0;
#line 846
  __mptr = dev->mode_config.connector_list.next;
#line 846
  connector = (struct drm_connector *)((char *)__mptr - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 846
  while (1) {
#line 846
    __builtin_prefetch(connector->head.next);
#line 846
    if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {

    } else {
#line 846
      break;
    }
#line 847
    __mptr___1 = connector;
#line 847
    iout = (struct intel_output *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_output *)0)->base));
#line 849
    if (iout->type != 3) {
#line 850
      goto __Cont;
    } else {

    }
#line 852
    sdvo = iout->dev_priv;
#line 854
    if (sdvo->output_device == 397632 && sdvoB) {
#line 855
      return (connector);
    } else {

    }
#line 857
    if (sdvo->output_device == 397664 && ! sdvoB) {
#line 858
      return (connector);
    } else {

    }
    __Cont: /* CIL Label */ 
#line 846
    __mptr___0 = connector->head.next;
#line 846
    connector = (struct drm_connector *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 862
  return ((void *)0);
}
}
#line 865 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
int intel_sdvo_supports_hotplug(struct drm_connector *connector ) 
{ 
  u8 response[2] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 870
  while (1) {
#line 870
    if (drm_debug) {
#line 870
      printk("<7>[drm:%s] \n", "intel_sdvo_supports_hotplug");
    } else {

    }
#line 870
    break;
  }
#line 872
  if (! connector) {
#line 873
    return (0);
  } else {

  }
#line 875
  __mptr = connector;
#line 875
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 877
  intel_sdvo_write_cmd(intel_output, 12, (void *)0, 0);
#line 878
  status = intel_sdvo_read_response(intel_output, & response, 2);
#line 880
  if ((int )response[0] != 0) {
#line 881
    return (1);
  } else {

  }
#line 883
  return (0);
}
}
#line 886 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
void intel_sdvo_set_hotplug(struct drm_connector *connector , int on ) 
{ 
  u8 response[2] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 890
  __mptr = connector;
#line 890
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 892
  intel_sdvo_write_cmd(intel_output, 14, (void *)0, 0);
#line 893
  intel_sdvo_read_response(intel_output, & response, 2);
#line 895
  if (on) {
#line 896
    intel_sdvo_write_cmd(intel_output, 12, (void *)0, 0);
#line 897
    status = intel_sdvo_read_response(intel_output, & response, 2);
#line 899
    intel_sdvo_write_cmd(intel_output, 13, & response, 2);
  } else {
#line 901
    response[0] = 0;
#line 902
    response[1] = 0;
#line 903
    intel_sdvo_write_cmd(intel_output, 13, & response, 2);
  }
#line 906
  intel_sdvo_write_cmd(intel_output, 14, (void *)0, 0);
#line 907
  intel_sdvo_read_response(intel_output, & response, 2);
#line 908
  return;
}
}
#line 910 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static enum drm_connector_status intel_sdvo_detect(struct drm_connector *connector ) 
{ 
  u8 response[2] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 914
  __mptr = connector;
#line 914
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 916
  intel_sdvo_write_cmd(intel_output, 11, (void *)0, 0);
#line 917
  status = intel_sdvo_read_response(intel_output, & response, 2);
#line 919
  while (1) {
#line 919
    if (drm_debug) {
#line 919
      printk("<7>[drm:%s] SDVO response %d %d\n", "intel_sdvo_detect", response[0],
             response[1]);
    } else {

    }
#line 919
    break;
  }
#line 920
  if ((int )response[0] != 0 || (int )response[1] != 0) {
#line 921
    return (connector_status_connected);
  } else {
#line 923
    return (connector_status_disconnected);
  }
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static int intel_sdvo_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  int tmp ;

  {
#line 928
  __mptr = connector;
#line 928
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 931
  intel_sdvo_set_control_bus_switch(intel_output, 2);
#line 932
  intel_ddc_get_modes(intel_output);
#line 934
  tmp = list_empty(& connector->probed_modes);
#line 934
  if (tmp) {
#line 935
    return (0);
  } else {

  }
#line 936
  return (1);
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 941
  __mptr = connector;
#line 941
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 943
  if (intel_output->i2c_bus) {
#line 944
    intel_i2c_destroy(intel_output->i2c_bus);
  } else {

  }
#line 945
  drm_sysfs_connector_remove(connector);
#line 946
  drm_connector_cleanup(connector);
#line 947
  kfree(intel_output);
#line 948
  return;
}
}
#line 950 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static struct drm_encoder_helper_funcs  const  intel_sdvo_helper_funcs  = 
#line 950
     {& intel_sdvo_dpms, 0, 0, & intel_sdvo_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_sdvo_mode_set, 0};
#line 958 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static struct drm_connector_funcs  const  intel_sdvo_connector_funcs  =    {0, & intel_sdvo_save, & intel_sdvo_restore, & intel_sdvo_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_sdvo_destroy};
#line 966 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static struct drm_connector_helper_funcs  const  intel_sdvo_connector_helper_funcs  =    {& intel_sdvo_get_modes,
    & intel_sdvo_mode_valid, & intel_best_encoder};
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static void intel_sdvo_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 974
  drm_encoder_cleanup(encoder);
#line 975
  return;
}
}
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
static struct drm_encoder_funcs  const  intel_sdvo_enc_funcs  =    {& intel_sdvo_enc_destroy};
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
void intel_sdvo_init(struct drm_device *dev , int output_device ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  struct intel_sdvo_priv *sdvo_priv ;
  struct intel_i2c_chan *i2cbus ;
  int connector_type ;
  u8 ch[64] ;
  int i ;
  int encoder_type ;
  int output_id ;
  void *tmp ;
  bool tmp___0 ;
  unsigned char bytes[2] ;
  size_t __len ;
  void *__ret ;

  {
#line 987
  i2cbus = (void *)0;
#line 993
  tmp = kcalloc(sizeof(struct intel_output ) + sizeof(struct intel_sdvo_priv ), 1,
                (16U | 64U) | 128U);
#line 993
  intel_output = tmp;
#line 994
  if (! intel_output) {
#line 995
    return;
  } else {

  }
#line 998
  connector = & intel_output->base;
#line 1000
  drm_connector_init(dev, connector, & intel_sdvo_connector_funcs, 0);
#line 1002
  drm_connector_helper_add(connector, & intel_sdvo_connector_helper_funcs);
#line 1003
  sdvo_priv = (struct intel_sdvo_priv *)(intel_output + 1);
#line 1004
  intel_output->type = 3;
#line 1006
  connector->interlace_allowed = 0;
#line 1007
  connector->doublescan_allowed = 0;
#line 1010
  if (output_device == 397632) {
#line 1011
    i2cbus = intel_i2c_create(dev, 20512, "SDVOCTRL_E for SDVOB");
  } else {
#line 1013
    i2cbus = intel_i2c_create(dev, 20512, "SDVOCTRL_E for SDVOC");
  }
#line 1015
  if (! i2cbus) {
#line 1016
    goto err_connector;
  } else {

  }
#line 1018
  sdvo_priv->i2c_bus = i2cbus;
#line 1020
  if (output_device == 397632) {
#line 1021
    output_id = 1;
#line 1022
    (sdvo_priv->i2c_bus)->slave_addr = 56;
  } else {
#line 1024
    output_id = 2;
#line 1025
    (sdvo_priv->i2c_bus)->slave_addr = 57;
  }
#line 1028
  sdvo_priv->output_device = output_device;
#line 1029
  intel_output->i2c_bus = i2cbus;
#line 1030
  intel_output->dev_priv = sdvo_priv;
#line 1034
  i = 0;
#line 1034
  while (1) {
#line 1034
    if (i < 64) {

    } else {
#line 1034
      break;
    }
#line 1035
    tmp___0 = intel_sdvo_read_byte(intel_output, i, & ch[i]);
#line 1035
    if (tmp___0) {

    } else {
#line 1036
      while (1) {
#line 1036
        if (drm_debug) {
#line 1036
          printk("<7>[drm:%s] No SDVO device found on SDVO%c\n", "intel_sdvo_init",
                 output_device == 397632 ? 'B' : 'C');
        } else {

        }
#line 1036
        break;
      }
#line 1038
      goto err_i2c;
    }
#line 1034
    i = i + 1;
  }
#line 1042
  intel_sdvo_get_capabilities(intel_output, & sdvo_priv->caps);
#line 1044
  memset(& sdvo_priv->active_outputs, 0, sizeof(sdvo_priv->active_outputs));
#line 1047
  if ((int )sdvo_priv->caps.output_flags & (1 << 1)) {
#line 1049
    sdvo_priv->active_outputs = 1 << 1;
#line 1050
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1051
    encoder_type = 1;
#line 1052
    connector_type = 1;
  } else
#line 1054
  if ((int )sdvo_priv->caps.output_flags & (1 << 9)) {
#line 1056
    sdvo_priv->active_outputs = 1 << 9;
#line 1057
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1058
    encoder_type = 1;
#line 1059
    connector_type = 1;
  } else
#line 1061
  if ((int )sdvo_priv->caps.output_flags & (1 << 0)) {
#line 1063
    sdvo_priv->active_outputs = 1 << 0;
#line 1064
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1065
    encoder_type = 2;
#line 1066
    connector_type = 3;
  } else
#line 1068
  if ((int )sdvo_priv->caps.output_flags & (1 << 8)) {
#line 1070
    sdvo_priv->active_outputs = 1 << 8;
#line 1071
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1072
    encoder_type = 2;
#line 1073
    connector_type = 3;
  } else {
#line 1079
    __len = 2;
#line 1079
    if (__len >= (size_t )64) {
#line 1079
      __ret = __memcpy(bytes, & sdvo_priv->caps.output_flags, __len);
    } else {
#line 1079
      __ret = __builtin_memcpy(bytes, & sdvo_priv->caps.output_flags, __len);
    }
#line 1080
    while (1) {
#line 1080
      if (drm_debug) {
#line 1080
        printk("<7>[drm:%s] %s: No active RGB or TMDS outputs (0x%02x%02x)\n", "intel_sdvo_init",
               sdvo_priv->output_device == 397632 ? "SDVOB" : "SDVOC", bytes[0], bytes[1]);
      } else {

      }
#line 1080
      break;
    }
#line 1083
    goto err_i2c;
  }
#line 1086
  drm_encoder_init(dev, & intel_output->enc, & intel_sdvo_enc_funcs, encoder_type);
#line 1087
  drm_encoder_helper_add(& intel_output->enc, & intel_sdvo_helper_funcs);
#line 1088
  connector->connector_type = connector_type;
#line 1090
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 1091
  drm_sysfs_connector_add(connector);
#line 1094
  intel_sdvo_set_target_input(intel_output, true, false);
#line 1096
  intel_sdvo_get_input_pixel_clock_range(intel_output, & sdvo_priv->pixel_clock_min,
                                         & sdvo_priv->pixel_clock_max);
#line 1101
  while (1) {
#line 1101
    if (drm_debug) {
#line 1101
      printk("<7>[drm:%s] %s device VID/DID: %02X:%02X.%02X, clock range %dMHz - %dMHz, input 1: %c, input 2: %c, output 1: %c, output 2: %c\n",
             "intel_sdvo_init", sdvo_priv->output_device == 397632 ? "SDVOB" : "SDVOC",
             sdvo_priv->caps.vendor_id, sdvo_priv->caps.device_id, sdvo_priv->caps.device_rev_id,
             sdvo_priv->pixel_clock_min / 1000, sdvo_priv->pixel_clock_max / 1000,
             sdvo_priv->caps.sdvo_inputs_mask & 1U ? 'Y' : 'N', sdvo_priv->caps.sdvo_inputs_mask & 2U ? 'Y' : 'N',
             (int )sdvo_priv->caps.output_flags & ((1 << 0) | (1 << 1)) ? 'Y' : 'N',
             (int )sdvo_priv->caps.output_flags & ((1 << 8) | (1 << 9)) ? 'Y' : 'N');
    } else {

    }
#line 1101
    break;
  }
#line 1118
  intel_output->ddc_bus = i2cbus;
#line 1120
  return;
  err_i2c: 
#line 1123
  intel_i2c_destroy(intel_output->i2c_bus);
  err_connector: 
#line 1125
  drm_connector_cleanup(connector);
#line 1126
  kfree(intel_output);
#line 1128
  return;
}
}
#line 1168 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_sdvo.c"
void ldv_main13_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_sdvo_dpms_26_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_sdvo_mode_fixup_24_p2 ;
  struct drm_display_mode *var_intel_sdvo_mode_set_25_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1350
  LDV_IN_INTERRUPT = 1;
#line 1359
  ldv_initialize();
#line 1369
  while (1) {
#line 1369
    tmp___0 = nondet_int();
#line 1369
    if (tmp___0) {

    } else {
#line 1369
      break;
    }
#line 1372
    tmp = nondet_int();
#line 1372
    switch (tmp) {
    case 0: 
#line 1395
    ldv_handler_precall();
#line 1396
    intel_sdvo_dpms(var_group1, var_intel_sdvo_dpms_26_p1);
#line 1403
    break;
    case 1: 
#line 1425
    ldv_handler_precall();
#line 1426
    intel_sdvo_mode_fixup(var_group1, var_group2, var_intel_sdvo_mode_fixup_24_p2);
#line 1433
    break;
    case 2: 
#line 1455
    ldv_handler_precall();
#line 1456
    intel_sdvo_mode_set(var_group1, var_group2, var_intel_sdvo_mode_set_25_p2);
#line 1463
    break;
    case 3: 
#line 1485
    ldv_handler_precall();
#line 1486
    intel_sdvo_save(var_group3);
#line 1493
    break;
    case 4: 
#line 1515
    ldv_handler_precall();
#line 1516
    intel_sdvo_restore(var_group3);
#line 1523
    break;
    case 5: 
#line 1545
    ldv_handler_precall();
#line 1546
    intel_sdvo_detect(var_group3);
#line 1553
    break;
    case 6: 
#line 1575
    ldv_handler_precall();
#line 1576
    intel_sdvo_destroy(var_group3);
#line 1583
    break;
    case 7: 
#line 1605
    ldv_handler_precall();
#line 1606
    intel_sdvo_get_modes(var_group3);
#line 1613
    break;
    case 8: 
#line 1635
    ldv_handler_precall();
#line 1636
    intel_sdvo_mode_valid(var_group3, var_group2);
#line 1643
    break;
    case 9: 
#line 1665
    ldv_handler_precall();
#line 1666
    intel_sdvo_enc_destroy(var_group1);
#line 1673
    break;
    default: 
#line 1674
    break;
    }
  }
#line 1683
  ldv_check_final_state();
#line 1686
  return;
}
}
#line 613 "include/drm/drm_crtc.h"
extern struct edid *drm_get_edid(struct drm_connector *connector , struct i2c_adapter *adapter ) ;
#line 616
extern int drm_add_edid_modes(struct drm_connector *connector , struct edid *edid ) ;
#line 649
extern int drm_mode_connector_update_edid_property(struct drm_connector *connector ,
                                                   struct edid *edid ) ;
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_modes.c"
bool intel_ddc_probe(struct intel_output *intel_output ) 
{ 
  u8 out_buf[2] ;
  u8 buf[2] ;
  int ret ;
  struct i2c_msg msgs[2] ;

  {
#line 37
  out_buf[0] = 0;
#line 37
  out_buf[1] = 0;
#line 40
  msgs[0].addr = 80;
#line 40
  msgs[0].flags = 0;
#line 40
  msgs[0].len = 1;
#line 40
  msgs[0].buf = out_buf;
#line 40
  msgs[1].addr = 80;
#line 40
  msgs[1].flags = 1;
#line 40
  msgs[1].len = 1;
#line 40
  msgs[1].buf = buf;
#line 55
  ret = i2c_transfer(& (intel_output->ddc_bus)->adapter, msgs, 2);
#line 56
  if (ret == 2) {
#line 57
    return (true);
  } else {

  }
#line 59
  return (false);
}
}
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_modes.c"
int intel_ddc_get_modes(struct intel_output *intel_output ) 
{ 
  struct edid *edid ;
  int ret ;

  {
#line 71
  ret = 0;
#line 73
  edid = drm_get_edid(& intel_output->base, & (intel_output->ddc_bus)->adapter);
#line 75
  if (edid) {
#line 76
    drm_mode_connector_update_edid_property(& intel_output->base, edid);
#line 78
    ret = drm_add_edid_modes(& intel_output->base, edid);
#line 79
    kfree(edid);
  } else {

  }
#line 82
  return (ret);
}
}
#line 167 "include/linux/kernel.h"
extern int ( /* format attribute */  snprintf)(char *buf , size_t size , char const   *fmt 
                                               , ...) ;
#line 289 "include/linux/jiffies.h"
extern unsigned long usecs_to_jiffies(unsigned int const   u ) ;
#line 458 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 460
  dev->driver_data = data;
#line 461
  return;
}
}
#line 380 "include/linux/i2c.h"
__inline static void i2c_set_adapdata(struct i2c_adapter *dev , void *data ) 
{ 


  {
#line 382
  dev_set_drvdata(& dev->dev, data);
#line 383
  return;
}
}
#line 425
extern int i2c_del_adapter(struct i2c_adapter * ) ;
#line 48 "include/linux/i2c-algo-bit.h"
extern int i2c_bit_add_bus(struct i2c_adapter * ) ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
static int get_clock(void *data ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_i915_private *dev_priv ;
  u32 val ;

  {
#line 45
  chan = data;
#line 46
  dev_priv = (chan->drm_dev)->dev_private;
#line 49
  val = readl(dev_priv->regs + chan->reg);
#line 50
  return ((val & (unsigned int )(1 << 4)) != 0U);
}
}
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
static int get_data(void *data ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_i915_private *dev_priv ;
  u32 val ;

  {
#line 55
  chan = data;
#line 56
  dev_priv = (chan->drm_dev)->dev_private;
#line 59
  val = readl(dev_priv->regs + chan->reg);
#line 60
  return ((val & (unsigned int )(1 << 12)) != 0U);
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
static void set_clock(void *data , int state_high ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 reserved ;
  u32 clock_bits ;
  unsigned int tmp ;

  {
#line 65
  chan = data;
#line 66
  dev = chan->drm_dev;
#line 67
  dev_priv = (chan->drm_dev)->dev_private;
#line 68
  reserved = 0;
#line 71
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 72
    tmp = readl(dev_priv->regs + chan->reg);
#line 72
    reserved = tmp & (unsigned int )((1 << 13) | (1 << 5));
  } else {

  }
#line 75
  if (state_high) {
#line 76
    clock_bits = (0 << 1) | (1 << 0);
  } else {
#line 78
    clock_bits = ((1 << 1) | (1 << 0)) | (1 << 2);
  }
#line 80
  writel(reserved | clock_bits, dev_priv->regs + chan->reg);
#line 81
  if (20 > 20000) {
#line 81
    __bad_udelay();
  } else {
#line 81
    __const_udelay(20UL * 4295UL);
  }
#line 82
  return;
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
static void set_data(void *data , int state_high ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 reserved ;
  u32 data_bits ;
  unsigned int tmp ;

  {
#line 86
  chan = data;
#line 87
  dev = chan->drm_dev;
#line 88
  dev_priv = (chan->drm_dev)->dev_private;
#line 89
  reserved = 0;
#line 92
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 93
    tmp = readl(dev_priv->regs + chan->reg);
#line 93
    reserved = tmp & (unsigned int )((1 << 13) | (1 << 5));
  } else {

  }
#line 96
  if (state_high) {
#line 97
    data_bits = (0 << 9) | (1 << 8);
  } else {
#line 99
    data_bits = ((1 << 9) | (1 << 8)) | (1 << 10);
  }
#line 102
  writel(reserved | data_bits, dev_priv->regs + chan->reg);
#line 103
  if (20 > 20000) {
#line 103
    __bad_udelay();
  } else {
#line 103
    __const_udelay(20UL * 4295UL);
  }
#line 104
  return;
}
}
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
struct intel_i2c_chan *intel_i2c_create(struct drm_device *dev , u32 const   reg ,
                                        char const   *name ) 
{ 
  struct intel_i2c_chan *chan ;
  void *tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;

  {
#line 132
  tmp = kzalloc(sizeof(struct intel_i2c_chan ), (16U | 64U) | 128U);
#line 132
  chan = tmp;
#line 133
  if (! chan) {
#line 134
    goto out_free;
  } else {

  }
#line 136
  chan->drm_dev = dev;
#line 137
  chan->reg = reg;
#line 138
  snprintf(chan->adapter.name, 20, "intel drm %s", name);
#line 139
  chan->adapter.owner = & __this_module;
#line 143
  chan->adapter.id = 65569;
#line 144
  chan->adapter.algo_data = & chan->algo;
#line 145
  chan->adapter.dev.parent = & (dev->pdev)->dev;
#line 146
  chan->algo.setsda = & set_data;
#line 147
  chan->algo.setscl = & set_clock;
#line 148
  chan->algo.getsda = & get_data;
#line 149
  chan->algo.getscl = & get_clock;
#line 150
  chan->algo.udelay = 20;
#line 151
  tmp___0 = usecs_to_jiffies(2200);
#line 151
  chan->algo.timeout = tmp___0;
#line 152
  chan->algo.data = chan;
#line 154
  i2c_set_adapdata(& chan->adapter, chan);
#line 156
  tmp___1 = i2c_bit_add_bus(& chan->adapter);
#line 156
  if (tmp___1) {
#line 157
    goto out_free;
  } else {

  }
#line 160
  set_data(chan, 1);
#line 161
  set_clock(chan, 1);
#line 162
  if (20 > 20000) {
#line 162
    __bad_udelay();
  } else {
#line 162
    __const_udelay(20UL * 4295UL);
  }
#line 164
  return (chan);
  out_free: 
#line 167
  kfree(chan);
#line 168
  return ((void *)0);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_i2c.c"
void intel_i2c_destroy(struct intel_i2c_chan *chan ) 
{ 


  {
#line 179
  if (! chan) {
#line 180
    return;
  } else {

  }
#line 182
  i2c_del_adapter(& chan->adapter);
#line 183
  kfree(chan);
#line 184
  return;
}
}
#line 144 "include/linux/kernel.h"
extern struct atomic_notifier_head panic_notifier_list ;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern char *strcpy(char *dest , char const   *src ) ;
#line 115 "include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh , struct notifier_block *nb ) ;
#line 128
extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh , struct notifier_block *nb ) ;
#line 315 "include/linux/tty_driver.h"
__inline extern struct tty_driver *tty_driver_kref_get(struct tty_driver *d ) 
{ 


  {
#line 317
  kref_get(& d->kref);
#line 318
  return (d);
}
}
#line 328 "include/linux/tty.h"
__inline extern struct tty_struct *tty_kref_get(struct tty_struct *tty ) 
{ 


  {
#line 330
  if (tty) {
#line 331
    kref_get(& tty->kref);
  } else {

  }
#line 332
  return (tty);
}
}
#line 54 "include/linux/sysrq.h"
extern int register_sysrq_key(int key , struct sysrq_key_op *op ) ;
#line 930 "include/linux/fb.h"
extern void cfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
#line 931
extern void cfb_copyarea(struct fb_info *info , struct fb_copyarea  const  *area ) ;
#line 932
extern void cfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) ;
#line 945
extern int register_framebuffer(struct fb_info *fb_info ) ;
#line 946
extern int unregister_framebuffer(struct fb_info *fb_info ) ;
#line 1007
extern struct fb_info *framebuffer_alloc(size_t size , struct device *dev ) ;
#line 1008
extern void framebuffer_release(struct fb_info *info ) ;
#line 137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
int intelfb_resize(struct drm_device *dev , struct drm_crtc *crtc ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_setcolreg(unsigned int regno , unsigned int red , unsigned int green ,
                             unsigned int blue , unsigned int transp , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  int i ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___1 ;
  struct drm_mode_set *modeset ;
  struct drm_framebuffer *fb ;

  {
#line 60
  par = info->par;
#line 61
  dev = par->dev;
#line 65
  __mptr = dev->mode_config.crtc_list.next;
#line 65
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 65
  while (1) {
#line 65
    __builtin_prefetch(crtc->head.next);
#line 65
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 65
      break;
    }
#line 66
    __mptr___1 = crtc;
#line 66
    intel_crtc = (struct intel_crtc *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 67
    modeset = & intel_crtc->mode_set;
#line 68
    fb = modeset->fb;
#line 70
    i = 0;
#line 70
    while (1) {
#line 70
      if (i < par->crtc_count) {

      } else {
#line 70
        break;
      }
#line 71
      if (crtc->base.id == par->crtc_ids[i]) {
#line 72
        break;
      } else {

      }
#line 70
      i = i + 1;
    }
#line 74
    if (i == par->crtc_count) {
#line 75
      goto __Cont;
    } else {

    }
#line 78
    if (regno > 255U) {
#line 79
      return (1);
    } else {

    }
#line 81
    if (fb->depth == 8U) {
#line 82
      intel_crtc_fb_gamma_set(crtc, red, green, blue, regno);
#line 83
      return (0);
    } else {

    }
#line 86
    if (regno < 16U) {
#line 87
      switch (fb->depth) {
      case 15U: 
#line 89
      fb->pseudo_palette[regno] = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
#line 92
      break;
      case 16U: 
#line 94
      fb->pseudo_palette[regno] = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
#line 97
      break;
      case 32U: 
      case 24U: 
#line 100
      fb->pseudo_palette[regno] = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
#line 103
      break;
      }
    } else {

    }
    __Cont: /* CIL Label */ 
#line 65
    __mptr___0 = crtc->head.next;
#line 65
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 107
  return (0);
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer *fb ;
  int depth ;

  {
#line 113
  par = info->par;
#line 114
  intel_fb = par->intel_fb;
#line 115
  fb = & intel_fb->base;
#line 118
  if (var->pixclock == (__u32 )-1 || ! var->pixclock) {
#line 119
    return (-22);
  } else {

  }
#line 122
  if (var->xres > fb->width || var->yres > fb->height) {
#line 123
    printk("<3>[drm:%s] *ERROR* Requested width/height is greater than current fb object %dx%d > %dx%d\n",
           "intelfb_check_var", var->xres, var->yres, fb->width, fb->height);
#line 124
    printk("<3>[drm:%s] *ERROR* Need resizing code.\n", "intelfb_check_var");
#line 125
    return (-22);
  } else {

  }
#line 128
  switch (var->bits_per_pixel) {
  case (__u32 )16: 
#line 130
  depth = var->green.length == (__u32 )6 ? 16 : 15;
#line 131
  break;
  case (__u32 )32: 
#line 133
  depth = var->transp.length > (__u32 )0 ? 32 : 24;
#line 134
  break;
  default: 
#line 136
  depth = var->bits_per_pixel;
#line 137
  break;
  }
#line 140
  switch (depth) {
  case 8: 
#line 142
  var->red.offset = 0;
#line 143
  var->green.offset = 0;
#line 144
  var->blue.offset = 0;
#line 145
  var->red.length = 8;
#line 146
  var->green.length = 8;
#line 147
  var->blue.length = 8;
#line 148
  var->transp.length = 0;
#line 149
  var->transp.offset = 0;
#line 150
  break;
  case 15: 
#line 152
  var->red.offset = 10;
#line 153
  var->green.offset = 5;
#line 154
  var->blue.offset = 0;
#line 155
  var->red.length = 5;
#line 156
  var->green.length = 5;
#line 157
  var->blue.length = 5;
#line 158
  var->transp.length = 1;
#line 159
  var->transp.offset = 15;
#line 160
  break;
  case 16: 
#line 162
  var->red.offset = 11;
#line 163
  var->green.offset = 5;
#line 164
  var->blue.offset = 0;
#line 165
  var->red.length = 5;
#line 166
  var->green.length = 6;
#line 167
  var->blue.length = 5;
#line 168
  var->transp.length = 0;
#line 169
  var->transp.offset = 0;
#line 170
  break;
  case 24: 
#line 172
  var->red.offset = 16;
#line 173
  var->green.offset = 8;
#line 174
  var->blue.offset = 0;
#line 175
  var->red.length = 8;
#line 176
  var->green.length = 8;
#line 177
  var->blue.length = 8;
#line 178
  var->transp.length = 0;
#line 179
  var->transp.offset = 0;
#line 180
  break;
  case 32: 
#line 182
  var->red.offset = 16;
#line 183
  var->green.offset = 8;
#line 184
  var->blue.offset = 0;
#line 185
  var->red.length = 8;
#line 186
  var->green.length = 8;
#line 187
  var->blue.length = 8;
#line 188
  var->transp.length = 8;
#line 189
  var->transp.offset = 24;
#line 190
  break;
  default: 
#line 192
  return (-22);
  }
#line 195
  return (0);
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_set_par(struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct fb_var_screeninfo *var ;
  int i ;
  struct drm_crtc *crtc ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___1 ;

  {
#line 202
  par = info->par;
#line 203
  dev = par->dev;
#line 204
  var = & info->var;
#line 207
  while (1) {
#line 207
    if (drm_debug) {
#line 207
      printk("<7>[drm:%s] %d %d\n", "intelfb_set_par", var->xres, var->pixclock);
    } else {

    }
#line 207
    break;
  }
#line 209
  if (var->pixclock != (__u32 )-1) {
#line 211
    printk("<3>[drm:%s] *ERROR* PIXEL CLCOK SET\n", "intelfb_set_par");
#line 212
    return (-22);
  } else {
#line 217
    __mptr = dev->mode_config.crtc_list.next;
#line 217
    crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 217
    while (1) {
#line 217
      __builtin_prefetch(crtc->head.next);
#line 217
      if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

      } else {
#line 217
        break;
      }
#line 218
      __mptr___1 = crtc;
#line 218
      intel_crtc = (struct intel_crtc *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 220
      i = 0;
#line 220
      while (1) {
#line 220
        if (i < par->crtc_count) {

        } else {
#line 220
          break;
        }
#line 221
        if (crtc->base.id == par->crtc_ids[i]) {
#line 222
          break;
        } else {

        }
#line 220
        i = i + 1;
      }
#line 224
      if (i == par->crtc_count) {
#line 225
        goto __Cont;
      } else {

      }
#line 227
      if ((unsigned long )crtc->fb == (unsigned long )intel_crtc->mode_set.fb) {
#line 228
        mutex_lock(& dev->mode_config.mutex);
#line 229
        ret = (*((crtc->funcs)->set_config))(& intel_crtc->mode_set);
#line 230
        mutex_unlock(& dev->mode_config.mutex);
#line 231
        if (ret) {
#line 232
          return (ret);
        } else {

        }
      } else {

      }
      __Cont: /* CIL Label */ 
#line 217
      __mptr___0 = crtc->head.next;
#line 217
      crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
    }
#line 235
    return (0);
  }
}
}
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_mode_set *modeset ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  int ret ;
  int i ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_crtc  const  *__mptr___1 ;

  {
#line 242
  par = info->par;
#line 243
  dev = par->dev;
#line 247
  ret = 0;
#line 250
  __mptr = dev->mode_config.crtc_list.next;
#line 250
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 250
  while (1) {
#line 250
    __builtin_prefetch(crtc->head.next);
#line 250
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 250
      break;
    }
#line 251
    i = 0;
#line 251
    while (1) {
#line 251
      if (i < par->crtc_count) {

      } else {
#line 251
        break;
      }
#line 252
      if (crtc->base.id == par->crtc_ids[i]) {
#line 253
        break;
      } else {

      }
#line 251
      i = i + 1;
    }
#line 255
    if (i == par->crtc_count) {
#line 256
      goto __Cont;
    } else {

    }
#line 258
    __mptr___1 = crtc;
#line 258
    intel_crtc = (struct intel_crtc *)((char *)__mptr___1 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 259
    modeset = & intel_crtc->mode_set;
#line 261
    modeset->x = var->xoffset;
#line 262
    modeset->y = var->yoffset;
#line 264
    if (modeset->num_connectors) {
#line 265
      mutex_lock(& dev->mode_config.mutex);
#line 266
      ret = (*((crtc->funcs)->set_config))(modeset);
#line 267
      mutex_unlock(& dev->mode_config.mutex);
#line 268
      if (! ret) {
#line 269
        info->var.xoffset = var->xoffset;
#line 270
        info->var.yoffset = var->yoffset;
      } else {

      }
    } else {

    }
    __Cont: /* CIL Label */ 
#line 250
    __mptr___0 = crtc->head.next;
#line 250
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 275
  return (ret);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static void intelfb_on(struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder *encoder ;
  int i ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 280
  par = info->par;
#line 281
  dev = par->dev;
#line 290
  __mptr = dev->mode_config.crtc_list.next;
#line 290
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 290
  while (1) {
#line 290
    __builtin_prefetch(crtc->head.next);
#line 290
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 290
      break;
    }
#line 291
    crtc_funcs = crtc->helper_private;
#line 293
    i = 0;
#line 293
    while (1) {
#line 293
      if (i < par->crtc_count) {

      } else {
#line 293
        break;
      }
#line 294
      if (crtc->base.id == par->crtc_ids[i]) {
#line 295
        break;
      } else {

      }
#line 293
      i = i + 1;
    }
#line 297
    (*(crtc_funcs->dpms))(crtc, 0);
#line 300
    __mptr___1 = dev->mode_config.encoder_list.next;
#line 300
    encoder = (struct drm_encoder *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_encoder *)0)->head));
#line 300
    while (1) {
#line 300
      __builtin_prefetch(encoder->head.next);
#line 300
      if ((unsigned long )(& encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {

      } else {
#line 300
        break;
      }
#line 301
      if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 303
        encoder_funcs = encoder->helper_private;
#line 304
        (*(encoder_funcs->dpms))(encoder, 0);
      } else {

      }
#line 300
      __mptr___2 = encoder->head.next;
#line 300
      encoder = (struct drm_encoder *)((char *)__mptr___2 - (unsigned int )(& ((struct drm_encoder *)0)->head));
    }
#line 290
    __mptr___0 = crtc->head.next;
#line 290
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 308
  return;
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static void intelfb_off(struct fb_info *info , int dpms_mode ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder *encoder ;
  int i ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 312
  par = info->par;
#line 313
  dev = par->dev;
#line 322
  __mptr = dev->mode_config.crtc_list.next;
#line 322
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 322
  while (1) {
#line 322
    __builtin_prefetch(crtc->head.next);
#line 322
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 322
      break;
    }
#line 323
    crtc_funcs = crtc->helper_private;
#line 325
    i = 0;
#line 325
    while (1) {
#line 325
      if (i < par->crtc_count) {

      } else {
#line 325
        break;
      }
#line 326
      if (crtc->base.id == par->crtc_ids[i]) {
#line 327
        break;
      } else {

      }
#line 325
      i = i + 1;
    }
#line 330
    __mptr___1 = dev->mode_config.encoder_list.next;
#line 330
    encoder = (struct drm_encoder *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_encoder *)0)->head));
#line 330
    while (1) {
#line 330
      __builtin_prefetch(encoder->head.next);
#line 330
      if ((unsigned long )(& encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {

      } else {
#line 330
        break;
      }
#line 331
      if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 333
        encoder_funcs = encoder->helper_private;
#line 334
        (*(encoder_funcs->dpms))(encoder, dpms_mode);
      } else {

      }
#line 330
      __mptr___2 = encoder->head.next;
#line 330
      encoder = (struct drm_encoder *)((char *)__mptr___2 - (unsigned int )(& ((struct drm_encoder *)0)->head));
    }
#line 337
    if (dpms_mode == 3) {
#line 338
      (*(crtc_funcs->dpms))(crtc, dpms_mode);
    } else {

    }
#line 322
    __mptr___0 = crtc->head.next;
#line 322
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 340
  return;
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_blank(int blank , struct fb_info *info ) 
{ 


  {
#line 344
  switch (blank) {
  case FB_BLANK_UNBLANK: 
#line 346
  intelfb_on(info);
#line 347
  break;
  case FB_BLANK_NORMAL: 
#line 349
  intelfb_off(info, 1);
#line 350
  break;
  case FB_BLANK_HSYNC_SUSPEND: 
#line 352
  intelfb_off(info, 1);
#line 353
  break;
  case FB_BLANK_VSYNC_SUSPEND: 
#line 355
  intelfb_off(info, 2);
#line 356
  break;
  case FB_BLANK_POWERDOWN: 
#line 358
  intelfb_off(info, 3);
#line 359
  break;
  }
#line 361
  return (0);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct fb_ops intelfb_ops  = 
#line 364
     {& __this_module, 0, 0, 0, 0, & intelfb_check_var, & intelfb_set_par, & intelfb_setcolreg,
    0, & intelfb_blank, & intelfb_pan_display, & cfb_fillrect, & cfb_copyarea, & cfb_imageblit,
    0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
int intelfb_resize(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct fb_info *info ;
  struct drm_framebuffer *fb ;
  struct drm_display_mode *mode ;

  {
#line 387
  mode = crtc->desired_mode;
#line 389
  fb = crtc->fb;
#line 390
  if (! fb) {
#line 391
    return (1);
  } else {

  }
#line 393
  info = fb->fbdev;
#line 394
  if (! info) {
#line 395
    return (1);
  } else {

  }
#line 397
  if (! mode) {
#line 398
    return (1);
  } else {

  }
#line 400
  info->var.xres = mode->hdisplay;
#line 401
  info->var.right_margin = mode->hsync_start - mode->hdisplay;
#line 402
  info->var.hsync_len = mode->hsync_end - mode->hsync_start;
#line 403
  info->var.left_margin = mode->htotal - mode->hsync_end;
#line 404
  info->var.yres = mode->vdisplay;
#line 405
  info->var.lower_margin = mode->vsync_start - mode->vdisplay;
#line 406
  info->var.vsync_len = mode->vsync_end - mode->vsync_start;
#line 407
  info->var.upper_margin = mode->vtotal - mode->vsync_end;
#line 408
  info->var.pixclock = (((10000000 / mode->htotal) * 1000) / mode->vtotal) * 100;
#line 410
  info->var.pixclock = (info->var.pixclock * (__u32 )1000) / (__u32 )mode->vrefresh;
#line 412
  return (0);
}
}
#line 414
extern void *__crc_intelfb_resize  __attribute__((__weak__)) ;
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static unsigned long const   __kcrctab_intelfb_resize  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_intelfb_resize);
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static char const   __kstrtab_intelfb_resize[15]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 414
  {      'i',      'n',      't',      'e', 
        'l',      'f',      'b',      '_', 
        'r',      'e',      's',      'i', 
        'z',      'e',      '\000'};
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct kernel_symbol  const  __ksymtab_intelfb_resize  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& intelfb_resize), __kstrtab_intelfb_resize};
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct drm_mode_set kernelfb_mode  ;
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_panic(struct notifier_block *n , unsigned long ununsed , void *panic_str ) 
{ 


  {
#line 421
  printk("<3>[drm:%s] *ERROR* panic occurred, switching back to text console\n", "intelfb_panic");
#line 423
  intelfb_restore();
#line 424
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct notifier_block paniced  =    {& intelfb_panic, 0, 0};
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_create(struct drm_device *dev , uint32_t fb_width , uint32_t fb_height ,
                          uint32_t surface_width , uint32_t surface_height , struct intel_framebuffer **intel_fb_p ) 
{ 
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_framebuffer *fb ;
  struct intel_framebuffer *intel_fb ;
  struct drm_mode_fb_cmd mode_cmd ;
  struct drm_gem_object *fbo ;
  struct drm_i915_gem_object *obj_priv ;
  struct device *device ;
  int size ;
  int ret ;
  int mmio_bar ;
  struct drm_framebuffer  const  *__mptr ;
  void *tmp ;

  {
#line 441
  fbo = (void *)0;
#line 443
  device = & (dev->pdev)->dev;
#line 444
  mmio_bar = (((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) ? 0 : 1;
#line 446
  mode_cmd.width = surface_width;
#line 447
  mode_cmd.height = surface_height;
#line 449
  mode_cmd.bpp = 32;
#line 450
  mode_cmd.pitch = (mode_cmd.width * ((mode_cmd.bpp + (uint32_t )1) / (uint32_t )8) + ((uint32_t )64 - (uint32_t )1)) & ~ ((uint32_t )64 - (uint32_t )1);
#line 451
  mode_cmd.depth = 24;
#line 453
  size = mode_cmd.pitch * mode_cmd.height;
#line 454
  size = (size + ((int )(1UL << 12) - 1)) & ~ ((int )(1UL << 12) - 1);
#line 455
  fbo = drm_gem_object_alloc(dev, size);
#line 456
  if (! fbo) {
#line 457
    printk("<3>failed to allocate framebuffer\n");
#line 458
    ret = -12;
#line 459
    goto out;
  } else {

  }
#line 461
  obj_priv = fbo->driver_private;
#line 463
  mutex_lock(& dev->struct_mutex);
#line 465
  ret = i915_gem_object_pin(fbo, 1UL << 12);
#line 466
  if (ret) {
#line 467
    printk("<3>[drm:%s] *ERROR* failed to pin fb: %d\n", "intelfb_create", ret);
#line 468
    goto out_unref;
  } else {

  }
#line 472
  i915_gem_object_set_to_gtt_domain(fbo, 1);
#line 474
  ret = intel_framebuffer_create(dev, & mode_cmd, & fb, fbo);
#line 475
  if (ret) {
#line 476
    printk("<3>[drm:%s] *ERROR* failed to allocate fb.\n", "intelfb_create");
#line 477
    goto out_unref;
  } else {

  }
#line 480
  list_add(& fb->filp_head, & dev->mode_config.fb_kernel_list);
#line 482
  __mptr = fb;
#line 482
  intel_fb = (struct intel_framebuffer *)((char *)__mptr - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 483
  *intel_fb_p = intel_fb;
#line 485
  info = framebuffer_alloc(sizeof(struct intelfb_par ), device);
#line 486
  if (! info) {
#line 487
    ret = -12;
#line 488
    goto out_unref;
  } else {

  }
#line 491
  par = info->par;
#line 493
  strcpy(info->fix.id, "inteldrmfb");
#line 494
  info->fix.type = 0;
#line 495
  info->fix.visual = 2;
#line 496
  info->fix.type_aux = 0;
#line 497
  info->fix.xpanstep = 1;
#line 498
  info->fix.ypanstep = 1;
#line 499
  info->fix.ywrapstep = 0;
#line 500
  info->fix.accel = 42;
#line 501
  info->fix.type_aux = 0;
#line 503
  info->flags = 1;
#line 505
  info->fbops = & intelfb_ops;
#line 507
  info->fix.line_length = fb->pitch;
#line 508
  info->fix.smem_start = dev->mode_config.fb_base + (unsigned long )obj_priv->gtt_offset;
#line 509
  info->fix.smem_len = size;
#line 511
  info->flags = 1;
#line 513
  tmp = ioremap_wc((dev->agp)->base + (unsigned long )obj_priv->gtt_offset, size);
#line 513
  info->screen_base = tmp;
#line 515
  if (! info->screen_base) {
#line 516
    ret = -28;
#line 517
    goto out_unref;
  } else {

  }
#line 519
  info->screen_size = size;
#line 523
  info->pseudo_palette = fb->pseudo_palette;
#line 524
  info->var.xres_virtual = fb->width;
#line 525
  info->var.yres_virtual = fb->height;
#line 526
  info->var.bits_per_pixel = fb->bits_per_pixel;
#line 527
  info->var.xoffset = 0;
#line 528
  info->var.yoffset = 0;
#line 529
  info->var.activate = 0;
#line 530
  info->var.height = -1;
#line 531
  info->var.width = -1;
#line 533
  info->var.xres = fb_width;
#line 534
  info->var.yres = fb_height;
#line 537
  info->fix.mmio_start = (dev->pdev)->resource[mmio_bar].start;
#line 538
  info->fix.mmio_len = (dev->pdev)->resource[mmio_bar].start == (resource_size_t )0 && (dev->pdev)->resource[mmio_bar].end == (dev->pdev)->resource[mmio_bar].start ? 0 : ((dev->pdev)->resource[mmio_bar].end - (dev->pdev)->resource[mmio_bar].start) + (resource_size_t )1;
#line 540
  info->pixmap.size = 64 * 1024;
#line 541
  info->pixmap.buf_align = 8;
#line 542
  info->pixmap.access_align = 32;
#line 543
  info->pixmap.flags = 2;
#line 544
  info->pixmap.scan_align = 1;
#line 546
  switch (fb->depth) {
  case 8U: 
#line 548
  info->var.red.offset = 0;
#line 549
  info->var.green.offset = 0;
#line 550
  info->var.blue.offset = 0;
#line 551
  info->var.red.length = 8;
#line 552
  info->var.green.length = 8;
#line 553
  info->var.blue.length = 8;
#line 554
  info->var.transp.offset = 0;
#line 555
  info->var.transp.length = 0;
#line 556
  break;
  case 15U: 
#line 558
  info->var.red.offset = 10;
#line 559
  info->var.green.offset = 5;
#line 560
  info->var.blue.offset = 0;
#line 561
  info->var.red.length = 5;
#line 562
  info->var.green.length = 5;
#line 563
  info->var.blue.length = 5;
#line 564
  info->var.transp.offset = 15;
#line 565
  info->var.transp.length = 1;
#line 566
  break;
  case 16U: 
#line 568
  info->var.red.offset = 11;
#line 569
  info->var.green.offset = 5;
#line 570
  info->var.blue.offset = 0;
#line 571
  info->var.red.length = 5;
#line 572
  info->var.green.length = 6;
#line 573
  info->var.blue.length = 5;
#line 574
  info->var.transp.offset = 0;
#line 575
  break;
  case 24U: 
#line 577
  info->var.red.offset = 16;
#line 578
  info->var.green.offset = 8;
#line 579
  info->var.blue.offset = 0;
#line 580
  info->var.red.length = 8;
#line 581
  info->var.green.length = 8;
#line 582
  info->var.blue.length = 8;
#line 583
  info->var.transp.offset = 0;
#line 584
  info->var.transp.length = 0;
#line 585
  break;
  case 32U: 
#line 587
  info->var.red.offset = 16;
#line 588
  info->var.green.offset = 8;
#line 589
  info->var.blue.offset = 0;
#line 590
  info->var.red.length = 8;
#line 591
  info->var.green.length = 8;
#line 592
  info->var.blue.length = 8;
#line 593
  info->var.transp.offset = 24;
#line 594
  info->var.transp.length = 8;
#line 595
  break;
  default: 
#line 597
  break;
  }
#line 600
  fb->fbdev = info;
#line 602
  par->intel_fb = intel_fb;
#line 603
  par->dev = dev;
#line 606
  printk("allocated %dx%d fb: 0x%08x, bo %p\n", intel_fb->base.width, intel_fb->base.height,
         obj_priv->gtt_offset, fbo);
#line 609
  mutex_unlock(& dev->struct_mutex);
#line 610
  return (0);
  out_unref: 
#line 613
  drm_gem_object_unreference(fbo);
#line 614
  mutex_unlock(& dev->struct_mutex);
  out: 
#line 616
  return (ret);
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_multi_fb_probe_crtc(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer *fb ;
  struct drm_connector *connector ;
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_mode_set *modeset ;
  unsigned int width ;
  unsigned int height ;
  int new_fb ;
  int ret ;
  int i ;
  int conn_count ;
  bool tmp ;
  struct drm_framebuffer  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  int tmp___0 ;

  {
#line 621
  __mptr = crtc;
#line 621
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 629
  new_fb = 0;
#line 632
  tmp = drm_helper_crtc_in_use(crtc);
#line 632
  if (tmp) {

  } else {
#line 633
    return (0);
  }
#line 635
  if (! crtc->desired_mode) {
#line 636
    return (0);
  } else {

  }
#line 638
  width = (crtc->desired_mode)->hdisplay;
#line 639
  height = (crtc->desired_mode)->vdisplay;
#line 642
  if (! intel_crtc->mode_set.fb) {
#line 643
    ret = intelfb_create(dev, width, height, width, height, & intel_fb);
#line 644
    if (ret) {
#line 645
      return (-22);
    } else {

    }
#line 646
    new_fb = 1;
  } else {
#line 648
    fb = intel_crtc->mode_set.fb;
#line 649
    __mptr___0 = fb;
#line 649
    intel_fb = (struct intel_framebuffer *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 650
    if (intel_fb->base.width < width || intel_fb->base.height < height) {
#line 651
      return (-22);
    } else {

    }
  }
#line 654
  info = intel_fb->base.fbdev;
#line 655
  par = info->par;
#line 657
  modeset = & intel_crtc->mode_set;
#line 658
  modeset->fb = & intel_fb->base;
#line 659
  conn_count = 0;
#line 660
  __mptr___1 = dev->mode_config.connector_list.next;
#line 660
  connector = (struct drm_connector *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 660
  while (1) {
#line 660
    __builtin_prefetch(connector->head.next);
#line 660
    if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {

    } else {
#line 660
      break;
    }
#line 661
    if (connector->encoder) {
#line 662
      if ((unsigned long )(connector->encoder)->crtc == (unsigned long )modeset->crtc) {
#line 663
        *(modeset->connectors + conn_count) = connector;
#line 664
        conn_count = conn_count + 1;
#line 665
        if (conn_count > 4) {
#line 666
          while (1) {
#line 666
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"),
                                 "i" (666), "i" (sizeof(struct bug_entry )));
#line 666
            while (1) {

            }
#line 666
            break;
          }
        } else {

        }
      } else {

      }
    } else {

    }
#line 660
    __mptr___2 = connector->head.next;
#line 660
    connector = (struct drm_connector *)((char *)__mptr___2 - (unsigned int )(& ((struct drm_connector *)0)->head));
  }
#line 670
  i = conn_count;
#line 670
  while (1) {
#line 670
    if (i < 4) {

    } else {
#line 670
      break;
    }
#line 671
    *(modeset->connectors + i) = (void *)0;
#line 670
    i = i + 1;
  }
#line 673
  par->crtc_ids[0] = crtc->base.id;
#line 675
  modeset->num_connectors = conn_count;
#line 676
  if ((unsigned long )modeset->mode != (unsigned long )(modeset->crtc)->desired_mode) {
#line 677
    modeset->mode = (modeset->crtc)->desired_mode;
  } else {

  }
#line 679
  par->crtc_count = 1;
#line 681
  if (new_fb) {
#line 682
    info->var.pixclock = -1;
#line 683
    tmp___0 = register_framebuffer(info);
#line 683
    if (tmp___0 < 0) {
#line 684
      return (-22);
    } else {

    }
  } else {
#line 686
    intelfb_set_par(info);
  }
#line 688
  printk("<6>fb%d: %s frame buffer device\n", info->node, info->fix.id);
#line 692
  kernelfb_mode = *modeset;
#line 693
  atomic_notifier_chain_register(& panic_notifier_list, & paniced);
#line 694
  printk("<6>registered panic notifier\n");
#line 696
  return (0);
}
}
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_multi_fb_probe(struct drm_device *dev ) 
{ 
  struct drm_crtc *crtc ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 703
  ret = 0;
#line 705
  __mptr = dev->mode_config.crtc_list.next;
#line 705
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 705
  while (1) {
#line 705
    __builtin_prefetch(crtc->head.next);
#line 705
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 705
      break;
    }
#line 706
    ret = intelfb_multi_fb_probe_crtc(dev, crtc);
#line 707
    if (ret) {
#line 708
      return (ret);
    } else {

    }
#line 705
    __mptr___0 = crtc->head.next;
#line 705
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 710
  return (ret);
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static int intelfb_single_fb_probe(struct drm_device *dev ) 
{ 
  struct drm_crtc *crtc ;
  struct drm_connector *connector ;
  unsigned int fb_width ;
  unsigned int fb_height ;
  unsigned int surface_width ;
  unsigned int surface_height ;
  int new_fb ;
  int crtc_count ;
  int ret ;
  int i ;
  int conn_count ;
  struct intel_framebuffer *intel_fb ;
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_mode_set *modeset ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  bool tmp ;
  struct drm_framebuffer *fb ;
  struct list_head  const  *__mptr___1 ;
  struct drm_framebuffer  const  *__mptr___2 ;
  int tmp___0 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___5 ;
  struct list_head  const  *__mptr___6 ;
  struct list_head  const  *__mptr___7 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 717
  fb_width = 4294967295U;
#line 717
  fb_height = 4294967295U;
#line 718
  surface_width = 0;
#line 718
  surface_height = 0;
#line 719
  new_fb = 0;
#line 720
  crtc_count = 0;
#line 721
  conn_count = 0;
#line 725
  modeset = (void *)0;
#line 727
  while (1) {
#line 727
    if (drm_debug) {
#line 727
      printk("<7>[drm:%s] \n", "intelfb_single_fb_probe");
    } else {

    }
#line 727
    break;
  }
#line 730
  __mptr = dev->mode_config.crtc_list.next;
#line 730
  crtc = (struct drm_crtc *)((char *)__mptr - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 730
  while (1) {
#line 730
    __builtin_prefetch(crtc->head.next);
#line 730
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 730
      break;
    }
#line 731
    tmp = drm_helper_crtc_in_use(crtc);
#line 731
    if (tmp) {

    } else {
#line 732
      goto __Cont;
    }
#line 734
    crtc_count = crtc_count + 1;
#line 735
    if (! crtc->desired_mode) {
#line 736
      goto __Cont;
    } else {

    }
#line 739
    if ((unsigned int )(crtc->desired_mode)->hdisplay < fb_width) {
#line 740
      fb_width = (crtc->desired_mode)->hdisplay;
    } else {

    }
#line 742
    if ((unsigned int )(crtc->desired_mode)->vdisplay < fb_height) {
#line 743
      fb_height = (crtc->desired_mode)->vdisplay;
    } else {

    }
#line 746
    if ((unsigned int )(crtc->desired_mode)->hdisplay > surface_width) {
#line 747
      surface_width = (crtc->desired_mode)->hdisplay;
    } else {

    }
#line 749
    if ((unsigned int )(crtc->desired_mode)->vdisplay > surface_height) {
#line 750
      surface_height = (crtc->desired_mode)->vdisplay;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 730
    __mptr___0 = crtc->head.next;
#line 730
    crtc = (struct drm_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 753
  if ((crtc_count == 0 || fb_width == 4294967295U) || fb_height == 4294967295U) {
#line 756
    while (1) {
#line 756
      if (drm_debug) {
#line 756
        printk("<7>[drm:%s] no CRTCs available?\n", "intelfb_single_fb_probe");
      } else {

      }
#line 756
      break;
    }
#line 757
    return (0);
  } else {

  }
#line 762
  tmp___0 = list_empty(& dev->mode_config.fb_kernel_list);
#line 762
  if (tmp___0) {
#line 763
    while (1) {
#line 763
      if (drm_debug) {
#line 763
        printk("<7>[drm:%s] creating new fb (console size %dx%d, buffer size %dx%d)\n",
               "intelfb_single_fb_probe", fb_width, fb_height, surface_width, surface_height);
      } else {

      }
#line 763
      break;
    }
#line 766
    ret = intelfb_create(dev, fb_width, fb_height, surface_width, surface_height,
                         & intel_fb);
#line 768
    if (ret) {
#line 769
      return (-22);
    } else {

    }
#line 770
    new_fb = 1;
  } else {
#line 774
    __mptr___1 = dev->mode_config.fb_kernel_list.next;
#line 774
    fb = (struct drm_framebuffer *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_framebuffer *)0)->filp_head));
#line 776
    __mptr___2 = fb;
#line 776
    intel_fb = (struct intel_framebuffer *)((char *)__mptr___2 - (unsigned int )(& ((struct intel_framebuffer *)0)->base));
#line 785
    if (fb->width < surface_width || fb->height < surface_height) {
#line 787
      printk("<3>[drm:%s] *ERROR* fb not large enough for console\n", "intelfb_single_fb_probe");
#line 788
      return (-22);
    } else {

    }
  }
#line 793
  info = intel_fb->base.fbdev;
#line 794
  par = info->par;
#line 796
  crtc_count = 0;
#line 801
  __mptr___3 = dev->mode_config.crtc_list.next;
#line 801
  crtc = (struct drm_crtc *)((char *)__mptr___3 - (unsigned int )(& ((struct drm_crtc *)0)->head));
#line 801
  while (1) {
#line 801
    __builtin_prefetch(crtc->head.next);
#line 801
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {

    } else {
#line 801
      break;
    }
#line 802
    __mptr___5 = crtc;
#line 802
    intel_crtc = (struct intel_crtc *)((char *)__mptr___5 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 804
    modeset = & intel_crtc->mode_set;
#line 805
    modeset->fb = & intel_fb->base;
#line 806
    conn_count = 0;
#line 807
    __mptr___6 = dev->mode_config.connector_list.next;
#line 807
    connector = (struct drm_connector *)((char *)__mptr___6 - (unsigned int )(& ((struct drm_connector *)0)->head));
#line 807
    while (1) {
#line 807
      __builtin_prefetch(connector->head.next);
#line 807
      if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {

      } else {
#line 807
        break;
      }
#line 809
      if (! connector->encoder) {
#line 810
        goto __Cont___0;
      } else {

      }
#line 812
      if ((unsigned long )(connector->encoder)->crtc == (unsigned long )modeset->crtc) {
#line 813
        tmp___1 = conn_count;
#line 813
        conn_count = conn_count + 1;
#line 813
        *(modeset->connectors + tmp___1) = connector;
#line 814
        if (conn_count > 4) {
#line 815
          while (1) {
#line 815
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"),
                                 "i" (815), "i" (sizeof(struct bug_entry )));
#line 815
            while (1) {

            }
#line 815
            break;
          }
        } else {

        }
      } else {

      }
      __Cont___0: /* CIL Label */ 
#line 807
      __mptr___7 = connector->head.next;
#line 807
      connector = (struct drm_connector *)((char *)__mptr___7 - (unsigned int )(& ((struct drm_connector *)0)->head));
    }
#line 820
    i = conn_count;
#line 820
    while (1) {
#line 820
      if (i < 4) {

      } else {
#line 820
        break;
      }
#line 821
      *(modeset->connectors + i) = (void *)0;
#line 820
      i = i + 1;
    }
#line 823
    tmp___2 = crtc_count;
#line 823
    crtc_count = crtc_count + 1;
#line 823
    par->crtc_ids[tmp___2] = crtc->base.id;
#line 825
    modeset->num_connectors = conn_count;
#line 826
    if ((unsigned long )modeset->mode != (unsigned long )(modeset->crtc)->desired_mode) {
#line 827
      modeset->mode = (modeset->crtc)->desired_mode;
    } else {

    }
#line 801
    __mptr___4 = crtc->head.next;
#line 801
    crtc = (struct drm_crtc *)((char *)__mptr___4 - (unsigned int )(& ((struct drm_crtc *)0)->head));
  }
#line 829
  par->crtc_count = crtc_count;
#line 831
  if (new_fb) {
#line 832
    info->var.pixclock = -1;
#line 833
    tmp___3 = register_framebuffer(info);
#line 833
    if (tmp___3 < 0) {
#line 834
      return (-22);
    } else {

    }
  } else {
#line 836
    intelfb_set_par(info);
  }
#line 838
  printk("<6>fb%d: %s frame buffer device\n", info->node, info->fix.id);
#line 842
  kernelfb_mode = *modeset;
#line 843
  atomic_notifier_chain_register(& panic_notifier_list, & paniced);
#line 844
  printk("<6>registered panic notifier\n");
#line 846
  return (0);
}
}
#line 854 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
void intelfb_restore(void) 
{ 


  {
#line 856
  drm_crtc_helper_set_config(& kernelfb_mode);
#line 857
  return;
}
}
#line 859 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static void intelfb_sysrq(int dummy1 , struct tty_struct *dummy3 ) 
{ 


  {
#line 861
  intelfb_restore();
#line 862
  return;
}
}
#line 864 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct sysrq_key_op sysrq_intelfb_restore_op  =    {& intelfb_sysrq, "force fb", "force restore of fb console", 0};
#line 870 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
int intelfb_probe(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 874
  while (1) {
#line 874
    if (drm_debug) {
#line 874
      printk("<7>[drm:%s] \n", "intelfb_probe");
    } else {

    }
#line 874
    break;
  }
#line 894
  if (i915_fbpercrtc == 1U) {
#line 895
    ret = intelfb_multi_fb_probe(dev);
  } else {
#line 897
    ret = intelfb_single_fb_probe(dev);
  }
#line 900
  register_sysrq_key('g', & sysrq_intelfb_restore_op);
#line 902
  return (ret);
}
}
#line 904
extern void *__crc_intelfb_probe  __attribute__((__weak__)) ;
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static unsigned long const   __kcrctab_intelfb_probe  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_intelfb_probe);
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static char const   __kstrtab_intelfb_probe[14]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 904
  {      'i',      'n',      't',      'e', 
        'l',      'f',      'b',      '_', 
        'p',      'r',      'o',      'b', 
        'e',      '\000'};
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct kernel_symbol  const  __ksymtab_intelfb_probe  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& intelfb_probe), __kstrtab_intelfb_probe};
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
int intelfb_remove(struct drm_device *dev , struct drm_framebuffer *fb ) 
{ 
  struct fb_info *info ;

  {
#line 910
  if (! fb) {
#line 911
    return (-22);
  } else {

  }
#line 913
  info = fb->fbdev;
#line 915
  if (info) {
#line 916
    unregister_framebuffer(info);
#line 917
    iounmap(info->screen_base);
#line 918
    framebuffer_release(info);
  } else {

  }
#line 921
  atomic_notifier_chain_unregister(& panic_notifier_list, & paniced);
#line 922
  memset(& kernelfb_mode, 0, sizeof(struct drm_mode_set ));
#line 923
  return (0);
}
}
#line 925
extern void *__crc_intelfb_remove  __attribute__((__weak__)) ;
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static unsigned long const   __kcrctab_intelfb_remove  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_intelfb_remove);
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static char const   __kstrtab_intelfb_remove[15]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
#line 925
  {      'i',      'n',      't',      'e', 
        'l',      'f',      'b',      '_', 
        'r',      'e',      'm',      'o', 
        'v',      'e',      '\000'};
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static struct kernel_symbol  const  __ksymtab_intelfb_remove  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& intelfb_remove), __kstrtab_intelfb_remove};
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
static char const   __mod_license926[34]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 926
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      ' ', 
        'a',      'n',      'd',      ' ', 
        'a',      'd',      'd',      'i', 
        't',      'i',      'o',      'n', 
        'a',      'l',      ' ',      'r', 
        'i',      'g',      'h',      't', 
        's',      '\000'};
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_fb.c"
void ldv_main16_sequence_infinite_withcheck_stateful(void) 
{ 
  struct fb_var_screeninfo *var_group1 ;
  struct fb_info *var_group2 ;
  unsigned int var_intelfb_setcolreg_0_p0 ;
  unsigned int var_intelfb_setcolreg_0_p1 ;
  unsigned int var_intelfb_setcolreg_0_p2 ;
  unsigned int var_intelfb_setcolreg_0_p3 ;
  unsigned int var_intelfb_setcolreg_0_p4 ;
  struct fb_info *var_intelfb_setcolreg_0_p5 ;
  int var_intelfb_blank_6_p0 ;
  struct notifier_block *var_group3 ;
  unsigned long var_intelfb_panic_8_p1 ;
  void *var_intelfb_panic_8_p2 ;
  int var_intelfb_sysrq_14_p0 ;
  struct tty_struct *var_group4 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1025
  LDV_IN_INTERRUPT = 1;
#line 1034
  ldv_initialize();
#line 1042
  while (1) {
#line 1042
    tmp___0 = nondet_int();
#line 1042
    if (tmp___0) {

    } else {
#line 1042
      break;
    }
#line 1045
    tmp = nondet_int();
#line 1045
    switch (tmp) {
    case 0: 
#line 1055
    ldv_handler_precall();
#line 1056
    intelfb_check_var(var_group1, var_group2);
#line 1063
    break;
    case 1: 
#line 1072
    ldv_handler_precall();
#line 1073
    intelfb_set_par(var_group2);
#line 1080
    break;
    case 2: 
#line 1089
    ldv_handler_precall();
#line 1090
    intelfb_setcolreg(var_intelfb_setcolreg_0_p0, var_intelfb_setcolreg_0_p1, var_intelfb_setcolreg_0_p2,
                      var_intelfb_setcolreg_0_p3, var_intelfb_setcolreg_0_p4, var_intelfb_setcolreg_0_p5);
#line 1097
    break;
    case 3: 
#line 1106
    ldv_handler_precall();
#line 1107
    intelfb_pan_display(var_group1, var_group2);
#line 1114
    break;
    case 4: 
#line 1123
    ldv_handler_precall();
#line 1124
    intelfb_blank(var_intelfb_blank_6_p0, var_group2);
#line 1131
    break;
    case 5: 
#line 1140
    ldv_handler_precall();
#line 1141
    intelfb_panic(var_group3, var_intelfb_panic_8_p1, var_intelfb_panic_8_p2);
#line 1148
    break;
    case 6: 
#line 1157
    ldv_handler_precall();
#line 1158
    intelfb_sysrq(var_intelfb_sysrq_14_p0, var_group4);
#line 1165
    break;
    default: 
#line 1166
    break;
    }
  }
#line 1175
  ldv_check_final_state();
#line 1178
  return;
}
}
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int strcmp(char const   *cs , char const   *ct ) ;
#line 25 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 645 "include/drm/drm_crtc.h"
extern int drm_mode_vrefresh(struct drm_display_mode *mode ) ;
#line 651
extern int drm_connector_property_set_value(struct drm_connector *connector , struct drm_property *property ,
                                            uint64_t value ) ;
#line 669
extern int drm_connector_attach_property(struct drm_connector *connector , struct drm_property *property ,
                                         uint64_t init_val ) ;
#line 677
extern int drm_mode_create_tv_properties(struct drm_device *dev , int num_formats ,
                                         char **formats ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static u32 const   filter_table[206]  = 
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
  {      2973773824U,      773862656,      889204256,      805351744, 
        899723616,      767569536,      2973774976U,      2975870976U, 
        782251584,      872426880,      805351712,      920695136, 
        757083888,      2971677568U,      2975870976U,      791689088, 
        855649472,      805351680,      941666656,      746598224, 
        2969580192U,      2975870976U,      797980864,      840969248, 
        805351648,      964735328,      734015424,      2967482816U, 
        2975870976U,      804272672,      828386144,      2954932416U, 
        987804000,      721426448,      2965385504U,      2973806624U, 
        405289888,      817900160,      2954932384U,      1012969792, 
        706746424,      2963288192U,      2971709472U,      406338848, 
        809511360,      2957029504U,      1038135552,      694163528, 
        2961190912U,      2969612352U,      407387840,      2956994816U, 
        2957029472U,      1065398464,      679483480,      2959126656U, 
        2963320928U,      408954912,      2963286048U,      45152, 
        2973773824U,      773862656,      889204256,      805351744, 
        899723616,      767569536,      2973774976U,      2975870976U, 
        782251584,      872426880,      805351712,      920695136, 
        757083888,      2971677568U,      2975870976U,      791689088, 
        855649472,      805351680,      941666656,      746598224, 
        2969580192U,      2975870976U,      797980864,      840969248, 
        805351648,      964735328,      734015424,      2967482816U, 
        2975870976U,      804272672,      828386144,      2954932416U, 
        987804000,      721426448,      2965385504U,      2973806624U, 
        405289888,      817900160,      2954932384U,      1012969792, 
        706746424,      2963288192U,      2971709472U,      406338848, 
        809511360,      2957029504U,      1038135552,      694163528, 
        2961190912U,      2969612352U,      407387840,      2956994816U, 
        2957029472U,      1065398464,      679483480,      2959126656U, 
        2963320928U,      408954912,      2963286048U,      45152, 
        910176256,      754986176,      805320256,      754988736, 
        901786816,      926953472,      746597696,      805320000, 
        763377600,      885009472,      943730688,      734014976, 
        805319744,      773863616,      872426368,      964702208, 
        725626432,      805319552,      778058240,      859843328, 
        981479488,      713043616,      809513728,      784350016, 
        847260224,      1006645312,      704655040,      813707840, 
        784350336,      838871488,      1027616896,      692072192, 
        813707712,      790642112,      830482688,      1048588480, 
        679489344,      817901888,      790642496,      826288192, 
        671101184,      671100672,      12544,      910176256, 
        754986176,      805320256,      754988736,      901786816, 
        926953472,      746597696,      805320000,      763377600, 
        885009472,      943730688,      734014976,      805319744, 
        773863616,      872426368,      964702208,      725626432, 
        805319552,      778058240,      859843328,      981479488, 
        713043616,      809513728,      784350016,      847260224, 
        1006645312,      704655040,      813707840,      784350336, 
        838871488,      1027616896,      692072192,      813707712, 
        790642112,      830482688,      1048588480,      679489344, 
        817901888,      790642496,      826288192,      671101184, 
        671100672,      12544};
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  ntsc_m_csc_composite  = 
#line 219
     {818, 301, 2003, 260, 1843, 1325, 1479, 3840, 832, 780, 1744, 3840};
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  ntsc_m_levels_composite  =    {225, 267, 113};
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  ntsc_m_csc_svideo  = 
#line 229
     {818, 301, 2003, 308, 1898, 1380, 781, 3840, 890, 829, 1782, 3840};
#line 235 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  ntsc_m_levels_svideo  =    {266, 316, 133};
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  ntsc_j_csc_composite  = 
#line 239
     {818, 301, 2003, 281, 1868, 1350, 1516, 3840, 858, 802, 1761, 3840};
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  ntsc_j_levels_composite  =    {225, 225, 113};
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  ntsc_j_csc_svideo  = 
#line 249
     {818, 301, 2003, 332, 1928, 1409, 802, 3840, 921, 854, 1802, 3840};
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  ntsc_j_levels_svideo  =    {266, 266, 133};
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_csc_composite  = 
#line 259
     {818, 301, 2003, 275, 1861, 1343, 1505, 3840, 851, 796, 1756, 3840};
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_levels_composite  =    {237, 237, 118};
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_csc_svideo  = 
#line 269
     {818, 301, 2003, 325, 1920, 1401, 796, 3840, 912, 847, 1797, 3840};
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_levels_svideo  =    {280, 280, 139};
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_m_csc_composite  = 
#line 279
     {818, 301, 2003, 260, 1843, 1325, 1479, 3840, 832, 780, 1744, 3840};
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_m_levels_composite  =    {225, 267, 113};
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_m_csc_svideo  = 
#line 289
     {818, 301, 2003, 308, 1898, 1380, 781, 3840, 890, 829, 1782, 3840};
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_m_levels_svideo  =    {266, 316, 133};
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_n_csc_composite  = 
#line 299
     {818, 301, 2003, 260, 1843, 1325, 1479, 3840, 832, 780, 1744, 3840};
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_n_levels_composite  =    {225, 267, 118};
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  pal_n_csc_svideo  = 
#line 309
     {818, 301, 2003, 308, 1898, 1380, 781, 3840, 890, 829, 1782, 3840};
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  pal_n_levels_svideo  =    {266, 316, 139};
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  sdtv_csc_yprpb  = 
#line 322
     {818, 301, 2003, 326, 1369, 851, 256, 3840, 256, 941, 1869, 3840};
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct color_conversion  const  hdtv_csc_yprpb  = 
#line 334
     {1459, 366, 1832, 326, 2005, 907, 256, 3840, 256, 977, 1724, 3840};
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct video_levels  const  component_levels  =    {279, 279, 0};
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct tv_mode  const  tv_modes[15]  = 
#line 415
  {      {"NTSC-M", 107520, 29970, 3 << 18, 64, 836, 124, 857, false, false, 0, 6, 7,
      6, true, 0, 1, 18, 20, 21, 240, true, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240,
      20013, 0, 136, 7624, 0, 1 << 24, false, & ntsc_m_levels_composite, & ntsc_m_levels_svideo,
      & ntsc_m_csc_composite, & ntsc_m_csc_svideo, filter_table, 0}, 
        {"NTSC-443", 107520, 29970, 3 << 18, 64, 836, 124, 857, false, false, 0, 6, 7,
      6, true, 0, 1, 18, 20, 21, 240, 8, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240,
      20625, 0, 168, 18557, 0, 2 << 24, true, & ntsc_m_levels_composite, & ntsc_m_levels_svideo,
      & ntsc_m_csc_composite, & ntsc_m_csc_svideo, filter_table, 0}, 
        {"NTSC-J", 107520, 29970, 3 << 18, 64, 836, 124, 857, false, false, 0, 6, 7,
      6, true, 0, 1, 18, 20, 21, 240, true, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240,
      20013, 0, 136, 7624, 0, 1 << 24, false, & ntsc_j_levels_composite, & ntsc_j_levels_svideo,
      & ntsc_j_csc_composite, & ntsc_j_csc_svideo, filter_table, 0}, 
        {"PAL-M", 107520, 29970, 3 << 18, 64, 836, 124, 857, false, false, 0, 6, 7, 6,
      true, 0, 1, 18, 20, 21, 240, true, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240,
      20013, 0, 136, 7624, 0, 1 << 24, false, & pal_m_levels_composite, & pal_m_levels_svideo,
      & pal_m_csc_composite, & pal_m_csc_svideo, filter_table, 0}, 
        {"PAL-N", 107520, 25000, 3 << 18, 64, 844, 128, 863, false, false, 0, 6, 7, 6,
      true, 0, 1, 18, 24, 25, 286, true, 73, 34, 8, 285, 8, 286, 9, 286, 9, 285, 20625,
      0, 168, 18557, 0, 2 << 24, true, & pal_n_levels_composite, & pal_n_levels_svideo,
      & pal_n_csc_composite, & pal_n_csc_svideo, filter_table, 0}, 
        {"PAL", 107520, 25000, 3 << 18, 64, 844, 128, 863, false, false, 0, 5, 6, 5,
      true, 0, 1, 15, 24, 25, 286, true, 73, 32, 8, 285, 8, 286, 9, 286, 9, 285, 20625,
      0, 168, 18557, 0, 2 << 24, true, & pal_levels_composite, & pal_levels_svideo,
      & pal_csc_composite, & pal_csc_svideo, filter_table, 0}, 
        {"480p@59.94Hz", 107520, 59940, 0 << 18, 64, 842, 122, 857, true, false, 1, 12,
      12, 12, false, 0, 0, 0, 44, 44, 496, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"480p@60Hz", 107520, 60000, 0 << 18, 64, 842, 122, 856, true, false, 1, 12,
      12, 12, false, 0, 0, 0, 44, 44, 496, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"576p", 107520, 50000, 0 << 18, 64, 859, 139, 863, true, false, 1, 10, 10, 10,
      false, 0, 0, 0, 48, 48, 575, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"720p@60Hz", 148800, 60000, 1 << 18, 80, 1580, 300, 1649, true, true, 1, 10,
      10, 10, false, 0, 0, 0, 29, 29, 719, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"720p@59.94Hz", 148800, 59940, 1 << 18, 80, 1580, 300, 1651, true, true, 1,
      10, 10, 10, false, 0, 0, 0, 29, 29, 719, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"720p@50Hz", 148800, 50000, 1 << 18, 80, 1580, 300, 1979, true, true, 1, 10,
      10, 10, false, 0, 0, 0, 29, 29, 719, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 800}, 
        {"1080i@50Hz", 148800, 25000, 1 << 18, 88, 2155, 235, 2639, false, true, 1, 4,
      5, 10, true, 4, 4, 10, 21, 22, 539, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"1080i@60Hz", 148800, 30000, 1 << 18, 88, 2155, 235, 2199, false, true, 1, 4,
      5, 10, true, 4, 4, 10, 21, 22, 539, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}, 
        {"1080i@59.94Hz", 148800, 29970, 1 << 18, 88, 2155, 235, 2200, false, true, 1,
      4, 5, 10, true, 4, 4, 10, 21, 22, 539, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, filter_table, 0}};
#line 902 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 905
  dev = encoder->dev;
#line 906
  dev_priv = dev->dev_private;
#line 908
  switch (mode) {
  case 0: 
#line 910
  tmp = readl(dev_priv->regs + 425984);
#line 910
  writel(tmp | (unsigned int )(1 << 31), dev_priv->regs + 425984);
#line 911
  break;
  case 3: 
  case 2: 
  case 1: 
#line 915
  tmp___0 = readl(dev_priv->regs + 425984);
#line 915
  writel(tmp___0 & (unsigned int )(~ (1 << 31)), dev_priv->regs + 425984);
#line 916
  break;
  }
#line 918
  return;
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  int i ;

  {
#line 923
  dev = connector->dev;
#line 924
  dev_priv = dev->dev_private;
#line 925
  __mptr = connector;
#line 925
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 926
  tv_priv = intel_output->dev_priv;
#line 929
  tv_priv->save_TV_H_CTL_1 = readl(dev_priv->regs + 426032);
#line 930
  tv_priv->save_TV_H_CTL_2 = readl(dev_priv->regs + 426036);
#line 931
  tv_priv->save_TV_H_CTL_3 = readl(dev_priv->regs + 426040);
#line 932
  tv_priv->save_TV_V_CTL_1 = readl(dev_priv->regs + 426044);
#line 933
  tv_priv->save_TV_V_CTL_2 = readl(dev_priv->regs + 426048);
#line 934
  tv_priv->save_TV_V_CTL_3 = readl(dev_priv->regs + 426052);
#line 935
  tv_priv->save_TV_V_CTL_4 = readl(dev_priv->regs + 426056);
#line 936
  tv_priv->save_TV_V_CTL_5 = readl(dev_priv->regs + 426060);
#line 937
  tv_priv->save_TV_V_CTL_6 = readl(dev_priv->regs + 426064);
#line 938
  tv_priv->save_TV_V_CTL_7 = readl(dev_priv->regs + 426068);
#line 939
  tv_priv->save_TV_SC_CTL_1 = readl(dev_priv->regs + 426080);
#line 940
  tv_priv->save_TV_SC_CTL_2 = readl(dev_priv->regs + 426084);
#line 941
  tv_priv->save_TV_SC_CTL_3 = readl(dev_priv->regs + 426088);
#line 943
  tv_priv->save_TV_CSC_Y = readl(dev_priv->regs + 426000);
#line 944
  tv_priv->save_TV_CSC_Y2 = readl(dev_priv->regs + 426004);
#line 945
  tv_priv->save_TV_CSC_U = readl(dev_priv->regs + 426008);
#line 946
  tv_priv->save_TV_CSC_U2 = readl(dev_priv->regs + 426012);
#line 947
  tv_priv->save_TV_CSC_V = readl(dev_priv->regs + 426016);
#line 948
  tv_priv->save_TV_CSC_V2 = readl(dev_priv->regs + 426020);
#line 949
  tv_priv->save_TV_CLR_KNOBS = readl(dev_priv->regs + 426024);
#line 950
  tv_priv->save_TV_CLR_LEVEL = readl(dev_priv->regs + 426028);
#line 951
  tv_priv->save_TV_WIN_POS = readl(dev_priv->regs + 426096);
#line 952
  tv_priv->save_TV_WIN_SIZE = readl(dev_priv->regs + 426100);
#line 953
  tv_priv->save_TV_FILTER_CTL_1 = readl(dev_priv->regs + 426112);
#line 954
  tv_priv->save_TV_FILTER_CTL_2 = readl(dev_priv->regs + 426116);
#line 955
  tv_priv->save_TV_FILTER_CTL_3 = readl(dev_priv->regs + 426120);
#line 957
  i = 0;
#line 957
  while (1) {
#line 957
    if (i < 60) {

    } else {
#line 957
      break;
    }
#line 958
    tv_priv->save_TV_H_LUMA[i] = readl(dev_priv->regs + (426240 + (i << 2)));
#line 957
    i = i + 1;
  }
#line 959
  i = 0;
#line 959
  while (1) {
#line 959
    if (i < 60) {

    } else {
#line 959
      break;
    }
#line 960
    tv_priv->save_TV_H_CHROMA[i] = readl(dev_priv->regs + (426496 + (i << 2)));
#line 959
    i = i + 1;
  }
#line 961
  i = 0;
#line 961
  while (1) {
#line 961
    if (i < 43) {

    } else {
#line 961
      break;
    }
#line 962
    tv_priv->save_TV_V_LUMA[i] = readl(dev_priv->regs + (426752 + (i << 2)));
#line 961
    i = i + 1;
  }
#line 963
  i = 0;
#line 963
  while (1) {
#line 963
    if (i < 43) {

    } else {
#line 963
      break;
    }
#line 964
    tv_priv->save_TV_V_CHROMA[i] = readl(dev_priv->regs + (427008 + (i << 2)));
#line 963
    i = i + 1;
  }
#line 966
  tv_priv->save_TV_DAC = readl(dev_priv->regs + 425988);
#line 967
  tv_priv->save_TV_CTL = readl(dev_priv->regs + 425984);
#line 968
  return;
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  int i ;
  struct drm_crtc  const  *__mptr___0 ;
  int pipeconf_reg ;
  int dspcntr_reg ;
  int pipeconf ;
  unsigned int tmp ;
  int dspcntr ;
  unsigned int tmp___0 ;
  int dspbase_reg ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 973
  dev = connector->dev;
#line 974
  dev_priv = dev->dev_private;
#line 975
  __mptr = connector;
#line 975
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 976
  tv_priv = intel_output->dev_priv;
#line 977
  crtc = (connector->encoder)->crtc;
#line 982
  if (! crtc) {
#line 983
    return;
  } else {

  }
#line 985
  __mptr___0 = crtc;
#line 985
  intel_crtc = (struct intel_crtc *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 986
  writel(tv_priv->save_TV_H_CTL_1, dev_priv->regs + 426032);
#line 987
  writel(tv_priv->save_TV_H_CTL_2, dev_priv->regs + 426036);
#line 988
  writel(tv_priv->save_TV_H_CTL_3, dev_priv->regs + 426040);
#line 989
  writel(tv_priv->save_TV_V_CTL_1, dev_priv->regs + 426044);
#line 990
  writel(tv_priv->save_TV_V_CTL_2, dev_priv->regs + 426048);
#line 991
  writel(tv_priv->save_TV_V_CTL_3, dev_priv->regs + 426052);
#line 992
  writel(tv_priv->save_TV_V_CTL_4, dev_priv->regs + 426056);
#line 993
  writel(tv_priv->save_TV_V_CTL_5, dev_priv->regs + 426060);
#line 994
  writel(tv_priv->save_TV_V_CTL_6, dev_priv->regs + 426064);
#line 995
  writel(tv_priv->save_TV_V_CTL_7, dev_priv->regs + 426068);
#line 996
  writel(tv_priv->save_TV_SC_CTL_1, dev_priv->regs + 426080);
#line 997
  writel(tv_priv->save_TV_SC_CTL_2, dev_priv->regs + 426084);
#line 998
  writel(tv_priv->save_TV_SC_CTL_3, dev_priv->regs + 426088);
#line 1000
  writel(tv_priv->save_TV_CSC_Y, dev_priv->regs + 426000);
#line 1001
  writel(tv_priv->save_TV_CSC_Y2, dev_priv->regs + 426004);
#line 1002
  writel(tv_priv->save_TV_CSC_U, dev_priv->regs + 426008);
#line 1003
  writel(tv_priv->save_TV_CSC_U2, dev_priv->regs + 426012);
#line 1004
  writel(tv_priv->save_TV_CSC_V, dev_priv->regs + 426016);
#line 1005
  writel(tv_priv->save_TV_CSC_V2, dev_priv->regs + 426020);
#line 1006
  writel(tv_priv->save_TV_CLR_KNOBS, dev_priv->regs + 426024);
#line 1007
  writel(tv_priv->save_TV_CLR_LEVEL, dev_priv->regs + 426028);
#line 1010
  pipeconf_reg = intel_crtc->pipe == 0 ? 458760 : 462856;
#line 1012
  dspcntr_reg = intel_crtc->plane == 0 ? 459136 : 463232;
#line 1014
  tmp = readl(dev_priv->regs + pipeconf_reg);
#line 1014
  pipeconf = tmp;
#line 1015
  tmp___0 = readl(dev_priv->regs + dspcntr_reg);
#line 1015
  dspcntr = tmp___0;
#line 1016
  dspbase_reg = intel_crtc->plane == 0 ? 459140 : 463236;
#line 1019
  writel(dspcntr & ~ (1 << 31), dev_priv->regs + dspcntr_reg);
#line 1021
  tmp___1 = readl(dev_priv->regs + dspbase_reg);
#line 1021
  writel(tmp___1, dev_priv->regs + dspbase_reg);
#line 1023
  if (! ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1025
    intel_wait_for_vblank(dev);
  } else {

  }
#line 1028
  writel(pipeconf & ~ (1 << 31), dev_priv->regs + pipeconf_reg);
#line 1030
  intel_wait_for_vblank(dev);
#line 1033
  writel(tv_priv->save_TV_FILTER_CTL_1, dev_priv->regs + 426112);
#line 1034
  writel(tv_priv->save_TV_FILTER_CTL_2, dev_priv->regs + 426116);
#line 1035
  writel(tv_priv->save_TV_FILTER_CTL_3, dev_priv->regs + 426120);
#line 1036
  writel(tv_priv->save_TV_WIN_POS, dev_priv->regs + 426096);
#line 1037
  writel(tv_priv->save_TV_WIN_SIZE, dev_priv->regs + 426100);
#line 1038
  writel(pipeconf, dev_priv->regs + pipeconf_reg);
#line 1039
  writel(dspcntr, dev_priv->regs + dspcntr_reg);
#line 1041
  tmp___2 = readl(dev_priv->regs + dspbase_reg);
#line 1041
  writel(tmp___2, dev_priv->regs + dspbase_reg);
#line 1044
  i = 0;
#line 1044
  while (1) {
#line 1044
    if (i < 60) {

    } else {
#line 1044
      break;
    }
#line 1045
    writel(tv_priv->save_TV_H_LUMA[i], dev_priv->regs + (426240 + (i << 2)));
#line 1044
    i = i + 1;
  }
#line 1046
  i = 0;
#line 1046
  while (1) {
#line 1046
    if (i < 60) {

    } else {
#line 1046
      break;
    }
#line 1047
    writel(tv_priv->save_TV_H_CHROMA[i], dev_priv->regs + (426496 + (i << 2)));
#line 1046
    i = i + 1;
  }
#line 1048
  i = 0;
#line 1048
  while (1) {
#line 1048
    if (i < 43) {

    } else {
#line 1048
      break;
    }
#line 1049
    writel(tv_priv->save_TV_V_LUMA[i], dev_priv->regs + (426752 + (i << 2)));
#line 1048
    i = i + 1;
  }
#line 1050
  i = 0;
#line 1050
  while (1) {
#line 1050
    if (i < 43) {

    } else {
#line 1050
      break;
    }
#line 1051
    writel(tv_priv->save_TV_V_CHROMA[i], dev_priv->regs + (427008 + (i << 2)));
#line 1050
    i = i + 1;
  }
#line 1053
  writel(tv_priv->save_TV_DAC, dev_priv->regs + 425988);
#line 1054
  writel(tv_priv->save_TV_CTL, dev_priv->regs + 425984);
#line 1055
  return;
}
}
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct tv_mode  const  *intel_tv_mode_lookup(char *tv_format ) 
{ 
  int i ;
  struct tv_mode  const  *tv_mode ;
  int tmp ;

  {
#line 1062
  i = 0;
#line 1062
  while (1) {
#line 1062
    if ((unsigned long )i < sizeof(tv_modes) / sizeof(tv_modes[0])) {

    } else {
#line 1062
      break;
    }
#line 1063
    tv_mode = & tv_modes[i];
#line 1065
    tmp = strcmp(tv_format, tv_mode->name);
#line 1065
    if (tmp) {

    } else {
#line 1066
      return (tv_mode);
    }
#line 1062
    i = i + 1;
  }
#line 1068
  return ((void *)0);
}
}
#line 1071 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct tv_mode  const  *intel_tv_mode_find(struct intel_output *intel_output ) 
{ 
  struct intel_tv_priv *tv_priv ;
  struct tv_mode  const  *tmp ;

  {
#line 1074
  tv_priv = intel_output->dev_priv;
#line 1076
  tmp = intel_tv_mode_lookup(tv_priv->tv_format);
#line 1076
  return (tmp);
}
}
#line 1079 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static enum drm_mode_status intel_tv_mode_valid(struct drm_connector *connector ,
                                                struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  int __x ;
  int tmp___0 ;

  {
#line 1082
  __mptr = connector;
#line 1082
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1083
  tmp = intel_tv_mode_find(intel_output);
#line 1083
  tv_mode = tmp;
#line 1086
  if (tv_mode) {
#line 1086
    tmp___0 = drm_mode_vrefresh(mode);
#line 1086
    __x = tv_mode->refresh - (int const   )tmp___0;
#line 1086
    if ((__x < 0 ? - __x : __x) < 1) {
#line 1087
      return (MODE_OK);
    } else {

    }
  } else {

  }
#line 1088
  return (MODE_CLOCK_RANGE);
}
}
#line 1092 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static bool intel_tv_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_mode_config *drm_config ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  struct drm_encoder *other_encoder ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1096
  dev = encoder->dev;
#line 1097
  drm_config = & dev->mode_config;
#line 1098
  __mptr = encoder;
#line 1098
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 1099
  tmp = intel_tv_mode_find(intel_output);
#line 1099
  tv_mode = tmp;
#line 1102
  if (! tv_mode) {
#line 1103
    return (false);
  } else {

  }
#line 1106
  __mptr___0 = drm_config->encoder_list.next;
#line 1106
  other_encoder = (struct drm_encoder *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_encoder *)0)->head));
#line 1106
  while (1) {
#line 1106
    __builtin_prefetch(other_encoder->head.next);
#line 1106
    if ((unsigned long )(& other_encoder->head) != (unsigned long )(& drm_config->encoder_list)) {

    } else {
#line 1106
      break;
    }
#line 1107
    if ((unsigned long )other_encoder != (unsigned long )encoder && (unsigned long )other_encoder->crtc == (unsigned long )encoder->crtc) {
#line 1109
      return (false);
    } else {

    }
#line 1106
    __mptr___1 = other_encoder->head.next;
#line 1106
    other_encoder = (struct drm_encoder *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_encoder *)0)->head));
  }
#line 1112
  adjusted_mode->clock = tv_mode->clock;
#line 1113
  return (true);
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                              struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_tv_priv *tv_priv ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  u32 tv_ctl ;
  u32 hctl1 ;
  u32 hctl2 ;
  u32 hctl3 ;
  u32 vctl1 ;
  u32 vctl2 ;
  u32 vctl3 ;
  u32 vctl4 ;
  u32 vctl5 ;
  u32 vctl6 ;
  u32 vctl7 ;
  u32 scctl1 ;
  u32 scctl2 ;
  u32 scctl3 ;
  int i ;
  int j ;
  struct video_levels  const  *video_levels ;
  struct color_conversion  const  *color_conversion ;
  bool burst_ena ;
  int pipeconf_reg ;
  int dspcntr_reg ;
  int pipeconf ;
  unsigned int tmp___0 ;
  int dspcntr ;
  unsigned int tmp___1 ;
  int dspbase_reg ;
  int xpos ;
  int ypos ;
  unsigned int xsize ;
  unsigned int ysize ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1120
  dev = encoder->dev;
#line 1121
  dev_priv = dev->dev_private;
#line 1122
  crtc = encoder->crtc;
#line 1123
  __mptr = crtc;
#line 1123
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 1124
  __mptr___0 = encoder;
#line 1124
  intel_output = (struct intel_output *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 1125
  tv_priv = intel_output->dev_priv;
#line 1126
  tmp = intel_tv_mode_find(intel_output);
#line 1126
  tv_mode = tmp;
#line 1136
  if (! tv_mode) {
#line 1137
    return;
  } else {

  }
#line 1139
  tv_ctl = 0;
#line 1141
  switch (tv_priv->type) {
  default: 
#line 1145
  tv_ctl = tv_ctl | (unsigned int )(0 << 28);
#line 1146
  video_levels = tv_mode->composite_levels;
#line 1147
  color_conversion = tv_mode->composite_color;
#line 1148
  burst_ena = tv_mode->burst_ena;
#line 1149
  break;
  case 8: 
#line 1151
  tv_ctl = tv_ctl | (unsigned int )(2 << 28);
#line 1152
  video_levels = & component_levels;
#line 1153
  if (tv_mode->burst_ena) {
#line 1154
    color_conversion = & sdtv_csc_yprpb;
  } else {
#line 1156
    color_conversion = & hdtv_csc_yprpb;
  }
#line 1157
  burst_ena = false;
#line 1158
  break;
  case 6: 
#line 1160
  tv_ctl = tv_ctl | (unsigned int )(1 << 28);
#line 1161
  video_levels = tv_mode->svideo_levels;
#line 1162
  color_conversion = tv_mode->svideo_color;
#line 1163
  burst_ena = tv_mode->burst_ena;
#line 1164
  break;
  }
#line 1166
  hctl1 = (tv_mode->hsync_end << 16) | (tv_mode->htotal << 0);
#line 1169
  hctl2 = (tv_mode->hburst_start << 16) | (tv_mode->hburst_len << 0);
#line 1172
  if (burst_ena) {
#line 1173
    hctl2 = hctl2 | (unsigned int )(1 << 31);
  } else {

  }
#line 1175
  hctl3 = (tv_mode->hblank_start << 0) | (tv_mode->hblank_end << 16);
#line 1178
  vctl1 = ((tv_mode->nbr_end << 16) | (tv_mode->vi_end_f1 << 8)) | (tv_mode->vi_end_f2 << 0);
#line 1182
  vctl2 = ((tv_mode->vsync_len << 16) | (tv_mode->vsync_start_f1 << 8)) | (tv_mode->vsync_start_f2 << 0);
#line 1186
  vctl3 = ((tv_mode->veq_len << 16) | (tv_mode->veq_start_f1 << 8)) | (tv_mode->veq_start_f2 << 0);
#line 1190
  if (tv_mode->veq_ena) {
#line 1191
    vctl3 = vctl3 | (unsigned int )(1 << 31);
  } else {

  }
#line 1193
  vctl4 = (tv_mode->vburst_start_f1 << 16) | (tv_mode->vburst_end_f1 << 0);
#line 1196
  vctl5 = (tv_mode->vburst_start_f2 << 16) | (tv_mode->vburst_end_f2 << 0);
#line 1199
  vctl6 = (tv_mode->vburst_start_f3 << 16) | (tv_mode->vburst_end_f3 << 0);
#line 1202
  vctl7 = (tv_mode->vburst_start_f4 << 16) | (tv_mode->vburst_end_f4 << 0);
#line 1205
  if (intel_crtc->pipe == 1) {
#line 1206
    tv_ctl = tv_ctl | (unsigned int )(1 << 30);
  } else {

  }
#line 1207
  tv_ctl = tv_ctl | (unsigned int )tv_mode->oversample;
#line 1209
  if (tv_mode->progressive) {
#line 1210
    tv_ctl = tv_ctl | (unsigned int )(1 << 17);
  } else {

  }
#line 1211
  if (tv_mode->trilevel_sync) {
#line 1212
    tv_ctl = tv_ctl | (unsigned int )(1 << 21);
  } else {

  }
#line 1213
  if (tv_mode->pal_burst) {
#line 1214
    tv_ctl = tv_ctl | (unsigned int )(1 << 16);
  } else {

  }
#line 1215
  scctl1 = 0;
#line 1217
  if (tv_mode->dda1_inc) {
#line 1218
    scctl1 = scctl1 | (unsigned int )(1 << 31);
#line 1219
    scctl1 = scctl1 | (unsigned int )(video_levels->burst << 16);
  } else {

  }
#line 1222
  if (tv_mode->dda2_inc) {
#line 1223
    scctl1 = scctl1 | (unsigned int )(1 << 30);
  } else {

  }
#line 1225
  if (tv_mode->dda3_inc) {
#line 1226
    scctl1 = scctl1 | (unsigned int )(1 << 29);
  } else {

  }
#line 1228
  scctl1 = scctl1 | (unsigned int )tv_mode->sc_reset;
#line 1229
  scctl1 = scctl1 | (unsigned int )(tv_mode->dda1_inc << 0);
#line 1231
  scctl2 = (tv_mode->dda2_size << 16) | (tv_mode->dda2_inc << 0);
#line 1234
  scctl3 = (tv_mode->dda3_size << 16) | (tv_mode->dda3_inc << 0);
#line 1238
  if (dev->pci_device < 10098) {
#line 1239
    tv_ctl = tv_ctl | (unsigned int )((1 << 10) | (1 << 11));
  } else {

  }
#line 1241
  writel(hctl1, dev_priv->regs + 426032);
#line 1242
  writel(hctl2, dev_priv->regs + 426036);
#line 1243
  writel(hctl3, dev_priv->regs + 426040);
#line 1244
  writel(vctl1, dev_priv->regs + 426044);
#line 1245
  writel(vctl2, dev_priv->regs + 426048);
#line 1246
  writel(vctl3, dev_priv->regs + 426052);
#line 1247
  writel(vctl4, dev_priv->regs + 426056);
#line 1248
  writel(vctl5, dev_priv->regs + 426060);
#line 1249
  writel(vctl6, dev_priv->regs + 426064);
#line 1250
  writel(vctl7, dev_priv->regs + 426068);
#line 1251
  writel(scctl1, dev_priv->regs + 426080);
#line 1252
  writel(scctl2, dev_priv->regs + 426084);
#line 1253
  writel(scctl3, dev_priv->regs + 426088);
#line 1255
  if (color_conversion) {
#line 1256
    writel(((int const   )color_conversion->ry << 16) | (int const   )color_conversion->gy,
           dev_priv->regs + 426000);
#line 1258
    writel(((int const   )color_conversion->by << 16) | (int const   )color_conversion->ay,
           dev_priv->regs + 426004);
#line 1260
    writel(((int const   )color_conversion->ru << 16) | (int const   )color_conversion->gu,
           dev_priv->regs + 426008);
#line 1262
    writel(((int const   )color_conversion->bu << 16) | (int const   )color_conversion->au,
           dev_priv->regs + 426012);
#line 1264
    writel(((int const   )color_conversion->rv << 16) | (int const   )color_conversion->gv,
           dev_priv->regs + 426016);
#line 1266
    writel(((int const   )color_conversion->bv << 16) | (int const   )color_conversion->av,
           dev_priv->regs + 426020);
  } else {

  }
#line 1270
  writel(6316032, dev_priv->regs + 426024);
#line 1271
  if (video_levels) {
#line 1272
    writel((video_levels->black << 16) | (video_levels->blank << 0), dev_priv->regs + 426028);
  } else {

  }
#line 1276
  pipeconf_reg = intel_crtc->pipe == 0 ? 458760 : 462856;
#line 1278
  dspcntr_reg = intel_crtc->plane == 0 ? 459136 : 463232;
#line 1280
  tmp___0 = readl(dev_priv->regs + pipeconf_reg);
#line 1280
  pipeconf = tmp___0;
#line 1281
  tmp___1 = readl(dev_priv->regs + dspcntr_reg);
#line 1281
  dspcntr = tmp___1;
#line 1282
  dspbase_reg = intel_crtc->plane == 0 ? 459140 : 463236;
#line 1284
  xpos = 0;
#line 1284
  ypos = 0;
#line 1287
  writel(dspcntr & ~ (1 << 31), dev_priv->regs + dspcntr_reg);
#line 1289
  tmp___2 = readl(dev_priv->regs + dspbase_reg);
#line 1289
  writel(tmp___2, dev_priv->regs + dspbase_reg);
#line 1292
  if (! ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1293
    intel_wait_for_vblank(dev);
  } else {

  }
#line 1295
  writel(pipeconf & ~ (1 << 31), dev_priv->regs + pipeconf_reg);
#line 1297
  intel_wait_for_vblank(dev);
#line 1300
  writel(1 << 31, dev_priv->regs + 426112);
#line 1301
  xsize = tv_mode->hblank_start - tv_mode->hblank_end;
#line 1302
  if (tv_mode->progressive) {
#line 1303
    ysize = tv_mode->nbr_end + (int const   )1;
  } else {
#line 1305
    ysize = 2 * (int )tv_mode->nbr_end + 1;
  }
#line 1307
  xpos = xpos + tv_priv->margin[TV_MARGIN_LEFT];
#line 1308
  ypos = ypos + tv_priv->margin[TV_MARGIN_TOP];
#line 1309
  xsize = xsize - (unsigned int )(tv_priv->margin[TV_MARGIN_LEFT] + tv_priv->margin[TV_MARGIN_RIGHT]);
#line 1311
  ysize = ysize - (unsigned int )(tv_priv->margin[TV_MARGIN_TOP] + tv_priv->margin[TV_MARGIN_BOTTOM]);
#line 1313
  writel((xpos << 16) | ypos, dev_priv->regs + 426096);
#line 1314
  writel((xsize << 16) | ysize, dev_priv->regs + 426100);
#line 1316
  writel(pipeconf, dev_priv->regs + pipeconf_reg);
#line 1317
  writel(dspcntr, dev_priv->regs + dspcntr_reg);
#line 1319
  tmp___3 = readl(dev_priv->regs + dspbase_reg);
#line 1319
  writel(tmp___3, dev_priv->regs + dspbase_reg);
#line 1322
  j = 0;
#line 1323
  i = 0;
#line 1323
  while (1) {
#line 1323
    if (i < 60) {

    } else {
#line 1323
      break;
    }
#line 1324
    tmp___4 = j;
#line 1324
    j = j + 1;
#line 1324
    writel(*(tv_mode->filter_table + tmp___4), dev_priv->regs + (426240 + (i << 2)));
#line 1323
    i = i + 1;
  }
#line 1325
  i = 0;
#line 1325
  while (1) {
#line 1325
    if (i < 60) {

    } else {
#line 1325
      break;
    }
#line 1326
    tmp___5 = j;
#line 1326
    j = j + 1;
#line 1326
    writel(*(tv_mode->filter_table + tmp___5), dev_priv->regs + (426496 + (i << 2)));
#line 1325
    i = i + 1;
  }
#line 1327
  i = 0;
#line 1327
  while (1) {
#line 1327
    if (i < 43) {

    } else {
#line 1327
      break;
    }
#line 1328
    tmp___6 = j;
#line 1328
    j = j + 1;
#line 1328
    writel(*(tv_mode->filter_table + tmp___6), dev_priv->regs + (426752 + (i << 2)));
#line 1327
    i = i + 1;
  }
#line 1329
  i = 0;
#line 1329
  while (1) {
#line 1329
    if (i < 43) {

    } else {
#line 1329
      break;
    }
#line 1330
    tmp___7 = j;
#line 1330
    j = j + 1;
#line 1330
    writel(*(tv_mode->filter_table + tmp___7), dev_priv->regs + (427008 + (i << 2)));
#line 1329
    i = i + 1;
  }
#line 1331
  writel(0, dev_priv->regs + 425988);
#line 1332
  writel(tv_ctl, dev_priv->regs + 425984);
#line 1333
  return;
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct drm_display_mode  const  reported_modes[1]  = {      {{0, 0}, {0U, 0U}, {'N', 'T', 'S', 'C', ' ', '4', '8', '0', 'i', '\000'}, 0,
      0, 1 << 6, 107520, 1280, 1368, 1496, 1712, 0, 1024, 1027, 1034, 1104, 0, 0U,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.f}};
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static int intel_tv_detect_type(struct drm_crtc *crtc , struct intel_output *intel_output ) 
{ 
  struct drm_encoder *encoder ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  unsigned long irqflags ;
  u32 tv_ctl ;
  u32 save_tv_ctl ;
  u32 tv_dac ;
  u32 save_tv_dac ;
  int type ;

  {
#line 1363
  encoder = & intel_output->enc;
#line 1364
  dev = encoder->dev;
#line 1365
  dev_priv = dev->dev_private;
#line 1369
  type = 0;
#line 1371
  tv_dac = readl(dev_priv->regs + 425988);
#line 1374
  while (1) {
#line 1374
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 1374
    break;
  }
#line 1375
  i915_disable_pipestat(dev_priv, 0, (1UL << 26) | (1UL << 18));
#line 1377
  while (1) {
#line 1377
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 1377
    break;
  }
#line 1382
  if (intel_output->load_detect_temp) {
#line 1384
    save_tv_dac = tv_dac;
#line 1385
    tv_ctl = readl(dev_priv->regs + 425984);
#line 1386
    save_tv_ctl = tv_ctl;
#line 1387
    tv_ctl = tv_ctl & (unsigned int )(~ (1 << 31));
#line 1388
    tv_ctl = tv_ctl & (unsigned int )(~ (7 << 0));
#line 1389
    tv_ctl = tv_ctl | (unsigned int )(7 << 0);
#line 1390
    tv_dac = tv_dac & (unsigned int )(~ (7 << 28));
#line 1391
    tv_dac = tv_dac | (unsigned int )((((((((1 << 27) | (1 << 26)) | (1 << 25)) | (1 << 24)) | (1 << 7)) | (2 << 4)) | (2 << 2)) | (2 << 0));
#line 1399
    writel(tv_ctl, dev_priv->regs + 425984);
#line 1400
    writel(tv_dac, dev_priv->regs + 425988);
#line 1401
    intel_wait_for_vblank(dev);
#line 1402
    tv_dac = readl(dev_priv->regs + 425988);
#line 1403
    writel(save_tv_dac, dev_priv->regs + 425988);
#line 1404
    writel(save_tv_ctl, dev_priv->regs + 425984);
  } else {

  }
#line 1412
  if ((tv_dac & (unsigned int )(7 << 28)) == (unsigned int )((1 << 29) | (1 << 28))) {
#line 1413
    while (1) {
#line 1413
      if (drm_debug) {
#line 1413
        printk("<7>[drm:%s] Detected Composite TV connection\n", "intel_tv_detect_type");
      } else {

      }
#line 1413
      break;
    }
#line 1414
    type = 5;
  } else
#line 1415
  if ((tv_dac & (unsigned int )((1 << 30) | (1 << 29))) == (unsigned int )(1 << 30)) {
#line 1416
    while (1) {
#line 1416
      if (drm_debug) {
#line 1416
        printk("<7>[drm:%s] Detected S-Video TV connection\n", "intel_tv_detect_type");
      } else {

      }
#line 1416
      break;
    }
#line 1417
    type = 6;
  } else
#line 1418
  if ((tv_dac & (unsigned int )(7 << 28)) == 0U) {
#line 1419
    while (1) {
#line 1419
      if (drm_debug) {
#line 1419
        printk("<7>[drm:%s] Detected Component TV connection\n", "intel_tv_detect_type");
      } else {

      }
#line 1419
      break;
    }
#line 1420
    type = 8;
  } else {
#line 1422
    while (1) {
#line 1422
      if (drm_debug) {
#line 1422
        printk("<7>[drm:%s] No TV connection detected\n", "intel_tv_detect_type");
      } else {

      }
#line 1422
      break;
    }
#line 1423
    type = -1;
  }
#line 1427
  while (1) {
#line 1427
    irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 1427
    break;
  }
#line 1428
  i915_enable_pipestat(dev_priv, 0, (1UL << 26) | (1UL << 18));
#line 1430
  while (1) {
#line 1430
    _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 1430
    break;
  }
#line 1432
  return (type);
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static enum drm_connector_status intel_tv_detect(struct drm_connector *connector ) 
{ 
  struct drm_crtc *crtc ;
  struct drm_display_mode mode ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  struct drm_encoder *encoder ;
  int dpms_mode ;
  int type ;

  {
#line 1446
  __mptr = connector;
#line 1446
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1447
  tv_priv = intel_output->dev_priv;
#line 1448
  encoder = & intel_output->enc;
#line 1450
  type = tv_priv->type;
#line 1452
  mode = reported_modes[0];
#line 1453
  drm_mode_set_crtcinfo(& mode, 1);
#line 1455
  if (encoder->crtc) {
#line 1456
    type = intel_tv_detect_type(encoder->crtc, intel_output);
  } else {
#line 1458
    crtc = intel_get_load_detect_pipe(intel_output, & mode, & dpms_mode);
#line 1459
    if (crtc) {
#line 1460
      type = intel_tv_detect_type(crtc, intel_output);
#line 1461
      intel_release_load_detect_pipe(intel_output, dpms_mode);
    } else {
#line 1463
      type = -1;
    }
  }
#line 1466
  if (type < 0) {
#line 1467
    return (connector_status_disconnected);
  } else {

  }
#line 1469
  return (connector_status_connected);
}
}
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct input_res input_res_table[7]  = {      {"640x480", 640, 480}, 
        {"800x600", 800, 600}, 
        {"1024x768", 1024, 768}, 
        {"1280x1024", 1280, 1024}, 
        {"848x480", 848, 480}, 
        {"1280x720", 1280, 720}, 
        {"1920x1080", 1920, 1080}};
#line 1493 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static int intel_tv_get_modes(struct drm_connector *connector ) 
{ 
  struct drm_display_mode *mode_ptr ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  int j ;
  struct input_res *input ;
  unsigned int hactive_s ;
  unsigned int vactive_s ;
  void *tmp___0 ;

  {
#line 1497
  __mptr = connector;
#line 1497
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1498
  tmp = intel_tv_mode_find(intel_output);
#line 1498
  tv_mode = tmp;
#line 1501
  j = 0;
#line 1501
  while (1) {
#line 1501
    if ((unsigned long )j < sizeof(input_res_table) / sizeof(input_res_table[0])) {

    } else {
#line 1501
      break;
    }
#line 1503
    input = & input_res_table[j];
#line 1504
    hactive_s = input->w;
#line 1505
    vactive_s = input->h;
#line 1507
    if (tv_mode->max_srcw && input->w > (int )tv_mode->max_srcw) {
#line 1508
      goto __Cont;
    } else {

    }
#line 1510
    if (input->w > 1024 && (! tv_mode->progressive && ! tv_mode->component_only)) {
#line 1512
      goto __Cont;
    } else {

    }
#line 1514
    tmp___0 = drm_calloc(1, sizeof(struct drm_display_mode ), 2);
#line 1514
    mode_ptr = tmp___0;
#line 1516
    strncpy(mode_ptr->name, input->name, 32);
#line 1518
    mode_ptr->hdisplay = hactive_s;
#line 1519
    mode_ptr->hsync_start = hactive_s + 1U;
#line 1520
    mode_ptr->hsync_end = hactive_s + 64U;
#line 1521
    if (mode_ptr->hsync_end <= mode_ptr->hsync_start) {
#line 1522
      mode_ptr->hsync_end = mode_ptr->hsync_start + 1;
    } else {

    }
#line 1523
    mode_ptr->htotal = hactive_s + 96U;
#line 1525
    mode_ptr->vdisplay = vactive_s;
#line 1526
    mode_ptr->vsync_start = vactive_s + 1U;
#line 1527
    mode_ptr->vsync_end = vactive_s + 32U;
#line 1528
    if (mode_ptr->vsync_end <= mode_ptr->vsync_start) {
#line 1529
      mode_ptr->vsync_end = mode_ptr->vsync_start + 1;
    } else {

    }
#line 1530
    mode_ptr->vtotal = vactive_s + 33U;
#line 1532
    mode_ptr->clock = (int )(((tv_mode->refresh * (int const   )mode_ptr->vtotal) * (int const   )mode_ptr->htotal) / (int const   )1000) / 1000;
#line 1536
    mode_ptr->type = 1 << 6;
#line 1537
    drm_mode_probed_add(connector, mode_ptr);
    __Cont: /* CIL Label */ 
#line 1501
    j = j + 1;
  }
#line 1540
  return (0);
}
}
#line 1543 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 1546
  __mptr = connector;
#line 1546
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1548
  drm_sysfs_connector_remove(connector);
#line 1549
  drm_connector_cleanup(connector);
#line 1550
  drm_free(intel_output, sizeof(struct intel_output ) + sizeof(struct intel_tv_priv ),
           2);
#line 1552
  return;
}
}
#line 1555 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static int intel_tv_set_property(struct drm_connector *connector , struct drm_property *property ,
                                 uint64_t val ) 
{ 
  struct drm_device *dev ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  int ret ;

  {
#line 1559
  dev = connector->dev;
#line 1560
  __mptr = connector;
#line 1560
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 1561
  tv_priv = intel_output->dev_priv;
#line 1562
  ret = 0;
#line 1564
  ret = drm_connector_property_set_value(connector, property, val);
#line 1565
  if (ret < 0) {
#line 1566
    goto out;
  } else {

  }
#line 1568
  if ((unsigned long )property == (unsigned long )dev->mode_config.tv_left_margin_property) {
#line 1569
    tv_priv->margin[TV_MARGIN_LEFT] = val;
  } else
#line 1570
  if ((unsigned long )property == (unsigned long )dev->mode_config.tv_right_margin_property) {
#line 1571
    tv_priv->margin[TV_MARGIN_RIGHT] = val;
  } else
#line 1572
  if ((unsigned long )property == (unsigned long )dev->mode_config.tv_top_margin_property) {
#line 1573
    tv_priv->margin[TV_MARGIN_TOP] = val;
  } else
#line 1574
  if ((unsigned long )property == (unsigned long )dev->mode_config.tv_bottom_margin_property) {
#line 1575
    tv_priv->margin[TV_MARGIN_BOTTOM] = val;
  } else
#line 1576
  if ((unsigned long )property == (unsigned long )dev->mode_config.tv_mode_property) {
#line 1577
    if (val >= (uint64_t )(sizeof(tv_modes) / sizeof(tv_modes[0]))) {
#line 1578
      ret = -22;
#line 1579
      goto out;
    } else {

    }
#line 1581
    tv_priv->tv_format = tv_modes[val].name;
#line 1582
    intel_tv_mode_set(& intel_output->enc, (void *)0, (void *)0);
  } else {
#line 1584
    ret = -22;
#line 1585
    goto out;
  }
#line 1588
  intel_tv_mode_set(& intel_output->enc, (void *)0, (void *)0);
  out: 
#line 1590
  return (ret);
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct drm_encoder_helper_funcs  const  intel_tv_helper_funcs  = 
#line 1593
     {& intel_tv_dpms, 0, 0, & intel_tv_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_tv_mode_set, 0};
#line 1601 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct drm_connector_funcs  const  intel_tv_connector_funcs  =    {0, & intel_tv_save, & intel_tv_restore, & intel_tv_detect, & drm_helper_probe_single_connector_modes,
    & intel_tv_set_property, & intel_tv_destroy};
#line 1610 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct drm_connector_helper_funcs  const  intel_tv_connector_helper_funcs  =    {& intel_tv_get_modes,
    & intel_tv_mode_valid, & intel_best_encoder};
#line 1616 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static void intel_tv_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 1618
  drm_encoder_cleanup(encoder);
#line 1619
  return;
}
}
#line 1621 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
static struct drm_encoder_funcs  const  intel_tv_enc_funcs  =    {& intel_tv_enc_destroy};
#line 1626 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
void intel_tv_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  struct intel_tv_priv *tv_priv ;
  u32 tv_dac_on ;
  u32 tv_dac_off ;
  u32 save_tv_dac ;
  char **tv_format_names ;
  int i ;
  int initial_mode ;
  unsigned int tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 1629
  dev_priv = dev->dev_private;
#line 1635
  initial_mode = 0;
#line 1637
  tmp = readl(dev_priv->regs + 425984);
#line 1637
  if ((tmp & (unsigned int )(3 << 4)) == (unsigned int )(2 << 4)) {
#line 1638
    return;
  } else {

  }
#line 1641
  if (! dev_priv->int_tv_support) {
#line 1642
    return;
  } else {

  }
#line 1648
  save_tv_dac = readl(dev_priv->regs + 425988);
#line 1650
  writel(save_tv_dac | (unsigned int )(1 << 27), dev_priv->regs + 425988);
#line 1651
  tv_dac_on = readl(dev_priv->regs + 425988);
#line 1653
  writel(save_tv_dac & (unsigned int )(~ (1 << 27)), dev_priv->regs + 425988);
#line 1654
  tv_dac_off = readl(dev_priv->regs + 425988);
#line 1656
  writel(save_tv_dac, dev_priv->regs + 425988);
#line 1663
  if ((tv_dac_on & (unsigned int )(1 << 27)) == 0U || (tv_dac_off & (unsigned int )(1 << 27)) != 0U) {
#line 1665
    return;
  } else {

  }
#line 1667
  tmp___0 = drm_calloc(1, sizeof(struct intel_output ) + sizeof(struct intel_tv_priv ),
                       2);
#line 1667
  intel_output = tmp___0;
#line 1669
  if (! intel_output) {
#line 1670
    return;
  } else {

  }
#line 1672
  connector = & intel_output->base;
#line 1674
  drm_connector_init(dev, connector, & intel_tv_connector_funcs, 6);
#line 1677
  drm_encoder_init(dev, & intel_output->enc, & intel_tv_enc_funcs, 4);
#line 1680
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 1681
  tv_priv = (struct intel_tv_priv *)(intel_output + 1);
#line 1682
  intel_output->type = 5;
#line 1683
  intel_output->enc.possible_crtcs = (1 << 0) | (1 << 1);
#line 1684
  intel_output->enc.possible_clones = 1 << 5;
#line 1685
  intel_output->dev_priv = tv_priv;
#line 1686
  tv_priv->type = 0;
#line 1689
  tv_priv->margin[TV_MARGIN_LEFT] = 54;
#line 1690
  tv_priv->margin[TV_MARGIN_TOP] = 36;
#line 1691
  tv_priv->margin[TV_MARGIN_RIGHT] = 46;
#line 1692
  tv_priv->margin[TV_MARGIN_BOTTOM] = 37;
#line 1694
  tv_priv->tv_format = kstrdup(tv_modes[initial_mode].name, (16U | 64U) | 128U);
#line 1696
  drm_encoder_helper_add(& intel_output->enc, & intel_tv_helper_funcs);
#line 1697
  drm_connector_helper_add(connector, & intel_tv_connector_helper_funcs);
#line 1698
  connector->interlace_allowed = false;
#line 1699
  connector->doublescan_allowed = false;
#line 1702
  tmp___1 = drm_alloc((sizeof(char *) * sizeof(tv_modes)) / sizeof(tv_modes[0]), 2);
#line 1702
  tv_format_names = tmp___1;
#line 1704
  if (! tv_format_names) {
#line 1705
    goto out;
  } else {

  }
#line 1706
  i = 0;
#line 1706
  while (1) {
#line 1706
    if ((unsigned long )i < sizeof(tv_modes) / sizeof(tv_modes[0])) {

    } else {
#line 1706
      break;
    }
#line 1707
    *(tv_format_names + i) = tv_modes[i].name;
#line 1706
    i = i + 1;
  }
#line 1708
  drm_mode_create_tv_properties(dev, sizeof(tv_modes) / sizeof(tv_modes[0]), tv_format_names);
#line 1710
  drm_connector_attach_property(connector, dev->mode_config.tv_mode_property, initial_mode);
#line 1712
  drm_connector_attach_property(connector, dev->mode_config.tv_left_margin_property,
                                tv_priv->margin[TV_MARGIN_LEFT]);
#line 1715
  drm_connector_attach_property(connector, dev->mode_config.tv_top_margin_property,
                                tv_priv->margin[TV_MARGIN_TOP]);
#line 1718
  drm_connector_attach_property(connector, dev->mode_config.tv_right_margin_property,
                                tv_priv->margin[TV_MARGIN_RIGHT]);
#line 1721
  drm_connector_attach_property(connector, dev->mode_config.tv_bottom_margin_property,
                                tv_priv->margin[TV_MARGIN_BOTTOM]);
  out: 
#line 1725
  drm_sysfs_connector_add(connector);
#line 1726
  return;
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_tv.c"
void ldv_main17_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_tv_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_tv_mode_fixup_6_p2 ;
  struct drm_display_mode *var_intel_tv_mode_set_7_p2 ;
  struct drm_connector *var_group3 ;
  struct drm_property *var_group4 ;
  uint64_t var_intel_tv_set_property_12_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1845
  LDV_IN_INTERRUPT = 1;
#line 1854
  ldv_initialize();
#line 1864
  while (1) {
#line 1864
    tmp___0 = nondet_int();
#line 1864
    if (tmp___0) {

    } else {
#line 1864
      break;
    }
#line 1867
    tmp = nondet_int();
#line 1867
    switch (tmp) {
    case 0: 
#line 1879
    ldv_handler_precall();
#line 1880
    intel_tv_dpms(var_group1, var_intel_tv_dpms_0_p1);
#line 1887
    break;
    case 1: 
#line 1898
    ldv_handler_precall();
#line 1899
    intel_tv_mode_fixup(var_group1, var_group2, var_intel_tv_mode_fixup_6_p2);
#line 1906
    break;
    case 2: 
#line 1917
    ldv_handler_precall();
#line 1918
    intel_tv_mode_set(var_group1, var_group2, var_intel_tv_mode_set_7_p2);
#line 1925
    break;
    case 3: 
#line 1936
    ldv_handler_precall();
#line 1937
    intel_tv_save(var_group3);
#line 1944
    break;
    case 4: 
#line 1955
    ldv_handler_precall();
#line 1956
    intel_tv_restore(var_group3);
#line 1963
    break;
    case 5: 
#line 1974
    ldv_handler_precall();
#line 1975
    intel_tv_detect(var_group3);
#line 1982
    break;
    case 6: 
#line 1993
    ldv_handler_precall();
#line 1994
    intel_tv_destroy(var_group3);
#line 2001
    break;
    case 7: 
#line 2012
    ldv_handler_precall();
#line 2013
    intel_tv_set_property(var_group3, var_group4, var_intel_tv_set_property_12_p2);
#line 2020
    break;
    case 8: 
#line 2031
    ldv_handler_precall();
#line 2032
    intel_tv_mode_valid(var_group3, var_group2);
#line 2039
    break;
    case 9: 
#line 2050
    ldv_handler_precall();
#line 2051
    intel_tv_get_modes(var_group3);
#line 2058
    break;
    case 10: 
#line 2069
    ldv_handler_precall();
#line 2070
    intel_tv_enc_destroy(var_group1);
#line 2077
    break;
    default: 
#line 2078
    break;
    }
  }
#line 2087
  ldv_check_final_state();
#line 2090
  return;
}
}
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_dev_ops sil164_ops ;
#line 152
struct intel_dvo_dev_ops ch7xxx_ops ;
#line 153
struct intel_dvo_dev_ops ivch_ops ;
#line 154
struct intel_dvo_dev_ops tfp410_ops ;
#line 155
struct intel_dvo_dev_ops ch7017_ops ;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct intel_dvo_device intel_dvo_devices[5]  = {      {"sil164", 2, 397664, 0U, 56, 0, & sil164_ops, 0, 0, (_Bool)0}, 
        {"ch7xxx", 2, 397664, 0U, 118, 0, & ch7xxx_ops, 0, 0, (_Bool)0}, 
        {"ivch", 1, 397600, 0U, 2, 0, & ivch_ops, 0, 0, (_Bool)0}, 
        {"tfp410", 2, 397664, 0U, 56, 0, & tfp410_ops, 0, 0, (_Bool)0}, 
        {"ch7017", 1, 397664, 20512, 117, 0, & ch7017_ops, 0, 0, (_Bool)0}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  u32 dvo_reg ;
  u32 temp ;
  unsigned int tmp ;

  {
#line 82
  dev_priv = (encoder->dev)->dev_private;
#line 83
  __mptr = encoder;
#line 83
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 84
  dvo = intel_output->dev_priv;
#line 85
  dvo_reg = dvo->dvo_reg;
#line 86
  tmp = readl(dev_priv->regs + dvo_reg);
#line 86
  temp = tmp;
#line 88
  if (mode == 0) {
#line 89
    writel(temp | (unsigned int )(1 << 31), dev_priv->regs + dvo_reg);
#line 90
    readl(dev_priv->regs + dvo_reg);
#line 91
    (*((dvo->dev_ops)->dpms))(dvo, mode);
  } else {
#line 93
    (*((dvo->dev_ops)->dpms))(dvo, mode);
#line 94
    writel(temp & (unsigned int )(~ (1 << 31)), dev_priv->regs + dvo_reg);
#line 95
    readl(dev_priv->regs + dvo_reg);
  }
#line 97
  return;
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_save(struct drm_connector *connector ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 101
  dev_priv = (connector->dev)->dev_private;
#line 102
  __mptr = connector;
#line 102
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 103
  dvo = intel_output->dev_priv;
#line 108
  dev_priv->saveDVOA = readl(dev_priv->regs + 397600);
#line 109
  dev_priv->saveDVOB = readl(dev_priv->regs + 397632);
#line 110
  dev_priv->saveDVOC = readl(dev_priv->regs + 397664);
#line 112
  (*((dvo->dev_ops)->save))(dvo);
#line 113
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_restore(struct drm_connector *connector ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 117
  dev_priv = (connector->dev)->dev_private;
#line 118
  __mptr = connector;
#line 118
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 119
  dvo = intel_output->dev_priv;
#line 121
  (*((dvo->dev_ops)->restore))(dvo);
#line 123
  writel(dev_priv->saveDVOA, dev_priv->regs + 397600);
#line 124
  writel(dev_priv->saveDVOB, dev_priv->regs + 397632);
#line 125
  writel(dev_priv->saveDVOC, dev_priv->regs + 397664);
#line 126
  return;
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static int intel_dvo_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  int tmp ;

  {
#line 131
  __mptr = connector;
#line 131
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 132
  dvo = intel_output->dev_priv;
#line 134
  if (mode->flags & (unsigned int )(1 << 5)) {
#line 135
    return (MODE_NO_DBLESCAN);
  } else {

  }
#line 139
  if (dvo->panel_fixed_mode) {
#line 140
    if (mode->hdisplay > (dvo->panel_fixed_mode)->hdisplay) {
#line 141
      return (MODE_PANEL);
    } else {

    }
#line 142
    if (mode->vdisplay > (dvo->panel_fixed_mode)->vdisplay) {
#line 143
      return (MODE_PANEL);
    } else {

    }
  } else {

  }
#line 146
  tmp = (*((dvo->dev_ops)->mode_valid))(dvo, mode);
#line 146
  return (tmp);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static bool intel_dvo_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                 struct drm_display_mode *adjusted_mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  bool tmp ;

  {
#line 153
  __mptr = encoder;
#line 153
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 154
  dvo = intel_output->dev_priv;
#line 161
  if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((void *)0)) {
#line 163
    adjusted_mode->hdisplay = (dvo->panel_fixed_mode)->hdisplay;
#line 164
    adjusted_mode->hsync_start = (dvo->panel_fixed_mode)->hsync_start;
#line 165
    adjusted_mode->hsync_end = (dvo->panel_fixed_mode)->hsync_end;
#line 166
    adjusted_mode->htotal = (dvo->panel_fixed_mode)->htotal;
#line 167
    adjusted_mode->vdisplay = (dvo->panel_fixed_mode)->vdisplay;
#line 168
    adjusted_mode->vsync_start = (dvo->panel_fixed_mode)->vsync_start;
#line 169
    adjusted_mode->vsync_end = (dvo->panel_fixed_mode)->vsync_end;
#line 170
    adjusted_mode->vtotal = (dvo->panel_fixed_mode)->vtotal;
#line 171
    adjusted_mode->clock = (dvo->panel_fixed_mode)->clock;
#line 172
    drm_mode_set_crtcinfo(adjusted_mode, 1);
  } else {

  }
#line 176
  if ((dvo->dev_ops)->mode_fixup) {
#line 177
    tmp = (*((dvo->dev_ops)->mode_fixup))(dvo, mode, adjusted_mode);
#line 177
    return (tmp);
  } else {

  }
#line 179
  return (true);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                               struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_dvo_device *dvo ;
  int pipe ;
  u32 dvo_val ;
  u32 dvo_reg ;
  u32 dvo_srcdim_reg ;
  int dpll_reg ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 186
  dev = encoder->dev;
#line 187
  dev_priv = dev->dev_private;
#line 188
  __mptr = encoder->crtc;
#line 188
  intel_crtc = (struct intel_crtc *)((char *)__mptr - (unsigned int )(& ((struct intel_crtc *)0)->base));
#line 189
  __mptr___0 = encoder;
#line 189
  intel_output = (struct intel_output *)((char *)__mptr___0 - (unsigned int )(& ((struct intel_output *)0)->enc));
#line 190
  dvo = intel_output->dev_priv;
#line 191
  pipe = intel_crtc->pipe;
#line 193
  dvo_reg = dvo->dvo_reg;
#line 194
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 196
  switch (dvo_reg) {
  default: 
#line 199
  dvo_srcdim_reg = 397604;
#line 200
  break;
  case (u32 )397632: 
#line 202
  dvo_srcdim_reg = 397636;
#line 203
  break;
  case (u32 )397664: 
#line 205
  dvo_srcdim_reg = 397668;
#line 206
  break;
  }
#line 209
  (*((dvo->dev_ops)->mode_set))(dvo, mode, adjusted_mode);
#line 212
  tmp = readl(dev_priv->regs + dvo_reg);
#line 212
  dvo_val = tmp & (unsigned int )((7 << 24) | (1 << 6));
#line 214
  dvo_val = dvo_val | (unsigned int )(((1 << 14) | (1 << 7)) | (1 << 2));
#line 217
  if (pipe == 1) {
#line 218
    dvo_val = dvo_val | (unsigned int )(1 << 30);
  } else {

  }
#line 219
  dvo_val = dvo_val | (unsigned int )(1 << 28);
#line 220
  if (adjusted_mode->flags & (unsigned int )(1 << 0)) {
#line 221
    dvo_val = dvo_val | (unsigned int )(1 << 3);
  } else {

  }
#line 222
  if (adjusted_mode->flags & (unsigned int )(1 << 2)) {
#line 223
    dvo_val = dvo_val | (unsigned int )(1 << 4);
  } else {

  }
#line 225
  tmp___0 = readl(dev_priv->regs + dpll_reg);
#line 225
  writel(tmp___0 | (unsigned int )(1 << 30), dev_priv->regs + dpll_reg);
#line 230
  writel((adjusted_mode->hdisplay << 12) | (adjusted_mode->vdisplay << 0), dev_priv->regs + dvo_srcdim_reg);
#line 234
  writel(dvo_val, dev_priv->regs + dvo_reg);
#line 235
  return;
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static enum drm_connector_status intel_dvo_detect(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  enum drm_connector_status tmp ;

  {
#line 244
  __mptr = connector;
#line 244
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 245
  dvo = intel_output->dev_priv;
#line 247
  tmp = (*((dvo->dev_ops)->detect))(dvo);
#line 247
  return (tmp);
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static int intel_dvo_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  int tmp ;
  struct drm_display_mode *mode ;

  {
#line 252
  __mptr = connector;
#line 252
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 253
  dvo = intel_output->dev_priv;
#line 260
  intel_ddc_get_modes(intel_output);
#line 261
  tmp = list_empty(& connector->probed_modes);
#line 261
  if (tmp) {

  } else {
#line 262
    return (1);
  }
#line 265
  if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((void *)0)) {
#line 267
    mode = drm_mode_duplicate(connector->dev, dvo->panel_fixed_mode);
#line 268
    if (mode) {
#line 269
      drm_mode_probed_add(connector, mode);
#line 270
      return (1);
    } else {

    }
  } else {

  }
#line 273
  return (0);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 278
  __mptr = connector;
#line 278
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 279
  dvo = intel_output->dev_priv;
#line 281
  if (dvo) {
#line 282
    if ((dvo->dev_ops)->destroy) {
#line 283
      (*((dvo->dev_ops)->destroy))(dvo);
    } else {

    }
#line 284
    if (dvo->panel_fixed_mode) {
#line 285
      kfree(dvo->panel_fixed_mode);
    } else {

    }
  } else {

  }
#line 289
  if (intel_output->i2c_bus) {
#line 290
    intel_i2c_destroy(intel_output->i2c_bus);
  } else {

  }
#line 291
  if (intel_output->ddc_bus) {
#line 292
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 293
  drm_sysfs_connector_remove(connector);
#line 294
  drm_connector_cleanup(connector);
#line 295
  kfree(intel_output);
#line 296
  return;
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct drm_encoder_helper_funcs  const  intel_dvo_helper_funcs  = 
#line 311
     {& intel_dvo_dpms, 0, 0, & intel_dvo_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_dvo_mode_set, 0};
#line 319 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct drm_connector_funcs  const  intel_dvo_connector_funcs  =    {0, & intel_dvo_save, & intel_dvo_restore, & intel_dvo_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_dvo_destroy};
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct drm_connector_helper_funcs  const  intel_dvo_connector_helper_funcs  =    {& intel_dvo_get_modes,
    & intel_dvo_mode_valid, & intel_best_encoder};
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static void intel_dvo_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 335
  drm_encoder_cleanup(encoder);
#line 336
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct drm_encoder_funcs  const  intel_dvo_enc_funcs  =    {& intel_dvo_enc_destroy};
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
static struct drm_display_mode *intel_dvo_get_current_mode(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  uint32_t dvo_reg ;
  uint32_t dvo_val ;
  unsigned int tmp ;
  struct drm_display_mode *mode ;
  struct drm_crtc *crtc ;
  int pipe ;

  {
#line 352
  dev = connector->dev;
#line 353
  dev_priv = dev->dev_private;
#line 354
  __mptr = connector;
#line 354
  intel_output = (struct intel_output *)((char *)__mptr - (unsigned int )(& ((struct intel_output *)0)->base));
#line 355
  dvo = intel_output->dev_priv;
#line 356
  dvo_reg = dvo->dvo_reg;
#line 357
  tmp = readl(dev_priv->regs + dvo_reg);
#line 357
  dvo_val = tmp;
#line 358
  mode = (void *)0;
#line 363
  if (dvo_val & (unsigned int )(1 << 31)) {
#line 365
    pipe = dvo_val & (unsigned int )(1 << 30) ? 1 : 0;
#line 367
    crtc = intel_get_crtc_from_pipe(dev, pipe);
#line 368
    if (crtc) {
#line 369
      mode = intel_crtc_mode_get(dev, crtc);
#line 371
      if (mode) {
#line 372
        mode->type = mode->type | (1 << 3);
#line 373
        if (dvo_val & (unsigned int )(1 << 3)) {
#line 374
          mode->flags = mode->flags | (unsigned int )(1 << 0);
        } else {

        }
#line 375
        if (dvo_val & (unsigned int )(1 << 4)) {
#line 376
          mode->flags = mode->flags | (unsigned int )(1 << 2);
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 380
  return (mode);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
void intel_dvo_init(struct drm_device *dev ) 
{ 
  struct intel_output *intel_output ;
  struct intel_dvo_device *dvo ;
  struct intel_i2c_chan *i2cbus ;
  int ret ;
  int i ;
  int gpio_inited ;
  int encoder_type ;
  void *tmp ;
  struct drm_connector *connector ;
  int gpio ;
  bool tmp___0 ;

  {
#line 387
  i2cbus = (void *)0;
#line 388
  ret = 0;
#line 390
  gpio_inited = 0;
#line 391
  encoder_type = 0;
#line 392
  tmp = kzalloc(sizeof(struct intel_output ), (16U | 64U) | 128U);
#line 392
  intel_output = tmp;
#line 393
  if (! intel_output) {
#line 394
    return;
  } else {

  }
#line 397
  intel_output->ddc_bus = intel_i2c_create(dev, 20508, "DVODDC_D");
#line 398
  if (! intel_output->ddc_bus) {
#line 399
    goto free_intel;
  } else {

  }
#line 402
  i = 0;
#line 402
  while (1) {
#line 402
    if ((unsigned long )i < sizeof(intel_dvo_devices) / sizeof(intel_dvo_devices[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 402
      break;
    }
#line 403
    connector = & intel_output->base;
#line 406
    dvo = & intel_dvo_devices[i];
#line 412
    if (dvo->gpio != (u32 )0) {
#line 413
      gpio = dvo->gpio;
    } else
#line 414
    if (dvo->type == 1) {
#line 415
      gpio = 20500;
    } else {
#line 417
      gpio = 20512;
    }
#line 423
    if (gpio_inited != gpio) {
#line 424
      if ((unsigned long )i2cbus != (unsigned long )((void *)0)) {
#line 425
        intel_i2c_destroy(i2cbus);
      } else {

      }
#line 426
      i2cbus = intel_i2c_create(dev, gpio, gpio == 20500 ? "DVOI2C_B" : "DVOI2C_E");
#line 426
      if (i2cbus) {

      } else {
#line 428
        goto __Cont;
      }
#line 430
      gpio_inited = gpio;
    } else {

    }
#line 433
    if ((unsigned long )dvo->dev_ops != (unsigned long )((void *)0)) {
#line 434
      tmp___0 = (*((dvo->dev_ops)->init))(dvo, i2cbus);
#line 434
      ret = tmp___0;
    } else {
#line 436
      ret = false;
    }
#line 438
    if (! ret) {
#line 439
      goto __Cont;
    } else {

    }
#line 441
    intel_output->type = 2;
#line 442
    switch (dvo->type) {
    case 2: 
#line 444
    drm_connector_init(dev, connector, & intel_dvo_connector_funcs, 2);
#line 447
    encoder_type = 2;
#line 448
    break;
    case 1: 
#line 450
    drm_connector_init(dev, connector, & intel_dvo_connector_funcs, 7);
#line 453
    encoder_type = 3;
#line 454
    break;
    }
#line 457
    drm_connector_helper_add(connector, & intel_dvo_connector_helper_funcs);
#line 459
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 460
    connector->interlace_allowed = false;
#line 461
    connector->doublescan_allowed = false;
#line 463
    intel_output->dev_priv = dvo;
#line 464
    intel_output->i2c_bus = i2cbus;
#line 466
    drm_encoder_init(dev, & intel_output->enc, & intel_dvo_enc_funcs, encoder_type);
#line 468
    drm_encoder_helper_add(& intel_output->enc, & intel_dvo_helper_funcs);
#line 471
    drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 473
    if (dvo->type == 1) {
#line 481
      dvo->panel_fixed_mode = intel_dvo_get_current_mode(connector);
#line 483
      dvo->panel_wants_dither = true;
    } else {

    }
#line 486
    drm_sysfs_connector_add(connector);
#line 487
    return;
    __Cont: /* CIL Label */ 
#line 402
    i = i + 1;
  }
#line 490
  intel_i2c_destroy(intel_output->ddc_bus);
#line 492
  if ((unsigned long )i2cbus != (unsigned long )((void *)0)) {
#line 493
    intel_i2c_destroy(i2cbus);
  } else {

  }
  free_intel: 
#line 495
  kfree(intel_output);
#line 496
  return;
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/intel_dvo.c"
void ldv_main18_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_dvo_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_dvo_mode_fixup_4_p2 ;
  struct drm_display_mode *var_intel_dvo_mode_set_5_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 683
  LDV_IN_INTERRUPT = 1;
#line 692
  ldv_initialize();
#line 702
  while (1) {
#line 702
    tmp___0 = nondet_int();
#line 702
    if (tmp___0) {

    } else {
#line 702
      break;
    }
#line 705
    tmp = nondet_int();
#line 705
    switch (tmp) {
    case 0: 
#line 719
    ldv_handler_precall();
#line 720
    intel_dvo_dpms(var_group1, var_intel_dvo_dpms_0_p1);
#line 733
    break;
    case 1: 
#line 746
    ldv_handler_precall();
#line 747
    intel_dvo_mode_fixup(var_group1, var_group2, var_intel_dvo_mode_fixup_4_p2);
#line 758
    break;
    case 2: 
#line 773
    ldv_handler_precall();
#line 774
    intel_dvo_mode_set(var_group1, var_group2, var_intel_dvo_mode_set_5_p2);
#line 785
    break;
    case 3: 
#line 798
    ldv_handler_precall();
#line 799
    intel_dvo_save(var_group3);
#line 812
    break;
    case 4: 
#line 825
    ldv_handler_precall();
#line 826
    intel_dvo_restore(var_group3);
#line 839
    break;
    case 5: 
#line 854
    ldv_handler_precall();
#line 855
    intel_dvo_detect(var_group3);
#line 866
    break;
    case 6: 
#line 881
    ldv_handler_precall();
#line 882
    intel_dvo_destroy(var_group3);
#line 893
    break;
    case 7: 
#line 906
    ldv_handler_precall();
#line 907
    intel_dvo_mode_valid(var_group3, var_group2);
#line 920
    break;
    case 8: 
#line 935
    ldv_handler_precall();
#line 936
    intel_dvo_get_modes(var_group3);
#line 947
    break;
    case 9: 
#line 964
    ldv_handler_precall();
#line 965
    intel_dvo_enc_destroy(var_group1);
#line 972
    break;
    default: 
#line 973
    break;
    }
  }
#line 982
  ldv_check_final_state();
#line 985
  return;
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static struct ch7xxx_id_struct ch7xxx_ids[4]  = {      {131, "CH7011"}, 
        {132, "CH7009A"}, 
        {133, "CH7009B"}, 
        {149, "CH7301"}};
#line 109
static void ch7xxx_save(struct intel_dvo_device *dvo ) ;
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static char *ch7xxx_get_id(uint8_t vid ) 
{ 
  int i ;

  {
#line 115
  i = 0;
#line 115
  while (1) {
#line 115
    if ((unsigned long )i < sizeof(ch7xxx_ids) / sizeof(ch7xxx_ids[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 115
      break;
    }
#line 116
    if ((int )ch7xxx_ids[i].vid == (int )vid) {
#line 117
      return (ch7xxx_ids[i].name);
    } else {

    }
#line 115
    i = i + 1;
  }
#line 120
  return ((void *)0);
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static bool ch7xxx_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2] ;
  u8 in_buf[2] ;
  struct i2c_msg msgs[2] ;
  int tmp ;

  {
#line 126
  ch7xxx = dvo->dev_priv;
#line 127
  i2cbus = dvo->i2c_bus;
#line 131
  msgs[0].addr = i2cbus->slave_addr;
#line 131
  msgs[0].flags = 0;
#line 131
  msgs[0].len = 1;
#line 131
  msgs[0].buf = out_buf;
#line 131
  msgs[1].addr = i2cbus->slave_addr;
#line 131
  msgs[1].flags = 1;
#line 131
  msgs[1].len = 1;
#line 131
  msgs[1].buf = in_buf;
#line 146
  out_buf[0] = addr;
#line 147
  out_buf[1] = 0;
#line 149
  tmp = i2c_transfer(& i2cbus->adapter, msgs, 2);
#line 149
  if (tmp == 2) {
#line 150
    *ch = in_buf[0];
#line 151
    return (true);
  } else {

  }
#line 154
  if (! ch7xxx->quiet) {
#line 155
    while (1) {
#line 155
      if (drm_debug) {
#line 155
        printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "ch7xxx_readb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 155
      break;
    }
  } else {

  }
#line 158
  return (false);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static bool ch7xxx_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 164
  ch7xxx = dvo->dev_priv;
#line 165
  i2cbus = dvo->i2c_bus;
#line 167
  msg.addr = i2cbus->slave_addr;
#line 167
  msg.flags = 0;
#line 167
  msg.len = 2;
#line 167
  msg.buf = out_buf;
#line 174
  out_buf[0] = addr;
#line 175
  out_buf[1] = ch;
#line 177
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 177
  if (tmp == 1) {
#line 178
    return (true);
  } else {

  }
#line 180
  if (! ch7xxx->quiet) {
#line 181
    while (1) {
#line 181
      if (drm_debug) {
#line 181
        printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "ch7xxx_writeb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 181
      break;
    }
  } else {

  }
#line 185
  return (false);
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static bool ch7xxx_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  uint8_t vendor ;
  uint8_t device ;
  char *name ;
  void *tmp ;
  bool tmp___0 ;
  bool tmp___1 ;

  {
#line 196
  tmp = kzalloc(sizeof(struct ch7xxx_priv ), (16U | 64U) | 128U);
#line 196
  ch7xxx = tmp;
#line 197
  if ((unsigned long )ch7xxx == (unsigned long )((void *)0)) {
#line 198
    return (false);
  } else {

  }
#line 200
  dvo->i2c_bus = i2cbus;
#line 201
  (dvo->i2c_bus)->slave_addr = dvo->slave_addr;
#line 202
  dvo->dev_priv = ch7xxx;
#line 203
  ch7xxx->quiet = true;
#line 205
  tmp___0 = ch7xxx_readb(dvo, 74, & vendor);
#line 205
  if (tmp___0) {

  } else {
#line 206
    goto out;
  }
#line 208
  name = ch7xxx_get_id(vendor);
#line 209
  if (! name) {
#line 210
    while (1) {
#line 210
      if (drm_debug) {
#line 210
        printk("<7>[drm:%s] ch7xxx not detected; got 0x%02x from %s slave %d.\n",
               "ch7xxx_init", vendor, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 210
      break;
    }
#line 212
    goto out;
  } else {

  }
#line 216
  tmp___1 = ch7xxx_readb(dvo, 75, & device);
#line 216
  if (tmp___1) {

  } else {
#line 217
    goto out;
  }
#line 219
  if ((int )device != 23) {
#line 220
    while (1) {
#line 220
      if (drm_debug) {
#line 220
        printk("<7>[drm:%s] ch7xxx not detected; got 0x%02x from %s slave %d.\n",
               "ch7xxx_init", vendor, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 220
      break;
    }
#line 222
    goto out;
  } else {

  }
#line 225
  ch7xxx->quiet = false;
#line 226
  while (1) {
#line 226
    if (drm_debug) {
#line 226
      printk("<7>[drm:%s] Detected %s chipset, vendor/device ID 0x%02x/0x%02x\n",
             "ch7xxx_init", name, vendor, device);
    } else {

    }
#line 226
    break;
  }
#line 228
  return (true);
  out: 
#line 230
  kfree(ch7xxx);
#line 231
  return (false);
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static enum drm_connector_status ch7xxx_detect(struct intel_dvo_device *dvo ) 
{ 
  uint8_t cdet ;
  uint8_t orig_pm ;
  uint8_t pm ;

  {
#line 238
  ch7xxx_readb(dvo, 73, & orig_pm);
#line 240
  pm = orig_pm;
#line 241
  pm = (int )pm & ~ (1 << 0);
#line 242
  pm = (int )pm | ((1 << 6) | (1 << 7));
#line 244
  ch7xxx_writeb(dvo, 73, pm);
#line 246
  ch7xxx_readb(dvo, 32, & cdet);
#line 248
  ch7xxx_writeb(dvo, 73, orig_pm);
#line 250
  if ((int )cdet & (1 << 5)) {
#line 251
    return (connector_status_connected);
  } else {

  }
#line 252
  return (connector_status_disconnected);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static enum drm_mode_status ch7xxx_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 258
  if (mode->clock > 165000) {
#line 259
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 261
  return (MODE_OK);
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 
  uint8_t tvco ;
  uint8_t tpcp ;
  uint8_t tpd ;
  uint8_t tlpf ;
  uint8_t idf ;

  {
#line 270
  if (mode->clock <= 65000) {
#line 271
    tvco = 35;
#line 272
    tpcp = 8;
#line 273
    tpd = 22;
#line 274
    tlpf = 96;
  } else {
#line 276
    tvco = 45;
#line 277
    tpcp = 6;
#line 278
    tpd = 38;
#line 279
    tlpf = 160;
  }
#line 282
  ch7xxx_writeb(dvo, 49, 0);
#line 283
  ch7xxx_writeb(dvo, 50, tvco);
#line 284
  ch7xxx_writeb(dvo, 51, tpcp);
#line 285
  ch7xxx_writeb(dvo, 52, tpd);
#line 286
  ch7xxx_writeb(dvo, 53, 48);
#line 287
  ch7xxx_writeb(dvo, 54, tlpf);
#line 288
  ch7xxx_writeb(dvo, 55, 0);
#line 290
  ch7xxx_readb(dvo, 31, & idf);
#line 292
  idf = (int )idf & ~ ((1 << 3) | (1 << 4));
#line 293
  if (mode->flags & (unsigned int )(1 << 0)) {
#line 294
    idf = (int )idf | (1 << 3);
  } else {

  }
#line 296
  if (mode->flags & (unsigned int )(1 << 2)) {
#line 297
    idf = (int )idf | (1 << 3);
  } else {

  }
#line 299
  ch7xxx_writeb(dvo, 31, idf);
#line 300
  return;
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 


  {
#line 305
  if (mode == 0) {
#line 306
    ch7xxx_writeb(dvo, 73, (1 << 6) | (1 << 7));
  } else {
#line 308
    ch7xxx_writeb(dvo, 73, 1 << 0);
  }
#line 309
  return;
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  int i ;

  {
#line 313
  ch7xxx = dvo->dev_priv;
#line 316
  i = 0;
#line 316
  while (1) {
#line 316
    if (i < 76) {

    } else {
#line 316
      break;
    }
#line 317
    if (i % 8 == 0) {
#line 318
      while (1) {
#line 318
        if (drm_debug) {
#line 318
          printk("<7>[drm:%s] \n %02X: ", "ch7xxx_dump_regs", i);
        } else {

        }
#line 318
        break;
      }
    } else {

    }
#line 319
    while (1) {
#line 319
      if (drm_debug) {
#line 319
        printk("<7>[drm:%s] %02X ", "ch7xxx_dump_regs", ch7xxx->mode_reg.regs[i]);
      } else {

      }
#line 319
      break;
    }
#line 316
    i = i + 1;
  }
#line 321
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_save(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 325
  ch7xxx = dvo->dev_priv;
#line 327
  ch7xxx_readb(dvo, 49, & ch7xxx->save_TCTL);
#line 328
  ch7xxx_readb(dvo, 51, & ch7xxx->save_TPCP);
#line 329
  ch7xxx_readb(dvo, 52, & ch7xxx->save_TPD);
#line 330
  ch7xxx_readb(dvo, 53, & ch7xxx->save_TPVT);
#line 331
  ch7xxx_readb(dvo, 54, & ch7xxx->save_TLPF);
#line 332
  ch7xxx_readb(dvo, 73, & ch7xxx->save_PM);
#line 333
  ch7xxx_readb(dvo, 31, & ch7xxx->save_IDF);
#line 334
  return;
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 338
  ch7xxx = dvo->dev_priv;
#line 340
  ch7xxx_writeb(dvo, 49, ch7xxx->save_TCTL);
#line 341
  ch7xxx_writeb(dvo, 51, ch7xxx->save_TPCP);
#line 342
  ch7xxx_writeb(dvo, 52, ch7xxx->save_TPD);
#line 343
  ch7xxx_writeb(dvo, 53, ch7xxx->save_TPVT);
#line 344
  ch7xxx_writeb(dvo, 54, ch7xxx->save_TLPF);
#line 345
  ch7xxx_writeb(dvo, 31, ch7xxx->save_IDF);
#line 346
  ch7xxx_writeb(dvo, 73, ch7xxx->save_PM);
#line 347
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
static void ch7xxx_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 351
  ch7xxx = dvo->dev_priv;
#line 353
  if (ch7xxx) {
#line 354
    kfree(ch7xxx);
#line 355
    dvo->dev_priv = (void *)0;
  } else {

  }
#line 357
  return;
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
struct intel_dvo_dev_ops ch7xxx_ops  = 
#line 359
     {& ch7xxx_init, 0, & ch7xxx_dpms, & ch7xxx_save, & ch7xxx_restore, & ch7xxx_mode_valid,
    0, 0, 0, & ch7xxx_mode_set, & ch7xxx_detect, 0, & ch7xxx_destroy, & ch7xxx_dump_regs};
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7xxx.c"
void ldv_main19_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_ch7xxx_mode_set_6_p2 ;
  int var_ch7xxx_dpms_7_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 819
  LDV_IN_INTERRUPT = 1;
#line 828
  ldv_initialize();
#line 832
  while (1) {
#line 832
    tmp___0 = nondet_int();
#line 832
    if (tmp___0) {

    } else {
#line 832
      break;
    }
#line 835
    tmp = nondet_int();
#line 835
    switch (tmp) {
    case 0: 
#line 886
    ldv_handler_precall();
#line 887
    ch7xxx_init(var_group1, var_group2);
#line 894
    break;
    case 1: 
#line 944
    ldv_handler_precall();
#line 945
    ch7xxx_detect(var_group1);
#line 952
    break;
    case 2: 
#line 1002
    ldv_handler_precall();
#line 1003
    ch7xxx_mode_valid(var_group1, var_group3);
#line 1010
    break;
    case 3: 
#line 1060
    ldv_handler_precall();
#line 1061
    ch7xxx_mode_set(var_group1, var_group3, var_ch7xxx_mode_set_6_p2);
#line 1068
    break;
    case 4: 
#line 1118
    ldv_handler_precall();
#line 1119
    ch7xxx_dpms(var_group1, var_ch7xxx_dpms_7_p1);
#line 1126
    break;
    case 5: 
#line 1176
    ldv_handler_precall();
#line 1177
    ch7xxx_dump_regs(var_group1);
#line 1184
    break;
    case 6: 
#line 1234
    ldv_handler_precall();
#line 1235
    ch7xxx_save(var_group1);
#line 1242
    break;
    case 7: 
#line 1292
    ldv_handler_precall();
#line 1293
    ch7xxx_restore(var_group1);
#line 1300
    break;
    case 8: 
#line 1350
    ldv_handler_precall();
#line 1351
    ch7xxx_destroy(var_group1);
#line 1358
    break;
    default: 
#line 1359
    break;
    }
  }
#line 1368
  ldv_check_final_state();
#line 1371
  return;
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_dump_regs(struct intel_dvo_device *dvo ) ;
#line 176
static void ch7017_dpms(struct intel_dvo_device *dvo , int mode ) ;
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static bool ch7017_read(struct intel_dvo_device *dvo , int addr , uint8_t *val ) 
{ 
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2] ;
  u8 in_buf[2] ;
  struct i2c_msg msgs[2] ;
  int tmp ;

  {
#line 180
  i2cbus = dvo->i2c_bus;
#line 184
  msgs[0].addr = i2cbus->slave_addr;
#line 184
  msgs[0].flags = 0;
#line 184
  msgs[0].len = 1;
#line 184
  msgs[0].buf = out_buf;
#line 184
  msgs[1].addr = i2cbus->slave_addr;
#line 184
  msgs[1].flags = 1;
#line 184
  msgs[1].len = 1;
#line 184
  msgs[1].buf = in_buf;
#line 199
  out_buf[0] = addr;
#line 200
  out_buf[1] = 0;
#line 202
  tmp = i2c_transfer(& i2cbus->adapter, msgs, 2);
#line 202
  if (tmp == 2) {
#line 203
    *val = in_buf[0];
#line 204
    return (true);
  } else {

  }
#line 207
  return (false);
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static bool ch7017_write(struct intel_dvo_device *dvo , int addr , uint8_t val ) 
{ 
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 212
  i2cbus = dvo->i2c_bus;
#line 214
  msg.addr = i2cbus->slave_addr;
#line 214
  msg.flags = 0;
#line 214
  msg.len = 2;
#line 214
  msg.buf = out_buf;
#line 221
  out_buf[0] = addr;
#line 222
  out_buf[1] = val;
#line 224
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 224
  if (tmp == 1) {
#line 225
    return (true);
  } else {

  }
#line 227
  return (false);
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static bool ch7017_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ch7017_priv *priv ;
  uint8_t val ;
  void *tmp ;
  bool tmp___0 ;

  {
#line 237
  tmp = kzalloc(sizeof(struct ch7017_priv ), (16U | 64U) | 128U);
#line 237
  priv = tmp;
#line 238
  if ((unsigned long )priv == (unsigned long )((void *)0)) {
#line 239
    return (false);
  } else {

  }
#line 241
  dvo->i2c_bus = i2cbus;
#line 242
  (dvo->i2c_bus)->slave_addr = dvo->slave_addr;
#line 243
  dvo->dev_priv = priv;
#line 245
  tmp___0 = ch7017_read(dvo, 75, & val);
#line 245
  if (tmp___0) {

  } else {
#line 246
    goto fail;
  }
#line 248
  if (((int )val != 27 && (int )val != 26) && (int )val != 25) {
#line 251
    while (1) {
#line 251
      if (drm_debug) {
#line 251
        printk("<7>[drm:%s] ch701x not detected, got %d: from %s Slave %d.\n", "ch7017_init",
               val, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 251
      break;
    }
#line 253
    goto fail;
  } else {

  }
#line 256
  return (true);
  fail: 
#line 258
  kfree(priv);
#line 259
  return (false);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static enum drm_connector_status ch7017_detect(struct intel_dvo_device *dvo ) 
{ 


  {
#line 264
  return (connector_status_unknown);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static enum drm_mode_status ch7017_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 270
  if (mode->clock > 160000) {
#line 271
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 273
  return (MODE_OK);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 
  uint8_t lvds_pll_feedback_div ;
  uint8_t lvds_pll_vco_control ;
  uint8_t outputs_enable ;
  uint8_t lvds_control_2 ;
  uint8_t lvds_power_down ;
  uint8_t horizontal_active_pixel_input ;
  uint8_t horizontal_active_pixel_output ;
  uint8_t vertical_active_line_output ;
  uint8_t active_input_line_output ;

  {
#line 286
  while (1) {
#line 286
    if (drm_debug) {
#line 286
      printk("<7>[drm:%s] Registers before mode setting\n", "ch7017_mode_set");
    } else {

    }
#line 286
    break;
  }
#line 287
  ch7017_dump_regs(dvo);
#line 290
  if (mode->clock < 100000) {
#line 291
    outputs_enable = (1 << 3) | 0;
#line 292
    lvds_pll_feedback_div = (128 | (2 << 4)) | (13 << 0);
#line 295
    lvds_pll_vco_control = (128 | (2 << 4)) | (3 << 0);
#line 298
    lvds_control_2 = (1 << 5) | (0 << 0);
  } else {
#line 301
    outputs_enable = (1 << 3) | 3;
#line 302
    lvds_pll_feedback_div = (128 | (2 << 4)) | (3 << 0);
#line 305
    lvds_pll_feedback_div = 35;
#line 306
    lvds_control_2 = (3 << 5) | (0 << 0);
#line 309
    outputs_enable = (int )outputs_enable | (1 << 4);
#line 310
    lvds_pll_vco_control = (128 | (2 << 4)) | (13 << 0);
  }
#line 320
  horizontal_active_pixel_input = mode->hdisplay & 255;
#line 322
  vertical_active_line_output = mode->vdisplay & 255;
#line 323
  horizontal_active_pixel_output = mode->hdisplay & 255;
#line 325
  active_input_line_output = ((mode->hdisplay & 1792) >> 8) | (((mode->vdisplay & 1792) >> 8) << 3);
#line 328
  lvds_power_down = 8 | ((mode->hdisplay & 1792) >> 8);
#line 331
  ch7017_dpms(dvo, 3);
#line 332
  ch7017_write(dvo, 95, horizontal_active_pixel_input);
#line 334
  ch7017_write(dvo, 98, horizontal_active_pixel_output);
#line 336
  ch7017_write(dvo, 97, vertical_active_line_output);
#line 338
  ch7017_write(dvo, 96, active_input_line_output);
#line 340
  ch7017_write(dvo, 114, lvds_pll_vco_control);
#line 341
  ch7017_write(dvo, 113, lvds_pll_feedback_div);
#line 342
  ch7017_write(dvo, 120, lvds_control_2);
#line 343
  ch7017_write(dvo, 115, outputs_enable);
#line 346
  ch7017_write(dvo, 99, lvds_power_down);
#line 348
  while (1) {
#line 348
    if (drm_debug) {
#line 348
      printk("<7>[drm:%s] Registers after mode setting\n", "ch7017_mode_set");
    } else {

    }
#line 348
    break;
  }
#line 349
  ch7017_dump_regs(dvo);
#line 350
  return;
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  uint8_t val ;

  {
#line 357
  ch7017_read(dvo, 99, & val);
#line 360
  ch7017_write(dvo, 73, ((((1 << 1) | (1 << 2)) | (1 << 3)) | (1 << 4)) | (1 << 5));
#line 367
  if (mode == 0) {
#line 369
    ch7017_write(dvo, 99, (int )val & ~ (1 << 6));
  } else {
#line 373
    ch7017_write(dvo, 99, (int )val | (1 << 6));
  }
#line 378
  if (20000 > 20000) {
#line 378
    __bad_udelay();
  } else {
#line 378
    __const_udelay(20000UL * 4295UL);
  }
#line 379
  return;
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;

  {
#line 391
  while (1) {
#line 391
    ch7017_read(dvo, 95, & val);
#line 391
    while (1) {
#line 391
      if (drm_debug) {
#line 391
        printk("<7>[drm:%s] CH7017_HORIZONTAL_ACTIVE_PIXEL_INPUT: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 391
      break;
    }
#line 391
    break;
  }
#line 392
  while (1) {
#line 392
    ch7017_read(dvo, 98, & val);
#line 392
    while (1) {
#line 392
      if (drm_debug) {
#line 392
        printk("<7>[drm:%s] CH7017_HORIZONTAL_ACTIVE_PIXEL_OUTPUT: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 392
      break;
    }
#line 392
    break;
  }
#line 393
  while (1) {
#line 393
    ch7017_read(dvo, 97, & val);
#line 393
    while (1) {
#line 393
      if (drm_debug) {
#line 393
        printk("<7>[drm:%s] CH7017_VERTICAL_ACTIVE_LINE_OUTPUT: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 393
      break;
    }
#line 393
    break;
  }
#line 394
  while (1) {
#line 394
    ch7017_read(dvo, 96, & val);
#line 394
    while (1) {
#line 394
      if (drm_debug) {
#line 394
        printk("<7>[drm:%s] CH7017_ACTIVE_INPUT_LINE_OUTPUT: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 394
      break;
    }
#line 394
    break;
  }
#line 395
  while (1) {
#line 395
    ch7017_read(dvo, 114, & val);
#line 395
    while (1) {
#line 395
      if (drm_debug) {
#line 395
        printk("<7>[drm:%s] CH7017_LVDS_PLL_VCO_CONTROL: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 395
      break;
    }
#line 395
    break;
  }
#line 396
  while (1) {
#line 396
    ch7017_read(dvo, 113, & val);
#line 396
    while (1) {
#line 396
      if (drm_debug) {
#line 396
        printk("<7>[drm:%s] CH7017_LVDS_PLL_FEEDBACK_DIV: %02x\n", "ch7017_dump_regs",
               val);
      } else {

      }
#line 396
      break;
    }
#line 396
    break;
  }
#line 397
  while (1) {
#line 397
    ch7017_read(dvo, 120, & val);
#line 397
    while (1) {
#line 397
      if (drm_debug) {
#line 397
        printk("<7>[drm:%s] CH7017_LVDS_CONTROL_2: %02x\n", "ch7017_dump_regs", val);
      } else {

      }
#line 397
      break;
    }
#line 397
    break;
  }
#line 398
  while (1) {
#line 398
    ch7017_read(dvo, 115, & val);
#line 398
    while (1) {
#line 398
      if (drm_debug) {
#line 398
        printk("<7>[drm:%s] CH7017_OUTPUTS_ENABLE: %02x\n", "ch7017_dump_regs", val);
      } else {

      }
#line 398
      break;
    }
#line 398
    break;
  }
#line 399
  while (1) {
#line 399
    ch7017_read(dvo, 99, & val);
#line 399
    while (1) {
#line 399
      if (drm_debug) {
#line 399
        printk("<7>[drm:%s] CH7017_LVDS_POWER_DOWN: %02x\n", "ch7017_dump_regs", val);
      } else {

      }
#line 399
      break;
    }
#line 399
    break;
  }
#line 400
  return;
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_save(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 404
  priv = dvo->dev_priv;
#line 406
  ch7017_read(dvo, 95, & priv->save_hapi);
#line 407
  ch7017_read(dvo, 97, & priv->save_valo);
#line 408
  ch7017_read(dvo, 96, & priv->save_ailo);
#line 409
  ch7017_read(dvo, 114, & priv->save_lvds_pll_vco);
#line 410
  ch7017_read(dvo, 113, & priv->save_feedback_div);
#line 411
  ch7017_read(dvo, 120, & priv->save_lvds_control_2);
#line 412
  ch7017_read(dvo, 115, & priv->save_outputs_enable);
#line 413
  ch7017_read(dvo, 99, & priv->save_lvds_power_down);
#line 414
  ch7017_read(dvo, 73, & priv->save_power_management);
#line 415
  return;
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 419
  priv = dvo->dev_priv;
#line 422
  ch7017_dpms(dvo, 3);
#line 424
  ch7017_write(dvo, 95, priv->save_hapi);
#line 425
  ch7017_write(dvo, 97, priv->save_valo);
#line 426
  ch7017_write(dvo, 96, priv->save_ailo);
#line 427
  ch7017_write(dvo, 114, priv->save_lvds_pll_vco);
#line 428
  ch7017_write(dvo, 113, priv->save_feedback_div);
#line 429
  ch7017_write(dvo, 120, priv->save_lvds_control_2);
#line 430
  ch7017_write(dvo, 115, priv->save_outputs_enable);
#line 431
  ch7017_write(dvo, 99, priv->save_lvds_power_down);
#line 432
  ch7017_write(dvo, 73, priv->save_power_management);
#line 433
  return;
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
static void ch7017_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 437
  priv = dvo->dev_priv;
#line 439
  if (priv) {
#line 440
    kfree(priv);
#line 441
    dvo->dev_priv = (void *)0;
  } else {

  }
#line 443
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
struct intel_dvo_dev_ops ch7017_ops  = 
#line 445
     {& ch7017_init, 0, & ch7017_dpms, & ch7017_save, & ch7017_restore, & ch7017_mode_valid,
    0, 0, 0, & ch7017_mode_set, & ch7017_detect, 0, & ch7017_destroy, & ch7017_dump_regs};
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ch7017.c"
void ldv_main20_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_ch7017_mode_set_5_p2 ;
  int var_ch7017_dpms_6_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1486
  LDV_IN_INTERRUPT = 1;
#line 1495
  ldv_initialize();
#line 1499
  while (1) {
#line 1499
    tmp___0 = nondet_int();
#line 1499
    if (tmp___0) {

    } else {
#line 1499
      break;
    }
#line 1502
    tmp = nondet_int();
#line 1502
    switch (tmp) {
    case 0: 
#line 1612
    ldv_handler_precall();
#line 1613
    ch7017_init(var_group1, var_group2);
#line 1627
    break;
    case 1: 
#line 1736
    ldv_handler_precall();
#line 1737
    ch7017_detect(var_group1);
#line 1751
    break;
    case 2: 
#line 1860
    ldv_handler_precall();
#line 1861
    ch7017_mode_valid(var_group1, var_group3);
#line 1875
    break;
    case 3: 
#line 1984
    ldv_handler_precall();
#line 1985
    ch7017_mode_set(var_group1, var_group3, var_ch7017_mode_set_5_p2);
#line 1999
    break;
    case 4: 
#line 2108
    ldv_handler_precall();
#line 2109
    ch7017_dpms(var_group1, var_ch7017_dpms_6_p1);
#line 2123
    break;
    case 5: 
#line 2232
    ldv_handler_precall();
#line 2233
    ch7017_dump_regs(var_group1);
#line 2240
    break;
    case 6: 
#line 2354
    ldv_handler_precall();
#line 2355
    ch7017_save(var_group1);
#line 2362
    break;
    case 7: 
#line 2476
    ldv_handler_precall();
#line 2477
    ch7017_restore(var_group1);
#line 2484
    break;
    case 8: 
#line 2598
    ldv_handler_precall();
#line 2599
    ch7017_destroy(var_group1);
#line 2606
    break;
    default: 
#line 2607
    break;
    }
  }
#line 2616
  ldv_check_final_state();
#line 2619
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_dump_regs(struct intel_dvo_device *dvo ) ;
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static bool ivch_read(struct intel_dvo_device *dvo , int addr , uint16_t *data ) 
{ 
  struct ivch_priv *priv ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[1] ;
  u8 in_buf[2] ;
  struct i2c_msg msgs[3] ;
  int tmp ;

  {
#line 172
  priv = dvo->dev_priv;
#line 173
  i2cbus = dvo->i2c_bus;
#line 177
  msgs[0].addr = i2cbus->slave_addr;
#line 177
  msgs[0].flags = 1;
#line 177
  msgs[0].len = 0;
#line 177
  msgs[0].buf = 0;
#line 177
  msgs[1].addr = 0;
#line 177
  msgs[1].flags = 16384;
#line 177
  msgs[1].len = 1;
#line 177
  msgs[1].buf = out_buf;
#line 177
  msgs[2].addr = i2cbus->slave_addr;
#line 177
  msgs[2].flags = 1 | 16384;
#line 177
  msgs[2].len = 2;
#line 177
  msgs[2].buf = in_buf;
#line 197
  out_buf[0] = addr;
#line 199
  tmp = i2c_transfer(& i2cbus->adapter, msgs, 3);
#line 199
  if (tmp == 3) {
#line 200
    *data = ((int )in_buf[1] << 8) | (int )in_buf[0];
#line 201
    return (true);
  } else {

  }
#line 204
  if (! priv->quiet) {
#line 205
    while (1) {
#line 205
      if (drm_debug) {
#line 205
        printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "ivch_read",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 205
      break;
    }
  } else {

  }
#line 208
  return (false);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static bool ivch_write(struct intel_dvo_device *dvo , int addr , uint16_t data ) 
{ 
  struct ivch_priv *priv ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[3] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 214
  priv = dvo->dev_priv;
#line 215
  i2cbus = dvo->i2c_bus;
#line 217
  msg.addr = i2cbus->slave_addr;
#line 217
  msg.flags = 0;
#line 217
  msg.len = 3;
#line 217
  msg.buf = out_buf;
#line 224
  out_buf[0] = addr;
#line 225
  out_buf[1] = (int )data & 255;
#line 226
  out_buf[2] = (int )data >> 8;
#line 228
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 228
  if (tmp == 1) {
#line 229
    return (true);
  } else {

  }
#line 231
  if (! priv->quiet) {
#line 232
    while (1) {
#line 232
      if (drm_debug) {
#line 232
        printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "ivch_write",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 232
      break;
    }
  } else {

  }
#line 236
  return (false);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static bool ivch_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ivch_priv *priv ;
  uint16_t temp ;
  void *tmp ;
  bool tmp___0 ;

  {
#line 246
  tmp = kzalloc(sizeof(struct ivch_priv ), (16U | 64U) | 128U);
#line 246
  priv = tmp;
#line 247
  if ((unsigned long )priv == (unsigned long )((void *)0)) {
#line 248
    return (false);
  } else {

  }
#line 250
  dvo->i2c_bus = i2cbus;
#line 251
  (dvo->i2c_bus)->slave_addr = dvo->slave_addr;
#line 252
  dvo->dev_priv = priv;
#line 253
  priv->quiet = true;
#line 255
  tmp___0 = ivch_read(dvo, 0, & temp);
#line 255
  if (tmp___0) {

  } else {
#line 256
    goto out;
  }
#line 257
  priv->quiet = false;
#line 263
  if (((int )temp & 127) != dvo->slave_addr) {
#line 264
    while (1) {
#line 264
      if (drm_debug) {
#line 264
        printk("<7>[drm:%s] ivch detect failed due to address mismatch (%d vs %d)\n",
               "ivch_init", (int )temp & 127, dvo->slave_addr);
      } else {

      }
#line 264
      break;
    }
#line 267
    goto out;
  } else {

  }
#line 270
  ivch_read(dvo, 32, & priv->width);
#line 271
  ivch_read(dvo, 32, & priv->height);
#line 273
  return (true);
  out: 
#line 276
  kfree(priv);
#line 277
  return (false);
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static enum drm_connector_status ivch_detect(struct intel_dvo_device *dvo ) 
{ 


  {
#line 282
  return (connector_status_connected);
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static enum drm_mode_status ivch_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 288
  if (mode->clock > 112000) {
#line 289
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 291
  return (MODE_OK);
}
}
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  int i ;
  uint16_t vr01 ;
  uint16_t vr30 ;
  uint16_t backlight ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 301
  tmp = ivch_read(dvo, 1, & vr01);
#line 301
  if (tmp) {

  } else {
#line 302
    return;
  }
#line 304
  if (mode == 0) {
#line 305
    backlight = 1;
  } else {
#line 307
    backlight = 0;
  }
#line 308
  ivch_write(dvo, 128, backlight);
#line 310
  if (mode == 0) {
#line 311
    vr01 = (int )vr01 | ((1 << 2) | (1 << 0));
  } else {
#line 313
    vr01 = (int )vr01 & ~ ((1 << 2) | (1 << 0));
  }
#line 315
  ivch_write(dvo, 1, vr01);
#line 318
  i = 0;
#line 318
  while (1) {
#line 318
    if (i < 100) {

    } else {
#line 318
      break;
    }
#line 319
    tmp___0 = ivch_read(dvo, 48, & vr30);
#line 319
    if (tmp___0) {

    } else {
#line 320
      break;
    }
#line 322
    if ((((int )vr30 & (1 << 15)) != 0) == (mode == 0)) {
#line 323
      break;
    } else {

    }
#line 324
    if (1000 > 20000) {
#line 324
      __bad_udelay();
    } else {
#line 324
      __const_udelay(1000UL * 4295UL);
    }
#line 318
    i = i + 1;
  }
#line 327
  if (16 * 1000 > 20000) {
#line 327
    __bad_udelay();
  } else {
#line 327
    __const_udelay((unsigned long )(16 * 1000) * 4295UL);
  }
#line 328
  return;
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                          struct drm_display_mode *adjusted_mode ) 
{ 
  uint16_t vr40 ;
  uint16_t vr01 ;
  uint16_t x_ratio ;
  uint16_t y_ratio ;

  {
#line 334
  vr40 = 0;
#line 337
  vr01 = 0;
#line 338
  vr40 = ((1 << 13) | (1 << 12)) | (1 << 10);
#line 341
  if (mode->hdisplay != adjusted_mode->hdisplay || mode->vdisplay != adjusted_mode->vdisplay) {
#line 345
    vr01 = (int )vr01 | (1 << 3);
#line 346
    vr40 = (int )vr40 | (1 << 8);
#line 347
    x_ratio = ((mode->hdisplay - 1) << 16) / (adjusted_mode->hdisplay - 1) >> 2;
#line 349
    y_ratio = ((mode->vdisplay - 1) << 16) / (adjusted_mode->vdisplay - 1) >> 2;
#line 351
    ivch_write(dvo, 66, x_ratio);
#line 352
    ivch_write(dvo, 65, y_ratio);
  } else {
#line 354
    vr01 = (int )vr01 & ~ (1 << 3);
#line 355
    vr40 = (int )vr40 & ~ (1 << 8);
  }
#line 357
  vr40 = (int )vr40 & ~ (1 << 9);
#line 359
  ivch_write(dvo, 1, vr01);
#line 360
  ivch_write(dvo, 64, vr40);
#line 362
  ivch_dump_regs(dvo);
#line 363
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint16_t val ;

  {
#line 369
  ivch_read(dvo, 0, & val);
#line 370
  while (1) {
#line 370
    if (drm_debug) {
#line 370
      printk("<7>[drm:%s] VR00: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 370
    break;
  }
#line 371
  ivch_read(dvo, 1, & val);
#line 372
  while (1) {
#line 372
    if (drm_debug) {
#line 372
      printk("<7>[drm:%s] VR01: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 372
    break;
  }
#line 373
  ivch_read(dvo, 48, & val);
#line 374
  while (1) {
#line 374
    if (drm_debug) {
#line 374
      printk("<7>[drm:%s] VR30: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 374
    break;
  }
#line 375
  ivch_read(dvo, 64, & val);
#line 376
  while (1) {
#line 376
    if (drm_debug) {
#line 376
      printk("<7>[drm:%s] VR40: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 376
    break;
  }
#line 379
  ivch_read(dvo, 128, & val);
#line 380
  while (1) {
#line 380
    if (drm_debug) {
#line 380
      printk("<7>[drm:%s] VR80: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 380
    break;
  }
#line 381
  ivch_read(dvo, 129, & val);
#line 382
  while (1) {
#line 382
    if (drm_debug) {
#line 382
      printk("<7>[drm:%s] VR81: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 382
    break;
  }
#line 383
  ivch_read(dvo, 130, & val);
#line 384
  while (1) {
#line 384
    if (drm_debug) {
#line 384
      printk("<7>[drm:%s] VR82: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 384
    break;
  }
#line 385
  ivch_read(dvo, 131, & val);
#line 386
  while (1) {
#line 386
    if (drm_debug) {
#line 386
      printk("<7>[drm:%s] VR83: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 386
    break;
  }
#line 387
  ivch_read(dvo, 132, & val);
#line 388
  while (1) {
#line 388
    if (drm_debug) {
#line 388
      printk("<7>[drm:%s] VR84: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 388
    break;
  }
#line 389
  ivch_read(dvo, 133, & val);
#line 390
  while (1) {
#line 390
    if (drm_debug) {
#line 390
      printk("<7>[drm:%s] VR85: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 390
    break;
  }
#line 391
  ivch_read(dvo, 134, & val);
#line 392
  while (1) {
#line 392
    if (drm_debug) {
#line 392
      printk("<7>[drm:%s] VR86: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 392
    break;
  }
#line 393
  ivch_read(dvo, 135, & val);
#line 394
  while (1) {
#line 394
    if (drm_debug) {
#line 394
      printk("<7>[drm:%s] VR87: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 394
    break;
  }
#line 395
  ivch_read(dvo, 136, & val);
#line 396
  while (1) {
#line 396
    if (drm_debug) {
#line 396
      printk("<7>[drm:%s] VR88: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 396
    break;
  }
#line 399
  ivch_read(dvo, 142, & val);
#line 400
  while (1) {
#line 400
    if (drm_debug) {
#line 400
      printk("<7>[drm:%s] VR8E: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 400
    break;
  }
#line 403
  ivch_read(dvo, 143, & val);
#line 404
  while (1) {
#line 404
    if (drm_debug) {
#line 404
      printk("<7>[drm:%s] VR8F: 0x%04x\n", "ivch_dump_regs", val);
    } else {

    }
#line 404
    break;
  }
#line 405
  return;
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_save(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 409
  priv = dvo->dev_priv;
#line 411
  ivch_read(dvo, 1, & priv->save_VR01);
#line 412
  ivch_read(dvo, 64, & priv->save_VR40);
#line 413
  return;
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 417
  priv = dvo->dev_priv;
#line 419
  ivch_write(dvo, 1, priv->save_VR01);
#line 420
  ivch_write(dvo, 64, priv->save_VR40);
#line 421
  return;
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
static void ivch_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 425
  priv = dvo->dev_priv;
#line 427
  if (priv) {
#line 428
    kfree(priv);
#line 429
    dvo->dev_priv = (void *)0;
  } else {

  }
#line 431
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
struct intel_dvo_dev_ops ivch_ops  = 
#line 433
     {& ivch_init, 0, & ivch_dpms, & ivch_save, & ivch_restore, & ivch_mode_valid, 0,
    0, 0, & ivch_mode_set, & ivch_detect, 0, & ivch_destroy, & ivch_dump_regs};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_ivch.c"
void ldv_main21_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 494
  LDV_IN_INTERRUPT = 1;
#line 503
  ldv_initialize();
#line 505
  while (1) {
#line 505
    tmp___0 = nondet_int();
#line 505
    if (tmp___0) {

    } else {
#line 505
      break;
    }
#line 508
    tmp = nondet_int();
#line 508
    switch (tmp) {
    default: 
#line 510
    break;
    }
  }
#line 519
  ldv_check_final_state();
#line 522
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static bool tfp410_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct tfp410_priv *tfp ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2] ;
  u8 in_buf[2] ;
  struct i2c_msg msgs[2] ;
  int tmp ;

  {
#line 104
  tfp = dvo->dev_priv;
#line 105
  i2cbus = dvo->i2c_bus;
#line 109
  msgs[0].addr = i2cbus->slave_addr;
#line 109
  msgs[0].flags = 0;
#line 109
  msgs[0].len = 1;
#line 109
  msgs[0].buf = out_buf;
#line 109
  msgs[1].addr = i2cbus->slave_addr;
#line 109
  msgs[1].flags = 1;
#line 109
  msgs[1].len = 1;
#line 109
  msgs[1].buf = in_buf;
#line 124
  out_buf[0] = addr;
#line 125
  out_buf[1] = 0;
#line 127
  tmp = i2c_transfer(& i2cbus->adapter, msgs, 2);
#line 127
  if (tmp == 2) {
#line 128
    *ch = in_buf[0];
#line 129
    return (true);
  } else {

  }
#line 132
  if (! tfp->quiet) {
#line 133
    while (1) {
#line 133
      if (drm_debug) {
#line 133
        printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "tfp410_readb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 133
      break;
    }
  } else {

  }
#line 136
  return (false);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static bool tfp410_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct tfp410_priv *tfp ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 141
  tfp = dvo->dev_priv;
#line 142
  i2cbus = dvo->i2c_bus;
#line 144
  msg.addr = i2cbus->slave_addr;
#line 144
  msg.flags = 0;
#line 144
  msg.len = 2;
#line 144
  msg.buf = out_buf;
#line 151
  out_buf[0] = addr;
#line 152
  out_buf[1] = ch;
#line 154
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 154
  if (tmp == 1) {
#line 155
    return (true);
  } else {

  }
#line 157
  if (! tfp->quiet) {
#line 158
    while (1) {
#line 158
      if (drm_debug) {
#line 158
        printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "tfp410_writeb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 158
      break;
    }
  } else {

  }
#line 162
  return (false);
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static int tfp410_getid(struct intel_dvo_device *dvo , int addr ) 
{ 
  uint8_t ch1 ;
  uint8_t ch2 ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 169
  tmp = tfp410_readb(dvo, addr + 0, & ch1);
#line 169
  if (tmp) {
#line 169
    tmp___0 = tfp410_readb(dvo, addr + 1, & ch2);
#line 169
    if (tmp___0) {
#line 171
      return ((((int )ch2 << 8) & 65280) | ((int )ch1 & 255));
    } else {

    }
  } else {

  }
#line 173
  return (-1);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static bool tfp410_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct tfp410_priv *tfp ;
  int id ;
  void *tmp ;

  {
#line 184
  tmp = kzalloc(sizeof(struct tfp410_priv ), (16U | 64U) | 128U);
#line 184
  tfp = tmp;
#line 185
  if ((unsigned long )tfp == (unsigned long )((void *)0)) {
#line 186
    return (false);
  } else {

  }
#line 188
  dvo->i2c_bus = i2cbus;
#line 189
  (dvo->i2c_bus)->slave_addr = dvo->slave_addr;
#line 190
  dvo->dev_priv = tfp;
#line 191
  tfp->quiet = true;
#line 193
  id = tfp410_getid(dvo, 0);
#line 193
  if (id != 332) {
#line 194
    while (1) {
#line 194
      if (drm_debug) {
#line 194
        printk("<7>[drm:%s] tfp410 not detected got VID %X: from %s Slave %d.\n",
               "tfp410_init", id, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 194
      break;
    }
#line 196
    goto out;
  } else {

  }
#line 199
  id = tfp410_getid(dvo, 2);
#line 199
  if (id != 1040) {
#line 200
    while (1) {
#line 200
      if (drm_debug) {
#line 200
        printk("<7>[drm:%s] tfp410 not detected got DID %X: from %s Slave %d.\n",
               "tfp410_init", id, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 200
      break;
    }
#line 202
    goto out;
  } else {

  }
#line 204
  tfp->quiet = false;
#line 205
  return (true);
  out: 
#line 207
  kfree(tfp);
#line 208
  return (false);
}
}
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static enum drm_connector_status tfp410_detect(struct intel_dvo_device *dvo ) 
{ 
  enum drm_connector_status ret ;
  uint8_t ctl2 ;
  bool tmp ;

  {
#line 213
  ret = connector_status_disconnected;
#line 216
  tmp = tfp410_readb(dvo, 9, & ctl2);
#line 216
  if (tmp) {
#line 217
    if ((int )ctl2 & (1 << 1)) {
#line 218
      ret = connector_status_connected;
    } else {
#line 220
      ret = connector_status_disconnected;
    }
  } else {

  }
#line 223
  return (ret);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static enum drm_mode_status tfp410_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 229
  return (MODE_OK);
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 241
  return;
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  uint8_t ctl1 ;
  bool tmp ;

  {
#line 249
  tmp = tfp410_readb(dvo, 8, & ctl1);
#line 249
  if (tmp) {

  } else {
#line 250
    return;
  }
#line 252
  if (mode == 0) {
#line 253
    ctl1 = (int )ctl1 | (1 << 0);
  } else {
#line 255
    ctl1 = (int )ctl1 & ~ (1 << 0);
  }
#line 257
  tfp410_writeb(dvo, 8, ctl1);
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;
  uint8_t val2 ;

  {
#line 264
  tfp410_readb(dvo, 4, & val);
#line 265
  while (1) {
#line 265
    if (drm_debug) {
#line 265
      printk("<7>[drm:%s] TFP410_REV: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 265
    break;
  }
#line 266
  tfp410_readb(dvo, 8, & val);
#line 267
  while (1) {
#line 267
    if (drm_debug) {
#line 267
      printk("<7>[drm:%s] TFP410_CTL1: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 267
    break;
  }
#line 268
  tfp410_readb(dvo, 9, & val);
#line 269
  while (1) {
#line 269
    if (drm_debug) {
#line 269
      printk("<7>[drm:%s] TFP410_CTL2: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 269
    break;
  }
#line 270
  tfp410_readb(dvo, 10, & val);
#line 271
  while (1) {
#line 271
    if (drm_debug) {
#line 271
      printk("<7>[drm:%s] TFP410_CTL3: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 271
    break;
  }
#line 272
  tfp410_readb(dvo, 11, & val);
#line 273
  while (1) {
#line 273
    if (drm_debug) {
#line 273
      printk("<7>[drm:%s] TFP410_USERCFG: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 273
    break;
  }
#line 274
  tfp410_readb(dvo, 50, & val);
#line 275
  while (1) {
#line 275
    if (drm_debug) {
#line 275
      printk("<7>[drm:%s] TFP410_DE_DLY: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 275
    break;
  }
#line 276
  tfp410_readb(dvo, 51, & val);
#line 277
  while (1) {
#line 277
    if (drm_debug) {
#line 277
      printk("<7>[drm:%s] TFP410_DE_CTL: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 277
    break;
  }
#line 278
  tfp410_readb(dvo, 52, & val);
#line 279
  while (1) {
#line 279
    if (drm_debug) {
#line 279
      printk("<7>[drm:%s] TFP410_DE_TOP: 0x%02X\n", "tfp410_dump_regs", val);
    } else {

    }
#line 279
    break;
  }
#line 280
  tfp410_readb(dvo, 54, & val);
#line 281
  tfp410_readb(dvo, 55, & val2);
#line 282
  while (1) {
#line 282
    if (drm_debug) {
#line 282
      printk("<7>[drm:%s] TFP410_DE_CNT: 0x%02X%02X\n", "tfp410_dump_regs", val2,
             val);
    } else {

    }
#line 282
    break;
  }
#line 283
  tfp410_readb(dvo, 56, & val);
#line 284
  tfp410_readb(dvo, 57, & val2);
#line 285
  while (1) {
#line 285
    if (drm_debug) {
#line 285
      printk("<7>[drm:%s] TFP410_DE_LIN: 0x%02X%02X\n", "tfp410_dump_regs", val2,
             val);
    } else {

    }
#line 285
    break;
  }
#line 286
  tfp410_readb(dvo, 58, & val);
#line 287
  tfp410_readb(dvo, 59, & val2);
#line 288
  while (1) {
#line 288
    if (drm_debug) {
#line 288
      printk("<7>[drm:%s] TFP410_H_RES: 0x%02X%02X\n", "tfp410_dump_regs", val2, val);
    } else {

    }
#line 288
    break;
  }
#line 289
  tfp410_readb(dvo, 60, & val);
#line 290
  tfp410_readb(dvo, 61, & val2);
#line 291
  while (1) {
#line 291
    if (drm_debug) {
#line 291
      printk("<7>[drm:%s] TFP410_V_RES: 0x%02X%02X\n", "tfp410_dump_regs", val2, val);
    } else {

    }
#line 291
    break;
  }
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_save(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 296
  tfp = dvo->dev_priv;
#line 298
  tmp = tfp410_readb(dvo, 8, & tfp->saved_reg.ctl1);
#line 298
  if (tmp) {

  } else {
#line 299
    return;
  }
#line 301
  tmp___0 = tfp410_readb(dvo, 9, & tfp->saved_reg.ctl2);
#line 301
  if (tmp___0) {

  } else {
#line 302
    return;
  }
#line 303
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_restore(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;

  {
#line 307
  tfp = dvo->dev_priv;
#line 310
  tfp410_writeb(dvo, 8, (int )tfp->saved_reg.ctl1 & ~ 1);
#line 312
  tfp410_writeb(dvo, 9, tfp->saved_reg.ctl2);
#line 313
  tfp410_writeb(dvo, 8, tfp->saved_reg.ctl1);
#line 314
  return;
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
static void tfp410_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;

  {
#line 318
  tfp = dvo->dev_priv;
#line 320
  if (tfp) {
#line 321
    kfree(tfp);
#line 322
    dvo->dev_priv = (void *)0;
  } else {

  }
#line 324
  return;
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
struct intel_dvo_dev_ops tfp410_ops  = 
#line 326
     {& tfp410_init, 0, & tfp410_dpms, & tfp410_save, & tfp410_restore, & tfp410_mode_valid,
    0, 0, 0, & tfp410_mode_set, & tfp410_detect, 0, & tfp410_destroy, & tfp410_dump_regs};
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_tfp410.c"
void ldv_main22_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_tfp410_mode_set_6_p2 ;
  int var_tfp410_dpms_7_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 831
  LDV_IN_INTERRUPT = 1;
#line 840
  ldv_initialize();
#line 844
  while (1) {
#line 844
    tmp___0 = nondet_int();
#line 844
    if (tmp___0) {

    } else {
#line 844
      break;
    }
#line 847
    tmp = nondet_int();
#line 847
    switch (tmp) {
    case 0: 
#line 903
    ldv_handler_precall();
#line 904
    tfp410_init(var_group1, var_group2);
#line 911
    break;
    case 1: 
#line 966
    ldv_handler_precall();
#line 967
    tfp410_detect(var_group1);
#line 974
    break;
    case 2: 
#line 1029
    ldv_handler_precall();
#line 1030
    tfp410_mode_valid(var_group1, var_group3);
#line 1037
    break;
    case 3: 
#line 1092
    ldv_handler_precall();
#line 1093
    tfp410_mode_set(var_group1, var_group3, var_tfp410_mode_set_6_p2);
#line 1100
    break;
    case 4: 
#line 1155
    ldv_handler_precall();
#line 1156
    tfp410_dpms(var_group1, var_tfp410_dpms_7_p1);
#line 1163
    break;
    case 5: 
#line 1218
    ldv_handler_precall();
#line 1219
    tfp410_dump_regs(var_group1);
#line 1226
    break;
    case 6: 
#line 1281
    ldv_handler_precall();
#line 1282
    tfp410_save(var_group1);
#line 1289
    break;
    case 7: 
#line 1344
    ldv_handler_precall();
#line 1345
    tfp410_restore(var_group1);
#line 1352
    break;
    case 8: 
#line 1407
    ldv_handler_precall();
#line 1408
    tfp410_destroy(var_group1);
#line 1415
    break;
    default: 
#line 1416
    break;
    }
  }
#line 1425
  ldv_check_final_state();
#line 1428
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static bool sil164_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct sil164_priv *sil ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2] ;
  u8 in_buf[2] ;
  struct i2c_msg msgs[2] ;
  int tmp ;

  {
#line 79
  sil = dvo->dev_priv;
#line 80
  i2cbus = dvo->i2c_bus;
#line 84
  msgs[0].addr = i2cbus->slave_addr;
#line 84
  msgs[0].flags = 0;
#line 84
  msgs[0].len = 1;
#line 84
  msgs[0].buf = out_buf;
#line 84
  msgs[1].addr = i2cbus->slave_addr;
#line 84
  msgs[1].flags = 1;
#line 84
  msgs[1].len = 1;
#line 84
  msgs[1].buf = in_buf;
#line 99
  out_buf[0] = addr;
#line 100
  out_buf[1] = 0;
#line 102
  tmp = i2c_transfer(& i2cbus->adapter, msgs, 2);
#line 102
  if (tmp == 2) {
#line 103
    *ch = in_buf[0];
#line 104
    return (true);
  } else {

  }
#line 107
  if (! sil->quiet) {
#line 108
    while (1) {
#line 108
      if (drm_debug) {
#line 108
        printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "sil164_readb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 108
      break;
    }
  } else {

  }
#line 111
  return (false);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static bool sil164_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct sil164_priv *sil ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 116
  sil = dvo->dev_priv;
#line 117
  i2cbus = dvo->i2c_bus;
#line 119
  msg.addr = i2cbus->slave_addr;
#line 119
  msg.flags = 0;
#line 119
  msg.len = 2;
#line 119
  msg.buf = out_buf;
#line 126
  out_buf[0] = addr;
#line 127
  out_buf[1] = ch;
#line 129
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 129
  if (tmp == 1) {
#line 130
    return (true);
  } else {

  }
#line 132
  if (! sil->quiet) {
#line 133
    while (1) {
#line 133
      if (drm_debug) {
#line 133
        printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "sil164_writeb",
               addr, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 133
      break;
    }
  } else {

  }
#line 137
  return (false);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static bool sil164_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct sil164_priv *sil ;
  unsigned char ch ;
  void *tmp ;
  bool tmp___0 ;
  bool tmp___1 ;

  {
#line 148
  tmp = kzalloc(sizeof(struct sil164_priv ), (16U | 64U) | 128U);
#line 148
  sil = tmp;
#line 149
  if ((unsigned long )sil == (unsigned long )((void *)0)) {
#line 150
    return (false);
  } else {

  }
#line 152
  dvo->i2c_bus = i2cbus;
#line 153
  (dvo->i2c_bus)->slave_addr = dvo->slave_addr;
#line 154
  dvo->dev_priv = sil;
#line 155
  sil->quiet = true;
#line 157
  tmp___0 = sil164_readb(dvo, 0, & ch);
#line 157
  if (tmp___0) {

  } else {
#line 158
    goto out;
  }
#line 160
  if ((int )ch != (1 & 255)) {
#line 161
    while (1) {
#line 161
      if (drm_debug) {
#line 161
        printk("<7>[drm:%s] sil164 not detected got %d: from %s Slave %d.\n", "sil164_init",
               ch, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 161
      break;
    }
#line 163
    goto out;
  } else {

  }
#line 166
  tmp___1 = sil164_readb(dvo, 2, & ch);
#line 166
  if (tmp___1) {

  } else {
#line 167
    goto out;
  }
#line 169
  if ((int )ch != (6 & 255)) {
#line 170
    while (1) {
#line 170
      if (drm_debug) {
#line 170
        printk("<7>[drm:%s] sil164 not detected got %d: from %s Slave %d.\n", "sil164_init",
               ch, i2cbus->adapter.name, i2cbus->slave_addr);
      } else {

      }
#line 170
      break;
    }
#line 172
    goto out;
  } else {

  }
#line 174
  sil->quiet = false;
#line 176
  while (1) {
#line 176
    if (drm_debug) {
#line 176
      printk("<7>[drm:%s] init sil164 dvo controller successfully!\n", "sil164_init");
    } else {

    }
#line 176
    break;
  }
#line 177
  return (true);
  out: 
#line 180
  kfree(sil);
#line 181
  return (false);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static enum drm_connector_status sil164_detect(struct intel_dvo_device *dvo ) 
{ 
  uint8_t reg9 ;

  {
#line 188
  sil164_readb(dvo, 9, & reg9);
#line 190
  if ((int )reg9 & (1 << 1)) {
#line 191
    return (connector_status_connected);
  } else {
#line 193
    return (connector_status_disconnected);
  }
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static enum drm_mode_status sil164_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 199
  return (MODE_OK);
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 217
  return;
}
}
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  int ret ;
  unsigned char ch ;
  bool tmp ;

  {
#line 226
  tmp = sil164_readb(dvo, 8, & ch);
#line 226
  ret = tmp;
#line 227
  if (ret == false) {
#line 228
    return;
  } else {

  }
#line 230
  if (mode == 0) {
#line 231
    ch = (int )ch | (1 << 0);
  } else {
#line 233
    ch = (int )ch & ~ (1 << 0);
  }
#line 235
  sil164_writeb(dvo, 8, ch);
#line 236
  return;
}
}
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;

  {
#line 243
  sil164_readb(dvo, 6, & val);
#line 244
  while (1) {
#line 244
    if (drm_debug) {
#line 244
      printk("<7>[drm:%s] SIL164_FREQ_LO: 0x%02x\n", "sil164_dump_regs", val);
    } else {

    }
#line 244
    break;
  }
#line 245
  sil164_readb(dvo, 7, & val);
#line 246
  while (1) {
#line 246
    if (drm_debug) {
#line 246
      printk("<7>[drm:%s] SIL164_FREQ_HI: 0x%02x\n", "sil164_dump_regs", val);
    } else {

    }
#line 246
    break;
  }
#line 247
  sil164_readb(dvo, 8, & val);
#line 248
  while (1) {
#line 248
    if (drm_debug) {
#line 248
      printk("<7>[drm:%s] SIL164_REG8: 0x%02x\n", "sil164_dump_regs", val);
    } else {

    }
#line 248
    break;
  }
#line 249
  sil164_readb(dvo, 9, & val);
#line 250
  while (1) {
#line 250
    if (drm_debug) {
#line 250
      printk("<7>[drm:%s] SIL164_REG9: 0x%02x\n", "sil164_dump_regs", val);
    } else {

    }
#line 250
    break;
  }
#line 251
  sil164_readb(dvo, 12, & val);
#line 252
  while (1) {
#line 252
    if (drm_debug) {
#line 252
      printk("<7>[drm:%s] SIL164_REGC: 0x%02x\n", "sil164_dump_regs", val);
    } else {

    }
#line 252
    break;
  }
#line 253
  return;
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_save(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;
  bool tmp ;
  bool tmp___0 ;
  bool tmp___1 ;

  {
#line 257
  sil = dvo->dev_priv;
#line 259
  tmp = sil164_readb(dvo, 8, & sil->save_regs.reg8);
#line 259
  if (tmp) {

  } else {
#line 260
    return;
  }
#line 262
  tmp___0 = sil164_readb(dvo, 9, & sil->save_regs.reg9);
#line 262
  if (tmp___0) {

  } else {
#line 263
    return;
  }
#line 265
  tmp___1 = sil164_readb(dvo, 12, & sil->save_regs.regc);
#line 265
  if (tmp___1) {

  } else {
#line 266
    return;
  }
#line 268
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_restore(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;

  {
#line 273
  sil = dvo->dev_priv;
#line 276
  sil164_writeb(dvo, 8, (int )sil->save_regs.reg8 & ~ 1);
#line 278
  sil164_writeb(dvo, 9, sil->save_regs.reg9);
#line 279
  sil164_writeb(dvo, 12, sil->save_regs.regc);
#line 280
  sil164_writeb(dvo, 8, sil->save_regs.reg8);
#line 281
  return;
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
static void sil164_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;

  {
#line 285
  sil = dvo->dev_priv;
#line 287
  if (sil) {
#line 288
    kfree(sil);
#line 289
    dvo->dev_priv = (void *)0;
  } else {

  }
#line 291
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
struct intel_dvo_dev_ops sil164_ops  = 
#line 293
     {& sil164_init, 0, & sil164_dpms, & sil164_save, & sil164_restore, & sil164_mode_valid,
    0, 0, 0, & sil164_mode_set, & sil164_detect, 0, & sil164_destroy, & sil164_dump_regs};
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/dvo_sil164.c"
void ldv_main23_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_sil164_mode_set_5_p2 ;
  int var_sil164_dpms_6_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 627
  LDV_IN_INTERRUPT = 1;
#line 636
  ldv_initialize();
#line 640
  while (1) {
#line 640
    tmp___0 = nondet_int();
#line 640
    if (tmp___0) {

    } else {
#line 640
      break;
    }
#line 643
    tmp = nondet_int();
#line 643
    switch (tmp) {
    case 0: 
#line 680
    ldv_handler_precall();
#line 681
    sil164_init(var_group1, var_group2);
#line 688
    break;
    case 1: 
#line 724
    ldv_handler_precall();
#line 725
    sil164_detect(var_group1);
#line 732
    break;
    case 2: 
#line 768
    ldv_handler_precall();
#line 769
    sil164_mode_valid(var_group1, var_group3);
#line 776
    break;
    case 3: 
#line 812
    ldv_handler_precall();
#line 813
    sil164_mode_set(var_group1, var_group3, var_sil164_mode_set_5_p2);
#line 820
    break;
    case 4: 
#line 856
    ldv_handler_precall();
#line 857
    sil164_dpms(var_group1, var_sil164_dpms_6_p1);
#line 864
    break;
    case 5: 
#line 900
    ldv_handler_precall();
#line 901
    sil164_dump_regs(var_group1);
#line 908
    break;
    case 6: 
#line 944
    ldv_handler_precall();
#line 945
    sil164_save(var_group1);
#line 952
    break;
    case 7: 
#line 988
    ldv_handler_precall();
#line 989
    sil164_restore(var_group1);
#line 996
    break;
    case 8: 
#line 1032
    ldv_handler_precall();
#line 1033
    sil164_destroy(var_group1);
#line 1040
    break;
    default: 
#line 1041
    break;
    }
  }
#line 1050
  ldv_check_final_state();
#line 1053
  return;
}
}
#line 332 "include/acpi/acpi_bus.h"
extern int register_acpi_notifier(struct notifier_block * ) ;
#line 333
extern int unregister_acpi_notifier(struct notifier_block * ) ;
#line 577 "include/linux/pci.h"
extern int pci_bus_read_config_dword(struct pci_bus *bus , unsigned int devfn , int where ,
                                     u32 *val ) ;
#line 583
extern int pci_bus_write_config_dword(struct pci_bus *bus , unsigned int devfn , int where ,
                                      u32 val ) ;
#line 594 "include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev *dev , int where , u32 *val ) 
{ 
  int tmp ;

  {
#line 597
  tmp = pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
#line 597
  return (tmp);
}
}
#line 607 "include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev *dev , int where , u32 val ) 
{ 
  int tmp ;

  {
#line 610
  tmp = pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
#line 610
  return (tmp);
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_backlight(struct drm_device *dev , u32 bclp ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 blc_pwm_ctl ;
  u32 blc_pwm_ctl2 ;

  {
#line 142
  dev_priv = dev->dev_private;
#line 143
  asle = dev_priv->opregion.asle;
#line 146
  if (! (bclp & (unsigned int )(1 << 31))) {
#line 147
    return (2 << 12);
  } else {

  }
#line 149
  bclp = bclp & (unsigned int )(~ (1 << 31));
#line 150
  if (bclp < (u32 )0 || bclp > (u32 )255) {
#line 151
    return (2 << 12);
  } else {

  }
#line 153
  blc_pwm_ctl = readl(dev_priv->regs + 397908);
#line 154
  blc_pwm_ctl = blc_pwm_ctl & (unsigned int )(~ 65535);
#line 155
  blc_pwm_ctl2 = readl(dev_priv->regs + 397904);
#line 157
  if (blc_pwm_ctl2 & (unsigned int )(1 << 30)) {
#line 158
    pci_write_config_dword(dev->pdev, 244, bclp);
  } else {
#line 160
    writel(blc_pwm_ctl | (bclp * (u32 )257 - (u32 )1), dev_priv->regs + 397908);
  }
#line 162
  asle->cblv = (bclp * (u32 )100) / (u32 )255 | (unsigned int )(1 << 31);
#line 164
  return (0);
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_als_illum(struct drm_device *dev , u32 alsi ) 
{ 


  {
#line 171
  return (0);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_pwm_freq(struct drm_device *dev , u32 pfmb ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;
  u32 pwm ;

  {
#line 176
  dev_priv = dev->dev_private;
#line 177
  if (pfmb & (unsigned int )(1 << 31)) {
#line 178
    tmp = readl(dev_priv->regs + 397908);
#line 178
    blc_pwm_ctl = tmp;
#line 179
    pwm = pfmb & 2147483136U;
#line 180
    blc_pwm_ctl = blc_pwm_ctl & 65535U;
#line 181
    pwm = pwm >> 9;
  } else {

  }
#line 184
  return (0);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_pfit(struct drm_device *dev , u32 pfit ) 
{ 


  {
#line 191
  if (! (pfit & (unsigned int )(1 << 31))) {
#line 192
    return (2 << 14);
  } else {

  }
#line 193
  return (0);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
void opregion_asle_intr(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 asle_stat ;
  u32 asle_req ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
#line 198
  dev_priv = dev->dev_private;
#line 199
  asle = dev_priv->opregion.asle;
#line 200
  asle_stat = 0;
#line 203
  if (! asle) {
#line 204
    return;
  } else {

  }
#line 206
  asle_req = asle->aslc & 15U;
#line 208
  if (! asle_req) {
#line 209
    while (1) {
#line 209
      if (drm_debug) {
#line 209
        printk("<7>[drm:%s] non asle set request??\n", "opregion_asle_intr");
      } else {

      }
#line 209
      break;
    }
#line 210
    return;
  } else {

  }
#line 213
  if (asle_req & (unsigned int )(1 << 0)) {
#line 214
    tmp = asle_set_als_illum(dev, asle->alsi);
#line 214
    asle_stat = asle_stat | tmp;
  } else {

  }
#line 216
  if (asle_req & (unsigned int )(1 << 1)) {
#line 217
    tmp___0 = asle_set_backlight(dev, asle->bclp);
#line 217
    asle_stat = asle_stat | tmp___0;
  } else {

  }
#line 219
  if (asle_req & (unsigned int )(1 << 2)) {
#line 220
    tmp___1 = asle_set_pfit(dev, asle->pfit);
#line 220
    asle_stat = asle_stat | tmp___1;
  } else {

  }
#line 222
  if (asle_req & (unsigned int )(1 << 3)) {
#line 223
    tmp___2 = asle_set_pwm_freq(dev, asle->pfmb);
#line 223
    asle_stat = asle_stat | tmp___2;
  } else {

  }
#line 225
  asle->aslc = asle_stat;
#line 226
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
void opregion_enable_asle(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  unsigned long irqflags ;

  {
#line 235
  dev_priv = dev->dev_private;
#line 236
  asle = dev_priv->opregion.asle;
#line 238
  if (asle) {
#line 239
    if (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 242
      while (1) {
#line 242
        irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 242
        break;
      }
#line 243
      i915_enable_pipestat(dev_priv, 1, 1UL << 22);
#line 245
      while (1) {
#line 245
        _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 245
        break;
      }
    } else {

    }
#line 249
    asle->tche = (((1 << 0) | (1 << 1)) | (1 << 2)) | (1 << 3);
#line 251
    asle->ardy = 1;
  } else {

  }
#line 253
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static struct intel_opregion *system_opregion  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static int intel_opregion_video_event(struct notifier_block *nb , unsigned long val ,
                                      void *data ) 
{ 
  struct opregion_acpi *acpi ;

  {
#line 273
  if (! system_opregion) {
#line 274
    return (0);
  } else {

  }
#line 276
  acpi = system_opregion->acpi;
#line 277
  acpi->csts = 0;
#line 279
  return (1);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
static struct notifier_block intel_opregion_notifier  =    {& intel_opregion_video_event, 0, 0};
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
int intel_opregion_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;
  void *base ;
  u32 asls ;
  u32 mboxes ;
  int err ;
  int tmp ;

  {
#line 288
  dev_priv = dev->dev_private;
#line 289
  opregion = & dev_priv->opregion;
#line 292
  err = 0;
#line 294
  pci_read_config_dword(dev->pdev, 252, & asls);
#line 295
  while (1) {
#line 295
    if (drm_debug) {
#line 295
      printk("<7>[drm:%s] graphic opregion physical addr: 0x%x\n", "intel_opregion_init",
             asls);
    } else {

    }
#line 295
    break;
  }
#line 296
  if (asls == (u32 )0) {
#line 297
    while (1) {
#line 297
      if (drm_debug) {
#line 297
        printk("<7>[drm:%s] ACPI OpRegion not supported!\n", "intel_opregion_init");
      } else {

      }
#line 297
      break;
    }
#line 298
    return (-524);
  } else {

  }
#line 301
  base = ioremap(asls, 8 * 1024);
#line 302
  if (! base) {
#line 303
    return (-12);
  } else {

  }
#line 305
  opregion->header = base;
#line 306
  tmp = memcmp((opregion->header)->signature, "IntelGraphicsMem", 16);
#line 306
  if (tmp) {
#line 307
    while (1) {
#line 307
      if (drm_debug) {
#line 307
        printk("<7>[drm:%s] opregion signature mismatch\n", "intel_opregion_init");
      } else {

      }
#line 307
      break;
    }
#line 308
    err = -22;
#line 309
    goto err_out;
  } else {

  }
#line 312
  mboxes = (opregion->header)->mboxes;
#line 313
  if (mboxes & (unsigned int )(1 << 0)) {
#line 314
    while (1) {
#line 314
      if (drm_debug) {
#line 314
        printk("<7>[drm:%s] Public ACPI methods supported\n", "intel_opregion_init");
      } else {

      }
#line 314
      break;
    }
#line 315
    opregion->acpi = base + 256;
  } else {
#line 317
    while (1) {
#line 317
      if (drm_debug) {
#line 317
        printk("<7>[drm:%s] Public ACPI methods not supported\n", "intel_opregion_init");
      } else {

      }
#line 317
      break;
    }
#line 318
    err = -524;
#line 319
    goto err_out;
  }
#line 321
  opregion->enabled = 1;
#line 323
  if (mboxes & (unsigned int )(1 << 1)) {
#line 324
    while (1) {
#line 324
      if (drm_debug) {
#line 324
        printk("<7>[drm:%s] SWSCI supported\n", "intel_opregion_init");
      } else {

      }
#line 324
      break;
    }
#line 325
    opregion->swsci = base + 512;
  } else {

  }
#line 327
  if (mboxes & (unsigned int )(1 << 2)) {
#line 328
    while (1) {
#line 328
      if (drm_debug) {
#line 328
        printk("<7>[drm:%s] ASLE supported\n", "intel_opregion_init");
      } else {

      }
#line 328
      break;
    }
#line 329
    opregion->asle = base + 768;
  } else {

  }
#line 335
  (opregion->acpi)->csts = 0;
#line 336
  (opregion->acpi)->drdy = 1;
#line 338
  system_opregion = opregion;
#line 339
  register_acpi_notifier(& intel_opregion_notifier);
#line 341
  return (0);
  err_out: 
#line 344
  iounmap(opregion->header);
#line 345
  opregion->header = (void *)0;
#line 346
  return (err);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
void intel_opregion_free(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;

  {
#line 351
  dev_priv = dev->dev_private;
#line 352
  opregion = & dev_priv->opregion;
#line 354
  if (! opregion->enabled) {
#line 355
    return;
  } else {

  }
#line 357
  (opregion->acpi)->drdy = 0;
#line 359
  system_opregion = (void *)0;
#line 360
  unregister_acpi_notifier(& intel_opregion_notifier);
#line 363
  iounmap(opregion->header);
#line 364
  opregion->header = (void *)0;
#line 365
  opregion->acpi = (void *)0;
#line 366
  opregion->swsci = (void *)0;
#line 367
  opregion->asle = (void *)0;
#line 369
  opregion->enabled = 0;
#line 370
  return;
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_opregion.c"
void ldv_main24_sequence_infinite_withcheck_stateful(void) 
{ 
  struct notifier_block *var_group1 ;
  unsigned long var_intel_opregion_video_event_6_p1 ;
  void *var_intel_opregion_video_event_6_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 472
  LDV_IN_INTERRUPT = 1;
#line 481
  ldv_initialize();
#line 485
  while (1) {
#line 485
    tmp___0 = nondet_int();
#line 485
    if (tmp___0) {

    } else {
#line 485
      break;
    }
#line 488
    tmp = nondet_int();
#line 488
    switch (tmp) {
    case 0: 
#line 539
    ldv_handler_precall();
#line 540
    intel_opregion_video_event(var_group1, var_intel_opregion_video_event_6_p1, var_intel_opregion_video_event_6_p2);
#line 547
    break;
    default: 
#line 548
    break;
    }
  }
#line 557
  ldv_check_final_state();
#line 560
  return;
}
}
#line 207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
__inline static void *compat_alloc_user_space(long len ) 
{ 
  struct pt_regs *regs ;
  struct task_struct *tmp ;

  {
#line 209
  tmp = get_current();
#line 209
  regs = (struct pt_regs *)tmp->thread.sp0 - 1;
#line 210
  return ((void *)regs->sp - len);
}
}
#line 73 "include/asm-generic/ioctl.h"
extern unsigned int __invalid_size_argument_for_IOC ;
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 28
extern void unlock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 210 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void) ;
#line 1046 "include/drm/drmP.h"
extern long drm_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_batchbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_batchbuffer32_t batchbuffer32 ;
  drm_i915_batchbuffer_t *batchbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___4 ;

  {
#line 53
  tmp = copy_from_user(& batchbuffer32, (void *)arg, sizeof(batchbuffer32));
#line 53
  if (tmp) {
#line 55
    return (-14);
  } else {

  }
#line 57
  tmp___0 = compat_alloc_user_space(sizeof(*batchbuffer));
#line 57
  batchbuffer = tmp___0;
#line 58
  tmp___1 = current_thread_info();
#line 58
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batchbuffer),
            "g" ((long )sizeof(*batchbuffer)), "rm" (tmp___1->addr_limit.seg));
#line 58
  if (flag == 0UL) {
#line 58
    tmp___2 = 1;
  } else {
#line 58
    tmp___2 = 0;
  }
#line 58
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 65
  if (tmp___3) {
#line 59
    while (1) {
#line 59
      __pu_err = 0;
#line 59
      switch (sizeof(batchbuffer->start)) {
      case 1UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 2UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 4UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 8UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      default: 
#line 59
      __put_user_bad();
      }
#line 59
      break;
    }
#line 65
    if (__pu_err) {
#line 67
      return (-14);
    } else {
#line 60
      while (1) {
#line 60
        __pu_err___0 = 0;
#line 60
        switch (sizeof(batchbuffer->used)) {
        case 1UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 2UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 4UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 8UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        default: 
#line 60
        __put_user_bad();
        }
#line 60
        break;
      }
#line 65
      if (__pu_err___0) {
#line 67
        return (-14);
      } else {
#line 61
        while (1) {
#line 61
          __pu_err___1 = 0;
#line 61
          switch (sizeof(batchbuffer->DR1)) {
          case 1UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 2UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 4UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 8UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          default: 
#line 61
          __put_user_bad();
          }
#line 61
          break;
        }
#line 65
        if (__pu_err___1) {
#line 67
          return (-14);
        } else {
#line 62
          while (1) {
#line 62
            __pu_err___2 = 0;
#line 62
            switch (sizeof(batchbuffer->DR4)) {
            case 1UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 2UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 4UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 8UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            default: 
#line 62
            __put_user_bad();
            }
#line 62
            break;
          }
#line 65
          if (__pu_err___2) {
#line 67
            return (-14);
          } else {
#line 63
            while (1) {
#line 63
              __pu_err___3 = 0;
#line 63
              switch (sizeof(batchbuffer->num_cliprects)) {
              case 1UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "b"
                                   " %"
                                   "b"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "iq" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 2UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "w"
                                   " %"
                                   "w"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 4UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "l"
                                   " %"
                                   "k"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 8UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "q"
                                   " %"
                                   ""
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "Zr" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              default: 
#line 63
              __put_user_bad();
              }
#line 63
              break;
            }
#line 65
            if (__pu_err___3) {
#line 67
              return (-14);
            } else {
#line 65
              while (1) {
#line 65
                __pu_err___4 = 0;
#line 65
                switch (sizeof(batchbuffer->cliprects)) {
                case 1UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "b"
                                     " %"
                                     "b"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 2UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "w"
                                     " %"
                                     "w"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 4UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "l"
                                     " %"
                                     "k"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 8UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "q"
                                     " %"
                                     ""
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                default: 
#line 65
                __put_user_bad();
                }
#line 65
                break;
              }
#line 65
              if (__pu_err___4) {
#line 67
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  } else {
#line 67
    return (-14);
  }
#line 69
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )(((1U << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 3) << 0)) | ((sizeof(drm_i915_batchbuffer_t ) == sizeof(drm_i915_batchbuffer_t [1]) && sizeof(drm_i915_batchbuffer_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_batchbuffer_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )batchbuffer);
#line 69
  return (tmp___4);
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_cmdbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_cmdbuffer32_t cmdbuffer32 ;
  drm_i915_cmdbuffer_t *cmdbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___4 ;

  {
#line 89
  tmp = copy_from_user(& cmdbuffer32, (void *)arg, sizeof(cmdbuffer32));
#line 89
  if (tmp) {
#line 91
    return (-14);
  } else {

  }
#line 93
  tmp___0 = compat_alloc_user_space(sizeof(*cmdbuffer));
#line 93
  cmdbuffer = tmp___0;
#line 94
  tmp___1 = current_thread_info();
#line 94
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuffer),
            "g" ((long )sizeof(*cmdbuffer)), "rm" (tmp___1->addr_limit.seg));
#line 94
  if (flag == 0UL) {
#line 94
    tmp___2 = 1;
  } else {
#line 94
    tmp___2 = 0;
  }
#line 94
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 101
  if (tmp___3) {
#line 95
    while (1) {
#line 95
      __pu_err = 0;
#line 95
      switch (sizeof(cmdbuffer->buf)) {
      case 1UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 2UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 4UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 8UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      default: 
#line 95
      __put_user_bad();
      }
#line 95
      break;
    }
#line 101
    if (__pu_err) {
#line 103
      return (-14);
    } else {
#line 97
      while (1) {
#line 97
        __pu_err___0 = 0;
#line 97
        switch (sizeof(cmdbuffer->sz)) {
        case 1UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 2UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 4UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 8UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        default: 
#line 97
        __put_user_bad();
        }
#line 97
        break;
      }
#line 101
      if (__pu_err___0) {
#line 103
        return (-14);
      } else {
#line 98
        while (1) {
#line 98
          __pu_err___1 = 0;
#line 98
          switch (sizeof(cmdbuffer->DR1)) {
          case 1UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 2UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 4UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 8UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          default: 
#line 98
          __put_user_bad();
          }
#line 98
          break;
        }
#line 101
        if (__pu_err___1) {
#line 103
          return (-14);
        } else {
#line 99
          while (1) {
#line 99
            __pu_err___2 = 0;
#line 99
            switch (sizeof(cmdbuffer->DR4)) {
            case 1UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 2UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 4UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 8UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            default: 
#line 99
            __put_user_bad();
            }
#line 99
            break;
          }
#line 101
          if (__pu_err___2) {
#line 103
            return (-14);
          } else {
#line 100
            while (1) {
#line 100
              __pu_err___3 = 0;
#line 100
              switch (sizeof(cmdbuffer->num_cliprects)) {
              case 1UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "b"
                                   " %"
                                   "b"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "iq" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 2UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "w"
                                   " %"
                                   "w"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 4UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "l"
                                   " %"
                                   "k"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 8UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "q"
                                   " %"
                                   ""
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "Zr" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              default: 
#line 100
              __put_user_bad();
              }
#line 100
              break;
            }
#line 101
            if (__pu_err___3) {
#line 103
              return (-14);
            } else {
#line 101
              while (1) {
#line 101
                __pu_err___4 = 0;
#line 101
                switch (sizeof(cmdbuffer->cliprects)) {
                case 1UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "b"
                                     " %"
                                     "b"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 2UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "w"
                                     " %"
                                     "w"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 4UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "l"
                                     " %"
                                     "k"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 8UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "q"
                                     " %"
                                     ""
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                default: 
#line 101
                __put_user_bad();
                }
#line 101
                break;
              }
#line 101
              if (__pu_err___4) {
#line 103
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  } else {
#line 103
    return (-14);
  }
#line 105
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )(((1U << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 11) << 0)) | ((sizeof(drm_i915_cmdbuffer_t ) == sizeof(drm_i915_cmdbuffer_t [1]) && sizeof(drm_i915_cmdbuffer_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_cmdbuffer_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )cmdbuffer);
#line 105
  return (tmp___4);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_irq_emit(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_irq_emit32_t req32 ;
  drm_i915_irq_emit_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  int tmp___4 ;

  {
#line 119
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 119
  if (tmp) {
#line 120
    return (-14);
  } else {

  }
#line 122
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 122
  request = tmp___0;
#line 123
  tmp___1 = current_thread_info();
#line 123
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 123
  if (flag == 0UL) {
#line 123
    tmp___2 = 1;
  } else {
#line 123
    tmp___2 = 0;
  }
#line 123
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 124
  if (tmp___3) {
#line 124
    while (1) {
#line 124
      __pu_err = 0;
#line 124
      switch (sizeof(request->irq_seq)) {
      case 1UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 2UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 4UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 8UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      default: 
#line 124
      __put_user_bad();
      }
#line 124
      break;
    }
#line 124
    if (__pu_err) {
#line 126
      return (-14);
    } else {

    }
  } else {
#line 126
    return (-14);
  }
#line 128
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 4) << 0)) | ((sizeof(drm_i915_irq_emit_t ) == sizeof(drm_i915_irq_emit_t [1]) && sizeof(drm_i915_irq_emit_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_irq_emit_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 128
  return (tmp___4);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_getparam(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_getparam32_t req32 ;
  drm_i915_getparam_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  int tmp___4 ;

  {
#line 142
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 142
  if (tmp) {
#line 143
    return (-14);
  } else {

  }
#line 145
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 145
  request = tmp___0;
#line 146
  tmp___1 = current_thread_info();
#line 146
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 146
  if (flag == 0UL) {
#line 146
    tmp___2 = 1;
  } else {
#line 146
    tmp___2 = 0;
  }
#line 146
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 148
  if (tmp___3) {
#line 147
    while (1) {
#line 147
      __pu_err = 0;
#line 147
      switch (sizeof(request->param)) {
      case 1UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 2UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 4UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 8UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      default: 
#line 147
      __put_user_bad();
      }
#line 147
      break;
    }
#line 148
    if (__pu_err) {
#line 150
      return (-14);
    } else {
#line 148
      while (1) {
#line 148
        __pu_err___0 = 0;
#line 148
        switch (sizeof(request->value)) {
        case 1UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 2UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 4UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 8UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        default: 
#line 148
        __put_user_bad();
        }
#line 148
        break;
      }
#line 148
      if (__pu_err___0) {
#line 150
        return (-14);
      } else {

      }
    }
  } else {
#line 150
    return (-14);
  }
#line 152
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 6) << 0)) | ((sizeof(drm_i915_getparam_t ) == sizeof(drm_i915_getparam_t [1]) && sizeof(drm_i915_getparam_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_getparam_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 152
  return (tmp___4);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_alloc(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_mem_alloc32_t req32 ;
  drm_i915_mem_alloc_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  int tmp___4 ;

  {
#line 169
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 169
  if (tmp) {
#line 170
    return (-14);
  } else {

  }
#line 172
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 172
  request = tmp___0;
#line 173
  tmp___1 = current_thread_info();
#line 173
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 173
  if (flag == 0UL) {
#line 173
    tmp___2 = 1;
  } else {
#line 173
    tmp___2 = 0;
  }
#line 173
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 177
  if (tmp___3) {
#line 174
    while (1) {
#line 174
      __pu_err = 0;
#line 174
      switch (sizeof(request->region)) {
      case 1UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 2UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 4UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 8UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      default: 
#line 174
      __put_user_bad();
      }
#line 174
      break;
    }
#line 177
    if (__pu_err) {
#line 179
      return (-14);
    } else {
#line 175
      while (1) {
#line 175
        __pu_err___0 = 0;
#line 175
        switch (sizeof(request->alignment)) {
        case 1UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 2UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 4UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 8UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        default: 
#line 175
        __put_user_bad();
        }
#line 175
        break;
      }
#line 177
      if (__pu_err___0) {
#line 179
        return (-14);
      } else {
#line 176
        while (1) {
#line 176
          __pu_err___1 = 0;
#line 176
          switch (sizeof(request->size)) {
          case 1UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 2UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 4UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 8UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          default: 
#line 176
          __put_user_bad();
          }
#line 176
          break;
        }
#line 177
        if (__pu_err___1) {
#line 179
          return (-14);
        } else {
#line 177
          while (1) {
#line 177
            __pu_err___2 = 0;
#line 177
            switch (sizeof(request->region_offset)) {
            case 1UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 2UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 4UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 8UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            default: 
#line 177
            __put_user_bad();
            }
#line 177
            break;
          }
#line 177
          if (__pu_err___2) {
#line 179
            return (-14);
          } else {

          }
        }
      }
    }
  } else {
#line 179
    return (-14);
  }
#line 181
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 8) << 0)) | ((sizeof(drm_i915_mem_alloc_t ) == sizeof(drm_i915_mem_alloc_t [1]) && sizeof(drm_i915_mem_alloc_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_mem_alloc_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 181
  return (tmp___4);
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
drm_ioctl_compat_t *i915_compat_ioctls[12]  = 
#line 185
  {      0,      0,      0,      & compat_i915_batchbuffer, 
        & compat_i915_irq_emit,      0,      & compat_i915_getparam,      0, 
        & compat_i915_alloc,      0,      0,      & compat_i915_cmdbuffer};
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/32_1/drivers/gpu/drm/i915/i915_ioc32.c"
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  unsigned int nr ;
  drm_ioctl_compat_t *fn ;
  int ret ;
  long tmp ;

  {
#line 204
  nr = (cmd >> 0) & (unsigned int )((1 << 8) - 1);
#line 205
  fn = (void *)0;
#line 208
  if (nr < 64U) {
#line 209
    tmp = drm_compat_ioctl(filp, cmd, arg);
#line 209
    return (tmp);
  } else {

  }
#line 211
  if ((unsigned long )nr < 64UL + (sizeof(i915_compat_ioctls) / sizeof(i915_compat_ioctls[0]) + (sizeof(char [1 - 2 * 0]) - 1UL))) {
#line 212
    fn = i915_compat_ioctls[nr - 64U];
  } else {

  }
#line 214
  lock_kernel();
#line 215
  if ((unsigned long )fn != (unsigned long )((void *)0)) {
#line 216
    ret = (*fn)(filp, cmd, arg);
  } else {
#line 218
    ret = drm_ioctl((filp->f_path.dentry)->d_inode, filp, cmd, arg);
  }
#line 219
  unlock_kernel();
#line 221
  return (ret);
}
}
#line 136 "include/linux/mutex.h"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) ;
#line 137
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) ;
#line 148
int mutex_trylock(struct mutex *lock ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ldv_mutex  =    1;
#line 18 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 25
  if (ldv_mutex == 1) {

  } else {
#line 25
    ldv_error();
  }
#line 28
  nondetermined = ldv_undef_int();
#line 31
  if (nondetermined) {
#line 34
    ldv_mutex = 2;
#line 36
    return (0);
  } else {
#line 41
    return (-4);
  }
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 53
  if (ldv_mutex == 1) {

  } else {
#line 53
    ldv_error();
  }
#line 56
  nondetermined = ldv_undef_int();
#line 59
  if (nondetermined) {
#line 62
    ldv_mutex = 2;
#line 64
    return (0);
  } else {
#line 69
    return (-4);
  }
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 79
  if (ldv_mutex == 1) {

  } else {
#line 79
    ldv_error();
  }
#line 82
  atomic_value_after_dec = ldv_undef_int();
#line 85
  if (atomic_value_after_dec == 0) {
#line 88
    ldv_mutex = 2;
#line 90
    return (1);
  } else {

  }
#line 94
  return (0);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_lock(struct mutex *lock ) 
{ 


  {
#line 104
  if (ldv_mutex == 1) {

  } else {
#line 104
    ldv_error();
  }
#line 106
  ldv_mutex = 2;
#line 107
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int mutex_trylock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 117
  if (ldv_mutex == 1) {

  } else {
#line 117
    ldv_error();
  }
#line 120
  nondetermined = ldv_undef_int();
#line 123
  if (nondetermined) {
#line 126
    ldv_mutex = 2;
#line 128
    return (1);
  } else {
#line 133
    return (0);
  }
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_unlock(struct mutex *lock ) 
{ 


  {
#line 143
  if (ldv_mutex == 2) {

  } else {
#line 143
    ldv_error();
  }
#line 145
  ldv_mutex = 1;
#line 146
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 152
  if (ldv_mutex == 1) {

  } else {
#line 152
    ldv_error();
  }
#line 153
  return;
}
}
