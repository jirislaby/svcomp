/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 171 "include/linux/types.h"
typedef __u16 __le16;
#line 172 "include/linux/types.h"
typedef __u16 __be16;
#line 174 "include/linux/types.h"
typedef __u32 __be32;
#line 179 "include/linux/types.h"
typedef __u32 __wsum;
#line 182 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 200 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 200 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 201 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 206
struct hlist_node;
#line 206 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 210 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 221
struct task_struct;
#line 222
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1205_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1205_8 ldv_1205 ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 121 "include/linux/kernel.h"
struct completion;
#line 228
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2087_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2102_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2103_14 {
   struct __anonstruct_ldv_2087_15 ldv_2087 ;
   struct __anonstruct_ldv_2102_16 ldv_2102 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2103_14 ldv_2103 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4690_20 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4696_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4697_19 {
   struct __anonstruct_ldv_4690_20 ldv_4690 ;
   struct __anonstruct_ldv_4696_21 ldv_4696 ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4706_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4697_19 ldv_4697 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4706_22 ldv_4706 ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5174_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5197_25 {
   struct __anonstruct_ldv_5174_26 ldv_5174 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5197_25 ldv_5197 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 176 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 551 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5787_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5788_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5787_32 ldv_5787 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5788_31 ldv_5788 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 282 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 639 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 162
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 753 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 410 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   unsigned long wakeup_count ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 308 "include/linux/topology.h"
struct vm_area_struct;
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 181 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 42 "include/linux/moduleparam.h"
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion_ldv_10946_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_10946_110 ldv_10946 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 396 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 567 "include/linux/rcupdate.h"
struct tracepoint;
#line 568 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 28 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 87 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 383
struct module_sect_attrs;
#line 383
struct module_notes_attrs;
#line 383
struct ftrace_event_call;
#line 383 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 74 "include/linux/connector.h"
struct hlist_nulls_node;
#line 74 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12288_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12289_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12288_123 ldv_12288 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12294_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12297_124 {
   struct __anonstruct_ldv_12294_125 ldv_12294 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12301_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12289_122 ldv_12289 ;
   union __anonunion_ldv_12297_124 ldv_12297 ;
   union __anonunion_ldv_12301_126 ldv_12301 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12797 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12797 socket_state;
#line 175 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 176
struct pipe_inode_info;
#line 177
struct inode;
#line 178
struct net;
#line 195
struct fasync_struct;
#line 195 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 18
struct user_struct;
#line 19
struct writeback_control;
#line 165 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 182 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 817
struct hrtimer_clock_base;
#line 818
struct hrtimer_cpu_base;
#line 827
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 832 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_18998_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_18999_131 {
   __wsum csum ;
   struct __anonstruct_ldv_18998_132 ldv_18998 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19029_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_18999_131 ldv_18999 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19029_133 ldv_19029 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 488
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 315 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 315 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 398 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 204
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 211
struct pid_namespace;
#line 211 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 51 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 416 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 162 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 566 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 566 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 566 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 569 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 618
struct backing_dev_info;
#line 619 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 640
struct hd_struct;
#line 640
struct gendisk;
#line 640 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_22998_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22998_152 ldv_22998 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 874 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 882 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 905 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 905 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1029
struct files_struct;
#line 1029 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1134 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1313
struct file_system_type;
#line 1313
struct super_operations;
#line 1313
struct xattr_handler;
#line 1313
struct mtd_info;
#line 1313 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1433 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1471
struct block_device_operations;
#line 1472 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1511 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1554 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1731 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1233
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 99 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_161 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_161 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_164 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_167 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_168 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_162 {
   int _pad[28U] ;
   struct __anonstruct__kill_163 _kill ;
   struct __anonstruct__timer_164 _timer ;
   struct __anonstruct__rt_165 _rt ;
   struct __anonstruct__sigchld_166 _sigchld ;
   struct __anonstruct__sigfault_167 _sigfault ;
   struct __anonstruct__sigpoll_168 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_162 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_171 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_171 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_28845_172 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_173 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_174 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_28845_172 ldv_28845 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_173 type_data ;
   union __anonunion_payload_174 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 357
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_175 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_175 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 398 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 440 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 448 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 455 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 472 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 508
struct tty_struct;
#line 508
struct taskstats;
#line 508
struct tty_audit_buf;
#line 508 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
};
#line 655 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 697
struct reclaim_state;
#line 698 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 716 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 990
struct io_context;
#line 1013
struct rq;
#line 1014 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1077 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1082 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1117 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1143
struct rt_rq;
#line 1143 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1160
struct mem_cgroup;
#line 1160 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1496
struct css_set;
#line 1496
struct compat_robust_list_head;
#line 1496
struct ftrace_ret_stack;
#line 1496 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 326 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3000 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 785 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_33770_180 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_33770_180 ldv_33770 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_181 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_181 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_33912_182 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_33918_183 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_33926_184 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_33912_182 ldv_33912 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_33918_183 ldv_33918 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_33926_184 ldv_33926 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_185 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_185 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 697
struct request_sock_ops;
#line 698
struct timewait_sock_ops;
#line 699
struct inet_hashinfo;
#line 700
struct raw_hashinfo;
#line 701
struct udp_table;
#line 701 "include/net/sock.h"
union __anonunion_h_186 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 701 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_186 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 172 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 185 "include/linux/drbd.h"
struct __anonstruct_ldv_35070_187 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 185 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35070_187 ldv_35070 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_188 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_188 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_189 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_189 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 56
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 371 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_38634_197 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_38634_197 ldv_38634 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 185 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 186 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 187 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 188 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 189 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 190 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 198 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 200 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 201 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 202 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 203
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 210 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 216 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 225 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 252 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1171 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1192 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1193 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1194 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1195 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1196 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1237 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct __anonstruct_ldv_40112_204 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 492 "include/linux/ipv6.h"
union __anonunion_ldv_40114_203 {
   struct __anonstruct_ldv_40112_204 ldv_40112 ;
   struct rcu_head rcu ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_40114_203 ldv_40114 ;
};
#line 49 "include/linux/route.h"
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 225 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1516 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 621
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 628 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 649
struct drbd_work;
#line 659 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 663
struct drbd_tl_epoch;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 702 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 746 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   u64 block_id ;
};
#line 798
struct drbd_bitmap;
#line 799 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 851 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 861 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 138 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 903 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 910
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 917 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1097
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 139 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 146
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 664 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 735 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    nothing = 21
} ;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 251
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 525
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 727
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1105
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1418
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3331
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_207 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_207 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 146 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 189 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30137 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 173 "include/linux/types.h"
typedef __u32 __le32;
#line 175 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    AFTER_LAST_ERR_CODE = 154
} ;
#line 300 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 336 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 125 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 134 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 101 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 1984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 182
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 192
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 139 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 266
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1940: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4365: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4365;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5502;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5502;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5502;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5502;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5502: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 550 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5788.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5788.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5788.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5788.rlock, flags);
#line 340
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 120 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 171 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 173
  return (1);
}
}
#line 398 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 402
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 64
extern void vfree(void const   * ) ;
#line 39 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13761: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13761;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 154 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 160 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 162
  if (size == 0UL) {
#line 163
    return (0);
  } else {

  }
#line 165
  if (size <= 8UL) {
#line 166
    return (3);
  } else {

  }
#line 168
  if (size > 64UL && size <= 96UL) {
#line 169
    return (1);
  } else {

  }
#line 170
  if (size > 128UL && size <= 192UL) {
#line 171
    return (2);
  } else {

  }
#line 172
  if (size <= 8UL) {
#line 172
    return (3);
  } else {

  }
#line 173
  if (size <= 16UL) {
#line 173
    return (4);
  } else {

  }
#line 174
  if (size <= 32UL) {
#line 174
    return (5);
  } else {

  }
#line 175
  if (size <= 64UL) {
#line 175
    return (6);
  } else {

  }
#line 176
  if (size <= 128UL) {
#line 176
    return (7);
  } else {

  }
#line 177
  if (size <= 256UL) {
#line 177
    return (8);
  } else {

  }
#line 178
  if (size <= 512UL) {
#line 178
    return (9);
  } else {

  }
#line 179
  if (size <= 1024UL) {
#line 179
    return (10);
  } else {

  }
#line 180
  if (size <= 2048UL) {
#line 180
    return (11);
  } else {

  }
#line 181
  if (size <= 4096UL) {
#line 181
    return (12);
  } else {

  }
#line 186
  if (size <= 8192UL) {
#line 186
    return (13);
  } else {

  }
#line 187
  if (size <= 16384UL) {
#line 187
    return (14);
  } else {

  }
#line 188
  if (size <= 32768UL) {
#line 188
    return (15);
  } else {

  }
#line 189
  if (size <= 65536UL) {
#line 189
    return (16);
  } else {

  }
#line 190
  if (size <= 131072UL) {
#line 190
    return (17);
  } else {

  }
#line 191
  if (size <= 262144UL) {
#line 191
    return (18);
  } else {

  }
#line 192
  if (size <= 524288UL) {
#line 192
    return (19);
  } else {

  }
#line 193
  if (size <= 1048576UL) {
#line 193
    return (20);
  } else {

  }
#line 194
  if (size <= 2097152UL) {
#line 194
    return (21);
  } else {

  }
#line 195
  return (-1);
}
}
#line 212 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 214
  tmp = kmalloc_index(size);
#line 214
  index = tmp;
#line 216
  if (index == 0) {
#line 217
    return (0);
  } else {

  }
#line 219
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 601 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 603
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2196 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 355 "include/linux/sched.h"
extern void schedule(void) ;
#line 2348
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable();
#line 79
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 755 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 757
  return ((bdev->bd_disk)->queue);
}
}
#line 930
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1124
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1346
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1347
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1348
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1349
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1350
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1351
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1353
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1356
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1358
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1359
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1360
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1361
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1362
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1363
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1365
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1366
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1367
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1368
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1370
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1371
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1372
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1375
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1378
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1381
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1382
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1384
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1399
rwlock_t global_state_lock ;
#line 1416
char *ppsize(char *buf , unsigned long long size ) ;
#line 1435
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1678 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1684
  _raw_read_lock(& global_state_lock);
#line 1685
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1686
  _raw_read_unlock(& global_state_lock);
#line 1688
  return (rv);
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43342;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35070.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35070.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43342;
  }
  ldv_43342: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1775 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1777
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1780
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1783
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2045 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2048
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 2048
  if (tmp != 0) {
#line 2049
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2050
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 2050
  if (tmp___0 < 0) {
#line 2050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2050);
  } else {

  }
#line 2051
  return;
}
}
#line 2054 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2058
  atomic_inc(& mdev->local_cnt);
#line 2059
  io_allowed = (unsigned int )mdev->state.ldv_35070.disk >= (unsigned int )mins;
#line 2060
  if (io_allowed == 0) {
#line 2061
    put_ldev(mdev);
  } else {

  }
#line 2062
  return (io_allowed);
}
}
#line 2303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2305
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2306
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2307
  return;
}
}
#line 2317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2321
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2321
  if (tmp != 0) {
#line 2322
    return;
  } else {

  }
#line 2324
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2326
  if (r != 0) {
#line 2327
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2330
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 99
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 99
  return (tmp);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 105
  b = mdev->bitmap;
#line 106
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 106
  if (tmp == 0) {
#line 107
    return;
  } else {

  }
#line 108
  tmp___9 = get_current();
#line 108
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 108
    tmp___7 = get_current();
#line 108
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 108
      tmp___5 = get_current();
#line 108
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 108
        tmp___3 = get_current();
#line 108
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 108
        tmp___4 = (char *)"worker";
      }
#line 108
      tmp___6 = tmp___4;
    } else {
#line 108
      tmp___6 = (char *)"asender";
    }
#line 108
    tmp___8 = tmp___6;
  } else {
#line 108
    tmp___8 = (char *)"receiver";
  }
#line 108
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 114
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 120
  b = mdev->bitmap;
#line 123
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 125
    return;
  } else {

  }
#line 128
  tmp = mutex_trylock(& b->bm_change);
#line 128
  trylock_failed = tmp == 0;
#line 130
  if (trylock_failed != 0) {
#line 131
    tmp___9 = get_current();
#line 131
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 131
      tmp___7 = get_current();
#line 131
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 131
        tmp___5 = get_current();
#line 131
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 131
          tmp___3 = get_current();
#line 131
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 131
          tmp___4 = (char *)"worker";
        }
#line 131
        tmp___6 = tmp___4;
      } else {
#line 131
        tmp___6 = (char *)"asender";
      }
#line 131
      tmp___8 = tmp___6;
    } else {
#line 131
      tmp___8 = (char *)"receiver";
    }
#line 131
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 139
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 141
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 141
  if (tmp___10 != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 144
  b->bm_why = why;
#line 145
  b->bm_task = get_current();
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 150
  b = mdev->bitmap;
#line 151
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 152
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 153
    return;
  } else {

  }
#line 156
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 156
  if (tmp == 0) {
#line 157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 159
  b->bm_why = 0;
#line 160
  b->bm_task = 0;
#line 161
  mutex_unlock(& b->bm_change);
#line 162
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 171
  page_nr = offset >> 9;
#line 172
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 172
  if (tmp != 0L) {
#line 172
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (172), "i" (12UL));
    ldv_43619: ;
#line 172
    goto ldv_43619;
  } else {

  }
#line 173
  page = *(b->bm_pages + page_nr);
#line 175
  tmp___0 = kmap_atomic(page, km);
#line 175
  return ((unsigned long *)tmp___0);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 180
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 180
  return (tmp);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 185
  kunmap_atomic_notypecheck((void *)p_addr, km);
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 190
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 215
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 216
    return;
  } else {

  }
#line 218
  i = 0UL;
#line 218
  goto ldv_43638;
  ldv_43637: ;
#line 219
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 220
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 223
    goto ldv_43636;
  } else {

  }
#line 225
  __free_pages(*(pages + i), 0U);
#line 226
  *(pages + i) = 0;
  ldv_43636: 
#line 218
  i = i + 1UL;
  ldv_43638: ;
#line 218
  if (i < number) {
#line 219
    goto ldv_43637;
  } else {

  }

#line 223
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 232
  if (v != 0) {
#line 233
    vfree((void const   *)ptr);
  } else {
#line 235
    kfree((void const   *)ptr);
  }
#line 236
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 243
  old_pages = b->bm_pages;
#line 245
  vmalloced = 0U;
#line 246
  have = b->bm_number_of_pages;
#line 248
  tmp = __builtin_expect(have == 0UL, 0L);
#line 248
  if (tmp != 0L) {
#line 248
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 248
    if (tmp___0 != 0L) {
#line 248
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (248), "i" (12UL));
      ldv_43655: ;
#line 248
      goto ldv_43655;
    } else {

    }
  } else {

  }
#line 249
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 249
  if (tmp___1 != 0L) {
#line 249
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 249
    if (tmp___2 != 0L) {
#line 249
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (249), "i" (12UL));
      ldv_43656: ;
#line 249
      goto ldv_43656;
    } else {

    }
  } else {

  }
#line 251
  if (have == want) {
#line 252
    return (old_pages);
  } else {

  }
#line 259
  bytes = (unsigned int )want * 8U;
#line 260
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 260
  new_pages = (struct page **)tmp___3;
#line 261
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 262
    tmp___4 = vmalloc((unsigned long )bytes);
#line 262
    new_pages = (struct page **)tmp___4;
#line 263
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 264
      return (0);
    } else {

    }
#line 265
    vmalloced = 1U;
  } else {

  }
#line 268
  memset((void *)new_pages, 0, (size_t )bytes);
#line 269
  if (want >= have) {
#line 270
    i = 0U;
#line 270
    goto ldv_43658;
    ldv_43657: 
#line 271
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 270
    i = i + 1U;
    ldv_43658: ;
#line 270
    if ((unsigned long )i < have) {
#line 271
      goto ldv_43657;
    } else {

    }

#line 272
    goto ldv_43661;
    ldv_43660: 
#line 273
    page = alloc_pages(131282U, 0U);
#line 274
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 275
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 276
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 277
      return (0);
    } else {

    }
#line 279
    *(new_pages + (unsigned long )i) = page;
#line 272
    i = i + 1U;
    ldv_43661: ;
#line 272
    if ((unsigned long )i < want) {
#line 273
      goto ldv_43660;
    } else {

    }

  } else {
#line 282
    i = 0U;
#line 282
    goto ldv_43664;
    ldv_43663: 
#line 283
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 282
    i = i + 1U;
    ldv_43664: ;
#line 282
    if ((unsigned long )i < want) {
#line 283
      goto ldv_43663;
    } else {

    }

  }
#line 289
  if (vmalloced != 0U) {
#line 290
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 292
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 294
  return (new_pages);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 303
  b = mdev->bitmap;
#line 304
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 304
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 304
  if (tmp != 0L) {
#line 304
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       304);
  } else {

  }
#line 304
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 305
  tmp___0 = kzalloc(376UL, 208U);
#line 305
  b = (struct drbd_bitmap *)tmp___0;
#line 306
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 307
    return (-12);
  } else {

  }
#line 308
  spinlock_check(& b->bm_lock);
#line 308
  __raw_spin_lock_init(& b->bm_lock.ldv_5788.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 309
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 310
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 312
  mdev->bitmap = b;
#line 314
  return (0);
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 319
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 319
  if (_b != 0) {
#line 319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            319);
  } else {

  }
#line 319
  if (_b != 0) {
#line 319
    return (0UL);
  } else {

  }
#line 320
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 327
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 327
  if (_b != 0) {
#line 327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            327);
  } else {

  }
#line 327
  if (_b != 0) {
#line 327
    return;
  } else {

  }
#line 328
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 329
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 329
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 330
  kfree((void const   *)mdev->bitmap);
#line 331
  mdev->bitmap = 0;
#line 332
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 341
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 342
  w = b->bm_bits >> 6;
#line 343
  cleared = 0;
#line 346
  p_addr = bm_map_paddr(b, w);
#line 347
  bm = p_addr + (w & 511UL);
#line 348
  if (b->bm_words > w) {
#line 349
    tmp = hweight_long(*bm & ~ mask);
#line 349
    cleared = (int )tmp;
#line 350
    *bm = *bm & mask;
#line 351
    w = w + (size_t )1;
#line 351
    bm = bm + 1;
  } else {

  }
#line 354
  if (b->bm_words > w) {
#line 355
    tmp___0 = hweight_long(*bm);
#line 355
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 356
    *bm = 0UL;
  } else {

  }
#line 358
  bm_unmap(p_addr);
#line 359
  return (cleared);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 364
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 365
  w = b->bm_bits >> 6;
#line 368
  p_addr = bm_map_paddr(b, w);
#line 369
  bm = p_addr + (w & 511UL);
#line 370
  if (b->bm_words > w) {
#line 371
    *bm = *bm | ~ mask;
#line 372
    bm = bm + 1;
#line 372
    w = w + (size_t )1;
  } else {

  }
#line 375
  if (b->bm_words > w) {
#line 376
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 378
  bm_unmap(p_addr);
#line 379
  return;
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 383
  offset = 0UL;
#line 384
  bits = 0UL;
#line 387
  goto ldv_43720;
  ldv_43719: 
#line 388
  __min1 = b->bm_words - offset;
#line 388
  __min2 = 512UL;
#line 388
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 388
  i = do_now;
#line 389
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 390
  bm = p_addr + (offset & 511UL);
#line 391
  goto ldv_43716;
  ldv_43715: 
#line 396
  tmp = bm;
#line 396
  bm = bm + 1;
#line 396
  tmp___0 = hweight_long(*tmp);
#line 396
  bits = tmp___0 + bits;
  ldv_43716: 
#line 391
  tmp___1 = i;
#line 391
  i = i - 1UL;
#line 391
  if (tmp___1 != 0UL) {
#line 392
    goto ldv_43715;
  } else {

  }
#line 398
  __bm_unmap(p_addr, KM_USER0);
#line 399
  offset = offset + do_now;
#line 400
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                400, 0);
#line 400
  _cond_resched();
  ldv_43720: ;
#line 387
  if (b->bm_words > offset) {
#line 388
    goto ldv_43719;
  } else {

  }

#line 403
  return (bits);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 408
  tmp = __bm_count_bits(b, 0);
#line 408
  return (tmp);
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 413
  tmp = __bm_count_bits(b, 1);
#line 413
  return (tmp);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 424
  end = offset + len;
#line 426
  if (b->bm_words < end) {
#line 427
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 428
    return;
  } else {

  }
#line 431
  goto ldv_43743;
  ldv_43742: 
#line 432
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 432
  __min2 = end;
#line 432
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 433
  p_addr = bm_map_paddr(b, offset);
#line 434
  bm = p_addr + (offset & 511UL);
#line 435
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 436
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 438
    goto ldv_43741;
  } else {

  }
#line 440
  memset((void *)bm, c, do_now * 8UL);
#line 441
  bm_unmap(p_addr);
#line 442
  offset = offset + do_now;
  ldv_43743: ;
#line 431
  if (offset < end) {
#line 432
    goto ldv_43742;
  } else {

  }
  ldv_43741: ;
#line 436
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 456
  b = mdev->bitmap;
#line 459
  opages = 0;
#line 460
  err = 0;
#line 463
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 463
  if (_b != 0) {
#line 463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            463);
  } else {

  }
#line 463
  if (_b != 0) {
#line 463
    return (-12);
  } else {

  }
#line 465
  drbd_bm_lock(mdev, (char *)"resize");
#line 467
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 470
  if (b->bm_dev_capacity == capacity) {
#line 471
    goto out;
  } else {

  }
#line 473
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 475
  if (capacity == 0UL) {
#line 476
    spin_lock_irq(& b->bm_lock);
#line 477
    opages = b->bm_pages;
#line 478
    onpages = b->bm_number_of_pages;
#line 479
    owords = b->bm_words;
#line 480
    b->bm_pages = 0;
#line 481
    tmp___2 = 0UL;
#line 481
    b->bm_dev_capacity = tmp___2;
#line 481
    tmp___1 = tmp___2;
#line 481
    b->bm_words = tmp___1;
#line 481
    tmp___0 = tmp___1;
#line 481
    b->bm_bits = tmp___0;
#line 481
    tmp = tmp___0;
#line 481
    b->bm_set = tmp;
#line 481
    b->bm_number_of_pages = tmp;
#line 486
    spin_unlock_irq(& b->bm_lock);
#line 487
    bm_free_pages(opages, onpages);
#line 488
    bm_vk_free((void *)opages, opages_vmalloced);
#line 489
    goto out;
  } else {

  }
#line 491
  bits = (capacity + 7UL) >> 3;
#line 498
  words = (bits + 63UL) >> 6;
#line 500
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 500
  if (tmp___3 != 0) {
#line 501
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 501
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              501);
    } else {

    }
#line 502
    put_ldev(mdev);
  } else {

  }
#line 506
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 507
  have = b->bm_number_of_pages;
#line 508
  if (want == have) {
#line 509
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 509
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              509);
    } else {

    }
#line 510
    npages = b->bm_pages;
  } else {
#line 512
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 512
    if (tmp___4 != 0) {
#line 513
      npages = 0;
    } else {
#line 515
      npages = bm_realloc_pages(b, want);
    }
  }
#line 518
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 519
    err = -12;
#line 520
    goto out;
  } else {

  }
#line 523
  spin_lock_irq(& b->bm_lock);
#line 524
  opages = b->bm_pages;
#line 525
  owords = b->bm_words;
#line 526
  obits = b->bm_bits;
#line 528
  growing = bits > obits;
#line 529
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 530
    bm_set_surplus(b);
  } else {

  }
#line 532
  b->bm_pages = npages;
#line 533
  b->bm_number_of_pages = want;
#line 534
  b->bm_bits = bits;
#line 535
  b->bm_words = words;
#line 536
  b->bm_dev_capacity = capacity;
#line 538
  if (growing != 0) {
#line 539
    if (set_new_bits != 0) {
#line 540
      bm_memset(b, owords, 255, words - owords);
#line 541
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 543
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 547
  if (want < have) {
#line 549
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 552
  p_addr = bm_map_paddr(b, words);
#line 553
  bm = p_addr + (words & 511UL);
#line 554
  *bm = 2205418087UL;
#line 555
  bm_unmap(p_addr);
#line 557
  bm_clear_surplus(b);
#line 559
  spin_unlock_irq(& b->bm_lock);
#line 560
  if ((unsigned long )opages != (unsigned long )npages) {
#line 561
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 562
  if (growing == 0) {
#line 563
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 564
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 567
  drbd_bm_unlock(mdev);
#line 568
  return (err);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 581
  b = mdev->bitmap;
#line 585
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 585
  if (_b != 0) {
#line 585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            585);
  } else {

  }
#line 585
  if (_b != 0) {
#line 585
    return (0UL);
  } else {

  }
#line 586
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 586
  if (_b___0 != 0) {
#line 586
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            586);
  } else {

  }
#line 586
  if (_b___0 != 0) {
#line 586
    return (0UL);
  } else {

  }
#line 588
  tmp = spinlock_check(& b->bm_lock);
#line 588
  flags = _raw_spin_lock_irqsave(tmp);
#line 589
  s = b->bm_set;
#line 590
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 592
  return (s);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 599
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 599
  if (tmp == 0) {
#line 600
    return (0UL);
  } else {

  }
#line 601
  s = _drbd_bm_total_weight(mdev);
#line 602
  put_ldev(mdev);
#line 603
  return (s);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 608
  b = mdev->bitmap;
#line 609
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 609
  if (_b != 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            609);
  } else {

  }
#line 609
  if (_b != 0) {
#line 609
    return (0UL);
  } else {

  }
#line 610
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 610
  if (_b___0 != 0) {
#line 610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            610);
  } else {

  }
#line 610
  if (_b___0 != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 612
  return (b->bm_words);
}
}
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 617
  b = mdev->bitmap;
#line 618
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 618
  if (_b != 0) {
#line 618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            618);
  } else {

  }
#line 618
  if (_b != 0) {
#line 618
    return (0UL);
  } else {

  }
#line 620
  return (b->bm_bits);
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 631
  b = mdev->bitmap;
#line 636
  end = offset + number;
#line 638
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 638
  if (_b != 0) {
#line 638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            638);
  } else {

  }
#line 638
  if (_b != 0) {
#line 638
    return;
  } else {

  }
#line 639
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 639
  if (_b___0 != 0) {
#line 639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            639);
  } else {

  }
#line 639
  if (_b___0 != 0) {
#line 639
    return;
  } else {

  }
#line 640
  if (number == 0UL) {
#line 641
    return;
  } else {

  }
#line 642
  __ret_warn_on = b->bm_words <= offset;
#line 642
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 642
  if (tmp != 0L) {
#line 642
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       642);
  } else {

  }
#line 642
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 643
  __ret_warn_on___0 = b->bm_words < end;
#line 643
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 643
  if (tmp___0 != 0L) {
#line 643
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       643);
  } else {

  }
#line 643
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 645
  spin_lock_irq(& b->bm_lock);
#line 646
  goto ldv_43831;
  ldv_43830: 
#line 647
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 647
  __min2 = end;
#line 647
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 648
  p_addr = bm_map_paddr(b, offset);
#line 649
  bm = p_addr + (offset & 511UL);
#line 650
  offset = offset + do_now;
#line 651
  goto ldv_43828;
  ldv_43827: 
#line 652
  bits = hweight_long(*bm);
#line 653
  tmp___1 = buffer;
#line 653
  buffer = buffer + 1;
#line 653
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 654
  tmp___2 = bm;
#line 654
  bm = bm + 1;
#line 654
  *tmp___2 = word;
#line 655
  tmp___3 = hweight_long(word);
#line 655
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_43828: 
#line 651
  tmp___4 = do_now;
#line 651
  do_now = do_now - (size_t )1;
#line 651
  if (tmp___4 != 0UL) {
#line 652
    goto ldv_43827;
  } else {

  }
#line 657
  bm_unmap(p_addr);
  ldv_43831: ;
#line 646
  if (offset < end) {
#line 647
    goto ldv_43830;
  } else {

  }

#line 664
  if (b->bm_words == end) {
#line 665
    tmp___5 = bm_clear_surplus(b);
#line 665
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 667
  spin_unlock_irq(& b->bm_lock);
#line 668
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 676
  b = mdev->bitmap;
#line 680
  end = offset + number;
#line 682
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 682
  if (_b != 0) {
#line 682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            682);
  } else {

  }
#line 682
  if (_b != 0) {
#line 682
    return;
  } else {

  }
#line 683
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 683
  if (_b___0 != 0) {
#line 683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            683);
  } else {

  }
#line 683
  if (_b___0 != 0) {
#line 683
    return;
  } else {

  }
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 694
    goto ldv_43856;
    ldv_43855: 
#line 695
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
    __min2 = end;
#line 695
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
    p_addr = bm_map_paddr(b, offset);
#line 697
    bm = p_addr + (offset & 511UL);
#line 698
    offset = offset + do_now;
#line 699
    goto ldv_43853;
    ldv_43852: 
#line 700
    tmp = buffer;
#line 700
    buffer = buffer + 1;
#line 700
    tmp___0 = bm;
#line 700
    bm = bm + 1;
#line 700
    *tmp = *tmp___0;
    ldv_43853: 
#line 699
    tmp___1 = do_now;
#line 699
    do_now = do_now - (size_t )1;
#line 699
    if (tmp___1 != 0UL) {
#line 700
      goto ldv_43852;
    } else {

    }
#line 701
    bm_unmap(p_addr);
    ldv_43856: ;
#line 694
    if (offset < end) {
#line 695
      goto ldv_43855;
    } else {

    }

  }
#line 704
  spin_unlock_irq(& b->bm_lock);
#line 705
  return;
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 710
  b = mdev->bitmap;
#line 711
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 711
  if (_b != 0) {
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            711);
  } else {

  }
#line 711
  if (_b != 0) {
#line 711
    return;
  } else {

  }
#line 712
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 712
  if (_b___0 != 0) {
#line 712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            712);
  } else {

  }
#line 712
  if (_b___0 != 0) {
#line 712
    return;
  } else {

  }
#line 714
  spin_lock_irq(& b->bm_lock);
#line 715
  bm_memset(b, 0UL, 255, b->bm_words);
#line 716
  bm_clear_surplus(b);
#line 717
  b->bm_set = b->bm_bits;
#line 718
  spin_unlock_irq(& b->bm_lock);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 724
  b = mdev->bitmap;
#line 725
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 725
  if (_b != 0) {
#line 725
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            725);
  } else {

  }
#line 725
  if (_b != 0) {
#line 725
    return;
  } else {

  }
#line 726
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 726
  if (_b___0 != 0) {
#line 726
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            726);
  } else {

  }
#line 726
  if (_b___0 != 0) {
#line 726
    return;
  } else {

  }
#line 728
  spin_lock_irq(& b->bm_lock);
#line 729
  bm_memset(b, 0UL, 0, b->bm_words);
#line 730
  b->bm_set = 0UL;
#line 731
  spin_unlock_irq(& b->bm_lock);
#line 732
  return;
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 736
  b = (struct drbd_bitmap *)bio->bi_private;
#line 737
  uptodate = (int )bio->bi_flags & 1;
#line 744
  if (error == 0 && uptodate == 0) {
#line 745
    error = -5;
  } else {

  }
#line 747
  if (error != 0) {
#line 750
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 752
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 752
  if (tmp != 0) {
#line 753
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 755
  bio_put(bio);
#line 756
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 761
  tmp = bio_alloc(208U, 1);
#line 761
  bio = tmp;
#line 763
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 765
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 769
  __min1 = 4096U;
#line 769
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 769
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 769
  len = __min1 < __min2 ? __min1 : __min2;
#line 772
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 773
  bio->bi_sector = on_disk_sector;
#line 774
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 775
  bio->bi_private = (void *)b;
#line 776
  bio->bi_end_io = & bm_async_io_complete;
#line 778
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 778
  if (tmp___1 != 0) {
#line 779
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 780
    bio_endio(bio, -5);
  } else {
#line 782
    submit_bio(rw, bio);
  }
#line 783
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 824
  b = mdev->bitmap;
#line 829
  err = 0;
#line 831
  tmp = bm_is_locked(b);
#line 831
  __ret_warn_on = tmp == 0;
#line 831
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 831
  if (tmp___0 != 0L) {
#line 831
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       831);
  } else {

  }
#line 831
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 835
  tmp___1 = drbd_bm_words(mdev);
#line 835
  bm_words = (int )tmp___1;
#line 836
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 842
  now = jiffies;
#line 843
  atomic_set(& b->bm_async_io, num_pages);
#line 844
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 847
  i = 0;
#line 847
  goto ldv_43908;
  ldv_43907: 
#line 848
  bm_page_io_async(mdev, b, i, rw);
#line 847
  i = i + 1;
  ldv_43908: ;
#line 847
  if (i < num_pages) {
#line 848
    goto ldv_43907;
  } else {

  }
#line 850
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 850
  drbd_blk_run_queue(tmp___2);
#line 851
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___3 == 0) {
#line 851
    goto ldv_43910;
  } else {

  }
#line 851
  tmp___4 = get_current();
#line 851
  __wait.flags = 0U;
#line 851
  __wait.private = (void *)tmp___4;
#line 851
  __wait.func = & autoremove_wake_function;
#line 851
  __wait.task_list.next = & __wait.task_list;
#line 851
  __wait.task_list.prev = & __wait.task_list;
  ldv_43913: 
#line 851
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 851
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___5 == 0) {
#line 851
    goto ldv_43912;
  } else {

  }
#line 851
  schedule();
#line 851
  goto ldv_43913;
  ldv_43912: 
#line 851
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_43910: 
#line 853
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 853
  if (tmp___6 != 0) {
#line 854
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 855
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 856
    err = -5;
  } else {

  }
#line 859
  now = jiffies;
#line 860
  if (rw == 1) {
#line 864
    drbd_md_flush(mdev);
  } else {
#line 867
    b->bm_set = bm_count_bits_swap_endian(b);
#line 868
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 871
  now = b->bm_set;
#line 873
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 873
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 876
  return (err);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 885
  tmp = bm_rw(mdev, 0);
#line 885
  return (tmp);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 894
  tmp = bm_rw(mdev, 1);
#line 894
  return (tmp);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 908
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 911
  err = 0;
#line 913
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 914
  tmp = drbd_bm_words(mdev);
#line 914
  bm_words = (int )tmp;
#line 915
  offset = (int )(enr << 6);
#line 916
  _min1 = 64;
#line 916
  _min2 = bm_words - offset;
#line 916
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 917
  if (num_words <= 63) {
#line 918
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 918
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 919
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 919
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 921
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 921
  if (tmp___2 == 0) {
#line 923
    err = -5;
#line 924
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 927
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 928
    i = 0;
#line 928
    goto ldv_43936;
    ldv_43935: 
#line 929
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 928
    i = i + 1;
    ldv_43936: ;
#line 928
    if (i <= 3) {
#line 929
      goto ldv_43935;
    } else {

    }

  } else {

  }
#line 931
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 932
  mutex_unlock(& mdev->md_io_mutex);
#line 933
  return (err);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 946
  b = mdev->bitmap;
#line 947
  i = 0xffffffffffffffffUL;
#line 951
  if (b->bm_bits < bm_fo) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 954
    goto ldv_43952;
    ldv_43951: 
#line 956
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 957
    offset = bit_offset >> 6;
#line 958
    p_addr = __bm_map_paddr(b, offset, km);
#line 960
    if ((int )find_zero_bit != 0) {
#line 961
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 963
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 965
    __bm_unmap(p_addr, km);
#line 966
    if (i <= 32767UL) {
#line 967
      i = bit_offset + i;
#line 968
      if (b->bm_bits <= i) {
#line 969
        goto ldv_43949;
      } else {

      }
#line 970
      goto found;
    } else {

    }
#line 972
    bm_fo = bit_offset + 32768UL;
    ldv_43952: ;
#line 954
    if (b->bm_bits > bm_fo) {
#line 955
      goto ldv_43951;
    } else {

    }
    ldv_43949: 
#line 974
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 977
  return (i);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 983
  b = mdev->bitmap;
#line 984
  i = 0xffffffffffffffffUL;
#line 986
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 986
  if (_b != 0) {
#line 986
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            986);
  } else {

  }
#line 986
  if (_b != 0) {
#line 986
    return (i);
  } else {

  }
#line 987
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 987
  if (_b___0 != 0) {
#line 987
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            987);
  } else {

  }
#line 987
  if (_b___0 != 0) {
#line 987
    return (i);
  } else {

  }
#line 989
  spin_lock_irq(& b->bm_lock);
#line 990
  tmp = bm_is_locked(b);
#line 990
  if (tmp != 0) {
#line 991
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 993
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 995
  spin_unlock_irq(& b->bm_lock);
#line 996
  return (i);
}
}
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1001
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1001
  return (tmp);
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1017
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1017
  return (tmp);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1023
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1023
  return (tmp);
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1035
  b = mdev->bitmap;
#line 1036
  p_addr = 0;
#line 1038
  last_page_nr = 0xffffffffffffffffUL;
#line 1039
  c = 0;
#line 1041
  if (b->bm_bits <= e) {
#line 1042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1044
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1046
  bitnr = s;
#line 1046
  goto ldv_43992;
  ldv_43991: 
#line 1047
  offset = bitnr >> 6;
#line 1048
  page_nr = offset >> 9;
#line 1049
  if (page_nr != last_page_nr) {
#line 1050
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1051
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1052
    p_addr = __bm_map_paddr(b, offset, km);
#line 1053
    last_page_nr = page_nr;
  } else {

  }
#line 1055
  if (val != 0) {
#line 1056
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1056
    c = (tmp == 0) + c;
  } else {
#line 1058
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1058
    c = c - (tmp___0 != 0);
  }
#line 1046
  bitnr = bitnr + 1UL;
  ldv_43992: ;
#line 1046
  if (bitnr <= e) {
#line 1047
    goto ldv_43991;
  } else {

  }

#line 1060
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1061
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1062
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1063
  return (c);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1074
  b = mdev->bitmap;
#line 1075
  c = 0;
#line 1077
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1077
  if (_b != 0) {
#line 1077
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1077);
  } else {

  }
#line 1077
  if (_b != 0) {
#line 1077
    return (1);
  } else {

  }
#line 1078
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1078
  if (_b___0 != 0) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1078);
  } else {

  }
#line 1078
  if (_b___0 != 0) {
#line 1078
    return (0);
  } else {

  }
#line 1080
  tmp = spinlock_check(& b->bm_lock);
#line 1080
  flags = _raw_spin_lock_irqsave(tmp);
#line 1081
  tmp___0 = bm_is_locked(b);
#line 1081
  if (tmp___0 != 0) {
#line 1082
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1084
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1086
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1087
  return (c);
}
}
#line 1091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1093
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1093
  return (tmp);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1099
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1099
  return (- tmp);
}
}
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1109
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1109
  paddr = (unsigned long *)tmp;
#line 1110
  i = first_word;
#line 1110
  goto ldv_44031;
  ldv_44030: 
#line 1111
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1111
  bits = (int )tmp___0;
#line 1112
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1113
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1110
  i = i + 1;
  ldv_44031: ;
#line 1110
  if (i < last_word) {
#line 1111
    goto ldv_44030;
  } else {

  }
#line 1115
  kunmap_atomic_notypecheck((void *)paddr, KM_USER0);
#line 1116
  return;
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1132
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1133
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1140
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1142
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1143
    return;
  } else {

  }
#line 1149
  if (sl != 0UL) {
#line 1150
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1152
  first_page = (int )(sl >> 15);
#line 1153
  last_page = (int )(el >> 15);
#line 1157
  first_word = (int )(sl >> 6) & 511;
#line 1158
  last_word = 512;
#line 1161
  page_nr = first_page;
#line 1161
  goto ldv_44047;
  ldv_44046: 
#line 1162
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1163
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1163, 0);
#line 1163
  _cond_resched();
#line 1164
  first_word = 0;
#line 1161
  page_nr = page_nr + 1;
  ldv_44047: ;
#line 1161
  if (page_nr < last_page) {
#line 1162
    goto ldv_44046;
  } else {

  }
#line 1168
  last_word = (int )(el >> 6) & 511;
#line 1169
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1176
  if (el <= (unsigned long )e) {
#line 1177
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1178
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1190
  b = mdev->bitmap;
#line 1194
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1194
  if (_b != 0) {
#line 1194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1194);
  } else {

  }
#line 1194
  if (_b != 0) {
#line 1194
    return (0);
  } else {

  }
#line 1195
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1195
  if (_b___0 != 0) {
#line 1195
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1195);
  } else {

  }
#line 1195
  if (_b___0 != 0) {
#line 1195
    return (0);
  } else {

  }
#line 1197
  tmp = spinlock_check(& b->bm_lock);
#line 1197
  flags = _raw_spin_lock_irqsave(tmp);
#line 1198
  tmp___0 = bm_is_locked(b);
#line 1198
  if (tmp___0 != 0) {
#line 1199
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1200
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1201
    offset = bitnr >> 6;
#line 1202
    p_addr = bm_map_paddr(b, offset);
#line 1203
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1203
    i = tmp___1 != 0;
#line 1204
    bm_unmap(p_addr);
  } else
#line 1205
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1206
    i = -1;
  } else {
#line 1208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1209
    i = 0;
  }
#line 1212
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1213
  return (i);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1220
  b = mdev->bitmap;
#line 1221
  p_addr = 0;
#line 1221
  page_nr = 0xffffffffffffffffUL;
#line 1223
  c = 0;
#line 1230
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1230
  if (_b != 0) {
#line 1230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1230);
  } else {

  }
#line 1230
  if (_b != 0) {
#line 1230
    return (1);
  } else {

  }
#line 1231
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1231
  if (_b___0 != 0) {
#line 1231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1231);
  } else {

  }
#line 1231
  if (_b___0 != 0) {
#line 1231
    return (1);
  } else {

  }
#line 1233
  tmp = spinlock_check(& b->bm_lock);
#line 1233
  flags = _raw_spin_lock_irqsave(tmp);
#line 1234
  tmp___0 = bm_is_locked(b);
#line 1234
  if (tmp___0 != 0) {
#line 1235
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1236
  bitnr = s;
#line 1236
  goto ldv_44089;
  ldv_44088: 
#line 1237
  w = bitnr >> 6;
#line 1238
  if (w >> 9 != page_nr) {
#line 1239
    page_nr = w >> 9;
#line 1240
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1241
      bm_unmap(p_addr);
    } else {

    }
#line 1242
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1244
  _b___1 = b->bm_bits <= bitnr;
#line 1244
  if (_b___1 != 0) {
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1244);
  } else {

  }
#line 1244
  if (_b___1 != 0) {
#line 1245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1247
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1247
    c = (tmp___1 != 0) + c;
  }
#line 1236
  bitnr = bitnr + 1UL;
  ldv_44089: ;
#line 1236
  if (bitnr <= (unsigned long )e) {
#line 1237
    goto ldv_44088;
  } else {

  }

#line 1250
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1251
    bm_unmap(p_addr);
  } else {

  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (c);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1273
  b = mdev->bitmap;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (0);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (0);
  } else {

  }
#line 1281
  tmp = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  tmp___0 = bm_is_locked(b);
#line 1282
  if (tmp___0 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1285
  s = (int )(enr << 6);
#line 1286
  _min1 = (enr + 1UL) << 6;
#line 1286
  _min2 = b->bm_words;
#line 1286
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1287
  count = 0;
#line 1288
  if ((size_t )s < b->bm_words) {
#line 1289
    n = e - s;
#line 1290
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1291
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1292
    goto ldv_44115;
    ldv_44114: 
#line 1293
    tmp___1 = bm;
#line 1293
    bm = bm + 1;
#line 1293
    tmp___2 = hweight_long(*tmp___1);
#line 1293
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_44115: 
#line 1292
    tmp___3 = n;
#line 1292
    n = n - 1;
#line 1292
    if (tmp___3 != 0) {
#line 1293
      goto ldv_44114;
    } else {

    }
#line 1294
    bm_unmap(p_addr);
  } else {
#line 1296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1298
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1299
  return (count);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1305
  b = mdev->bitmap;
#line 1309
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1309
  if (_b != 0) {
#line 1309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1309);
  } else {

  }
#line 1309
  if (_b != 0) {
#line 1309
    return (0UL);
  } else {

  }
#line 1310
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1310
  if (_b___0 != 0) {
#line 1310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1310);
  } else {

  }
#line 1310
  if (_b___0 != 0) {
#line 1310
    return (0UL);
  } else {

  }
#line 1312
  spin_lock_irq(& b->bm_lock);
#line 1313
  tmp = bm_is_locked(b);
#line 1313
  if (tmp != 0) {
#line 1314
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1315
  weight = b->bm_set;
#line 1317
  s = (int )((unsigned int )al_enr * 16U);
#line 1318
  __min1 = (size_t )(s + 16);
#line 1318
  __min2 = b->bm_words;
#line 1318
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1320
  if ((e + -1) >> 9 != s >> 9) {
#line 1320
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1321);
  } else {

  }
#line 1322
  count = 0;
#line 1323
  if ((size_t )s < b->bm_words) {
#line 1324
    do_now = e - s;
#line 1324
    i = do_now;
#line 1325
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1326
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1327
    goto ldv_44139;
    ldv_44138: 
#line 1328
    tmp___0 = hweight_long(*bm);
#line 1328
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1329
    *bm = 0xffffffffffffffffUL;
#line 1330
    bm = bm + 1;
    ldv_44139: 
#line 1327
    tmp___1 = i;
#line 1327
    i = i - 1;
#line 1327
    if (tmp___1 != 0) {
#line 1328
      goto ldv_44138;
    } else {

    }
#line 1332
    bm_unmap(p_addr);
#line 1333
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1334
    if ((size_t )e == b->bm_words) {
#line 1335
      tmp___2 = bm_clear_surplus(b);
#line 1335
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1339
  weight = b->bm_set - weight;
#line 1340
  spin_unlock_irq(& b->bm_lock);
#line 1341
  return (weight);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 280
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 281
char const   *drbd_role_str(enum drbd_role s ) ;
#line 282
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1059 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1063
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1065
  return (mdev);
}
}
#line 1404
int proc_details ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1537
struct file_operations  const  drbd_proc_fops ;
#line 2069 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2082
  tmp = drbd_bm_total_weight(mdev);
#line 2082
  *bits_left = tmp - mdev->rs_failed;
#line 2085
  if (*bits_left > mdev->rs_total) {
#line 2091
    __asm__  volatile   ("": : : "memory");
#line 2092
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 2092
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2095
    *per_mil_done = 0U;
  } else {
#line 2098
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2101
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2103
  return;
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 48
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 69
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 71
  x = (int )(res / 50U);
#line 72
  y = 20 - x;
#line 73
  seq_printf(seq, "\t[");
#line 74
  i = 1;
#line 74
  goto ldv_43625;
  ldv_43624: 
#line 75
  seq_printf(seq, "=");
#line 74
  i = i + 1;
  ldv_43625: ;
#line 74
  if (i < x) {
#line 75
    goto ldv_43624;
  } else {

  }
#line 76
  seq_printf(seq, ">");
#line 77
  i = 0;
#line 77
  goto ldv_43628;
  ldv_43627: 
#line 78
  seq_printf(seq, ".");
#line 77
  i = i + 1;
  ldv_43628: ;
#line 77
  if (i < y) {
#line 78
    goto ldv_43627;
  } else {

  }
#line 79
  seq_printf(seq, "] ");
#line 81
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 83
  if (mdev->rs_total > 1048576UL) {
#line 84
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 88
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 101
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 103
  if (dt > 20UL) {
#line 106
    seq_printf(seq, "stalled\n");
#line 107
    return;
  } else {

  }
#line 110
  if (dt == 0UL) {
#line 111
    dt = dt + 1UL;
  } else {

  }
#line 112
  db = mdev->rs_mark_left - rs_left;
#line 113
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 115
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 119
  dbdt = db / dt << 2;
#line 120
  if (dbdt > 1000UL) {
#line 121
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 124
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 128
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 129
  if (dt == 0UL) {
#line 130
    dt = 1UL;
  } else {

  }
#line 131
  db = mdev->rs_total - rs_left;
#line 132
  dbdt = db / dt << 2;
#line 133
  if (dbdt > 1000UL) {
#line 134
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 137
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 139
  seq_printf(seq, " K/sec\n");
#line 140
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 144
  __mptr = (struct lc_element  const  *)e;
#line 144
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 146
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 149
  return;
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 154
  hole = 0;
#line 158
  write_ordering_chars[0] = 110;
#line 158
  write_ordering_chars[1] = 100;
#line 158
  write_ordering_chars[2] = 102;
#line 158
  write_ordering_chars[3] = 98;
#line 165
  tmp = drbd_buildtag();
#line 165
  seq_printf(seq, "version: 8.3.8.1 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 94, tmp);
#line 188
  i = 0;
#line 188
  goto ldv_43648;
  ldv_43647: 
#line 189
  mdev = minor_to_mdev((unsigned int )i);
#line 190
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 191
    hole = 1;
#line 192
    goto ldv_43646;
  } else {

  }
#line 194
  if (hole != 0) {
#line 195
    hole = 0;
#line 196
    seq_printf(seq, "\n");
  } else {

  }
#line 199
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 201
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 204
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 206
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 206
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 206
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 206
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 206
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 206
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35070.pdsk);
#line 206
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35070.disk);
#line 206
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_35070.peer);
#line 206
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_35070.role);
#line 206
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 236
    tmp___9 = drbd_bm_total_weight(mdev);
#line 236
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 239
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) {
#line 241
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 243
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U) {
#line 244
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 250
  if (proc_details > 0) {
#line 250
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 250
    if (tmp___10 != 0) {
#line 251
      lc_seq_printf_stats(seq, mdev->resync);
#line 252
      lc_seq_printf_stats(seq, mdev->act_log);
#line 253
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 256
  if (proc_details > 1) {
#line 257
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 258
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_43646: 
#line 188
  i = i + 1;
  ldv_43648: ;
#line 188
  if ((unsigned int )i < minor_count) {
#line 189
    goto ldv_43647;
  } else {

  }

#line 264
  return (0);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 269
  tmp = PDE((struct inode  const  *)inode);
#line 269
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 269
  return (tmp___0);
}
}
#line 290
void ldv_check_final_state(void) ;
#line 293
extern void ldv_check_return_value(int  ) ;
#line 299
extern void ldv_initialize(void) ;
#line 302
extern void ldv_handler_precall(void) ;
#line 305
extern int nondet_int(void) ;
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 343
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 333
  LDV_IN_INTERRUPT = 1;
#line 342
  ldv_initialize();
#line 346
  goto ldv_43679;
  ldv_43678: 
#line 350
  tmp = nondet_int();
#line 350
  switch (tmp) {
  case 0: ;
#line 355
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 360
    ldv_handler_precall();
#line 361
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 362
    ldv_check_return_value(res_drbd_proc_open_3);
#line 363
    if (res_drbd_proc_open_3 != 0) {
#line 364
      goto ldv_module_exit;
    } else {

    }
#line 365
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 371
  goto ldv_43676;
  default: ;
#line 372
  goto ldv_43676;
  }
  ldv_43676: ;
  ldv_43679: 
#line 346
  tmp___0 = nondet_int();
#line 346
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 348
    goto ldv_43678;
  } else {

  }

  ldv_module_exit: ;
#line 381
  ldv_check_final_state();
#line 384
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 199 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 25 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 27
  list->next = list;
#line 28
  list->prev = list;
#line 29
  return;
}
}
#line 48
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 61 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 63
  __list_add(new, head, head->next);
#line 64
  return;
}
}
#line 75 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 77
  __list_add(new, head->prev, head);
#line 78
  return;
}
}
#line 87 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 89
  next->prev = prev;
#line 90
  prev->next = next;
#line 91
  return;
}
}
#line 107
extern void list_del(struct list_head * ) ;
#line 137 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 139
  __list_del(entry->prev, entry->next);
#line 140
  INIT_LIST_HEAD(entry);
#line 141
  return;
}
}
#line 181 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 183
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 268 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 272
  first = list->next;
#line 273
  last = list->prev;
#line 275
  first->prev = prev;
#line 276
  prev->next = first;
#line 278
  last->next = next;
#line 279
  next->prev = last;
#line 280
  return;
}
}
#line 313 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 316
  tmp = list_empty((struct list_head  const  *)list);
#line 316
  if (tmp == 0) {
#line 317
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 318
    INIT_LIST_HEAD(list);
  } else {

  }
#line 320
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 250 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13634: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13634;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___0(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 307 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 309
  tmp = PageTail(page);
#line 309
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 309
  if (tmp___0 != 0L) {
#line 310
    return (page->ldv_12297.first_page);
  } else {

  }
#line 311
  return (page);
}
}
#line 314 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = compound_head(page);
#line 316
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 316
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17725: ;
#line 63
    goto ldv_17725;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17726: ;
#line 65
    goto ldv_17726;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17727: ;
#line 66
    goto ldv_17727;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 35 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.raw_lock.slock = 0U;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.magic = 3735899821U;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.owner_cpu = 4294967295U;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.owner = 0xffffffffffffffffUL;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.dep_map.key = 0;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.dep_map.class_cache = 0;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.dep_map.name = "(*sem).lock";
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.dep_map.cpu = 0;
#line 38
  __constr_expr_0.lock.ldv_5788.rlock.dep_map.ip = 0UL;
#line 38
  __constr_expr_0.count = (unsigned int )val;
#line 38
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 38
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 38
  *sem = __constr_expr_0;
#line 39
  lockdep_init_map(& sem->lock.ldv_5788.ldv_5787.dep_map, "semaphore->lock", & __key,
                   0);
#line 40
  return;
}
}
#line 46
extern int down_interruptible(struct semaphore * ) ;
#line 48
extern int down_trylock(struct semaphore * ) ;
#line 50
extern void up(struct semaphore * ) ;
#line 351 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2001
extern void flush_signals(struct task_struct * ) ;
#line 2034
extern void force_sig(int  , struct task_struct * ) ;
#line 1069 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 982 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 984
  return (q->limits.max_segment_size);
}
}
#line 640 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 646
  __asm__  volatile   ("": : : "memory");
#line 647
  return (thi->t_state);
}
}
#line 1068 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1070
  return (mdev->minor);
}
}
#line 1081 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1083
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1086
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1086
  if (tmp != 0L) {
#line 1087
    mutex_unlock(& mdev->data.mutex);
#line 1088
    return (0);
  } else {

  }
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1095
  mutex_unlock(& mdev->data.mutex);
#line 1096
  return;
}
}
#line 1120
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1129
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1131
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1148
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1152
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1157
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1165
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1171
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1173
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1175
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1178
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1180
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1184
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1190
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1193
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1196
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1197
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1200
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1205
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1425
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1428
int drbd_worker(struct drbd_thread *thi ) ;
#line 1429
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1430
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1431
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1432
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1433
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1437
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1439 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1441
  if (mdev->ov_last_oos_size != 0UL) {
#line 1442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1446
  mdev->ov_last_oos_size = 0UL;
#line 1447
  return;
}
}
#line 1450
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1451
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1454
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1455
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1456
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1457
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1458
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1459
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1460
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1461
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1463
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1464
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1465
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1466
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1467
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1468
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1469
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1471
void resync_timer_fn(unsigned long data ) ;
#line 1474
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1477
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1482
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1497
  if (level == 1) {
#line 1498
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1500
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1502
  return (err);
}
}
#line 1505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1507
  val = 1;
#line 1508
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1510
  return;
}
}
#line 1512 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1514
  val = 0;
#line 1515
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1517
  return;
}
}
#line 1533
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1543
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1544
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1546
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1547
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1548
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1549
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1552
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1556
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1634
  return ((struct page *)page->ldv_12297.ldv_12294.private);
}
}
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_43908;
  ldv_43907: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_43908: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_43907;
    } else {
#line 1661
      goto ldv_43909;
    }
  } else {

  }
  ldv_43909: ;
#line 1662
  return (0);
}
}
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_43913;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_43916: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_43915;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_43916;
  ldv_43915: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43913: ;
#line 1671
  return;
}
}
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1674
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1675
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1676
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43939;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35070.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35070.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43939;
  }
  ldv_43939: ;
#line 1730
  return;
}
}
#line 1788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1791
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  tmp = spinlock_check(& q->q_lock);
#line 1880
  flags = _raw_spin_lock_irqsave(tmp);
#line 1881
  list_add_tail(& w->list, & q->q);
#line 1882
  up(& q->s);
#line 1884
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1885
  return;
}
}
#line 1887 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1889
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1889
  if (tmp != 0) {
#line 1890
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1891
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1895
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1896
  wake_asender(mdev);
#line 1897
  return;
}
}
#line 1899 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1903
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1903
  return (tmp);
}
}
#line 1918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1920
  _drbd_thread_stop(thi, 0, 1);
#line 1921
  return;
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1980
  atomic_inc(& mdev->rs_pending_cnt);
#line 1981
  return;
}
}
#line 2309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2311
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2311
  if (tmp___0 != 0) {
#line 2312
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2312
    drbd_blk_run_queue(tmp);
#line 2313
    put_ldev(mdev);
  } else {

  }
#line 2315
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 297
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 304
  mdev = req->mdev;
#line 308
  __req_mod(req, what, & m);
#line 309
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 310
    complete_master_bio(mdev, & m);
  } else {

  }
#line 311
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 318
  mdev = req->mdev;
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 321
  __req_mod(req, what, & m);
#line 322
  spin_unlock_irq(& mdev->req_lock);
#line 324
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 325
    complete_master_bio(mdev, & m);
  } else {

  }
#line 326
  return;
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 85
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 86
  md_io->error = error;
#line 88
  complete(& md_io->event);
#line 89
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 96
  flags = 0UL;
#line 97
  mdev = e->mdev;
#line 99
  if (e->block_id == 0ULL) {
#line 99
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            99);
  } else {

  }
#line 101
  tmp = spinlock_check(& mdev->req_lock);
#line 101
  flags = _raw_spin_lock_irqsave(tmp);
#line 102
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 103
  list_del(& e->w.list);
#line 104
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 104
  if (tmp___0 != 0) {
#line 105
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 106
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 106
  if (tmp___1 != 0) {
#line 107
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 108
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 110
  drbd_queue_work(& mdev->data.work, & e->w);
#line 111
  put_ldev(mdev);
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 116
  return ((ee_flags & 28) == 20);
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 124
  flags = 0UL;
#line 125
  mdev = e->mdev;
#line 133
  tmp___0 = is_failed_barrier((int )e->flags);
#line 133
  if (tmp___0 != 0) {
#line 134
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 135
    tmp = spinlock_check(& mdev->req_lock);
#line 135
    flags = _raw_spin_lock_irqsave(tmp);
#line 136
    list_del(& e->w.list);
#line 137
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 138
    e->w.cb = & w_e_reissue;
#line 141
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 142
    drbd_queue_work(& mdev->data.work, & e->w);
#line 143
    return;
  } else {

  }
#line 146
  if (e->block_id == 0ULL) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            146);
  } else {

  }
#line 152
  e_sector = e->sector;
#line 153
  do_al_complete_io = (int )e->flags & 1;
#line 154
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 156
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 156
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 157
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 158
  list_del(& e->w.list);
#line 159
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 166
  if (is_syncer_req != 0) {
#line 166
    tmp___2 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 166
    do_wake = tmp___2;
  } else {
#line 166
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 166
    do_wake = tmp___3;
  }
#line 170
  tmp___4 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 170
  if (tmp___4 != 0) {
#line 171
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 172
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 174
  if (is_syncer_req != 0) {
#line 175
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 177
  if (do_wake != 0) {
#line 178
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 180
  if (do_al_complete_io != 0) {
#line 181
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 183
  wake_asender(mdev);
#line 184
  put_ldev(mdev);
#line 185
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 192
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 193
  mdev = e->mdev;
#line 194
  uptodate = (int )bio->bi_flags & 1;
#line 195
  is_write = (int )bio->bi_rw & 1;
#line 197
  if (error != 0) {
#line 198
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 201
  if (error == 0 && uptodate == 0) {
#line 202
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 208
    error = -5;
  } else {

  }
#line 211
  if (error != 0) {
#line 212
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 214
  bio_put(bio);
#line 215
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 215
  if (tmp != 0) {
#line 216
    if (is_write != 0) {
#line 217
      drbd_endio_write_sec_final(e);
    } else {
#line 219
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 220
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 228
  req = (struct drbd_request *)bio->bi_private;
#line 229
  mdev = req->mdev;
#line 232
  uptodate = (int )bio->bi_flags & 1;
#line 234
  if (error == 0 && uptodate == 0) {
#line 235
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 240
    error = -5;
  } else {

  }
#line 244
  tmp = __builtin_expect(error != 0, 0L);
#line 244
  if (tmp != 0L) {
#line 245
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 251
    what = completed_ok;
  }
#line 253
  bio_put(req->private_bio);
#line 254
  tmp___0 = ERR_PTR((long )error);
#line 254
  req->private_bio = (struct bio *)tmp___0;
#line 256
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 256
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 257
  __req_mod(req, what, & m);
#line 258
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 260
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 261
    complete_master_bio(mdev, & m);
  } else {

  }
#line 262
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 266
  __mptr = (struct drbd_work  const  *)w;
#line 266
  req = (struct drbd_request *)__mptr;
#line 272
  spin_lock_irq(& mdev->req_lock);
#line 273
  if (cancel != 0 || *((unsigned int *)mdev + 455UL) != 65536U) {
#line 274
    _req_mod(req, read_retry_remote_canceled);
#line 275
    spin_unlock_irq(& mdev->req_lock);
#line 276
    return (1);
  } else {

  }
#line 278
  spin_unlock_irq(& mdev->req_lock);
#line 280
  tmp = w_send_read_req(mdev, w, 0);
#line 280
  return (tmp);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 285
  _b = cancel != 0;
#line 285
  if (_b != 0) {
#line 285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            285);
  } else {

  }
#line 285
  if (_b != 0) {
#line 285
    return (1);
  } else {

  }
#line 286
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 287
  return (1);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 294
  page = e->pages;
#line 298
  desc.tfm = tfm;
#line 299
  desc.flags = 0U;
#line 301
  sg_init_table(& sg, 1U);
#line 302
  crypto_hash_init(& desc);
#line 304
  goto ldv_44394;
  ldv_44393: 
#line 306
  sg_set_page(& sg, page, 4096U, 0U);
#line 307
  crypto_hash_update(& desc, & sg, sg.length);
#line 308
  page = tmp;
  ldv_44394: 
#line 304
  tmp = page_chain_next(page);
#line 304
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 305
    goto ldv_44393;
  } else {

  }
#line 311
  len = e->size & 4095U;
#line 312
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 313
  crypto_hash_update(& desc, & sg, sg.length);
#line 314
  crypto_hash_final(& desc, (u8 *)digest);
#line 315
  return;
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 324
  desc.tfm = tfm;
#line 325
  desc.flags = 0U;
#line 327
  sg_init_table(& sg, 1U);
#line 328
  crypto_hash_init(& desc);
#line 330
  bvec = bio->bi_io_vec;
#line 330
  i = 0;
#line 330
  goto ldv_44407;
  ldv_44406: 
#line 331
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 332
  crypto_hash_update(& desc, & sg, sg.length);
#line 330
  bvec = bvec + 1;
#line 330
  i = i + 1;
  ldv_44407: ;
#line 330
  if ((int )bio->bi_vcnt > i) {
#line 331
    goto ldv_44406;
  } else {

  }
#line 334
  crypto_hash_final(& desc, (u8 *)digest);
#line 335
  return;
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 339
  __mptr = (struct drbd_work  const  *)w;
#line 339
  e = (struct drbd_epoch_entry *)__mptr;
#line 344
  if (e->block_id != 2205466966ULL) {
#line 344
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            344);
  } else {

  }
#line 346
  tmp = __builtin_expect(cancel != 0, 0L);
#line 346
  if (tmp != 0L) {
#line 347
    drbd_free_ee(mdev, e);
#line 348
    return (1);
  } else {

  }
#line 351
  tmp___1 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 351
  if (tmp___1 != 0L) {
#line 352
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 352
    digest_size = (int )tmp___0;
#line 353
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 354
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 355
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 357
      inc_rs_pending(mdev);
#line 358
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 364
      kfree((void const   *)digest);
    } else {
#line 366
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 367
      ok = 0;
    }
  } else {
#line 370
    ok = 1;
  }
#line 372
  drbd_free_ee(mdev, e);
#line 374
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 374
  if (tmp___2 != 0L) {
#line 375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 376
  return (ok);
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;

  {
#line 385
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 385
  if (tmp == 0) {
#line 386
    return (0);
  } else {

  }
#line 390
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 391
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 392
    goto fail;
  } else {

  }
#line 394
  spin_lock_irq(& mdev->req_lock);
#line 395
  list_add(& e->w.list, & mdev->read_ee);
#line 396
  spin_unlock_irq(& mdev->req_lock);
#line 398
  e->w.cb = & w_e_send_csum;
#line 399
  tmp___0 = drbd_submit_ee(mdev, e, 0U, 3);
#line 399
  if (tmp___0 == 0) {
#line 400
    return (1);
  } else {

  }
#line 402
  drbd_free_ee(mdev, e);
  fail: 
#line 404
  put_ldev(mdev);
#line 405
  return (2);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 411
  mdev = (struct drbd_conf *)data;
#line 414
  tmp = spinlock_check(& mdev->req_lock);
#line 414
  flags = _raw_spin_lock_irqsave(tmp);
#line 416
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 416
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 416
  if (tmp___1 != 0L) {
#line 417
    queue = 1;
#line 418
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U) {
#line 419
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 421
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 423
    queue = 0;
#line 424
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 427
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 430
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 430
  if (tmp___2 != 0 && queue != 0) {
#line 431
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 432
  return;
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  unsigned long tmp___13 ;

  {
#line 439
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 439
  capacity = tmp;
#line 444
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 444
  if (tmp___0 != 0L) {
#line 445
    return (1);
  } else {

  }
#line 447
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35070.conn <= 9, 0L);
#line 447
  if (tmp___1 != 0L) {
#line 448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 449
    return (0);
  } else {

  }
#line 452
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 272U) {
#line 453
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 453
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 456
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 456
  if (tmp___3 == 0) {
#line 461
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 462
    mdev->resync_work.cb = & w_resync_inactive;
#line 463
    return (1);
  } else {

  }
#line 468
  if (mdev->agreed_pro_version <= 93) {
#line 468
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 468
    max_segment_size = (int )tmp___4;
  } else {
#line 468
    max_segment_size = 32768;
  }
#line 471
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 472
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 474
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 475
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 476
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 478
    mx = 1;
  }
#line 479
  mutex_unlock(& mdev->data.mutex);
#line 482
  if (number > mx) {
#line 483
    mx = number;
  } else {

  }
#line 486
  if (pe + number > mx) {
#line 487
    number = mx - pe;
  } else {

  }
#line 490
  i = 0;
#line 490
  goto ldv_44464;
  ldv_44463: 
#line 492
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 493
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 494
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 495
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 497
    queued = 1;
#line 498
    sndbuf = 0;
  }
#line 500
  mutex_unlock(& mdev->data.mutex);
#line 501
  if (sndbuf / 2 < queued) {
#line 502
    goto requeue;
  } else {

  }
  next_sector: 
#line 505
  size = 4096;
#line 506
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 508
  if (bit == 0xffffffffffffffffUL) {
#line 509
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 510
    mdev->resync_work.cb = & w_resync_inactive;
#line 511
    put_ldev(mdev);
#line 512
    return (1);
  } else {

  }
#line 515
  sector = bit << 3;
#line 517
  tmp___5 = drbd_try_rs_begin_io(mdev, sector);
#line 517
  if (tmp___5 != 0) {
#line 518
    mdev->bm_resync_fo = bit;
#line 519
    goto requeue;
  } else {

  }
#line 521
  mdev->bm_resync_fo = bit + 1UL;
#line 523
  tmp___6 = drbd_bm_test_bit(mdev, bit);
#line 523
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 523
  if (tmp___7 != 0L) {
#line 524
    drbd_rs_complete_io(mdev, sector);
#line 525
    goto next_sector;
  } else {

  }
#line 535
  align = 1;
  ldv_44456: ;
#line 537
  if (size + 4096 > max_segment_size) {
#line 538
    goto ldv_44455;
  } else {

  }
#line 541
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 542
    goto ldv_44455;
  } else {

  }
#line 545
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 546
    goto ldv_44455;
  } else {

  }
#line 552
  tmp___8 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 552
  if (tmp___8 != 1) {
#line 553
    goto ldv_44455;
  } else {

  }
#line 554
  bit = bit + 1UL;
#line 555
  size = size + 4096;
#line 556
  if (4096 << align <= size) {
#line 557
    align = align + 1;
  } else {

  }
#line 558
  i = i + 1;
#line 559
  goto ldv_44456;
  ldv_44455: ;
#line 562
  if (size > 4096) {
#line 563
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 567
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 568
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 569
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 570
    tmp___9 = read_for_csum(mdev, sector, size);
#line 570
    switch (tmp___9) {
    case 0: 
#line 572
    put_ldev(mdev);
#line 573
    return (0);
    case 2: 
#line 575
    drbd_rs_complete_io(mdev, sector);
#line 576
    mdev->bm_resync_fo = sector >> 3;
#line 577
    goto requeue;
    }
  } else {
#line 581
    inc_rs_pending(mdev);
#line 582
    tmp___12 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 582
    if (tmp___12 == 0) {
#line 584
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 585
      atomic_dec(& mdev->rs_pending_cnt);
#line 585
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 585
      if (tmp___11 < 0) {
#line 585
        tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 585
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 585, tmp___10);
      } else {

      }
#line 586
      put_ldev(mdev);
#line 587
      return (0);
    } else {

    }
  }
#line 490
  i = i + 1;
  ldv_44464: ;
#line 490
  if (i < number) {
#line 491
    goto ldv_44463;
  } else {

  }
#line 592
  tmp___13 = drbd_bm_bits(mdev);
#line 592
  if (mdev->bm_resync_fo >= tmp___13) {
#line 599
    mdev->resync_work.cb = & w_resync_inactive;
#line 600
    put_ldev(mdev);
#line 601
    return (1);
  } else {

  }
  requeue: 
#line 605
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 606
  put_ldev(mdev);
#line 607
  return (1);
}
}
#line 610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 614
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 614
  capacity = tmp;
#line 616
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 616
  if (tmp___0 != 0L) {
#line 617
    return (1);
  } else {

  }
#line 619
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35070.conn <= 9, 0L);
#line 619
  if (tmp___1 != 0L) {
#line 620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 621
    return (0);
  } else {

  }
#line 624
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 625
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 625
  if (tmp___2 > number) {
#line 626
    goto requeue;
  } else {

  }
#line 628
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 628
  number = number - tmp___3;
#line 630
  sector = mdev->ov_position;
#line 631
  i = 0;
#line 631
  goto ldv_44482;
  ldv_44481: ;
#line 632
  if (sector >= capacity) {
#line 633
    mdev->resync_work.cb = & w_resync_inactive;
#line 634
    return (1);
  } else {

  }
#line 637
  size = 4096;
#line 639
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 639
  if (tmp___4 != 0) {
#line 640
    mdev->ov_position = sector;
#line 641
    goto requeue;
  } else {

  }
#line 644
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 645
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 647
  inc_rs_pending(mdev);
#line 648
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 648
  if (tmp___7 == 0) {
#line 649
    atomic_dec(& mdev->rs_pending_cnt);
#line 649
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 649
    if (tmp___6 < 0) {
#line 649
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 649
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 649, tmp___5);
    } else {

    }
#line 650
    return (0);
  } else {

  }
#line 652
  sector = sector + 8UL;
#line 631
  i = i + 1;
  ldv_44482: ;
#line 631
  if (i < number) {
#line 632
    goto ldv_44481;
  } else {

  }
#line 654
  mdev->ov_position = sector;
  requeue: 
#line 657
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 658
  return (1);
}
}
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 664
  kfree((void const   *)w);
#line 665
  ov_oos_print(mdev);
#line 666
  drbd_resync_finished(mdev);
#line 668
  return (1);
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 673
  kfree((void const   *)w);
#line 675
  drbd_resync_finished(mdev);
#line 677
  return (1);
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 686
  khelper_cmd = 0;
#line 691
  tmp___1 = drbd_rs_del_all(mdev);
#line 691
  if (tmp___1 != 0) {
#line 697
    drbd_kick_lo(mdev);
#line 698
    tmp = get_current();
#line 698
    tmp->state = 1L;
#line 699
    schedule_timeout(25L);
#line 700
    tmp___0 = kmalloc___0(24UL, 32U);
#line 700
    w = (struct drbd_work *)tmp___0;
#line 701
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 702
      w->cb = & w_resync_finished;
#line 703
      drbd_queue_work(& mdev->data.work, w);
#line 704
      return (1);
    } else {

    }
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 709
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 710
  if (dt == 0UL) {
#line 711
    dt = 1UL;
  } else {

  }
#line 712
  db = mdev->rs_total;
#line 713
  dbdt = db / dt << 2;
#line 714
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 716
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 716
  if (tmp___2 == 0) {
#line 717
    goto out;
  } else {

  }
#line 719
  spin_lock_irq(& mdev->req_lock);
#line 720
  os = mdev->state;
#line 724
  if ((int )os.ldv_35070.conn <= 10) {
#line 725
    goto out_unlock;
  } else {

  }
#line 727
  ns = os;
#line 728
  ns.ldv_35070.conn = 10U;
#line 730
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 735
  n_oos = drbd_bm_total_weight(mdev);
#line 737
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 738
    if (n_oos != 0UL) {
#line 739
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 741
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 744
      if (mdev->rs_failed != n_oos) {
#line 744
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                744);
      } else {

      }
#line 746
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 747
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 749
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 750
        s = mdev->rs_same_csum;
#line 751
        t = mdev->rs_total;
#line 752
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 755
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 764
  if (mdev->rs_failed != 0UL) {
#line 765
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 767
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 768
      ns.ldv_35070.disk = 4U;
#line 769
      ns.ldv_35070.pdsk = 8U;
    } else {
#line 771
      ns.ldv_35070.disk = 8U;
#line 772
      ns.ldv_35070.pdsk = 4U;
    }
  } else {
#line 775
    ns.ldv_35070.disk = 8U;
#line 776
    ns.ldv_35070.pdsk = 8U;
#line 778
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 779
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 781
        i = 1;
#line 781
        goto ldv_44512;
        ldv_44511: 
#line 782
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 781
        i = i + 1;
        ldv_44512: ;
#line 781
        if (i <= 3) {
#line 782
          goto ldv_44511;
        } else {

        }
#line 783
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 784
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 786
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 790
    drbd_uuid_set_bm(mdev, 0ULL);
#line 792
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 796
      i___0 = 0;
#line 796
      goto ldv_44516;
      ldv_44515: 
#line 797
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 796
      i___0 = i___0 + 1;
      ldv_44516: ;
#line 796
      if (i___0 <= 3) {
#line 797
        goto ldv_44515;
      } else {

      }

    } else {

    }
  }
#line 801
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 803
  spin_unlock_irq(& mdev->req_lock);
#line 804
  put_ldev(mdev);
  out: 
#line 806
  mdev->rs_total = 0UL;
#line 807
  mdev->rs_failed = 0UL;
#line 808
  mdev->rs_paused = 0UL;
#line 809
  mdev->ov_start_sector = 0UL;
#line 811
  tmp___3 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 811
  if (tmp___3 != 0) {
#line 812
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, due to failed kmalloc\n");
#line 813
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 816
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 817
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 819
  return (1);
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 825
  tmp = drbd_ee_has_active_page(e);
#line 825
  if (tmp != 0) {
#line 827
    spin_lock_irq(& mdev->req_lock);
#line 828
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 829
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 831
    drbd_free_ee(mdev, e);
  }
#line 832
  return;
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 842
  __mptr = (struct drbd_work  const  *)w;
#line 842
  e = (struct drbd_epoch_entry *)__mptr;
#line 845
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 845
  if (tmp___1 != 0L) {
#line 846
    drbd_free_ee(mdev, e);
#line 847
    atomic_dec(& mdev->unacked_cnt);
#line 847
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 847
    if (tmp___0 < 0) {
#line 847
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 847
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 847, tmp);
    } else {

    }
#line 848
    return (1);
  } else {

  }
#line 851
  tmp___3 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 851
  if (tmp___3 != 0L) {
#line 852
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 854
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 854
    if (tmp___2 != 0) {
#line 855
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 858
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 861
  atomic_dec(& mdev->unacked_cnt);
#line 861
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 861
  if (tmp___5 < 0) {
#line 861
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 861, tmp___4);
  } else {

  }
#line 863
  move_to_net_ee_or_free(mdev, e);
#line 865
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 865
  if (tmp___6 != 0L) {
#line 866
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 867
  return (ok);
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 878
  __mptr = (struct drbd_work  const  *)w;
#line 878
  e = (struct drbd_epoch_entry *)__mptr;
#line 881
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 881
  if (tmp___1 != 0L) {
#line 882
    drbd_free_ee(mdev, e);
#line 883
    atomic_dec(& mdev->unacked_cnt);
#line 883
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 883
    if (tmp___0 < 0) {
#line 883
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 883
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 883, tmp);
    } else {

    }
#line 884
    return (1);
  } else {

  }
#line 887
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 887
  if (tmp___2 != 0) {
#line 888
    drbd_rs_complete_io(mdev, e->sector);
#line 889
    put_ldev(mdev);
  } else {

  }
#line 892
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 892
  if (tmp___6 != 0L) {
#line 893
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35070.pdsk > 3, 1L);
#line 893
    if (tmp___4 != 0L) {
#line 894
      inc_rs_pending(mdev);
#line 895
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 897
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 897
      if (tmp___3 != 0) {
#line 898
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 900
      ok = 1;
    }
  } else {
#line 903
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 903
    if (tmp___5 != 0) {
#line 904
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 907
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 910
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 913
  atomic_dec(& mdev->unacked_cnt);
#line 913
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 913
  if (tmp___8 < 0) {
#line 913
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 913
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 913, tmp___7);
  } else {

  }
#line 915
  move_to_net_ee_or_free(mdev, e);
#line 917
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 917
  if (tmp___9 != 0L) {
#line 918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 919
  return (ok);
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;

  {
#line 924
  __mptr = (struct drbd_work  const  *)w;
#line 924
  e = (struct drbd_epoch_entry *)__mptr;
#line 927
  digest = 0;
#line 928
  eq = 0;
#line 930
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 930
  if (tmp___1 != 0L) {
#line 931
    drbd_free_ee(mdev, e);
#line 932
    atomic_dec(& mdev->unacked_cnt);
#line 932
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 932
    if (tmp___0 < 0) {
#line 932
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 932
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 932, tmp);
    } else {

    }
#line 933
    return (1);
  } else {

  }
#line 936
  drbd_rs_complete_io(mdev, e->sector);
#line 938
  di = (struct digest_info *)e->block_id;
#line 940
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 940
  if (tmp___5 != 0L) {
#line 944
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 945
      tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 945
      digest_size = (int )tmp___2;
#line 946
      if (di->digest_size != digest_size) {
#line 946
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                946);
      } else {

      }
#line 947
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 949
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 950
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 951
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 951
      eq = tmp___3 == 0;
#line 952
      kfree((void const   *)digest);
    } else {

    }
#line 955
    if (eq != 0) {
#line 956
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         956U);
#line 958
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 959
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 961
      inc_rs_pending(mdev);
#line 962
      e->block_id = 0xffffffffffffffffULL;
#line 963
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 966
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 967
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 967
    if (tmp___4 != 0) {
#line 968
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 971
  atomic_dec(& mdev->unacked_cnt);
#line 971
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 971
  if (tmp___7 < 0) {
#line 971
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 971
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 971, tmp___6);
  } else {

  }
#line 973
  kfree((void const   *)di);
#line 975
  move_to_net_ee_or_free(mdev, e);
#line 977
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 977
  if (tmp___8 != 0L) {
#line 978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 979
  return (ok);
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 984
  __mptr = (struct drbd_work  const  *)w;
#line 984
  e = (struct drbd_epoch_entry *)__mptr;
#line 987
  ok = 1;
#line 989
  tmp = __builtin_expect(cancel != 0, 0L);
#line 989
  if (tmp != 0L) {
#line 990
    goto out;
  } else {

  }
#line 992
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 992
  if (tmp___0 != 0L) {
#line 993
    goto out;
  } else {

  }
#line 995
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 995
  digest_size = (int )tmp___1;
#line 997
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 998
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 999
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1000
    inc_rs_pending(mdev);
#line 1001
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1003
    if (ok == 0) {
#line 1004
      atomic_dec(& mdev->rs_pending_cnt);
#line 1004
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1004
      if (tmp___3 < 0) {
#line 1004
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1004
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1004, tmp___2);
      } else {

      }
    } else {

    }
#line 1005
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1009
  drbd_free_ee(mdev, e);
#line 1011
  atomic_dec(& mdev->unacked_cnt);
#line 1011
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
  if (tmp___5 < 0) {
#line 1011
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1011, tmp___4);
  } else {

  }
#line 1013
  return (ok);
}
}
#line 1016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1018
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1019
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1021
    mdev->ov_last_oos_start = sector;
#line 1022
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1024
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1024U);
#line 1025
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1026
  return;
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1030
  __mptr = (struct drbd_work  const  *)w;
#line 1030
  e = (struct drbd_epoch_entry *)__mptr;
#line 1034
  eq = 0;
#line 1036
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1036
  if (tmp___1 != 0L) {
#line 1037
    drbd_free_ee(mdev, e);
#line 1038
    atomic_dec(& mdev->unacked_cnt);
#line 1038
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1038
    if (tmp___0 < 0) {
#line 1038
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1038
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1038, tmp);
    } else {

    }
#line 1039
    return (1);
  } else {

  }
#line 1044
  drbd_rs_complete_io(mdev, e->sector);
#line 1046
  di = (struct digest_info *)e->block_id;
#line 1048
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1048
  if (tmp___5 != 0L) {
#line 1049
    tmp___2 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1049
    digest_size = (int )tmp___2;
#line 1050
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1051
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1052
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1054
      if (di->digest_size != digest_size) {
#line 1054
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1054);
      } else {

      }
#line 1055
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1055
      eq = tmp___3 == 0;
#line 1056
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1059
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1060
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1060
    if (tmp___4 != 0) {
#line 1061
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1064
  atomic_dec(& mdev->unacked_cnt);
#line 1064
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1064
  if (tmp___7 < 0) {
#line 1064
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1064, tmp___6);
  } else {

  }
#line 1066
  kfree((void const   *)di);
#line 1068
  if (eq == 0) {
#line 1069
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1071
    ov_oos_print(mdev);
  }
#line 1073
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1076
  drbd_free_ee(mdev, e);
#line 1078
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1078
  if (mdev->ov_left == 0UL) {
#line 1079
    ov_oos_print(mdev);
#line 1080
    drbd_resync_finished(mdev);
  } else {

  }
#line 1083
  return (ok);
}
}
#line 1086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1088
  __mptr = (struct drbd_work  const  *)w;
#line 1088
  b = (struct drbd_wq_barrier *)__mptr;
#line 1089
  complete(& b->done);
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1095
  __mptr = (struct drbd_work  const  *)w;
#line 1095
  b = (struct drbd_tl_epoch *)__mptr;
#line 1096
  p = & mdev->data.sbuf.barrier;
#line 1097
  ok = 1;
#line 1104
  spin_lock_irq(& mdev->req_lock);
#line 1105
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35070.conn <= 9) {
#line 1106
    cancel = 1;
  } else {

  }
#line 1107
  spin_unlock_irq(& mdev->req_lock);
#line 1108
  if (cancel != 0) {
#line 1109
    return (1);
  } else {

  }
#line 1111
  tmp = drbd_get_data_sock(mdev);
#line 1111
  if (tmp == 0) {
#line 1112
    return (0);
  } else {

  }
#line 1113
  p->barrier = b->br_number;
#line 1117
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1119
  drbd_put_data_sock(mdev);
#line 1121
  return (ok);
}
}
#line 1124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1126
  if (cancel != 0) {
#line 1127
    return (1);
  } else {

  }
#line 1128
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1128
  return (tmp);
}
}
#line 1137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1139
  __mptr = (struct drbd_work  const  *)w;
#line 1139
  req = (struct drbd_request *)__mptr;
#line 1142
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1142
  if (tmp != 0L) {
#line 1143
    req_mod(req, send_canceled);
#line 1144
    return (1);
  } else {

  }
#line 1147
  ok = drbd_send_dblock(mdev, req);
#line 1148
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1150
  return (ok);
}
}
#line 1159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1161
  __mptr = (struct drbd_work  const  *)w;
#line 1161
  req = (struct drbd_request *)__mptr;
#line 1164
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1164
  if (tmp != 0L) {
#line 1165
    req_mod(req, send_canceled);
#line 1166
    return (1);
  } else {

  }
#line 1169
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1172
  if (ok == 0) {
#line 1175
    if ((int )mdev->state.ldv_35070.conn > 9) {
#line 1176
      val.i = 0U;
#line 1176
      val.ldv_35070.conn = 5U;
#line 1176
      mask.i = 0U;
#line 1176
      mask.ldv_35070.conn = 31U;
#line 1176
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1178
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1180
  return (ok);
}
}
#line 1183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1185
  odev = mdev;
  ldv_44670: ;
#line 1188
  if (odev->sync_conf.after == -1) {
#line 1189
    return (1);
  } else {

  }
#line 1190
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1191
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1191
  if (_b != 0) {
#line 1191
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1191);
  } else {

  }
#line 1191
  if (_b != 0) {
#line 1191
    return (1);
  } else {

  }
#line 1192
  if (((((int )odev->state.ldv_35070.conn > 15 && (int )odev->state.ldv_35070.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1196
    return (0);
  } else {

  }
#line 1197
  goto ldv_44670;
}
}
#line 1206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1209
  rv = 0;
#line 1211
  i = 0;
#line 1211
  goto ldv_44681;
  ldv_44680: 
#line 1212
  odev = minor_to_mdev((unsigned int )i);
#line 1213
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1214
    goto ldv_44677;
  } else {

  }
#line 1215
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1216
    goto ldv_44677;
  } else {

  }
#line 1217
  tmp___0 = _drbd_may_sync_now(odev);
#line 1217
  if (tmp___0 == 0) {
#line 1218
    __ns.i = odev->state.i;
#line 1218
    __ns.ldv_35070.aftr_isp = 1U;
#line 1218
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1218
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_44677: 
#line 1211
  i = i + 1;
  ldv_44681: ;
#line 1211
  if ((unsigned int )i < minor_count) {
#line 1212
    goto ldv_44680;
  } else {

  }

#line 1222
  return (rv);
}
}
#line 1231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1234
  rv = 0;
#line 1236
  i = 0;
#line 1236
  goto ldv_44693;
  ldv_44692: 
#line 1237
  odev = minor_to_mdev((unsigned int )i);
#line 1238
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1239
    goto ldv_44689;
  } else {

  }
#line 1240
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1241
    goto ldv_44689;
  } else {

  }
#line 1242
  if ((unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1243
    tmp___0 = _drbd_may_sync_now(odev);
#line 1243
    if (tmp___0 != 0) {
#line 1244
      __ns.i = odev->state.i;
#line 1244
      __ns.ldv_35070.aftr_isp = 0U;
#line 1244
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1244
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_44689: 
#line 1236
  i = i + 1;
  ldv_44693: ;
#line 1236
  if ((unsigned int )i < minor_count) {
#line 1237
    goto ldv_44692;
  } else {

  }

#line 1249
  return (rv);
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1254
  _raw_write_lock_irq(& global_state_lock);
#line 1255
  _drbd_resume_next(mdev);
#line 1256
  _raw_write_unlock_irq(& global_state_lock);
#line 1257
  return;
}
}
#line 1259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1261
  _raw_write_lock_irq(& global_state_lock);
#line 1262
  _drbd_pause_after(mdev);
#line 1263
  _raw_write_unlock_irq(& global_state_lock);
#line 1264
  return;
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1270
  if (o_minor == -1) {
#line 1271
    return (101);
  } else {

  }
#line 1272
  if (o_minor < -1) {
#line 1273
    return (132);
  } else {
#line 1272
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1272
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1273
      return (132);
    } else {

    }
  }
#line 1276
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_44706: ;
#line 1278
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1279
    return (133);
  } else {

  }
#line 1282
  if (odev->sync_conf.after == -1) {
#line 1283
    return (101);
  } else {

  }
#line 1286
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1287
  goto ldv_44706;
}
}
#line 1290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1295
  _raw_write_lock_irq(& global_state_lock);
#line 1296
  retcode = sync_after_error(mdev, na);
#line 1297
  if (retcode == 101) {
#line 1298
    mdev->sync_conf.after = na;
    ldv_44713: 
#line 1300
    changes = _drbd_pause_after(mdev);
#line 1301
    tmp = _drbd_resume_next(mdev);
#line 1301
    changes = tmp | changes;
#line 1302
    if (changes != 0) {
#line 1303
      goto ldv_44713;
    } else {

    }

  } else {

  }
#line 1304
  _raw_write_unlock_irq(& global_state_lock);
#line 1305
  return (retcode);
}
}
#line 1308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1310
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1311
  request_ping(mdev);
#line 1312
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1312
  if (tmp != 0 || (int )mdev->state.ldv_35070.conn <= 9) {
#line 1312
    goto ldv_44718;
  } else {

  }
#line 1312
  tmp___0 = get_current();
#line 1312
  __wait.flags = 0U;
#line 1312
  __wait.private = (void *)tmp___0;
#line 1312
  __wait.func = & autoremove_wake_function;
#line 1312
  __wait.task_list.next = & __wait.task_list;
#line 1312
  __wait.task_list.prev = & __wait.task_list;
  ldv_44721: 
#line 1312
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1312
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1312
  if (tmp___1 != 0 || (int )mdev->state.ldv_35070.conn <= 9) {
#line 1312
    goto ldv_44720;
  } else {

  }
#line 1312
  schedule();
#line 1312
  goto ldv_44721;
  ldv_44720: 
#line 1312
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44718: ;
#line 1315
  return;
}
}
#line 1324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1329
  if ((int )mdev->state.ldv_35070.conn > 15) {
#line 1330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1331
    return;
  } else {

  }
#line 1335
  drbd_rs_cancel_all(mdev);
#line 1337
  if ((unsigned int )side == 17U) {
#line 1341
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1342
    r = (r >> 8) & 255;
#line 1343
    if (r > 0) {
#line 1344
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1346
      val.i = 0U;
#line 1346
      val.ldv_35070.conn = 1U;
#line 1346
      mask.i = 0U;
#line 1346
      mask.ldv_35070.conn = 31U;
#line 1346
      drbd_force_state(mdev, mask, val);
#line 1347
      return;
    } else {

    }
  } else {

  }
#line 1351
  drbd_state_lock(mdev);
#line 1353
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1353
  if (tmp == 0) {
#line 1354
    drbd_state_unlock(mdev);
#line 1355
    return;
  } else {

  }
#line 1358
  if ((unsigned int )side == 17U) {
#line 1359
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1363
    get_random_bytes((void *)(& uuid), 8);
#line 1364
    drbd_uuid_set(mdev, 1, uuid);
#line 1365
    drbd_send_sync_uuid(mdev, uuid);
#line 1367
    if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 16U) {
#line 1367
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1367);
    } else {

    }
  }
#line 1370
  _raw_write_lock_irq(& global_state_lock);
#line 1371
  ns = mdev->state;
#line 1373
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1373
  ns.ldv_35070.aftr_isp = tmp___0 == 0;
#line 1375
  ns.ldv_35070.conn = (unsigned char )side;
#line 1377
  if ((unsigned int )side == 17U) {
#line 1378
    ns.ldv_35070.disk = 4U;
  } else {
#line 1380
    ns.ldv_35070.pdsk = 4U;
  }
#line 1382
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1383
  ns = mdev->state;
#line 1385
  if ((int )ns.ldv_35070.conn <= 9) {
#line 1386
    r = 0;
  } else {

  }
#line 1388
  if (r == 1) {
#line 1389
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1389
    mdev->rs_mark_left = tmp___1;
#line 1389
    mdev->rs_total = tmp___1;
#line 1391
    mdev->rs_failed = 0UL;
#line 1392
    mdev->rs_paused = 0UL;
#line 1393
    tmp___2 = jiffies;
#line 1393
    mdev->rs_mark_time = tmp___2;
#line 1393
    mdev->rs_start = tmp___2;
#line 1395
    mdev->rs_same_csum = 0UL;
#line 1396
    _drbd_pause_after(mdev);
  } else {

  }
#line 1398
  _raw_write_unlock_irq(& global_state_lock);
#line 1399
  put_ldev(mdev);
#line 1401
  if (r == 1) {
#line 1402
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35070.conn);
#line 1402
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1407
    if (mdev->rs_total == 0UL) {
#line 1409
      ping_peer(mdev);
#line 1410
      drbd_resync_finished(mdev);
    } else {

    }
#line 1417
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1418
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1420
    drbd_md_sync(mdev);
  } else {

  }
#line 1422
  drbd_state_unlock(mdev);
#line 1423
  return;
}
}
#line 1425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1427
  mdev = thi->mdev;
#line 1428
  w = 0;
#line 1429
  work_list.next = & work_list;
#line 1429
  work_list.prev = & work_list;
#line 1430
  intr = 0;
#line 1432
  tmp = mdev_to_minor(mdev);
#line 1432
  tmp___0 = get_current();
#line 1432
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1434
  goto ldv_44744;
  ldv_44754: 
#line 1435
  drbd_thread_current_set_cpu(mdev);
#line 1437
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1437
  if (tmp___1 != 0) {
#line 1438
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1439
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1440
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1441
    mutex_unlock(& mdev->data.mutex);
#line 1443
    intr = down_interruptible(& mdev->data.work.s);
#line 1445
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1446
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1447
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1448
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1451
  if (intr != 0) {
#line 1452
    if (intr != -4) {
#line 1452
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1452);
    } else {

    }
#line 1453
    tmp___2 = get_current();
#line 1453
    flush_signals(tmp___2);
#line 1454
    tmp___3 = get_t_state(thi);
#line 1454
    _b = (unsigned int )tmp___3 == 1U;
#line 1454
    if (_b != 0) {
#line 1454
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1454);
    } else {

    }
#line 1454
    if (_b != 0) {
#line 1455
      goto ldv_44744;
    } else {

    }
#line 1456
    goto ldv_44745;
  } else {

  }
#line 1459
  tmp___4 = get_t_state(thi);
#line 1459
  if ((unsigned int )tmp___4 != 1U) {
#line 1460
    goto ldv_44745;
  } else {

  }
#line 1465
  w = 0;
#line 1466
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1467
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1467
  _b___0 = tmp___5 != 0;
#line 1467
  if (_b___0 != 0) {
#line 1467
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1467);
  } else {

  }
#line 1467
  if (_b___0 != 0) {
#line 1479
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1480
    goto ldv_44744;
  } else {

  }
#line 1482
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1482
  w = (struct drbd_work *)__mptr;
#line 1483
  list_del_init(& w->list);
#line 1484
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1486
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35070.conn <= 9);
#line 1486
  if (tmp___6 == 0) {
#line 1488
    if ((int )mdev->state.ldv_35070.conn > 9) {
#line 1490
      val.i = 0U;
#line 1490
      val.ldv_35070.conn = 5U;
#line 1490
      mask.i = 0U;
#line 1490
      mask.ldv_35070.conn = 31U;
#line 1490
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_44744: 
#line 1434
  tmp___7 = get_t_state(thi);
#line 1434
  if ((unsigned int )tmp___7 == 1U) {
#line 1435
    goto ldv_44754;
  } else {

  }
  ldv_44745: 
#line 1493
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1493
  if (tmp___8 == 0) {
#line 1493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1493);
  } else {

  }
#line 1494
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1494
  if (tmp___9 == 0) {
#line 1494
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1494);
  } else {

  }
#line 1496
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1497
  i = 0;
#line 1498
  goto ldv_44761;
  ldv_44760: 
#line 1499
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1500
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1502
  goto ldv_44758;
  ldv_44757: 
#line 1503
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1503
  w = (struct drbd_work *)__mptr___0;
#line 1504
  list_del_init(& w->list);
#line 1505
  (*(w->cb))(mdev, w, 1);
#line 1506
  i = i + 1;
  ldv_44758: 
#line 1502
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1502
  if (tmp___10 == 0) {
#line 1503
    goto ldv_44757;
  } else {

  }
#line 1509
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_44761: 
#line 1498
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1498
  if (tmp___11 == 0) {
#line 1499
    goto ldv_44760;
  } else {

  }
#line 1511
  sema_init(& mdev->data.work.s, 0);
#line 1517
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1519
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 0U || (unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1519
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1519);
  } else {

  }
#line 1522
  drbd_thread_stop(& mdev->receiver);
#line 1523
  drbd_mdev_cleanup(mdev);
#line 1525
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1527
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1528
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1529
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1531
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 371 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 148 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 150
  __list_del(list->prev, list->next);
#line 151
  list_add(list, head);
#line 152
  return;
}
}
#line 569 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 571
  h->next = 0;
#line 572
  h->pprev = 0;
#line 573
  return;
}
}
#line 575 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 577
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 585 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 587
  next = n->next;
#line 588
  pprev = n->pprev;
#line 589
  *pprev = next;
#line 590
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 591
    next->pprev = pprev;
  } else {

  }
#line 592
  return;
}
}
#line 601 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 603
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 603
  if (tmp == 0) {
#line 604
    __hlist_del(n);
#line 605
    INIT_HLIST_NODE(n);
  } else {

  }
#line 607
  return;
}
}
#line 609 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 611
  first = h->first;
#line 612
  n->next = first;
#line 613
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 614
    first->pprev = & n->next;
  } else {

  }
#line 615
  h->first = n;
#line 616
  n->pprev = & h->first;
#line 617
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5788.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5788.rlock);
#line 325
  return;
}
}
#line 135 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 234 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 236
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 238
extern void sock_release(struct socket * ) ;
#line 241
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13782: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13782;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___1(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 341 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17715: ;
#line 63
    goto ldv_17715;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17716: ;
#line 65
    goto ldv_17716;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17717: ;
#line 66
    goto ldv_17717;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2285 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2287
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2287
  return (tmp);
}
}
#line 2311 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2313
  tmp = test_tsk_thread_flag(p, 2);
#line 2313
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2313
  return ((int )tmp___0);
}
}
#line 283 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  __might_sleep("include/linux/highmem.h", 61, 0);
#line 62
  tmp = lowmem_page_address(page);
#line 62
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 67
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 687 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 555 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 557
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 570
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 582
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1118
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1122
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1128
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1138
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1140
void tl_clear(struct drbd_conf *mdev ) ;
#line 1142
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1145
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1146
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1149
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1151
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1160
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1162
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1163
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1167
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1169
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1186
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1188
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1209
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1210
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1211
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1392
mempool_t *drbd_ee_mempool ;
#line 1394
struct page *drbd_pp_pool ;
#line 1395
spinlock_t drbd_pp_lock ;
#line 1396
int drbd_pp_vacant ;
#line 1397
wait_queue_head_t drbd_pp_wait ;
#line 1417
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1419
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1420
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1421
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1422
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1424
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1476
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1483
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1485
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1489
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1521
  val = 1;
#line 1522
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1524
  return;
}
}
#line 1526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1528
  val = 2;
#line 1529
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1531
  return;
}
}
#line 1542
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1545
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1571
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_44183;
  ldv_44182: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_44183: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_44182;
    } else {
#line 1661
      goto ldv_44184;
    }
  } else {

  }
  ldv_44184: ;
#line 1662
  return (0);
}
}
#line 1701 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1705
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1705
  return (tmp);
}
}
#line 1759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1761
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1764
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1767
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44255;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44255;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44255: ;
#line 1825
  return (s);
}
}
#line 1866 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1869
  tmp = spinlock_check(& q->q_lock);
#line 1869
  flags = _raw_spin_lock_irqsave(tmp);
#line 1870
  list_add(& w->list, & q->q);
#line 1871
  up(& q->s);
#line 1873
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1874
  return;
}
}
#line 1906 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1909
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1909
  return (tmp);
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1915
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1915
  return (tmp);
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1999
  atomic_inc(& mdev->unacked_cnt);
#line 2000
  return;
}
}
#line 2013 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2015
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2015
  if (tmp != 0) {
#line 2016
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2017
  return;
}
}
#line 2025 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2029
  atomic_inc(& mdev->net_cnt);
#line 2030
  have_net_conf = (int )mdev->state.ldv_35070.conn > 1;
#line 2031
  if (have_net_conf == 0) {
#line 2032
    put_net_conf(mdev);
  } else {

  }
#line 2033
  return (have_net_conf);
}
}
#line 2254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2256
  mdev->ed_uuid = val;
#line 2257
  return;
}
}
#line 2259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2266
  return ((int )a - (int )b);
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2278
  spin_lock(& mdev->peer_seq_lock);
#line 2279
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2279
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2280
  mdev->peer_seq = m;
#line 2281
  spin_unlock(& mdev->peer_seq_lock);
#line 2282
  if (m == new_seq) {
#line 2283
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2284
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_44517: ;
#line 208
    goto ldv_44517;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_44522: ;
#line 217
    goto ldv_44522;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 231 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 234
  tmp = ar_hash_slot(mdev, sector);
#line 234
  slot = tmp;
#line 238
  n = slot->first;
#line 238
  goto ldv_44540;
  ldv_44539: ;
#line 239
  if ((unsigned long )req == (unsigned long )id) {
#line 240
    if (req->sector != sector) {
#line 240
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              240);
    } else {

    }
#line 241
    return (req);
  } else {

  }
#line 238
  n = n->next;
  ldv_44540: ;
#line 238
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 238
    __builtin_prefetch((void const   *)n->next);
#line 238
    if (1 != 0) {
#line 238
      __mptr = (struct hlist_node  const  *)n;
#line 238
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 238
      if (1 != 0) {
#line 239
        goto ldv_44539;
      } else {
#line 241
        goto ldv_44541;
      }
    } else {
#line 241
      goto ldv_44541;
    }
  } else {

  }
  ldv_44541: ;
#line 244
  return (0);
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 282
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_44587: ;
#line 162
  goto ldv_44587;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 72
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 74
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 75
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 80
  spin_lock(& mdev->epoch_lock);
#line 81
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 81
  prev = (struct drbd_epoch *)__mptr;
#line 82
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 83
    prev = 0;
  } else {

  }
#line 84
  spin_unlock(& mdev->epoch_lock);
#line 85
  return (prev);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 104
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 104
  if (tmp___0 != 0L) {
#line 104
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (104), "i" (12UL));
    ldv_44677: ;
#line 104
    goto ldv_44677;
  } else {

  }
#line 105
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 105
  if (tmp___1 != 0L) {
#line 105
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (105), "i" (12UL));
    ldv_44678: ;
#line 105
    goto ldv_44678;
  } else {

  }
#line 107
  page = *head;
#line 109
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 110
    return (0);
  } else {

  }
#line 112
  goto ldv_44681;
  ldv_44680: 
#line 113
  tmp = page_chain_next(page);
#line 114
  n = n - 1;
#line 114
  if (n == 0) {
#line 115
    goto ldv_44679;
  } else {

  }
#line 116
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 118
    return (0);
  } else {

  }
#line 119
  page = tmp;
  ldv_44681: ;
#line 112
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 113
    goto ldv_44680;
  } else {

  }
  ldv_44679: 
#line 123
  page->ldv_12297.ldv_12294.private = 0UL;
#line 125
  page = *head;
#line 126
  *head = tmp;
#line 127
  return (page);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 136
  i = 1;
#line 137
  goto ldv_44689;
  ldv_44688: 
#line 138
  i = i + 1;
#line 138
  page = tmp;
  ldv_44689: 
#line 137
  tmp = page_chain_next(page);
#line 137
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 138
    goto ldv_44688;
  } else {

  }

#line 139
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 140
    *len = i;
  } else {

  }
#line 141
  return (page);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 147
  i = 0;
#line 148
  goto ldv_44698;
  ldv_44697: 
#line 149
  put_page(page);
#line 150
  i = i + 1;
#line 148
  page = tmp;
  ldv_44698: ;
#line 148
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 148
    tmp = page_chain_next(page);
#line 148
    if (1 != 0) {
#line 149
      goto ldv_44697;
    } else {
#line 151
      goto ldv_44699;
    }
  } else {

  }
  ldv_44699: ;
#line 152
  return (i);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 160
  tmp = page_chain_tail(chain_first, 0);
#line 161
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 161
  if (tmp___0 != 0L) {
#line 161
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (161), "i" (12UL));
    ldv_44706: ;
#line 161
    goto ldv_44706;
  } else {

  }
#line 165
  chain_last->ldv_12297.ldv_12294.private = (unsigned long )*head;
#line 166
  *head = chain_first;
#line 167
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 171
  page = 0;
#line 172
  tmp = 0;
#line 173
  i = 0;
#line 177
  if (drbd_pp_vacant >= number) {
#line 178
    spin_lock(& drbd_pp_lock);
#line 179
    page = page_chain_del(& drbd_pp_pool, number);
#line 180
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 181
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 182
    spin_unlock(& drbd_pp_lock);
#line 183
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 184
      return (page);
    } else {

    }
  } else {

  }
#line 190
  i = 0;
#line 190
  goto ldv_44716;
  ldv_44715: 
#line 191
  tmp = alloc_pages(514U, 0U);
#line 192
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 193
    goto ldv_44714;
  } else {

  }
#line 194
  tmp->ldv_12297.ldv_12294.private = (unsigned long )page;
#line 195
  page = tmp;
#line 190
  i = i + 1;
  ldv_44716: ;
#line 190
  if (i < number) {
#line 191
    goto ldv_44715;
  } else {

  }
  ldv_44714: ;
#line 198
  if (i == number) {
#line 199
    return (page);
  } else {

  }
#line 204
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 205
    tmp = page_chain_tail(page, 0);
#line 206
    spin_lock(& drbd_pp_lock);
#line 207
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 208
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 209
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 211
  return (0);
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 219
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 219
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 220
    drbd_kick_lo(mdev);
  } else {

  }
#line 221
  return;
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 233
  le = mdev->net_ee.next;
#line 233
  tle = le->next;
#line 233
  goto ldv_44731;
  ldv_44730: 
#line 234
  __mptr = (struct list_head  const  *)le;
#line 234
  e = (struct drbd_epoch_entry *)__mptr;
#line 235
  tmp = drbd_ee_has_active_page___0(e);
#line 235
  if (tmp != 0) {
#line 236
    goto ldv_44729;
  } else {

  }
#line 237
  list_move(le, to_be_freed);
#line 233
  le = tle;
#line 233
  tle = le->next;
  ldv_44731: ;
#line 233
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 234
    goto ldv_44730;
  } else {

  }
  ldv_44729: ;
#line 238
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 243
  reclaimed.next = & reclaimed;
#line 243
  reclaimed.prev = & reclaimed;
#line 246
  maybe_kick_lo(mdev);
#line 247
  spin_lock_irq(& mdev->req_lock);
#line 248
  reclaim_net_ee(mdev, & reclaimed);
#line 249
  spin_unlock_irq(& mdev->req_lock);
#line 251
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 251
  e = (struct drbd_epoch_entry *)__mptr;
#line 251
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 251
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 251
  goto ldv_44745;
  ldv_44744: 
#line 252
  drbd_free_ee(mdev, e);
#line 251
  e = t;
#line 251
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 251
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44745: ;
#line 251
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 252
    goto ldv_44744;
  } else {

  }

#line 256
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 269
  page = 0;
#line 270
  tmp = get_current();
#line 270
  wait.flags = 0U;
#line 270
  wait.private = (void *)tmp;
#line 270
  wait.func = & autoremove_wake_function;
#line 270
  wait.task_list.next = & wait.task_list;
#line 270
  wait.task_list.prev = & wait.task_list;
#line 274
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 274
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 275
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 277
  goto ldv_44756;
  ldv_44755: 
#line 278
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 280
  drbd_kick_lo_and_reclaim_net(mdev);
#line 282
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 282
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 283
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 284
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 285
      goto ldv_44754;
    } else {

    }
  } else {

  }
#line 288
  if (! retry) {
#line 289
    goto ldv_44754;
  } else {

  }
#line 291
  tmp___2 = get_current();
#line 291
  tmp___3 = signal_pending(tmp___2);
#line 291
  if (tmp___3 != 0) {
#line 292
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 293
    goto ldv_44754;
  } else {

  }
#line 296
  schedule();
  ldv_44756: ;
#line 277
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 278
    goto ldv_44755;
  } else {

  }
  ldv_44754: 
#line 298
  finish_wait(& drbd_pp_wait, & wait);
#line 300
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 301
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 302
  return (page);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int i ;
  struct page *tmp ;

  {
#line 312
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 313
    i = page_chain_free(page);
  } else {
#line 316
    tmp = page_chain_tail(page, & i);
#line 317
    spin_lock(& drbd_pp_lock);
#line 318
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 319
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 320
    spin_unlock(& drbd_pp_lock);
  }
#line 322
  atomic_sub(i, & mdev->pp_in_use);
#line 323
  i = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 324
  if (i < 0) {
#line 325
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: pp_in_use: %d < 0\n",
             i);
  } else {

  }
#line 326
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 327
  return;
}
}
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 352
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 354
  tmp = drbd_insert_fault(mdev, 8U);
#line 354
  if (tmp != 0) {
#line 355
    return (0);
  } else {

  }
#line 357
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 357
  e = (struct drbd_epoch_entry *)tmp___0;
#line 358
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 359
    if ((gfp_mask & 512U) == 0U) {
#line 360
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 361
    return (0);
  } else {

  }
#line 364
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 365
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 366
    goto fail;
  } else {

  }
#line 368
  INIT_HLIST_NODE(& e->colision);
#line 369
  e->epoch = 0;
#line 370
  e->mdev = mdev;
#line 371
  e->pages = page;
#line 372
  atomic_set(& e->pending_bios, 0);
#line 373
  e->size = data_size;
#line 374
  e->flags = 0UL;
#line 375
  e->sector = sector;
#line 376
  e->sector = sector;
#line 377
  e->block_id = id;
#line 379
  return (e);
  fail: 
#line 382
  mempool_free((void *)e, drbd_ee_mempool);
#line 383
  return (0);
}
}
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 388
  drbd_pp_free(mdev, e->pages);
#line 389
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 389
  if (tmp != 0) {
#line 389
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            389);
  } else {

  }
#line 390
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 390
  if (tmp___0 == 0) {
#line 390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            390);
  } else {

  }
#line 391
  mempool_free((void *)e, drbd_ee_mempool);
#line 392
  return;
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 396
  work_list.next = & work_list;
#line 396
  work_list.prev = & work_list;
#line 398
  count = 0;
#line 400
  spin_lock_irq(& mdev->req_lock);
#line 401
  list_splice_init(list, & work_list);
#line 402
  spin_unlock_irq(& mdev->req_lock);
#line 404
  __mptr = (struct list_head  const  *)work_list.next;
#line 404
  e = (struct drbd_epoch_entry *)__mptr;
#line 404
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 404
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 404
  goto ldv_44793;
  ldv_44792: 
#line 405
  drbd_free_ee(mdev, e);
#line 406
  count = count + 1;
#line 404
  e = t;
#line 404
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 404
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44793: ;
#line 404
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 405
    goto ldv_44792;
  } else {

  }

#line 408
  return (count);
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 423
  work_list.next = & work_list;
#line 423
  work_list.prev = & work_list;
#line 424
  reclaimed.next = & reclaimed;
#line 424
  reclaimed.prev = & reclaimed;
#line 426
  ok = (int )mdev->state.ldv_35070.conn > 8;
#line 428
  spin_lock_irq(& mdev->req_lock);
#line 429
  reclaim_net_ee(mdev, & reclaimed);
#line 430
  list_splice_init(& mdev->done_ee, & work_list);
#line 431
  spin_unlock_irq(& mdev->req_lock);
#line 433
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 433
  e = (struct drbd_epoch_entry *)__mptr;
#line 433
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 433
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 433
  goto ldv_44810;
  ldv_44809: 
#line 434
  drbd_free_ee(mdev, e);
#line 433
  e = t;
#line 433
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 433
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44810: ;
#line 433
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 434
    goto ldv_44809;
  } else {

  }
#line 440
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 440
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 440
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 440
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 440
  goto ldv_44819;
  ldv_44818: 
#line 442
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 442
  ok = tmp != 0 && ok != 0;
#line 443
  drbd_free_ee(mdev, e);
#line 440
  e = t;
#line 440
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 440
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_44819: ;
#line 440
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 441
    goto ldv_44818;
  } else {

  }
#line 445
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 447
  return (ok);
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 452
  tmp = get_current();
#line 452
  wait.flags = 0U;
#line 452
  wait.private = (void *)tmp;
#line 452
  wait.func = & autoremove_wake_function;
#line 452
  wait.task_list.next = & wait.task_list;
#line 452
  wait.task_list.prev = & wait.task_list;
#line 456
  goto ldv_44827;
  ldv_44826: 
#line 457
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 458
  spin_unlock_irq(& mdev->req_lock);
#line 459
  drbd_kick_lo(mdev);
#line 460
  schedule();
#line 461
  finish_wait(& mdev->ee_wait, & wait);
#line 462
  spin_lock_irq(& mdev->req_lock);
  ldv_44827: 
#line 456
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 456
  if (tmp___0 == 0) {
#line 457
    goto ldv_44826;
  } else {

  }

#line 461
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 468
  spin_lock_irq(& mdev->req_lock);
#line 469
  _drbd_wait_ee_list_empty(mdev, head);
#line 470
  spin_unlock_irq(& mdev->req_lock);
#line 471
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 478
  sk = sock->sk;
#line 479
  err = 0;
#line 481
  *what = "listen";
#line 482
  err = (*((sock->ops)->listen))(sock, 5);
#line 483
  if (err < 0) {
#line 484
    goto out;
  } else {

  }
#line 486
  *what = "sock_create_lite";
#line 487
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 489
  if (err < 0) {
#line 490
    goto out;
  } else {

  }
#line 492
  *what = "accept";
#line 493
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 494
  if (err < 0) {
#line 495
    sock_release(*newsock);
#line 496
    *newsock = 0;
#line 497
    goto out;
  } else {

  }
#line 499
  (*newsock)->ops = sock->ops;
  out: ;
#line 502
  return (err);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 509
  iov.iov_base = buf;
#line 509
  iov.iov_len = size;
#line 513
  msg.msg_name = 0;
#line 513
  msg.msg_namelen = 0;
#line 513
  msg.msg_iov = (struct iovec *)(& iov);
#line 513
  msg.msg_iovlen = 1UL;
#line 513
  msg.msg_control = 0;
#line 513
  msg.msg_controllen = 0UL;
#line 513
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 520
  tmp = current_thread_info();
#line 520
  oldfs = tmp->addr_limit;
#line 521
  tmp___0 = current_thread_info();
#line 521
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 521
  tmp___0->addr_limit = __constr_expr_0;
#line 522
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 523
  tmp___1 = current_thread_info();
#line 523
  tmp___1->addr_limit = oldfs;
#line 525
  return (rv);
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 531
  iov.iov_base = buf;
#line 531
  iov.iov_len = size;
#line 535
  msg.msg_name = 0;
#line 535
  msg.msg_namelen = 0;
#line 535
  msg.msg_iov = (struct iovec *)(& iov);
#line 535
  msg.msg_iovlen = 1UL;
#line 535
  msg.msg_control = 0;
#line 535
  msg.msg_controllen = 0UL;
#line 535
  msg.msg_flags = 16640U;
#line 542
  tmp = current_thread_info();
#line 542
  oldfs = tmp->addr_limit;
#line 543
  tmp___0 = current_thread_info();
#line 543
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 543
  tmp___0->addr_limit = __constr_expr_0;
  ldv_44865: 
#line 546
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 547
  if ((size_t )rv == size) {
#line 548
    goto ldv_44864;
  } else {

  }
#line 555
  if (rv < 0) {
#line 556
    if (rv == -104) {
#line 557
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 558
    if (rv != -512) {
#line 559
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 560
    goto ldv_44864;
  } else
#line 561
  if (rv == 0) {
#line 562
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 563
    goto ldv_44864;
  } else {
#line 569
    goto ldv_44864;
  }
#line 571
  goto ldv_44865;
  ldv_44864: 
#line 573
  tmp___1 = current_thread_info();
#line 573
  tmp___1->addr_limit = oldfs;
#line 575
  if ((size_t )rv != size) {
#line 576
    val.i = 0U;
#line 576
    val.ldv_35070.conn = 4U;
#line 576
    mask.i = 0U;
#line 576
    mask.ldv_35070.conn = 31U;
#line 576
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 578
  return (rv);
}
}
#line 586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 590
  if (snd != 0U) {
#line 591
    (sock->sk)->sk_sndbuf = (int )snd;
#line 592
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 594
  if (rcv != 0U) {
#line 595
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 596
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 598
  return;
}
}
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 606
  disconnect_on_error = 1;
#line 608
  tmp = get_net_conf(mdev);
#line 608
  if (tmp == 0) {
#line 609
    return (0);
  } else {

  }
#line 611
  what = "sock_create_kern";
#line 612
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 614
  if (err < 0) {
#line 615
    sock = 0;
#line 616
    goto out;
  } else {

  }
#line 619
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 619
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 619
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 621
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 631
  __min1 = (mdev->net_conf)->my_addr_len;
#line 631
  __min2 = 28;
#line 631
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 631
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 633
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 634
    src_in6.sin6_port = 0U;
  } else {
#line 636
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 638
  what = "bind before connect";
#line 639
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 642
  if (err < 0) {
#line 643
    goto out;
  } else {

  }
#line 647
  disconnect_on_error = 0;
#line 648
  what = "connect";
#line 649
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 654
  if (err < 0) {
#line 655
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 656
      sock_release(sock);
#line 657
      sock = 0;
    } else {

    }
#line 659
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 666
    disconnect_on_error = 0;
#line 667
    goto ldv_44902;
    default: 
#line 669
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_44902: ;
#line 671
    if (disconnect_on_error != 0) {
#line 672
      val.i = 0U;
#line 672
      val.ldv_35070.conn = 1U;
#line 672
      mask.i = 0U;
#line 672
      mask.ldv_35070.conn = 31U;
#line 672
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 674
  put_net_conf(mdev);
#line 675
  return (sock);
}
}
#line 678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 681
  s_estab = 0;
#line 684
  tmp = get_net_conf(mdev);
#line 684
  if (tmp == 0) {
#line 685
    return (0);
  } else {

  }
#line 687
  what = "sock_create_kern";
#line 688
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 690
  if (err != 0) {
#line 691
    s_listen = 0;
#line 692
    goto out;
  } else {

  }
#line 695
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 696
  tmp___0 = random32();
#line 696
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 698
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 699
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 700
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 701
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 704
  what = "bind before listen";
#line 705
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 708
  if (err < 0) {
#line 709
    goto out;
  } else {

  }
#line 711
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 714
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 715
    sock_release(s_listen);
  } else {

  }
#line 716
  if (err < 0) {
#line 717
    if ((err != -11 && err != -4) && err != -512) {
#line 718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 719
      val.i = 0U;
#line 719
      val.ldv_35070.conn = 1U;
#line 719
      mask.i = 0U;
#line 719
      mask.ldv_35070.conn = 31U;
#line 719
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 722
  put_net_conf(mdev);
#line 724
  return (s_estab);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 730
  h = & mdev->data.sbuf.header;
#line 732
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 732
  return (tmp);
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 737
  h = & mdev->data.sbuf.header;
#line 740
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 742
  if (rr == 8 && h->magic == 1728214147U) {
#line 743
    tmp = __fswab16((int )h->command);
#line 743
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 745
  return (65535);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 758
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 759
    return (0);
  } else {

  }
#line 761
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 763
  if (rr > 0 || rr == -11) {
#line 764
    return (1);
  } else {
#line 766
    sock_release(*sock);
#line 767
    *sock = 0;
#line 768
    return (0);
  }
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  enum drbd_packets tmp___4 ;
  u32 tmp___5 ;
  struct task_struct *tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 785
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 785
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            785);
  } else {

  }
#line 787
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 787
  if (tmp != 0) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "CREATE_BARRIER flag was set in drbd_connect - now cleared!\n");
  } else {

  }
#line 790
  val.i = 0U;
#line 790
  val.ldv_35070.conn = 8U;
#line 790
  mask.i = 0U;
#line 790
  mask.ldv_35070.conn = 31U;
#line 790
  tmp___0 = drbd_request_state(mdev, mask, val);
#line 790
  if (tmp___0 <= 0) {
#line 791
    return (-2);
  } else {

  }
#line 793
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 795
  sock = 0;
#line 796
  msock = 0;
  ldv_44961: 
#line 799
  try = 0;
  ldv_44953: 
#line 801
  s = drbd_try_connect(mdev);
#line 802
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 803
    goto ldv_44952;
  } else {
#line 802
    try = try + 1;
#line 802
    if (try > 2) {
#line 803
      goto ldv_44952;
    } else {

    }
  }
#line 805
  tmp___1 = get_current();
#line 805
  tmp___1->state = 1L;
#line 806
  schedule_timeout(25L);
#line 807
  goto ldv_44953;
  ldv_44952: ;
#line 809
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 810
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 811
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 812
      sock = s;
#line 813
      s = 0;
    } else
#line 814
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 815
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 816
      msock = s;
#line 817
      s = 0;
    } else {
#line 819
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 820
      goto out_release_sockets;
    }
  } else {

  }
#line 824
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 825
    tmp___2 = get_current();
#line 825
    tmp___2->state = 1L;
#line 826
    schedule_timeout(25L);
#line 827
    ok = drbd_socket_okay(mdev, & sock);
#line 828
    tmp___3 = drbd_socket_okay(mdev, & msock);
#line 828
    ok = tmp___3 != 0 && ok != 0;
#line 829
    if (ok != 0) {
#line 830
      goto ldv_44955;
    } else {

    }
  } else {

  }
  retry: 
#line 834
  s = drbd_wait_for_connect(mdev);
#line 835
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 836
    tmp___4 = drbd_recv_fp(mdev, s);
#line 836
    try = (int )tmp___4;
#line 837
    drbd_socket_okay(mdev, & sock);
#line 838
    drbd_socket_okay(mdev, & msock);
#line 839
    switch (try) {
    case 65522: ;
#line 841
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 842
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 843
      sock_release(sock);
    } else {

    }
#line 845
    sock = s;
#line 846
    goto ldv_44958;
    case 65521: ;
#line 848
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 849
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 850
      sock_release(msock);
    } else {

    }
#line 852
    msock = s;
#line 853
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 854
    goto ldv_44958;
    default: 
#line 856
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 857
    sock_release(s);
#line 858
    tmp___5 = random32();
#line 858
    if ((int )tmp___5 & 1) {
#line 859
      goto retry;
    } else {

    }
    }
    ldv_44958: ;
  } else {

  }
#line 863
  if ((int )mdev->state.ldv_35070.conn <= 1) {
#line 864
    goto out_release_sockets;
  } else {

  }
#line 865
  tmp___8 = get_current();
#line 865
  tmp___9 = signal_pending(tmp___8);
#line 865
  if (tmp___9 != 0) {
#line 866
    tmp___6 = get_current();
#line 866
    flush_signals(tmp___6);
#line 867
    __asm__  volatile   ("": : : "memory");
#line 868
    tmp___7 = get_t_state(& mdev->receiver);
#line 868
    if ((unsigned int )tmp___7 == 2U) {
#line 869
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 872
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 873
    ok = drbd_socket_okay(mdev, & sock);
#line 874
    tmp___10 = drbd_socket_okay(mdev, & msock);
#line 874
    ok = tmp___10 != 0 && ok != 0;
#line 875
    if (ok != 0) {
#line 876
      goto ldv_44955;
    } else {

    }
  } else {

  }
#line 878
  goto ldv_44961;
  ldv_44955: 
#line 880
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 881
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 883
  (sock->sk)->sk_allocation = 16U;
#line 884
  (msock->sk)->sk_allocation = 16U;
#line 886
  (sock->sk)->sk_priority = 4U;
#line 887
  (msock->sk)->sk_priority = 6U;
#line 894
  tmp___11 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 894
  (sock->sk)->sk_rcvtimeo = tmp___11;
#line 894
  (sock->sk)->sk_sndtimeo = tmp___11;
#line 897
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 898
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 902
  drbd_tcp_nodelay(sock);
#line 903
  drbd_tcp_nodelay(msock);
#line 905
  mdev->data.socket = sock;
#line 906
  mdev->meta.socket = msock;
#line 907
  mdev->last_received = jiffies;
#line 909
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            909);
  } else {

  }
#line 911
  h = drbd_do_handshake(mdev);
#line 912
  if (h <= 0) {
#line 913
    return (h);
  } else {

  }
#line 915
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 917
    tmp___12 = drbd_do_auth(mdev);
#line 917
    switch (tmp___12) {
    case -1: 
#line 919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 920
    return (-1);
    case 0: 
#line 922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 923
    return (0);
    }
  } else {

  }
#line 927
  val___0.i = 0U;
#line 927
  val___0.ldv_35070.conn = 9U;
#line 927
  mask___0.i = 0U;
#line 927
  mask___0.ldv_35070.conn = 31U;
#line 927
  tmp___13 = drbd_request_state(mdev, mask___0, val___0);
#line 927
  if (tmp___13 <= 0) {
#line 928
    return (0);
  } else {

  }
#line 930
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 931
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 933
  atomic_set(& mdev->packet_seq, 0);
#line 934
  mdev->peer_seq = 0U;
#line 936
  drbd_thread_start(& mdev->asender);
#line 938
  tmp___14 = drbd_send_protocol(mdev);
#line 938
  if (tmp___14 == 0) {
#line 939
    return (-1);
  } else {

  }
#line 940
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 941
  drbd_send_sizes(mdev, 0, 0);
#line 942
  drbd_send_uuids(mdev);
#line 943
  drbd_send_state(mdev);
#line 944
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 945
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 947
  return (1);
  out_release_sockets: ;
#line 950
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 951
    sock_release(sock);
  } else {

  }
#line 952
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 953
    sock_release(msock);
  } else {

  }
#line 954
  return (-1);
}
}
#line 957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  long tmp___3 ;

  {
#line 961
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 963
  tmp = __builtin_expect(r != 8, 0L);
#line 963
  if (tmp != 0L) {
#line 964
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 965
    return (0);
  } else {

  }
#line 967
  tmp___0 = __fswab16((int )h->command);
#line 967
  h->command = tmp___0;
#line 968
  tmp___1 = __fswab16((int )h->length);
#line 968
  h->length = tmp___1;
#line 969
  tmp___3 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 969
  if (tmp___3 != 0L) {
#line 970
    tmp___2 = __fswab32(h->magic);
#line 970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%lx c: %d l: %d\n",
            (long )tmp___2, (int )h->command, (int )h->length);
#line 973
    return (0);
  } else {

  }
#line 975
  mdev->last_received = jiffies;
#line 977
  return (1);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  int tmp ;
  enum finish_epoch tmp___0 ;

  {
#line 984
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 984
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 984
    if (tmp != 0) {
#line 985
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 987
      if (rv != 0) {
#line 988
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 992
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 994
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 997
  tmp___0 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 997
  return (tmp___0);
}
}
#line 1000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1002
  fw = (struct flush_work *)w;
#line 1003
  epoch = fw->epoch;
#line 1005
  kfree((void const   *)w);
#line 1007
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1007
  if (tmp == 0) {
#line 1008
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1010
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_35070.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1013
  return (1);
}
}
#line 1022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___8 ;

  {
#line 1028
  schedule_flush = 0;
#line 1029
  rv = FE_STILL_LIVE;
#line 1031
  spin_lock(& mdev->epoch_lock);
  ldv_45007: 
#line 1033
  next_epoch = 0;
#line 1034
  finish = 0;
#line 1036
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1038
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1040
  atomic_dec(& epoch->active);
#line 1041
  goto ldv_44996;
  case 1U: 
#line 1043
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1047
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1047
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1050
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1051
  goto ldv_44996;
  case 2U: 
#line 1053
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1054
  goto ldv_44996;
  case 3U: ;
#line 1057
  goto ldv_44996;
  }
  ldv_44996: ;
#line 1060
  if (epoch_size != 0) {
#line 1060
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1060
    if (tmp___3 == 0) {
#line 1060
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1060
      if (tmp___4 != 0) {
#line 1060
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1060
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1060
          if (tmp___5 == 0) {
#line 1066
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1066
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1070
              finish = 1;
#line 1071
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1066
            if (epoch_size == 1) {
#line 1066
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1066
              if (tmp___2 != 0) {
#line 1070
                finish = 1;
#line 1071
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1066
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1066
            if (((unsigned int )ev & 32U) != 0U) {
#line 1070
              finish = 1;
#line 1071
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1072
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1072
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1074
                atomic_inc(& epoch->active);
#line 1075
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1078
  if (finish != 0) {
#line 1079
    if (((unsigned int )ev & 32U) == 0U) {
#line 1080
      spin_unlock(& mdev->epoch_lock);
#line 1081
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1082
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1084
    atomic_dec(& mdev->unacked_cnt);
#line 1084
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1084
    if (tmp___7 < 0) {
#line 1084
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1084
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "drbd_may_finish_epoch", 1084, tmp___6);
    } else {

    }
#line 1086
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1087
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1087
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1088
      list_del(& epoch->list);
#line 1089
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1090
      mdev->epochs = mdev->epochs - 1U;
#line 1091
      kfree((void const   *)epoch);
#line 1093
      if ((unsigned int )rv == 0U) {
#line 1094
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1096
      epoch->flags = 0UL;
#line 1097
      atomic_set(& epoch->epoch_size, 0);
#line 1099
      if ((unsigned int )rv == 0U) {
#line 1100
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1104
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1105
    goto ldv_45006;
  } else {

  }
#line 1107
  epoch = next_epoch;
#line 1108
  goto ldv_45007;
  ldv_45006: 
#line 1110
  spin_unlock(& mdev->epoch_lock);
#line 1112
  if (schedule_flush != 0) {
#line 1114
    tmp___8 = kmalloc___1(32UL, 32U);
#line 1114
    fw = (struct flush_work *)tmp___8;
#line 1115
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1116
      fw->w.cb = & w_flush;
#line 1117
      fw->epoch = epoch;
#line 1118
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1120
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc a flush_work obj\n");
#line 1121
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1123
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1124
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1128
  return (rv);
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1139
  write_ordering_str[0] = (char *)"none";
#line 1139
  write_ordering_str[1] = (char *)"drain";
#line 1139
  write_ordering_str[2] = (char *)"flush";
#line 1139
  write_ordering_str[3] = (char *)"barrier";
#line 1146
  pwo = mdev->write_ordering;
#line 1147
  _min1 = pwo;
#line 1147
  _min2 = wo;
#line 1147
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1148
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1149
    wo = WO_bdev_flush;
  } else {

  }
#line 1150
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1151
    wo = WO_drain_io;
  } else {

  }
#line 1152
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1153
    wo = WO_none;
  } else {

  }
#line 1154
  mdev->write_ordering = wo;
#line 1155
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1156
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1157
  return;
}
}
#line 1166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1169
  bios = 0;
#line 1171
  page = e->pages;
#line 1172
  sector = e->sector;
#line 1173
  ds = e->size;
#line 1174
  n_bios = 0U;
#line 1175
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1182
  bio = bio_alloc(16U, (int )nr_pages);
#line 1183
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1185
    goto fail;
  } else {

  }
#line 1188
  bio->bi_sector = sector;
#line 1189
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1192
  bio->bi_rw = (unsigned long )rw;
#line 1193
  bio->bi_private = (void *)e;
#line 1194
  bio->bi_end_io = & drbd_endio_sec;
#line 1196
  bio->bi_next = bios;
#line 1197
  bios = bio;
#line 1198
  n_bios = n_bios + 1U;
#line 1200
  goto ldv_45040;
  ldv_45039: 
#line 1201
  __min1 = ds;
#line 1201
  __min2 = 4096U;
#line 1201
  len = __min1 < __min2 ? __min1 : __min2;
#line 1202
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1202
  if (tmp___0 == 0) {
#line 1204
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1204
    if (tmp != 0L) {
#line 1204
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1204), "i" (12UL));
      ldv_45038: ;
#line 1204
      goto ldv_45038;
    } else {

    }
#line 1205
    goto next_bio;
  } else {

  }
#line 1207
  ds = ds - len;
#line 1208
  sector = (sector_t )(len >> 9) + sector;
#line 1209
  nr_pages = nr_pages - 1U;
#line 1200
  page = page_chain_next(page);
  ldv_45040: ;
#line 1200
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1200
    tmp___1 = page_chain_next(page);
#line 1200
    __builtin_prefetch((void const   *)tmp___1);
#line 1200
    if (1 != 0) {
#line 1201
      goto ldv_45039;
    } else {
#line 1203
      goto ldv_45041;
    }
  } else {

  }
  ldv_45041: ;
#line 1211
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1211
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1211);
  } else {

  }
#line 1212
  if (ds != 0U) {
#line 1212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1212);
  } else {

  }
#line 1214
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_45042: 
#line 1216
  bio = bios;
#line 1217
  bios = bios->bi_next;
#line 1218
  bio->bi_next = 0;
#line 1221
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1222
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1224
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1228
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1229
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffefUL;
  } else {

  }
#line 1230
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1231
    goto ldv_45042;
  } else {

  }
#line 1231
  maybe_kick_lo(mdev);
#line 1232
  return (0);
  fail: ;
#line 1235
  goto ldv_45045;
  ldv_45044: 
#line 1236
  bio = bios;
#line 1237
  bios = bios->bi_next;
#line 1238
  bio_put(bio);
  ldv_45045: ;
#line 1235
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1236
    goto ldv_45044;
  } else {

  }

#line 1240
  return (-12);
}
}
#line 1249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_epoch *tmp ;
  int tmp___0 ;

  {
#line 1251
  e = (struct drbd_epoch_entry *)w;
#line 1262
  tmp = previous_epoch(mdev, e->epoch);
#line 1262
  if ((unsigned long )tmp != (unsigned long )((struct drbd_epoch *)0)) {
#line 1263
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Write ordering was not enforced (one time event)\n");
  } else {

  }
#line 1268
  e->w.cb = & e_end_block;
#line 1269
  tmp___0 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1269
  if (tmp___0 != 0) {
#line 1273
    e->w.cb = & w_e_reissue;
#line 1274
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1276
  return (1);
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  int _b___0 ;
  enum finish_epoch tmp ;
  enum finish_epoch tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  enum finish_epoch tmp___3 ;
  int tmp___4 ;

  {
#line 1282
  p = (struct p_barrier *)h;
#line 1285
  _b = (unsigned int )h->length != 8U;
#line 1285
  if (_b != 0) {
#line 1285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1285);
  } else {

  }
#line 1285
  if (_b != 0) {
#line 1285
    return (0);
  } else {

  }
#line 1287
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1288
  _b___0 = (int )h->length != rv;
#line 1288
  if (_b___0 != 0) {
#line 1288
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"rv != h->length", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1288);
  } else {

  }
#line 1288
  if (_b___0 != 0) {
#line 1288
    return (0);
  } else {

  }
#line 1290
  inc_unacked(mdev);
#line 1292
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1293
    drbd_kick_lo(mdev);
  } else {

  }
#line 1295
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1296
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1296
  rv = (int )tmp;
#line 1303
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1306
  if (rv == 2) {
#line 1307
    return (1);
  } else {

  }
#line 1308
  goto ldv_45068;
  case 2U: ;
  case 1U: ;
#line 1312
  if (rv == 0) {
#line 1313
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1314
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1315
    tmp___0 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1315
    rv = (int )tmp___0;
  } else {

  }
#line 1317
  if (rv == 2) {
#line 1318
    return (1);
  } else {

  }
#line 1323
  goto ldv_45068;
  }
  ldv_45068: 
#line 1328
  tmp___1 = kmalloc___1(40UL, 16U);
#line 1328
  epoch = (struct drbd_epoch *)tmp___1;
#line 1329
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1330
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
#line 1331
    tmp___2 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1331
    issue_flush = tmp___2 == 0;
#line 1332
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1333
    if (issue_flush != 0) {
#line 1334
      tmp___3 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1334
      rv = (int )tmp___3;
#line 1335
      if (rv == 2) {
#line 1336
        return (1);
      } else {

      }
    } else {

    }
#line 1339
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1341
    return (1);
  } else {

  }
#line 1344
  epoch->flags = 0UL;
#line 1345
  atomic_set(& epoch->epoch_size, 0);
#line 1346
  atomic_set(& epoch->active, 0);
#line 1348
  spin_lock(& mdev->epoch_lock);
#line 1349
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1349
  if (tmp___4 != 0) {
#line 1350
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1351
    mdev->current_epoch = epoch;
#line 1352
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1355
    kfree((void const   *)epoch);
  }
#line 1357
  spin_unlock(& mdev->epoch_lock);
#line 1359
  return (1);
}
}
#line 1365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1367
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1367
  capacity = tmp;
#line 1371
  dig_in = mdev->int_dig_in;
#line 1372
  dig_vv = mdev->int_dig_vv;
#line 1375
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1375
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1375
    dgs = (int )tmp___0;
  } else {
#line 1375
    dgs = 0;
  }
#line 1378
  if (dgs != 0) {
#line 1379
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1380
    if (rr != dgs) {
#line 1381
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1383
      return (0);
    } else {

    }
  } else {

  }
#line 1387
  data_size = data_size - dgs;
#line 1389
  _b = (data_size & 511) != 0;
#line 1389
  if (_b != 0) {
#line 1389
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1389);
  } else {

  }
#line 1389
  if (_b != 0) {
#line 1389
    return (0);
  } else {

  }
#line 1390
  _b___0 = (unsigned int )data_size > 32768U;
#line 1390
  if (_b___0 != 0) {
#line 1390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1390);
  } else {

  }
#line 1390
  if (_b___0 != 0) {
#line 1390
    return (0);
  } else {

  }
#line 1394
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1395
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1398
    return (0);
  } else {

  }
#line 1404
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1405
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1406
    return (0);
  } else {

  }
#line 1408
  ds = data_size;
#line 1409
  page = e->pages;
#line 1410
  goto ldv_45097;
  ldv_45096: 
#line 1411
  __min1 = ds;
#line 1411
  __min2 = 4096;
#line 1411
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1412
  tmp___1 = kmap(page);
#line 1412
  data = (unsigned long *)tmp___1;
#line 1413
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1414
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1414
  if (tmp___2 != 0) {
#line 1415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1416
    *data = ~ *data;
  } else {

  }
#line 1418
  kunmap(page);
#line 1419
  if ((unsigned int )rr != len) {
#line 1420
    drbd_free_ee(mdev, e);
#line 1421
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1423
    return (0);
  } else {

  }
#line 1425
  ds = ds - rr;
#line 1410
  page = page_chain_next(page);
  ldv_45097: ;
#line 1410
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1410
    tmp___3 = page_chain_next(page);
#line 1410
    __builtin_prefetch((void const   *)tmp___3);
#line 1410
    if (1 != 0) {
#line 1411
      goto ldv_45096;
    } else {
#line 1413
      goto ldv_45098;
    }
  } else {

  }
  ldv_45098: ;
#line 1428
  if (dgs != 0) {
#line 1429
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1430
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1430
    if (tmp___4 != 0) {
#line 1431
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1432
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1434
      drbd_free_ee(mdev, e);
#line 1435
      return (0);
    } else {

    }
  } else {

  }
#line 1438
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1439
  return (e);
}
}
#line 1445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1448
  rv = 1;
#line 1451
  if (data_size == 0) {
#line 1452
    return (1);
  } else {

  }
#line 1454
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1456
  data = kmap(page);
#line 1457
  goto ldv_45118;
  ldv_45117: 
#line 1458
  __min1 = data_size;
#line 1458
  __min2 = 4096;
#line 1458
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1459
  __min1___1 = data_size;
#line 1459
  __min2___1 = 4096;
#line 1459
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1460
    rv = 0;
#line 1462
    __min1___0 = data_size;
#line 1462
    __min2___0 = 4096;
#line 1462
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1463
    goto ldv_45116;
  } else {

  }
#line 1465
  data_size = data_size - rr;
  ldv_45118: ;
#line 1457
  if (data_size != 0) {
#line 1458
    goto ldv_45117;
  } else {

  }
  ldv_45116: 
#line 1467
  kunmap(page);
#line 1468
  drbd_pp_free(mdev, page);
#line 1469
  return (rv);
}
}
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1478
  dig_in = mdev->int_dig_in;
#line 1479
  dig_vv = mdev->int_dig_vv;
#line 1481
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1481
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1481
    dgs = (int )tmp;
  } else {
#line 1481
    dgs = 0;
  }
#line 1484
  if (dgs != 0) {
#line 1485
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1486
    if (rr != dgs) {
#line 1487
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1489
      return (0);
    } else {

    }
  } else {

  }
#line 1493
  data_size = data_size - dgs;
#line 1497
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1499
  bio = req->master_bio;
#line 1500
  if (bio->bi_sector != sector) {
#line 1500
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1500);
  } else {

  }
#line 1502
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1502
  i = (int )bio->bi_idx;
#line 1502
  goto ldv_45137;
  ldv_45136: 
#line 1503
  __min1 = data_size;
#line 1503
  __min2 = (int )bvec->bv_len;
#line 1503
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1504
  tmp___0 = kmap(bvec->bv_page);
#line 1504
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1507
  kunmap(bvec->bv_page);
#line 1508
  if (rr != expect) {
#line 1509
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1512
    return (0);
  } else {

  }
#line 1514
  data_size = data_size - rr;
#line 1502
  bvec = bvec + 1;
#line 1502
  i = i + 1;
  ldv_45137: ;
#line 1502
  if ((int )bio->bi_vcnt > i) {
#line 1503
    goto ldv_45136;
  } else {

  }

#line 1517
  if (dgs != 0) {
#line 1518
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1519
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1519
    if (tmp___1 != 0) {
#line 1520
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1521
      return (0);
    } else {

    }
  } else {

  }
#line 1525
  if (data_size != 0) {
#line 1525
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1525);
  } else {

  }
#line 1526
  return (1);
}
}
#line 1531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1533
  e = (struct drbd_epoch_entry *)w;
#line 1534
  sector = e->sector;
#line 1537
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1537
  if (tmp == 0) {
#line 1537
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1537);
  } else {

  }
#line 1539
  tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1539
  if (tmp___0 != 0L) {
#line 1540
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1540U);
#line 1541
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1544
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1546
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1548
  atomic_dec(& mdev->unacked_cnt);
#line 1548
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1548
  if (tmp___2 < 0) {
#line 1548
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1548, tmp___1);
  } else {

  }
#line 1550
  return (ok);
}
}
#line 1553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1557
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1558
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1559
    goto fail;
  } else {

  }
#line 1561
  atomic_dec(& mdev->rs_pending_cnt);
#line 1561
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1561
  if (tmp___0 < 0) {
#line 1561
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1561
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1561, tmp);
  } else {

  }
#line 1563
  inc_unacked(mdev);
#line 1567
  e->w.cb = & e_end_resync_block;
#line 1569
  spin_lock_irq(& mdev->req_lock);
#line 1570
  list_add(& e->w.list, & mdev->sync_ee);
#line 1571
  spin_unlock_irq(& mdev->req_lock);
#line 1573
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1573
  if (tmp___1 == 0) {
#line 1574
    return (1);
  } else {

  }
#line 1576
  drbd_free_ee(mdev, e);
  fail: 
#line 1578
  put_ldev(mdev);
#line 1579
  return (0);
}
}
#line 1582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;

  {
#line 1588
  p = (struct p_data *)h;
#line 1590
  header_size = 24U;
#line 1591
  data_size = (unsigned int )h->length - header_size;
#line 1593
  _b = data_size == 0U;
#line 1593
  if (_b != 0) {
#line 1593
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_DataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1593);
  } else {

  }
#line 1593
  if (_b != 0) {
#line 1593
    return (0);
  } else {

  }
#line 1595
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1595
  if ((unsigned int )tmp != header_size) {
#line 1596
    return (0);
  } else {

  }
#line 1598
  tmp___0 = __fswab64(p->sector);
#line 1598
  sector = (sector_t )tmp___0;
#line 1600
  spin_lock_irq(& mdev->req_lock);
#line 1601
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1602
  spin_unlock_irq(& mdev->req_lock);
#line 1603
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1603
  if (tmp___1 != 0L) {
#line 1604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1605
    return (0);
  } else {

  }
#line 1611
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1613
  if (ok != 0) {
#line 1614
    req_mod(req, data_received);
  } else {

  }
#line 1619
  return (ok);
}
}
#line 1622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1627
  p = (struct p_data *)h;
#line 1629
  header_size = 24U;
#line 1630
  data_size = (unsigned int )h->length - header_size;
#line 1632
  _b = data_size == 0U;
#line 1632
  if (_b != 0) {
#line 1632
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_RSDataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1632);
  } else {

  }
#line 1632
  if (_b != 0) {
#line 1632
    return (0);
  } else {

  }
#line 1634
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1634
  if ((unsigned int )tmp != header_size) {
#line 1635
    return (0);
  } else {

  }
#line 1637
  tmp___0 = __fswab64(p->sector);
#line 1637
  sector = (sector_t )tmp___0;
#line 1638
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1638);
  } else {

  }
#line 1640
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1640
  if (tmp___2 != 0) {
#line 1644
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1646
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1646
    if (tmp___1 != 0) {
#line 1647
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1649
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1651
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1654
  return (ok);
}
}
#line 1660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1662
  e = (struct drbd_epoch_entry *)w;
#line 1663
  sector = e->sector;
#line 1665
  ok = 1;
#line 1667
  if ((e->flags & 4UL) != 0UL) {
#line 1668
    epoch = previous_epoch(mdev, e->epoch);
#line 1669
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1670
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1673
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1674
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1674
    if (tmp___0 != 0L) {
#line 1675
      pcmd = ((int )mdev->state.ldv_35070.conn > 15 && (int )mdev->state.ldv_35070.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1679
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1679
      ok = tmp & ok;
#line 1680
      if (pcmd == 23) {
#line 1681
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1681U);
      } else {

      }
    } else {
#line 1683
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1687
    atomic_dec(& mdev->unacked_cnt);
#line 1687
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1687
    if (tmp___2 < 0) {
#line 1687
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1687
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1687, tmp___1);
    } else {

    }
  } else {

  }
#line 1691
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1692
    spin_lock_irq(& mdev->req_lock);
#line 1693
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1693
    if (tmp___3 != 0) {
#line 1693
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1693);
    } else {

    }
#line 1694
    hlist_del_init(& e->colision);
#line 1695
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1697
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1697
    if (tmp___4 == 0) {
#line 1697
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1697);
    } else {

    }
  }
#line 1700
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1702
  return (ok);
}
}
#line 1705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1707
  e = (struct drbd_epoch_entry *)w;
#line 1708
  ok = 1;
#line 1710
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1710
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1710);
  } else {

  }
#line 1711
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1713
  spin_lock_irq(& mdev->req_lock);
#line 1714
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1714
  if (tmp != 0) {
#line 1714
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1714);
  } else {

  }
#line 1715
  hlist_del_init(& e->colision);
#line 1716
  spin_unlock_irq(& mdev->req_lock);
#line 1718
  atomic_dec(& mdev->unacked_cnt);
#line 1718
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1718
  if (tmp___1 < 0) {
#line 1718
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1718, tmp___0);
  } else {

  }
#line 1720
  return (ok);
}
}
#line 1744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1746
  tmp = get_current();
#line 1746
  wait.flags = 0U;
#line 1746
  wait.private = (void *)tmp;
#line 1746
  wait.func = & autoremove_wake_function;
#line 1746
  wait.task_list.next = & wait.task_list;
#line 1746
  wait.task_list.prev = & wait.task_list;
#line 1749
  ret = 0;
#line 1750
  spin_lock(& mdev->peer_seq_lock);
  ldv_45221: 
#line 1752
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1753
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1753
  if (tmp___0 <= 0) {
#line 1754
    goto ldv_45220;
  } else {

  }
#line 1755
  tmp___1 = get_current();
#line 1755
  tmp___2 = signal_pending(tmp___1);
#line 1755
  if (tmp___2 != 0) {
#line 1756
    ret = -512;
#line 1757
    goto ldv_45220;
  } else {

  }
#line 1759
  p_seq = mdev->peer_seq;
#line 1760
  spin_unlock(& mdev->peer_seq_lock);
#line 1761
  timeout = schedule_timeout(7500L);
#line 1762
  spin_lock(& mdev->peer_seq_lock);
#line 1763
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1764
    ret = -110;
#line 1765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1766
    goto ldv_45220;
  } else {

  }
#line 1768
  goto ldv_45221;
  ldv_45220: 
#line 1769
  finish_wait(& mdev->seq_wait, & wait);
#line 1770
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1771
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1772
  spin_unlock(& mdev->peer_seq_lock);
#line 1773
  return (ret);
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u32 tmp___8 ;
  int size ;
  int discard ;
  int tmp___9 ;
  wait_queue_t wait ;
  struct task_struct *tmp___10 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___11 ;
  long tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  struct hlist_head *tmp___15 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  struct hlist_node  const  *__mptr___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 1781
  p = (struct p_data *)h;
#line 1783
  rw = 1;
#line 1786
  header_size = 24;
#line 1787
  data_size = (int )h->length - header_size;
#line 1789
  _b = data_size == 0;
#line 1789
  if (_b != 0) {
#line 1789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Data", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1789);
  } else {

  }
#line 1789
  if (_b != 0) {
#line 1789
    return (0);
  } else {

  }
#line 1791
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1791
  if (tmp != header_size) {
#line 1792
    return (0);
  } else {

  }
#line 1794
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1794
  if (tmp___3 == 0) {
#line 1795
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1795
    if (tmp___0 != 0) {
#line 1796
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1798
    spin_lock(& mdev->peer_seq_lock);
#line 1799
    tmp___1 = __fswab32(p->seq_num);
#line 1799
    if (mdev->peer_seq + 1U == tmp___1) {
#line 1800
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1801
    spin_unlock(& mdev->peer_seq_lock);
#line 1803
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1804
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1805
    tmp___2 = drbd_drain_block(mdev, data_size);
#line 1805
    return (tmp___2);
  } else {

  }
#line 1813
  tmp___4 = __fswab64(p->sector);
#line 1813
  sector = (sector_t )tmp___4;
#line 1814
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1815
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1816
    put_ldev(mdev);
#line 1817
    return (0);
  } else {

  }
#line 1820
  e->w.cb = & e_end_block;
#line 1822
  spin_lock(& mdev->epoch_lock);
#line 1823
  e->epoch = mdev->current_epoch;
#line 1824
  atomic_inc(& (e->epoch)->epoch_size);
#line 1825
  atomic_inc(& (e->epoch)->active);
#line 1827
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1827
    tmp___7 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1827
    if (tmp___7 == 1) {
#line 1832
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1832
      epoch = (struct drbd_epoch *)__mptr;
#line 1833
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1834
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1835
        rw = rw | 16;
#line 1836
        e->flags = e->flags | 4UL;
      } else {
#line 1838
        tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1838
        if (tmp___5 > 1) {
#line 1840
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1841
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1842
          rw = rw | 16;
#line 1843
          e->flags = e->flags | 4UL;
        } else {
#line 1838
          tmp___6 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1838
          if (tmp___6 == 0) {
#line 1840
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1841
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1842
            rw = rw | 16;
#line 1843
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1847
  spin_unlock(& mdev->epoch_lock);
#line 1849
  tmp___8 = __fswab32(p->dp_flags);
#line 1849
  dp_flags = tmp___8;
#line 1850
  if ((int )dp_flags & 1) {
#line 1851
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have submitted barrier request\n");
  } else {

  }
#line 1854
  if ((dp_flags & 2U) != 0U) {
#line 1855
    rw = rw | 544;
  } else {

  }
#line 1856
  if ((dp_flags & 4U) != 0U) {
#line 1857
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1860
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1861
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1865
    size = (int const   )e->size;
#line 1866
    tmp___9 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1866
    discard = tmp___9;
#line 1867
    tmp___10 = get_current();
#line 1867
    wait.flags = 0U;
#line 1867
    wait.private = (void *)tmp___10;
#line 1867
    wait.func = & autoremove_wake_function;
#line 1867
    wait.task_list.next = & wait.task_list;
#line 1867
    wait.task_list.prev = & wait.task_list;
#line 1873
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1873
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1873);
    } else {

    }
#line 1874
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1874
    if (tmp___11 != 0L) {
#line 1874
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1874), "i" (12UL));
      ldv_45246: ;
#line 1874
      goto ldv_45246;
    } else {

    }
#line 1875
    tmp___12 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1875
    if (tmp___12 != 0L) {
#line 1875
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1875), "i" (12UL));
      ldv_45247: ;
#line 1875
      goto ldv_45247;
    } else {

    }
#line 1911
    tmp___13 = __fswab32(p->seq_num);
#line 1911
    tmp___14 = drbd_wait_peer_seq(mdev, tmp___13);
#line 1911
    if (tmp___14 != 0) {
#line 1912
      goto out_interrupted;
    } else {

    }
#line 1914
    spin_lock_irq(& mdev->req_lock);
#line 1916
    tmp___15 = ee_hash_slot(mdev, sector);
#line 1916
    hlist_add_head(& e->colision, tmp___15);
#line 1919
    slot = tl_hash_slot(mdev, sector);
#line 1920
    first = 1;
    ldv_45259: 
#line 1922
    have_unacked = 0;
#line 1923
    have_conflict = 0;
#line 1924
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1926
    n = slot->first;
#line 1926
    goto ldv_45256;
    ldv_45255: 
#line 1927
    tmp___18 = overlaps(i->sector, (int )i->size, sector, size);
#line 1927
    if (tmp___18 != 0) {
#line 1930
      if (first != 0) {
#line 1931
        tmp___16 = get_current();
#line 1931
        tmp___17 = get_current();
#line 1931
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___17->comm), tmp___16->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1936
      if ((i->rq_state & 8UL) != 0UL) {
#line 1937
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1938
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1926
    n = n->next;
    ldv_45256: ;
#line 1926
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1926
      __builtin_prefetch((void const   *)n->next);
#line 1926
      if (1 != 0) {
#line 1926
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1926
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1926
        if (1 != 0) {
#line 1927
          goto ldv_45255;
        } else {
#line 1929
          goto ldv_45257;
        }
      } else {
#line 1929
        goto ldv_45257;
      }
    } else {

    }
    ldv_45257: ;
#line 1942
    if (have_conflict == 0) {
#line 1943
      goto ldv_45258;
    } else {

    }
#line 1946
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1947
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1949
      inc_unacked(mdev);
#line 1950
      e->w.cb = & e_send_discard_ack;
#line 1951
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1953
      spin_unlock_irq(& mdev->req_lock);
#line 1958
      put_ldev(mdev);
#line 1959
      wake_asender(mdev);
#line 1960
      finish_wait(& mdev->misc_wait, & wait);
#line 1961
      return (1);
    } else {

    }
#line 1964
    tmp___19 = get_current();
#line 1964
    tmp___20 = signal_pending(tmp___19);
#line 1964
    if (tmp___20 != 0) {
#line 1965
      hlist_del_init(& e->colision);
#line 1967
      spin_unlock_irq(& mdev->req_lock);
#line 1969
      finish_wait(& mdev->misc_wait, & wait);
#line 1970
      goto out_interrupted;
    } else {

    }
#line 1973
    spin_unlock_irq(& mdev->req_lock);
#line 1974
    if (first != 0) {
#line 1975
      first = 0;
#line 1976
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1978
    if (discard != 0) {
#line 1981
      if (have_unacked != 0) {
#line 1981
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1981);
      } else {

      }
    } else {

    }
#line 1983
    schedule();
#line 1984
    spin_lock_irq(& mdev->req_lock);
#line 1985
    goto ldv_45259;
    ldv_45258: 
#line 1986
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1989
  list_add(& e->w.list, & mdev->active_ee);
#line 1990
  spin_unlock_irq(& mdev->req_lock);
#line 1992
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1994
  inc_unacked(mdev);
#line 1997
  goto ldv_45261;
  case 2: 
#line 2001
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2002
  goto ldv_45261;
  case 1: ;
#line 2005
  goto ldv_45261;
  }
  ldv_45261: ;
#line 2008
  if (*((unsigned int *)mdev + 455UL) == 0U) {
#line 2010
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2010U);
#line 2011
    e->flags = e->flags | 1UL;
#line 2012
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2015
  tmp___21 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2015
  if (tmp___21 == 0) {
#line 2016
    return (1);
  } else {

  }
  out_interrupted: 
#line 2022
  put_ldev(mdev);
#line 2023
  drbd_free_ee(mdev, e);
#line 2024
  return (0);
}
}
#line 2027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;

  {
#line 2030
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2030
  capacity = tmp;
#line 2032
  di = 0;
#line 2035
  p = (struct p_block_req *)h;
#line 2037
  brps = 24;
#line 2039
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 2039
  if (tmp___0 != brps) {
#line 2040
    return (0);
  } else {

  }
#line 2042
  tmp___1 = __fswab64(p->sector);
#line 2042
  sector = (sector_t )tmp___1;
#line 2043
  tmp___2 = __fswab32(p->blksize);
#line 2043
  size = (int )tmp___2;
#line 2045
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 2046
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2046, (unsigned long long )sector, size);
#line 2048
    return (0);
  } else {

  }
#line 2050
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2051, (unsigned long long )sector, size);
#line 2053
    return (0);
  } else {

  }
#line 2056
  tmp___5 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2056
  if (tmp___5 == 0) {
#line 2057
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2057
    if (tmp___3 != 0) {
#line 2058
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
    } else {

    }
#line 2060
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 2062
    tmp___4 = drbd_drain_block(mdev, (int )h->length - brps);
#line 2062
    return (tmp___4);
  } else {

  }
#line 2068
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2069
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2070
    put_ldev(mdev);
#line 2071
    return (0);
  } else {

  }
#line 2074
  switch ((int )h->command) {
  case 8: 
#line 2076
  e->w.cb = & w_e_end_data_req;
#line 2077
  fault_type = 5U;
#line 2078
  goto ldv_45279;
  case 9: 
#line 2080
  e->w.cb = & w_e_end_rsdata_req;
#line 2081
  fault_type = 3U;
#line 2087
  tmp___8 = drbd_rs_begin_io(mdev, sector);
#line 2087
  if (tmp___8 == 0) {
#line 2090
    tmp___6 = get_current();
#line 2090
    tmp___7 = signal_pending(tmp___6);
#line 2090
    if (tmp___7 == 0) {
#line 2090
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2090);
    } else {

    }
#line 2091
    goto out_free_e;
  } else {

  }
#line 2093
  goto ldv_45279;
  case 31: ;
  case 33: 
#line 2097
  fault_type = 3U;
#line 2098
  digest_size = (int )h->length - brps;
#line 2099
  tmp___9 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2099
  di = (struct digest_info *)tmp___9;
#line 2100
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2101
    goto out_free_e;
  } else {

  }
#line 2103
  di->digest_size = digest_size;
#line 2104
  di->digest = (void *)di + 16U;
#line 2106
  tmp___10 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2106
  if (tmp___10 != digest_size) {
#line 2107
    goto out_free_e;
  } else {

  }
#line 2109
  e->block_id = (unsigned long long )di;
#line 2110
  if ((unsigned int )h->command == 33U) {
#line 2111
    if (mdev->agreed_pro_version <= 88) {
#line 2111
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2111);
    } else {

    }
#line 2112
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2113
  if ((unsigned int )h->command == 31U) {
#line 2114
    e->w.cb = & w_e_end_ov_reply;
#line 2115
    atomic_dec(& mdev->rs_pending_cnt);
#line 2115
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2115
    if (tmp___12 < 0) {
#line 2115
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2115
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2115, tmp___11);
    } else {

    }
#line 2116
    goto ldv_45279;
  } else {

  }
#line 2119
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2119
  if (tmp___15 == 0) {
#line 2121
    tmp___13 = get_current();
#line 2121
    tmp___14 = signal_pending(tmp___13);
#line 2121
    if (tmp___14 == 0) {
#line 2121
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2121);
    } else {

    }
#line 2122
    goto out_free_e;
  } else {

  }
#line 2124
  goto ldv_45279;
  case 30: ;
#line 2127
  if ((int )mdev->state.ldv_35070.conn > 9 && (unsigned int )*((unsigned short *)mdev + 910UL) != 304U) {
#line 2129
    tmp___16 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 2129
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: got P_OV_REQUEST while being %s\n",
             tmp___16);
  } else {

  }
#line 2131
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2133
    mdev->ov_start_sector = sector;
#line 2134
    mdev->ov_position = sector;
#line 2135
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2136
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2139
  e->w.cb = & w_e_end_ov_req;
#line 2140
  fault_type = 3U;
#line 2146
  tmp___19 = drbd_rs_begin_io(mdev, sector);
#line 2146
  if (tmp___19 == 0) {
#line 2149
    tmp___17 = get_current();
#line 2149
    tmp___18 = signal_pending(tmp___17);
#line 2149
    if (tmp___18 == 0) {
#line 2149
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2149);
    } else {

    }
#line 2150
    goto out_free_e;
  } else {

  }
#line 2152
  goto ldv_45279;
  default: 
#line 2156
  tmp___20 = cmdname((enum drbd_packets )h->command);
#line 2156
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___20);
#line 2158
  fault_type = 10U;
  }
  ldv_45279: 
#line 2161
  spin_lock_irq(& mdev->req_lock);
#line 2162
  list_add(& e->w.list, & mdev->read_ee);
#line 2163
  spin_unlock_irq(& mdev->req_lock);
#line 2165
  inc_unacked(mdev);
#line 2167
  tmp___21 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2167
  if (tmp___21 == 0) {
#line 2168
    return (1);
  } else {

  }
  out_free_e: 
#line 2171
  kfree((void const   *)di);
#line 2172
  put_ldev(mdev);
#line 2173
  drbd_free_ee(mdev, e);
#line 2174
  return (0);
}
}
#line 2177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2179
  rv = -100;
#line 2182
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2183
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2185
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2186
  ch_self = mdev->comm_bm_set;
#line 2188
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2192
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2193
  goto ldv_45300;
  case 0: ;
#line 2195
  goto ldv_45300;
  case 1: ;
#line 2197
  if (self == 0 && peer == 1) {
#line 2198
    rv = -1;
#line 2199
    goto ldv_45300;
  } else {

  }
#line 2201
  if (self == 1 && peer == 0) {
#line 2202
    rv = 1;
#line 2203
    goto ldv_45300;
  } else {

  }
  case 2: ;
#line 2207
  if (self == 0 && peer == 1) {
#line 2208
    rv = 1;
#line 2209
    goto ldv_45300;
  } else {

  }
#line 2211
  if (self == 1 && peer == 0) {
#line 2212
    rv = -1;
#line 2213
    goto ldv_45300;
  } else {

  }
#line 2216
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2219
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2220
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2220
    rv = tmp != 0 ? -1 : 1;
#line 2222
    goto ldv_45300;
  } else {
#line 2224
    if (ch_peer == 0UL) {
#line 2224
      rv = 1;
#line 2224
      goto ldv_45300;
    } else {

    }
#line 2225
    if (ch_self == 0UL) {
#line 2225
      rv = -1;
#line 2225
      goto ldv_45300;
    } else {

    }
  }
#line 2227
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2228
    goto ldv_45300;
  } else {

  }
  case 4: ;
#line 2230
  if (ch_self < ch_peer) {
#line 2231
    rv = -1;
  } else
#line 2232
  if (ch_self > ch_peer) {
#line 2233
    rv = 1;
  } else {
#line 2236
    tmp___0 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2236
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2238
  goto ldv_45300;
  case 5: 
#line 2240
  rv = -1;
#line 2241
  goto ldv_45300;
  case 6: 
#line 2243
  rv = 1;
  }
  ldv_45300: ;
#line 2246
  return (rv);
}
}
#line 2249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2251
  rv = -100;
#line 2253
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2254
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2256
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2262
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2263
  goto ldv_45320;
  case 0: ;
#line 2265
  goto ldv_45320;
  case 7: 
#line 2267
  hg = drbd_asb_recover_0p(mdev);
#line 2268
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 2269
    rv = hg;
  } else {

  }
#line 2270
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2271
    rv = hg;
  } else {

  }
#line 2272
  goto ldv_45320;
  case 10: 
#line 2274
  rv = drbd_asb_recover_0p(mdev);
#line 2275
  goto ldv_45320;
  case 8: ;
#line 2277
  return ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U ? 1 : -1);
  case 9: 
#line 2279
  hg = drbd_asb_recover_0p(mdev);
#line 2280
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2281
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2285
    val.i = 0U;
#line 2285
    val.ldv_35070.role = 2U;
#line 2285
    mask.i = 0U;
#line 2285
    mask.ldv_35070.role = 3U;
#line 2285
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2286
    if (self != 1) {
#line 2287
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2289
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2290
      rv = hg;
    }
  } else {
#line 2293
    rv = hg;
  }
  }
  ldv_45320: ;
#line 2296
  return (rv);
}
}
#line 2299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2301
  rv = -100;
#line 2303
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2304
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2306
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2314
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2315
  goto ldv_45344;
  case 10: 
#line 2317
  rv = drbd_asb_recover_0p(mdev);
#line 2318
  goto ldv_45344;
  case 0: ;
#line 2320
  goto ldv_45344;
  case 9: 
#line 2322
  hg = drbd_asb_recover_0p(mdev);
#line 2323
  if (hg == -1) {
#line 2327
    val.i = 0U;
#line 2327
    val.ldv_35070.role = 2U;
#line 2327
    mask.i = 0U;
#line 2327
    mask.ldv_35070.role = 3U;
#line 2327
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2328
    if (self != 1) {
#line 2329
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2331
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2332
      rv = hg;
    }
  } else {
#line 2335
    rv = hg;
  }
  }
  ldv_45344: ;
#line 2338
  return (rv);
}
}
#line 2341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2344
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2345
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2346
    return;
  } else {

  }
#line 2348
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2349
  return;
}
}
#line 2368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2373
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2374
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2376
  *rule_nr = 10;
#line 2377
  if (self == 4ULL && peer == 4ULL) {
#line 2378
    return (0);
  } else {

  }
#line 2380
  *rule_nr = 20;
#line 2381
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2383
    return (-2);
  } else {

  }
#line 2385
  *rule_nr = 30;
#line 2386
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2388
    return (2);
  } else {

  }
#line 2390
  if (self == peer) {
#line 2393
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2395
      if (mdev->agreed_pro_version <= 90) {
#line 2396
        return (-1001);
      } else {

      }
#line 2398
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2400
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2401
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2403
        if ((int )mdev->state.ldv_35070.disk > 2) {
#line 2403
          tmp = drbd_bm_total_weight(mdev);
#line 2403
          tmp___0 = (u64 )tmp;
        } else {
#line 2403
          tmp___0 = 0ULL;
        }
#line 2403
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2405
        *rule_nr = 34;
      } else {
#line 2407
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2408
        *rule_nr = 36;
      }
#line 2411
      return (1);
    } else {

    }
#line 2414
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2416
      if (mdev->agreed_pro_version <= 90) {
#line 2417
        return (-1001);
      } else {

      }
#line 2419
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2421
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2423
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2424
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2425
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2427
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2428
        *rule_nr = 35;
      } else {
#line 2430
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2431
        *rule_nr = 37;
      }
#line 2434
      return (-1);
    } else {

    }
#line 2438
    tmp___1 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2438
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2442
    *rule_nr = 40;
#line 2444
    switch (rct) {
    case 0: ;
#line 2445
    return (0);
    case 1: ;
#line 2446
    return (1);
    case 2: ;
#line 2447
    return (-1);
    case 3: 
#line 2449
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2450
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2454
  *rule_nr = 50;
#line 2455
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2456
  if (self == peer) {
#line 2457
    return (-1);
  } else {

  }
#line 2459
  *rule_nr = 51;
#line 2460
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2461
  if (self == peer) {
#line 2462
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2463
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2464
    if (self == peer) {
#line 2468
      if (mdev->agreed_pro_version <= 90) {
#line 2469
        return (-1001);
      } else {

      }
#line 2471
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2472
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2473
      return (-1);
    } else {

    }
  } else {

  }
#line 2477
  *rule_nr = 60;
#line 2478
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2479
  i = 2;
#line 2479
  goto ldv_45374;
  ldv_45373: 
#line 2480
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2481
  if (self == peer) {
#line 2482
    return (-2);
  } else {

  }
#line 2479
  i = i + 1;
  ldv_45374: ;
#line 2479
  if (i <= 3) {
#line 2480
    goto ldv_45373;
  } else {

  }
#line 2485
  *rule_nr = 70;
#line 2486
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2487
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2488
  if (self == peer) {
#line 2489
    return (1);
  } else {

  }
#line 2491
  *rule_nr = 71;
#line 2492
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2493
  if (self == peer) {
#line 2494
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2495
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2496
    if (self == peer) {
#line 2500
      if (mdev->agreed_pro_version <= 90) {
#line 2501
        return (-1001);
      } else {

      }
#line 2503
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2504
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2506
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2508
      if ((int )mdev->state.ldv_35070.disk > 2) {
#line 2508
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2508
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2508
        tmp___3 = 0ULL;
      }
#line 2508
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2511
      return (1);
    } else {

    }
  } else {

  }
#line 2516
  *rule_nr = 80;
#line 2517
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2518
  i = 2;
#line 2518
  goto ldv_45377;
  ldv_45376: 
#line 2519
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2520
  if (self == peer) {
#line 2521
    return (2);
  } else {

  }
#line 2518
  i = i + 1;
  ldv_45377: ;
#line 2518
  if (i <= 3) {
#line 2519
    goto ldv_45376;
  } else {

  }
#line 2524
  *rule_nr = 90;
#line 2525
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2526
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2527
  if (self == peer && self != 0ULL) {
#line 2528
    return (100);
  } else {

  }
#line 2530
  *rule_nr = 100;
#line 2531
  i = 2;
#line 2531
  goto ldv_45383;
  ldv_45382: 
#line 2532
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2533
  j = 2;
#line 2533
  goto ldv_45380;
  ldv_45379: 
#line 2534
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2535
  if (self == peer) {
#line 2536
    return (-100);
  } else {

  }
#line 2533
  j = j + 1;
  ldv_45380: ;
#line 2533
  if (j <= 3) {
#line 2534
    goto ldv_45379;
  } else {

  }
#line 2531
  i = i + 1;
  ldv_45383: ;
#line 2531
  if (i <= 3) {
#line 2532
    goto ldv_45382;
  } else {

  }

#line 2540
  return (-1000);
}
}
#line 2546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2550
  rv = C_MASK;
#line 2553
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35070.disk;
#line 2554
  if ((unsigned int )mydisk == 3U) {
#line 2555
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35070.disk;
  } else {

  }
#line 2557
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2558
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2559
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2562
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2564
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2566
  if (hg == -1000) {
#line 2567
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2568
    return (C_MASK);
  } else {

  }
#line 2570
  if (hg == -1001) {
#line 2571
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2572
    return (C_MASK);
  } else {

  }
#line 2575
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2577
    if (hg == -100) {
#line 2577
      tmp = 1;
    } else {
#line 2577
      __x = (long )hg;
#line 2577
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2577
        tmp = 1;
      } else {
#line 2577
        tmp = 0;
      }
    }
#line 2577
    f = tmp;
#line 2578
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2579
    if (f != 0) {
#line 2580
      hg = hg * 2;
    } else {

    }
#line 2581
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2585
  __x___0 = (long )hg;
#line 2585
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2586
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2588
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2589
    pcount = ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2591
    forced = hg == -100;
#line 2593
    switch (pcount) {
    case 0: 
#line 2595
    hg = drbd_asb_recover_0p(mdev);
#line 2596
    goto ldv_45402;
    case 1: 
#line 2598
    hg = drbd_asb_recover_1p(mdev);
#line 2599
    goto ldv_45402;
    case 2: 
#line 2601
    hg = drbd_asb_recover_2p(mdev);
#line 2602
    goto ldv_45402;
    }
    ldv_45402: 
#line 2604
    __x___1 = (long )hg;
#line 2604
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2605
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2608
      if (forced != 0) {
#line 2609
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2611
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2616
  if (hg == -100) {
#line 2617
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2618
      hg = -1;
    } else {

    }
#line 2619
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2620
      hg = 1;
    } else {

    }
#line 2622
    __x___2 = (long )hg;
#line 2622
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2623
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2628
  if (hg == -100) {
#line 2633
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2634
    drbd_khelper(mdev, (char *)"split-brain");
#line 2635
    return (C_MASK);
  } else {

  }
#line 2638
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2640
    return (C_MASK);
  } else {

  }
#line 2643
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && (int )mdev->state.ldv_35070.disk > 6) {
#line 2645
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2647
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2651
    return (C_MASK);
    case 10: 
#line 2653
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2658
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2658
    goto _L;
  } else {
#line 2658
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2658
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2659
      if (hg == 0) {
#line 2660
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2662
        __x___3 = (long )hg;
#line 2662
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2662
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2665
      return (C_MASK);
    } else {

    }
  }
#line 2668
  __x___4 = (long )hg;
#line 2668
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2669
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2670
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2670
    if (tmp___2 != 0) {
#line 2671
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2674
  if (hg > 0) {
#line 2675
    rv = C_WF_BITMAP_S;
  } else
#line 2676
  if (hg < 0) {
#line 2677
    rv = C_WF_BITMAP_T;
  } else {
#line 2679
    rv = C_CONNECTED;
#line 2680
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2680
    if (tmp___4 != 0UL) {
#line 2681
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2681
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2686
  return (rv);
}
}
#line 2690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2693
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2695
    return (0);
  } else {

  }
#line 2698
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2700
    return (1);
  } else {

  }
#line 2703
  if ((unsigned int )peer == (unsigned int )self) {
#line 2704
    return (0);
  } else {

  }
#line 2707
  return (1);
}
}
#line 2710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *my_alg ;
  int tmp___10 ;
  int tmp___11 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2712
  p = (struct p_protocol *)h;
#line 2716
  p_integrity_alg[0] = '\000';
#line 2716
  tmp = 1U;
#line 2716
  while (1) {
#line 2716
    if (tmp >= 64U) {
#line 2716
      break;
    } else {

    }
#line 2716
    p_integrity_alg[tmp] = (char)0;
#line 2716
    tmp = tmp + 1U;
  }
#line 2718
  header_size = 24;
#line 2719
  data_size = (int )h->length - header_size;
#line 2721
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2721
  if (tmp___0 != header_size) {
#line 2722
    return (0);
  } else {

  }
#line 2724
  tmp___1 = __fswab32(p->protocol);
#line 2724
  p_proto = (int )tmp___1;
#line 2725
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2725
  p_after_sb_0p = (int )tmp___2;
#line 2726
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2726
  p_after_sb_1p = (int )tmp___3;
#line 2727
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2727
  p_after_sb_2p = (int )tmp___4;
#line 2728
  tmp___5 = __fswab32(p->two_primaries);
#line 2728
  p_two_primaries = (int )tmp___5;
#line 2729
  tmp___6 = __fswab32(p->conn_flags);
#line 2729
  cf = (int )tmp___6;
#line 2730
  p_want_lose = cf & 1;
#line 2732
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2734
  if ((cf & 2) != 0) {
#line 2735
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2737
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2738
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2739
    goto disconnect;
  } else {

  }
#line 2742
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2742
  if (tmp___7 != 0) {
#line 2743
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2744
    goto disconnect;
  } else {

  }
#line 2747
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2747
  if (tmp___8 != 0) {
#line 2748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2749
    goto disconnect;
  } else {

  }
#line 2752
  tmp___9 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2752
  if (tmp___9 != 0) {
#line 2753
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2754
    goto disconnect;
  } else {

  }
#line 2757
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2759
    goto disconnect;
  } else {

  }
#line 2762
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2763
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2764
    goto disconnect;
  } else {

  }
#line 2767
  if (mdev->agreed_pro_version > 86) {
#line 2768
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2770
    tmp___10 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2770
    if (tmp___10 != data_size) {
#line 2771
      return (0);
    } else {

    }
#line 2773
    p_integrity_alg[63] = 0;
#line 2774
    tmp___11 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2774
    if (tmp___11 != 0) {
#line 2775
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2776
      goto disconnect;
    } else {

    }
#line 2778
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2782
  return (1);
  disconnect: 
#line 2785
  val.i = 0U;
#line 2785
  val.ldv_35070.conn = 1U;
#line 2785
  mask.i = 0U;
#line 2785
  mask.ldv_35070.conn = 31U;
#line 2785
  drbd_force_state(mdev, mask, val);
#line 2786
  return (0);
}
}
#line 2794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2799
  if ((int )((signed char )*alg) == 0) {
#line 2800
    return (0);
  } else {

  }
#line 2802
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2803
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2803
  if (tmp___0 != 0L) {
#line 2804
    tmp = PTR_ERR((void const   *)tfm);
#line 2804
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2806
    return (tfm);
  } else {

  }
#line 2808
  tmp___2 = crypto_hash_tfm(tfm);
#line 2808
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2808
  if (tmp___3 == 0) {
#line 2809
    crypto_free_hash(tfm);
#line 2810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2811
    tmp___1 = ERR_PTR(-22L);
#line 2811
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2813
  return (tfm);
}
}
#line 2816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  size_t tmp___6 ;
  size_t tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2818
  ok = 1;
#line 2819
  p = (struct p_rs_param_89 *)h;
#line 2821
  verify_tfm = 0;
#line 2822
  csums_tfm = 0;
#line 2823
  apv = mdev->agreed_pro_version;
#line 2825
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2830
  if ((unsigned int )h->length > exp_max_sz) {
#line 2831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            (int )h->length, exp_max_sz);
#line 2833
    return (0);
  } else {

  }
#line 2836
  if (apv <= 88) {
#line 2837
    header_size = 4U;
#line 2838
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2840
    header_size = 132U;
#line 2841
    data_size = (unsigned int )h->length - header_size;
#line 2842
    if (data_size != 0U) {
#line 2842
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2842);
    } else {

    }
  }
#line 2846
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2848
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2848
  if ((unsigned int )tmp != header_size) {
#line 2849
    return (0);
  } else {

  }
#line 2851
  tmp___0 = __fswab32(p->rate);
#line 2851
  mdev->sync_conf.rate = (int )tmp___0;
#line 2853
  if (apv > 87) {
#line 2854
    if (apv == 88) {
#line 2855
      if (data_size > 64U) {
#line 2856
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2859
        return (0);
      } else {

      }
#line 2862
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2862
      if ((unsigned int )tmp___1 != data_size) {
#line 2863
        return (0);
      } else {

      }
#line 2867
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2867
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2867);
      } else {

      }
#line 2868
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2873
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2873
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2873);
      } else {

      }
#line 2874
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2874
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2874);
      } else {

      }
#line 2875
      p->verify_alg[63] = 0;
#line 2876
      p->csums_alg[63] = 0;
    }
#line 2879
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2879
    if (tmp___3 != 0) {
#line 2880
      if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2881
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2883
        goto disconnect;
      } else {

      }
#line 2885
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2887
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2887
      if (tmp___2 != 0L) {
#line 2888
        verify_tfm = 0;
#line 2889
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2893
    if (apv > 88) {
#line 2893
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2893
      if (tmp___5 != 0) {
#line 2894
        if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2895
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2897
          goto disconnect;
        } else {

        }
#line 2899
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2901
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2901
        if (tmp___4 != 0L) {
#line 2902
          csums_tfm = 0;
#line 2903
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2908
    spin_lock(& mdev->peer_seq_lock);
#line 2910
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2911
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2912
      tmp___6 = strlen((char const   *)(& p->verify_alg));
#line 2912
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___6 + 1U);
#line 2913
      crypto_free_hash(mdev->verify_tfm);
#line 2914
      mdev->verify_tfm = verify_tfm;
#line 2915
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2917
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2918
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2919
      tmp___7 = strlen((char const   *)(& p->csums_alg));
#line 2919
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___7 + 1U);
#line 2920
      crypto_free_hash(mdev->csums_tfm);
#line 2921
      mdev->csums_tfm = csums_tfm;
#line 2922
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2924
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2927
  return (ok);
  disconnect: 
#line 2931
  crypto_free_hash(csums_tfm);
#line 2933
  crypto_free_hash(verify_tfm);
#line 2934
  val.i = 0U;
#line 2934
  val.ldv_35070.conn = 1U;
#line 2934
  mask.i = 0U;
#line 2934
  mask.ldv_35070.conn = 31U;
#line 2934
  drbd_force_state(mdev, mask, val);
#line 2935
  return (0);
}
}
#line 2938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2940
  return;
}
}
#line 2945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2949
  if (a == 0UL || b == 0UL) {
#line 2950
    return;
  } else {

  }
#line 2951
  d = a > b ? a - b : b - a;
#line 2952
  if (a >> 3 < d || b >> 3 < d) {
#line 2953
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2955
  return;
}
}
#line 2957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___2 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 2959
  p = (struct p_sizes *)h;
#line 2960
  dd = 0;
#line 2963
  ldsc = 0;
#line 2966
  _b = (unsigned int )h->length != 32U;
#line 2966
  if (_b != 0) {
#line 2966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2966);
  } else {

  }
#line 2966
  if (_b != 0) {
#line 2966
    return (0);
  } else {

  }
#line 2967
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2967
  if (tmp != (int )h->length) {
#line 2968
    return (0);
  } else {

  }
#line 2970
  tmp___0 = __fswab64(p->d_size);
#line 2970
  p_size = (sector_t )tmp___0;
#line 2971
  tmp___1 = __fswab64(p->u_size);
#line 2971
  p_usize = (sector_t )tmp___1;
#line 2973
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) {
#line 2974
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2975
    val.i = 0U;
#line 2975
    val.ldv_35070.conn = 1U;
#line 2975
    mask.i = 0U;
#line 2975
    mask.ldv_35070.conn = 31U;
#line 2975
    drbd_force_state(mdev, mask, val);
#line 2976
    return (0);
  } else {

  }
#line 2981
  mdev->p_size = p_size;
#line 2984
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2984
  if (tmp___6 != 0) {
#line 2985
    tmp___2 = drbd_get_max_capacity(mdev->ldev);
#line 2985
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___2);
#line 2987
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2992
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2993
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2993
        if (p_usize == 0UL) {
#line 2993
          tmp___3 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2993
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2993
          _min2 = p_usize;
#line 2993
          tmp___3 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2993
        p_usize = tmp___3;
      } else {
#line 2993
        p_usize = p_usize;
      }
    } else {

    }
#line 2996
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2998
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2999
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3000
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3006
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3006
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3006
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35070.disk > 4) && (int )mdev->state.ldv_35070.conn <= 9) {
#line 3010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3011
      val___0.i = 0U;
#line 3011
      val___0.ldv_35070.conn = 1U;
#line 3011
      mask___0.i = 0U;
#line 3011
      mask___0.ldv_35070.conn = 31U;
#line 3011
      drbd_force_state(mdev, mask___0, val___0);
#line 3012
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3013
      put_ldev(mdev);
#line 3014
      return (0);
    } else {

    }
#line 3016
    put_ldev(mdev);
  } else {

  }
#line 3020
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3020
  ddsf = (enum dds_flags )tmp___7;
#line 3021
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3021
  if (tmp___8 != 0) {
#line 3022
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3023
    put_ldev(mdev);
#line 3024
    if ((int )dd == -1) {
#line 3025
      return (0);
    } else {

    }
#line 3026
    drbd_md_sync(mdev);
  } else {
#line 3029
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3032
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3032
  if (tmp___13 != 0) {
#line 3033
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3033
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3034
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3035
      ldsc = 1;
    } else {

    }
#line 3038
    if (mdev->agreed_pro_version <= 93) {
#line 3039
      tmp___10 = __fswab32(p->max_segment_size);
#line 3039
      max_seg_s = tmp___10;
    } else {
#line 3041
      max_seg_s = 32768U;
    }
#line 3043
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3043
    if (tmp___11 != max_seg_s) {
#line 3044
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3046
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3046
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3047
    put_ldev(mdev);
  } else {

  }
#line 3050
  if ((int )mdev->state.ldv_35070.conn > 9) {
#line 3051
    tmp___14 = __fswab64(p->c_size);
#line 3051
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3051
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3055
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3057
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3057
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 910UL) == 160U)) {
#line 3059
      if ((int )mdev->state.ldv_35070.pdsk > 3 && (int )mdev->state.ldv_35070.disk > 3) {
#line 3061
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3062
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3064
          resync_after_online_grow(mdev);
        }
      } else {
#line 3066
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3070
  return (1);
}
}
#line 3073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  int tmp ;
  void *tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 3075
  p = (struct p_uuids *)h;
#line 3079
  _b = (unsigned int )h->length != 48U;
#line 3079
  if (_b != 0) {
#line 3079
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3079);
  } else {

  }
#line 3079
  if (_b != 0) {
#line 3079
    return (0);
  } else {

  }
#line 3080
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3080
  if (tmp != (int )h->length) {
#line 3081
    return (0);
  } else {

  }
#line 3083
  tmp___0 = kmalloc___1(48UL, 16U);
#line 3083
  p_uuid = (u64 *)tmp___0;
#line 3085
  i = 0;
#line 3085
  goto ldv_45512;
  ldv_45511: 
#line 3086
  tmp___1 = __fswab64(p->uuid[i]);
#line 3086
  *(p_uuid + (unsigned long )i) = tmp___1;
#line 3085
  i = i + 1;
  ldv_45512: ;
#line 3085
  if (i <= 5) {
#line 3086
    goto ldv_45511;
  } else {

  }
#line 3088
  kfree((void const   *)mdev->p_uuid);
#line 3089
  mdev->p_uuid = p_uuid;
#line 3091
  if ((((int )mdev->state.ldv_35070.conn <= 9 && (int )mdev->state.ldv_35070.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3095
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3097
    val.i = 0U;
#line 3097
    val.ldv_35070.conn = 1U;
#line 3097
    mask.i = 0U;
#line 3097
    mask.ldv_35070.conn = 31U;
#line 3097
    drbd_force_state(mdev, mask, val);
#line 3098
    return (0);
  } else {

  }
#line 3101
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3101
  if (tmp___2 != 0) {
#line 3102
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3107
    if (skip_initial_sync != 0) {
#line 3108
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3109
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3111
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3112
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3113
      __ns.i = mdev->state.i;
#line 3113
      __ns.ldv_35070.disk = 8U;
#line 3113
      __ns.ldv_35070.pdsk = 8U;
#line 3113
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3115
      drbd_md_sync(mdev);
    } else {

    }
#line 3117
    put_ldev(mdev);
  } else {

  }
#line 3124
  tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3124
  if (tmp___3 == 0) {
#line 3124
    goto ldv_45521;
  } else {

  }
#line 3124
  tmp___4 = get_current();
#line 3124
  __wait.flags = 0U;
#line 3124
  __wait.private = (void *)tmp___4;
#line 3124
  __wait.func = & autoremove_wake_function;
#line 3124
  __wait.task_list.next = & __wait.task_list;
#line 3124
  __wait.task_list.prev = & __wait.task_list;
  ldv_45524: 
#line 3124
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3124
  tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3124
  if (tmp___5 == 0) {
#line 3124
    goto ldv_45523;
  } else {

  }
#line 3124
  schedule();
#line 3124
  goto ldv_45524;
  ldv_45523: 
#line 3124
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45521: ;
#line 3125
  if ((int )mdev->state.ldv_35070.conn > 9 && (int )mdev->state.ldv_35070.disk <= 3) {
#line 3126
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3128
  return (1);
}
}
#line 3135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3139
  c_tab[0] = 0;
#line 3139
  c_tab[1] = C_TEAR_DOWN;
#line 3139
  c_tab[2] = 0;
#line 3139
  c_tab[3] = 0;
#line 3139
  c_tab[4] = 0;
#line 3139
  c_tab[5] = 0;
#line 3139
  c_tab[6] = 0;
#line 3139
  c_tab[7] = 0;
#line 3139
  c_tab[8] = 0;
#line 3139
  c_tab[9] = 0;
#line 3139
  c_tab[10] = C_CONNECTED;
#line 3139
  c_tab[11] = C_STARTING_SYNC_T;
#line 3139
  c_tab[12] = C_STARTING_SYNC_S;
#line 3139
  c_tab[13] = 0;
#line 3139
  c_tab[14] = 0;
#line 3139
  c_tab[15] = 0;
#line 3139
  c_tab[16] = 0;
#line 3139
  c_tab[17] = 0;
#line 3139
  c_tab[18] = C_VERIFY_T;
#line 3139
  c_tab[19] = 0;
#line 3139
  c_tab[20] = 0;
#line 3139
  c_tab[21] = 0;
#line 3139
  c_tab[22] = 0;
#line 3139
  c_tab[23] = 0;
#line 3139
  c_tab[24] = 0;
#line 3139
  c_tab[25] = 0;
#line 3139
  c_tab[26] = 0;
#line 3139
  c_tab[27] = 0;
#line 3139
  c_tab[28] = 0;
#line 3139
  c_tab[29] = 0;
#line 3139
  c_tab[30] = 0;
#line 3139
  c_tab[31] = C_MASK;
#line 3149
  ms.i = ps.i;
#line 3151
  ms.ldv_35070.conn = (unsigned char )c_tab[(int )ps.ldv_35070.conn];
#line 3152
  ms.ldv_35070.peer = ps.ldv_35070.role;
#line 3153
  ms.ldv_35070.role = ps.ldv_35070.peer;
#line 3154
  ms.ldv_35070.pdsk = ps.ldv_35070.disk;
#line 3155
  ms.ldv_35070.disk = ps.ldv_35070.pdsk;
#line 3156
  ms.ldv_35070.peer_isp = (unsigned char )((int )ps.ldv_35070.aftr_isp | (int )ps.ldv_35070.user_isp);
#line 3158
  return (ms);
}
}
#line 3161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 3163
  p = (struct p_req_state *)h;
#line 3167
  _b = (unsigned int )h->length != 8U;
#line 3167
  if (_b != 0) {
#line 3167
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3167);
  } else {

  }
#line 3167
  if (_b != 0) {
#line 3167
    return (0);
  } else {

  }
#line 3168
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3168
  if (tmp != (int )h->length) {
#line 3169
    return (0);
  } else {

  }
#line 3171
  tmp___0 = __fswab32(p->mask);
#line 3171
  mask.i = tmp___0;
#line 3172
  tmp___1 = __fswab32(p->val);
#line 3172
  val.i = tmp___1;
#line 3174
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3174
  if (tmp___2 != 0) {
#line 3174
    tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3174
    if (tmp___3 != 0) {
#line 3176
      drbd_send_sr_reply(mdev, -19);
#line 3177
      return (1);
    } else {

    }
  } else {

  }
#line 3180
  mask = convert_state(mask);
#line 3181
  val = convert_state(val);
#line 3183
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3185
  drbd_send_sr_reply(mdev, rv);
#line 3186
  drbd_md_sync(mdev);
#line 3188
  return (1);
}
}
#line 3191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  int cr ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___4 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3193
  p = (struct p_state *)h;
#line 3199
  _b = (unsigned int )h->length != 4U;
#line 3199
  if (_b != 0) {
#line 3199
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3199);
  } else {

  }
#line 3199
  if (_b != 0) {
#line 3200
    return (0);
  } else {

  }
#line 3202
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3202
  if (tmp != (int )h->length) {
#line 3203
    return (0);
  } else {

  }
#line 3205
  tmp___0 = __fswab32(p->state);
#line 3205
  peer_state.i = tmp___0;
#line 3207
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35070.disk;
#line 3208
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3209
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3210
    tmp___1 = drbd_disk_str(real_peer_disk);
#line 3210
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___1);
  } else {

  }
#line 3213
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3215
  nconn = (enum drbd_conns )mdev->state.ldv_35070.conn;
#line 3215
  oconn = nconn;
#line 3216
  spin_unlock_irq(& mdev->req_lock);
#line 3218
  if ((unsigned int )nconn == 9U) {
#line 3219
    nconn = C_CONNECTED;
  } else {

  }
#line 3221
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35070.disk > 2) {
#line 3221
    tmp___4 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3221
    if (tmp___4 != 0) {
#line 3226
      cr = (unsigned int )oconn <= 9U;
#line 3229
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1821UL) == 6U)) | cr;
#line 3234
      tmp___2 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3234
      cr = tmp___2 | cr;
#line 3237
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_35070.conn > 10 && (int )peer_state.ldv_35070.conn <= 14)) | cr;
#line 3241
      if (cr != 0) {
#line 3242
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35070.role,
                                    real_peer_disk);
      } else {

      }
#line 3244
      put_ldev(mdev);
#line 3245
      if ((unsigned int )nconn == 31U) {
#line 3246
        nconn = C_CONNECTED;
#line 3247
        if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 6U) {
#line 3248
          val.i = 0U;
#line 3248
          val.ldv_35070.disk = 0U;
#line 3248
          mask.i = 0U;
#line 3248
          mask.ldv_35070.disk = 15U;
#line 3248
          drbd_force_state(mdev, mask, val);
        } else
#line 3249
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3250
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3251
          peer_state.ldv_35070.disk = 0U;
#line 3252
          real_peer_disk = D_DISKLESS;
        } else {
#line 3254
          tmp___3 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3254
          if (tmp___3 != 0) {
#line 3255
            return (0);
          } else {

          }
#line 3256
          if ((unsigned int )oconn != 9U) {
#line 3256
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3256);
          } else {

          }
#line 3257
          val___0.i = 0U;
#line 3257
          val___0.ldv_35070.conn = 1U;
#line 3257
          mask___0.i = 0U;
#line 3257
          mask___0.ldv_35070.conn = 31U;
#line 3257
          drbd_force_state(mdev, mask___0, val___0);
#line 3258
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3263
  spin_lock_irq(& mdev->req_lock);
#line 3264
  if ((unsigned int )mdev->state.ldv_35070.conn != (unsigned int )oconn) {
#line 3265
    goto retry;
  } else {

  }
#line 3266
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3267
  ns.i = mdev->state.i;
#line 3268
  ns.ldv_35070.conn = (unsigned char )nconn;
#line 3269
  ns.ldv_35070.peer = peer_state.ldv_35070.role;
#line 3270
  ns.ldv_35070.pdsk = (unsigned char )real_peer_disk;
#line 3271
  ns.ldv_35070.peer_isp = (unsigned char )((int )peer_state.ldv_35070.aftr_isp | (int )peer_state.ldv_35070.user_isp);
#line 3272
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3273
    ns.ldv_35070.disk = mdev->new_state_tmp.ldv_35070.disk;
  } else {

  }
#line 3275
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3276
  ns = mdev->state;
#line 3277
  spin_unlock_irq(& mdev->req_lock);
#line 3279
  if (rv <= 0) {
#line 3280
    val___1.i = 0U;
#line 3280
    val___1.ldv_35070.conn = 1U;
#line 3280
    mask___1.i = 0U;
#line 3280
    mask___1.ldv_35070.conn = 31U;
#line 3280
    drbd_force_state(mdev, mask___1, val___1);
#line 3281
    return (0);
  } else {

  }
#line 3284
  if ((unsigned int )oconn > 9U) {
#line 3285
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_35070.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3290
      drbd_send_uuids(mdev);
#line 3291
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3295
  (mdev->net_conf)->want_lose = 0U;
#line 3297
  drbd_md_sync(mdev);
#line 3299
  return (1);
}
}
#line 3302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  int tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 3304
  p = (struct p_rs_uuid *)h;
#line 3306
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35070.conn <= 9) || (int )mdev->state.ldv_35070.disk <= 2) {
#line 3306
    goto ldv_45574;
  } else {

  }
#line 3306
  tmp = get_current();
#line 3306
  __wait.flags = 0U;
#line 3306
  __wait.private = (void *)tmp;
#line 3306
  __wait.func = & autoremove_wake_function;
#line 3306
  __wait.task_list.next = & __wait.task_list;
#line 3306
  __wait.task_list.prev = & __wait.task_list;
  ldv_45577: 
#line 3306
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3306
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35070.conn <= 9) || (int )mdev->state.ldv_35070.disk <= 2) {
#line 3306
    goto ldv_45576;
  } else {

  }
#line 3306
  schedule();
#line 3306
  goto ldv_45577;
  ldv_45576: 
#line 3306
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45574: 
#line 3313
  _b = (unsigned int )h->length != 8U;
#line 3313
  if (_b != 0) {
#line 3313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sync_uuid", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3313);
  } else {

  }
#line 3313
  if (_b != 0) {
#line 3313
    return (0);
  } else {

  }
#line 3314
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3314
  if (tmp___0 != (int )h->length) {
#line 3315
    return (0);
  } else {

  }
#line 3319
  tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3319
  if (tmp___2 != 0) {
#line 3320
    tmp___1 = __fswab64(p->uuid);
#line 3320
    _drbd_uuid_set(mdev, 0, tmp___1);
#line 3321
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3323
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3325
    put_ldev(mdev);
  } else {
#line 3327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3329
  return (1);
}
}
#line 3335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3338
  __min1 = 511UL;
#line 3338
  __min2 = c->bm_words - c->word_offset;
#line 3338
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3339
  want = num_words * 8U;
#line 3341
  if ((unsigned int )h->length != want) {
#line 3342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != h->length (%u)\n",
            "receive_bitmap_plain", want, (int )h->length);
#line 3343
    return (FAILED);
  } else {

  }
#line 3345
  if (want == 0U) {
#line 3346
    return (DONE);
  } else {

  }
#line 3347
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3347
  if ((unsigned int )tmp != want) {
#line 3348
    return (FAILED);
  } else {

  }
#line 3350
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3352
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3353
  c->bit_offset = c->word_offset * 64UL;
#line 3354
  if (c->bit_offset > c->bm_bits) {
#line 3355
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3357
  return (OK);
}
}
#line 3361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;

  {
#line 3369
  s = c->bit_offset;
#line 3371
  len = (int )((unsigned int )p->head.length - 1U);
#line 3372
  tmp___0 = DCBP_get_start(p);
#line 3372
  toggle = tmp___0;
#line 3376
  tmp___1 = DCBP_get_pad_bits(p);
#line 3376
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3378
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3379
  if (bits < 0) {
#line 3380
    return (FAILED);
  } else {

  }
#line 3382
  have = bits;
#line 3382
  goto ldv_45613;
  ldv_45612: 
#line 3383
  bits = vli_decode_bits(& rl, look_ahead);
#line 3384
  if (bits <= 0) {
#line 3385
    return (FAILED);
  } else {

  }
#line 3387
  if (toggle != 0) {
#line 3388
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3389
    if (c->bm_bits <= e) {
#line 3390
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3391
      return (FAILED);
    } else {

    }
#line 3393
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3396
  if (have < bits) {
#line 3397
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3401
    return (FAILED);
  } else {

  }
#line 3403
  look_ahead = look_ahead >> bits;
#line 3404
  have = have - bits;
#line 3406
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3407
  if (bits < 0) {
#line 3408
    return (FAILED);
  } else {

  }
#line 3409
  look_ahead = (tmp << have) | look_ahead;
#line 3410
  have = have + bits;
#line 3382
  s = (unsigned long )((unsigned long long )s + rl);
#line 3382
  toggle = toggle == 0;
  ldv_45613: ;
#line 3382
  if (have > 0) {
#line 3383
    goto ldv_45612;
  } else {

  }
#line 3413
  c->bit_offset = s;
#line 3414
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3416
  return (c->bm_bits == s);
}
}
#line 3420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3424
  tmp___0 = DCBP_get_code(p);
#line 3424
  if ((unsigned int )tmp___0 == 2U) {
#line 3425
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3425
    return (tmp);
  } else {

  }
#line 3431
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3432
  val.i = 0U;
#line 3432
  val.ldv_35070.conn = 6U;
#line 3432
  mask.i = 0U;
#line 3432
  mask.ldv_35070.conn = 31U;
#line 3432
  drbd_force_state(mdev, mask, val);
#line 3433
  return (FAILED);
}
}
#line 3436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3440
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3443
  total = c->bytes[0] + c->bytes[1];
#line 3447
  if (total == 0U) {
#line 3448
    return;
  } else {

  }
#line 3451
  if (total >= plain) {
#line 3452
    return;
  } else {

  }
#line 3455
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3458
  if (r > 1000U) {
#line 3459
    r = 1000U;
  } else {

  }
#line 3461
  r = 1000U - r;
#line 3462
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3463
  return;
}
}
#line 3478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3483
  ok = 0;
#line 3485
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3485
  if (tmp == 0) {
#line 3485
    goto ldv_45640;
  } else {

  }
#line 3485
  tmp___0 = get_current();
#line 3485
  __wait.flags = 0U;
#line 3485
  __wait.private = (void *)tmp___0;
#line 3485
  __wait.func = & autoremove_wake_function;
#line 3485
  __wait.task_list.next = & __wait.task_list;
#line 3485
  __wait.task_list.prev = & __wait.task_list;
  ldv_45643: 
#line 3485
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3485
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3485
  if (tmp___1 == 0) {
#line 3485
    goto ldv_45642;
  } else {

  }
#line 3485
  schedule();
#line 3485
  goto ldv_45643;
  ldv_45642: 
#line 3485
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45640: 
#line 3487
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3491
  tmp___2 = __get_free_pages(16U, 0U);
#line 3491
  buffer = (void *)tmp___2;
#line 3492
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3494
    goto out;
  } else {

  }
#line 3497
  tmp___3 = drbd_bm_bits(mdev);
#line 3497
  tmp___4 = drbd_bm_words(mdev);
#line 3497
  __constr_expr_0.bm_bits = tmp___3;
#line 3497
  __constr_expr_0.bm_words = tmp___4;
#line 3497
  __constr_expr_0.bit_offset = 0UL;
#line 3497
  __constr_expr_0.word_offset = 0UL;
#line 3497
  __constr_expr_0.packets[0] = 0U;
#line 3497
  __constr_expr_0.packets[1] = 0U;
#line 3497
  __constr_expr_0.bytes[0] = 0U;
#line 3497
  __constr_expr_0.bytes[1] = 0U;
#line 3497
  c = __constr_expr_0;
  ldv_45652: ;
#line 3503
  if ((unsigned int )h->command == 4U) {
#line 3504
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3505
  if ((unsigned int )h->command == 36U) {
#line 3510
    if ((unsigned int )h->length > 4088U) {
#line 3511
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3512
      goto out;
    } else {

    }
#line 3515
    p = (struct p_compressed_bm *)buffer;
#line 3516
    __len = 8UL;
#line 3516
    if (__len > 63UL) {
#line 3516
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3516
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3517
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3517
    if (tmp___5 != (int )h->length) {
#line 3518
      goto out;
    } else {

    }
#line 3519
    if ((unsigned int )p->head.length <= 1U) {
#line 3520
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              (int )p->head.length);
#line 3521
      return (2);
    } else {

    }
#line 3523
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3525
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (int )h->command);
#line 3526
    goto out;
  }
#line 3529
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3530
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3532
  if ((unsigned int )ret != 0U) {
#line 3533
    goto ldv_45651;
  } else {

  }
#line 3535
  tmp___6 = drbd_recv_header(mdev, h);
#line 3535
  if (tmp___6 == 0) {
#line 3536
    goto out;
  } else {

  }
#line 3537
  if ((unsigned int )ret == 0U) {
#line 3538
    goto ldv_45652;
  } else {

  }
  ldv_45651: ;
#line 3538
  if ((unsigned int )ret == 2U) {
#line 3539
    goto out;
  } else {

  }
#line 3541
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3543
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 224U) {
#line 3544
    tmp___7 = drbd_send_bitmap(mdev);
#line 3544
    ok = tmp___7 == 0;
#line 3545
    if (ok == 0) {
#line 3546
      goto out;
    } else {

    }
#line 3548
    val.i = 0U;
#line 3548
    val.ldv_35070.conn = 15U;
#line 3548
    mask.i = 0U;
#line 3548
    mask.ldv_35070.conn = 31U;
#line 3548
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3549
    if (ok != 1) {
#line 3549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3549);
    } else {

    }
  } else
#line 3550
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 208U) {
#line 3553
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 3553
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3557
  ok = 1;
  out: 
#line 3559
  drbd_bm_unlock(mdev);
#line 3560
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 910UL) == 208U) {
#line 3561
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3562
  free_pages((unsigned long )buffer, 0U);
#line 3563
  return (ok);
}
}
#line 3566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_(struct drbd_conf *mdev , struct p_header *h , int silent ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3572
  if (silent == 0) {
#line 3573
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
             (int )h->command, (int )h->length);
  } else {

  }
#line 3576
  size = (int )h->length;
#line 3577
  goto ldv_45674;
  ldv_45673: 
#line 3578
  __min1 = size;
#line 3578
  __min2 = 128;
#line 3578
  want = __min1 < __min2 ? __min1 : __min2;
#line 3579
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3580
  _b = r <= 0;
#line 3580
  if (_b != 0) {
#line 3580
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_skip_", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3580);
  } else {

  }
#line 3580
  if (_b != 0) {
#line 3580
    goto ldv_45672;
  } else {

  }
#line 3581
  size = size - r;
  ldv_45674: ;
#line 3577
  if (size > 0) {
#line 3578
    goto ldv_45673;
  } else {

  }
  ldv_45672: ;
#line 3583
  return (size == 0);
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3588
  tmp = receive_skip_(mdev, h, 0);
#line 3588
  return (tmp);
}
}
#line 3591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_silent(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3593
  tmp = receive_skip_(mdev, h, 1);
#line 3593
  return (tmp);
}
}
#line 3596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3598
  if ((int )mdev->state.ldv_35070.disk > 3) {
#line 3599
    drbd_kick_lo(mdev);
  } else {

  }
#line 3603
  drbd_tcp_quickack(mdev->data.socket);
#line 3605
  return (1);
}
}
#line 3610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[41U]  = 
#line 3610
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0,      0,      & receive_skip_silent, 
        0};
#line 3637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___2 ;
  long tmp___3 ;
  enum drbd_thread_state tmp___4 ;

  {
#line 3643
  header = & mdev->data.rbuf.header;
#line 3645
  goto ldv_45712;
  ldv_45711: 
#line 3646
  drbd_thread_current_set_cpu(mdev);
#line 3647
  tmp = drbd_recv_header(mdev, header);
#line 3647
  if (tmp == 0) {
#line 3648
    val.i = 0U;
#line 3648
    val.ldv_35070.conn = 6U;
#line 3648
    mask.i = 0U;
#line 3648
    mask.ldv_35070.conn = 31U;
#line 3648
    drbd_force_state(mdev, mask, val);
#line 3649
    goto ldv_45702;
  } else {

  }
#line 3652
  if ((unsigned int )header->command <= 39U) {
#line 3653
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3654
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3656
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3657
  if ((unsigned int )header->command > 257U) {
#line 3658
    handler = & receive_skip;
  } else {
#line 3660
    handler = 0;
  }
#line 3662
  tmp___0 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3662
  if (tmp___0 != 0L) {
#line 3663
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (int )header->command, (int )header->length);
#line 3665
    val___0.i = 0U;
#line 3665
    val___0.ldv_35070.conn = 6U;
#line 3665
    mask___0.i = 0U;
#line 3665
    mask___0.ldv_35070.conn = 31U;
#line 3665
    drbd_force_state(mdev, mask___0, val___0);
#line 3666
    goto ldv_45702;
  } else {

  }
#line 3668
  tmp___2 = (*handler)(mdev, header);
#line 3668
  tmp___3 = __builtin_expect(tmp___2 == 0, 0L);
#line 3668
  if (tmp___3 != 0L) {
#line 3669
    tmp___1 = cmdname((enum drbd_packets )header->command);
#line 3669
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___1, (int )header->length);
#line 3671
    val___1.i = 0U;
#line 3671
    val___1.ldv_35070.conn = 6U;
#line 3671
    mask___1.i = 0U;
#line 3671
    mask___1.ldv_35070.conn = 31U;
#line 3671
    drbd_force_state(mdev, mask___1, val___1);
#line 3672
    goto ldv_45702;
  } else {

  }
  ldv_45712: 
#line 3645
  tmp___4 = get_t_state(& mdev->receiver);
#line 3645
  if ((unsigned int )tmp___4 == 1U) {
#line 3646
    goto ldv_45711;
  } else {

  }
  ldv_45702: ;
#line 3650
  return;
}
}
#line 3677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr ;
  int tmp___1 ;

  {
#line 3688
  spin_lock_irq(& mdev->req_lock);
#line 3689
  i = 0;
#line 3689
  goto ldv_45729;
  ldv_45728: 
#line 3690
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3691
  pos = slot->first;
#line 3691
  goto ldv_45726;
  ldv_45725: 
#line 3697
  tmp___0 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3697
  if (tmp___0 == 0) {
#line 3697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&req->w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3697);
  } else {

  }
#line 3700
  _req_mod(req, connection_lost_while_pending);
#line 3691
  pos = tmp;
  ldv_45726: ;
#line 3691
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3691
    tmp = pos->next;
#line 3691
    if (1 != 0) {
#line 3691
      __mptr = (struct hlist_node  const  *)pos;
#line 3691
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3691
      if (1 != 0) {
#line 3692
        goto ldv_45725;
      } else {
#line 3694
        goto ldv_45727;
      }
    } else {
#line 3694
      goto ldv_45727;
    }
  } else {

  }
  ldv_45727: 
#line 3689
  i = i + 1;
  ldv_45729: ;
#line 3689
  if (i <= 14) {
#line 3690
    goto ldv_45728;
  } else {

  }
#line 3703
  i = 0;
#line 3703
  goto ldv_45732;
  ldv_45731: 
#line 3704
  tmp___1 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3704
  if (tmp___1 == 0) {
#line 3705
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
             i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3703
  i = i + 1;
  ldv_45732: ;
#line 3703
  if (i <= 14) {
#line 3704
    goto ldv_45731;
  } else {

  }
#line 3708
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3709
  spin_unlock_irq(& mdev->req_lock);
#line 3710
  return;
}
}
#line 3712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3716
  barr.w.cb = & w_prev_work_done;
#line 3717
  init_completion(& barr.done);
#line 3718
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3719
  wait_for_completion(& barr.done);
#line 3720
  return;
}
}
#line 3722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 3726
  rv = 0;
#line 3729
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 0U) {
#line 3730
    return;
  } else {

  }
#line 3731
  if ((int )mdev->state.ldv_35070.conn > 7) {
#line 3732
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35070.conn);
#line 3732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3736
  drbd_thread_stop(& mdev->asender);
#line 3737
  drbd_free_sock(mdev);
#line 3739
  spin_lock_irq(& mdev->req_lock);
#line 3740
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3741
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3742
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3743
  spin_unlock_irq(& mdev->req_lock);
#line 3755
  drbd_rs_cancel_all(mdev);
#line 3756
  mdev->rs_total = 0UL;
#line 3757
  mdev->rs_failed = 0UL;
#line 3758
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3759
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3762
  del_timer_sync(& mdev->resync_timer);
#line 3763
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3764
  resync_timer_fn((unsigned long )mdev);
#line 3769
  drbd_flush_workqueue(mdev);
#line 3773
  drbd_process_done_ee(mdev);
#line 3775
  kfree((void const   *)mdev->p_uuid);
#line 3776
  mdev->p_uuid = 0;
#line 3778
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 3779
    tl_clear(mdev);
  } else {

  }
#line 3781
  drbd_fail_pending_reads(mdev);
#line 3783
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3785
  drbd_md_sync(mdev);
#line 3787
  fp = FP_DONT_CARE;
#line 3788
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3788
  if (tmp___0 != 0) {
#line 3789
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3790
    put_ldev(mdev);
  } else {

  }
#line 3793
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3794
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_35070.pdsk > 5) {
#line 3795
      tmp___1 = drbd_try_outdate_peer(mdev);
#line 3795
      nps = tmp___1;
#line 3796
      val.i = 0U;
#line 3796
      val.ldv_35070.pdsk = (unsigned char )nps;
#line 3796
      mask.i = 0U;
#line 3796
      mask.ldv_35070.pdsk = 15U;
#line 3796
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3800
  spin_lock_irq(& mdev->req_lock);
#line 3801
  os = mdev->state;
#line 3802
  if ((int )os.ldv_35070.conn > 1) {
#line 3804
    ns = os;
#line 3805
    ns.ldv_35070.conn = 2U;
#line 3806
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3808
  spin_unlock_irq(& mdev->req_lock);
#line 3810
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3812
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3812
    if (tmp___2 == 0) {
#line 3812
      goto ldv_45752;
    } else {

    }
#line 3812
    tmp___3 = get_current();
#line 3812
    __wait.flags = 0U;
#line 3812
    __wait.private = (void *)tmp___3;
#line 3812
    __wait.func = & autoremove_wake_function;
#line 3812
    __wait.task_list.next = & __wait.task_list;
#line 3812
    __wait.task_list.prev = & __wait.task_list;
    ldv_45755: 
#line 3812
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3812
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3812
    if (tmp___4 == 0) {
#line 3812
      goto ldv_45754;
    } else {

    }
#line 3812
    schedule();
#line 3812
    goto ldv_45755;
    ldv_45754: 
#line 3812
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_45752: 
#line 3816
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3816
    if (tmp___5 == 0) {
#line 3816
      goto ldv_45756;
    } else {

    }
#line 3816
    tmp___6 = get_current();
#line 3816
    __wait___0.flags = 0U;
#line 3816
    __wait___0.private = (void *)tmp___6;
#line 3816
    __wait___0.func = & autoremove_wake_function;
#line 3816
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3816
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45759: 
#line 3816
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3816
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3816
    if (tmp___7 == 0) {
#line 3816
      goto ldv_45758;
    } else {

    }
#line 3816
    schedule();
#line 3816
    goto ldv_45759;
    ldv_45758: 
#line 3816
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_45756: 
#line 3818
    spin_lock_irq(& mdev->req_lock);
#line 3820
    h = mdev->ee_hash;
#line 3820
    goto ldv_45761;
    ldv_45760: ;
#line 3821
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3822
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3820
    h = h + 1;
    ldv_45761: ;
#line 3820
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3821
      goto ldv_45760;
    } else {

    }
#line 3824
    kfree((void const   *)mdev->ee_hash);
#line 3825
    mdev->ee_hash = 0;
#line 3826
    mdev->ee_hash_s = 0U;
#line 3829
    h = mdev->tl_hash;
#line 3829
    goto ldv_45764;
    ldv_45763: ;
#line 3830
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3831
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3829
    h = h + 1;
    ldv_45764: ;
#line 3829
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3830
      goto ldv_45763;
    } else {

    }
#line 3833
    kfree((void const   *)mdev->tl_hash);
#line 3834
    mdev->tl_hash = 0;
#line 3835
    mdev->tl_hash_s = 0U;
#line 3836
    spin_unlock_irq(& mdev->req_lock);
#line 3838
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3839
    mdev->cram_hmac_tfm = 0;
#line 3841
    kfree((void const   *)mdev->net_conf);
#line 3842
    mdev->net_conf = 0;
#line 3843
    val___0.i = 0U;
#line 3843
    val___0.ldv_35070.conn = 0U;
#line 3843
    mask___0.i = 0U;
#line 3843
    mask___0.ldv_35070.conn = 31U;
#line 3843
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3853
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3853
  i = (unsigned int )tmp___8;
#line 3854
  if (i != 0U) {
#line 3855
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3856
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3856
  i = (unsigned int )tmp___9;
#line 3857
  if (i != 0U) {
#line 3858
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3860
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3860
  if (tmp___10 == 0) {
#line 3860
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3860);
  } else {

  }
#line 3861
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3861
  if (tmp___11 == 0) {
#line 3861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3861);
  } else {

  }
#line 3862
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3862
  if (tmp___12 == 0) {
#line 3862
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3862);
  } else {

  }
#line 3863
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3863
  if (tmp___13 == 0) {
#line 3863
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3863);
  } else {

  }
#line 3866
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3867
  tmp___14 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3867
  if (tmp___14 == 0) {
#line 3867
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3867);
  } else {

  }
#line 3868
  return;
}
}
#line 3879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3882
  p = & mdev->data.sbuf.handshake;
#line 3885
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3885
  if (tmp != 0) {
#line 3886
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3887
    return (0);
  } else {

  }
#line 3890
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3891
    mutex_unlock(& mdev->data.mutex);
#line 3892
    return (0);
  } else {

  }
#line 3895
  memset((void *)p, 0, 80UL);
#line 3896
  p->protocol_min = 1442840576U;
#line 3897
  p->protocol_max = 1577058304U;
#line 3898
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3900
  mutex_unlock(& mdev->data.mutex);
#line 3901
  return (ok);
}
}
#line 3911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 3914
  p = & mdev->data.rbuf.handshake;
#line 3915
  expect = 72;
#line 3919
  rv = drbd_send_handshake(mdev);
#line 3920
  if (rv == 0) {
#line 3921
    return (0);
  } else {

  }
#line 3923
  rv = drbd_recv_header(mdev, & p->head);
#line 3924
  if (rv == 0) {
#line 3925
    return (0);
  } else {

  }
#line 3927
  if ((unsigned int )p->head.command != 65534U) {
#line 3928
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3928
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (int )p->head.command);
#line 3930
    return (-1);
  } else {

  }
#line 3933
  if ((int )p->head.length != expect) {
#line 3934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, (int )p->head.length);
#line 3936
    return (-1);
  } else {

  }
#line 3939
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3941
  if (rv != expect) {
#line 3942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 3943
    return (0);
  } else {

  }
#line 3946
  tmp___0 = __fswab32(p->protocol_min);
#line 3946
  p->protocol_min = tmp___0;
#line 3947
  tmp___1 = __fswab32(p->protocol_max);
#line 3947
  p->protocol_max = tmp___1;
#line 3948
  if (p->protocol_max == 0U) {
#line 3949
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3951
  if (p->protocol_min > 94U || p->protocol_max <= 85U) {
#line 3953
    goto incompat;
  } else {

  }
#line 3955
  __min1 = 94;
#line 3955
  __min2 = (int )p->protocol_max;
#line 3955
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3957
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 3960
  return (1);
  incompat: 
#line 3963
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 94, p->protocol_min, p->protocol_max);
#line 3967
  return (-1);
}
}
#line 3986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 3990
  response = 0;
#line 3991
  right_response = 0;
#line 3992
  peers_ch = 0;
#line 3994
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3994
  key_len = (unsigned int )tmp;
#line 3999
  desc.tfm = mdev->cram_hmac_tfm;
#line 4000
  desc.flags = 0U;
#line 4002
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4004
  if (rv != 0) {
#line 4005
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4006
    rv = -1;
#line 4007
    goto fail;
  } else {

  }
#line 4010
  get_random_bytes((void *)(& my_challenge), 64);
#line 4012
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4013
  if (rv == 0) {
#line 4014
    goto fail;
  } else {

  }
#line 4016
  rv = drbd_recv_header(mdev, & p);
#line 4017
  if (rv == 0) {
#line 4018
    goto fail;
  } else {

  }
#line 4020
  if ((unsigned int )p.command != 16U) {
#line 4021
    tmp___0 = cmdname((enum drbd_packets )p.command);
#line 4021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (int )p.command);
#line 4023
    rv = 0;
#line 4024
    goto fail;
  } else {

  }
#line 4027
  if ((unsigned int )p.length > 128U) {
#line 4028
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4029
    rv = -1;
#line 4030
    goto fail;
  } else {

  }
#line 4033
  tmp___1 = kmalloc___1((size_t )p.length, 16U);
#line 4033
  peers_ch = (char *)tmp___1;
#line 4034
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4035
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4036
    rv = -1;
#line 4037
    goto fail;
  } else {

  }
#line 4040
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 4042
  if ((int )p.length != rv) {
#line 4043
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4044
    rv = 0;
#line 4045
    goto fail;
  } else {

  }
#line 4048
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4049
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4049
  response = (char *)tmp___2;
#line 4050
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4052
    rv = -1;
#line 4053
    goto fail;
  } else {

  }
#line 4056
  sg_init_table(& sg, 1U);
#line 4057
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 4059
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4060
  if (rv != 0) {
#line 4061
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4062
    rv = -1;
#line 4063
    goto fail;
  } else {

  }
#line 4066
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4067
  if (rv == 0) {
#line 4068
    goto fail;
  } else {

  }
#line 4070
  rv = drbd_recv_header(mdev, & p);
#line 4071
  if (rv == 0) {
#line 4072
    goto fail;
  } else {

  }
#line 4074
  if ((unsigned int )p.command != 17U) {
#line 4075
    tmp___3 = cmdname((enum drbd_packets )p.command);
#line 4075
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (int )p.command);
#line 4077
    rv = 0;
#line 4078
    goto fail;
  } else {

  }
#line 4081
  if ((unsigned int )p.length != resp_size) {
#line 4082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4083
    rv = 0;
#line 4084
    goto fail;
  } else {

  }
#line 4087
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4089
  if ((unsigned int )rv != resp_size) {
#line 4090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4091
    rv = 0;
#line 4092
    goto fail;
  } else {

  }
#line 4095
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4095
  right_response = (char *)tmp___4;
#line 4096
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4097
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4098
    rv = -1;
#line 4099
    goto fail;
  } else {

  }
#line 4102
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4104
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4105
  if (rv != 0) {
#line 4106
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4107
    rv = -1;
#line 4108
    goto fail;
  } else {

  }
#line 4111
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4111
  rv = tmp___5 == 0;
#line 4113
  if (rv != 0) {
#line 4114
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4117
    rv = -1;
  }
  fail: 
#line 4120
  kfree((void const   *)peers_ch);
#line 4121
  kfree((void const   *)response);
#line 4122
  kfree((void const   *)right_response);
#line 4124
  return (rv);
}
}
#line 4128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4130
  mdev = thi->mdev;
#line 4131
  tmp = mdev_to_minor(mdev);
#line 4131
  minor = tmp;
#line 4134
  tmp___0 = get_current();
#line 4134
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4136
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_45809: 
#line 4139
  h = drbd_connect(mdev);
#line 4140
  if (h == 0) {
#line 4141
    drbd_disconnect(mdev);
#line 4142
    tmp___1 = get_current();
#line 4142
    tmp___1->state = 1L;
#line 4143
    schedule_timeout(250L);
  } else {

  }
#line 4145
  if (h == -1) {
#line 4146
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4147
    val.i = 0U;
#line 4147
    val.ldv_35070.conn = 1U;
#line 4147
    mask.i = 0U;
#line 4147
    mask.ldv_35070.conn = 31U;
#line 4147
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4149
  if (h == 0) {
#line 4150
    goto ldv_45809;
  } else {

  }

#line 4151
  if (h > 0) {
#line 4152
    tmp___2 = get_net_conf(mdev);
#line 4152
    if (tmp___2 != 0) {
#line 4153
      drbdd(mdev);
#line 4154
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4158
  drbd_disconnect(mdev);
#line 4160
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4161
  return (0);
}
}
#line 4166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4168
  p = (struct p_req_state_reply *)h;
#line 4170
  tmp = __fswab32(p->retcode);
#line 4170
  retcode = (int )tmp;
#line 4172
  if (retcode > 0) {
#line 4173
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4175
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4176
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4176
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4179
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4181
  return (1);
}
}
#line 4184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4186
  tmp = drbd_send_ping_ack(mdev);
#line 4186
  return (tmp);
}
}
#line 4190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4193
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4194
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4194
  if (tmp == 0) {
#line 4195
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4197
  return (1);
}
}
#line 4200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4202
  p = (struct p_block_ack *)h;
#line 4203
  tmp = __fswab64(p->sector);
#line 4203
  sector = (sector_t )tmp;
#line 4204
  tmp___0 = __fswab32(p->blksize);
#line 4204
  blksize = (int )tmp___0;
#line 4206
  if (mdev->agreed_pro_version <= 88) {
#line 4206
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4206);
  } else {

  }
#line 4208
  tmp___1 = __fswab32(p->seq_num);
#line 4208
  update_peer_seq(mdev, tmp___1);
#line 4210
  drbd_rs_complete_io(mdev, sector);
#line 4211
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4211U);
#line 4213
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4214
  atomic_dec(& mdev->rs_pending_cnt);
#line 4214
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4214
  if (tmp___3 < 0) {
#line 4214
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4214
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4214, tmp___2);
  } else {

  }
#line 4216
  return (1);
}
}
#line 4221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4224
  tmp = tl_hash_slot(mdev, sector);
#line 4224
  slot = tmp;
#line 4228
  n = slot->first;
#line 4228
  goto ldv_45850;
  ldv_45849: ;
#line 4229
  if ((unsigned long )req == (unsigned long )id) {
#line 4230
    if (req->sector != sector) {
#line 4231
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4235
      goto ldv_45848;
    } else {

    }
#line 4237
    return (req);
  } else {

  }
#line 4228
  n = n->next;
  ldv_45850: ;
#line 4228
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4228
    __builtin_prefetch((void const   *)n->next);
#line 4228
    if (1 != 0) {
#line 4228
      __mptr = (struct hlist_node  const  *)n;
#line 4228
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4228
      if (1 != 0) {
#line 4229
        goto ldv_45849;
      } else {
#line 4231
        goto ldv_45848;
      }
    } else {
#line 4231
      goto ldv_45848;
    }
  } else {

  }
  ldv_45848: 
#line 4240
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4242
  return (0);
}
}
#line 4248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4255
  spin_lock_irq(& mdev->req_lock);
#line 4256
  req = (*validator)(mdev, id, sector);
#line 4257
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4257
  if (tmp != 0L) {
#line 4258
    spin_unlock_irq(& mdev->req_lock);
#line 4259
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4260
    return (0);
  } else {

  }
#line 4262
  __req_mod(req, what, & m);
#line 4263
  spin_unlock_irq(& mdev->req_lock);
#line 4265
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4266
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4267
  return (1);
}
}
#line 4270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4272
  p = (struct p_block_ack *)h;
#line 4273
  tmp = __fswab64(p->sector);
#line 4273
  sector = (sector_t )tmp;
#line 4274
  tmp___0 = __fswab32(p->blksize);
#line 4274
  blksize = (int )tmp___0;
#line 4277
  tmp___1 = __fswab32(p->seq_num);
#line 4277
  update_peer_seq(mdev, tmp___1);
#line 4279
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4280
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4280U);
#line 4281
    atomic_dec(& mdev->rs_pending_cnt);
#line 4281
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4281
    if (tmp___3 < 0) {
#line 4281
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4281
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4281, tmp___2);
    } else {

    }
#line 4282
    return (1);
  } else {

  }
#line 4284
  tmp___4 = __fswab16((int )h->command);
#line 4284
  switch ((int )tmp___4) {
  case 23: ;
#line 4286
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4286);
  } else {

  }
#line 4287
  what = write_acked_by_peer_and_sis;
#line 4288
  goto ldv_45878;
  case 22: ;
#line 4290
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4290
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4290);
  } else {

  }
#line 4291
  what = write_acked_by_peer;
#line 4292
  goto ldv_45878;
  case 21: ;
#line 4294
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4294);
  } else {

  }
#line 4295
  what = recv_acked_by_peer;
#line 4296
  goto ldv_45878;
  case 24: ;
#line 4298
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4298);
  } else {

  }
#line 4299
  what = conflict_discarded_by_peer;
#line 4300
  goto ldv_45878;
  default: 
#line 4302
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4302);
#line 4303
  return (0);
  }
  ldv_45878: 
#line 4306
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4306
  return (tmp___5);
}
}
#line 4310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4312
  p = (struct p_block_ack *)h;
#line 4313
  tmp = __fswab64(p->sector);
#line 4313
  sector = (sector_t )tmp;
#line 4315
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4315
  if (tmp___0 != 0) {
#line 4316
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4318
  tmp___1 = __fswab32(p->seq_num);
#line 4318
  update_peer_seq(mdev, tmp___1);
#line 4320
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4321
    tmp___2 = __fswab32(p->blksize);
#line 4321
    size = (int )tmp___2;
#line 4322
    atomic_dec(& mdev->rs_pending_cnt);
#line 4322
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4322
    if (tmp___4 < 0) {
#line 4322
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4322
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4322, tmp___3);
    } else {

    }
#line 4323
    drbd_rs_failed_io(mdev, sector, size);
#line 4324
    return (1);
  } else {

  }
#line 4326
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4326
  return (tmp___5);
}
}
#line 4330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4332
  p = (struct p_block_ack *)h;
#line 4333
  tmp = __fswab64(p->sector);
#line 4333
  sector = (sector_t )tmp;
#line 4335
  tmp___0 = __fswab32(p->seq_num);
#line 4335
  update_peer_seq(mdev, tmp___0);
#line 4336
  tmp___1 = __fswab32(p->blksize);
#line 4336
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4339
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4339
  return (tmp___2);
}
}
#line 4343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4347
  p = (struct p_block_ack *)h;
#line 4349
  tmp = __fswab64(p->sector);
#line 4349
  sector = (sector_t )tmp;
#line 4350
  tmp___0 = __fswab32(p->blksize);
#line 4350
  size = (int )tmp___0;
#line 4352
  tmp___1 = __fswab32(p->seq_num);
#line 4352
  update_peer_seq(mdev, tmp___1);
#line 4354
  atomic_dec(& mdev->rs_pending_cnt);
#line 4354
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4354
  if (tmp___3 < 0) {
#line 4354
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4354
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4354, tmp___2);
  } else {

  }
#line 4356
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4356
  if (tmp___4 != 0) {
#line 4357
    drbd_rs_complete_io(mdev, sector);
#line 4358
    drbd_rs_failed_io(mdev, sector, size);
#line 4359
    put_ldev(mdev);
  } else {

  }
#line 4362
  return (1);
}
}
#line 4365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4367
  p = (struct p_barrier_ack *)h;
#line 4369
  tmp = __fswab32(p->set_size);
#line 4369
  tl_release(mdev, p->barrier, tmp);
#line 4371
  return (1);
}
}
#line 4374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;

  {
#line 4376
  p = (struct p_block_ack *)h;
#line 4381
  tmp = __fswab64(p->sector);
#line 4381
  sector = (sector_t )tmp;
#line 4382
  tmp___0 = __fswab32(p->blksize);
#line 4382
  size = (int )tmp___0;
#line 4384
  tmp___1 = __fswab32(p->seq_num);
#line 4384
  update_peer_seq(mdev, tmp___1);
#line 4386
  tmp___2 = __fswab64(p->block_id);
#line 4386
  if (tmp___2 == 4712ULL) {
#line 4387
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4389
    ov_oos_print(mdev);
  }
#line 4391
  drbd_rs_complete_io(mdev, sector);
#line 4392
  atomic_dec(& mdev->rs_pending_cnt);
#line 4392
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4392
  if (tmp___4 < 0) {
#line 4392
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4392
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4392, tmp___3);
  } else {

  }
#line 4394
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4394
  if (mdev->ov_left == 0UL) {
#line 4395
    tmp___5 = kmalloc___1(24UL, 16U);
#line 4395
    w = (struct drbd_work *)tmp___5;
#line 4396
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4397
      w->cb = & w_ov_finished;
#line 4398
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4400
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4401
      ov_oos_print(mdev);
#line 4402
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4405
  return (1);
}
}
#line 4408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_something_to_ignore_m(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 4411
  return (1);
}
}
#line 4419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4421
  asender_tbl[0].pkt_size = 0UL;
#line 4421
  asender_tbl[0].process = 0;
#line 4421
  asender_tbl[1].pkt_size = 0UL;
#line 4421
  asender_tbl[1].process = 0;
#line 4421
  asender_tbl[2].pkt_size = 0UL;
#line 4421
  asender_tbl[2].process = 0;
#line 4421
  asender_tbl[3].pkt_size = 0UL;
#line 4421
  asender_tbl[3].process = 0;
#line 4421
  asender_tbl[4].pkt_size = 0UL;
#line 4421
  asender_tbl[4].process = 0;
#line 4421
  asender_tbl[5].pkt_size = 0UL;
#line 4421
  asender_tbl[5].process = 0;
#line 4421
  asender_tbl[6].pkt_size = 0UL;
#line 4421
  asender_tbl[6].process = 0;
#line 4421
  asender_tbl[7].pkt_size = 0UL;
#line 4421
  asender_tbl[7].process = 0;
#line 4421
  asender_tbl[8].pkt_size = 0UL;
#line 4421
  asender_tbl[8].process = 0;
#line 4421
  asender_tbl[9].pkt_size = 0UL;
#line 4421
  asender_tbl[9].process = 0;
#line 4421
  asender_tbl[10].pkt_size = 0UL;
#line 4421
  asender_tbl[10].process = 0;
#line 4421
  asender_tbl[11].pkt_size = 0UL;
#line 4421
  asender_tbl[11].process = 0;
#line 4421
  asender_tbl[12].pkt_size = 0UL;
#line 4421
  asender_tbl[12].process = 0;
#line 4421
  asender_tbl[13].pkt_size = 0UL;
#line 4421
  asender_tbl[13].process = 0;
#line 4421
  asender_tbl[14].pkt_size = 0UL;
#line 4421
  asender_tbl[14].process = 0;
#line 4421
  asender_tbl[15].pkt_size = 0UL;
#line 4421
  asender_tbl[15].process = 0;
#line 4421
  asender_tbl[16].pkt_size = 0UL;
#line 4421
  asender_tbl[16].process = 0;
#line 4421
  asender_tbl[17].pkt_size = 0UL;
#line 4421
  asender_tbl[17].process = 0;
#line 4421
  asender_tbl[18].pkt_size = 0UL;
#line 4421
  asender_tbl[18].process = 0;
#line 4421
  asender_tbl[19].pkt_size = 8UL;
#line 4421
  asender_tbl[19].process = & got_Ping;
#line 4421
  asender_tbl[20].pkt_size = 8UL;
#line 4421
  asender_tbl[20].process = & got_PingAck;
#line 4421
  asender_tbl[21].pkt_size = 32UL;
#line 4421
  asender_tbl[21].process = & got_BlockAck;
#line 4421
  asender_tbl[22].pkt_size = 32UL;
#line 4421
  asender_tbl[22].process = & got_BlockAck;
#line 4421
  asender_tbl[23].pkt_size = 32UL;
#line 4421
  asender_tbl[23].process = & got_BlockAck;
#line 4421
  asender_tbl[24].pkt_size = 32UL;
#line 4421
  asender_tbl[24].process = & got_BlockAck;
#line 4421
  asender_tbl[25].pkt_size = 32UL;
#line 4421
  asender_tbl[25].process = & got_NegAck;
#line 4421
  asender_tbl[26].pkt_size = 32UL;
#line 4421
  asender_tbl[26].process = & got_NegDReply;
#line 4421
  asender_tbl[27].pkt_size = 32UL;
#line 4421
  asender_tbl[27].process = & got_NegRSDReply;
#line 4421
  asender_tbl[28].pkt_size = 16UL;
#line 4421
  asender_tbl[28].process = & got_BarrierAck;
#line 4421
  asender_tbl[29].pkt_size = 12UL;
#line 4421
  asender_tbl[29].process = & got_RqSReply;
#line 4421
  asender_tbl[30].pkt_size = 0UL;
#line 4421
  asender_tbl[30].process = 0;
#line 4421
  asender_tbl[31].pkt_size = 0UL;
#line 4421
  asender_tbl[31].process = 0;
#line 4421
  asender_tbl[32].pkt_size = 32UL;
#line 4421
  asender_tbl[32].process = & got_OVResult;
#line 4421
  asender_tbl[33].pkt_size = 0UL;
#line 4421
  asender_tbl[33].process = 0;
#line 4421
  asender_tbl[34].pkt_size = 32UL;
#line 4421
  asender_tbl[34].process = & got_IsInSync;
#line 4421
  asender_tbl[35].pkt_size = 0UL;
#line 4421
  asender_tbl[35].process = 0;
#line 4421
  asender_tbl[36].pkt_size = 0UL;
#line 4421
  asender_tbl[36].process = 0;
#line 4421
  asender_tbl[37].pkt_size = 0UL;
#line 4421
  asender_tbl[37].process = 0;
#line 4421
  asender_tbl[38].pkt_size = 0UL;
#line 4421
  asender_tbl[38].process = 0;
#line 4421
  asender_tbl[39].pkt_size = 16UL;
#line 4421
  asender_tbl[39].process = & got_something_to_ignore_m;
#line 4421
  asender_tbl[40].pkt_size = 0UL;
#line 4421
  asender_tbl[40].process = 0;
#line 4441
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4442
    return (0);
  } else {

  }
#line 4443
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u32 tmp___12 ;
  long tmp___13 ;
  __u16 tmp___14 ;
  __u16 tmp___15 ;
  __u32 tmp___16 ;
  long tmp___17 ;
  int _b___0 ;
  int tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4448
  mdev = thi->mdev;
#line 4449
  h = & mdev->meta.rbuf.header;
#line 4450
  cmd = 0;
#line 4453
  buf = (void *)h;
#line 4454
  received = 0;
#line 4455
  expect = 8;
#line 4458
  tmp = mdev_to_minor(mdev);
#line 4458
  tmp___0 = get_current();
#line 4458
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4460
  tmp___1 = get_current();
#line 4460
  tmp___1->policy = 2U;
#line 4461
  tmp___2 = get_current();
#line 4461
  tmp___2->rt_priority = 2U;
#line 4463
  goto ldv_45960;
  ldv_45964: 
#line 4464
  drbd_thread_current_set_cpu(mdev);
#line 4465
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4465
  if (tmp___4 != 0) {
#line 4466
    tmp___3 = drbd_send_ping(mdev);
#line 4466
    _b = tmp___3 == 0;
#line 4466
    if (_b != 0) {
#line 4466
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4466);
    } else {

    }
#line 4466
    if (_b != 0) {
#line 4466
      goto reconnect;
    } else {

    }
#line 4467
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4473
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4473
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4473
    if (tmp___5 > 3) {
#line 4475
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_45959: 
#line 4477
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4478
  tmp___6 = get_current();
#line 4478
  flush_signals(tmp___6);
#line 4479
  tmp___7 = drbd_process_done_ee(mdev);
#line 4479
  if (tmp___7 == 0) {
#line 4480
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "process_done_ee() = NOT_OK\n");
#line 4481
    goto reconnect;
  } else {

  }
#line 4484
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4485
  spin_lock_irq(& mdev->req_lock);
#line 4486
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4487
  spin_unlock_irq(& mdev->req_lock);
#line 4491
  if (empty != 0) {
#line 4492
    goto ldv_45958;
  } else {

  }
#line 4493
  goto ldv_45959;
  ldv_45958: ;
#line 4495
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4496
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4499
  tmp___8 = get_current();
#line 4499
  tmp___9 = signal_pending(tmp___8);
#line 4499
  if (tmp___9 != 0) {
#line 4500
    goto ldv_45960;
  } else {

  }
#line 4502
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4504
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4506
  tmp___10 = get_current();
#line 4506
  flush_signals(tmp___10);
#line 4518
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4518
  if (tmp___11 != 0L) {
#line 4519
    received = received + rv;
#line 4520
    buf = buf + (unsigned long )rv;
  } else
#line 4521
  if (rv == 0) {
#line 4522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4523
    goto reconnect;
  } else
#line 4524
  if (rv == -11) {
#line 4525
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4527
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4528
      goto reconnect;
    } else {

    }
#line 4530
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4531
    goto ldv_45960;
  } else
#line 4532
  if (rv == -4) {
#line 4533
    goto ldv_45960;
  } else {
#line 4535
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4536
    goto reconnect;
  }
#line 4539
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4540
    tmp___13 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4540
    if (tmp___13 != 0L) {
#line 4541
      tmp___12 = __fswab32(h->magic);
#line 4541
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___12, (int )h->command, (int )h->length);
#line 4544
      goto reconnect;
    } else {

    }
#line 4546
    tmp___14 = __fswab16((int )h->command);
#line 4546
    cmd = get_asender_cmd((int )tmp___14);
#line 4547
    tmp___15 = __fswab16((int )h->length);
#line 4547
    len = (int )tmp___15;
#line 4548
    tmp___17 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4548
    if (tmp___17 != 0L) {
#line 4549
      tmp___16 = __fswab32(h->magic);
#line 4549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___16, (int )h->command, (int )h->length);
#line 4552
      goto disconnect;
    } else {

    }
#line 4554
    expect = (int )cmd->pkt_size;
#line 4555
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4555
    if (_b___0 != 0) {
#line 4555
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4555);
    } else {

    }
#line 4555
    if (_b___0 != 0) {
#line 4556
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4558
  if (received == expect) {
#line 4559
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4559
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4559);
    } else {

    }
#line 4560
    tmp___18 = (*(cmd->process))(mdev, h);
#line 4560
    if (tmp___18 == 0) {
#line 4561
      goto reconnect;
    } else {

    }
#line 4563
    buf = (void *)h;
#line 4564
    received = 0;
#line 4565
    expect = 8;
#line 4566
    cmd = 0;
  } else {

  }
  ldv_45960: 
#line 4463
  tmp___19 = get_t_state(thi);
#line 4463
  if ((unsigned int )tmp___19 == 1U) {
#line 4464
    goto ldv_45964;
  } else {

  }

#line 4570
  if (0) {
    reconnect: 
#line 4572
    val.i = 0U;
#line 4572
    val.ldv_35070.conn = 5U;
#line 4572
    mask.i = 0U;
#line 4572
    mask.ldv_35070.conn = 31U;
#line 4572
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4574
  if (0) {
    disconnect: 
#line 4576
    val___0.i = 0U;
#line 4576
    val___0.ldv_35070.conn = 1U;
#line 4576
    mask___0.i = 0U;
#line 4576
    mask___0.ldv_35070.conn = 31U;
#line 4576
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4578
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4580
  if ((int )mdev->state.ldv_35070.conn > 9) {
#line 4580
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4580);
  } else {

  }
#line 4581
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4583
  return (0);
}
}
#line 4623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4635
  LDV_IN_INTERRUPT = 1;
#line 4644
  ldv_initialize();
#line 4646
  goto ldv_45993;
  ldv_45992: 
#line 4649
  tmp = nondet_int();
#line 4649
  switch (tmp) {
  default: ;
#line 4651
  goto ldv_45991;
  }
  ldv_45991: ;
  ldv_45993: 
#line 4646
  tmp___0 = nondet_int();
#line 4646
  if (tmp___0 != 0) {
#line 4647
    goto ldv_45992;
  } else {

  }


#line 4660
  ldv_check_final_state();
#line 4663
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 594 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 596
  __hlist_del(n);
#line 597
  n->next = 0xdead000000100100UL;
#line 598
  n->pprev = 0xdead000000200200UL;
#line 599
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 304 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 308
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 104 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 322 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 324
  rcu_read_lock_sched_notrace();
#line 326
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 328
  return;
}
}
#line 344 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 346
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 348
  rcu_read_lock_sched_notrace();
#line 349
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11907: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_11907;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___2(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 229
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 707 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1141
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1391
mempool_t *drbd_request_mempool ;
#line 1407
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1409
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1957
  atomic_inc(& mdev->ap_pending_cnt);
#line 1958
  return;
}
}
#line 2109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2111
  mxb = 1000000;
#line 2112
  tmp = get_net_conf(mdev);
#line 2112
  if (tmp != 0) {
#line 2113
    mxb = (mdev->net_conf)->max_buffers;
#line 2114
    put_net_conf(mdev);
  } else {

  }
#line 2116
  return (mxb);
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35070.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_43501;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_43501: ;
#line 2160
  switch ((unsigned int )s.ldv_35070.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_43521;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_43521: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2215
  tmp = get_current();
#line 2215
  wait.flags = 0U;
#line 2215
  wait.private = (void *)tmp;
#line 2215
  wait.func = & autoremove_wake_function;
#line 2215
  wait.task_list.next = & wait.task_list;
#line 2215
  wait.task_list.prev = & wait.task_list;
#line 2225
  spin_lock_irq(& mdev->req_lock);
#line 2226
  goto ldv_43537;
  ldv_43536: 
#line 2227
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2228
  spin_unlock_irq(& mdev->req_lock);
#line 2229
  schedule();
#line 2230
  finish_wait(& mdev->misc_wait, & wait);
#line 2231
  spin_lock_irq(& mdev->req_lock);
  ldv_43537: 
#line 2226
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2226
  if (tmp___0 == 0) {
#line 2227
    goto ldv_43536;
  } else {

  }
#line 2233
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2234
  spin_unlock_irq(& mdev->req_lock);
#line 2235
  return;
}
}
#line 2237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2239
  tmp = drbd_get_max_buffers(mdev);
#line 2239
  mxb = tmp;
#line 2240
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2240
  ap_bio = tmp___0;
#line 2242
  if (ap_bio < 0) {
#line 2242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2242);
  } else {

  }
#line 2246
  if (ap_bio < mxb) {
#line 2247
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2248
  if (ap_bio == 0) {
#line 2248
    tmp___2 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2248
    if (tmp___2 != 0) {
#line 2249
      tmp___1 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2249
      if (tmp___1 == 0) {
#line 2250
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2251
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_43645: ;
#line 208
    goto ldv_43645;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_43650: ;
#line 217
    goto ldv_43650;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 251
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 251
  req = (struct drbd_request *)tmp;
#line 253
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 253
  if (tmp___0 != 0L) {
#line 254
    bio = bio_clone(bio_src, 16U);
#line 256
    req->rq_state = 0UL;
#line 257
    req->mdev = mdev;
#line 258
    req->master_bio = bio_src;
#line 259
    req->private_bio = bio;
#line 260
    req->epoch = 0U;
#line 261
    req->sector = bio->bi_sector;
#line 262
    req->size = bio->bi_size;
#line 263
    req->start_time = jiffies;
#line 264
    INIT_HLIST_NODE(& req->colision);
#line 265
    INIT_LIST_HEAD(& req->tl_requests);
#line 266
    INIT_LIST_HEAD(& req->w.list);
#line 268
    bio->bi_private = (void *)req;
#line 269
    bio->bi_end_io = & drbd_endio_pri;
#line 270
    bio->bi_next = 0;
  } else {

  }
#line 272
  return (req);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 277
  mempool_free((void *)req, drbd_request_mempool);
#line 278
  return;
}
}
#line 293
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_43719;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_43719;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_43719;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_43719;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_43719: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_43752;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_43752;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_43752;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_43752;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_43752: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 68
  s = req->rq_state;
#line 72
  if ((int )rw == 1) {
#line 79
    list_del(& req->tl_requests);
#line 84
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 85
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             85U);
    } else {

    }
#line 87
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 88
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         88U);
    } else {

    }
#line 100
    if ((s & 7UL) != 0UL) {
#line 101
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 101
      if (tmp___0 != 0) {
#line 102
        drbd_al_complete_io(mdev, req->sector);
#line 103
        put_ldev(mdev);
      } else {
#line 104
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 104
        if (tmp != 0) {
#line 105
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 112
  drbd_req_free(req);
#line 113
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 124
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 124
  if (tmp != 0) {
#line 125
    return;
  } else {

  }
#line 127
  b = mdev->newest_tle;
#line 128
  b->w.cb = & w_send_barrier;
#line 133
  inc_ap_pending(mdev);
#line 134
  drbd_queue_work(& mdev->data.work, & b->w);
#line 135
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 136
  return;
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 141
  s = req->rq_state;
#line 149
  if ((int )mdev->state.ldv_35070.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 151
    queue_barrier(mdev);
  } else {

  }
#line 156
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 157
    sector = req->sector;
#line 158
    size = (int const   )req->size;
#line 164
    slot = tl_hash_slot___0(mdev, sector);
#line 165
    n = slot->first;
#line 165
    goto ldv_43795;
    ldv_43794: 
#line 166
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 166
    if (tmp != 0) {
#line 167
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 165
    n = n->next;
    ldv_43795: ;
#line 165
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 165
      __builtin_prefetch((void const   *)n->next);
#line 165
      if (1 != 0) {
#line 165
        __mptr = (struct hlist_node  const  *)n;
#line 165
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 165
        if (1 != 0) {
#line 166
          goto ldv_43794;
        } else {
#line 168
          goto ldv_43796;
        }
      } else {
#line 168
        goto ldv_43796;
      }
    } else {

    }
    ldv_43796: 
#line 188
    slot = ee_hash_slot___0(mdev, req->sector);
#line 189
    n = slot->first;
#line 189
    goto ldv_43803;
    ldv_43802: 
#line 190
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 190
    if (tmp___0 != 0) {
#line 191
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 192
      goto ldv_43801;
    } else {

    }
#line 189
    n = n->next;
    ldv_43803: ;
#line 189
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 189
      __builtin_prefetch((void const   *)n->next);
#line 189
      if (1 != 0) {
#line 189
        __mptr___0 = (struct hlist_node  const  *)n;
#line 189
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 189
        if (1 != 0) {
#line 190
          goto ldv_43802;
        } else {
#line 192
          goto ldv_43801;
        }
      } else {
#line 192
        goto ldv_43801;
      }
    } else {

    }
    ldv_43801: ;
  } else {

  }
#line 195
  return;
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 202
  bio_endio(m->bio, m->error);
#line 203
  dec_ap_bio(mdev);
#line 204
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 214
  s = req->rq_state;
#line 215
  mdev = req->mdev;
#line 217
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 228
  if ((s & 16UL) != 0UL) {
#line 229
    return;
  } else {

  }
#line 230
  if ((s & 8UL) != 0UL) {
#line 231
    return;
  } else {

  }
#line 232
  if ((int )s & 1) {
#line 233
    return;
  } else {

  }
#line 235
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 257
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 258
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 258
    error = (int )tmp;
#line 262
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 262
    if (tmp___0 == 0) {
#line 263
      hlist_del(& req->colision);
    } else
#line 265
    if ((s & 504UL) != 0UL) {
#line 265
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              265);
    } else {

    }
#line 268
    if (rw == 1) {
#line 269
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 272
    _drbd_end_io_acct(mdev, req);
#line 274
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 275
    m->bio = req->master_bio;
#line 276
    req->master_bio = 0;
  } else {

  }
#line 279
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 284
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 285
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 315
  mdev = req->mdev;
#line 316
  sector = req->sector;
#line 317
  size = (int const   )req->size;
#line 323
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 323
  if (tmp == 0) {
#line 323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            323);
  } else {

  }
#line 325
  tmp___0 = get_net_conf(mdev);
#line 325
  if (tmp___0 == 0) {
#line 326
    return (0);
  } else {

  }
#line 329
  _b = mdev->tl_hash_s == 0U;
#line 329
  if (_b != 0) {
#line 329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            329);
  } else {

  }
#line 329
  if (_b != 0) {
#line 330
    goto out_no_conflict;
  } else {

  }
#line 331
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 331
  if (tmp___1 != 0L) {
#line 331
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (331), "i" (12UL));
    ldv_43831: ;
#line 331
    goto ldv_43831;
  } else {

  }
#line 334
  slot = tl_hash_slot___0(mdev, sector);
#line 335
  n = slot->first;
#line 335
  goto ldv_43838;
  ldv_43837: 
#line 336
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 336
  if (tmp___4 != 0) {
#line 337
    tmp___2 = get_current();
#line 337
    tmp___3 = get_current();
#line 337
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 343
    goto out_conflict;
  } else {

  }
#line 335
  n = n->next;
  ldv_43838: ;
#line 335
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 335
    __builtin_prefetch((void const   *)n->next);
#line 335
    if (1 != 0) {
#line 335
      __mptr = (struct hlist_node  const  *)n;
#line 335
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 335
      if (1 != 0) {
#line 336
        goto ldv_43837;
      } else {
#line 338
        goto ldv_43839;
      }
    } else {
#line 338
      goto ldv_43839;
    }
  } else {

  }
  ldv_43839: ;
#line 347
  if (mdev->ee_hash_s != 0U) {
#line 349
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 349
    if (tmp___5 != 0L) {
#line 349
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (349), "i" (12UL));
      ldv_43840: ;
#line 349
      goto ldv_43840;
    } else {

    }
#line 352
    slot = ee_hash_slot___0(mdev, sector);
#line 353
    n = slot->first;
#line 353
    goto ldv_43846;
    ldv_43845: 
#line 354
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 354
    if (tmp___8 != 0) {
#line 355
      tmp___6 = get_current();
#line 355
      tmp___7 = get_current();
#line 355
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 361
      goto out_conflict;
    } else {

    }
#line 353
    n = n->next;
    ldv_43846: ;
#line 353
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 353
      __builtin_prefetch((void const   *)n->next);
#line 353
      if (1 != 0) {
#line 353
        __mptr___0 = (struct hlist_node  const  *)n;
#line 353
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 353
        if (1 != 0) {
#line 354
          goto ldv_43845;
        } else {
#line 356
          goto ldv_43847;
        }
      } else {
#line 356
        goto ldv_43847;
      }
    } else {

    }
    ldv_43847: ;
  } else {

  }
  out_no_conflict: 
#line 370
  put_net_conf(mdev);
#line 371
  return (0);
  out_conflict: 
#line 374
  put_net_conf(mdev);
#line 375
  return (1);
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 393
  mdev = req->mdev;
#line 394
  m->bio = 0;
#line 396
  switch ((unsigned int )what) {
  default: 
#line 398
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          398);
#line 399
  goto ldv_43855;
  case 1U: ;
#line 410
  if ((req->rq_state & 504UL) != 0UL) {
#line 410
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            410);
  } else {

  }
#line 411
  req->rq_state = req->rq_state | 8UL;
#line 412
  inc_ap_pending(mdev);
#line 413
  goto ldv_43855;
  case 2U: ;
#line 417
  if ((req->rq_state & 7UL) != 0UL) {
#line 417
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            417);
  } else {

  }
#line 418
  req->rq_state = req->rq_state | 1UL;
#line 419
  goto ldv_43855;
  case 20U: ;
#line 422
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 423
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 425
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 427
  req->rq_state = req->rq_state | 6UL;
#line 428
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 430
  _req_may_be_done(req, m);
#line 431
  put_ldev(mdev);
#line 432
  goto ldv_43855;
  case 19U: 
#line 435
  req->rq_state = req->rq_state | 2UL;
#line 436
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 438
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 439
  _req_may_be_done(req, m);
#line 440
  put_ldev(mdev);
#line 441
  goto ldv_43855;
  case 18U: 
#line 445
  req->rq_state = req->rq_state | 2UL;
#line 446
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 447
  _req_may_be_done(req, m);
#line 448
  put_ldev(mdev);
#line 449
  goto ldv_43855;
  case 17U: 
#line 452
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         452U);
#line 454
  req->rq_state = req->rq_state | 2UL;
#line 455
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 457
  if ((req->rq_state & 504UL) != 0UL) {
#line 457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            457);
  } else {

  }
#line 459
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 460
  put_ldev(mdev);
#line 464
  if (*((unsigned int *)mdev + 455UL) != 65536U) {
#line 465
    _req_may_be_done(req, m);
#line 466
    goto ldv_43855;
  } else {

  }
#line 470
  req->rq_state = req->rq_state | 8UL;
#line 471
  inc_ap_pending(mdev);
  case 4U: 
#line 484
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 484
  hlist_add_head(& req->colision, tmp);
#line 486
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 488
  if ((req->rq_state & 8UL) == 0UL) {
#line 488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            488);
  } else {

  }
#line 489
  req->rq_state = req->rq_state | 16UL;
#line 490
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 493
  drbd_queue_work(& mdev->data.work, & req->w);
#line 494
  goto ldv_43855;
  case 3U: 
#line 500
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 500
  hlist_add_head(& req->colision, tmp___0);
#line 520
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 524
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 524
  if (tmp___1 != 0) {
#line 524
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            524);
  } else {

  }
#line 526
  req->epoch = (mdev->newest_tle)->br_number;
#line 527
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 531
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 534
  if ((req->rq_state & 8UL) == 0UL) {
#line 534
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            534);
  } else {

  }
#line 535
  req->rq_state = req->rq_state | 16UL;
#line 536
  req->w.cb = & w_send_dblock;
#line 537
  drbd_queue_work(& mdev->data.work, & req->w);
#line 540
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 541
    queue_barrier(mdev);
  } else {

  }
#line 543
  goto ldv_43855;
  case 5U: ;
  case 6U: 
#line 550
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 553
  _req_may_be_done(req, m);
#line 554
  goto ldv_43855;
  case 7U: ;
#line 558
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 562
    if ((req->rq_state & 8UL) != 0UL) {
#line 563
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 563
      if (tmp___2 != 0) {
#line 563
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 563
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 563
      if (tmp___4 < 0) {
#line 563
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 563
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 563, tmp___3);
      } else {

      }
#line 564
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 565
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 571
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 572
  req->rq_state = req->rq_state | 32UL;
#line 578
  _req_may_be_done(req, m);
#line 579
  goto ldv_43855;
  case 9U: 
#line 582
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 587
  if ((req->rq_state & 8UL) != 0UL) {
#line 588
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 588
    if (tmp___5 != 0) {
#line 588
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 588
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 588
    if (tmp___7 < 0) {
#line 588
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 588
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 588, tmp___6);
    } else {

    }
  } else {

  }
#line 589
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 590
  req->rq_state = req->rq_state | 64UL;
#line 593
  if ((req->rq_state & 16UL) == 0UL) {
#line 594
    _req_may_be_done(req, m);
  } else {

  }
#line 595
  goto ldv_43855;
  case 12U: 
#line 598
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 603
  if ((unsigned int )what == 13U) {
#line 604
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 607
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 625
  req->rq_state = req->rq_state | 128UL;
#line 626
  if ((req->rq_state & 8UL) == 0UL) {
#line 626
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            626);
  } else {

  }
#line 627
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 627
  if (tmp___8 != 0) {
#line 627
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 627
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 627
  if (tmp___10 < 0) {
#line 627
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 627
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 627, tmp___9);
  } else {

  }
#line 628
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 629
  _req_may_be_done(req, m);
#line 630
  goto ldv_43855;
  case 14U: ;
#line 634
  if ((req->rq_state & 8UL) != 0UL) {
#line 635
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 635
    if (tmp___11 != 0) {
#line 635
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 635
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 635
    if (tmp___13 < 0) {
#line 635
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 635
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 635, tmp___12);
    } else {

    }
  } else {

  }
#line 636
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 638
  req->rq_state = req->rq_state | 64UL;
#line 639
  _req_may_be_done(req, m);
#line 641
  goto ldv_43855;
  case 15U: ;
#line 644
  if ((req->rq_state & 8UL) != 0UL) {
#line 648
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 649
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 651
  if ((req->rq_state & 32UL) == 0UL) {
#line 651
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            651);
  } else {

  }
#line 652
  req->rq_state = req->rq_state | 64UL;
#line 653
  _req_may_be_done(req, m);
#line 654
  goto ldv_43855;
  case 16U: ;
#line 657
  if ((req->rq_state & 8UL) == 0UL) {
#line 657
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            657);
  } else {

  }
#line 658
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 658
  if (tmp___14 != 0) {
#line 658
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 658
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 658
  if (tmp___16 < 0) {
#line 658
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 658, tmp___15);
  } else {

  }
#line 659
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 660
  req->rq_state = req->rq_state | 192UL;
#line 661
  _req_may_be_done(req, m);
#line 662
  goto ldv_43855;
  }
  ldv_43855: ;
#line 664
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 678
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 679
    return (1);
  } else {

  }
#line 680
  if ((int )mdev->state.ldv_35070.disk > 4) {
#line 681
    return (0);
  } else {

  }
#line 682
  if ((int )mdev->state.ldv_35070.disk <= 3) {
#line 683
    return (0);
  } else {

  }
#line 685
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 686
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 688
  if (sector >= nr_sectors) {
#line 688
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            688);
  } else {

  }
#line 689
  if (esector >= nr_sectors) {
#line 689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            689);
  } else {

  }
#line 691
  sbnr = sector >> 3;
#line 692
  ebnr = esector >> 3;
#line 694
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 694
  return (tmp == 0);
}
}
#line 697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 699
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 700
  size = (int const   )bio->bi_size;
#line 701
  sector = bio->bi_sector;
#line 702
  b = 0;
#line 705
  err = -5;
#line 706
  ret = 0;
#line 709
  req = drbd_req_new(mdev, bio);
#line 710
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 711
    dec_ap_bio(mdev);
#line 714
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 715
    bio_endio(bio, -12);
#line 716
    return (0);
  } else {

  }
#line 719
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 720
  if (local == 0) {
#line 721
    bio_put(req->private_bio);
#line 722
    req->private_bio = 0;
  } else {

  }
#line 724
  if (rw == 1) {
#line 725
    remote = 1;
  } else {
#line 728
    if (local != 0) {
#line 729
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 729
      if (tmp == 0) {
#line 735
        local = 0;
#line 736
        bio_put(req->private_bio);
#line 737
        req->private_bio = 0;
#line 738
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 741
    remote = local == 0 && (int )mdev->state.ldv_35070.pdsk > 7;
  }
#line 752
  if ((rw == 1024 && (int )mdev->state.ldv_35070.disk > 3) && local == 0) {
#line 753
    err = -11;
#line 754
    goto fail_and_free_req;
  } else {

  }
#line 762
  if (rw == 1 && local != 0) {
#line 763
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 765
  remote = remote != 0 && (*((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35070.conn > 9));
#line 769
  if ((local == 0 && remote == 0) && (unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 770
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 771
    goto fail_free_complete;
  } else {

  }
#line 780
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 780
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 780
    if (tmp___1 != 0) {
      allocate_barrier: 
#line 784
      tmp___0 = kmalloc___2(56UL, 16U);
#line 784
      b = (struct drbd_tl_epoch *)tmp___0;
#line 785
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 786
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 787
        err = -12;
#line 788
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 793
  spin_lock_irq(& mdev->req_lock);
#line 795
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 800
    ret = 1;
#line 801
    spin_unlock_irq(& mdev->req_lock);
#line 802
    goto fail_free_complete;
  } else {

  }
#line 805
  if (remote != 0) {
#line 806
    remote = *((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35070.conn > 9);
#line 809
    if (remote == 0) {
#line 810
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 811
    if (local == 0 && remote == 0) {
#line 812
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 813
      spin_unlock_irq(& mdev->req_lock);
#line 814
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 818
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 819
    mdev->unused_spare_tle = b;
#line 820
    b = 0;
  } else {

  }
#line 822
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 822
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 822
    if (tmp___2 != 0) {
#line 827
      spin_unlock_irq(& mdev->req_lock);
#line 828
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 833
  _drbd_start_io_acct(mdev, req, bio);
#line 845
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 845
    tmp___4 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 845
    if (tmp___4 != 0) {
#line 847
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 848
      mdev->unused_spare_tle = 0;
    } else {
#line 845
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 850
  if (remote != 0 && rw == 1) {
#line 850
    tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 850
    if (tmp___3 != 0) {
#line 850
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              851);
    } else {

    }
  } else {

  }
#line 869
  if (remote != 0) {
#line 870
    _req_mod(req, to_be_send);
  } else {

  }
#line 871
  if (local != 0) {
#line 872
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 877
  if (rw == 1) {
#line 877
    tmp___8 = _req_conflicts(req);
#line 877
    if (tmp___8 != 0) {
#line 884
      if (local != 0) {
#line 885
        bio_put(req->private_bio);
#line 886
        req->private_bio = 0;
#line 887
        drbd_al_complete_io(mdev, req->sector);
#line 888
        put_ldev(mdev);
#line 889
        local = 0;
      } else {

      }
#line 891
      if (remote != 0) {
#line 892
        tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 892
        if (tmp___5 != 0) {
#line 892
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 892
        tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 892
        if (tmp___7 < 0) {
#line 892
          tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 892
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                  "drbd_make_request_common", 892, tmp___6);
        } else {

        }
      } else {

      }
#line 893
      _drbd_end_io_acct(mdev, req);
#line 895
      bio_endio(req->master_bio, 0);
#line 896
      req->master_bio = 0;
#line 897
      dec_ap_bio(mdev);
#line 898
      drbd_req_free(req);
#line 899
      remote = 0;
    } else {

    }
  } else {

  }
#line 904
  if (remote != 0) {
#line 909
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 913
  spin_unlock_irq(& mdev->req_lock);
#line 914
  kfree((void const   *)b);
#line 916
  if (local != 0) {
#line 917
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 919
    tmp___9 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 919
    if (tmp___9 != 0) {
#line 922
      bio_endio(req->private_bio, -5);
    } else {
#line 924
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 929
  drbd_plug_device(mdev);
#line 931
  return (0);
  fail_free_complete: ;
#line 934
  if (rw == 1 && local != 0) {
#line 935
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 937
  if (local != 0) {
#line 938
    bio_put(req->private_bio);
#line 939
    req->private_bio = 0;
#line 940
    put_ldev(mdev);
  } else {

  }
#line 942
  if (ret == 0) {
#line 943
    bio_endio(bio, err);
  } else {

  }
#line 945
  drbd_req_free(req);
#line 946
  dec_ap_bio(mdev);
#line 947
  kfree((void const   *)b);
#line 949
  return (ret);
}
}
#line 957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 959
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 961
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 961
    if (tmp___1 != 0) {
#line 962
      tmp = get_current();
#line 962
      tmp___0 = get_current();
#line 962
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 968
    return (1);
  } else {

  }
#line 980
  if ((int )mdev->state.ldv_35070.disk <= 7 && (int )mdev->state.ldv_35070.pdsk <= 7) {
#line 981
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 981
    if (tmp___2 != 0) {
#line 982
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sorry, I have no access to good data anymore.\n");
    } else {

    }
#line 983
    return (1);
  } else {

  }
#line 986
  return (0);
}
}
#line 989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 992
  mdev = (struct drbd_conf *)q->queuedata;
#line 994
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 994
  if (tmp != 0) {
#line 995
    bio_endio(bio, -1);
#line 996
    return (0);
  } else {

  }
#line 1007
  tmp___0 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 1007
  if (tmp___0 != 0L) {
#line 1007
    tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1007
    if (tmp___1 != 0) {
#line 1009
      bio_endio(bio, -95);
#line 1010
      return (0);
    } else {

    }
  } else {

  }
#line 1016
  if (bio->bi_size == 0U) {
#line 1016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1016);
  } else {

  }
#line 1017
  if ((bio->bi_size & 511U) != 0U) {
#line 1017
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1017);
  } else {

  }
#line 1018
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1018);
  } else {

  }
#line 1022
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1023
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1025
  tmp___3 = __builtin_expect(s_enr == e_enr, 1L);
#line 1025
  if (tmp___3 != 0L) {
#line 1026
    inc_ap_bio(mdev, 1);
#line 1027
    tmp___2 = drbd_make_request_common(mdev, bio);
#line 1027
    return (tmp___2);
  } else {

  }
#line 1032
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1034
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1038
    bio_endio(bio, -22);
  } else {
#line 1050
    sect = bio->bi_sector;
#line 1051
    sps = 64;
#line 1052
    mask = sps + -1;
#line 1053
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1054
    bp = bio_split(bio, (int )first_sectors);
#line 1065
    inc_ap_bio(mdev, 3);
#line 1067
    if (s_enr + 1U != e_enr) {
#line 1067
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1067);
    } else {

    }
#line 1069
    goto ldv_43939;
    ldv_43938: 
#line 1070
    inc_ap_bio(mdev, 1);
    ldv_43939: 
#line 1069
    tmp___4 = drbd_make_request_common(mdev, & bp->bio1);
#line 1069
    if (tmp___4 != 0) {
#line 1070
      goto ldv_43938;
    } else {

    }

#line 1072
    goto ldv_43942;
    ldv_43941: 
#line 1073
    inc_ap_bio(mdev, 1);
    ldv_43942: 
#line 1072
    tmp___5 = drbd_make_request_common(mdev, & bp->bio2);
#line 1072
    if (tmp___5 != 0) {
#line 1073
      goto ldv_43941;
    } else {

    }
#line 1075
    dec_ap_bio(mdev);
#line 1077
    bio_pair_release(bp);
  }
#line 1079
  return (0);
}
}
#line 1095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1097
  mdev = (struct drbd_conf *)q->queuedata;
#line 1098
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1100
  bio_size = bvm->bi_size;
#line 1103
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1105
  if (limit < 0) {
#line 1106
    limit = 0;
  } else {

  }
#line 1107
  if (bio_size == 0U) {
#line 1108
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1109
      limit = (int )bvec->bv_len;
    } else
#line 1110
    if (limit != 0) {
#line 1110
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1110
      if (tmp != 0) {
#line 1111
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1113
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1114
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1115
          _min1 = limit;
#line 1115
          _min2 = backing_limit;
#line 1115
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1117
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1119
  return (limit);
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___2(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 319 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 321
  page = compound_head(page);
#line 322
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 322
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 322
  if (tmp___0 != 0L) {
#line 322
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (322), "i" (12UL));
    ldv_16145: ;
#line 322
    goto ldv_16145;
  } else {

  }
#line 323
  atomic_inc(& page->_count);
#line 324
  return;
}
}
#line 987 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 989
  retval = 512;
#line 991
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 992
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 994
  return ((unsigned short )retval);
}
}
#line 997 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 999
  tmp = bdev_get_queue(bdev);
#line 999
  tmp___0 = queue_logical_block_size(tmp);
#line 999
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1551 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1560
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1561
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1562
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1570
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 16;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 544;
  retry: 
#line 93
  bio = bio_alloc(16U, 1);
#line 94
  bio->bi_bdev = bdev->md_bdev;
#line 95
  bio->bi_sector = sector;
#line 96
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 96
  ok = tmp___0 == size;
#line 97
  if (ok == 0) {
#line 98
    goto out;
  } else {

  }
#line 99
  bio->bi_private = (void *)(& md_io);
#line 100
  bio->bi_end_io = & drbd_md_io_complete;
#line 101
  bio->bi_rw = (unsigned long )rw;
#line 103
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 103
  if (tmp___1 != 0) {
#line 104
    bio_endio(bio, -5);
  } else {
#line 106
    submit_bio(rw, bio);
  }
#line 107
  wait_for_completion(& md_io.event);
#line 108
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 113
  tmp___2 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 113
  if (tmp___2 != 0L) {
#line 113
    tmp___3 = __builtin_expect(ok == 0, 0L);
#line 113
    if (tmp___3 != 0L) {
#line 115
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Barriers not supported on meta data device - disabling\n");
#line 116
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 117
      rw = rw & -17;
#line 118
      bio_put(bio);
#line 119
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 122
  bio_put(bio);
#line 123
  return (ok);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 130
  offset = 0;
#line 131
  iop = mdev->md_io_page;
#line 133
  tmp = mutex_is_locked(& mdev->md_io_mutex);
#line 133
  if (tmp == 0) {
#line 133
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            133);
  } else {

  }
#line 135
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 135
  if (tmp___0 != 0L) {
#line 135
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (135), "i" (12UL));
    ldv_43657: ;
#line 135
    goto ldv_43657;
  } else {

  }
#line 137
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 137
  logical_block_size = (int )tmp___1;
#line 138
  if (logical_block_size == 0) {
#line 139
    logical_block_size = 512;
  } else {

  }
#line 142
  if (logical_block_size != 512) {
#line 143
    mask = logical_block_size / 512 + -1;
#line 144
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 144
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              144);
    } else {

    }
#line 145
    if ((mask + 1) * 512 != logical_block_size) {
#line 145
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              145);
    } else {

    }
#line 146
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 147
    sector = (sector_t )(~ mask) & sector;
#line 148
    iop = mdev->md_io_tmpp;
#line 150
    if (rw & 1) {
#line 153
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 153
      p = tmp___2;
#line 154
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 154
      hp = tmp___3;
#line 156
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 159
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 159
      if (tmp___4 != 0L) {
#line 160
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 163
        return (0);
      } else {

      }
#line 166
      __len = 512UL;
#line 166
      if (__len > 63UL) {
#line 166
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 166
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 170
  tmp___7 = drbd_md_first_sector(bdev);
#line 170
  if (tmp___7 > sector) {
#line 172
    tmp___5 = get_current();
#line 172
    tmp___6 = get_current();
#line 172
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 170
    tmp___8 = drbd_md_last_sector(bdev);
#line 170
    if (tmp___8 < sector) {
#line 172
      tmp___5 = get_current();
#line 172
      tmp___6 = get_current();
#line 172
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 176
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 177
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 177
  if (tmp___9 != 0L) {
#line 178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 180
    return (0);
  } else {

  }
#line 183
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 184
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 184
    p___0 = tmp___10;
#line 185
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 185
    hp___0 = tmp___11;
#line 187
    __len___0 = 512UL;
#line 187
    if (__len___0 > 63UL) {
#line 187
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 187
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 190
  return (ok);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 197
  al_flags = 0UL;
#line 199
  spin_lock_irq(& mdev->al_lock);
#line 200
  tmp = lc_find(mdev->resync, enr / 4U);
#line 201
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 201
  if (tmp___1 != 0L) {
#line 202
    __mptr = (struct lc_element  const  *)tmp;
#line 202
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 203
    if (tmp___0 != 0) {
#line 204
      spin_unlock_irq(& mdev->al_lock);
#line 205
      return (0);
    } else {

    }
  } else {

  }
#line 208
  al_ext = lc_get(mdev->act_log, enr);
#line 209
  al_flags = (mdev->act_log)->flags;
#line 210
  spin_unlock_irq(& mdev->al_lock);
#line 221
  return (al_ext);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 226
  enr = (unsigned int )(sector >> 13);
#line 230
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 230
  if (tmp <= 0) {
#line 230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            230);
  } else {

  }
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_43686;
  } else {

  }
#line 232
  tmp___0 = get_current();
#line 232
  __wait.flags = 0U;
#line 232
  __wait.private = (void *)tmp___0;
#line 232
  __wait.func = & autoremove_wake_function;
#line 232
  __wait.task_list.next = & __wait.task_list;
#line 232
  __wait.task_list.prev = & __wait.task_list;
  ldv_43689: 
#line 232
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_43688;
  } else {

  }
#line 232
  schedule();
#line 232
  goto ldv_43689;
  ldv_43688: 
#line 232
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43686: ;
#line 234
  if (al_ext->lc_number != enr) {
#line 241
    init_completion(& al_work.event);
#line 242
    al_work.al_ext = al_ext;
#line 243
    al_work.enr = enr;
#line 244
    al_work.old_enr = al_ext->lc_number;
#line 245
    al_work.w.cb = & w_al_write_transaction;
#line 246
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 247
    wait_for_completion(& al_work.event);
#line 249
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 251
    spin_lock_irq(& mdev->al_lock);
#line 252
    lc_changed(mdev->act_log, al_ext);
#line 253
    spin_unlock_irq(& mdev->al_lock);
#line 254
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 256
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 260
  enr = (unsigned int )(sector >> 13);
#line 264
  tmp = spinlock_check(& mdev->al_lock);
#line 264
  flags = _raw_spin_lock_irqsave(tmp);
#line 266
  extent = lc_find(mdev->act_log, enr);
#line 268
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 269
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 271
    return;
  } else {

  }
#line 274
  tmp___0 = lc_put(mdev->act_log, extent);
#line 274
  if (tmp___0 == 0U) {
#line 275
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 277
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  unsigned int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  int tmp___9 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  aw = (struct update_al_work *)__mptr;
#line 284
  updated = aw->al_ext;
#line 285
  new_enr = aw->enr;
#line 286
  evicted = aw->old_enr;
#line 291
  xor_sum = 0U;
#line 293
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 293
  if (tmp == 0) {
#line 294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "get_ldev() failed in w_al_write_transaction\n");
#line 295
    complete(& ((struct update_al_work *)w)->event);
#line 296
    return (1);
  } else {

  }
#line 302
  if ((int )mdev->state.ldv_35070.conn <= 9 && evicted != 4294967295U) {
#line 303
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 305
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 306
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 306
  buffer = (struct al_transaction *)tmp___0;
#line 308
  buffer->magic = 1728214147U;
#line 309
  tmp___1 = __fswab32(mdev->al_tr_number);
#line 309
  buffer->tr_number = tmp___1;
#line 311
  tmp___2 = lc_index_of(mdev->act_log, updated);
#line 311
  n = (int )tmp___2;
#line 313
  tmp___3 = __fswab32((__u32 )n);
#line 313
  buffer->updates[0].pos = tmp___3;
#line 314
  tmp___4 = __fswab32(new_enr);
#line 314
  buffer->updates[0].extent = tmp___4;
#line 316
  xor_sum = xor_sum ^ new_enr;
#line 318
  __min1 = 61;
#line 318
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 318
  mx = __min1 < __min2 ? __min1 : __min2;
#line 320
  i = 0;
#line 320
  goto ldv_43723;
  ldv_43722: 
#line 321
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 322
  tmp___5 = lc_element_by_index(mdev->act_log, idx);
#line 322
  extent_nr = tmp___5->lc_number;
#line 323
  tmp___6 = __fswab32(idx);
#line 323
  buffer->updates[i + 1].pos = tmp___6;
#line 324
  tmp___7 = __fswab32(extent_nr);
#line 324
  buffer->updates[i + 1].extent = tmp___7;
#line 325
  xor_sum = xor_sum ^ extent_nr;
#line 320
  i = i + 1;
  ldv_43723: ;
#line 320
  if (i < mx) {
#line 321
    goto ldv_43722;
  } else {

  }

#line 327
  goto ldv_43726;
  ldv_43725: 
#line 328
  buffer->updates[i + 1].pos = 4294967295U;
#line 329
  buffer->updates[i + 1].extent = 4294967295U;
#line 330
  xor_sum = ~ xor_sum;
#line 327
  i = i + 1;
  ldv_43726: ;
#line 327
  if (i <= 60) {
#line 328
    goto ldv_43725;
  } else {

  }
#line 332
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 333
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 334
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 336
  tmp___8 = __fswab32(xor_sum);
#line 336
  buffer->xor_sum = tmp___8;
#line 338
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 341
  tmp___9 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 341
  if (tmp___9 == 0) {
#line 342
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 344
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 344
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 346
    mdev->al_tr_pos = 0;
  } else {

  }
#line 348
  if (mdev->al_tr_pos > 63) {
#line 348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            348);
  } else {

  }
#line 349
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 351
  mutex_unlock(& mdev->md_io_mutex);
#line 353
  complete(& ((struct update_al_work *)w)->event);
#line 354
  put_ldev(mdev);
#line 356
  return (1);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 375
  xor_sum = 0U;
#line 377
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 381
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 381
  if (tmp == 0) {
#line 382
    return (-1);
  } else {

  }
#line 384
  tmp___0 = __fswab32(b->magic);
#line 384
  rv = tmp___0 == 2205418087U;
#line 386
  i = 0;
#line 386
  goto ldv_43740;
  ldv_43739: 
#line 387
  tmp___1 = __fswab32(b->updates[i].extent);
#line 387
  xor_sum = tmp___1 ^ xor_sum;
#line 386
  i = i + 1;
  ldv_43740: ;
#line 386
  if (i <= 61) {
#line 387
    goto ldv_43739;
  } else {

  }
#line 388
  tmp___2 = __fswab32(b->xor_sum);
#line 388
  rv = (tmp___2 == xor_sum) & rv;
#line 390
  return (rv);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 406
  active_extents = 0;
#line 407
  transactions = 0;
#line 408
  found_valid = 0;
#line 409
  from = 0;
#line 410
  to = 0;
#line 411
  from_tnr = 0U;
#line 412
  to_tnr = 0U;
#line 415
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 420
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 421
  tmp = lowmem_page_address(mdev->md_io_page);
#line 421
  buffer = (struct al_transaction *)tmp;
#line 424
  i = 0;
#line 424
  goto ldv_43760;
  ldv_43759: 
#line 425
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 426
  if (rv == 0) {
#line 427
    goto ldv_43758;
  } else {

  }
#line 428
  if (rv == -1) {
#line 429
    mutex_unlock(& mdev->md_io_mutex);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___0 = __fswab32(buffer->tr_number);
#line 432
  cnr = tmp___0;
#line 434
  found_valid = found_valid + 1;
#line 434
  if (found_valid == 1) {
#line 435
    from = i;
#line 436
    to = i;
#line 437
    from_tnr = cnr;
#line 438
    to_tnr = cnr;
#line 439
    goto ldv_43758;
  } else {

  }
#line 441
  if ((int )cnr - (int )from_tnr < 0) {
#line 442
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 442
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              442);
    } else {

    }
#line 443
    from = i;
#line 444
    from_tnr = cnr;
  } else {

  }
#line 446
  if ((int )cnr - (int )to_tnr > 0) {
#line 447
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 447
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              447);
    } else {

    }
#line 448
    to = i;
#line 449
    to_tnr = cnr;
  } else {

  }
  ldv_43758: 
#line 424
  i = i + 1;
  ldv_43760: ;
#line 424
  if (i <= mx) {
#line 425
    goto ldv_43759;
  } else {

  }

#line 453
  if (found_valid == 0) {
#line 454
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 455
    mutex_unlock(& mdev->md_io_mutex);
#line 456
    return (1);
  } else {

  }
#line 461
  i = from;
  ldv_43775: 
#line 467
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 468
  _b = rv == 0;
#line 468
  if (_b != 0) {
#line 468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            468);
  } else {

  }
#line 468
  if (_b != 0) {
#line 468
    goto cancel;
  } else {

  }
#line 469
  if (rv == -1) {
#line 470
    mutex_unlock(& mdev->md_io_mutex);
#line 471
    return (0);
  } else {

  }
#line 474
  tmp___1 = __fswab32(buffer->tr_number);
#line 474
  trn = tmp___1;
#line 476
  spin_lock_irq(& mdev->al_lock);
#line 482
  j = 61;
#line 482
  goto ldv_43772;
  ldv_43771: 
#line 483
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 483
  pos = (int )tmp___2;
#line 484
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 484
  extent_nr = tmp___3;
#line 486
  if (extent_nr == 4294967295U) {
#line 487
    goto ldv_43770;
  } else {

  }
#line 489
  lc_set(mdev->act_log, extent_nr, pos);
#line 490
  active_extents = active_extents + 1;
  ldv_43770: 
#line 482
  j = j - 1;
  ldv_43772: ;
#line 482
  if (j >= 0) {
#line 483
    goto ldv_43771;
  } else {

  }
#line 492
  spin_unlock_irq(& mdev->al_lock);
#line 494
  transactions = transactions + 1;
  cancel: ;
#line 497
  if (i == to) {
#line 498
    goto ldv_43774;
  } else {

  }
#line 499
  i = i + 1;
#line 500
  if (i > mx) {
#line 501
    i = 0;
  } else {

  }
#line 502
  goto ldv_43775;
  ldv_43774: 
#line 504
  mdev->al_tr_number = to_tnr + 1U;
#line 505
  mdev->al_tr_pos = to;
#line 506
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 506
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 508
    mdev->al_tr_pos = 0;
  } else {

  }
#line 511
  mutex_unlock(& mdev->md_io_mutex);
#line 513
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 516
  return (1);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 521
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 522
  mdev = wc->mdev;
#line 524
  uptodate = (int )bio->bi_flags & 1;
#line 529
  if (error == 0 && uptodate == 0) {
#line 530
    error = -5;
  } else {

  }
#line 532
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 533
  if (error != 0 && wc->error == 0) {
#line 534
    wc->error = error;
  } else {

  }
#line 536
  tmp = atomic_dec_and_test(& wc->count);
#line 536
  if (tmp != 0) {
#line 537
    complete(& wc->io_done);
  } else {

  }
#line 539
  page = (bio->bi_io_vec)->bv_page;
#line 540
  put_page(page);
#line 541
  bio_put(bio);
#line 542
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 543
  put_ldev(mdev);
#line 544
  return;
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 559
  page_offset___0 = 4096U;
#line 561
  i = 0;
#line 562
  err = -12;
#line 566
  enr = enr & 4294967288U;
#line 567
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 570
  if ((on_disk_sector & 7UL) != 0UL) {
#line 570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            570);
  } else {

  }
#line 579
  goto ldv_43799;
  ldv_43798: ;
#line 580
  if (bio->bi_sector == on_disk_sector) {
#line 581
    return (0);
  } else {

  }
#line 582
  i = i + 1;
  ldv_43799: 
#line 579
  bio = *(bios + (unsigned long )i);
#line 579
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 580
    goto ldv_43798;
  } else {

  }
#line 587
  bio = bio_alloc(208U, 1);
#line 588
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 589
    return (-12);
  } else {

  }
#line 591
  if (i > 0) {
#line 592
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 593
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 594
    page = prev_bv->bv_page;
  } else {

  }
#line 596
  if (page_offset___0 == 4096U) {
#line 597
    page = alloc_pages(2U, 0U);
#line 598
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 599
      goto out_bio_put;
    } else {

    }
#line 600
    page_offset___0 = 0U;
  } else {
#line 602
    get_page(page);
  }
#line 605
  offset = (int )(enr << 6);
#line 606
  tmp = kmap(page);
#line 607
  __min1 = 512UL;
#line 607
  tmp___0 = drbd_bm_words(mdev);
#line 607
  __min2 = tmp___0 - (size_t )offset;
#line 607
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 609
  kunmap(page);
#line 611
  bio->bi_private = (void *)wc;
#line 612
  bio->bi_end_io = & atodb_endio;
#line 613
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 614
  bio->bi_sector = on_disk_sector;
#line 616
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 616
  if (tmp___1 != 4096) {
#line 617
    goto out_put_page;
  } else {

  }
#line 619
  atomic_inc(& wc->count);
#line 625
  atomic_inc(& mdev->local_cnt);
#line 627
  *(bios + (unsigned long )i) = bio;
#line 629
  return (0);
  out_put_page: 
#line 632
  err = -22;
#line 633
  put_page(page);
  out_bio_put: 
#line 635
  bio_put(bio);
#line 636
  return (err);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 653
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 653
  _b = tmp == 0;
#line 653
  if (_b != 0) {
#line 653
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            653);
  } else {

  }
#line 653
  if (_b != 0) {
#line 654
    return;
  } else {

  }
#line 656
  tmp___0 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___0 != 0) {
#line 656
    goto ldv_43818;
  } else {

  }
#line 656
  tmp___1 = get_current();
#line 656
  __wait.flags = 0U;
#line 656
  __wait.private = (void *)tmp___1;
#line 656
  __wait.func = & autoremove_wake_function;
#line 656
  __wait.task_list.next = & __wait.task_list;
#line 656
  __wait.task_list.prev = & __wait.task_list;
  ldv_43821: 
#line 656
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 656
  tmp___2 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___2 != 0) {
#line 656
    goto ldv_43820;
  } else {

  }
#line 656
  schedule();
#line 656
  goto ldv_43821;
  ldv_43820: 
#line 656
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43818: 
#line 658
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 661
  tmp___3 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 661
  bios = (struct bio **)tmp___3;
#line 662
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 663
    goto submit_one_by_one;
  } else {

  }
#line 665
  atomic_set(& wc.count, 0);
#line 666
  init_completion(& wc.io_done);
#line 667
  wc.mdev = mdev;
#line 668
  wc.error = 0;
#line 670
  i = 0;
#line 670
  goto ldv_43826;
  ldv_43825: 
#line 671
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 671
  enr = tmp___4->lc_number;
#line 672
  if (enr == 4294967295U) {
#line 673
    goto ldv_43823;
  } else {

  }
#line 675
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 675
  if (tmp___5 != 0) {
#line 678
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_43823: 
#line 670
  i = i + 1;
  ldv_43826: ;
#line 670
  if (i < nr_elements) {
#line 671
    goto ldv_43825;
  } else {

  }
#line 682
  lc_unlock(mdev->act_log);
#line 683
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 686
  i = 0;
#line 686
  goto ldv_43830;
  ldv_43829: ;
#line 687
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 688
    goto ldv_43828;
  } else {

  }
#line 689
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 689
  if (tmp___6 != 0) {
#line 690
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 691
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 693
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 686
  i = i + 1;
  ldv_43830: ;
#line 686
  if (i < nr_elements) {
#line 687
    goto ldv_43829;
  } else {

  }
  ldv_43828: 
#line 697
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 697
  drbd_blk_run_queue(tmp___7);
#line 700
  drbd_md_flush(mdev);
#line 708
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 708
  if (tmp___8 != 0) {
#line 709
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 711
  put_ldev(mdev);
#line 713
  kfree((void const   *)bios);
#line 714
  return;
  free_bios_submit_one_by_one: 
#line 718
  i = 0;
#line 718
  goto ldv_43832;
  ldv_43831: 
#line 719
  bio_endio(*(bios + (unsigned long )i), 0);
#line 718
  i = i + 1;
  ldv_43832: ;
#line 718
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 719
    goto ldv_43831;
  } else {

  }
#line 721
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 724
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 726
  i = 0;
#line 726
  goto ldv_43836;
  ldv_43835: 
#line 727
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 727
  enr = tmp___9->lc_number;
#line 728
  if (enr == 4294967295U) {
#line 729
    goto ldv_43834;
  } else {

  }
#line 732
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_43834: 
#line 726
  i = i + 1;
  ldv_43836: ;
#line 726
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 727
    goto ldv_43835;
  } else {

  }
#line 735
  lc_unlock(mdev->act_log);
#line 736
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 737
  put_ldev(mdev);
#line 738
  return;
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;

  {
#line 747
  add = 0UL;
#line 751
  tmp = lc_try_lock(mdev->act_log);
#line 751
  if (tmp != 0) {
#line 751
    goto ldv_43845;
  } else {

  }
#line 751
  tmp___0 = get_current();
#line 751
  __wait.flags = 0U;
#line 751
  __wait.private = (void *)tmp___0;
#line 751
  __wait.func = & autoremove_wake_function;
#line 751
  __wait.task_list.next = & __wait.task_list;
#line 751
  __wait.task_list.prev = & __wait.task_list;
  ldv_43848: 
#line 751
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 751
  tmp___1 = lc_try_lock(mdev->act_log);
#line 751
  if (tmp___1 != 0) {
#line 751
    goto ldv_43847;
  } else {

  }
#line 751
  schedule();
#line 751
  goto ldv_43848;
  ldv_43847: 
#line 751
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43845: 
#line 753
  i = 0;
#line 753
  goto ldv_43851;
  ldv_43850: 
#line 754
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 754
  enr = tmp___2->lc_number;
#line 755
  if (enr == 4294967295U) {
#line 756
    goto ldv_43849;
  } else {

  }
#line 757
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 757
  add = tmp___3 + add;
  ldv_43849: 
#line 753
  i = i + 1;
  ldv_43851: ;
#line 753
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 754
    goto ldv_43850;
  } else {

  }
#line 760
  lc_unlock(mdev->act_log);
#line 761
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 763
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 763
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___4);
#line 764
  return;
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 771
  spin_lock_irq(& mdev->al_lock);
#line 772
  rv = al_ext->refcnt == 0U;
#line 773
  tmp = __builtin_expect(rv != 0, 1L);
#line 773
  if (tmp != 0L) {
#line 774
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 775
  spin_unlock_irq(& mdev->al_lock);
#line 777
  return (rv);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 794
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 794
  if (tmp == 0) {
#line 794
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            794);
  } else {

  }
#line 796
  i = 0;
#line 796
  goto ldv_43869;
  ldv_43868: 
#line 797
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 798
  if (al_ext->lc_number == 4294967295U) {
#line 799
    goto ldv_43863;
  } else {

  }
#line 800
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___0 != 0) {
#line 800
    goto ldv_43864;
  } else {

  }
#line 800
  tmp___1 = get_current();
#line 800
  __wait.flags = 0U;
#line 800
  __wait.private = (void *)tmp___1;
#line 800
  __wait.func = & autoremove_wake_function;
#line 800
  __wait.task_list.next = & __wait.task_list;
#line 800
  __wait.task_list.prev = & __wait.task_list;
  ldv_43867: 
#line 800
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 800
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___2 != 0) {
#line 800
    goto ldv_43866;
  } else {

  }
#line 800
  schedule();
#line 800
  goto ldv_43867;
  ldv_43866: 
#line 800
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43864: ;
  ldv_43863: 
#line 796
  i = i + 1;
  ldv_43869: ;
#line 796
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 797
    goto ldv_43868;
  } else {

  }
#line 803
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 808
  __mptr = (struct drbd_work  const  *)w;
#line 808
  udw = (struct update_odbm_work *)__mptr;
#line 810
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 810
  if (tmp___0 == 0) {
#line 811
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 811
    if (tmp != 0) {
#line 812
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 813
    kfree((void const   *)udw);
#line 814
    return (1);
  } else {

  }
#line 817
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 818
  put_ldev(mdev);
#line 820
  kfree((void const   *)udw);
#line 822
  tmp___1 = drbd_bm_total_weight(mdev);
#line 822
  if (tmp___1 <= mdev->rs_failed) {
#line 823
    switch ((int )mdev->state.ldv_35070.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 826
    drbd_resync_finished(mdev);
    default: ;
#line 829
    goto ldv_43885;
    }
    ldv_43885: ;
  } else {

  }
#line 832
  drbd_bcast_sync_progress(mdev);
#line 834
  return (1);
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 852
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 852
  if (tmp == 0) {
#line 852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            852);
  } else {

  }
#line 856
  enr = (unsigned int )(sector >> 15);
#line 858
  e = lc_get(mdev->resync, enr);
#line 859
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 860
    __mptr = (struct lc_element  const  *)e;
#line 860
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 861
    if (ext->lce.lc_number == enr) {
#line 862
      if (success != 0) {
#line 863
        ext->rs_left = ext->rs_left - count;
      } else {
#line 865
        ext->rs_failed = ext->rs_failed + count;
      }
#line 866
      if (ext->rs_left < ext->rs_failed) {
#line 867
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 872
        dump_stack();
#line 874
        lc_put(mdev->resync, & ext->lce);
#line 875
        val.i = 0U;
#line 875
        val.ldv_35070.conn = 1U;
#line 875
        mask.i = 0U;
#line 875
        mask.ldv_35070.conn = 31U;
#line 875
        drbd_force_state(mdev, mask, val);
#line 876
        return;
      } else {

      }
    } else {
#line 885
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 885
      rs_left = tmp___0;
#line 886
      if (ext->flags != 0UL) {
#line 887
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 891
        ext->flags = 0UL;
      } else {

      }
#line 893
      if (ext->rs_failed != 0) {
#line 894
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 897
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 899
      ext->rs_left = rs_left;
#line 900
      ext->rs_failed = success == 0 ? count : 0;
#line 901
      lc_changed(mdev->resync, & ext->lce);
    }
#line 903
    lc_put(mdev->resync, & ext->lce);
#line 906
    if (ext->rs_left == ext->rs_failed) {
#line 907
      ext->rs_failed = 0;
#line 909
      tmp___1 = kmalloc___2(32UL, 32U);
#line 909
      udw = (struct update_odbm_work *)tmp___1;
#line 910
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 911
        udw->enr = ext->lce.lc_number;
#line 912
        udw->w.cb = & w_update_odbm;
#line 913
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 915
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 916
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 920
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 924
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;
  int tmp___4 ;

  {
#line 939
  count = 0UL;
#line 941
  wake_up = 0;
#line 944
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 945
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 947
    return;
  } else {

  }
#line 949
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 950
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 952
  _b = sector >= nr_sectors;
#line 952
  if (_b != 0) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            952);
  } else {

  }
#line 952
  if (_b != 0) {
#line 952
    return;
  } else {

  }
#line 953
  _b___0 = esector >= nr_sectors;
#line 953
  if (_b___0 != 0) {
#line 953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            953);
  } else {

  }
#line 953
  if (_b___0 != 0) {
#line 953
    esector = nr_sectors - 1UL;
  } else {

  }
#line 955
  lbnr = (nr_sectors - 1UL) >> 3;
#line 960
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 960
  if (tmp != 0L) {
#line 961
    return;
  } else {

  }
#line 962
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 962
  if (tmp___0 != 0L) {
#line 963
    ebnr = lbnr;
  } else {
#line 965
    ebnr = (esector - 7UL) >> 3;
  }
#line 966
  sbnr = (sector + 7UL) >> 3;
#line 968
  if (sbnr > ebnr) {
#line 969
    return;
  } else {

  }
#line 975
  tmp___1 = spinlock_check(& mdev->al_lock);
#line 975
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 976
  tmp___2 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 976
  count = (unsigned long )tmp___2;
#line 977
  if (count != 0UL) {
#line 979
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 982
      tmp___3 = drbd_bm_total_weight(mdev);
#line 982
      if ((mdev->rs_mark_left != tmp___3 && (unsigned int )*((unsigned short *)mdev + 910UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 910UL) != 320U) {
#line 985
        mdev->rs_mark_time = jiffies;
#line 986
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 989
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 989
    if (tmp___4 != 0) {
#line 990
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 991
      put_ldev(mdev);
    } else {

    }
#line 995
    wake_up = 1;
  } else {

  }
#line 997
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 998
  if (wake_up != 0) {
#line 999
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1000
  return;
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1018
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1021
    return;
  } else {

  }
#line 1024
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1024
  if (tmp == 0) {
#line 1025
    return;
  } else {

  }
#line 1027
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1028
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1030
  _b = sector >= nr_sectors;
#line 1030
  if (_b != 0) {
#line 1030
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1030);
  } else {

  }
#line 1030
  if (_b != 0) {
#line 1031
    goto out;
  } else {

  }
#line 1032
  _b___0 = esector >= nr_sectors;
#line 1032
  if (_b___0 != 0) {
#line 1032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1032);
  } else {

  }
#line 1032
  if (_b___0 != 0) {
#line 1033
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1035
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1039
  sbnr = sector >> 3;
#line 1040
  ebnr = esector >> 3;
#line 1044
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1044
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1045
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1045
  count = (unsigned int )tmp___1;
#line 1047
  enr = (unsigned int )(sector >> 15);
#line 1048
  e = lc_find(mdev->resync, enr);
#line 1049
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1050
    __mptr = (struct lc_element  const  *)e;
#line 1050
    __mptr___0 = (struct lc_element  const  *)e;
#line 1050
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1051
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1054
  put_ldev(mdev);
#line 1055
  return;
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1062
  wakeup = 0;
#line 1065
  spin_lock_irq(& mdev->al_lock);
#line 1066
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1067
    spin_unlock_irq(& mdev->al_lock);
#line 1068
    return (0);
  } else {

  }
#line 1070
  e = lc_get(mdev->resync, enr);
#line 1071
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1071
    __mptr = (struct lc_element  const  *)e;
#line 1071
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1071
    bm_ext = 0;
  }
#line 1072
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1073
    if (bm_ext->lce.lc_number != enr) {
#line 1074
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1075
      bm_ext->rs_failed = 0;
#line 1076
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1077
      wakeup = 1;
    } else {

    }
#line 1079
    if (bm_ext->lce.refcnt == 1U) {
#line 1080
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1081
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1083
  rs_flags = (mdev->resync)->flags;
#line 1084
  spin_unlock_irq(& mdev->al_lock);
#line 1085
  if (wakeup != 0) {
#line 1086
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1088
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1089
    if ((rs_flags & 4UL) != 0UL) {
#line 1090
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1092
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1092
    if (tmp != 0L) {
#line 1092
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1092), "i" (12UL));
      ldv_43963: ;
#line 1092
      goto ldv_43963;
    } else {

    }
  } else {

  }
#line 1095
  return (bm_ext);
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1101
  rv = 0;
#line 1103
  spin_lock_irq(& mdev->al_lock);
#line 1104
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1104
  if (tmp != 0L) {
#line 1105
    rv = 1;
  } else {
#line 1107
    al_ext = lc_find(mdev->act_log, enr);
#line 1108
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1109
      if (al_ext->refcnt != 0U) {
#line 1110
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1113
  spin_unlock_irq(& mdev->al_lock);
#line 1120
  return (rv);
}
}
#line 1130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1132
  enr = (unsigned int )(sector >> 15);
#line 1136
  __ret = 0;
#line 1136
  bm_ext = _bme_get(mdev, enr);
#line 1136
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1136
    tmp = get_current();
#line 1136
    __wait.flags = 0U;
#line 1136
    __wait.private = (void *)tmp;
#line 1136
    __wait.func = & autoremove_wake_function;
#line 1136
    __wait.task_list.next = & __wait.task_list;
#line 1136
    __wait.task_list.prev = & __wait.task_list;
    ldv_43982: 
#line 1136
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1136
    bm_ext = _bme_get(mdev, enr);
#line 1136
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1136
      goto ldv_43980;
    } else {

    }
#line 1136
    tmp___0 = get_current();
#line 1136
    tmp___1 = signal_pending(tmp___0);
#line 1136
    if (tmp___1 == 0) {
#line 1136
      schedule();
#line 1136
      goto ldv_43981;
    } else {

    }
#line 1136
    __ret = -512;
#line 1136
    goto ldv_43980;
    ldv_43981: ;
#line 1136
    goto ldv_43982;
    ldv_43980: 
#line 1136
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1136
  sig = __ret;
#line 1138
  if (sig != 0) {
#line 1139
    return (0);
  } else {

  }
#line 1141
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1141
  if (tmp___2 != 0) {
#line 1142
    return (1);
  } else {

  }
#line 1144
  i = 0;
#line 1144
  goto ldv_43991;
  ldv_43990: 
#line 1145
  __ret___0 = 0;
#line 1145
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
  if (tmp___7 != 0) {
#line 1145
    tmp___3 = get_current();
#line 1145
    __wait___0.flags = 0U;
#line 1145
    __wait___0.private = (void *)tmp___3;
#line 1145
    __wait___0.func = & autoremove_wake_function;
#line 1145
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1145
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43988: 
#line 1145
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1145
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
    if (tmp___4 == 0) {
#line 1145
      goto ldv_43986;
    } else {

    }
#line 1145
    tmp___5 = get_current();
#line 1145
    tmp___6 = signal_pending(tmp___5);
#line 1145
    if (tmp___6 == 0) {
#line 1145
      schedule();
#line 1145
      goto ldv_43987;
    } else {

    }
#line 1145
    __ret___0 = -512;
#line 1145
    goto ldv_43986;
    ldv_43987: ;
#line 1145
    goto ldv_43988;
    ldv_43986: 
#line 1145
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1145
  sig = __ret___0;
#line 1147
  if (sig != 0) {
#line 1148
    spin_lock_irq(& mdev->al_lock);
#line 1149
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1149
    if (tmp___8 == 0U) {
#line 1150
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1151
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1152
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1154
    spin_unlock_irq(& mdev->al_lock);
#line 1155
    return (0);
  } else {

  }
#line 1144
  i = i + 1;
  ldv_43991: ;
#line 1144
  if (i <= 3) {
#line 1145
    goto ldv_43990;
  } else {

  }
#line 1159
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1161
  return (1);
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1175
  enr = (unsigned int )(sector >> 15);
#line 1176
  al_enr = enr * 4U;
#line 1181
  spin_lock_irq(& mdev->al_lock);
#line 1182
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1196
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1197
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1197
      __mptr = (struct lc_element  const  *)e;
#line 1197
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1197
      bm_ext = 0;
    }
#line 1198
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1199
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1199
      if (tmp != 0) {
#line 1199
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1199);
      } else {

      }
#line 1200
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1200
      if (tmp___0 == 0) {
#line 1200
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1200);
      } else {

      }
#line 1201
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1202
      mdev->resync_wenr = 4294967295U;
#line 1203
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1203
      if (tmp___1 == 0U) {
#line 1204
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1205
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1207
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1211
  e = lc_try_get(mdev->resync, enr);
#line 1212
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1212
    __mptr___0 = (struct lc_element  const  *)e;
#line 1212
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1212
    bm_ext = 0;
  }
#line 1213
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1214
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1214
    if (tmp___2 != 0) {
#line 1215
      goto proceed;
    } else {

    }
#line 1216
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1216
    if (tmp___3 == 0) {
#line 1217
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1223
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1224
      if (bm_ext->lce.refcnt == 0U) {
#line 1224
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1224);
      } else {

      }
    }
#line 1226
    goto check_al;
  } else {
#line 1229
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1230
      goto try_again;
    } else {

    }
#line 1232
    e = lc_get(mdev->resync, enr);
#line 1233
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1233
      __mptr___1 = (struct lc_element  const  *)e;
#line 1233
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1233
      bm_ext = 0;
    }
#line 1234
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1235
      rs_flags = (mdev->resync)->flags;
#line 1236
      if ((rs_flags & 4UL) != 0UL) {
#line 1237
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1239
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1239
      if (tmp___4 != 0L) {
#line 1239
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1239), "i" (12UL));
        ldv_44012: ;
#line 1239
        goto ldv_44012;
      } else {

      }
#line 1240
      goto try_again;
    } else {

    }
#line 1242
    if (bm_ext->lce.lc_number != enr) {
#line 1243
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1244
      bm_ext->rs_failed = 0;
#line 1245
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1246
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1247
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1247
      if (tmp___5 != 0) {
#line 1247
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1247);
      } else {

      }
    } else {

    }
#line 1249
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1250
    if (bm_ext->lce.refcnt != 1U) {
#line 1250
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1250);
    } else {

    }
#line 1251
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1252
    goto check_al;
  }
  check_al: 
#line 1255
  i = 0;
#line 1255
  goto ldv_44014;
  ldv_44013: 
#line 1256
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1256
  if (tmp___6 != 0L) {
#line 1257
    goto try_again;
  } else {

  }
#line 1258
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1258
  if (tmp___7 != 0) {
#line 1259
    goto try_again;
  } else {

  }
#line 1255
  i = i + 1;
  ldv_44014: ;
#line 1255
  if (i <= 3) {
#line 1256
    goto ldv_44013;
  } else {

  }
#line 1261
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1263
  mdev->resync_wenr = 4294967295U;
#line 1264
  spin_unlock_irq(& mdev->al_lock);
#line 1265
  return (0);
  try_again: ;
#line 1268
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1269
    mdev->resync_wenr = enr;
  } else {

  }
#line 1270
  spin_unlock_irq(& mdev->al_lock);
#line 1271
  return (-11);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1276
  enr = (unsigned int )(sector >> 15);
#line 1281
  tmp = spinlock_check(& mdev->al_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  e = lc_find(mdev->resync, enr);
#line 1283
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1283
    __mptr = (struct lc_element  const  *)e;
#line 1283
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1283
    bm_ext = 0;
  }
#line 1284
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1285
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1286
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1286
    if (tmp___0 != 0) {
#line 1287
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1288
    return;
  } else {

  }
#line 1291
  if (bm_ext->lce.refcnt == 0U) {
#line 1292
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1296
    return;
  } else {

  }
#line 1299
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1299
  if (tmp___1 == 0U) {
#line 1300
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1301
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1302
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1303
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1306
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1307
  return;
}
}
#line 1313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1315
  spin_lock_irq(& mdev->al_lock);
#line 1317
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1317
  if (tmp != 0) {
#line 1318
    lc_reset(mdev->resync);
#line 1319
    put_ldev(mdev);
  } else {

  }
#line 1321
  mdev->resync_locked = 0U;
#line 1322
  mdev->resync_wenr = 4294967295U;
#line 1323
  spin_unlock_irq(& mdev->al_lock);
#line 1324
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1325
  return;
}
}
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1340
  spin_lock_irq(& mdev->al_lock);
#line 1342
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1342
  if (tmp___3 != 0) {
#line 1344
    i = 0;
#line 1344
    goto ldv_44043;
    ldv_44042: 
#line 1345
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1346
    __mptr = (struct lc_element  const  *)e;
#line 1346
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1347
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1348
      goto ldv_44041;
    } else {

    }
#line 1349
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1350
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1353
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1353
      if (tmp != 0) {
#line 1353
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1353);
      } else {

      }
#line 1354
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1354
      if (tmp___0 == 0) {
#line 1354
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1354);
      } else {

      }
#line 1355
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1356
      mdev->resync_wenr = 4294967295U;
#line 1357
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1359
    if (bm_ext->lce.refcnt != 0U) {
#line 1360
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1362
      put_ldev(mdev);
#line 1363
      spin_unlock_irq(& mdev->al_lock);
#line 1364
      return (-11);
    } else {

    }
#line 1366
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1366
    if (tmp___1 != 0) {
#line 1366
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1366);
    } else {

    }
#line 1367
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1367
    if (tmp___2 != 0) {
#line 1367
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1367);
    } else {

    }
#line 1368
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_44041: 
#line 1344
    i = i + 1;
    ldv_44043: ;
#line 1344
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1345
      goto ldv_44042;
    } else {

    }

#line 1370
    if ((mdev->resync)->used != 0U) {
#line 1370
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1370);
    } else {

    }
#line 1371
    put_ldev(mdev);
  } else {

  }
#line 1373
  spin_unlock_irq(& mdev->al_lock);
#line 1375
  return (0);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1390
  wake_up = 0;
#line 1392
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1393
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1395
    return;
  } else {

  }
#line 1397
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1398
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1400
  _b = sector >= nr_sectors;
#line 1400
  if (_b != 0) {
#line 1400
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1400);
  } else {

  }
#line 1400
  if (_b != 0) {
#line 1400
    return;
  } else {

  }
#line 1401
  _b___0 = esector >= nr_sectors;
#line 1401
  if (_b___0 != 0) {
#line 1401
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1401);
  } else {

  }
#line 1401
  if (_b___0 != 0) {
#line 1401
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1403
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1408
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1408
  if (tmp != 0L) {
#line 1409
    return;
  } else {

  }
#line 1410
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1410
  if (tmp___0 != 0L) {
#line 1411
    ebnr = lbnr;
  } else {
#line 1413
    ebnr = (esector - 7UL) >> 3;
  }
#line 1414
  sbnr = (sector + 7UL) >> 3;
#line 1416
  if (sbnr > ebnr) {
#line 1417
    return;
  } else {

  }
#line 1423
  spin_lock_irq(& mdev->al_lock);
#line 1424
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1424
  count = (unsigned long )tmp___1;
#line 1425
  if (count != 0UL) {
#line 1426
    mdev->rs_failed = mdev->rs_failed + count;
#line 1428
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1428
    if (tmp___2 != 0) {
#line 1429
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1430
      put_ldev(mdev);
    } else {

    }
#line 1435
    wake_up = 1;
  } else {

  }
#line 1437
  spin_unlock_irq(& mdev->al_lock);
#line 1438
  if (wake_up != 0) {
#line 1439
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1440
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 501 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 507
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 511
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 251 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 275
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13647: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13647;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___4(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 1954 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1955
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1956
extern struct block_device *bdget(dev_t  ) ;
#line 1960
extern void bdput(struct block_device * ) ;
#line 1995
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1765 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1989
extern int wake_up_process(struct task_struct * ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 257 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 259
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 260
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 260
    return (tmp);
  } else {

  }
#line 261
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 709 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 845
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 846
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 847
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 850
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 878
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 897
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 561 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 563
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 563
  if (tmp != 0L) {
#line 563
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (563), "i" (12UL));
    ldv_43016: ;
#line 563
    goto ldv_43016;
  } else {

  }
#line 564
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 565
  return;
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 576
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 577
  return;
}
}
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 588
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 588
  if (tmp != 0L) {
#line 588
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (588), "i" (12UL));
    ldv_43031: ;
#line 588
    goto ldv_43031;
  } else {

  }
#line 589
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 590
  return;
}
}
#line 1117
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1126
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1132
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1137
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1143
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1147
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1187
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1189
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1194
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1198
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1201
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1202
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1203
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1204
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1389 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1391 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1394 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1395 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1401
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1402
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1414
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1415
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1567
void drbd_nl_cleanup(void) ;
#line 1568
int drbd_nl_init(void) ;
#line 1569
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_44036;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_44039: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_44038;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_44039;
  ldv_44038: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44036: ;
#line 1671
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_44062;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35070.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35070.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_44062;
  }
  ldv_44062: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44103;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44103;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44103: ;
#line 1825
  return (s);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1836
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1838
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1844
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1845
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1845
    if (tmp != 0) {
#line 1846
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1847
      dump_stack();
    } else {

    }
#line 1849
    return (0UL);
  } else {

  }
#line 1851
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1851
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1854
  return (0UL);
  }
}
}
#line 1923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1925
  _drbd_thread_stop(thi, 0, 0);
#line 1926
  return;
}
}
#line 1928 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1930
  _drbd_thread_stop(thi, 1, 0);
#line 1931
  return;
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35070.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_44221;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_44221: ;
#line 2160
  switch ((unsigned int )s.ldv_35070.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_44241;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_44241: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2288
  sk = (mdev->data.socket)->sk;
#line 2289
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2290
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2291
  return;
}
}
#line 2293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2300
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_44468;
  ldv_44467: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_44468: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_44467;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, 0, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 133
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 162
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 204
  tmp = kmalloc___4(56UL, 208U);
#line 204
  b = (struct drbd_tl_epoch *)tmp;
#line 205
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 206
    return (0);
  } else {

  }
#line 207
  INIT_LIST_HEAD(& b->requests);
#line 208
  INIT_LIST_HEAD(& b->w.list);
#line 209
  b->next = 0;
#line 210
  b->br_number = 4711U;
#line 211
  b->n_req = 0;
#line 212
  b->w.cb = 0;
#line 214
  mdev->oldest_tle = b;
#line 215
  mdev->newest_tle = b;
#line 216
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 218
  mdev->tl_hash = 0;
#line 219
  mdev->tl_hash_s = 0U;
#line 221
  return (1);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 226
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            226);
  } else {

  }
#line 227
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 227
  if (tmp == 0) {
#line 227
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            227);
  } else {

  }
#line 228
  kfree((void const   *)mdev->oldest_tle);
#line 229
  mdev->oldest_tle = 0;
#line 230
  kfree((void const   *)mdev->unused_spare_tle);
#line 231
  mdev->unused_spare_tle = 0;
#line 232
  kfree((void const   *)mdev->tl_hash);
#line 233
  mdev->tl_hash = 0;
#line 234
  mdev->tl_hash_s = 0U;
#line 235
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 248
  INIT_LIST_HEAD(& new->requests);
#line 249
  INIT_LIST_HEAD(& new->w.list);
#line 250
  new->w.cb = 0;
#line 251
  new->next = 0;
#line 252
  new->n_req = 0;
#line 254
  newest_before = mdev->newest_tle;
#line 257
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 258
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 259
    (mdev->newest_tle)->next = new;
#line 260
    mdev->newest_tle = new;
  } else {

  }
#line 262
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 281
  spin_lock_irq(& mdev->req_lock);
#line 283
  b = mdev->oldest_tle;
#line 286
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 287
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 289
    goto bail;
  } else {

  }
#line 291
  if (b->br_number != barrier_nr) {
#line 292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 294
    goto bail;
  } else {

  }
#line 296
  if ((unsigned int )b->n_req != set_size) {
#line 297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
            barrier_nr, set_size, b->n_req);
#line 299
    goto bail;
  } else {

  }
#line 303
  le = b->requests.next;
#line 303
  tle = le->next;
#line 303
  goto ldv_44692;
  ldv_44691: 
#line 304
  __mptr = (struct list_head  const  *)le;
#line 304
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 305
  _req_mod(r, barrier_acked);
#line 303
  le = tle;
#line 303
  tle = le->next;
  ldv_44692: ;
#line 303
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 304
    goto ldv_44691;
  } else {

  }
#line 320
  list_del_init(& b->requests);
#line 322
  nob = b->next;
#line 323
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 323
  if (tmp != 0) {
#line 324
    _tl_add_barrier(mdev, b);
#line 325
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 326
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 330
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 330
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              330);
    } else {

    }
#line 331
    mdev->oldest_tle = nob;
#line 332
    kfree((void const   *)b);
  }
#line 335
  spin_unlock_irq(& mdev->req_lock);
#line 336
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 336
  if (tmp___0 != 0) {
#line 336
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 336
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 336
  if (tmp___2 < 0) {
#line 336
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 336, tmp___1);
  } else {

  }
#line 338
  return;
  bail: 
#line 341
  spin_unlock_irq(& mdev->req_lock);
#line 342
  val.i = 0U;
#line 342
  val.ldv_35070.conn = 6U;
#line 342
  mask.i = 0U;
#line 342
  mask.ldv_35070.conn = 31U;
#line 342
  drbd_force_state(mdev, mask, val);
#line 344
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 359
  tmp___0 = random32();
#line 359
  new_initial_bnr = (int )tmp___0;
#line 361
  spin_lock_irq(& mdev->req_lock);
#line 363
  b = mdev->oldest_tle;
#line 364
  goto ldv_44722;
  ldv_44721: 
#line 365
  le = b->requests.next;
#line 365
  tle = le->next;
#line 365
  goto ldv_44714;
  ldv_44713: 
#line 366
  __mptr = (struct list_head  const  *)le;
#line 366
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 369
  _req_mod(r, connection_lost_while_pending);
#line 365
  le = tle;
#line 365
  tle = le->next;
  ldv_44714: ;
#line 365
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 366
    goto ldv_44713;
  } else {

  }
#line 371
  tmp = b->next;
#line 375
  list_del(& b->requests);
#line 380
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 381
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 381
    if (tmp___1 != 0) {
#line 381
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 381
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 381
    if (tmp___3 < 0) {
#line 381
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 381
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "tl_clear", 381, tmp___2);
    } else {

    }
  } else {

  }
#line 383
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 385
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 385
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              385);
    } else {

    }
#line 386
    INIT_LIST_HEAD(& b->requests);
#line 387
    INIT_LIST_HEAD(& b->w.list);
#line 388
    b->w.cb = 0;
#line 389
    b->br_number = (unsigned int )new_initial_bnr;
#line 390
    b->n_req = 0;
#line 392
    mdev->oldest_tle = b;
#line 393
    goto ldv_44720;
  } else {

  }
#line 395
  kfree((void const   *)b);
#line 396
  b = tmp;
  ldv_44722: ;
#line 364
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 365
    goto ldv_44721;
  } else {

  }
  ldv_44720: 
#line 400
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 400
  if (tmp___4 == 0) {
#line 400
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            400);
  } else {

  }
#line 403
  le = mdev->out_of_sequence_requests.next;
#line 403
  tle = le->next;
#line 403
  goto ldv_44726;
  ldv_44725: 
#line 404
  __mptr___0 = (struct list_head  const  *)le;
#line 404
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 407
  _req_mod(r, connection_lost_while_pending);
#line 403
  le = tle;
#line 403
  tle = le->next;
  ldv_44726: ;
#line 403
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 404
    goto ldv_44725;
  } else {

  }
#line 411
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 413
  spin_unlock_irq(& mdev->req_lock);
#line 414
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 425
  return (((((int )os.ldv_35070.conn > 9 && (int )ns.ldv_35070.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35070.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 441
  tmp = spinlock_check(& mdev->req_lock);
#line 441
  flags = _raw_spin_lock_irqsave(tmp);
#line 442
  os = mdev->state;
#line 443
  ns.i = (os.i & ~ mask.i) | val.i;
#line 444
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 445
  ns = mdev->state;
#line 446
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 448
  return (rv);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 460
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 461
  return;
}
}
#line 463
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 464
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 466
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 468
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 478
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 478
  if (tmp != 0) {
#line 479
    return (SS_CW_SUCCESS);
  } else {

  }
#line 481
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 481
  if (tmp___0 != 0) {
#line 482
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 484
  rv = 0;
#line 485
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 485
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 486
  os = mdev->state;
#line 487
  ns.i = (os.i & ~ mask.i) | val.i;
#line 488
  ns = sanitize_state(mdev, os, ns, 0);
#line 490
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 490
  if (tmp___2 == 0) {
#line 491
    rv = 4;
  } else {

  }
#line 492
  if (rv == 0) {
#line 493
    rv = is_valid_state(mdev, ns);
#line 494
    if (rv == 1) {
#line 495
      rv = is_valid_state_transition(mdev, ns, os);
#line 496
      if (rv == 1) {
#line 497
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 500
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 502
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 524
  init_completion(& done);
#line 526
  if (((unsigned int )f & 8U) != 0U) {
#line 527
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 529
  tmp = spinlock_check(& mdev->req_lock);
#line 529
  flags = _raw_spin_lock_irqsave(tmp);
#line 530
  os = mdev->state;
#line 531
  ns.i = (os.i & ~ mask.i) | val.i;
#line 532
  ns = sanitize_state(mdev, os, ns, 0);
#line 534
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 534
  if (tmp___5 != 0) {
#line 535
    rv = is_valid_state(mdev, ns);
#line 536
    if (rv == 1) {
#line 537
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 538
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 540
    if (rv <= 0) {
#line 541
      if (((unsigned int )f & 2U) != 0U) {
#line 542
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 543
      goto abort;
    } else {

    }
#line 546
    drbd_state_lock___0(mdev);
#line 547
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 547
    if (tmp___0 == 0) {
#line 548
      drbd_state_unlock(mdev);
#line 549
      rv = -10;
#line 550
      if (((unsigned int )f & 2U) != 0U) {
#line 551
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 552
      goto abort;
    } else {

    }
#line 555
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 555
    rv = (int )tmp___1;
#line 555
    if (rv != 0) {
#line 555
      goto ldv_44794;
    } else {

    }
#line 555
    tmp___2 = get_current();
#line 555
    __wait.flags = 0U;
#line 555
    __wait.private = (void *)tmp___2;
#line 555
    __wait.func = & autoremove_wake_function;
#line 555
    __wait.task_list.next = & __wait.task_list;
#line 555
    __wait.task_list.prev = & __wait.task_list;
    ldv_44797: 
#line 555
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 555
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 555
    rv = (int )tmp___3;
#line 555
    if (rv != 0) {
#line 555
      goto ldv_44796;
    } else {

    }
#line 555
    schedule();
#line 555
    goto ldv_44797;
    ldv_44796: 
#line 555
    finish_wait(& mdev->state_wait, & __wait);
    ldv_44794: ;
#line 558
    if (rv <= 0) {
#line 559
      drbd_state_unlock(mdev);
#line 560
      if (((unsigned int )f & 2U) != 0U) {
#line 561
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 562
      goto abort;
    } else {

    }
#line 564
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 564
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 565
    os = mdev->state;
#line 566
    ns.i = (os.i & ~ mask.i) | val.i;
#line 567
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 568
    drbd_state_unlock(mdev);
  } else {
#line 570
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 573
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 575
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 576
    tmp___6 = get_current();
#line 576
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 576
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              576);
    } else {

    }
#line 577
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 581
  if (((unsigned int )f & 8U) != 0U) {
#line 582
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 584
  return (rv);
}
}
#line 597 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 602
  rv = drbd_req_state(mdev, mask, val, f);
#line 602
  if (rv != -18) {
#line 602
    goto ldv_44808;
  } else {

  }
#line 602
  tmp = get_current();
#line 602
  __wait.flags = 0U;
#line 602
  __wait.private = (void *)tmp;
#line 602
  __wait.func = & autoremove_wake_function;
#line 602
  __wait.task_list.next = & __wait.task_list;
#line 602
  __wait.task_list.prev = & __wait.task_list;
  ldv_44811: 
#line 602
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 602
  rv = drbd_req_state(mdev, mask, val, f);
#line 602
  if (rv != -18) {
#line 602
    goto ldv_44810;
  } else {

  }
#line 602
  schedule();
#line 602
  goto ldv_44811;
  ldv_44810: 
#line 602
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44808: ;
#line 605
  return (rv);
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 610
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_35070.pdsk);
#line 610
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35070.disk);
#line 610
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35070.peer);
#line 610
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35070.role);
#line 610
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35070.conn);
#line 610
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 621
  return;
}
}
#line 624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 627
  if (err == -18) {
#line 628
    return;
  } else {

  }
#line 629
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 629
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 630
  print_st(mdev, (char *)" state", os);
#line 631
  print_st(mdev, (char *)"wanted", ns);
#line 632
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 660
  rv = 1;
#line 662
  fp = FP_DONT_CARE;
#line 663
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 663
  if (tmp != 0) {
#line 664
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 665
    put_ldev(mdev);
  } else {

  }
#line 668
  tmp___0 = get_net_conf(mdev);
#line 668
  if (tmp___0 != 0) {
#line 669
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 671
      rv = -1;
    } else {

    }
#line 672
    put_net_conf(mdev);
  } else {

  }
#line 675
  if (rv <= 0) {

  } else
#line 677
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 678
    rv = -12;
  } else
#line 680
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35070.conn <= 9) && (int )ns.ldv_35070.disk <= 7) {
#line 681
    rv = -2;
  } else
#line 683
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35070.conn <= 9) && (int )ns.ldv_35070.pdsk > 5) {
#line 685
    rv = -7;
  } else
#line 687
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35070.disk <= 4) && (int )ns.ldv_35070.pdsk <= 4) {
#line 688
    rv = -2;
  } else
#line 690
  if ((int )ns.ldv_35070.conn > 10 && (int )ns.ldv_35070.disk <= 3) {
#line 691
    rv = -4;
  } else
#line 693
  if ((int )ns.ldv_35070.conn > 10 && (int )ns.ldv_35070.pdsk <= 3) {
#line 694
    rv = -5;
  } else
#line 696
  if (((int )ns.ldv_35070.conn > 10 && (int )ns.ldv_35070.disk <= 7) && (int )ns.ldv_35070.pdsk <= 7) {
#line 697
    rv = -2;
  } else
#line 699
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 704
    rv = -6;
  } else
#line 706
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 708
    rv = -14;
  } else
#line 710
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 712
    rv = -17;
  } else {

  }
#line 714
  return (rv);
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 726
  rv = 1;
#line 728
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35070.conn > 10) {
#line 730
    rv = -8;
  } else {

  }
#line 732
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 733
    rv = -9;
  } else {

  }
#line 735
  if ((int )ns.ldv_35070.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 736
    rv = -11;
  } else {

  }
#line 738
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35070.conn <= 1) {
#line 739
    rv = -13;
  } else {

  }
#line 741
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35070.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 742
    rv = -16;
  } else {

  }
#line 744
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 745
    rv = -18;
  } else {

  }
#line 747
  if ((int )ns.ldv_35070.conn == (int )os.ldv_35070.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 748
    rv = -18;
  } else {

  }
#line 750
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35070.conn <= 9) {
#line 751
    rv = -15;
  } else {

  }
#line 753
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35070.conn != (int )os.ldv_35070.conn) && (int )os.ldv_35070.conn > 10) {
#line 755
    rv = -8;
  } else {

  }
#line 757
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35070.conn <= 9) {
#line 759
    rv = -15;
  } else {

  }
#line 761
  return (rv);
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 779
  fp = FP_DONT_CARE;
#line 780
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 780
  if (tmp != 0) {
#line 781
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 782
    put_ldev(mdev);
  } else {

  }
#line 786
  if (((int )ns.ldv_35070.conn > 2 && (int )ns.ldv_35070.conn <= 7) && (int )os.ldv_35070.conn <= 1) {
#line 788
    ns.ldv_35070.conn = os.ldv_35070.conn;
  } else {

  }
#line 791
  if ((((int )os.ldv_35070.conn > 2 && (int )os.ldv_35070.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 793
    ns.ldv_35070.conn = os.ldv_35070.conn;
  } else {

  }
#line 796
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 797
    ns.ldv_35070.conn = os.ldv_35070.conn;
  } else {

  }
#line 799
  if ((int )ns.ldv_35070.conn <= 9) {
#line 800
    ns.ldv_35070.peer_isp = 0U;
#line 801
    ns.ldv_35070.peer = 0U;
#line 802
    if ((int )ns.ldv_35070.pdsk > 6 || (int )ns.ldv_35070.pdsk <= 3) {
#line 803
      ns.ldv_35070.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 807
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 808
    ns.ldv_35070.aftr_isp = 0U;
  } else {

  }
#line 810
  if ((int )ns.ldv_35070.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 811
    ns.ldv_35070.pdsk = 6U;
  } else {

  }
#line 814
  if (((int )os.ldv_35070.conn > 10 && (int )ns.ldv_35070.conn > 10) && ((int )ns.ldv_35070.disk <= 2 || (int )ns.ldv_35070.pdsk <= 2)) {
#line 816
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 817
      *warn_sync_abort = 1;
    } else {

    }
#line 818
    ns.ldv_35070.conn = 10U;
  } else {

  }
#line 821
  if ((int )ns.ldv_35070.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 824
    switch ((int )ns.ldv_35070.conn) {
    case 14: ;
    case 21: 
#line 827
    ns.ldv_35070.disk = 5U;
#line 828
    goto ldv_44844;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 833
    ns.ldv_35070.disk = 8U;
#line 834
    goto ldv_44844;
    case 17: 
#line 836
    ns.ldv_35070.disk = 4U;
#line 837
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 838
    goto ldv_44844;
    }
    ldv_44844: ;
#line 840
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 841
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 844
  if ((int )ns.ldv_35070.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 846
    switch ((int )ns.ldv_35070.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 851
    ns.ldv_35070.pdsk = 8U;
#line 852
    goto ldv_44854;
    case 13: ;
    case 20: 
#line 858
    ns.ldv_35070.pdsk = (int )os.ldv_35070.pdsk > 0 && (int )os.ldv_35070.pdsk <= 4 ? os.ldv_35070.pdsk : 5U;
#line 861
    goto ldv_44854;
    case 16: 
#line 863
    ns.ldv_35070.pdsk = 4U;
#line 864
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 865
    goto ldv_44854;
    }
    ldv_44854: ;
#line 867
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 868
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 872
  if ((int )ns.ldv_35070.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 872
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 872
    if (tmp___0 != 0) {
#line 874
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 875
        ns.ldv_35070.disk = mdev->new_state_tmp.ldv_35070.disk;
#line 876
        ns.ldv_35070.pdsk = mdev->new_state_tmp.ldv_35070.pdsk;
      } else {
#line 878
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 879
        ns.ldv_35070.disk = 0U;
#line 880
        ns.ldv_35070.pdsk = 6U;
      }
#line 882
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 885
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35070.conn <= 9) && (int )ns.ldv_35070.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35070.conn > 9) || (int )os.ldv_35070.pdsk <= 5)) {
#line 888
    ns.ldv_35070.susp = 1U;
  } else {

  }
#line 890
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 891
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 892
      ns.ldv_35070.conn = 20U;
    } else {

    }
#line 893
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 894
      ns.ldv_35070.conn = 21U;
    } else {

    }
  } else {
#line 896
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 897
      ns.ldv_35070.conn = 16U;
    } else {

    }
#line 898
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 899
      ns.ldv_35070.conn = 17U;
    } else {

    }
  }
#line 902
  return (ns);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 908
  if ((unsigned int )cs == 19U) {
#line 914
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 916
    bit = mdev->ov_start_sector >> 3;
#line 917
    if (mdev->rs_total <= bit) {
#line 918
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 920
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 922
  return;
}
}
#line 933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  int tmp___0 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  unsigned long tmp___22 ;
  unsigned long tmp___23 ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 938
  rv = 1;
#line 939
  warn_sync_abort = 0;
#line 942
  os = mdev->state;
#line 944
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 946
  if (ns.i == os.i) {
#line 947
    return (2);
  } else {

  }
#line 949
  if (((unsigned int )flags & 1U) == 0U) {
#line 953
    rv = is_valid_state(mdev, ns);
#line 954
    if (rv <= 0) {
#line 958
      tmp___0 = is_valid_state(mdev, os);
#line 958
      if (tmp___0 == rv) {
#line 959
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 959
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considering state change from bad state. Error would be: \'%s\'\n",
                tmp);
#line 962
        print_st(mdev, (char *)"old", os);
#line 963
        print_st(mdev, (char *)"new", ns);
#line 964
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 967
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 970
  if (rv <= 0) {
#line 971
    if (((unsigned int )flags & 2U) != 0U) {
#line 972
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 973
    return (rv);
  } else {

  }
#line 976
  if (warn_sync_abort != 0) {
#line 977
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync aborted.\n");
  } else {

  }
#line 981
  pbp = (char *)(& pb);
#line 982
  *pbp = 0;
#line 983
  if ((int )ns.ldv_35070.role != (int )os.ldv_35070.role) {
#line 983
    tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35070.role);
#line 983
    tmp___2 = drbd_role_str((enum drbd_role )os.ldv_35070.role);
#line 983
    tmp___3 = sprintf(pbp, "role( %s -> %s ) ", tmp___2, tmp___1);
#line 983
    pbp = pbp + (unsigned long )tmp___3;
  } else {

  }
#line 984
  if ((int )ns.ldv_35070.peer != (int )os.ldv_35070.peer) {
#line 984
    tmp___4 = drbd_role_str((enum drbd_role )ns.ldv_35070.peer);
#line 984
    tmp___5 = drbd_role_str((enum drbd_role )os.ldv_35070.peer);
#line 984
    tmp___6 = sprintf(pbp, "peer( %s -> %s ) ", tmp___5, tmp___4);
#line 984
    pbp = pbp + (unsigned long )tmp___6;
  } else {

  }
#line 985
  if ((int )ns.ldv_35070.conn != (int )os.ldv_35070.conn) {
#line 985
    tmp___7 = drbd_conn_str((enum drbd_conns )ns.ldv_35070.conn);
#line 985
    tmp___8 = drbd_conn_str((enum drbd_conns )os.ldv_35070.conn);
#line 985
    tmp___9 = sprintf(pbp, "conn( %s -> %s ) ", tmp___8, tmp___7);
#line 985
    pbp = pbp + (unsigned long )tmp___9;
  } else {

  }
#line 986
  if ((int )ns.ldv_35070.disk != (int )os.ldv_35070.disk) {
#line 986
    tmp___10 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35070.disk);
#line 986
    tmp___11 = drbd_disk_str((enum drbd_disk_state )os.ldv_35070.disk);
#line 986
    tmp___12 = sprintf(pbp, "disk( %s -> %s ) ", tmp___11, tmp___10);
#line 986
    pbp = pbp + (unsigned long )tmp___12;
  } else {

  }
#line 987
  if ((int )ns.ldv_35070.pdsk != (int )os.ldv_35070.pdsk) {
#line 987
    tmp___13 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35070.pdsk);
#line 987
    tmp___14 = drbd_disk_str((enum drbd_disk_state )os.ldv_35070.pdsk);
#line 987
    tmp___15 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___14, tmp___13);
#line 987
    pbp = pbp + (unsigned long )tmp___15;
  } else {

  }
#line 988
  if ((int )ns.ldv_35070.susp != (int )os.ldv_35070.susp) {
#line 988
    tmp___16 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 988
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 989
  if ((int )ns.ldv_35070.aftr_isp != (int )os.ldv_35070.aftr_isp) {
#line 989
    tmp___17 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 989
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 990
  if ((int )ns.ldv_35070.peer_isp != (int )os.ldv_35070.peer_isp) {
#line 990
    tmp___18 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 990
    pbp = pbp + (unsigned long )tmp___18;
  } else {

  }
#line 991
  if ((int )ns.ldv_35070.user_isp != (int )os.ldv_35070.user_isp) {
#line 991
    tmp___19 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 991
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 992
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1003
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1003
    tmp___20 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1003
    if (tmp___20 == 0) {
#line 1007
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1009
  mdev->state.i = ns.i;
#line 1010
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1011
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1014
  if ((int )os.ldv_35070.conn > 15 && (int )ns.ldv_35070.conn <= 10) {
#line 1015
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1016
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1020
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35070.conn <= 9) {
#line 1022
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1024
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1028
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1030
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1031
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1032
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1033
      tmp___21 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1033
      if (tmp___21 == 0) {
#line 1034
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1042
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1044
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1045
    mdev->rs_mark_time = jiffies;
#line 1046
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1047
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1050
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1052
    mdev->ov_position = 0UL;
#line 1053
    tmp___22 = drbd_bm_bits(mdev);
#line 1053
    mdev->rs_mark_left = tmp___22;
#line 1053
    mdev->rs_total = tmp___22;
#line 1055
    if (mdev->agreed_pro_version > 89) {
#line 1056
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35070.conn);
    } else {
#line 1058
      mdev->ov_start_sector = 0UL;
    }
#line 1059
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1061
    tmp___23 = jiffies;
#line 1061
    mdev->rs_mark_time = tmp___23;
#line 1061
    mdev->rs_start = tmp___23;
#line 1063
    mdev->ov_last_oos_size = 0UL;
#line 1064
    mdev->ov_last_oos_start = 0UL;
#line 1066
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1067
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1069
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1073
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1073
  if (tmp___25 != 0) {
#line 1074
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1078
    tmp___24 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1078
    if (tmp___24 != 0) {
#line 1079
      mdf = mdf | 64U;
    } else {

    }
#line 1080
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U || ((int )mdev->state.ldv_35070.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 4U)) {
#line 1082
      mdf = mdf | 2U;
    } else {

    }
#line 1083
    if ((int )mdev->state.ldv_35070.conn > 9) {
#line 1084
      mdf = mdf | 4U;
    } else {

    }
#line 1085
    if ((int )mdev->state.ldv_35070.disk > 4) {
#line 1086
      mdf = mdf | 1U;
    } else {

    }
#line 1087
    if ((int )mdev->state.ldv_35070.disk > 5) {
#line 1088
      mdf = mdf | 16U;
    } else {

    }
#line 1089
    if ((int )mdev->state.ldv_35070.pdsk <= 5 && (int )mdev->state.ldv_35070.pdsk > 3) {
#line 1090
      mdf = mdf | 32U;
    } else {

    }
#line 1091
    if ((mdev->ldev)->md.flags != mdf) {
#line 1092
      (mdev->ldev)->md.flags = mdf;
#line 1093
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1095
    if ((int )os.ldv_35070.disk <= 6 && (int )ns.ldv_35070.disk > 6) {
#line 1096
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1097
    put_ldev(mdev);
  } else {

  }
#line 1101
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1103
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1106
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1107
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1110
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1111
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1114
  if (((int )os.ldv_35070.conn > 7 && (int )ns.ldv_35070.conn <= 7) && (int )ns.ldv_35070.conn > 2) {
#line 1116
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1118
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1118
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1119
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1120
    ascw->os = os;
#line 1121
    ascw->ns = ns;
#line 1122
    ascw->flags = flags;
#line 1123
    ascw->w.cb = & w_after_state_ch;
#line 1124
    ascw->done = done;
#line 1125
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1127
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1130
  return (rv);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1136
  __mptr = (struct drbd_work  const  *)w;
#line 1136
  ascw = (struct after_state_chg_work *)__mptr;
#line 1137
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1138
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1139
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1139
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1139);
    } else {

    }
#line 1140
    complete(ascw->done);
  } else {

  }
#line 1142
  kfree((void const   *)ascw);
#line 1144
  return (1);
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1149
  if (rv != 0) {
#line 1150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1151
    val.i = 0U;
#line 1151
    val.ldv_35070.conn = 10U;
#line 1151
    mask.i = 0U;
#line 1151
    mask.ldv_35070.conn = 31U;
#line 1151
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1152
    return;
  } else {

  }
#line 1155
  switch ((int )mdev->state.ldv_35070.conn) {
  case 12: 
#line 1157
  val___0.i = 0U;
#line 1157
  val___0.ldv_35070.conn = 15U;
#line 1157
  mask___0.i = 0U;
#line 1157
  mask___0.ldv_35070.conn = 31U;
#line 1157
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1158
  goto ldv_44897;
  case 11: 
#line 1160
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1161
  goto ldv_44897;
  }
  ldv_44897: ;
#line 1164
  return;
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  int tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1177
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1178
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1179
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1180
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1183
  fp = FP_DONT_CARE;
#line 1184
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1184
  if (tmp != 0) {
#line 1185
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1186
    put_ldev(mdev);
  } else {

  }
#line 1190
  drbd_bcast_state(mdev, ns);
#line 1192
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35070.disk > 7) || (int )os.ldv_35070.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35070.disk <= 7) && (int )ns.ldv_35070.pdsk <= 7)) {
#line 1194
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1199
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1202
    if (((int )os.ldv_35070.pdsk > 5 && (int )ns.ldv_35070.pdsk <= 5) || ((int )os.ldv_35070.conn <= 9 && (int )ns.ldv_35070.conn > 9)) {
#line 1204
      tl_clear(mdev);
#line 1205
      spin_lock_irq(& mdev->req_lock);
#line 1206
      __ns.i = mdev->state.i;
#line 1206
      __ns.ldv_35070.susp = 0U;
#line 1206
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1207
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1211
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35070.pdsk > 0) {
#line 1212
    drbd_send_uuids(mdev);
#line 1213
    drbd_send_state(mdev);
  } else {

  }
#line 1215
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1216
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1219
  if ((((int )os.ldv_35070.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35070.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1225
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1225
    if (tmp___0 != 0) {
#line 1226
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35070.disk > 7) {
#line 1228
        drbd_uuid_new_current(mdev);
#line 1229
        drbd_send_uuids(mdev);
      } else {

      }
#line 1231
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1235
  if ((int )ns.ldv_35070.pdsk <= 3) {
#line 1235
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1235
    if (tmp___1 != 0) {
#line 1236
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1237
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1240
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1241
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1242
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1246
  if (((int )ns.ldv_35070.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1248
    drbd_send_sizes(mdev, 0, 0);
#line 1249
    drbd_send_uuids(mdev);
#line 1250
    drbd_send_state(mdev);
  } else {

  }
#line 1254
  if ((int )ns.ldv_35070.conn > 9 && ((int )os.ldv_35070.aftr_isp != (int )ns.ldv_35070.aftr_isp || (int )os.ldv_35070.user_isp != (int )ns.ldv_35070.user_isp)) {
#line 1257
    drbd_send_state(mdev);
  } else {

  }
#line 1260
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1262
    suspend_other_sg(mdev);
  } else {

  }
#line 1266
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35070.conn > 9) {
#line 1267
    drbd_send_state(mdev);
  } else {

  }
#line 1270
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1272
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1275
  if ((((int )os.ldv_35070.conn <= 9 && (int )ns.ldv_35070.conn <= 9) && (int )os.ldv_35070.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1277
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1279
  if ((int )os.ldv_35070.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1282
    eh = EP_PASS_ON;
#line 1283
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1283
    if (tmp___2 != 0) {
#line 1284
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1285
      put_ldev(mdev);
    } else {

    }
#line 1288
    drbd_rs_cancel_all(mdev);
#line 1292
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1292
    if (tmp___3 == 0) {
#line 1292
      goto ldv_44909;
    } else {

    }
#line 1292
    tmp___4 = get_current();
#line 1292
    __wait.flags = 0U;
#line 1292
    __wait.private = (void *)tmp___4;
#line 1292
    __wait.func = & autoremove_wake_function;
#line 1292
    __wait.task_list.next = & __wait.task_list;
#line 1292
    __wait.task_list.prev = & __wait.task_list;
    ldv_44912: 
#line 1292
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1292
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1292
    if (tmp___5 == 0) {
#line 1292
      goto ldv_44911;
    } else {

    }
#line 1292
    schedule();
#line 1292
    goto ldv_44912;
    ldv_44911: 
#line 1292
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_44909: 
#line 1293
    mdev->rs_total = 0UL;
#line 1294
    mdev->rs_failed = 0UL;
#line 1295
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1297
    spin_lock_irq(& mdev->req_lock);
#line 1298
    __ns___0.i = mdev->state.i;
#line 1298
    __ns___0.ldv_35070.disk = 0U;
#line 1298
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1299
    spin_unlock_irq(& mdev->req_lock);
#line 1301
    if ((unsigned int )eh == 1U) {
#line 1302
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1305
  if ((int )os.ldv_35070.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1307
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1308
      tmp___6 = drbd_send_state(mdev);
#line 1308
      if (tmp___6 != 0) {
#line 1309
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that my disk is broken.\n");
      } else {
#line 1311
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state in drbd_io_error() failed\n");
      }
    } else {

    }
#line 1314
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1314
    if (tmp___7 == 0) {
#line 1314
      goto ldv_44915;
    } else {

    }
#line 1314
    tmp___8 = get_current();
#line 1314
    __wait___0.flags = 0U;
#line 1314
    __wait___0.private = (void *)tmp___8;
#line 1314
    __wait___0.func = & autoremove_wake_function;
#line 1314
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1314
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44918: 
#line 1314
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1314
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1314
    if (tmp___9 == 0) {
#line 1314
      goto ldv_44917;
    } else {

    }
#line 1314
    schedule();
#line 1314
    goto ldv_44918;
    ldv_44917: 
#line 1314
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_44915: 
#line 1315
    lc_destroy(mdev->resync);
#line 1316
    mdev->resync = 0;
#line 1317
    lc_destroy(mdev->act_log);
#line 1318
    mdev->act_log = 0;
#line 1319
    drbd_free_bc(mdev->ldev);
#line 1319
    mdev->ldev = 0;
#line 1323
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1324
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1328
  if ((int )ns.ldv_35070.disk > 3 && (int )ns.ldv_35070.pdsk > 3) {
#line 1328
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1328
    if (tmp___10 != 0) {
#line 1330
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1331
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1335
  if ((((int )os.ldv_35070.conn > 10 && (int )ns.ldv_35070.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1338
    resume_next_sg(mdev);
  } else {

  }
#line 1341
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1342
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1346
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1349
    if ((int )os.ldv_35070.aftr_isp != (int )ns.ldv_35070.aftr_isp) {
#line 1350
      resume_next_sg(mdev);
    } else {

    }
#line 1352
    tmp___11 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1352
    if (tmp___11 != 0) {
#line 1353
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1356
  drbd_md_sync(mdev);
#line 1357
  return;
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1362
  thi = (struct drbd_thread *)arg;
#line 1363
  mdev = thi->mdev;
  restart: 
#line 1368
  retval = (*(thi->function))(thi);
#line 1370
  tmp = spinlock_check(& thi->t_lock);
#line 1370
  flags = _raw_spin_lock_irqsave(tmp);
#line 1382
  if ((unsigned int )thi->t_state == 3U) {
#line 1383
    tmp___0 = get_current();
#line 1383
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1384
    thi->t_state = Running;
#line 1385
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1386
    goto restart;
  } else {

  }
#line 1389
  thi->task = 0;
#line 1390
  thi->t_state = None;
#line 1391
  __asm__  volatile   ("mfence": : : "memory");
#line 1392
  complete(& thi->stop);
#line 1393
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1395
  tmp___1 = get_current();
#line 1395
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1398
  ldv_module_put_1(& __this_module);
#line 1399
  return (retval);
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1405
  spinlock_check(& thi->t_lock);
#line 1405
  __raw_spin_lock_init(& thi->t_lock.ldv_5788.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1406
  thi->task = 0;
#line 1407
  thi->t_state = None;
#line 1408
  thi->function = func;
#line 1409
  thi->mdev = mdev;
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1414
  mdev = thi->mdev;
#line 1418
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1425
  tmp = spinlock_check(& thi->t_lock);
#line 1425
  flags = _raw_spin_lock_irqsave(tmp);
#line 1427
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1429
  tmp___0 = get_current();
#line 1429
  tmp___1 = get_current();
#line 1429
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1433
  tmp___2 = ldv_try_module_get_2(& __this_module);
#line 1433
  if (tmp___2 == 0) {
#line 1434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1435
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1436
    return (0);
  } else {

  }
#line 1439
  init_completion(& thi->stop);
#line 1440
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1440);
  } else {

  }
#line 1441
  thi->reset_cpu_mask = 1;
#line 1442
  thi->t_state = Running;
#line 1443
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1444
  tmp___3 = get_current();
#line 1444
  flush_signals(tmp___3);
#line 1446
  tmp___4 = mdev_to_minor(mdev);
#line 1446
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1449
  tmp___5 = IS_ERR((void const   *)nt);
#line 1449
  if (tmp___5 != 0L) {
#line 1450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1452
    ldv_module_put_3(& __this_module);
#line 1453
    return (0);
  } else {

  }
#line 1455
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1455
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1456
  thi->task = nt;
#line 1457
  thi->t_state = Running;
#line 1458
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1459
  wake_up_process(nt);
#line 1460
  goto ldv_44951;
  case 2U: 
#line 1462
  thi->t_state = Restarting;
#line 1463
  tmp___7 = get_current();
#line 1463
  tmp___8 = get_current();
#line 1463
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1469
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1470
  goto ldv_44951;
  }
  ldv_44951: ;
#line 1473
  return (1);
}
}
#line 1477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1481
  ns = restart != 0 ? Restarting : Exiting;
#line 1484
  tmp = spinlock_check(& thi->t_lock);
#line 1484
  flags = _raw_spin_lock_irqsave(tmp);
#line 1486
  if ((unsigned int )thi->t_state == 0U) {
#line 1487
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1488
    if (restart != 0) {
#line 1489
      drbd_thread_start(thi);
    } else {

    }
#line 1490
    return;
  } else {

  }
#line 1493
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1494
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1495
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1496
      return;
    } else {

    }
#line 1499
    thi->t_state = ns;
#line 1500
    __asm__  volatile   ("mfence": : : "memory");
#line 1501
    init_completion(& thi->stop);
#line 1502
    tmp___0 = get_current();
#line 1502
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1503
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1507
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1509
  if (wait != 0) {
#line 1510
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1511
  return;
}
}
#line 1521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1526
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1526
  if (tmp != 0U) {
#line 1527
    return;
  } else {

  }
#line 1529
  tmp___0 = mdev_to_minor(mdev);
#line 1529
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1529
  ord = (int )(tmp___0 % tmp___1);
#line 1530
  cpu = -1;
#line 1530
  goto ldv_44972;
  ldv_44971: 
#line 1531
  tmp___2 = ord;
#line 1531
  ord = ord - 1;
#line 1531
  if (tmp___2 == 0) {
#line 1532
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1533
    return;
  } else {

  }
  ldv_44972: 
#line 1530
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1530
  cpu = (int )tmp___3;
#line 1530
  if (cpu < nr_cpu_ids) {
#line 1531
    goto ldv_44971;
  } else {

  }
#line 1537
  cpumask_setall(mdev->cpu_mask);
#line 1538
  return;
}
}
#line 1547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1549
  tmp = get_current();
#line 1549
  p = tmp;
#line 1550
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1555
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1555
  if (_b != 0) {
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1555);
  } else {

  }
#line 1555
  if (_b != 0) {
#line 1556
    return;
  } else {

  }
#line 1557
  if (thi->reset_cpu_mask == 0) {
#line 1558
    return;
  } else {

  }
#line 1559
  thi->reset_cpu_mask = 0;
#line 1560
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1561
  return;
}
}
#line 1565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1571
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1571
  if (_b != 0) {
#line 1571
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1571);
  } else {

  }
#line 1571
  if (_b != 0) {
#line 1571
    return (0);
  } else {

  }
#line 1572
  _b___0 = size == 0UL;
#line 1572
  if (_b___0 != 0) {
#line 1572
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1572);
  } else {

  }
#line 1572
  if (_b___0 != 0) {
#line 1572
    return (0);
  } else {

  }
#line 1574
  h->magic = 1728214147U;
#line 1575
  tmp = __fswab16((int )((__u16 )cmd));
#line 1575
  h->command = tmp;
#line 1576
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1576
  h->length = tmp___0;
#line 1578
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1580
  ok = (size_t )sent == size;
#line 1581
  if (ok == 0) {
#line 1582
    tmp___1 = cmdname(cmd);
#line 1582
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1584
  return (ok);
}
}
#line 1590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1593
  ok = 0;
#line 1596
  if (use_data_socket != 0) {
#line 1597
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1598
    sock = mdev->data.socket;
  } else {
#line 1600
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1601
    sock = mdev->meta.socket;
  }
#line 1606
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1606
  if (tmp != 0L) {
#line 1607
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1609
  if (use_data_socket != 0) {
#line 1610
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1612
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1613
  return (ok);
}
}
#line 1616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1622
  h.magic = 1728214147U;
#line 1623
  tmp = __fswab16((int )((__u16 )cmd));
#line 1623
  h.command = tmp;
#line 1624
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1624
  h.length = tmp___0;
#line 1626
  tmp___1 = drbd_get_data_sock(mdev);
#line 1626
  if (tmp___1 == 0) {
#line 1627
    return (0);
  } else {

  }
#line 1629
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1629
  ok = tmp___2 == 8;
#line 1631
  if (ok != 0) {
#line 1631
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1631
    if ((size_t )tmp___3 == size) {
#line 1631
      tmp___4 = 1;
    } else {
#line 1631
      tmp___4 = 0;
    }
  } else {
#line 1631
    tmp___4 = 0;
  }
#line 1631
  ok = tmp___4;
#line 1634
  drbd_put_data_sock(mdev);
#line 1636
  return (ok);
}
}
#line 1639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1644
  apv = mdev->agreed_pro_version;
#line 1646
  if (apv > 87) {
#line 1646
    if (apv == 88) {
#line 1646
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1646
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1646
      tmp___0 = 140;
    }
#line 1646
    size = tmp___0;
  } else {
#line 1646
    size = 12;
  }
#line 1654
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1655
  sock = mdev->data.socket;
#line 1657
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1657
  if (tmp___2 != 0L) {
#line 1658
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1660
    p = & mdev->data.sbuf.rs_param_89;
#line 1663
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1665
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1665
    p->rate = tmp___1;
#line 1667
    if (apv > 87) {
#line 1668
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1669
    if (apv > 88) {
#line 1670
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1672
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1674
    rv = 0;
  }
#line 1676
  mutex_unlock(& mdev->data.mutex);
#line 1678
  return (rv);
}
}
#line 1681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1686
  size = 32;
#line 1688
  if (mdev->agreed_pro_version > 86) {
#line 1689
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1689
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1693
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1693
  p = (struct p_protocol *)tmp___0;
#line 1694
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1695
    return (0);
  } else {

  }
#line 1697
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1697
  p->protocol = tmp___1;
#line 1698
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1698
  p->after_sb_0p = tmp___2;
#line 1699
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1699
  p->after_sb_1p = tmp___3;
#line 1700
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1700
  p->after_sb_2p = tmp___4;
#line 1701
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1701
  p->two_primaries = tmp___5;
#line 1703
  cf = 0;
#line 1704
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1705
    cf = cf | 1;
  } else {

  }
#line 1706
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1707
    if (mdev->agreed_pro_version > 91) {
#line 1708
      cf = cf | 2;
    } else {
#line 1710
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1711
      kfree((void const   *)p);
#line 1712
      return (0);
    }
  } else {

  }
#line 1715
  tmp___6 = __fswab32((__u32 )cf);
#line 1715
  p->conn_flags = tmp___6;
#line 1717
  if (mdev->agreed_pro_version > 86) {
#line 1718
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1720
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1722
  kfree((void const   *)p);
#line 1723
  return (rv);
}
}
#line 1726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1731
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1731
  if (tmp == 0) {
#line 1732
    return (1);
  } else {

  }
#line 1734
  i = 0;
#line 1734
  goto ldv_45038;
  ldv_45037: ;
#line 1735
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1735
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1735
    p.uuid[i] = tmp___0;
  } else {
#line 1735
    p.uuid[i] = 0ULL;
  }
#line 1734
  i = i + 1;
  ldv_45038: ;
#line 1734
  if (i <= 3) {
#line 1735
    goto ldv_45037;
  } else {

  }
#line 1737
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1738
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1738
  p.uuid[4] = tmp___1;
#line 1739
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1740
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1740
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1741
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1817UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1742
  tmp___3 = __fswab64(uuid_flags);
#line 1742
  p.uuid[5] = tmp___3;
#line 1744
  put_ldev(mdev);
#line 1746
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1746
  return (tmp___4);
}
}
#line 1750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1752
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1752
  return (tmp);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1757
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1757
  return (tmp);
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1765
  tmp = __fswab64(val);
#line 1765
  p.uuid = tmp;
#line 1767
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1767
  return (tmp___0);
}
}
#line 1771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1778
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1778
  if (tmp != 0) {
#line 1779
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1779
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1779);
    } else {

    }
#line 1780
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1781
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1782
    q_order_type = drbd_queue_order_type(mdev);
#line 1783
    put_ldev(mdev);
  } else {
#line 1785
    d_size = 0UL;
#line 1786
    u_size = 0UL;
#line 1787
    q_order_type = 0;
  }
#line 1790
  tmp___0 = __fswab64((__u64 )d_size);
#line 1790
  p.d_size = tmp___0;
#line 1791
  tmp___1 = __fswab64((__u64 )u_size);
#line 1791
  p.u_size = tmp___1;
#line 1792
  if (trigger_reply == 0) {
#line 1792
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1792
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1792
    tmp___3 = 0ULL;
  }
#line 1792
  tmp___4 = __fswab64(tmp___3);
#line 1792
  p.c_size = tmp___4;
#line 1793
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1793
  tmp___6 = __fswab32(tmp___5);
#line 1793
  p.max_segment_size = tmp___6;
#line 1794
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1794
  p.queue_order_type = tmp___7;
#line 1795
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1795
  p.dds_flags = tmp___8;
#line 1797
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1799
  return (ok);
}
}
#line 1806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1810
  ok = 0;
#line 1814
  drbd_state_lock___0(mdev);
#line 1816
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1818
  tmp = __fswab32(mdev->state.i);
#line 1818
  p.state = tmp;
#line 1819
  sock = mdev->data.socket;
#line 1821
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1821
  if (tmp___0 != 0L) {
#line 1822
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1826
  mutex_unlock(& mdev->data.mutex);
#line 1828
  drbd_state_unlock(mdev);
#line 1829
  return (ok);
}
}
#line 1832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1837
  tmp = __fswab32(mask.i);
#line 1837
  p.mask = tmp;
#line 1838
  tmp___0 = __fswab32(val.i);
#line 1838
  p.val = tmp___0;
#line 1840
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1840
  return (tmp___1);
}
}
#line 1844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1848
  tmp = __fswab32((__u32 )retcode);
#line 1848
  p.retcode = tmp;
#line 1850
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1850
  return (tmp___0);
}
}
#line 1854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1867
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1869
    return (0);
  } else {

  }
#line 1871
  if (c->bit_offset >= c->bm_bits) {
#line 1872
    return (0);
  } else {

  }
#line 1875
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1876
  memset((void *)(& p->code), 0, 4087UL);
#line 1878
  plain_bits = 0UL;
#line 1883
  toggle = 2U;
  ldv_45092: ;
#line 1888
  if (toggle == 0U) {
#line 1888
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1888
    tmp = tmp___0;
  } else {
#line 1888
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1888
    tmp = tmp___1;
  }
#line 1890
  if (tmp == 0xffffffffffffffffUL) {
#line 1891
    tmp = c->bm_bits;
  } else {

  }
#line 1892
  rl = tmp - c->bit_offset;
#line 1894
  if (toggle == 2U) {
#line 1895
    if (rl == 0UL) {
#line 1898
      DCBP_set_start(p, 1);
#line 1900
      toggle = toggle == 0U;
#line 1901
      goto ldv_45090;
    } else {

    }
#line 1903
    DCBP_set_start(p, 0);
  } else {

  }
#line 1908
  if (rl == 0UL) {
#line 1909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 1911
    return (-1);
  } else {

  }
#line 1914
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1915
  if (bits == -105) {
#line 1916
    goto ldv_45091;
  } else {

  }
#line 1917
  if (bits <= 0) {
#line 1918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 1919
    return (0);
  } else {

  }
#line 1922
  toggle = toggle == 0U;
#line 1923
  plain_bits = plain_bits + rl;
#line 1924
  c->bit_offset = tmp;
  ldv_45090: ;
#line 1925
  if (c->bit_offset < c->bm_bits) {
#line 1926
    goto ldv_45092;
  } else {

  }
  ldv_45091: 
#line 1927
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1929
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1932
    c->bit_offset = c->bit_offset - plain_bits;
#line 1933
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1934
    c->bit_offset = c->word_offset * 64UL;
#line 1935
    return (0);
  } else {

  }
#line 1940
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1943
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1945
  return ((int )len);
}
}
#line 1949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30137 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1952
  p = (struct p_compressed_bm *)h;
#line 1957
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1959
  if (len < 0) {
#line 1960
    return (FAILED);
  } else {

  }
#line 1962
  if (len != 0) {
#line 1963
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1964
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 1967
    c->packets[0] = c->packets[0] + 1U;
#line 1968
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 1970
    if (c->bit_offset >= c->bm_bits) {
#line 1971
      len = 0;
    } else {

    }
  } else {
#line 1975
    __min1 = 511UL;
#line 1975
    __min2 = c->bm_words - c->word_offset;
#line 1975
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1976
    len = (int )((unsigned int )num_words * 8U);
#line 1977
    if (len != 0) {
#line 1978
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 1979
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 1981
    c->word_offset = c->word_offset + num_words;
#line 1982
    c->bit_offset = c->word_offset * 64UL;
#line 1984
    c->packets[1] = c->packets[1] + 1U;
#line 1985
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 1987
    if (c->bit_offset > c->bm_bits) {
#line 1988
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1990
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 1992
  if (ok == 2) {
#line 1993
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 1994
  return ((enum ldv_30137 )ok);
}
}
#line 1998 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30137 tmp___5 ;

  {
#line 2004
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2004
  if (_b != 0) {
#line 2004
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2004);
  } else {

  }
#line 2004
  if (_b != 0) {
#line 2004
    return (0);
  } else {

  }
#line 2008
  tmp = __get_free_pages(16U, 0U);
#line 2008
  p = (struct p_header *)tmp;
#line 2009
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2010
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2011
    return (0);
  } else {

  }
#line 2014
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2014
  if (tmp___2 != 0) {
#line 2015
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2015
    if (tmp___1 != 0) {
#line 2016
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2017
      drbd_bm_set_all(mdev);
#line 2018
      tmp___0 = drbd_bm_write(mdev);
#line 2018
      if (tmp___0 != 0) {
#line 2022
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2024
        drbd_md_clear_flag(mdev, 8);
#line 2025
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2028
    put_ldev(mdev);
  } else {

  }
#line 2031
  tmp___3 = drbd_bm_bits(mdev);
#line 2031
  tmp___4 = drbd_bm_words(mdev);
#line 2031
  __constr_expr_0.bm_bits = tmp___3;
#line 2031
  __constr_expr_0.bm_words = tmp___4;
#line 2031
  __constr_expr_0.bit_offset = 0UL;
#line 2031
  __constr_expr_0.word_offset = 0UL;
#line 2031
  __constr_expr_0.packets[0] = 0U;
#line 2031
  __constr_expr_0.packets[1] = 0U;
#line 2031
  __constr_expr_0.bytes[0] = 0U;
#line 2031
  __constr_expr_0.bytes[1] = 0U;
#line 2031
  c = __constr_expr_0;
  ldv_45119: 
#line 2037
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2037
  ret = (int )tmp___5;
#line 2038
  if (ret == 0) {
#line 2039
    goto ldv_45119;
  } else {

  }
#line 2040
  free_pages((unsigned long )p, 0U);
#line 2041
  return (ret == 2);
}
}
#line 2044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2048
  tmp = drbd_get_data_sock(mdev);
#line 2048
  if (tmp == 0) {
#line 2049
    return (-1);
  } else {

  }
#line 2050
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2050
  err = tmp___0 == 0;
#line 2051
  drbd_put_data_sock(mdev);
#line 2052
  return (err);
}
}
#line 2055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2060
  p.barrier = barrier_nr;
#line 2061
  tmp = __fswab32(set_size);
#line 2061
  p.set_size = tmp;
#line 2063
  if ((int )mdev->state.ldv_35070.conn <= 9) {
#line 2064
    return (0);
  } else {

  }
#line 2065
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2067
  return (ok);
}
}
#line 2078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2086
  p.sector = sector;
#line 2087
  p.block_id = block_id;
#line 2088
  p.blksize = blksize;
#line 2089
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2089
  tmp___0 = __fswab32((__u32 )tmp);
#line 2089
  p.seq_num = tmp___0;
#line 2091
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35070.conn <= 9) {
#line 2092
    return (0);
  } else {

  }
#line 2093
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2095
  return (ok);
}
}
#line 2098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2101
  header_size = 24;
#line 2103
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2105
  tmp = __fswab32((__u32 )data_size);
#line 2105
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2105
  return (tmp___0);
}
}
#line 2109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2112
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2112
  return (tmp);
}
}
#line 2121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2124
  tmp = __fswab32(e->size);
#line 2124
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2124
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2124
  return (tmp___1);
}
}
#line 2132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2135
  tmp = __fswab64(block_id);
#line 2135
  tmp___0 = __fswab32((__u32 )blksize);
#line 2135
  tmp___1 = __fswab64((__u64 )sector);
#line 2135
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2135
  return (tmp___2);
}
}
#line 2141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2147
  tmp = __fswab64((__u64 )sector);
#line 2147
  p.sector = tmp;
#line 2148
  p.block_id = block_id;
#line 2149
  tmp___0 = __fswab32((__u32 )size);
#line 2149
  p.blksize = tmp___0;
#line 2151
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2153
  return (ok);
}
}
#line 2156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2164
  tmp = __fswab64((__u64 )sector);
#line 2164
  p.sector = tmp;
#line 2165
  p.block_id = 1728263026ULL;
#line 2166
  tmp___0 = __fswab32((__u32 )size);
#line 2166
  p.blksize = tmp___0;
#line 2168
  p.head.magic = 1728214147U;
#line 2169
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2169
  p.head.command = tmp___1;
#line 2170
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2170
  p.head.length = tmp___2;
#line 2172
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2174
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2174
  ok = tmp___3 == 32;
#line 2175
  if (ok != 0) {
#line 2175
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2175
    if (tmp___4 == digest_size) {
#line 2175
      tmp___5 = 1;
    } else {
#line 2175
      tmp___5 = 0;
    }
  } else {
#line 2175
    tmp___5 = 0;
  }
#line 2175
  ok = tmp___5;
#line 2177
  mutex_unlock(& mdev->data.mutex);
#line 2179
  return (ok);
}
}
#line 2182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2187
  tmp = __fswab64((__u64 )sector);
#line 2187
  p.sector = tmp;
#line 2188
  p.block_id = 1728261953ULL;
#line 2189
  tmp___0 = __fswab32((__u32 )size);
#line 2189
  p.blksize = tmp___0;
#line 2191
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2193
  return (ok);
}
}
#line 2200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2205
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2205
    tmp___0 = 1;
  } else {
#line 2205
    tmp = get_t_state(& mdev->asender);
#line 2205
    if ((unsigned int )tmp != 1U) {
#line 2205
      tmp___0 = 1;
    } else
#line 2205
    if ((int )mdev->state.ldv_35070.conn <= 9) {
#line 2205
      tmp___0 = 1;
    } else {
#line 2205
      tmp___0 = 0;
    }
  }
#line 2205
  drop_it = tmp___0;
#line 2210
  if (drop_it != 0) {
#line 2211
    return (1);
  } else {

  }
#line 2213
  mdev->ko_count = mdev->ko_count - 1U;
#line 2213
  drop_it = mdev->ko_count == 0U;
#line 2214
  if (drop_it == 0) {
#line 2215
    tmp___1 = get_current();
#line 2215
    tmp___2 = get_current();
#line 2215
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2217
    request_ping(mdev);
  } else {

  }
#line 2220
  return (drop_it);
}
}
#line 2244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2247
  tmp = kmap(page);
#line 2247
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2247
  sent = tmp___0;
#line 2248
  kunmap(page);
#line 2249
  if ((size_t )sent == size) {
#line 2250
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2251
  return ((size_t )sent == size);
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2257
  tmp = current_thread_info();
#line 2257
  oldfs = tmp->addr_limit;
#line 2259
  len = (int )size;
#line 2267
  if (disable_sendpage != 0) {
#line 2268
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2268
    return (tmp___0);
  } else {
#line 2267
    tmp___1 = page_count(page);
#line 2267
    if (tmp___1 <= 0) {
#line 2268
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2268
      return (tmp___0);
    } else {
#line 2267
      tmp___2 = PageSlab(page);
#line 2267
      if (tmp___2 != 0) {
#line 2268
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2268
        return (tmp___0);
      } else {

      }
    }
  }
#line 2270
  msg_flags = msg_flags | 16384U;
#line 2271
  drbd_update_congested(mdev);
#line 2272
  tmp___3 = current_thread_info();
#line 2272
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2272
  tmp___3->addr_limit = __constr_expr_0;
  ldv_45219: 
#line 2274
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2274
  sent = (int )tmp___4;
#line 2277
  if (sent == -11) {
#line 2278
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2278
    if (tmp___5 != 0) {
#line 2280
      goto ldv_45216;
    } else {
#line 2282
      goto ldv_45217;
    }
  } else {

  }
#line 2284
  if (sent <= 0) {
#line 2285
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2287
    goto ldv_45216;
  } else {

  }
#line 2289
  len = len - sent;
#line 2290
  offset = offset + sent;
  ldv_45217: ;
#line 2291
  if (len > 0) {
#line 2292
    goto ldv_45219;
  } else {

  }
  ldv_45216: 
#line 2292
  tmp___6 = current_thread_info();
#line 2292
  tmp___6->addr_limit = oldfs;
#line 2293
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2295
  ok = len == 0;
#line 2296
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2296
  if (tmp___7 != 0L) {
#line 2297
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2298
  return (ok);
}
}
#line 2301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2306
  bvec = bio->bi_io_vec;
#line 2306
  i = 0;
#line 2306
  goto ldv_45227;
  ldv_45226: 
#line 2307
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2307
  if (tmp == 0) {
#line 2310
    return (0);
  } else {

  }
#line 2306
  bvec = bvec + 1;
#line 2306
  i = i + 1;
  ldv_45227: ;
#line 2306
  if ((int )bio->bi_vcnt > i) {
#line 2307
    goto ldv_45226;
  } else {

  }

#line 2312
  return (1);
}
}
#line 2315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2320
  bvec = bio->bi_io_vec;
#line 2320
  i = 0;
#line 2320
  goto ldv_45236;
  ldv_45235: 
#line 2321
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2321
  if (tmp == 0) {
#line 2324
    return (0);
  } else {

  }
#line 2320
  bvec = bvec + 1;
#line 2320
  i = i + 1;
  ldv_45236: ;
#line 2320
  if ((int )bio->bi_vcnt > i) {
#line 2321
    goto ldv_45235;
  } else {

  }

#line 2326
  return (1);
}
}
#line 2329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2331
  page = e->pages;
#line 2332
  len = e->size;
#line 2334
  goto ldv_45250;
  ldv_45249: 
#line 2335
  __min1 = len;
#line 2335
  __min2 = 4096U;
#line 2335
  l = __min1 < __min2 ? __min1 : __min2;
#line 2336
  tmp = page_chain_next(page);
#line 2336
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2336
  if (tmp___0 == 0) {
#line 2338
    return (0);
  } else {

  }
#line 2339
  len = len - l;
#line 2334
  page = page_chain_next(page);
  ldv_45250: ;
#line 2334
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2334
    tmp___1 = page_chain_next(page);
#line 2334
    __builtin_prefetch((void const   *)tmp___1);
#line 2334
    if (1 != 0) {
#line 2335
      goto ldv_45249;
    } else {
#line 2337
      goto ldv_45251;
    }
  } else {

  }
  ldv_45251: ;
#line 2341
  return (1);
}
}
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;

  {
#line 2349
  ok = 1;
#line 2351
  dp_flags = 0U;
#line 2355
  tmp = drbd_get_data_sock(mdev);
#line 2355
  if (tmp == 0) {
#line 2356
    return (0);
  } else {

  }
#line 2358
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2358
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2358
    dgs = (int )tmp___0;
  } else {
#line 2358
    dgs = 0;
  }
#line 2361
  p.head.magic = 1728214147U;
#line 2362
  p.head.command = 0U;
#line 2363
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2363
  p.head.length = tmp___1;
#line 2366
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2366
  p.sector = tmp___2;
#line 2367
  p.block_id = (u64 )req;
#line 2368
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2368
  req->seq_num = tmp___3;
#line 2368
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2368
  p.seq_num = tmp___4;
#line 2370
  dp_flags = 0U;
#line 2375
  if (((req->master_bio)->bi_rw & 16UL) != 0UL) {
#line 2376
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have set DP_HARDBARRIER\n");
  } else {

  }
#line 2379
  if (((req->master_bio)->bi_rw & 32UL) != 0UL) {
#line 2380
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2383
  if (((req->master_bio)->bi_rw & 512UL) != 0UL) {
#line 2384
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2385
  if ((int )mdev->state.ldv_35070.conn > 15 && (int )mdev->state.ldv_35070.conn <= 21) {
#line 2387
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2389
  tmp___5 = __fswab32(dp_flags);
#line 2389
  p.dp_flags = tmp___5;
#line 2390
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2391
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2391
  ok = tmp___6 == 32;
#line 2393
  if (ok != 0 && dgs != 0) {
#line 2394
    dgb = mdev->int_dig_out;
#line 2395
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2396
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2398
  if (ok != 0) {
#line 2399
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2400
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2402
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2405
  drbd_put_data_sock(mdev);
#line 2407
  return (ok);
}
}
#line 2414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2422
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2422
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2422
    dgs = (int )tmp;
  } else {
#line 2422
    dgs = 0;
  }
#line 2425
  p.head.magic = 1728214147U;
#line 2426
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2426
  p.head.command = tmp___0;
#line 2427
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2427
  p.head.length = tmp___1;
#line 2430
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2430
  p.sector = tmp___2;
#line 2431
  p.block_id = e->block_id;
#line 2438
  tmp___3 = drbd_get_data_sock(mdev);
#line 2438
  if (tmp___3 == 0) {
#line 2439
    return (0);
  } else {

  }
#line 2441
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2441
  ok = tmp___4 == 32;
#line 2443
  if (ok != 0 && dgs != 0) {
#line 2444
    dgb = mdev->int_dig_out;
#line 2445
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2446
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2448
  if (ok != 0) {
#line 2449
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2451
  drbd_put_data_sock(mdev);
#line 2453
  return (ok);
}
}
#line 2472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2477
  sent = 0;
#line 2479
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2480
    return (-1000);
  } else {

  }
#line 2484
  iov.iov_base = buf;
#line 2485
  iov.iov_len = size;
#line 2487
  msg.msg_name = 0;
#line 2488
  msg.msg_namelen = 0;
#line 2489
  msg.msg_control = 0;
#line 2490
  msg.msg_controllen = 0UL;
#line 2491
  msg.msg_flags = msg_flags | 16384U;
#line 2493
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2494
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2495
    drbd_update_congested(mdev);
  } else {

  }
  ldv_45283: 
#line 2507
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2508
  if (rv == -11) {
#line 2509
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2509
    if (tmp != 0) {
#line 2510
      goto ldv_45281;
    } else {
#line 2512
      goto ldv_45282;
    }
  } else {

  }
#line 2514
  if (rv == 0) {
#line 2514
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2514);
  } else {

  }
#line 2515
  if (rv == -4) {
#line 2516
    tmp___0 = get_current();
#line 2516
    flush_signals(tmp___0);
#line 2517
    rv = 0;
  } else {

  }
#line 2519
  if (rv < 0) {
#line 2520
    goto ldv_45281;
  } else {

  }
#line 2521
  sent = sent + rv;
#line 2522
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2523
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_45282: ;
#line 2524
  if ((size_t )sent < size) {
#line 2525
    goto ldv_45283;
  } else {

  }
  ldv_45281: ;
#line 2526
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2527
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2529
  if (rv <= 0) {
#line 2530
    if (rv != -11) {
#line 2531
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2534
      val.i = 0U;
#line 2534
      val.ldv_35070.conn = 4U;
#line 2534
      mask.i = 0U;
#line 2534
      mask.ldv_35070.conn = 31U;
#line 2534
      drbd_force_state(mdev, mask, val);
    } else {
#line 2536
      val___0.i = 0U;
#line 2536
      val___0.ldv_35070.conn = 3U;
#line 2536
      mask___0.i = 0U;
#line 2536
      mask___0.ldv_35070.conn = 31U;
#line 2536
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2539
  return (sent);
}
}
#line 2542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2544
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2546
  rv = 0;
#line 2548
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2549
  tmp = spinlock_check(& mdev->req_lock);
#line 2549
  flags = _raw_spin_lock_irqsave(tmp);
#line 2553
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2554
    if ((mode & 2U) != 0U) {
#line 2555
      rv = -30;
    } else
#line 2556
    if (allow_oos == 0) {
#line 2557
      rv = -124;
    } else {

    }
  } else {

  }
#line 2560
  if (rv == 0) {
#line 2561
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2562
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2563
  mutex_unlock(& drbd_main_mutex);
#line 2565
  return (rv);
}
}
#line 2568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2570
  mdev = (struct drbd_conf *)gd->private_data;
#line 2571
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2572
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2573
  mutex_unlock(& drbd_main_mutex);
#line 2574
  return (0);
}
}
#line 2577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2579
  mdev = (struct drbd_conf *)q->queuedata;
#line 2582
  spin_lock_irq(q->queue_lock);
#line 2583
  blk_remove_plug(q);
#line 2584
  spin_unlock_irq(q->queue_lock);
#line 2587
  spin_lock_irq(& mdev->req_lock);
#line 2588
  if ((int )mdev->state.ldv_35070.pdsk > 3 && (int )mdev->state.ldv_35070.conn > 9) {
#line 2589
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2589
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2589);
    } else {

    }
#line 2590
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2590
    if (tmp___0 != 0) {
#line 2595
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2595
      if (tmp != 0) {
#line 2596
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2600
  spin_unlock_irq(& mdev->req_lock);
#line 2602
  if ((int )mdev->state.ldv_35070.disk > 3) {
#line 2603
    drbd_kick_lo(mdev);
  } else {

  }
#line 2604
  return;
}
}
#line 2606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2610
  __constr_expr_0.rate = 250;
#line 2610
  __constr_expr_0.after = -1;
#line 2610
  __constr_expr_0.al_extents = 127;
#line 2610
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2610
  __constr_expr_0.verify_alg_len = 0;
#line 2610
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2610
  __constr_expr_0.cpu_mask_len = 0;
#line 2610
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2610
  __constr_expr_0.csums_alg_len = 0;
#line 2610
  __constr_expr_0.use_rle = 0U;
#line 2610
  mdev->sync_conf = __constr_expr_0;
#line 2622
  __constr_expr_1.ldv_35070.role = 2U;
#line 2622
  __constr_expr_1.ldv_35070.peer = 0U;
#line 2622
  __constr_expr_1.ldv_35070.conn = 0U;
#line 2622
  __constr_expr_1.ldv_35070.disk = 0U;
#line 2622
  __constr_expr_1.ldv_35070.pdsk = 6U;
#line 2622
  __constr_expr_1.ldv_35070.susp = 0U;
#line 2622
  __constr_expr_1.ldv_35070.aftr_isp = (unsigned char)0;
#line 2622
  __constr_expr_1.ldv_35070.peer_isp = (unsigned char)0;
#line 2622
  __constr_expr_1.ldv_35070.user_isp = (unsigned char)0;
#line 2622
  __constr_expr_1.ldv_35070._pad = (unsigned short)0;
#line 2622
  mdev->state = __constr_expr_1;
#line 2623
  return;
}
}
#line 2632 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2637
  drbd_set_defaults(mdev);
#line 2642
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2644
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2645
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2646
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2647
  atomic_set(& mdev->unacked_cnt, 0);
#line 2648
  atomic_set(& mdev->local_cnt, 0);
#line 2649
  atomic_set(& mdev->net_cnt, 0);
#line 2650
  atomic_set(& mdev->packet_seq, 0);
#line 2651
  atomic_set(& mdev->pp_in_use, 0);
#line 2653
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2654
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2655
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2656
  sema_init(& mdev->data.work.s, 0);
#line 2657
  sema_init(& mdev->meta.work.s, 0);
#line 2658
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2660
  spinlock_check(& mdev->data.work.q_lock);
#line 2660
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5788.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2661
  spinlock_check(& mdev->meta.work.q_lock);
#line 2661
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5788.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2663
  spinlock_check(& mdev->al_lock);
#line 2663
  __raw_spin_lock_init(& mdev->al_lock.ldv_5788.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2664
  spinlock_check(& mdev->req_lock);
#line 2664
  __raw_spin_lock_init(& mdev->req_lock.ldv_5788.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2665
  spinlock_check(& mdev->peer_seq_lock);
#line 2665
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5788.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2666
  spinlock_check(& mdev->epoch_lock);
#line 2666
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5788.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2668
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2669
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2670
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2671
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2672
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2673
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2674
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2675
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2676
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2677
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2678
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2679
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2681
  mdev->resync_work.cb = & w_resync_inactive;
#line 2682
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2683
  mdev->md_sync_work.cb = & w_md_sync;
#line 2684
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2685
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2686
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2687
  mdev->resync_timer.function = & resync_timer_fn;
#line 2688
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2689
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2690
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2692
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2693
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2694
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2695
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2696
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2698
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2699
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2700
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2702
  mdev->agreed_pro_version = 94;
#line 2703
  mdev->write_ordering = WO_bio_barrier;
#line 2704
  mdev->resync_wenr = 4294967295U;
#line 2705
  return;
}
}
#line 2707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  unsigned long tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 2709
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2710
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2714
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2714
  if (tmp___0 != 0) {
#line 2715
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2715
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2716
  tmp___11 = 0UL;
#line 2716
  mdev->rs_mark_time = tmp___11;
#line 2716
  tmp___10 = tmp___11;
#line 2716
  mdev->rs_mark_left = tmp___10;
#line 2716
  tmp___9 = tmp___10;
#line 2716
  mdev->rs_failed = tmp___9;
#line 2716
  tmp___8 = tmp___9;
#line 2716
  mdev->rs_total = tmp___8;
#line 2716
  tmp___7 = tmp___8;
#line 2716
  mdev->rs_start = tmp___7;
#line 2716
  tmp___6 = tmp___7;
#line 2716
  mdev->p_size = tmp___6;
#line 2716
  tmp___5 = (unsigned int )tmp___6;
#line 2716
  mdev->writ_cnt = tmp___5;
#line 2716
  tmp___4 = tmp___5;
#line 2716
  mdev->send_cnt = tmp___4;
#line 2716
  tmp___3 = tmp___4;
#line 2716
  mdev->recv_cnt = tmp___3;
#line 2716
  tmp___2 = tmp___3;
#line 2716
  mdev->read_cnt = tmp___2;
#line 2716
  tmp___1 = tmp___2;
#line 2716
  mdev->bm_writ_cnt = tmp___1;
#line 2716
  mdev->al_writ_cnt = tmp___1;
#line 2728
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2728);
  } else {

  }
#line 2730
  drbd_set_my_capacity(mdev, 0UL);
#line 2731
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2733
    drbd_bm_resize(mdev, 0UL, 1);
#line 2734
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2737
  drbd_free_resources(mdev);
#line 2743
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2743
  if (tmp___12 == 0) {
#line 2743
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2743);
  } else {

  }
#line 2744
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2744
  if (tmp___13 == 0) {
#line 2744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2744);
  } else {

  }
#line 2745
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2745
  if (tmp___14 == 0) {
#line 2745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2745);
  } else {

  }
#line 2746
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2746
  if (tmp___15 == 0) {
#line 2746
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2746);
  } else {

  }
#line 2747
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2747
  if (tmp___16 == 0) {
#line 2747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2747);
  } else {

  }
#line 2748
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2748
  if (tmp___17 == 0) {
#line 2748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2748);
  } else {

  }
#line 2749
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2749
  if (tmp___18 == 0) {
#line 2749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2749);
  } else {

  }
#line 2750
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2750
  if (tmp___19 == 0) {
#line 2750
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2750);
  } else {

  }
#line 2751
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2751
  if (tmp___20 == 0) {
#line 2751
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2751);
  } else {

  }
#line 2752
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2752
  if (tmp___21 == 0) {
#line 2752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2752);
  } else {

  }
#line 2753
  return;
}
}
#line 2757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2761
  goto ldv_45344;
  ldv_45343: 
#line 2762
  page = drbd_pp_pool;
#line 2763
  drbd_pp_pool = (struct page *)page->ldv_12297.ldv_12294.private;
#line 2764
  __free_pages(page, 0U);
#line 2765
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_45344: ;
#line 2761
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2762
    goto ldv_45343;
  } else {

  }

#line 2770
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2771
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2772
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2773
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2774
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2775
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2776
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2777
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2778
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2779
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2780
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2781
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2783
  drbd_ee_mempool = 0;
#line 2784
  drbd_request_mempool = 0;
#line 2785
  drbd_ee_cache = 0;
#line 2786
  drbd_request_cache = 0;
#line 2787
  drbd_bm_ext_cache = 0;
#line 2788
  drbd_al_ext_cache = 0;
#line 2790
  return;
}
}
#line 2793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2796
  number = (int const   )(minor_count * 8U);
#line 2800
  drbd_request_mempool = 0;
#line 2801
  drbd_ee_cache = 0;
#line 2802
  drbd_request_cache = 0;
#line 2803
  drbd_bm_ext_cache = 0;
#line 2804
  drbd_al_ext_cache = 0;
#line 2805
  drbd_pp_pool = 0;
#line 2808
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2810
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2811
    goto Enomem;
  } else {

  }
#line 2813
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2815
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2816
    goto Enomem;
  } else {

  }
#line 2818
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2820
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2821
    goto Enomem;
  } else {

  }
#line 2823
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2825
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2826
    goto Enomem;
  } else {

  }
#line 2829
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2831
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2832
    goto Enomem;
  } else {

  }
#line 2834
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2836
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2837
    goto Enomem;
  } else {

  }
#line 2840
  spinlock_check(& drbd_pp_lock);
#line 2840
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5788.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2842
  i = 0;
#line 2842
  goto ldv_45355;
  ldv_45354: 
#line 2843
  page = alloc_pages(131282U, 0U);
#line 2844
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2845
    goto Enomem;
  } else {

  }
#line 2846
  page->ldv_12297.ldv_12294.private = (unsigned long )drbd_pp_pool;
#line 2847
  drbd_pp_pool = page;
#line 2842
  i = i + 1;
  ldv_45355: ;
#line 2842
  if (i < number) {
#line 2843
    goto ldv_45354;
  } else {

  }
#line 2849
  drbd_pp_vacant = number;
#line 2851
  return (0);
  Enomem: 
#line 2854
  drbd_destroy_mempools();
#line 2855
  return (-12);
}
}
#line 2858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2865
  return (0);
}
}
#line 2868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 2876
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2877
  if (rr != 0) {
#line 2878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 2880
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2881
  if (rr != 0) {
#line 2882
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 2884
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2885
  if (rr != 0) {
#line 2886
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 2888
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2889
  if (rr != 0) {
#line 2890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 2892
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2893
  if (rr != 0) {
#line 2894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 2895
  return;
}
}
#line 2899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 2901
  tmp = minor_to_mdev(minor);
#line 2901
  mdev = tmp;
#line 2903
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2904
    return;
  } else {

  }
#line 2907
  if (mdev->open_cnt != 0) {
#line 2908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2909);
  } else {

  }
#line 2911
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2911
  _b = tmp___0 == 0;
#line 2911
  if (_b != 0) {
#line 2911
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2911);
  } else {

  }
#line 2911
  if (_b != 0) {
#line 2913
    lp = mdev->data.work.q.next;
#line 2913
    goto ldv_45376;
    ldv_45375: 
#line 2914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 2913
    lp = lp->next;
    ldv_45376: 
#line 2913
    __builtin_prefetch((void const   *)lp->next);
#line 2913
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2914
      goto ldv_45375;
    } else {

    }

  } else {

  }
#line 2919
  del_gendisk(mdev->vdisk);
#line 2924
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2925
    bdput(mdev->this_bdev);
  } else {

  }
#line 2927
  drbd_free_resources(mdev);
#line 2929
  drbd_release_ee_lists(mdev);
#line 2932
  kfree((void const   *)mdev->ee_hash);
#line 2938
  lc_destroy(mdev->act_log);
#line 2939
  lc_destroy(mdev->resync);
#line 2941
  kfree((void const   *)mdev->p_uuid);
#line 2944
  kfree((void const   *)mdev->int_dig_out);
#line 2945
  kfree((void const   *)mdev->int_dig_in);
#line 2946
  kfree((void const   *)mdev->int_dig_vv);
#line 2951
  drbd_free_mdev(mdev);
#line 2952
  return;
}
}
#line 2954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2958
  unregister_reboot_notifier(& drbd_notifier);
#line 2960
  drbd_nl_cleanup();
#line 2962
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 2963
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2964
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 2965
    i = minor_count;
#line 2966
    goto ldv_45383;
    ldv_45382: 
#line 2967
    drbd_delete_device(i);
    ldv_45383: 
#line 2966
    tmp = i;
#line 2966
    i = i - 1U;
#line 2966
    if (tmp != 0U) {
#line 2967
      goto ldv_45382;
    } else {

    }
#line 2968
    drbd_destroy_mempools();
  } else {

  }
#line 2971
  kfree((void const   *)minor_table);
#line 2973
  unregister_blkdev(147U, "drbd");
#line 2975
  printk("<6>drbd: module cleanup done.\n");
#line 2976
  return;
}
}
#line 2985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2987
  mdev = (struct drbd_conf *)congested_data;
#line 2989
  reason = 45;
#line 2990
  r = 0;
#line 2992
  tmp = __inc_ap_bio_cond___0(mdev);
#line 2992
  if (tmp == 0) {
#line 2994
    r = bdi_bits;
#line 2995
    reason = 100;
#line 2996
    goto out;
  } else {

  }
#line 2999
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2999
  if (tmp___0 != 0) {
#line 3000
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3001
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3002
    put_ldev(mdev);
#line 3003
    if (r != 0) {
#line 3004
      reason = 98;
    } else {

    }
  } else {

  }
#line 3007
  if ((bdi_bits & 4) != 0) {
#line 3007
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3007
    if (tmp___1 != 0) {
#line 3008
      r = r | 4;
#line 3009
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3013
  mdev->congestion_reason = reason;
#line 3014
  return (r);
}
}
#line 3017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3024
  tmp = kzalloc___1(3968UL, 208U);
#line 3024
  mdev = (struct drbd_conf *)tmp;
#line 3025
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3026
    return (0);
  } else {

  }
#line 3027
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3027
  if (tmp___0) {
#line 3027
    tmp___1 = 0;
  } else {
#line 3027
    tmp___1 = 1;
  }
#line 3027
  if (tmp___1) {
#line 3028
    goto out_no_cpumask;
  } else {

  }
#line 3030
  mdev->minor = minor;
#line 3032
  drbd_init_set_defaults(mdev);
#line 3034
  q = blk_alloc_queue(208U);
#line 3035
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3036
    goto out_no_q;
  } else {

  }
#line 3037
  mdev->rq_queue = q;
#line 3038
  q->queuedata = (void *)mdev;
#line 3040
  disk = alloc_disk(1);
#line 3041
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3042
    goto out_no_disk;
  } else {

  }
#line 3043
  mdev->vdisk = disk;
#line 3045
  set_disk_ro(disk, 1);
#line 3047
  disk->queue = q;
#line 3048
  disk->major = 147;
#line 3049
  disk->first_minor = (int )minor;
#line 3050
  disk->fops = & drbd_ops;
#line 3051
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3052
  disk->private_data = (void *)mdev;
#line 3054
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3056
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3058
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3059
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3061
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3062
  blk_queue_max_segment_size(q, 32768U);
#line 3063
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3064
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3065
  q->queue_lock = & mdev->req_lock;
#line 3067
  q->unplug_fn = & drbd_unplug_fn;
#line 3069
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3070
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3071
    goto out_no_io_page;
  } else {

  }
#line 3073
  tmp___2 = drbd_bm_init(mdev);
#line 3073
  if (tmp___2 != 0) {
#line 3074
    goto out_no_bitmap;
  } else {

  }
#line 3076
  tmp___3 = tl_init(mdev);
#line 3076
  if (tmp___3 == 0) {
#line 3077
    goto out_no_tl;
  } else {

  }
#line 3079
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3079
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3080
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3081
    goto out_no_app_reads;
  } else {

  }
#line 3083
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3083
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3084
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3085
    goto out_no_epoch;
  } else {

  }
#line 3087
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3088
  mdev->epochs = 1U;
#line 3090
  return (mdev);
  out_no_epoch: 
#line 3095
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3097
  tl_cleanup(mdev);
  out_no_tl: 
#line 3099
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3101
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3103
  put_disk(disk);
  out_no_disk: 
#line 3105
  blk_cleanup_queue(q);
  out_no_q: 
#line 3107
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3109
  kfree((void const   *)mdev);
#line 3110
  return (0);
}
}
#line 3115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3117
  kfree((void const   *)mdev->current_epoch);
#line 3118
  kfree((void const   *)mdev->app_reads_hash);
#line 3119
  tl_cleanup(mdev);
#line 3120
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3121
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3122
  __free_pages(mdev->md_io_page, 0U);
#line 3123
  put_disk(mdev->vdisk);
#line 3124
  blk_cleanup_queue(mdev->rq_queue);
#line 3125
  free_cpumask_var(mdev->cpu_mask);
#line 3126
  kfree((void const   *)mdev);
#line 3127
  return;
}
}
#line 3130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3141
  if (minor_count == 0U || minor_count > 255U) {
#line 3142
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3145
    return (-22);
  } else {

  }
#line 3151
  err = drbd_nl_init();
#line 3152
  if (err != 0) {
#line 3153
    return (err);
  } else {

  }
#line 3155
  err = register_blkdev(147U, "drbd");
#line 3156
  if (err != 0) {
#line 3157
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3160
    return (err);
  } else {

  }
#line 3163
  register_reboot_notifier(& drbd_notifier);
#line 3168
  err = -12;
#line 3170
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3172
  drbd_proc = 0;
#line 3173
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3173
  minor_table = (struct drbd_conf **)tmp;
#line 3175
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3176
    goto Enomem;
  } else {

  }
#line 3178
  err = drbd_create_mempools();
#line 3179
  if (err != 0) {
#line 3180
    goto Enomem;
  } else {

  }
#line 3182
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3183
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3184
    printk("<3>drbd: unable to register proc file\n");
#line 3185
    goto Enomem;
  } else {

  }
#line 3188
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3190
  printk("<6>drbd: initialized. Version: 8.3.8.1 (api:%d/proto:%d-%d)\n", 88, 86,
         94);
#line 3193
  tmp___0 = drbd_buildtag();
#line 3193
  printk("<6>drbd: %s\n", tmp___0);
#line 3194
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3196
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3198
  return (0);
  Enomem: 
#line 3201
  drbd_cleanup();
#line 3202
  if (err == -12) {
#line 3204
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3206
    printk("<3>drbd: initialization failure\n");
  }
#line 3207
  return (err);
}
}
#line 3210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3212
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3213
    return;
  } else {

  }
#line 3215
  bd_release(ldev->backing_bdev);
#line 3216
  bd_release(ldev->md_bdev);
#line 3218
  fput(ldev->lo_file);
#line 3219
  fput(ldev->md_file);
#line 3221
  kfree((void const   *)ldev);
#line 3222
  return;
}
}
#line 3224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3226
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3227
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3228
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3229
    sock_release(mdev->data.socket);
#line 3230
    mdev->data.socket = 0;
#line 3231
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3233
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3234
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3235
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3236
    sock_release(mdev->meta.socket);
#line 3237
    mdev->meta.socket = 0;
#line 3238
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3240
  return;
}
}
#line 3243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3245
  crypto_free_hash(mdev->csums_tfm);
#line 3246
  mdev->csums_tfm = 0;
#line 3247
  crypto_free_hash(mdev->verify_tfm);
#line 3248
  mdev->verify_tfm = 0;
#line 3249
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3250
  mdev->cram_hmac_tfm = 0;
#line 3251
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3252
  mdev->integrity_w_tfm = 0;
#line 3253
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3254
  mdev->integrity_r_tfm = 0;
#line 3256
  drbd_free_sock(mdev);
#line 3258
  drbd_free_bc(mdev->ldev);
#line 3258
  mdev->ldev = 0;
#line 3259
  return;
}
}
#line 3286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3292
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3292
  if (tmp == 0) {
#line 3293
    return;
  } else {

  }
#line 3294
  del_timer(& mdev->md_sync_timer);
#line 3298
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3298
  if (tmp___0 == 0) {
#line 3299
    return;
  } else {

  }
#line 3301
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3302
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3302
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3303
  memset((void *)buffer, 0, 512UL);
#line 3305
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3305
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3305
  buffer->la_size = tmp___3;
#line 3306
  i = 0;
#line 3306
  goto ldv_45447;
  ldv_45446: 
#line 3307
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3307
  buffer->uuid[i] = tmp___4;
#line 3306
  i = i + 1;
  ldv_45447: ;
#line 3306
  if (i <= 3) {
#line 3307
    goto ldv_45446;
  } else {

  }
#line 3308
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3308
  buffer->flags = tmp___5;
#line 3309
  buffer->magic = 1795323011U;
#line 3311
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3311
  buffer->md_size_sect = tmp___6;
#line 3312
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3312
  buffer->al_offset = tmp___7;
#line 3313
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3313
  buffer->al_nr_extents = tmp___8;
#line 3314
  buffer->bm_bytes_per_bit = 1048576U;
#line 3315
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3315
  buffer->device_uuid = tmp___9;
#line 3317
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3317
  buffer->bm_offset = tmp___10;
#line 3319
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3319
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3319);
  } else {

  }
#line 3320
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3322
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3322
  if (tmp___12 != 0) {
#line 3323
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3328
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  }
#line 3333
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3333
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3335
  mutex_unlock(& mdev->md_io_mutex);
#line 3336
  put_ldev(mdev);
#line 3337
  return;
}
}
#line 3347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3350
  rv = 101;
#line 3352
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3352
  if (tmp == 0) {
#line 3353
    return (118);
  } else {

  }
#line 3355
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3356
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3356
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3358
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3358
  if (tmp___1 == 0) {
#line 3361
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3362
    rv = 118;
#line 3363
    goto err;
  } else {

  }
#line 3366
  tmp___2 = __fswab32(buffer->magic);
#line 3366
  if (tmp___2 != 2205418091U) {
#line 3367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3368
    rv = 119;
#line 3369
    goto err;
  } else {

  }
#line 3371
  tmp___4 = __fswab32(buffer->al_offset);
#line 3371
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3372
    tmp___3 = __fswab32(buffer->al_offset);
#line 3372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3374
    rv = 119;
#line 3375
    goto err;
  } else {

  }
#line 3377
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3377
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3378
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3378
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3380
    rv = 119;
#line 3381
    goto err;
  } else {

  }
#line 3383
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3383
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3384
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3386
    rv = 119;
#line 3387
    goto err;
  } else {

  }
#line 3390
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3390
  if (tmp___10 != 4096U) {
#line 3391
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3391
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3393
    rv = 119;
#line 3394
    goto err;
  } else {

  }
#line 3397
  tmp___11 = __fswab64(buffer->la_size);
#line 3397
  bdev->md.la_size_sect = tmp___11;
#line 3398
  i = 0;
#line 3398
  goto ldv_45459;
  ldv_45458: 
#line 3399
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3399
  bdev->md.uuid[i] = tmp___12;
#line 3398
  i = i + 1;
  ldv_45459: ;
#line 3398
  if (i <= 3) {
#line 3399
    goto ldv_45458;
  } else {

  }
#line 3400
  tmp___13 = __fswab32(buffer->flags);
#line 3400
  bdev->md.flags = tmp___13;
#line 3401
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3401
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3402
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3402
  bdev->md.device_uuid = tmp___15;
#line 3404
  if (mdev->sync_conf.al_extents <= 6) {
#line 3405
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3408
  mutex_unlock(& mdev->md_io_mutex);
#line 3409
  put_ldev(mdev);
#line 3411
  return (rv);
}
}
#line 3422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3424
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3425
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3426
  return;
}
}
#line 3429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3433
  i = 2;
#line 3433
  goto ldv_45469;
  ldv_45468: 
#line 3434
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3433
  i = i + 1;
  ldv_45469: ;
#line 3433
  if (i <= 2) {
#line 3434
    goto ldv_45468;
  } else {

  }

#line 3438
  return;
}
}
#line 3437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3439
  if (idx == 0) {
#line 3440
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3441
      val = val | 1ULL;
    } else {
#line 3443
      val = val & 0xfffffffffffffffeULL;
    }
#line 3445
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3448
  (mdev->ldev)->md.uuid[idx] = val;
#line 3449
  drbd_md_mark_dirty(mdev);
#line 3450
  return;
}
}
#line 3453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3455
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3456
    drbd_uuid_move_history(mdev);
#line 3457
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3459
  _drbd_uuid_set(mdev, idx, val);
#line 3460
  return;
}
}
#line 3469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3473
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3474
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3474);
  } else {

  }
#line 3475
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3477
  get_random_bytes((void *)(& val), 8);
#line 3478
  _drbd_uuid_set(mdev, 0, val);
#line 3479
  return;
}
}
#line 3481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3483
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3484
    return;
  } else {

  }
#line 3486
  if (val == 0ULL) {
#line 3487
    drbd_uuid_move_history(mdev);
#line 3488
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3489
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3491
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3492
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3494
    (mdev->ldev)->md.uuid[1] = val;
#line 3495
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3498
  drbd_md_mark_dirty(mdev);
#line 3499
  return;
}
}
#line 3507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3509
  rv = -5;
#line 3511
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3511
  if (tmp != 0) {
#line 3512
    drbd_md_set_flag(mdev, 8);
#line 3513
    drbd_md_sync(mdev);
#line 3514
    drbd_bm_set_all(mdev);
#line 3516
    rv = drbd_bm_write(mdev);
#line 3518
    if (rv == 0) {
#line 3519
      drbd_md_clear_flag(mdev, 8);
#line 3520
      drbd_md_sync(mdev);
    } else {

    }
#line 3523
    put_ldev(mdev);
  } else {

  }
#line 3526
  return (rv);
}
}
#line 3535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3537
  rv = -5;
#line 3539
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3539
  if (tmp != 0) {
#line 3540
    drbd_bm_clear_all(mdev);
#line 3541
    rv = drbd_bm_write(mdev);
#line 3542
    put_ldev(mdev);
  } else {

  }
#line 3545
  return (rv);
}
}
#line 3548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3550
  __mptr = (struct drbd_work  const  *)w;
#line 3550
  work = (struct bm_io_work *)__mptr;
#line 3553
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3553
  if (tmp != 0) {
#line 3553
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3553);
  } else {

  }
#line 3555
  drbd_bm_lock(mdev, work->why);
#line 3556
  rv = (*(work->io_fn))(mdev);
#line 3557
  drbd_bm_unlock(mdev);
#line 3559
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3560
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3562
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3563
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3565
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3566
  work->why = 0;
#line 3568
  return (1);
}
}
#line 3583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3588
  tmp = get_current();
#line 3588
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3588
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3588);
  } else {

  }
#line 3590
  tmp___0 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3590
  if (tmp___0 != 0) {
#line 3590
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3590);
  } else {

  }
#line 3591
  tmp___1 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3591
  if (tmp___1 != 0) {
#line 3591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3591);
  } else {

  }
#line 3592
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3592
  if (tmp___2 == 0) {
#line 3592
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3592);
  } else {

  }
#line 3593
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3597
  mdev->bm_io_work.io_fn = io_fn;
#line 3598
  mdev->bm_io_work.done = done;
#line 3599
  mdev->bm_io_work.why = why;
#line 3601
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3602
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3602
  if (tmp___4 == 0) {
#line 3603
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3603
    if (tmp___3 != 0) {
#line 3604
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3605
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3607
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3608
  return;
}
}
#line 3620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3624
  tmp = get_current();
#line 3624
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3624
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3624);
  } else {

  }
#line 3626
  drbd_suspend_io(mdev);
#line 3628
  drbd_bm_lock(mdev, why);
#line 3629
  rv = (*io_fn)(mdev);
#line 3630
  drbd_bm_unlock(mdev);
#line 3632
  drbd_resume_io(mdev);
#line 3634
  return (rv);
}
}
#line 3637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3639
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3640
    drbd_md_mark_dirty(mdev);
#line 3641
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3643
  return;
}
}
#line 3645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3647
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3648
    drbd_md_mark_dirty(mdev);
#line 3649
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3651
  return;
}
}
#line 3652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3654
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3659
  mdev = (struct drbd_conf *)data;
#line 3661
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3662
  return;
}
}
#line 3664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3666
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3667
  drbd_md_sync(mdev);
#line 3669
  return (1);
}
}
#line 3689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3693
  tmp = rsp->count;
#line 3693
  rsp->count = rsp->count - 1UL;
#line 3693
  if (tmp == 0UL) {
#line 3694
    get_random_bytes((void *)(& refresh), 8);
#line 3695
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3696
    rsp->count = 10000UL;
  } else {

  }
#line 3698
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3699
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3699
  return ((unsigned long )tmp___0);
}
}
#line 3703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3704
  _faults[0] = (char *)"Meta-data write";
#line 3704
  _faults[1] = (char *)"Meta-data read";
#line 3704
  _faults[2] = (char *)"Resync write";
#line 3704
  _faults[3] = (char *)"Resync read";
#line 3704
  _faults[4] = (char *)"Data write";
#line 3704
  _faults[5] = (char *)"Data read";
#line 3704
  _faults[6] = (char *)"Data read ahead";
#line 3704
  _faults[7] = (char *)"BM allocation";
#line 3704
  _faults[8] = (char *)"EE allocation";
#line 3704
  _faults[9] = (char *)"receive data corruption";
#line 3717
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3723
  rrs.state = 0UL;
#line 3723
  rrs.count = 0UL;
#line 3725
  if (fault_devs == 0) {
#line 3725
    goto _L;
  } else {
#line 3725
    tmp = mdev_to_minor(mdev);
#line 3725
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3725
      tmp___0 = _drbd_fault_random(& rrs);
#line 3725
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3725
        tmp___1 = 1;
      } else {
#line 3725
        tmp___1 = 0;
      }
    } else {
#line 3725
      tmp___1 = 0;
    }
  }
#line 3725
  ret = (unsigned int )tmp___1;
#line 3730
  if (ret != 0U) {
#line 3731
    fault_count = fault_count + 1;
#line 3733
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3733
    if (tmp___3 != 0) {
#line 3734
      tmp___2 = _drbd_fault_str(type);
#line 3734
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3738
  return (ret);
}
}
#line 3742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3747
  buildtag[0] = '\000';
#line 3747
  tmp = 1U;
#line 3747
  while (1) {
#line 3747
    if (tmp >= 38U) {
#line 3747
      break;
    } else {

    }
#line 3747
    buildtag[tmp] = (char)0;
#line 3747
    tmp = tmp + 1U;
  }
#line 3749
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3751
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3752
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3755
      buildtag[0] = 98;
    }
  } else {

  }
#line 3758
  return ((char const   *)(& buildtag));
}
}
#line 3806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_61_p1 ;
  int res_drbd_open_61 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_62_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_69_p1 ;
  void *var_drbd_notify_sys_69_p2 ;
  unsigned long var_md_sync_timer_fn_94_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4030
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3982
  LDV_IN_INTERRUPT = 1;
#line 3991
  ldv_initialize();
#line 4018
  ldv_handler_precall();
#line 4019
  tmp = drbd_init();
#line 4019
  if (tmp != 0) {
#line 4020
    goto ldv_final;
  } else {

  }
#line 4037
  goto ldv_45630;
  ldv_45629: 
#line 4041
  tmp___0 = nondet_int();
#line 4041
  switch (tmp___0) {
  case 0: ;
#line 4046
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4072
    ldv_handler_precall();
#line 4073
    res_drbd_open_61 = drbd_open(var_group1, var_drbd_open_61_p1);
#line 4074
    ldv_check_return_value(res_drbd_open_61);
#line 4075
    if (res_drbd_open_61 != 0) {
#line 4076
      goto ldv_module_exit;
    } else {

    }
#line 4089
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4095
  goto ldv_45624;
  case 1: ;
#line 4099
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4125
    ldv_handler_precall();
#line 4126
    drbd_release(var_group2, var_drbd_release_62_p1);
#line 4139
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4145
  goto ldv_45624;
  case 2: 
#line 4175
  ldv_handler_precall();
#line 4176
  drbd_notify_sys(var_group3, var_drbd_notify_sys_69_p1, var_drbd_notify_sys_69_p2);
#line 4195
  goto ldv_45624;
  case 3: 
#line 4228
  ldv_handler_precall();
#line 4229
  md_sync_timer_fn(var_md_sync_timer_fn_94_p0);
#line 4245
  goto ldv_45624;
  default: ;
#line 4246
  goto ldv_45624;
  }
  ldv_45624: ;
  ldv_45630: 
#line 4037
  tmp___1 = nondet_int();
#line 4037
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4039
    goto ldv_45629;
  } else {

  }

  ldv_module_exit: 
#line 4279
  ldv_handler_precall();
#line 4280
  drbd_cleanup();
  ldv_final: 
#line 4295
  ldv_check_final_state();
#line 4298
  return;
}
}
#line 4302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4307
  ldv_module_put(ldv_func_arg1);
#line 4308
  return;
}
}
#line 4310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4315
  tmp = ldv_try_module_get(module);
#line 4315
  return (tmp);
}
}
#line 4318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4323
  ldv_module_put(ldv_func_arg1);
#line 4324
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 203 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 501 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 507
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 511
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1928 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1994
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 848 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 849
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 853
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 862
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 875
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 967 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 969
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_43439;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_43439;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_43439: ;
#line 1825
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[71U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 49
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 50
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_44001;
  ldv_44000: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_43998;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_43998: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_44001: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_44000;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_44062;
  ldv_44061: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_44030;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_44030;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_44030;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_44030;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_44030;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_44030;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44030;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44030;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44030;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_44030;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44030;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44030;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_44030: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_44062: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_44061;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_44165;
  ldv_44164: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_44100;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_44100;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_44100;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_44100;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_44100;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_44100;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_44100;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_44100;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_44100;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_44100;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_44100;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_44100;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_44100;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_44100;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_44100;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_44100;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_44100;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_44100;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_44100;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_44100;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44100;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_44100: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_44165: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_44164;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_44199;
  ldv_44198: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_44194;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44194;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44194;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_44194: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_44199: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_44198;
  } else {

  }

#line 71
  return (1);
}
}
#line 90
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 90 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  unsigned short *tmp___4 ;
  u16 tmp___5 ;

  {
#line 77
  goto ldv_44249;
  ldv_44248: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_44213;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_44213;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_44213;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_44213;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_44213;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_44213;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_44213;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_44213: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_44249: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___5 = get_unaligned_le16((void const   *)tmp___4);
#line 77
  tag = (int )tmp___5;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_44248;
  } else {

  }

#line 77
  return (1);
}
}
#line 134
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 134 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 132
  goto ldv_44548;
  ldv_44547: 
#line 132
  tmp = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 132
  dlen = (int )tmp___0;
#line 132
  switch (tag & 8191) {
  case 66: 
#line 132
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 132
  goto ldv_44545;
  default: ;
#line 132
  if ((tag & 8192) != 0) {
#line 132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 132
    return (0);
  } else {

  }
  }
  ldv_44545: 
#line 132
  tags = tags + (unsigned long )dlen;
  ldv_44548: 
#line 132
  tmp___1 = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 132
  tag = (int )tmp___2;
#line 132
  if (tag != 0) {
#line 133
    goto ldv_44547;
  } else {

  }

#line 132
  return (1);
}
}
#line 138
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 138 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 136
  goto ldv_44565;
  ldv_44564: 
#line 136
  tmp = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 136
  dlen = (int )tmp___0;
#line 136
  switch (tag & 8191) {
  case 63: 
#line 136
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 136
  goto ldv_44562;
  default: ;
#line 136
  if ((tag & 8192) != 0) {
#line 136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 136
    return (0);
  } else {

  }
  }
  ldv_44562: 
#line 136
  tags = tags + (unsigned long )dlen;
  ldv_44565: 
#line 136
  tmp___1 = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 136
  tag = (int )tmp___2;
#line 136
  if (tag != 0) {
#line 137
    goto ldv_44564;
  } else {

  }

#line 136
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_44610;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_44610;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_44610;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_44610;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44610;
  }
  ldv_44610: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_44617;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_44617;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_44617;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_44617;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44617;
  }
  ldv_44617: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_44624;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_44624;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44624;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44624;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44624;
  }
  ldv_44624: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_44631;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_44631;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_44631;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_44631;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44631;
  }
  ldv_44631: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_44638;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_44638;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44638;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44638;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44638;
  }
  ldv_44638: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_44648;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_44648;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_44648;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_44648;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44648;
  }
  ldv_44648: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_44655;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_44655;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44655;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44655;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44655;
  }
  ldv_44655: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_44665;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_44665;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_44665;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_44665;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44665;
  }
  ldv_44665: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_44672;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_44672;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_44672;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_44672;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44672;
  }
  ldv_44672: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_44679;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_44679;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44679;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44679;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44679;
  }
  ldv_44679: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_44686;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_44686;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_44686;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_44686;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44686;
  }
  ldv_44686: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_44693;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_44693;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_44693;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_44693;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44693;
  }
  ldv_44693: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_44700;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_44700;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44700;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44700;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44700;
  }
  ldv_44700: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_44707;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_44707;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_44707;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_44707;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44707;
  }
  ldv_44707: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_44714;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_44714;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_44714;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_44714;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44714;
  }
  ldv_44714: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_44721;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_44721;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44721;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44721;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44721;
  }
  ldv_44721: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_44728;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_44728;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_44728;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_44728;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44728;
  }
  ldv_44728: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_44735;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_44735;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_44735;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_44735;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44735;
  }
  ldv_44735: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_44742;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_44742;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_44742;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_44742;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44742;
  }
  ldv_44742: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_44749;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_44749;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_44749;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_44749;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44749;
  }
  ldv_44749: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_44756;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_44756;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_44756;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_44756;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44756;
  }
  ldv_44756: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_44763;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_44763;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_44763;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_44763;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44763;
  }
  ldv_44763: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_44770;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_44770;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_44770;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_44770;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44770;
  }
  ldv_44770: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_44777;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_44777;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_44777;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_44777;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44777;
  }
  ldv_44777: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_44784;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_44784;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44784;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44784;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44784;
  }
  ldv_44784: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_44791;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_44791;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_44791;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_44791;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44791;
  }
  ldv_44791: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_44798;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_44798;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_44798;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_44798;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44798;
  }
  ldv_44798: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_44805;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_44805;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_44805;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_44805;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44805;
  }
  ldv_44805: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_44812;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_44812;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_44812;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_44812;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44812;
  }
  ldv_44812: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_44837;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_44837;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_44837;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_44837;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44837;
  }
  ldv_44837: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_44844;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_44844;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44844;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44844;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44844;
  }
  ldv_44844: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_44854;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_44854;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_44854;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_44854;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44854;
  }
  ldv_44854: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_44861;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_44861;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44861;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44861;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44861;
  }
  ldv_44861: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_44871;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_44871;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_44871;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_44871;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44871;
  }
  ldv_44871: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_44878;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_44878;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44878;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44878;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44878;
  }
  ldv_44878: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_44888;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_44888;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_44888;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_44888;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44888;
  }
  ldv_44888: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_44895;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_44895;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_44895;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_44895;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44895;
  }
  ldv_44895: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_44905;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_44905;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_44905;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_44905;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44905;
  }
  ldv_44905: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_44912;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_44912;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_44912;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_44912;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44912;
  }
  ldv_44912: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_44922;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_44922;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_44922;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_44922;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44922;
  }
  ldv_44922: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_44929;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_44929;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_44929;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_44929;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44929;
  }
  ldv_44929: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_44936;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_44936;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_44936;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_44936;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44936;
  }
  ldv_44936: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_44943;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_44943;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_44943;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_44943;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44943;
  }
  ldv_44943: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_44950;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_44950;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_44950;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_44950;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44950;
  }
  ldv_44950: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_44957;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_44957;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_44957;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_44957;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44957;
  }
  ldv_44957: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_44964;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_44964;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_44964;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_44964;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44964;
  }
  ldv_44964: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_44971;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_44971;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_44971;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_44971;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44971;
  }
  ldv_44971: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_44978;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_44978;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_44978;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_44978;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44978;
  }
  ldv_44978: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_44985;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_44985;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_44985;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_44985;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44985;
  }
  ldv_44985: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_44992;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_44992;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_44992;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_44992;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44992;
  }
  ldv_44992: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_44999;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_44999;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_44999;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_44999;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44999;
  }
  ldv_44999: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_45006;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_45006;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_45006;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_45006;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45006;
  }
  ldv_45006: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_45013;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_45013;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_45013;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_45013;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45013;
  }
  ldv_45013: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_45020;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_45020;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45020;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45020;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45020;
  }
  ldv_45020: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_45027;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_45027;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_45027;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_45027;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45027;
  }
  ldv_45027: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_45034;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_45034;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_45034;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_45034;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45034;
  }
  ldv_45034: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_45041;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_45041;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45041;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45041;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45041;
  }
  ldv_45041: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_45048;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_45048;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_45048;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_45048;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45048;
  }
  ldv_45048: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_45055;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_45055;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_45055;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_45055;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45055;
  }
  ldv_45055: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_45062;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_45062;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45062;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45062;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45062;
  }
  ldv_45062: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_45069;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_45069;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_45069;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_45069;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45069;
  }
  ldv_45069: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_45076;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_45076;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_45076;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_45076;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45076;
  }
  ldv_45076: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_45083;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_45083;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45083;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45083;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45083;
  }
  ldv_45083: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_45090;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_45090;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_45090;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_45090;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45090;
  }
  ldv_45090: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_45097;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_45097;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_45097;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_45097;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45097;
  }
  ldv_45097: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_45104;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_45104;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45104;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45104;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45104;
  }
  ldv_45104: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_45111;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_45111;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_45111;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_45111;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45111;
  }
  ldv_45111: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_45118;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_45118;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_45118;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_45118;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45118;
  }
  ldv_45118: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_45125;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_45125;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45125;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45125;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45125;
  }
  ldv_45125: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_45132;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_45132;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_45132;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_45132;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45132;
  }
  ldv_45132: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_45139;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_45139;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_45139;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_45139;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45139;
  }
  ldv_45139: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_45146;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_45146;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45146;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45146;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45146;
  }
  ldv_45146: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_45153;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_45153;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_45153;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_45153;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45153;
  }
  ldv_45153: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_45160;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_45160;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_45160;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_45160;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45160;
  }
  ldv_45160: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_45167;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_45167;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45167;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45167;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45167;
  }
  ldv_45167: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_45174;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_45174;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_45174;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_45174;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45174;
  }
  ldv_45174: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_45181;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_45181;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_45181;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_45181;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45181;
  }
  ldv_45181: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_45188;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_45188;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45188;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45188;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45188;
  }
  ldv_45188: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_45195;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_45195;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_45195;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_45195;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45195;
  }
  ldv_45195: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_45202;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_45202;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_45202;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_45202;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45202;
  }
  ldv_45202: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_45209;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_45209;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45209;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45209;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45209;
  }
  ldv_45209: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_45216;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_45216;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_45216;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_45216;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45216;
  }
  ldv_45216: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_45223;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_45223;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_45223;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_45223;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45223;
  }
  ldv_45223: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_45230;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_45230;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45230;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45230;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45230;
  }
  ldv_45230: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_45237;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_45237;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_45237;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_45237;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45237;
  }
  ldv_45237: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_45244;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_45244;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_45244;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_45244;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45244;
  }
  ldv_45244: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_45251;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_45251;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_45251;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_45251;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45251;
  }
  ldv_45251: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_45258;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_45258;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_45258;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_45258;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45258;
  }
  ldv_45258: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_45265;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_45265;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_45265;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_45265;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45265;
  }
  ldv_45265: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_45272;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_45272;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_45272;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_45272;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45272;
  }
  ldv_45272: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_45279;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_45279;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_45279;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_45279;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45279;
  }
  ldv_45279: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_45286;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_45286;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_45286;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_45286;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45286;
  }
  ldv_45286: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_45293;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_45293;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_45293;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_45293;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45293;
  }
  ldv_45293: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_45300;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_45300;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_45300;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_45300;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45300;
  }
  ldv_45300: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_45307;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_45307;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_45307;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_45307;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45307;
  }
  ldv_45307: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_45314;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_45314;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_45314;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_45314;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45314;
  }
  ldv_45314: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_45321;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_45321;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_45321;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_45321;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45321;
  }
  ldv_45321: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_45328;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_45328;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_45328;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_45328;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45328;
  }
  ldv_45328: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 90
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 90 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_45411;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_45411;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_45411;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_45411;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45411;
  }
  ldv_45411: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_45418;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_45418;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_45418;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_45418;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45418;
  }
  ldv_45418: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_45425;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_45425;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_45425;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_45425;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45425;
  }
  ldv_45425: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_45432;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_45432;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_45432;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_45432;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45432;
  }
  ldv_45432: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_45439;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_45439;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_45439;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_45439;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45439;
  }
  ldv_45439: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_45446;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_45446;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_45446;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_45446;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45446;
  }
  ldv_45446: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_45453;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_45453;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_45453;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_45453;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45453;
  }
  ldv_45453: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_45460;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_45460;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_45460;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_45460;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45460;
  }
  ldv_45460: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_45467;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_45467;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45467;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45467;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45467;
  }
  ldv_45467: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_45474;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_45474;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_45474;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_45474;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45474;
  }
  ldv_45474: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_45481;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_45481;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45481;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45481;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45481;
  }
  ldv_45481: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_45491;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_45491;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_45491;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_45491;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45491;
  }
  ldv_45491: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_45498;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_45498;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45498;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45498;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45498;
  }
  ldv_45498: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_45508;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_45508;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_45508;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_45508;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45508;
  }
  ldv_45508: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_45515;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_45515;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45515;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45515;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45515;
  }
  ldv_45515: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_45525;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_45525;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_45525;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_45525;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45525;
  }
  ldv_45525: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_45532;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_45532;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_45532;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_45532;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45532;
  }
  ldv_45532: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  return (tags);
}
}
#line 102
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 102 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 100
  tmp = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p = (void *)tmp;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p) = 33U;
#line 100
  goto ldv_45620;
  case 2UL: 
#line 100
  put_unaligned_le16(33, __gu_p);
#line 100
  goto ldv_45620;
  case 4UL: 
#line 100
  put_unaligned_le32(33U, __gu_p);
#line 100
  goto ldv_45620;
  case 8UL: 
#line 100
  put_unaligned_le64(33ULL, __gu_p);
#line 100
  goto ldv_45620;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45620;
  }
  ldv_45620: 
#line 100
  tmp___0 = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p___0 = (void *)tmp___0;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___0) = 4U;
#line 100
  goto ldv_45627;
  case 2UL: 
#line 100
  put_unaligned_le16(4, __gu_p___0);
#line 100
  goto ldv_45627;
  case 4UL: 
#line 100
  put_unaligned_le32(4U, __gu_p___0);
#line 100
  goto ldv_45627;
  case 8UL: 
#line 100
  put_unaligned_le64(4ULL, __gu_p___0);
#line 100
  goto ldv_45627;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45627;
  }
  ldv_45627: 
#line 100
  __gu_p___1 = (void *)tags;
#line 100
  switch (4UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 100
  goto ldv_45634;
  case 2UL: 
#line 100
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 100
  goto ldv_45634;
  case 4UL: 
#line 100
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45634;
  case 8UL: 
#line 100
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45634;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45634;
  }
  ldv_45634: 
#line 100
  tags = tags + 4U;
#line 100
  return (tags);
}
}
#line 138
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 139
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 143
  envp[0] = (char *)"HOME=/";
#line 143
  envp[1] = (char *)"TERM=linux";
#line 143
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 143
  envp[3] = 0;
#line 143
  envp[4] = 0;
#line 143
  envp[5] = 0;
#line 151
  argv[0] = (char *)(& usermode_helper);
#line 151
  argv[1] = cmd;
#line 151
  argv[2] = (char *)(& mb);
#line 151
  argv[3] = 0;
#line 154
  tmp = mdev_to_minor(mdev);
#line 154
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 156
  tmp___0 = get_net_conf(mdev);
#line 156
  if (tmp___0 != 0) {
#line 157
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 159
    afs = (char *)"ipv6";
#line 160
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 162
    goto ldv_45955;
    case 2: 
#line 164
    afs = (char *)"ipv4";
#line 165
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 167
    goto ldv_45955;
    default: 
#line 169
    afs = (char *)"ssocks";
#line 170
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_45955: 
#line 173
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 174
    envp[3] = (char *)(& af);
#line 175
    envp[4] = (char *)(& ad);
#line 176
    put_net_conf(mdev);
  } else {

  }
#line 179
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 181
  drbd_bcast_ev_helper(mdev, cmd);
#line 182
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 183
  if (ret != 0) {
#line 184
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 188
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 192
  if (ret < 0) {
#line 193
    ret = 0;
  } else {

  }
#line 195
  return (ret);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 205
  if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 205
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            205);
  } else {

  }
#line 207
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 207
  if (tmp != 0) {
#line 208
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 209
    put_ldev(mdev);
  } else {
#line 211
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 212
    return ((enum drbd_disk_state )mdev->state.ldv_35070.pdsk);
  }
#line 215
  if ((unsigned int )fp == 2U) {
#line 216
    val.i = 0U;
#line 216
    val.ldv_35070.susp = 1U;
#line 216
    mask.i = 0U;
#line 216
    mask.ldv_35070.susp = 1U;
#line 216
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 218
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 220
  switch ((r >> 8) & 255) {
  case 3: 
#line 222
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 223
  nps = D_INCONSISTENT;
#line 224
  goto ldv_45970;
  case 4: 
#line 226
  ex_to_string = (char *)"peer was fenced";
#line 227
  nps = D_OUTDATED;
#line 228
  goto ldv_45970;
  case 5: ;
#line 230
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 232
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 233
    nps = D_OUTDATED;
  } else {
#line 235
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 236
    nps = (enum drbd_disk_state )mdev->state.ldv_35070.pdsk;
  }
#line 238
  goto ldv_45970;
  case 6: 
#line 242
  ex_to_string = (char *)"peer is active";
#line 243
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 244
  nps = D_UNKNOWN;
#line 245
  val___0.i = 0U;
#line 245
  val___0.ldv_35070.disk = 5U;
#line 245
  mask___0.i = 0U;
#line 245
  mask___0.ldv_35070.disk = 15U;
#line 245
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 246
  goto ldv_45970;
  case 7: ;
#line 248
  if ((unsigned int )fp != 2U) {
#line 249
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 250
  ex_to_string = (char *)"peer was stonithed";
#line 251
  nps = D_OUTDATED;
#line 252
  goto ldv_45970;
  default: 
#line 255
  nps = D_UNKNOWN;
#line 256
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 257
  return (nps);
  }
  ldv_45970: 
#line 260
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
#line 262
  return (nps);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 268
  max_tries = 4;
#line 269
  r = 0;
#line 270
  try = 0;
#line 271
  forced = 0;
#line 275
  if ((unsigned int )new_role == 1U) {
#line 276
    request_ping(mdev);
  } else {

  }
#line 278
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 280
  mask.i = 0U;
#line 280
  mask.ldv_35070.role = 3U;
#line 281
  val.i = 0U;
#line 281
  val.ldv_35070.role = (unsigned char )new_role;
#line 283
  goto ldv_45992;
  ldv_45995: 
#line 284
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 288
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 289
    val.ldv_35070.pdsk = 0U;
#line 290
    mask.ldv_35070.pdsk = 0U;
#line 291
    goto ldv_45992;
  } else {

  }
#line 294
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35070.disk <= 7 && (int )mdev->state.ldv_35070.disk > 3)) {
#line 297
    mask.ldv_35070.disk = 15U;
#line 298
    val.ldv_35070.disk = 8U;
#line 299
    forced = 1;
#line 300
    goto ldv_45992;
  } else {

  }
#line 303
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1821UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 305
    if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 305
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              305);
    } else {

    }
#line 306
    nps = drbd_try_outdate_peer(mdev);
#line 308
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 309
      val.ldv_35070.disk = 8U;
#line 310
      mask.ldv_35070.disk = 15U;
    } else {

    }
#line 313
    val.ldv_35070.pdsk = (unsigned char )nps;
#line 314
    mask.ldv_35070.pdsk = 15U;
#line 316
    goto ldv_45992;
  } else {

  }
#line 319
  if (r == 2) {
#line 320
    goto fail;
  } else {

  }
#line 321
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 322
    nps = drbd_try_outdate_peer(mdev);
#line 324
    if (force != 0 && (unsigned int )nps > 5U) {
#line 325
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 326
      nps = D_OUTDATED;
    } else {

    }
#line 329
    mask.ldv_35070.pdsk = 15U;
#line 330
    val.ldv_35070.pdsk = (unsigned char )nps;
#line 332
    goto ldv_45992;
  } else {

  }
#line 334
  if (r == -1) {
#line 337
    tmp = get_current();
#line 337
    tmp->state = 1L;
#line 338
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 339
    if (try < max_tries) {
#line 340
      try = max_tries + -1;
    } else {

    }
#line 341
    goto ldv_45992;
  } else {

  }
#line 343
  if (r <= 0) {
#line 344
    r = _drbd_request_state(mdev, mask, val, 6);
#line 346
    if (r <= 0) {
#line 347
      goto fail;
    } else {

    }
  } else {

  }
#line 349
  goto ldv_45994;
  ldv_45992: 
#line 283
  tmp___0 = try;
#line 283
  try = try + 1;
#line 283
  if (tmp___0 < max_tries) {
#line 284
    goto ldv_45995;
  } else {

  }
  ldv_45994: ;
#line 352
  if (r <= 0) {
#line 353
    goto fail;
  } else {

  }
#line 355
  if (forced != 0) {
#line 356
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 359
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___1 == 0) {
#line 359
    goto ldv_45996;
  } else {

  }
#line 359
  tmp___2 = get_current();
#line 359
  __wait.flags = 0U;
#line 359
  __wait.private = (void *)tmp___2;
#line 359
  __wait.func = & autoremove_wake_function;
#line 359
  __wait.task_list.next = & __wait.task_list;
#line 359
  __wait.task_list.prev = & __wait.task_list;
  ldv_45999: 
#line 359
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 359
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___3 == 0) {
#line 359
    goto ldv_45998;
  } else {

  }
#line 359
  schedule();
#line 359
  goto ldv_45999;
  ldv_45998: 
#line 359
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45996: ;
#line 361
  if ((unsigned int )new_role == 2U) {
#line 362
    set_disk_ro(mdev->vdisk, 1);
#line 363
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 363
    if (tmp___4 != 0) {
#line 364
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 365
      put_ldev(mdev);
    } else {

    }
  } else {
#line 368
    tmp___5 = get_net_conf(mdev);
#line 368
    if (tmp___5 != 0) {
#line 369
      (mdev->net_conf)->want_lose = 0U;
#line 370
      put_net_conf(mdev);
    } else {

    }
#line 372
    set_disk_ro(mdev->vdisk, 0);
#line 373
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 373
    if (tmp___6 != 0) {
#line 374
      if ((((int )mdev->state.ldv_35070.conn <= 9 || (int )mdev->state.ldv_35070.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 377
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 379
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 380
      put_ldev(mdev);
    } else {

    }
  }
#line 384
  if ((unsigned int )new_role == 2U) {
#line 384
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 384
    if (tmp___7 != 0) {
#line 385
      drbd_al_to_on_disk_bm(mdev);
#line 386
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 389
  if ((int )mdev->state.ldv_35070.conn > 8) {
#line 391
    if (forced != 0) {
#line 392
      drbd_send_uuids(mdev);
    } else {

    }
#line 393
    drbd_send_state(mdev);
  } else {

  }
#line 396
  drbd_md_sync(mdev);
#line 398
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 400
  mutex_unlock(& mdev->state_mutex);
#line 401
  return (r);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 410
  memset((void *)(& primary_args), 0, 4UL);
#line 411
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 411
  if (tmp == 0) {
#line 412
    reply->ret_code = 126;
#line 413
    return (0);
  } else {

  }
#line 416
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 419
  return (0);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 425
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 427
  return (0);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 435
  md_size_sect = 0UL;
#line 436
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 439
  bdev->md.md_size_sect = 262144U;
#line 440
  tmp = drbd_md_ss__(mdev, bdev);
#line 440
  bdev->md.md_offset = (u64 )tmp;
#line 441
  bdev->md.al_offset = 8;
#line 442
  bdev->md.bm_offset = 72;
#line 443
  goto ldv_46017;
  case -2: 
#line 446
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 446
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 447
  bdev->md.md_offset = 0ULL;
#line 448
  bdev->md.al_offset = 8;
#line 449
  bdev->md.bm_offset = 72;
#line 450
  goto ldv_46017;
  case -1: ;
  case -3: 
#line 453
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 453
  bdev->md.md_offset = (u64 )tmp___1;
#line 455
  bdev->md.al_offset = -64;
#line 457
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 458
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 459
  md_size_sect = md_size_sect >> 15;
#line 460
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 464
  md_size_sect = md_size_sect + 72UL;
#line 466
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 468
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 469
  goto ldv_46017;
  }
  ldv_46017: ;
#line 472
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 476
  units[0] = 75;
#line 476
  units[1] = 77;
#line 476
  units[2] = 71;
#line 476
  units[3] = 84;
#line 476
  units[4] = 80;
#line 476
  units[5] = 69;
#line 477
  base = 0;
#line 478
  goto ldv_46028;
  ldv_46027: 
#line 480
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 481
  base = base + 1;
  ldv_46028: ;
#line 478
  if (size > 9999ULL) {
#line 479
    goto ldv_46027;
  } else {

  }
#line 483
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 485
  return (buf);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 503
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 504
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp == 0) {
#line 504
    goto ldv_46033;
  } else {

  }
#line 504
  tmp___0 = get_current();
#line 504
  __wait.flags = 0U;
#line 504
  __wait.private = (void *)tmp___0;
#line 504
  __wait.func = & autoremove_wake_function;
#line 504
  __wait.task_list.next = & __wait.task_list;
#line 504
  __wait.task_list.prev = & __wait.task_list;
  ldv_46036: 
#line 504
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 504
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp___1 == 0) {
#line 504
    goto ldv_46035;
  } else {

  }
#line 504
  schedule();
#line 504
  goto ldv_46036;
  ldv_46035: 
#line 504
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46033: ;
#line 507
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 509
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 510
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 511
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 528
  rv = 0;
#line 539
  drbd_suspend_io(mdev);
#line 542
  tmp = lc_try_lock(mdev->act_log);
#line 542
  if (tmp != 0) {
#line 542
    goto ldv_46052;
  } else {

  }
#line 542
  tmp___0 = get_current();
#line 542
  __wait.flags = 0U;
#line 542
  __wait.private = (void *)tmp___0;
#line 542
  __wait.func = & autoremove_wake_function;
#line 542
  __wait.task_list.next = & __wait.task_list;
#line 542
  __wait.task_list.prev = & __wait.task_list;
  ldv_46055: 
#line 542
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 542
  tmp___1 = lc_try_lock(mdev->act_log);
#line 542
  if (tmp___1 != 0) {
#line 542
    goto ldv_46054;
  } else {

  }
#line 542
  schedule();
#line 542
  goto ldv_46055;
  ldv_46054: 
#line 542
  finish_wait(& mdev->al_wait, & __wait);
  ldv_46052: 
#line 544
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 545
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 546
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 549
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 551
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 553
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 553
  if (tmp___5 != size) {
#line 553
    goto _L;
  } else {
#line 553
    tmp___6 = drbd_bm_capacity(mdev);
#line 553
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 556
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 557
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 557
      if (tmp___3 != 0L) {
#line 559
        tmp___2 = drbd_bm_capacity(mdev);
#line 559
        size = tmp___2 >> 1;
#line 560
        if (size == 0UL) {
#line 561
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 564
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 568
        rv = dev_size_error;
      } else {

      }
#line 571
      drbd_set_my_capacity(mdev, size);
#line 572
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 573
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 573
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 576
  if ((int )rv == -1) {
#line 577
    goto out;
  } else {

  }
#line 579
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 581
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 581
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 584
  if (la_size_changed != 0 || md_moved != 0) {
#line 585
    drbd_al_shrink(mdev);
#line 586
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 589
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 589
    rv = (enum determine_dev_size )tmp___8;
#line 590
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 593
  if (size > la_size) {
#line 594
    rv = grew;
  } else {

  }
#line 595
  if (size < la_size) {
#line 596
    rv = shrunk;
  } else {

  }
  out: 
#line 598
  lc_unlock(mdev->act_log);
#line 599
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 600
  drbd_resume_io(mdev);
#line 602
  return (rv);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 608
  p_size = mdev->p_size;
#line 609
  la_size = (sector_t )bdev->md.la_size_sect;
#line 611
  u_size = (sector_t )bdev->dc.disk_size;
#line 612
  size = 0UL;
#line 614
  m_size = drbd_get_max_capacity___1(bdev);
#line 616
  if ((int )mdev->state.ldv_35070.conn <= 9 && assume_peer_has_space != 0) {
#line 617
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 618
    p_size = m_size;
  } else {

  }
#line 621
  if (p_size != 0UL && m_size != 0UL) {
#line 622
    __min1 = p_size;
#line 622
    __min2 = m_size;
#line 622
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 624
  if (la_size != 0UL) {
#line 625
    size = la_size;
#line 626
    if (m_size != 0UL && m_size < size) {
#line 627
      size = m_size;
    } else {

    }
#line 628
    if (p_size != 0UL && p_size < size) {
#line 629
      size = p_size;
    } else {

    }
  } else {
#line 631
    if (m_size != 0UL) {
#line 632
      size = m_size;
    } else {

    }
#line 633
    if (p_size != 0UL) {
#line 634
      size = p_size;
    } else {

    }
  }
#line 638
  if (size == 0UL) {
#line 639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 641
  if (u_size != 0UL) {
#line 642
    if (u_size > size) {
#line 643
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 646
      size = u_size;
    }
  } else {

  }
#line 649
  return (size);
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 667
  _b = mdev->sync_conf.al_extents <= 6;
#line 667
  if (_b != 0) {
#line 667
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            667);
  } else {

  }
#line 667
  if (_b != 0) {
#line 668
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 670
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 672
    return (0);
  } else {

  }
#line 674
  in_use = 0U;
#line 675
  t = mdev->act_log;
#line 676
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 679
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 680
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 681
    return (-12);
  } else {

  }
#line 683
  spin_lock_irq(& mdev->al_lock);
#line 684
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 685
    i = 0;
#line 685
    goto ldv_46083;
    ldv_46082: 
#line 686
    e = lc_element_by_index(t, (unsigned int )i);
#line 687
    if (e->refcnt != 0U) {
#line 688
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 690
    in_use = e->refcnt + in_use;
#line 685
    i = i + 1;
    ldv_46083: ;
#line 685
    if ((unsigned int )i < t->nr_elements) {
#line 686
      goto ldv_46082;
    } else {

    }

  } else {

  }
#line 693
  if (in_use == 0U) {
#line 694
    mdev->act_log = n;
  } else {

  }
#line 695
  spin_unlock_irq(& mdev->al_lock);
#line 696
  if (in_use != 0U) {
#line 697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 698
    lc_destroy(n);
#line 699
    return (-16);
  } else
#line 701
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 702
    lc_destroy(t);
  } else {

  }
#line 704
  drbd_md_mark_dirty(mdev);
#line 705
  return (0);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 710
  q = mdev->rq_queue;
#line 711
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 712
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 714
  tmp = queue_max_sectors(b);
#line 714
  tmp___0 = queue_logical_block_size(b);
#line 714
  _min1 = tmp * (unsigned int )tmp___0;
#line 714
  _min2 = max_seg_s;
#line 714
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 716
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 717
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 718
  blk_queue_max_segment_size(q, max_seg_s);
#line 719
  blk_queue_logical_block_size(q, 512);
#line 720
  blk_queue_segment_boundary(q, 4095UL);
#line 721
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 723
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 724
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Backing device\'s merge_bvec_fn() = %p\n",
             b->merge_bvec_fn);
  } else {

  }
#line 726
  tmp___1 = queue_max_segment_size(q);
#line 726
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 728
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 729
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 732
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 734
  return;
}
}
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 744
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 744
  if (tmp == 0) {
#line 744
    goto ldv_46098;
  } else {

  }
#line 744
  tmp___0 = get_current();
#line 744
  __wait.flags = 0U;
#line 744
  __wait.private = (void *)tmp___0;
#line 744
  __wait.func = & autoremove_wake_function;
#line 744
  __wait.task_list.next = & __wait.task_list;
#line 744
  __wait.task_list.prev = & __wait.task_list;
  ldv_46101: 
#line 744
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 744
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 744
  if (tmp___1 == 0) {
#line 744
    goto ldv_46100;
  } else {

  }
#line 744
  schedule();
#line 744
  goto ldv_46101;
  ldv_46100: 
#line 744
  finish_wait(& mdev->state_wait, & __wait);
  ldv_46098: 
#line 745
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 745
  if (tmp___2 == 0) {
#line 745
    goto ldv_46102;
  } else {

  }
#line 745
  tmp___3 = get_current();
#line 745
  __wait___0.flags = 0U;
#line 745
  __wait___0.private = (void *)tmp___3;
#line 745
  __wait___0.func = & autoremove_wake_function;
#line 745
  __wait___0.task_list.next = & __wait___0.task_list;
#line 745
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_46105: 
#line 745
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 745
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 745
  if (tmp___4 == 0) {
#line 745
    goto ldv_46104;
  } else {

  }
#line 745
  schedule();
#line 745
  goto ldv_46105;
  ldv_46104: 
#line 745
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_46102: 
#line 746
  drbd_thread_start(& mdev->worker);
#line 747
  return;
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 754
  spin_lock_irq(& mdev->req_lock);
#line 755
  if (((unsigned int )*((unsigned char *)mdev + 1821UL) == 0U && (unsigned int )*((unsigned short *)mdev + 910UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 758
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 759
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 761
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 762
  spin_unlock_irq(& mdev->req_lock);
#line 763
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 764
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned short tmp___17 ;
  struct page *page ;
  struct page *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  sector_t tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 775
  nbc = 0;
#line 777
  resync_lru = 0;
#line 780
  cp_discovered = 0;
#line 783
  drbd_reconfig_start(mdev);
#line 786
  if ((int )mdev->state.ldv_35070.disk > 0) {
#line 787
    retcode = ERR_DISK_CONFIGURED;
#line 788
    goto fail;
  } else {

  }
#line 792
  tmp = kzalloc___1(408UL, 208U);
#line 792
  nbc = (struct drbd_backing_dev *)tmp;
#line 793
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 794
    retcode = ERR_NOMEM;
#line 795
    goto fail;
  } else {

  }
#line 798
  nbc->dc.disk_size = 0ULL;
#line 799
  nbc->dc.on_io_error = 0;
#line 800
  nbc->dc.fencing = 0;
#line 801
  nbc->dc.max_bio_bvecs = 0;
#line 803
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 803
  if (tmp___0 == 0) {
#line 804
    retcode = ERR_MANDATORY_TAG;
#line 805
    goto fail;
  } else {

  }
#line 808
  if (nbc->dc.meta_dev_idx < -3) {
#line 809
    retcode = ERR_MD_IDX_INVALID;
#line 810
    goto fail;
  } else {

  }
#line 813
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 814
  tmp___2 = IS_ERR((void const   *)nbc->lo_file);
#line 814
  if (tmp___2 != 0L) {
#line 815
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___1);
#line 817
    nbc->lo_file = 0;
#line 818
    retcode = ERR_OPEN_DISK;
#line 819
    goto fail;
  } else {

  }
#line 822
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 824
  if (((int )inode->i_mode & 61440) != 24576) {
#line 825
    retcode = ERR_DISK_NOT_BDEV;
#line 826
    goto fail;
  } else {

  }
#line 829
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 830
  tmp___4 = IS_ERR((void const   *)nbc->md_file);
#line 830
  if (tmp___4 != 0L) {
#line 831
    tmp___3 = PTR_ERR((void const   *)nbc->md_file);
#line 831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___3);
#line 833
    nbc->md_file = 0;
#line 834
    retcode = ERR_OPEN_MD_DISK;
#line 835
    goto fail;
  } else {

  }
#line 838
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 840
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 841
    retcode = ERR_MD_NOT_BDEV;
#line 842
    goto fail;
  } else {

  }
#line 845
  nbc->backing_bdev = inode->ldv_22998.i_bdev;
#line 846
  tmp___5 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 846
  if (tmp___5 != 0) {
#line 847
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 852
    retcode = ERR_BDCLAIM_DISK;
#line 853
    goto fail;
  } else {

  }
#line 856
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 859
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 860
    retcode = ERR_NOMEM;
#line 861
    goto release_bdev_fail;
  } else {

  }
#line 871
  nbc->md_bdev = inode2->ldv_22998.i_bdev;
#line 872
  tmp___6 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 872
  if (tmp___6 != 0) {
#line 874
    retcode = ERR_BDCLAIM_MD_DISK;
#line 875
    goto release_bdev_fail;
  } else {

  }
#line 878
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 881
    retcode = ERR_MD_IDX_INVALID;
#line 882
    goto release_bdev2_fail;
  } else {

  }
#line 886
  drbd_md_set_sector_offsets(mdev, nbc);
#line 888
  tmp___8 = drbd_get_max_capacity___1(nbc);
#line 888
  if ((unsigned long long )tmp___8 < nbc->dc.disk_size) {
#line 889
    tmp___7 = drbd_get_max_capacity___1(nbc);
#line 889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___7, nbc->dc.disk_size);
#line 892
    retcode = ERR_DISK_TO_SMALL;
#line 893
    goto release_bdev2_fail;
  } else {

  }
#line 896
  if (nbc->dc.meta_dev_idx < 0) {
#line 897
    max_possible_sectors = 34359738368UL;
#line 899
    min_md_device_sectors = 2048UL;
  } else {
#line 901
    max_possible_sectors = 8587575296UL;
#line 902
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 905
  tmp___9 = drbd_get_capacity(nbc->md_bdev);
#line 905
  if (tmp___9 < min_md_device_sectors) {
#line 906
    retcode = ERR_MD_DISK_TO_SMALL;
#line 907
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 910
    goto release_bdev2_fail;
  } else {

  }
#line 915
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 915
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 915
  if (tmp___10 < tmp___11) {
#line 917
    retcode = ERR_DISK_TO_SMALL;
#line 918
    goto release_bdev2_fail;
  } else {

  }
#line 921
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 923
  if (nbc->known_size > max_possible_sectors) {
#line 924
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 927
    if (nbc->dc.meta_dev_idx >= 0) {
#line 928
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 932
  drbd_suspend_io(mdev);
#line 934
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 934
  if (tmp___12 == 0) {
#line 934
    goto ldv_46130;
  } else {

  }
#line 934
  tmp___13 = get_current();
#line 934
  __wait.flags = 0U;
#line 934
  __wait.private = (void *)tmp___13;
#line 934
  __wait.func = & autoremove_wake_function;
#line 934
  __wait.task_list.next = & __wait.task_list;
#line 934
  __wait.task_list.prev = & __wait.task_list;
  ldv_46133: 
#line 934
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 934
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 934
  if (tmp___14 == 0) {
#line 934
    goto ldv_46132;
  } else {

  }
#line 934
  schedule();
#line 934
  goto ldv_46133;
  ldv_46132: 
#line 934
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46130: 
#line 936
  drbd_flush_workqueue(mdev);
#line 938
  val.i = 0U;
#line 938
  val.ldv_35070.disk = 1U;
#line 938
  mask.i = 0U;
#line 938
  mask.ldv_35070.disk = 15U;
#line 938
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 938
  retcode = (enum drbd_ret_codes )tmp___15;
#line 939
  drbd_resume_io(mdev);
#line 940
  if ((unsigned int )retcode == 0U) {
#line 941
    goto release_bdev2_fail;
  } else {

  }
#line 943
  tmp___16 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 943
  if (tmp___16 == 0) {
#line 944
    goto force_diskless;
  } else {

  }
#line 946
  drbd_md_set_sector_offsets(mdev, nbc);
#line 949
  tmp___17 = bdev_logical_block_size(nbc->md_bdev);
#line 949
  logical_block_size = (int )tmp___17;
#line 950
  if (logical_block_size == 0) {
#line 951
    logical_block_size = 512;
  } else {

  }
#line 953
  if (logical_block_size != 512) {
#line 954
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 955
      tmp___18 = alloc_pages(16U, 0U);
#line 955
      page = tmp___18;
#line 956
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 957
        goto force_diskless_dec;
      } else {

      }
#line 959
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 961
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 963
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 967
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 968
    tmp___19 = drbd_bm_init(mdev);
#line 968
    if (tmp___19 != 0) {
#line 969
      retcode = ERR_NOMEM;
#line 970
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 974
  tmp___20 = drbd_md_read(mdev, nbc);
#line 974
  retcode = (enum drbd_ret_codes )tmp___20;
#line 975
  if ((unsigned int )retcode != 101U) {
#line 976
    goto force_diskless_dec;
  } else {

  }
#line 978
  if (((int )mdev->state.ldv_35070.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 981
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 983
    retcode = ERR_DATA_NOT_CURRENT;
#line 984
    goto force_diskless_dec;
  } else {

  }
#line 988
  tmp___21 = drbd_check_al_size(mdev);
#line 988
  if (tmp___21 != 0) {
#line 989
    retcode = ERR_NOMEM;
#line 990
    goto force_diskless_dec;
  } else {

  }
#line 994
  tmp___22 = drbd_md_test_flag(nbc, 1);
#line 994
  if (tmp___22 != 0) {
#line 994
    tmp___23 = drbd_new_dev_size(mdev, nbc, 0);
#line 994
    if ((unsigned long long )tmp___23 < nbc->md.la_size_sect) {
#line 996
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 997
      retcode = ERR_DISK_TO_SMALL;
#line 998
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1001
  tmp___24 = drbd_al_read_log(mdev, nbc);
#line 1001
  if (tmp___24 == 0) {
#line 1002
    retcode = ERR_IO_MD_DISK;
#line 1003
    goto force_diskless_dec;
  } else {

  }
#line 1008
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1009
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1011
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1017
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1017
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1017);
  } else {

  }
#line 1018
  mdev->ldev = nbc;
#line 1019
  mdev->resync = resync_lru;
#line 1020
  nbc = 0;
#line 1021
  resync_lru = 0;
#line 1023
  mdev->write_ordering = WO_bio_barrier;
#line 1024
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1026
  tmp___25 = drbd_md_test_flag(mdev->ldev, 64);
#line 1026
  if (tmp___25 != 0) {
#line 1027
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1029
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1031
  tmp___26 = drbd_md_test_flag(mdev->ldev, 2);
#line 1031
  if (tmp___26 != 0) {
#line 1032
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1033
    cp_discovered = 1;
  } else {

  }
#line 1036
  mdev->send_cnt = 0U;
#line 1037
  mdev->recv_cnt = 0U;
#line 1038
  mdev->read_cnt = 0U;
#line 1039
  mdev->writ_cnt = 0U;
#line 1041
  drbd_setup_queue_param(mdev, 32768U);
#line 1057
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1058
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 1058
    tmp___27 = drbd_md_test_flag(mdev->ldev, 2);
#line 1058
    if (tmp___27 != 0) {
#line 1058
      tmp___28 = drbd_md_test_flag(mdev->ldev, 4);
#line 1058
      if (tmp___28 == 0) {
#line 1061
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1063
  dd = drbd_determin_dev_size(mdev, 0);
#line 1064
  if ((int )dd == -1) {
#line 1065
    retcode = ERR_NOMEM_BITMAP;
#line 1066
    goto force_diskless_dec;
  } else
#line 1067
  if ((int )dd == 2) {
#line 1068
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1070
  tmp___31 = drbd_md_test_flag(mdev->ldev, 8);
#line 1070
  if (tmp___31 != 0) {
#line 1071
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1073
    tmp___29 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1073
    if (tmp___29 != 0) {
#line 1074
      retcode = ERR_IO_MD_DISK;
#line 1075
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1078
    tmp___30 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1078
    if (tmp___30 < 0) {
#line 1079
      retcode = ERR_IO_MD_DISK;
#line 1080
      goto force_diskless_dec;
    } else {

    }
  }
#line 1084
  if (cp_discovered != 0) {
#line 1085
    drbd_al_apply_to_bm(mdev);
#line 1086
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1089
  spin_lock_irq(& mdev->req_lock);
#line 1090
  os = mdev->state;
#line 1091
  ns.i = os.i;
#line 1097
  tmp___33 = drbd_md_test_flag(mdev->ldev, 1);
#line 1097
  if (tmp___33 != 0) {
#line 1098
    tmp___32 = drbd_md_test_flag(mdev->ldev, 16);
#line 1098
    if (tmp___32 != 0) {
#line 1099
      ns.ldv_35070.disk = 7U;
    } else {
#line 1101
      ns.ldv_35070.disk = 5U;
    }
  } else {
#line 1103
    ns.ldv_35070.disk = 4U;
  }
#line 1106
  tmp___34 = drbd_md_test_flag(mdev->ldev, 32);
#line 1106
  if (tmp___34 != 0) {
#line 1107
    ns.ldv_35070.pdsk = 5U;
  } else {

  }
#line 1109
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1111
    ns.ldv_35070.disk = 8U;
  } else {

  }
#line 1120
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1121
    mdev->new_state_tmp.i = ns.i;
#line 1122
    ns.i = os.i;
#line 1123
    ns.ldv_35070.disk = 3U;
#line 1128
    kfree((void const   *)mdev->p_uuid);
#line 1129
    mdev->p_uuid = 0;
  } else {

  }
#line 1132
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1133
  ns = mdev->state;
#line 1134
  spin_unlock_irq(& mdev->req_lock);
#line 1136
  if (rv <= 0) {
#line 1137
    goto force_diskless_dec;
  } else {

  }
#line 1139
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 1140
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1142
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1144
  drbd_md_mark_dirty(mdev);
#line 1145
  drbd_md_sync(mdev);
#line 1147
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1148
  put_ldev(mdev);
#line 1149
  reply->ret_code = (int )retcode;
#line 1150
  drbd_reconfig_done(mdev);
#line 1151
  return (0);
  force_diskless_dec: 
#line 1154
  put_ldev(mdev);
  force_diskless: 
#line 1156
  val___0.i = 0U;
#line 1156
  val___0.ldv_35070.disk = 0U;
#line 1156
  mask___0.i = 0U;
#line 1156
  mask___0.ldv_35070.disk = 15U;
#line 1156
  drbd_force_state(mdev, mask___0, val___0);
#line 1157
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1159
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1160
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1162
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1163
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1165
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1166
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1167
      fput(nbc->lo_file);
    } else {

    }
#line 1168
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1169
      fput(nbc->md_file);
    } else {

    }
#line 1170
    kfree((void const   *)nbc);
  } else {

  }
#line 1172
  lc_destroy(resync_lru);
#line 1174
  reply->ret_code = (int )retcode;
#line 1175
  drbd_reconfig_done(mdev);
#line 1176
  return (0);
}
}
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1182
  val.i = 0U;
#line 1182
  val.ldv_35070.disk = 0U;
#line 1182
  mask.i = 0U;
#line 1182
  mask.ldv_35070.disk = 15U;
#line 1182
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1183
  return (0);
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1191
  new_conf = 0;
#line 1192
  tfm = 0;
#line 1193
  integrity_w_tfm = 0;
#line 1194
  integrity_r_tfm = 0;
#line 1195
  new_tl_hash = 0;
#line 1196
  new_ee_hash = 0;
#line 1199
  int_dig_out = 0;
#line 1200
  int_dig_in = 0;
#line 1201
  int_dig_vv = 0;
#line 1204
  drbd_reconfig_start(mdev);
#line 1206
  if ((int )mdev->state.ldv_35070.conn > 0) {
#line 1207
    retcode = ERR_NET_CONFIGURED;
#line 1208
    goto fail;
  } else {

  }
#line 1212
  tmp = kzalloc___1(532UL, 208U);
#line 1212
  new_conf = (struct net_conf *)tmp;
#line 1213
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1214
    retcode = ERR_NOMEM;
#line 1215
    goto fail;
  } else {

  }
#line 1218
  new_conf->timeout = 60;
#line 1219
  new_conf->try_connect_int = 10;
#line 1220
  new_conf->ping_int = 10;
#line 1221
  new_conf->max_epoch_size = 2048;
#line 1222
  new_conf->max_buffers = 2048;
#line 1223
  new_conf->unplug_watermark = 128;
#line 1224
  new_conf->sndbuf_size = 0;
#line 1225
  new_conf->rcvbuf_size = 0;
#line 1226
  new_conf->ko_count = 0;
#line 1227
  new_conf->after_sb_0p = 0;
#line 1228
  new_conf->after_sb_1p = 0;
#line 1229
  new_conf->after_sb_2p = 0;
#line 1230
  new_conf->want_lose = 0U;
#line 1231
  new_conf->two_primaries = 0U;
#line 1232
  new_conf->wire_protocol = 3;
#line 1233
  new_conf->ping_timeo = 5;
#line 1234
  new_conf->rr_conflict = 0;
#line 1236
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1236
  if (tmp___0 == 0) {
#line 1237
    retcode = ERR_MANDATORY_TAG;
#line 1238
    goto fail;
  } else {

  }
#line 1241
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1243
    retcode = ERR_NOT_PROTO_C;
#line 1244
    goto fail;
  } else {

  }
#line 1247
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1248
    retcode = ERR_DISCARD;
#line 1249
    goto fail;
  } else {

  }
#line 1252
  retcode = NO_ERROR;
#line 1254
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1255
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1256
  i = 0;
#line 1256
  goto ldv_46179;
  ldv_46178: 
#line 1257
  odev = minor_to_mdev((unsigned int )i);
#line 1258
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1259
    goto ldv_46177;
  } else {

  }
#line 1260
  tmp___3 = get_net_conf(odev);
#line 1260
  if (tmp___3 != 0) {
#line 1261
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1262
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1262
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1262
      if (tmp___1 == 0) {
#line 1264
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1266
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1267
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1267
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1267
      if (tmp___2 == 0) {
#line 1269
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1271
    put_net_conf(odev);
#line 1272
    if ((unsigned int )retcode != 101U) {
#line 1273
      goto fail;
    } else {

    }
  } else {

  }
  ldv_46177: 
#line 1256
  i = i + 1;
  ldv_46179: ;
#line 1256
  if ((unsigned int )i < minor_count) {
#line 1257
    goto ldv_46178;
  } else {

  }

#line 1277
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1278
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1280
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1281
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1281
    if (tmp___4 != 0L) {
#line 1282
      tfm = 0;
#line 1283
      retcode = ERR_AUTH_ALG;
#line 1284
      goto fail;
    } else {

    }
#line 1287
    tmp___5 = crypto_hash_tfm(tfm);
#line 1287
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1287
    if (tmp___6 == 0) {
#line 1288
      retcode = ERR_AUTH_ALG_ND;
#line 1289
      goto fail;
    } else {

    }
  } else {

  }
#line 1293
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1294
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1295
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1295
    if (tmp___7 != 0L) {
#line 1296
      integrity_w_tfm = 0;
#line 1297
      retcode = ERR_INTEGRITY_ALG;
#line 1298
      goto fail;
    } else {

    }
#line 1301
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1301
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1301
    if (tmp___9 == 0) {
#line 1302
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1303
      goto fail;
    } else {

    }
#line 1306
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1307
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1307
    if (tmp___10 != 0L) {
#line 1308
      integrity_r_tfm = 0;
#line 1309
      retcode = ERR_INTEGRITY_ALG;
#line 1310
      goto fail;
    } else {

    }
  } else {

  }
#line 1314
  ns = new_conf->max_epoch_size / 8;
#line 1315
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1316
    tmp___11 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1316
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1317
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1318
      retcode = ERR_NOMEM;
#line 1319
      goto fail;
    } else {

    }
  } else {

  }
#line 1323
  ns = new_conf->max_buffers / 8;
#line 1324
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1325
    tmp___12 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1325
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1326
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1327
      retcode = ERR_NOMEM;
#line 1328
      goto fail;
    } else {

    }
  } else {

  }
#line 1332
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1334
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1335
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1335
    i = (int )tmp___13;
#line 1336
    int_dig_out = kmalloc___4((size_t )i, 208U);
#line 1337
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1338
      retcode = ERR_NOMEM;
#line 1339
      goto fail;
    } else {

    }
#line 1341
    int_dig_in = kmalloc___4((size_t )i, 208U);
#line 1342
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1343
      retcode = ERR_NOMEM;
#line 1344
      goto fail;
    } else {

    }
#line 1346
    int_dig_vv = kmalloc___4((size_t )i, 208U);
#line 1347
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1348
      retcode = ERR_NOMEM;
#line 1349
      goto fail;
    } else {

    }
  } else {

  }
#line 1353
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1354
    tmp___14 = drbd_bm_init(mdev);
#line 1354
    if (tmp___14 != 0) {
#line 1355
      retcode = ERR_NOMEM;
#line 1356
      goto fail;
    } else {

    }
  } else {

  }
#line 1360
  spin_lock_irq(& mdev->req_lock);
#line 1361
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1362
    retcode = ERR_NET_CONFIGURED;
#line 1363
    spin_unlock_irq(& mdev->req_lock);
#line 1364
    goto fail;
  } else {

  }
#line 1366
  mdev->net_conf = new_conf;
#line 1368
  mdev->send_cnt = 0U;
#line 1369
  mdev->recv_cnt = 0U;
#line 1371
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1372
    kfree((void const   *)mdev->tl_hash);
#line 1373
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1374
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1377
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1378
    kfree((void const   *)mdev->ee_hash);
#line 1379
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1380
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1383
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1384
  mdev->cram_hmac_tfm = tfm;
#line 1386
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1387
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1389
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1390
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1392
  kfree((void const   *)mdev->int_dig_out);
#line 1393
  kfree((void const   *)mdev->int_dig_in);
#line 1394
  kfree((void const   *)mdev->int_dig_vv);
#line 1395
  mdev->int_dig_out = int_dig_out;
#line 1396
  mdev->int_dig_in = int_dig_in;
#line 1397
  mdev->int_dig_vv = int_dig_vv;
#line 1398
  spin_unlock_irq(& mdev->req_lock);
#line 1400
  val.i = 0U;
#line 1400
  val.ldv_35070.conn = 2U;
#line 1400
  mask.i = 0U;
#line 1400
  mask.ldv_35070.conn = 31U;
#line 1400
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1400
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1402
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1403
  reply->ret_code = (int )retcode;
#line 1404
  drbd_reconfig_done(mdev);
#line 1405
  return (0);
  fail: 
#line 1408
  kfree((void const   *)int_dig_out);
#line 1409
  kfree((void const   *)int_dig_in);
#line 1410
  kfree((void const   *)int_dig_vv);
#line 1411
  crypto_free_hash(tfm);
#line 1412
  crypto_free_hash(integrity_w_tfm);
#line 1413
  crypto_free_hash(integrity_r_tfm);
#line 1414
  kfree((void const   *)new_tl_hash);
#line 1415
  kfree((void const   *)new_ee_hash);
#line 1416
  kfree((void const   *)new_conf);
#line 1418
  reply->ret_code = (int )retcode;
#line 1419
  drbd_reconfig_done(mdev);
#line 1420
  return (0);
}
}
#line 1423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1428
  val.i = 0U;
#line 1428
  val.ldv_35070.conn = 1U;
#line 1428
  mask.i = 0U;
#line 1428
  mask.ldv_35070.conn = 31U;
#line 1428
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1430
  if (retcode == 2) {
#line 1431
    goto done;
  } else
#line 1432
  if (retcode == -9) {
#line 1433
    goto done;
  } else
#line 1434
  if (retcode == -7) {
#line 1437
    val___0.i = 0U;
#line 1437
    val___0.ldv_35070.conn = 1U;
#line 1437
    val___0.ldv_35070.pdsk = 5U;
#line 1436
    mask___0.i = 0U;
#line 1436
    mask___0.ldv_35070.conn = 31U;
#line 1437
    mask___0.ldv_35070.pdsk = 15U;
#line 1437
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1438
  if (retcode == -10) {
#line 1441
    val___1.i = 0U;
#line 1441
    val___1.ldv_35070.conn = 1U;
#line 1441
    val___1.ldv_35070.disk = 5U;
#line 1440
    mask___1.i = 0U;
#line 1440
    mask___1.ldv_35070.conn = 31U;
#line 1441
    mask___1.ldv_35070.disk = 15U;
#line 1441
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1443
    if (retcode == -11 || retcode == -16) {
#line 1444
      val___2.i = 0U;
#line 1444
      val___2.ldv_35070.conn = 1U;
#line 1444
      mask___2.i = 0U;
#line 1444
      mask___2.ldv_35070.conn = 31U;
#line 1444
      drbd_force_state(mdev, mask___2, val___2);
#line 1445
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1449
  if (retcode <= 0) {
#line 1450
    goto fail;
  } else {

  }
#line 1452
  __ret = 0;
#line 1452
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 16U) {
#line 1452
    tmp = get_current();
#line 1452
    __wait.flags = 0U;
#line 1452
    __wait.private = (void *)tmp;
#line 1452
    __wait.func = & autoremove_wake_function;
#line 1452
    __wait.task_list.next = & __wait.task_list;
#line 1452
    __wait.task_list.prev = & __wait.task_list;
    ldv_46213: 
#line 1452
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1452
    if ((unsigned int )*((unsigned short *)mdev + 910UL) != 16U) {
#line 1452
      goto ldv_46211;
    } else {

    }
#line 1452
    tmp___0 = get_current();
#line 1452
    tmp___1 = signal_pending(tmp___0);
#line 1452
    if (tmp___1 == 0) {
#line 1452
      schedule();
#line 1452
      goto ldv_46212;
    } else {

    }
#line 1452
    __ret = -512;
#line 1452
    goto ldv_46211;
    ldv_46212: ;
#line 1452
    goto ldv_46213;
    ldv_46211: 
#line 1452
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1452
  if (__ret != 0) {
#line 1456
    retcode = 129;
#line 1457
    goto fail;
  } else {

  }
  done: 
#line 1461
  retcode = 101;
  fail: 
#line 1463
  drbd_md_sync(mdev);
#line 1464
  reply->ret_code = retcode;
#line 1465
  return (0);
}
}
#line 1468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1472
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1473
  if ((int )mdev->state.ldv_35070.role != (int )mdev->state.ldv_35070.peer) {
#line 1474
    iass = (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U;
  } else {
#line 1476
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1478
  if (iass != 0) {
#line 1479
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1481
    val.i = 0U;
#line 1481
    val.ldv_35070.conn = 15U;
#line 1481
    mask.i = 0U;
#line 1481
    mask.ldv_35070.conn = 31U;
#line 1481
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1483
  return;
}
}
#line 1484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1488
  retcode = 101;
#line 1492
  memset((void *)(& rs), 0, 16UL);
#line 1493
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1493
  if (tmp == 0) {
#line 1494
    retcode = 126;
#line 1495
    goto fail;
  } else {

  }
#line 1498
  if ((int )mdev->state.ldv_35070.conn > 10) {
#line 1499
    retcode = 130;
#line 1500
    goto fail;
  } else {

  }
#line 1503
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1820UL) == 8U) {
#line 1505
    retcode = 131;
#line 1506
    goto fail;
  } else {

  }
#line 1509
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1509
  if (tmp___0 == 0) {
#line 1510
    retcode = 138;
#line 1511
    goto fail;
  } else {

  }
#line 1514
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1515
    retcode = 153;
#line 1516
    goto fail;
  } else {

  }
#line 1519
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1519
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1520
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1522
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1523
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1524
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1525
  drbd_md_sync(mdev);
#line 1526
  put_ldev(mdev);
#line 1527
  if ((int )dd == -1) {
#line 1528
    retcode = 140;
#line 1529
    goto fail;
  } else {

  }
#line 1532
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1533
    if ((int )dd == 2) {
#line 1534
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1536
    drbd_send_uuids(mdev);
#line 1537
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1541
  reply->ret_code = retcode;
#line 1542
  return (0);
}
}
#line 1545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  int tmp___10 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  bool tmp___14 ;
  int tmp___15 ;

  {
#line 1548
  retcode = 101;
#line 1552
  verify_tfm = 0;
#line 1553
  csums_tfm = 0;
#line 1557
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1557
  if (tmp) {
#line 1557
    tmp___0 = 0;
  } else {
#line 1557
    tmp___0 = 1;
  }
#line 1557
  if (tmp___0) {
#line 1558
    retcode = 122;
#line 1559
    goto fail;
  } else {

  }
#line 1562
  if ((nlp->flags & 2) != 0) {
#line 1563
    memset((void *)(& sc), 0, 188UL);
#line 1564
    sc.rate = 250;
#line 1565
    sc.after = -1;
#line 1566
    sc.al_extents = 127;
  } else {
#line 1568
    __len = 188UL;
#line 1568
    if (__len > 63UL) {
#line 1568
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1568
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1570
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1570
  if (tmp___1 == 0) {
#line 1571
    retcode = 126;
#line 1572
    goto fail;
  } else {

  }
#line 1576
  rsr = (((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 336U;
#line 1581
  if (rsr != 0) {
#line 1581
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1581
    if (tmp___2 != 0) {
#line 1582
      retcode = 148;
#line 1583
      goto fail;
    } else {

    }
  } else {

  }
#line 1586
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1587
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1588
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1588
    if (tmp___3 != 0L) {
#line 1589
      csums_tfm = 0;
#line 1590
      retcode = 144;
#line 1591
      goto fail;
    } else {

    }
#line 1594
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1594
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1594
    if (tmp___5 == 0) {
#line 1595
      retcode = 145;
#line 1596
      goto fail;
    } else {

    }
  } else {

  }
#line 1601
  ovr = (unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U;
#line 1603
  if (ovr != 0) {
#line 1604
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1604
    if (tmp___6 != 0) {
#line 1605
      retcode = 149;
#line 1606
      goto fail;
    } else {

    }
  } else {

  }
#line 1610
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1611
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1612
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1612
    if (tmp___7 != 0L) {
#line 1613
      verify_tfm = 0;
#line 1614
      retcode = 146;
#line 1615
      goto fail;
    } else {

    }
#line 1618
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1618
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1618
    if (tmp___9 == 0) {
#line 1619
      retcode = 147;
#line 1620
      goto fail;
    } else {

    }
  } else {

  }
#line 1625
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1626
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1628
    if (err != 0) {
#line 1629
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1630
      retcode = 143;
#line 1631
      goto fail;
    } else {

    }
  } else {

  }
#line 1635
  _b = sc.rate <= 0;
#line 1635
  if (_b != 0) {
#line 1635
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1635);
  } else {

  }
#line 1635
  if (_b != 0) {
#line 1635
    sc.rate = 1;
  } else {

  }
#line 1636
  _b___0 = sc.al_extents <= 6;
#line 1636
  if (_b___0 != 0) {
#line 1636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1636);
  } else {

  }
#line 1636
  if (_b___0 != 0) {
#line 1636
    sc.al_extents = 127;
  } else {

  }
#line 1638
  if (sc.al_extents > 3843) {
#line 1639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1640
    sc.al_extents = 3843;
  } else {

  }
#line 1647
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1648
  if (retcode != 101) {
#line 1649
    goto fail;
  } else {

  }
#line 1653
  spin_lock(& mdev->peer_seq_lock);
#line 1654
  mdev->sync_conf = sc;
#line 1656
  if (rsr == 0) {
#line 1657
    crypto_free_hash(mdev->csums_tfm);
#line 1658
    mdev->csums_tfm = csums_tfm;
#line 1659
    csums_tfm = 0;
  } else {

  }
#line 1662
  if (ovr == 0) {
#line 1663
    crypto_free_hash(mdev->verify_tfm);
#line 1664
    mdev->verify_tfm = verify_tfm;
#line 1665
    verify_tfm = 0;
  } else {

  }
#line 1667
  spin_unlock(& mdev->peer_seq_lock);
#line 1669
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1669
  if (tmp___13 != 0) {
#line 1670
    tmp___10 = lc_try_lock(mdev->act_log);
#line 1670
    if (tmp___10 != 0) {
#line 1670
      goto ldv_46255;
    } else {

    }
#line 1670
    tmp___11 = get_current();
#line 1670
    __wait.flags = 0U;
#line 1670
    __wait.private = (void *)tmp___11;
#line 1670
    __wait.func = & autoremove_wake_function;
#line 1670
    __wait.task_list.next = & __wait.task_list;
#line 1670
    __wait.task_list.prev = & __wait.task_list;
    ldv_46258: 
#line 1670
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1670
    tmp___12 = lc_try_lock(mdev->act_log);
#line 1670
    if (tmp___12 != 0) {
#line 1670
      goto ldv_46257;
    } else {

    }
#line 1670
    schedule();
#line 1670
    goto ldv_46258;
    ldv_46257: 
#line 1670
    finish_wait(& mdev->al_wait, & __wait);
    ldv_46255: 
#line 1671
    drbd_al_shrink(mdev);
#line 1672
    err = drbd_check_al_size(mdev);
#line 1673
    lc_unlock(mdev->act_log);
#line 1674
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1676
    put_ldev(mdev);
#line 1677
    drbd_md_sync(mdev);
#line 1679
    if (err != 0) {
#line 1680
      retcode = 122;
#line 1681
      goto fail;
    } else {

    }
  } else {

  }
#line 1685
  if ((int )mdev->state.ldv_35070.conn > 9) {
#line 1686
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1688
  tmp___14 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1688
  if (tmp___14) {
#line 1688
    tmp___15 = 0;
  } else {
#line 1688
    tmp___15 = 1;
  }
#line 1688
  if (tmp___15) {
#line 1689
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1690
    drbd_calc_cpu_mask(mdev);
#line 1691
    mdev->receiver.reset_cpu_mask = 1;
#line 1692
    mdev->asender.reset_cpu_mask = 1;
#line 1693
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1696
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1698
  free_cpumask_var(new_cpu_mask);
#line 1699
  crypto_free_hash(csums_tfm);
#line 1700
  crypto_free_hash(verify_tfm);
#line 1701
  reply->ret_code = retcode;
#line 1702
  return (0);
}
}
#line 1705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1710
  val.i = 0U;
#line 1710
  val.ldv_35070.conn = 12U;
#line 1710
  mask.i = 0U;
#line 1710
  mask.ldv_35070.conn = 31U;
#line 1710
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1712
  if (retcode <= 0 && retcode != -15) {
#line 1713
    val___0.i = 0U;
#line 1713
    val___0.ldv_35070.conn = 12U;
#line 1713
    mask___0.i = 0U;
#line 1713
    mask___0.ldv_35070.conn = 31U;
#line 1713
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1715
  goto ldv_46281;
  ldv_46280: 
#line 1716
  spin_lock_irq(& mdev->req_lock);
#line 1717
  if ((int )mdev->state.ldv_35070.conn <= 9) {
#line 1718
    __ns.i = mdev->state.i;
#line 1718
    __ns.ldv_35070.disk = 4U;
#line 1718
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1719
  spin_unlock_irq(& mdev->req_lock);
#line 1721
  if (retcode != -15) {
#line 1722
    goto ldv_46275;
  } else {

  }
#line 1724
  val___1.i = 0U;
#line 1724
  val___1.ldv_35070.conn = 12U;
#line 1724
  mask___1.i = 0U;
#line 1724
  mask___1.ldv_35070.conn = 31U;
#line 1724
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_46281: ;
#line 1715
  if (retcode == -15) {
#line 1716
    goto ldv_46280;
  } else {

  }
  ldv_46275: 
#line 1727
  reply->ret_code = retcode;
#line 1728
  return (0);
}
}
#line 1731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1735
  val.i = 0U;
#line 1735
  val.ldv_35070.conn = 11U;
#line 1735
  mask.i = 0U;
#line 1735
  mask.ldv_35070.conn = 31U;
#line 1735
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1737
  return (0);
}
}
#line 1740 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1743
  retcode = 101;
#line 1745
  val.i = 0U;
#line 1745
  val.ldv_35070.user_isp = 1U;
#line 1745
  mask.i = 0U;
#line 1745
  mask.ldv_35070.user_isp = 1U;
#line 1745
  tmp = drbd_request_state(mdev, mask, val);
#line 1745
  if (tmp == 2) {
#line 1746
    retcode = 134;
  } else {

  }
#line 1748
  reply->ret_code = retcode;
#line 1749
  return (0);
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1755
  retcode = 101;
#line 1757
  val.i = 0U;
#line 1757
  val.ldv_35070.user_isp = 0U;
#line 1757
  mask.i = 0U;
#line 1757
  mask.ldv_35070.user_isp = 1U;
#line 1757
  tmp = drbd_request_state(mdev, mask, val);
#line 1757
  if (tmp == 2) {
#line 1758
    retcode = 135;
  } else {

  }
#line 1760
  reply->ret_code = retcode;
#line 1761
  return (0);
}
}
#line 1764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1767
  val.i = 0U;
#line 1767
  val.ldv_35070.susp = 1U;
#line 1767
  mask.i = 0U;
#line 1767
  mask.ldv_35070.susp = 1U;
#line 1767
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1769
  return (0);
}
}
#line 1772 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1775
  val.i = 0U;
#line 1775
  val.ldv_35070.susp = 0U;
#line 1775
  mask.i = 0U;
#line 1775
  mask.ldv_35070.susp = 1U;
#line 1775
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1776
  return (0);
}
}
#line 1779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1782
  val.i = 0U;
#line 1782
  val.ldv_35070.disk = 5U;
#line 1782
  mask.i = 0U;
#line 1782
  mask.ldv_35070.disk = 15U;
#line 1782
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1783
  return (0);
}
}
#line 1786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1791
  tl = (unsigned short *)(& reply->tag_list);
#line 1793
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1793
  if (tmp != 0) {
#line 1794
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1795
    put_ldev(mdev);
  } else {

  }
#line 1798
  tmp___0 = get_net_conf(mdev);
#line 1798
  if (tmp___0 != 0) {
#line 1799
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1800
    put_net_conf(mdev);
  } else {

  }
#line 1802
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1804
  tmp___1 = tl;
#line 1804
  tl = tl + 1;
#line 1804
  __gu_p = (void *)tmp___1;
#line 1804
  switch (2UL) {
  case 1UL: 
#line 1804
  *((u8 *)__gu_p) = 0U;
#line 1804
  goto ldv_46346;
  case 2UL: 
#line 1804
  put_unaligned_le16(0, __gu_p);
#line 1804
  goto ldv_46346;
  case 4UL: 
#line 1804
  put_unaligned_le32(0U, __gu_p);
#line 1804
  goto ldv_46346;
  case 8UL: 
#line 1804
  put_unaligned_le64(0ULL, __gu_p);
#line 1804
  goto ldv_46346;
  default: 
#line 1804
  __bad_unaligned_access_size();
#line 1804
  goto ldv_46346;
  }
  ldv_46346: ;
#line 1806
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1812
  tl = (unsigned short *)(& reply->tag_list);
#line 1813
  s = mdev->state;
#line 1817
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1820
  if ((int )s.ldv_35070.conn > 15 && (int )s.ldv_35070.conn <= 21) {
#line 1821
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1821
    if (tmp != 0) {
#line 1822
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1823
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1824
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1827
  tmp___0 = tl;
#line 1827
  tl = tl + 1;
#line 1827
  __gu_p = (void *)tmp___0;
#line 1827
  switch (2UL) {
  case 1UL: 
#line 1827
  *((u8 *)__gu_p) = 0U;
#line 1827
  goto ldv_46362;
  case 2UL: 
#line 1827
  put_unaligned_le16(0, __gu_p);
#line 1827
  goto ldv_46362;
  case 4UL: 
#line 1827
  put_unaligned_le32(0U, __gu_p);
#line 1827
  goto ldv_46362;
  case 8UL: 
#line 1827
  put_unaligned_le64(0ULL, __gu_p);
#line 1827
  goto ldv_46362;
  default: 
#line 1827
  __bad_unaligned_access_size();
#line 1827
  goto ldv_46362;
  }
  ldv_46362: ;
#line 1829
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1837
  tl = (unsigned short *)(& reply->tag_list);
#line 1839
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1839
  if (tmp != 0) {
#line 1840
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1841
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1842
    put_ldev(mdev);
  } else {

  }
#line 1844
  tmp___0 = tl;
#line 1844
  tl = tl + 1;
#line 1844
  __gu_p = (void *)tmp___0;
#line 1844
  switch (2UL) {
  case 1UL: 
#line 1844
  *((u8 *)__gu_p) = 0U;
#line 1844
  goto ldv_46375;
  case 2UL: 
#line 1844
  put_unaligned_le16(0, __gu_p);
#line 1844
  goto ldv_46375;
  case 4UL: 
#line 1844
  put_unaligned_le32(0U, __gu_p);
#line 1844
  goto ldv_46375;
  case 8UL: 
#line 1844
  put_unaligned_le64(0ULL, __gu_p);
#line 1844
  goto ldv_46375;
  default: 
#line 1844
  __bad_unaligned_access_size();
#line 1844
  goto ldv_46375;
  }
  ldv_46375: ;
#line 1846
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1861
  tl = (unsigned short *)(& reply->tag_list);
#line 1863
  if (*((unsigned int *)mdev + 455UL) != 40960U) {
#line 1863
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1863
    rv = tmp != 0;
  } else {
#line 1863
    rv = 2;
  }
#line 1866
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1867
  tmp___0 = tl;
#line 1867
  tl = tl + 1;
#line 1867
  __gu_p = (void *)tmp___0;
#line 1867
  switch (2UL) {
  case 1UL: 
#line 1867
  *((u8 *)__gu_p) = 0U;
#line 1867
  goto ldv_46389;
  case 2UL: 
#line 1867
  put_unaligned_le16(0, __gu_p);
#line 1867
  goto ldv_46389;
  case 4UL: 
#line 1867
  put_unaligned_le32(0U, __gu_p);
#line 1867
  goto ldv_46389;
  case 8UL: 
#line 1867
  put_unaligned_le64(0ULL, __gu_p);
#line 1867
  goto ldv_46389;
  default: 
#line 1867
  __bad_unaligned_access_size();
#line 1867
  goto ldv_46389;
  }
  ldv_46389: ;
#line 1869
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1876
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1879
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1879
  if (tmp == 0) {
#line 1880
    reply->ret_code = 126;
#line 1881
    return (0);
  } else {

  }
#line 1884
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1885
  val.i = 0U;
#line 1885
  val.ldv_35070.conn = 18U;
#line 1885
  mask.i = 0U;
#line 1885
  mask.ldv_35070.conn = 31U;
#line 1885
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1886
  return (0);
}
}
#line 1890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 1893
  retcode = 101;
#line 1894
  skip_initial_sync = 0;
#line 1899
  memset((void *)(& args), 0, 4UL);
#line 1900
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1900
  if (tmp == 0) {
#line 1901
    reply->ret_code = 126;
#line 1902
    return (0);
  } else {

  }
#line 1905
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 1907
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1907
  if (tmp___0 == 0) {
#line 1908
    retcode = 138;
#line 1909
    goto out;
  } else {

  }
#line 1913
  if ((((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1915
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 1916
    skip_initial_sync = 1;
  } else
#line 1917
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1918
    retcode = 151;
#line 1919
    goto out_dec;
  } else {

  }
#line 1922
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1923
  drbd_uuid_new_current(mdev);
#line 1925
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1926
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1927
    if (err != 0) {
#line 1928
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 1929
      retcode = 118;
    } else {

    }
#line 1931
    if (skip_initial_sync != 0) {
#line 1932
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1933
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1934
      spin_lock_irq(& mdev->req_lock);
#line 1935
      __ns.i = mdev->state.i;
#line 1935
      __ns.ldv_35070.disk = 8U;
#line 1935
      __ns.ldv_35070.pdsk = 8U;
#line 1935
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1937
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1941
  drbd_md_sync(mdev);
  out_dec: 
#line 1943
  put_ldev(mdev);
  out: 
#line 1945
  mutex_unlock(& mdev->state_mutex);
#line 1947
  reply->ret_code = retcode;
#line 1948
  return (0);
}
}
#line 1951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1955
  if (nlp->drbd_minor >= minor_count) {
#line 1956
    return (0);
  } else {

  }
#line 1958
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1960
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1961
    disk = 0;
#line 1962
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1964
    spin_lock_irq(& drbd_pp_lock);
#line 1965
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1966
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1967
      disk = mdev->vdisk;
#line 1968
      mdev = 0;
    } else {

    }
#line 1970
    spin_unlock_irq(& drbd_pp_lock);
#line 1972
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 1975
      add_disk(disk);
    } else {
#line 1977
      drbd_free_mdev(mdev);
    }
#line 1979
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 1982
  return (mdev);
}
}
#line 1992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 1992
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1240}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2023 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2025
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2031
  reply_size = 34;
#line 2035
  tmp = ldv_try_module_get_2(& __this_module);
#line 2035
  if (tmp == 0) {
#line 2036
    printk("<3>drbd: try_module_get() failed!\n");
#line 2037
    return;
  } else {

  }
#line 2040
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2041
    retcode = 152;
#line 2042
    goto fail;
  } else {

  }
#line 2045
  mdev = ensure_mdev(nlp);
#line 2046
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2047
    retcode = 127;
#line 2048
    goto fail;
  } else {

  }
#line 2051
  if (nlp->packet_type > 26) {
#line 2052
    retcode = 137;
#line 2053
    goto fail;
  } else {

  }
#line 2056
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2059
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2060
    retcode = 137;
#line 2061
    goto fail;
  } else {

  }
#line 2064
  reply_size = cm->reply_body_size + reply_size;
#line 2067
  tmp___0 = kmalloc___4((size_t )reply_size, 208U);
#line 2067
  cn_reply = (struct cn_msg *)tmp___0;
#line 2068
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2069
    retcode = 122;
#line 2070
    goto fail;
  } else {

  }
#line 2072
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2074
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2076
  reply->minor = nlp->drbd_minor;
#line 2077
  reply->ret_code = 101;
#line 2080
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2082
  cn_reply->id = req->id;
#line 2083
  cn_reply->seq = req->seq;
#line 2084
  cn_reply->ack = req->ack + 1U;
#line 2085
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2086
  cn_reply->flags = 0U;
#line 2088
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2089
  if (rr != 0 && rr != -3) {
#line 2090
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2092
  kfree((void const   *)cn_reply);
#line 2093
  ldv_module_put_5(& __this_module);
#line 2094
  return;
  fail: 
#line 2096
  drbd_nl_send_reply(req, retcode);
#line 2097
  ldv_module_put_6(& __this_module);
#line 2098
  return;
}
}
#line 2100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2106
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2107
  len = (int )len < (int )l ? len : l;
#line 2108
  tmp = tl;
#line 2108
  tl = tl + 1;
#line 2108
  __gu_p = (void *)tmp;
#line 2108
  switch (2UL) {
  case 1UL: 
#line 2108
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2108
  goto ldv_46453;
  case 2UL: 
#line 2108
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2108
  goto ldv_46453;
  case 4UL: 
#line 2108
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2108
  goto ldv_46453;
  case 8UL: 
#line 2108
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2108
  goto ldv_46453;
  default: 
#line 2108
  __bad_unaligned_access_size();
#line 2108
  goto ldv_46453;
  }
  ldv_46453: 
#line 2109
  tmp___0 = tl;
#line 2109
  tl = tl + 1;
#line 2109
  __gu_p___0 = (void *)tmp___0;
#line 2109
  switch (2UL) {
  case 1UL: 
#line 2109
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2109
  goto ldv_46460;
  case 2UL: 
#line 2109
  put_unaligned_le16((int )len, __gu_p___0);
#line 2109
  goto ldv_46460;
  case 4UL: 
#line 2109
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2109
  goto ldv_46460;
  case 8UL: 
#line 2109
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2109
  goto ldv_46460;
  default: 
#line 2109
  __bad_unaligned_access_size();
#line 2109
  goto ldv_46460;
  }
  ldv_46460: 
#line 2110
  __len = (size_t )len;
#line 2110
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2111
  tl = tl + (unsigned long )len;
#line 2112
  if (nul_terminated != 0) {
#line 2113
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2114
  return (tl);
}
}
#line 2118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2120
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2120
  return (tmp);
}
}
#line 2124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2126
  tmp = strlen(str);
#line 2126
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2126
  return (tmp___0);
}
}
#line 2130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2132
  tmp = tl;
#line 2132
  tl = tl + 1;
#line 2132
  __gu_p = (void *)tmp;
#line 2132
  switch (2UL) {
  case 1UL: 
#line 2132
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2132
  goto ldv_46486;
  case 2UL: 
#line 2132
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2132
  goto ldv_46486;
  case 4UL: 
#line 2132
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2132
  goto ldv_46486;
  case 8UL: 
#line 2132
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2132
  goto ldv_46486;
  default: 
#line 2132
  __bad_unaligned_access_size();
#line 2132
  goto ldv_46486;
  }
  ldv_46486: ;
#line 2133
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2135
  tmp___0 = tl;
#line 2135
  tl = tl + 1;
#line 2135
  __gu_p___0 = (void *)tmp___0;
#line 2135
  switch (2UL) {
  case 1UL: 
#line 2135
  *((u8 *)__gu_p___0) = 4U;
#line 2135
  goto ldv_46494;
  case 2UL: 
#line 2135
  put_unaligned_le16(4, __gu_p___0);
#line 2135
  goto ldv_46494;
  case 4UL: 
#line 2135
  put_unaligned_le32(4U, __gu_p___0);
#line 2135
  goto ldv_46494;
  case 8UL: 
#line 2135
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2135
  goto ldv_46494;
  default: 
#line 2135
  __bad_unaligned_access_size();
#line 2135
  goto ldv_46494;
  }
  ldv_46494: 
#line 2136
  __gu_p___1 = (void *)tl;
#line 2136
  switch (4UL) {
  case 1UL: 
#line 2136
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2136
  goto ldv_46501;
  case 2UL: 
#line 2136
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2136
  goto ldv_46501;
  case 4UL: 
#line 2136
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2136
  goto ldv_46501;
  case 8UL: 
#line 2136
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2136
  goto ldv_46501;
  default: 
#line 2136
  __bad_unaligned_access_size();
#line 2136
  goto ldv_46501;
  }
  ldv_46501: 
#line 2137
  tl = tl + 4U;
#line 2138
  goto ldv_46506;
  case 16384U: 
#line 2140
  tmp___1 = tl;
#line 2140
  tl = tl + 1;
#line 2140
  __gu_p___2 = (void *)tmp___1;
#line 2140
  switch (2UL) {
  case 1UL: 
#line 2140
  *((u8 *)__gu_p___2) = 8U;
#line 2140
  goto ldv_46510;
  case 2UL: 
#line 2140
  put_unaligned_le16(8, __gu_p___2);
#line 2140
  goto ldv_46510;
  case 4UL: 
#line 2140
  put_unaligned_le32(8U, __gu_p___2);
#line 2140
  goto ldv_46510;
  case 8UL: 
#line 2140
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2140
  goto ldv_46510;
  default: 
#line 2140
  __bad_unaligned_access_size();
#line 2140
  goto ldv_46510;
  }
  ldv_46510: 
#line 2141
  __gu_p___3 = (void *)tl;
#line 2141
  switch (8UL) {
  case 1UL: 
#line 2141
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2141
  goto ldv_46517;
  case 2UL: 
#line 2141
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2141
  goto ldv_46517;
  case 4UL: 
#line 2141
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2141
  goto ldv_46517;
  case 8UL: 
#line 2141
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2141
  goto ldv_46517;
  default: 
#line 2141
  __bad_unaligned_access_size();
#line 2141
  goto ldv_46517;
  }
  ldv_46517: 
#line 2142
  tl = tl + 8U;
#line 2143
  goto ldv_46506;
  default: ;
  }
  ldv_46506: ;
#line 2148
  return (tl);
}
}
#line 2151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2157
  cn_reply = (struct cn_msg *)(& buffer);
#line 2158
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2160
  tl = (unsigned short *)(& reply->tag_list);
#line 2164
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2166
  tmp = tl;
#line 2166
  tl = tl + 1;
#line 2166
  __gu_p = (void *)tmp;
#line 2166
  switch (2UL) {
  case 1UL: 
#line 2166
  *((u8 *)__gu_p) = 0U;
#line 2166
  goto ldv_46533;
  case 2UL: 
#line 2166
  put_unaligned_le16(0, __gu_p);
#line 2166
  goto ldv_46533;
  case 4UL: 
#line 2166
  put_unaligned_le32(0U, __gu_p);
#line 2166
  goto ldv_46533;
  case 8UL: 
#line 2166
  put_unaligned_le64(0ULL, __gu_p);
#line 2166
  goto ldv_46533;
  default: 
#line 2166
  __bad_unaligned_access_size();
#line 2166
  goto ldv_46533;
  }
  ldv_46533: 
#line 2168
  cn_reply->id.idx = 8U;
#line 2169
  cn_reply->id.val = 1U;
#line 2171
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2171
  cn_reply->seq = (__u32 )tmp___0;
#line 2172
  cn_reply->ack = 0U;
#line 2173
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2175
  cn_reply->flags = 0U;
#line 2177
  reply->packet_type = 17;
#line 2178
  reply->minor = mdev_to_minor(mdev);
#line 2179
  reply->ret_code = 101;
#line 2181
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2182
  return;
}
}
#line 2184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2190
  cn_reply = (struct cn_msg *)(& buffer);
#line 2191
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2193
  tl = (unsigned short *)(& reply->tag_list);
#line 2197
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2198
  tmp = tl;
#line 2198
  tl = tl + 1;
#line 2198
  __gu_p = (void *)tmp;
#line 2198
  switch (2UL) {
  case 1UL: 
#line 2198
  *((u8 *)__gu_p) = 0U;
#line 2198
  goto ldv_46548;
  case 2UL: 
#line 2198
  put_unaligned_le16(0, __gu_p);
#line 2198
  goto ldv_46548;
  case 4UL: 
#line 2198
  put_unaligned_le32(0U, __gu_p);
#line 2198
  goto ldv_46548;
  case 8UL: 
#line 2198
  put_unaligned_le64(0ULL, __gu_p);
#line 2198
  goto ldv_46548;
  default: 
#line 2198
  __bad_unaligned_access_size();
#line 2198
  goto ldv_46548;
  }
  ldv_46548: 
#line 2200
  cn_reply->id.idx = 8U;
#line 2201
  cn_reply->id.val = 1U;
#line 2203
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2203
  cn_reply->seq = (__u32 )tmp___0;
#line 2204
  cn_reply->ack = 0U;
#line 2205
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2207
  cn_reply->flags = 0U;
#line 2209
  reply->packet_type = 20;
#line 2210
  reply->minor = mdev_to_minor(mdev);
#line 2211
  reply->ret_code = 101;
#line 2213
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2214
  return;
}
}
#line 2216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2227
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2228
    return;
  } else {

  }
#line 2229
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2230
    return;
  } else {

  }
#line 2238
  tmp = kmalloc___4(33026UL, 16U);
#line 2238
  cn_reply = (struct cn_msg *)tmp;
#line 2245
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2246
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2248
    return;
  } else {

  }
#line 2251
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2252
  tl = (unsigned short *)(& reply->tag_list);
#line 2254
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2255
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2256
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2257
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2258
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2260
  tmp___0 = tl;
#line 2260
  tl = tl + 1;
#line 2260
  __gu_p = (void *)tmp___0;
#line 2260
  switch (2UL) {
  case 1UL: 
#line 2260
  *((u8 *)__gu_p) = 50U;
#line 2260
  goto ldv_46568;
  case 2UL: 
#line 2260
  put_unaligned_le16(49202, __gu_p);
#line 2260
  goto ldv_46568;
  case 4UL: 
#line 2260
  put_unaligned_le32(49202U, __gu_p);
#line 2260
  goto ldv_46568;
  case 8UL: 
#line 2260
  put_unaligned_le64(49202ULL, __gu_p);
#line 2260
  goto ldv_46568;
  default: 
#line 2260
  __bad_unaligned_access_size();
#line 2260
  goto ldv_46568;
  }
  ldv_46568: 
#line 2261
  tmp___1 = tl;
#line 2261
  tl = tl + 1;
#line 2261
  __gu_p___0 = (void *)tmp___1;
#line 2261
  switch (2UL) {
  case 1UL: 
#line 2261
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2261
  goto ldv_46575;
  case 2UL: 
#line 2261
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2261
  goto ldv_46575;
  case 4UL: 
#line 2261
  put_unaligned_le32(e->size, __gu_p___0);
#line 2261
  goto ldv_46575;
  case 8UL: 
#line 2261
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2261
  goto ldv_46575;
  default: 
#line 2261
  __bad_unaligned_access_size();
#line 2261
  goto ldv_46575;
  }
  ldv_46575: 
#line 2263
  len = e->size;
#line 2264
  page = e->pages;
#line 2265
  goto ldv_46590;
  ldv_46589: 
#line 2266
  tmp___2 = kmap_atomic(page, KM_USER0);
#line 2266
  d = tmp___2;
#line 2267
  __min1 = len;
#line 2267
  __min2 = 4096U;
#line 2267
  l = __min1 < __min2 ? __min1 : __min2;
#line 2268
  __len = (size_t )l;
#line 2268
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2269
  kunmap_atomic_notypecheck(d, KM_USER0);
#line 2270
  tl = tl + (unsigned long )l;
#line 2271
  len = len - l;
#line 2265
  page = page_chain_next(page);
  ldv_46590: ;
#line 2265
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2265
    tmp___3 = page_chain_next(page);
#line 2265
    __builtin_prefetch((void const   *)tmp___3);
#line 2265
    if (1 != 0) {
#line 2266
      goto ldv_46589;
    } else {
#line 2268
      goto ldv_46591;
    }
  } else {

  }
  ldv_46591: 
#line 2273
  tmp___4 = tl;
#line 2273
  tl = tl + 1;
#line 2273
  __gu_p___1 = (void *)tmp___4;
#line 2273
  switch (2UL) {
  case 1UL: 
#line 2273
  *((u8 *)__gu_p___1) = 0U;
#line 2273
  goto ldv_46594;
  case 2UL: 
#line 2273
  put_unaligned_le16(0, __gu_p___1);
#line 2273
  goto ldv_46594;
  case 4UL: 
#line 2273
  put_unaligned_le32(0U, __gu_p___1);
#line 2273
  goto ldv_46594;
  case 8UL: 
#line 2273
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2273
  goto ldv_46594;
  default: 
#line 2273
  __bad_unaligned_access_size();
#line 2273
  goto ldv_46594;
  }
  ldv_46594: 
#line 2275
  cn_reply->id.idx = 8U;
#line 2276
  cn_reply->id.val = 1U;
#line 2278
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2278
  cn_reply->seq = (__u32 )tmp___5;
#line 2279
  cn_reply->ack = 0U;
#line 2280
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2282
  cn_reply->flags = 0U;
#line 2284
  reply->packet_type = 24;
#line 2285
  reply->minor = mdev_to_minor(mdev);
#line 2286
  reply->ret_code = 101;
#line 2288
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2289
  kfree((void const   *)cn_reply);
#line 2290
  return;
}
}
#line 2292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2298
  cn_reply = (struct cn_msg *)(& buffer);
#line 2299
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2301
  tl = (unsigned short *)(& reply->tag_list);
#line 2306
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2306
  if (tmp == 0) {
#line 2307
    return;
  } else {

  }
#line 2308
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2309
  put_ldev(mdev);
#line 2311
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2312
  tmp___0 = tl;
#line 2312
  tl = tl + 1;
#line 2312
  __gu_p = (void *)tmp___0;
#line 2312
  switch (2UL) {
  case 1UL: 
#line 2312
  *((u8 *)__gu_p) = 0U;
#line 2312
  goto ldv_46610;
  case 2UL: 
#line 2312
  put_unaligned_le16(0, __gu_p);
#line 2312
  goto ldv_46610;
  case 4UL: 
#line 2312
  put_unaligned_le32(0U, __gu_p);
#line 2312
  goto ldv_46610;
  case 8UL: 
#line 2312
  put_unaligned_le64(0ULL, __gu_p);
#line 2312
  goto ldv_46610;
  default: 
#line 2312
  __bad_unaligned_access_size();
#line 2312
  goto ldv_46610;
  }
  ldv_46610: 
#line 2314
  cn_reply->id.idx = 8U;
#line 2315
  cn_reply->id.val = 1U;
#line 2317
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2317
  cn_reply->seq = (__u32 )tmp___1;
#line 2318
  cn_reply->ack = 0U;
#line 2319
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2321
  cn_reply->flags = 0U;
#line 2323
  reply->packet_type = 23;
#line 2324
  reply->minor = mdev_to_minor(mdev);
#line 2325
  reply->ret_code = 101;
#line 2327
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2328
  return;
}
}
#line 2330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2333
  try = 10;
#line 2335
  cn_id_drbd.val = 1U;
  ldv_46622: 
#line 2337
  cn_id_drbd.idx = cn_idx;
#line 2338
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2339
  if (err == 0) {
#line 2340
    goto ldv_46621;
  } else {

  }
#line 2341
  cn_idx = cn_idx + 6977U;
#line 2342
  tmp = try;
#line 2342
  try = try - 1;
#line 2342
  if (tmp != 0) {
#line 2343
    goto ldv_46622;
  } else {

  }
  ldv_46621: ;
#line 2344
  if (err != 0) {
#line 2345
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2346
    return (err);
  } else {

  }
#line 2349
  return (0);
}
}
#line 2352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2356
  cn_id_drbd.idx = cn_idx;
#line 2357
  cn_id_drbd.val = 1U;
#line 2359
  cn_del_callback(& cn_id_drbd);
#line 2360
  return;
}
}
#line 2362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2365
  cn_reply = (struct cn_msg *)(& buffer);
#line 2366
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2370
  cn_reply->id = req->id;
#line 2372
  cn_reply->seq = req->seq;
#line 2373
  cn_reply->ack = req->ack + 1U;
#line 2374
  cn_reply->len = 12U;
#line 2375
  cn_reply->flags = 0U;
#line 2377
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2378
  reply->ret_code = ret_code;
#line 2380
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2381
  if (rr != 0 && rr != -3) {
#line 2382
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2383
  return;
}
}
#line 2393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2398
  ldv_module_put(ldv_func_arg1);
#line 2399
  return;
}
}
#line 2401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2406
  ldv_module_put(ldv_func_arg1);
#line 2407
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
