/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 58 "include/asm/alternative.h"
struct module;
#line 74 "include/linux/log2.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 93 "include/linux/kernel.h"
struct completion;
#line 94
struct pt_regs;
#line 182
struct pid;
#line 486
struct task_struct;
#line 487
struct mm_struct;
#line 212 "include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 84
struct page;
#line 54 "include/asm/page.h"
struct __anonstruct_pgd_t_6 {
   pgdval_t pgd ;
};
#line 54 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_6 pgd_t;
#line 55 "include/asm/page.h"
struct __anonstruct_pgprot_t_7 {
   pgprotval_t pgprot ;
};
#line 55 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_7 pgprot_t;
#line 146 "include/asm/page.h"
struct __anonstruct_ldv_1883_11 {
   unsigned int a ;
   unsigned int b ;
};
#line 146 "include/asm/page.h"
struct __anonstruct_ldv_1898_12 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 146 "include/asm/page.h"
union __anonunion_ldv_1899_10 {
   struct __anonstruct_ldv_1883_11 ldv_1883 ;
   struct __anonstruct_ldv_1898_12 ldv_1898 ;
};
#line 146 "include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1899_10 ldv_1899 ;
};
#line 92 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_13 {
   unsigned long bits[64U] ;
};
#line 92 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_13 cpumask_t;
#line 459
struct thread_struct;
#line 326 "include/asm/paravirt.h"
struct raw_spinlock;
#line 21 "include/asm-generic/page.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 200 "include/asm/msr.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 280 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "include/asm/processor.h"
struct __anonstruct_ldv_4276_15 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "include/asm/processor.h"
struct __anonstruct_ldv_4282_16 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "include/asm/processor.h"
union __anonunion_ldv_4283_14 {
   struct __anonstruct_ldv_4276_15 ldv_4276 ;
   struct __anonstruct_ldv_4282_16 ldv_4282 ;
};
#line 298 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4283_14 ldv_4283 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[24U] ;
};
#line 327 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 348 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
#line 362
struct kmem_cache;
#line 366 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
#line 601 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_17 {
   unsigned long seg ;
};
#line 601 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_17 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 262 "include/linux/list.h"
struct hlist_node;
#line 262 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 478 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 556 "include/linux/list.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_18 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_18 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 29 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 155 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 191 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_19 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_19 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_20 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_20 rwlock_t;
#line 21 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_21 {
   int counter ;
};
#line 21 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_21 atomic_t;
#line 198 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_22 {
   long counter ;
};
#line 198 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_22 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131
struct thread_info;
#line 131 "include/asm-generic/atomic.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct timespec;
#line 9
struct compat_timespec;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct __anonstruct_ldv_5070_24 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct __anonstruct_futex_25 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct __anonstruct_nanosleep_26 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
union __anonunion_ldv_5084_23 {
   struct __anonstruct_ldv_5070_24 ldv_5070 ;
   struct __anonstruct_futex_25 futex ;
   struct __anonstruct_nanosleep_26 nanosleep ;
};
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5084_23 ldv_5084 ;
};
#line 45 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_28 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_28 nodemask_t;
#line 550 "include/linux/mmzone.h"
struct rw_semaphore;
#line 552 "include/linux/mmzone.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 660
struct file;
#line 104 "include/linux/pm.h"
struct device;
#line 105 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 113 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 114 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 227 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 284
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 294 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 21 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_75 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 21 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_75 mm_context_t;
#line 992 "include/linux/mmzone.h"
struct vm_area_struct;
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 189
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 235
struct kobject;
#line 236 "include/linux/workqueue.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 74 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 120 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49
struct sysfs_dirent;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 104 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 110 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 117 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 134 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 228 "include/linux/kobject.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 84 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 55 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 354 "include/linux/rculist.h"
struct nameidata;
#line 355
struct path;
#line 356
struct vfsmount;
#line 357 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_81 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_81 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 366 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 14 "include/linux/path.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 19 "include/linux/namei.h"
union __anonunion_intent_82 {
   struct open_intent open ;
};
#line 19 "include/linux/namei.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
   union __anonunion_intent_82 intent ;
};
#line 112 "include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 181
struct prio_tree_node;
#line 181 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   unsigned int level ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 508 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 50 "include/linux/semaphore.h"
struct export_operations;
#line 52
struct iovec;
#line 53
struct kiocb;
#line 54
struct pipe_inode_info;
#line 55
struct poll_table_struct;
#line 56
struct kstatfs;
#line 315 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 46 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 114 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 147 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 176 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 197
struct quota_format_type;
#line 198 "include/linux/quota.h"
union __anonunion_u_84 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 198 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_84 u ;
};
#line 245 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 268 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 284 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 300 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 315 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 365
struct address_space;
#line 366
struct writeback_control;
#line 442 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 495
struct backing_dev_info;
#line 496 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 517
struct hd_struct;
#line 517
struct gendisk;
#line 517 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 581
struct inode_operations;
#line 581
struct file_operations;
#line 581
struct file_lock;
#line 581
struct cdev;
#line 581 "include/linux/fs.h"
union __anonunion_ldv_9750_85 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 581
struct dnotify_struct;
#line 581 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_9750_85 ldv_9750 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 747 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 755 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 778 "include/linux/fs.h"
union __anonunion_f_u_86 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 778 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_86 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 895
struct files_struct;
#line 895 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 896 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 901 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_88 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_87 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_88 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_87 fl_u ;
};
#line 994 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1027
struct file_system_type;
#line 1027
struct super_operations;
#line 1027
struct xattr_handler;
#line 1027
struct mtd_info;
#line 1027 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1208 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1249 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
};
#line 1275
struct seq_file;
#line 1289 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1472 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1834
struct bio;
#line 6 "include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 23 "include/asm/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "include/asm/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36 "include/linux/cdev.h"
struct tty_operations {
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*read_proc)(char * , char ** , off_t  , int  , int * , void * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
};
#line 210 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 210 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   int refcount ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 254 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 67 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 76
struct signal_struct;
#line 77 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 194 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 32 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 192 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 12 "include/asm/local.h"
struct __anonstruct_local_t_96 {
   atomic_long_t a ;
};
#line 12 "include/asm/local.h"
typedef struct __anonstruct_local_t_96 local_t;
#line 155 "include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230
struct module_param_attrs;
#line 230
struct module_sect_attrs;
#line 230
struct module_notes_attrs;
#line 230 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[4096U] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 452
struct device_driver;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 206 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 228 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 294 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 314 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 395 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 562
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 570
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 47 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_13466_99 {
   u16 inuse ;
   u16 objects ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13467_98 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13466_99 ldv_13466 ;
};
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_13472_101 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13476_100 {
   struct __anonstruct_ldv_13472_101 ldv_13472 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13480_102 {
   unsigned long index ;
   void *freelist ;
};
#line 25 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_13467_98 ldv_13467 ;
   union __anonunion_ldv_13476_100 ldv_13476 ;
   union __anonunion_ldv_13480_102 ldv_13480 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 97 "include/linux/mm_types.h"
struct __anonstruct_vm_set_104 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 97 "include/linux/mm_types.h"
union __anonunion_shared_103 {
   struct __anonstruct_vm_set_104 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 97
struct anon_vma;
#line 97
struct vm_operations_struct;
#line 97
struct mempolicy;
#line 97 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_103 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 160
struct kioctx;
#line 160 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   int core_waiters ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[40U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 102 "include/linux/ipc.h"
struct sem_undo;
#line 116 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_105 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_105 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 168 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 180 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_107 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_108 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_109 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_110 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_111 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_112 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_106 {
   int _pad[28U] ;
   struct __anonstruct__kill_107 _kill ;
   struct __anonstruct__timer_108 _timer ;
   struct __anonstruct__rt_109 _rt ;
   struct __anonstruct__sigchld_110 _sigchld ;
   struct __anonstruct__sigfault_111 _sigfault ;
   struct __anonstruct__sigpoll_112 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_106 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 291
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
   struct path altroot ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_115 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_115 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 93 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 138 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 166 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 392 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 34 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 137 "include/linux/sched.h"
struct cfs_rq;
#line 138
struct task_group;
#line 333
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_116 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_116 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 392 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 418 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 426 "include/linux/sched.h"
union __anonunion_ldv_14670_117 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 426 "include/linux/sched.h"
union __anonunion_ldv_14675_118 {
   pid_t session ;
   pid_t __session ;
};
#line 426
struct taskstats;
#line 426
struct tty_audit_buf;
#line 426 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_14670_117 ldv_14670 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_14675_118 ldv_14675 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 575 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 617
struct reclaim_state;
#line 618 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 641 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 678
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 685 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 745
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 759 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 826
struct io_context;
#line 827 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 869
struct audit_context;
#line 871
struct rq;
#line 872 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 923 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 928 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 994
struct rt_rq;
#line 994 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1010
struct linux_binfmt;
#line 1010
struct css_set;
#line 1010
struct compat_robust_list_head;
#line 1010 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
};
#line 163 "include/linux/ioport.h"
struct klist_node;
#line 164 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 70 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 11 "include/asm/device.h"
struct driver_private;
#line 12
struct class;
#line 13
struct bus_type;
#line 14
struct bus_type_private;
#line 15 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 179
struct class_attribute;
#line 179 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 213 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 242 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 263 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 324 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 333
struct dma_coherent_mem;
#line 333 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 508
struct usb_device;
#line 509
struct usb_driver;
#line 510
struct wusb_dev;
#line 511
struct ep_device;
#line 512 "include/linux/device.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 71 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 85
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 92 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char is_active : 1 ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_binding : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 185 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 212 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 278 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 290
struct mon_bus;
#line 290 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 329
struct usb_tt;
#line 330 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char discon_suspended : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char auto_pm : 1 ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   unsigned char autoresume_disabled : 1 ;
   unsigned char skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 795 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 925 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 937 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 1093 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1126
struct urb;
#line 1127 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1143 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 1701
struct usb_serial;
#line 1701 "include/linux/usb.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 110 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 110 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 157 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*shutdown)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   void (*close)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
enum spcp8x5_type {
    SPCP825_007_TYPE = 0,
    SPCP825_008_TYPE = 1,
    SPCP825_PHILIP_TYPE = 2,
    SPCP825_INTERMATIC_TYPE = 3,
    SPCP835_TYPE = 4
} ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct ringbuf {
   unsigned int buf_size ;
   char *buf_buf ;
   char *buf_get ;
   char *buf_put ;
};
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct spcp8x5_private {
   spinlock_t lock ;
   struct ringbuf *buf ;
   int write_urb_in_use ;
   enum spcp8x5_type type ;
   wait_queue_head_t delta_msr_wait ;
   u8 line_control ;
   u8 line_status ;
   u8 termios_initialized ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 301 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 188 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 51 "include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 23 "include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (8UL) {
  case 2UL: 
#line 25
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_3890;
  case 4UL: 
#line 25
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_3890;
  case 8UL: 
#line 25
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_3890;
  default: 
#line 25
  __bad_pda_field();
  }
  ldv_3890: ;
#line 25
  return (ret__);
}
}
#line 23 "include/asm/cmpxchg_64.h"
__inline static unsigned long __xchg(unsigned long x , void volatile   *ptr , int size ) 
{ 


  {
#line 26
  switch (size) {
  case 1: 
#line 28
  __asm__  volatile   ("xchgb %b0,%1": "=q" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 32
  goto ldv_3905;
  case 2: 
#line 34
  __asm__  volatile   ("xchgw %w0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 38
  goto ldv_3905;
  case 4: 
#line 40
  __asm__  volatile   ("xchgl %k0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 44
  goto ldv_3905;
  case 8: 
#line 46
  __asm__  volatile   ("xchgq %0,%1": "=r" (x): "m" (*((long volatile   *)ptr)), "0" (x): "memory");
#line 50
  goto ldv_3905;
  }
  ldv_3905: ;
#line 52
  return (x);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 78
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 78
  return (tmp);
}
}
#line 93 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 33 "include/linux/spinlock_api_smp.h"
extern unsigned long _spin_lock_irqsave(spinlock_t * ) ;
#line 54
extern void _spin_unlock_irqrestore(spinlock_t * , unsigned long  ) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 91 "include/linux/wait.h"
__inline static void init_waitqueue_entry(wait_queue_t *q , struct task_struct *p ) 
{ 


  {
#line 93
  q->flags = 0U;
#line 94
  q->private = (void *)p;
#line 95
  q->func = & default_wake_function;
#line 96
  return;
}
}
#line 120
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 122
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 144
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 433
extern void interruptible_sleep_on(wait_queue_head_t * ) ;
#line 100 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 190 "include/linux/workqueue.h"
extern int schedule_work(struct work_struct * ) ;
#line 204 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 211 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 226
  tmp___2 = __kmalloc(size, flags);
#line 226
  return (tmp___2);
}
}
#line 274 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 276
  tmp = kmalloc(size, flags | 32768U);
#line 276
  return (tmp);
}
}
#line 306 "include/linux/tty.h"
extern struct ktermios tty_std_termios ;
#line 349
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 350
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 358
extern int tty_termios_hw_change(struct ktermios * , struct ktermios * ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct * , size_t  ) ;
#line 6
extern int tty_insert_flip_string_flags(struct tty_struct * , unsigned char const   * ,
                                        char const   * , size_t  ) ;
#line 11 "include/linux/tty_flip.h"
__inline static int tty_insert_flip_char(struct tty_struct *tty , unsigned char ch ,
                                         char flag ) 
{ 
  struct tty_buffer *tb ;
  int tmp ;
  int tmp___0 ;

  {
#line 14
  tb = tty->buf.tail;
#line 15
  if ((unsigned long )tb != (unsigned long )((struct tty_buffer *)0) && tb->used < tb->size) {
#line 16
    *(tb->flag_buf_ptr + (unsigned long )tb->used) = (unsigned char )flag;
#line 17
    tmp = tb->used;
#line 17
    tb->used = tb->used + 1;
#line 17
    *(tb->char_buf_ptr + (unsigned long )tmp) = (char )ch;
#line 18
    return (1);
  } else {

  }
#line 20
  tmp___0 = tty_insert_flip_string_flags(tty, (unsigned char const   *)(& ch), (char const   *)(& flag),
                                         1UL);
#line 20
  return (tmp___0);
}
}
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 328 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2001 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2003
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2003
  return (tmp);
}
}
#line 2021 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2023
  tmp = test_tsk_thread_flag(p, 2);
#line 2023
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2023
  return ((int )tmp___0);
}
}
#line 419 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev ) 
{ 


  {
#line 421
  return (dev->driver_data);
}
}
#line 424 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 426
  dev->driver_data = data;
#line 427
  return;
}
}
#line 1075 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1077 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1079
  tmp = usb_register_driver(driver, & __this_module, "spcp8x5");
#line 1079
  return (tmp);
}
}
#line 1081
extern void usb_deregister(struct usb_driver * ) ;
#line 1454
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1455
extern int usb_unlink_urb(struct urb * ) ;
#line 1513
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1531
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1646 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1649
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 100 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 102
  tmp = dev_get_drvdata(& port->dev);
#line 102
  return (tmp);
}
}
#line 105 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 108
  dev_set_drvdata(& port->dev, data);
#line 109
  return;
}
}
#line 248
extern int usb_serial_register(struct usb_serial_driver * ) ;
#line 249
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
#line 252
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
#line 254
extern void usb_serial_disconnect(struct usb_interface * ) ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int debug  ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_device_id id_table[6U]  = {      {3U, 1137U, 2078U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 516U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 561U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 565U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 513U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static struct ringbuf *alloc_ringbuf(unsigned int size ) 
{ 
  struct ringbuf *pb ;
  void *tmp ;
  void *tmp___0 ;
  char *tmp___1 ;

  {
#line 179
  if (size == 0U) {
#line 180
    return (0);
  } else {

  }
#line 182
  tmp = kmalloc(32UL, 208U);
#line 182
  pb = (struct ringbuf *)tmp;
#line 183
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 184
    return (0);
  } else {

  }
#line 186
  tmp___0 = kmalloc((size_t )size, 208U);
#line 186
  pb->buf_buf = (char *)tmp___0;
#line 187
  if ((unsigned long )pb->buf_buf == (unsigned long )((char *)0)) {
#line 188
    kfree((void const   *)pb);
#line 189
    return (0);
  } else {

  }
#line 192
  pb->buf_size = size;
#line 193
  tmp___1 = pb->buf_buf;
#line 193
  pb->buf_put = tmp___1;
#line 193
  pb->buf_get = tmp___1;
#line 195
  return (pb);
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void free_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 201
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 202
    kfree((void const   *)pb->buf_buf);
#line 203
    kfree((void const   *)pb);
  } else {

  }
#line 205
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void clear_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 210
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 211
    pb->buf_get = pb->buf_put;
  } else {

  }
#line 212
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_data(struct ringbuf *pb ) 
{ 


  {
#line 217
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 218
    return (0U);
  } else {

  }
#line 219
  return ((unsigned int )(((long )(pb->buf_put + (unsigned long )pb->buf_size) - (long )pb->buf_get) % (long )pb->buf_size));
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_space(struct ringbuf *pb ) 
{ 


  {
#line 225
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 226
    return (0U);
  } else {

  }
#line 227
  return ((unsigned int )((((long )(pb->buf_get + (unsigned long )pb->buf_size) - (long )pb->buf_put) + -1L) % (long )pb->buf_size));
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int put_ringbuf(struct ringbuf *pb , char const   *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 236
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 237
    return (0U);
  } else {

  }
#line 239
  len = ringbuf_avail_space(pb);
#line 240
  if (count > len) {
#line 241
    count = len;
  } else {

  }
#line 243
  if (count == 0U) {
#line 244
    return (0U);
  } else {

  }
#line 246
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_put);
#line 247
  if (count > len) {
#line 248
    __len = (size_t )len;
#line 248
    __ret = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len);
#line 249
    __len___0 = (size_t )(count - len);
#line 249
    __ret___0 = __builtin_memcpy((void *)pb->buf_buf, (void const   *)buf + (unsigned long )len,
                                 __len___0);
#line 250
    pb->buf_put = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 252
    __len___1 = (size_t )count;
#line 252
    __ret___1 = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len___1);
#line 253
    if (count < len) {
#line 254
      pb->buf_put = pb->buf_put + (unsigned long )count;
    } else {
#line 256
      pb->buf_put = pb->buf_buf;
    }
  }
#line 258
  return (count);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int get_ringbuf(struct ringbuf *pb , char *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 267
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0) || (unsigned long )buf == (unsigned long )((char *)0)) {
#line 268
    return (0U);
  } else {

  }
#line 270
  len = ringbuf_avail_data(pb);
#line 271
  if (count > len) {
#line 272
    count = len;
  } else {

  }
#line 274
  if (count == 0U) {
#line 275
    return (0U);
  } else {

  }
#line 277
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_get);
#line 278
  if (count > len) {
#line 279
    __len = (size_t )len;
#line 279
    __ret = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len);
#line 280
    __len___0 = (size_t )(count - len);
#line 280
    __ret___0 = __builtin_memcpy((void *)buf + (unsigned long )len, (void const   *)pb->buf_buf,
                                 __len___0);
#line 281
    pb->buf_get = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 283
    __len___1 = (size_t )count;
#line 283
    __ret___1 = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len___1);
#line 284
    if (count < len) {
#line 285
      pb->buf_get = pb->buf_get + (unsigned long )count;
    } else {
#line 287
      pb->buf_get = pb->buf_buf;
    }
  }
#line 290
  return (count);
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_driver spcp8x5_driver  = 
#line 293
     {"spcp8x5", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& id_table),
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                 0}, 0}, 1U, (unsigned char)0, (unsigned char)0};
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_startup(struct usb_serial *serial ) 
{ 
  struct spcp8x5_private *priv ;
  int i ;
  enum spcp8x5_type type ;
  u16 product ;
  void *tmp___1 ;
  struct lock_class_key __key ;
  void *tmp___2 ;

  {
#line 320
  type = SPCP825_007_TYPE;
#line 321
  product = (serial->dev)->descriptor.idProduct;
#line 323
  if ((unsigned int )product == 513U) {
#line 324
    type = SPCP825_007_TYPE;
  } else
#line 325
  if ((unsigned int )product == 561U) {
#line 326
    type = SPCP835_TYPE;
  } else
#line 327
  if ((unsigned int )product == 565U) {
#line 328
    type = SPCP825_008_TYPE;
  } else
#line 329
  if ((unsigned int )product == 516U) {
#line 330
    type = SPCP825_INTERMATIC_TYPE;
  } else
#line 331
  if ((unsigned int )product == 1137U && (unsigned int )(serial->dev)->descriptor.idVendor == 2078U) {
#line 333
    type = SPCP825_PHILIP_TYPE;
  } else {

  }
#line 336
  i = 0;
#line 336
  goto ldv_17749;
  ldv_17748: 
#line 337
  tmp___1 = kzalloc(152UL, 208U);
#line 337
  priv = (struct spcp8x5_private *)tmp___1;
#line 338
  if ((unsigned long )priv == (unsigned long )((struct spcp8x5_private *)0)) {
#line 339
    goto cleanup;
  } else {

  }
#line 341
  __spin_lock_init(& priv->lock, "&priv->lock", & __key);
#line 342
  priv->buf = alloc_ringbuf(1024U);
#line 343
  if ((unsigned long )priv->buf == (unsigned long )((struct ringbuf *)0)) {
#line 344
    goto cleanup2;
  } else {

  }
#line 346
  init_waitqueue_head(& priv->delta_msr_wait);
#line 347
  priv->type = type;
#line 348
  usb_set_serial_port_data(serial->port[i], (void *)priv);
#line 336
  i = i + 1;
  ldv_17749: ;
#line 336
  if ((int )serial->num_ports > i) {
#line 337
    goto ldv_17748;
  } else {

  }

#line 352
  return (0);
  cleanup2: 
#line 355
  kfree((void const   *)priv);
  cleanup: 
#line 357
  i = i - 1;
#line 357
  goto ldv_17752;
  ldv_17751: 
#line 358
  tmp___2 = usb_get_serial_port_data(serial->port[i]);
#line 358
  priv = (struct spcp8x5_private *)tmp___2;
#line 359
  free_ringbuf(priv->buf);
#line 360
  kfree((void const   *)priv);
#line 361
  usb_set_serial_port_data(serial->port[i], 0);
#line 357
  i = i - 1;
  ldv_17752: ;
#line 357
  if (i >= 0) {
#line 358
    goto ldv_17751;
  } else {

  }

#line 363
  return (-12);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
#line 372
  i = 0;
#line 372
  goto ldv_17760;
  ldv_17759: 
#line 373
  tmp = usb_get_serial_port_data(serial->port[i]);
#line 373
  priv = (struct spcp8x5_private *)tmp;
#line 374
  if ((unsigned long )priv != (unsigned long )((struct spcp8x5_private *)0)) {
#line 375
    free_ringbuf(priv->buf);
#line 376
    kfree((void const   *)priv);
#line 377
    usb_set_serial_port_data(serial->port[i], 0);
  } else {

  }
#line 372
  i = i + 1;
  ldv_17760: ;
#line 372
  if ((int )serial->num_ports > i) {
#line 373
    goto ldv_17759;
  } else {

  }

#line 377
  return;
}
}
#line 384 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_set_ctrlLine(struct usb_device *dev , u8 value , enum spcp8x5_type type ) 
{ 
  int retval ;
  u8 mcr ;
  unsigned int tmp ;

  {
#line 388
  mcr = 0U;
#line 390
  if ((unsigned int )type == 0U) {
#line 391
    return (-1);
  } else {

  }
#line 393
  mcr = value;
#line 394
  tmp = __create_pipe(dev, 0U);
#line 394
  retval = usb_control_msg(dev, tmp | 2147483648U, 35, 64, (int )mcr, 4, 0, 0, 100);
#line 399
  return (retval);
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_get_msr(struct usb_device *dev , u8 *status , enum spcp8x5_type type ) 
{ 
  u8 *status_buffer ;
  int ret ;
  void *tmp ;
  unsigned int tmp___0 ;

  {
#line 412
  if ((unsigned int )type == 0U) {
#line 413
    return (-1);
  } else {

  }
#line 414
  if ((unsigned long )status == (unsigned long )((u8 *)0)) {
#line 415
    return (-22);
  } else {

  }
#line 417
  tmp = kmalloc(1UL, 208U);
#line 417
  status_buffer = (u8 *)tmp;
#line 418
  if ((unsigned long )status_buffer == (unsigned long )((u8 *)0)) {
#line 419
    return (-12);
  } else {

  }
#line 420
  *status_buffer = *status;
#line 422
  tmp___0 = __create_pipe(dev, 0U);
#line 422
  ret = usb_control_msg(dev, tmp___0 | 2147483776U, 34, 192, 0, 6, (void *)status_buffer,
                        1, 100);
#line 430
  *status = *status_buffer;
#line 431
  kfree((void const   *)status_buffer);
#line 433
  return (ret);
}
}
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_workMode(struct usb_device *dev , u16 value , u16 index ,
                                 enum spcp8x5_type type ) 
{ 
  int ret ;
  unsigned int tmp ;

  {
#line 445
  if ((unsigned int )type == 0U) {
#line 446
    return;
  } else {

  }
#line 448
  tmp = __create_pipe(dev, 0U);
#line 448
  ret = usb_control_msg(dev, tmp | 2147483648U, 36, 64, (int )value, (int )index,
                        0, 0, 100);
#line 455
  return;
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_close(struct tty_struct *tty , struct usb_serial_port *port ,
                          struct file *filp ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int c_cflag ;
  int bps ;
  long timeout ;
  wait_queue_t wait ;
  int result ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  unsigned int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  speed_t tmp___6 ;
  int _max1 ;
  int _max2 ;
  struct task_struct *tmp___7 ;

  {
#line 462
  tmp = usb_get_serial_port_data(port);
#line 462
  priv = (struct spcp8x5_private *)tmp;
#line 470
  if (debug != 0) {
#line 470
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_close", (int )port->number);
  } else {

  }
#line 473
  flags = _spin_lock_irqsave(& priv->lock);
#line 474
  timeout = 7500L;
#line 475
  tmp___0 = get_current();
#line 475
  init_waitqueue_entry(& wait, tmp___0);
#line 476
  add_wait_queue(& tty->write_wait, & wait);
  ldv_17802: 
#line 478
  tmp___1 = get_current();
#line 478
  __xchg(1UL, (void volatile   *)(& tmp___1->state), 8);
#line 479
  tmp___2 = ringbuf_avail_data(priv->buf);
#line 479
  if (tmp___2 == 0U || timeout == 0L) {
#line 481
    goto ldv_17801;
  } else {
#line 479
    tmp___3 = get_current();
#line 479
    tmp___4 = signal_pending(tmp___3);
#line 479
    if (tmp___4 != 0) {
#line 481
      goto ldv_17801;
    } else {

    }
  }
#line 482
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 483
  timeout = schedule_timeout(timeout);
#line 484
  flags = _spin_lock_irqsave(& priv->lock);
#line 485
  goto ldv_17802;
  ldv_17801: 
#line 486
  tmp___5 = get_current();
#line 486
  __xchg(0UL, (void volatile   *)(& tmp___5->state), 8);
#line 487
  remove_wait_queue(& tty->write_wait, & wait);
#line 490
  clear_ringbuf(priv->buf);
#line 491
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 498
  tmp___6 = tty_get_baud_rate(tty);
#line 498
  bps = (int )tmp___6;
#line 499
  if (bps > 1200) {
#line 500
    _max1 = 640000 / bps;
#line 500
    _max2 = 25;
#line 500
    timeout = (long )(_max1 > _max2 ? _max1 : _max2);
  } else {
#line 502
    timeout = 500L;
  }
#line 503
  tmp___7 = get_current();
#line 503
  __xchg(1UL, (void volatile   *)(& tmp___7->state), 8);
#line 504
  schedule_timeout(timeout);
#line 507
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 508
    c_cflag = (tty->termios)->c_cflag;
#line 509
    if ((c_cflag & 1024U) != 0U) {
#line 510
      flags = _spin_lock_irqsave(& priv->lock);
#line 511
      priv->line_control = 0U;
#line 512
      _spin_unlock_irqrestore(& priv->lock, flags);
#line 513
      spcp8x5_set_ctrlLine((port->serial)->dev, 0, priv->type);
    } else {

    }
  } else {

  }
#line 518
  if ((unsigned long )port->write_urb != (unsigned long )((struct urb *)0)) {
#line 519
    result = usb_unlink_urb(port->write_urb);
  } else {

  }
#line 524
  result = usb_unlink_urb(port->read_urb);
#line 528
  return;
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned short uartdata ;
  unsigned char buf[2U] ;
  int baud ;
  int i ;
  u8 control ;
  int tmp___0 ;
  speed_t tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 534
  serial = port->serial;
#line 535
  tmp = usb_get_serial_port_data(port);
#line 535
  priv = (struct spcp8x5_private *)tmp;
#line 537
  cflag = (tty->termios)->c_cflag;
#line 538
  old_cflag = old_termios->c_cflag;
#line 540
  buf[0] = 0U;
#line 540
  buf[1] = 0U;
#line 546
  flags = _spin_lock_irqsave(& priv->lock);
#line 547
  if ((unsigned int )priv->termios_initialized == 0U) {
#line 548
    *(tty->termios) = tty_std_termios;
#line 549
    (tty->termios)->c_cflag = 7346U;
#line 550
    (tty->termios)->c_ispeed = 115200U;
#line 551
    (tty->termios)->c_ospeed = 115200U;
#line 552
    priv->termios_initialized = 1U;
  } else {

  }
#line 554
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 557
  tmp___0 = tty_termios_hw_change(tty->termios, old_termios);
#line 557
  if (tmp___0 == 0) {
#line 558
    return;
  } else {

  }
#line 561
  flags = _spin_lock_irqsave(& priv->lock);
#line 562
  control = priv->line_control;
#line 563
  if ((old_cflag & 4111U) == 0U) {
#line 564
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
#line 565
    if ((int )old_cflag >= 0) {
#line 566
      priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
    } else {

    }
  } else {

  }
#line 568
  if ((int )priv->line_control != (int )control) {
#line 569
    control = priv->line_control;
#line 570
    _spin_unlock_irqrestore(& priv->lock, flags);
#line 571
    spcp8x5_set_ctrlLine(serial->dev, (int )control, priv->type);
  } else {
#line 573
    _spin_unlock_irqrestore(& priv->lock, flags);
  }
#line 577
  tmp___1 = tty_get_baud_rate(tty);
#line 577
  baud = (int )tmp___1;
#line 578
  switch (baud) {
  case 300: 
#line 579
  buf[0] = 0U;
#line 579
  goto ldv_17824;
  case 600: 
#line 580
  buf[0] = 1U;
#line 580
  goto ldv_17824;
  case 1200: 
#line 581
  buf[0] = 2U;
#line 581
  goto ldv_17824;
  case 2400: 
#line 582
  buf[0] = 3U;
#line 582
  goto ldv_17824;
  case 4800: 
#line 583
  buf[0] = 4U;
#line 583
  goto ldv_17824;
  case 9600: 
#line 584
  buf[0] = 5U;
#line 584
  goto ldv_17824;
  case 19200: 
#line 585
  buf[0] = 7U;
#line 585
  goto ldv_17824;
  case 38400: 
#line 586
  buf[0] = 9U;
#line 586
  goto ldv_17824;
  case 57600: 
#line 587
  buf[0] = 10U;
#line 587
  goto ldv_17824;
  case 115200: 
#line 588
  buf[0] = 11U;
#line 588
  goto ldv_17824;
  case 230400: 
#line 589
  buf[0] = 12U;
#line 589
  goto ldv_17824;
  case 460800: 
#line 590
  buf[0] = 13U;
#line 590
  goto ldv_17824;
  case 921600: 
#line 591
  buf[0] = 14U;
#line 591
  goto ldv_17824;
  case 3000000: 
#line 594
  buf[0] = 17U;
#line 594
  goto ldv_17824;
  case 0: ;
  case 1000000: 
#line 598
  buf[0] = 11U;
#line 598
  goto ldv_17824;
  default: 
#line 600
  printk("<3>spcp8x5: spcp825 driver does not support the baudrate requested, using default of 9600.\n");
  }
  ldv_17824: ;
#line 605
  if ((cflag & 48U) != 0U) {
#line 606
    switch (cflag & 48U) {
    case 0U: 
#line 608
    buf[1] = buf[1];
#line 609
    goto ldv_17842;
    case 16U: 
#line 611
    buf[1] = (unsigned int )buf[1] | 1U;
#line 612
    goto ldv_17842;
    case 32U: 
#line 614
    buf[1] = (unsigned int )buf[1] | 2U;
#line 615
    goto ldv_17842;
    default: ;
    case 48U: 
#line 618
    buf[1] = (unsigned int )buf[1] | 3U;
#line 619
    goto ldv_17842;
    }
    ldv_17842: ;
  } else {

  }
#line 624
  buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 64U) != 0U ? 4 : 0));
#line 628
  if ((cflag & 256U) != 0U) {
#line 629
    buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 512U) != 0U ? 16 : 48));
  } else {
#line 632
    buf[1] = buf[1];
  }
#line 634
  uartdata = (unsigned short )((int )((short )buf[0]) | (int )((short )((int )buf[1] << 8)));
#line 636
  tmp___2 = __create_pipe(serial->dev, 0U);
#line 636
  i = usb_control_msg(serial->dev, tmp___2 | 2147483648U, 33, 64, (int )uartdata,
                      0, 0, 0, 100);
#line 639
  if (i < 0) {
#line 640
    printk("<3>spcp8x5: Set UART format %#x failed (error = %d)\n", (int )uartdata,
           i);
  } else {

  }
#line 641
  if (debug != 0) {
#line 641
    printk("<7>%s: 0x21:0x40:0:0  %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           i);
  } else {

  }
#line 643
  if ((int )cflag < 0) {
#line 645
    spcp8x5_set_workMode(serial->dev, 10, 0, priv->type);
  } else {

  }
#line 648
  return;
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  struct ktermios tmp_termios ;
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int ret ;
  unsigned long flags ;
  u8 status ;
  unsigned int tmp___0 ;

  {
#line 657
  serial = port->serial;
#line 658
  tmp = usb_get_serial_port_data(port);
#line 658
  priv = (struct spcp8x5_private *)tmp;
#line 661
  status = 48U;
#line 664
  if (debug != 0) {
#line 664
    printk("<7>%s: %s -  port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open", (int )port->number);
  } else {

  }
#line 666
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 667
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 669
  tmp___0 = __create_pipe(serial->dev, 0U);
#line 669
  ret = usb_control_msg(serial->dev, tmp___0 | 2147483648U, 9, 0, 1, 0, 0, 0, 100);
#line 672
  if (ret != 0) {
#line 673
    return (ret);
  } else {

  }
#line 675
  flags = _spin_lock_irqsave(& priv->lock);
#line 676
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && ((tty->termios)->c_cflag & 4111U) != 0U) {
#line 677
    priv->line_control = 3U;
  } else {
#line 679
    priv->line_control = 0U;
  }
#line 680
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 682
  spcp8x5_set_ctrlLine(serial->dev, (int )priv->line_control, priv->type);
#line 685
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 686
    spcp8x5_set_termios(tty, port, & tmp_termios);
  } else {

  }
#line 688
  spcp8x5_get_msr(serial->dev, & status, priv->type);
#line 691
  flags = _spin_lock_irqsave(& priv->lock);
#line 692
  priv->line_status = (unsigned int )status & 240U;
#line 693
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 697
  if (debug != 0) {
#line 697
    printk("<7>%s: %s - submitting read urb\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open");
  } else {

  }
#line 698
  (port->read_urb)->dev = serial->dev;
#line 699
  ret = usb_submit_urb(port->read_urb, 208U);
#line 700
  if (ret != 0) {
#line 701
    spcp8x5_close(tty, port, 0);
#line 702
    return (-71);
  } else {

  }
#line 704
  return (0);
}
}
#line 711 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_read_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  struct tty_struct *tty ;
  unsigned char *data ;
  unsigned long flags ;
  int i ;
  int result ;
  u8 status ;
  char tty_flag ;

  {
#line 713
  port = (struct usb_serial_port *)urb->context;
#line 714
  tmp = usb_get_serial_port_data(port);
#line 714
  priv = (struct spcp8x5_private *)tmp;
#line 716
  data = (unsigned char *)urb->transfer_buffer;
#line 720
  status = 0U;
#line 727
  if (urb->status != 0) {
#line 728
    if (port->port.count == 0) {
#line 729
      return;
    } else {

    }
#line 730
    if (urb->status == -71) {
#line 733
      urb->status = 0;
#line 734
      urb->dev = (port->serial)->dev;
#line 735
      result = usb_submit_urb(urb, 32U);
#line 740
      return;
    } else {

    }
#line 743
    return;
  } else {

  }
#line 747
  tty_flag = 0;
#line 749
  flags = _spin_lock_irqsave(& priv->lock);
#line 750
  status = priv->line_status;
#line 751
  priv->line_status = (unsigned int )priv->line_status & 139U;
#line 752
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 754
  __wake_up(& priv->delta_msr_wait, 1U, 1, 0);
#line 758
  if (((int )status & 4) != 0) {
#line 759
    tty_flag = 1;
  } else
#line 760
  if (((int )status & 32) != 0) {
#line 761
    tty_flag = 3;
  } else
#line 762
  if (((int )status & 16) != 0) {
#line 763
    tty_flag = 2;
  } else {

  }
#line 766
  tty = port->port.tty;
#line 767
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && urb->actual_length != 0) {
#line 768
    tty_buffer_request_room(tty, (size_t )(urb->actual_length + 1));
#line 770
    if (((int )status & 64) != 0) {
#line 771
      tty_insert_flip_char(tty, 0, 4);
    } else {

    }
#line 772
    i = 0;
#line 772
    goto ldv_17876;
    ldv_17875: 
#line 773
    tty_insert_flip_char(tty, (int )*(data + (unsigned long )i), (int )tty_flag);
#line 772
    i = i + 1;
    ldv_17876: ;
#line 772
    if (urb->actual_length > i) {
#line 773
      goto ldv_17875;
    } else {

    }
#line 774
    tty_flip_buffer_push(tty);
  } else {

  }
#line 778
  if (port->port.count != 0) {
#line 779
    urb->dev = (port->serial)->dev;
#line 780
    result = usb_submit_urb(urb, 32U);
  } else {

  }
#line 786
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_send(struct usb_serial_port *port ) 
{ 
  int count ;
  int result ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int tmp___2 ;

  {
#line 793
  tmp = usb_get_serial_port_data(port);
#line 793
  priv = (struct spcp8x5_private *)tmp;
#line 796
  flags = _spin_lock_irqsave(& priv->lock);
#line 798
  if (priv->write_urb_in_use != 0) {
#line 800
    _spin_unlock_irqrestore(& priv->lock, flags);
#line 801
    return;
  } else {

  }
#line 805
  memset((port->write_urb)->transfer_buffer, 0, (size_t )port->bulk_out_size);
#line 806
  tmp___2 = get_ringbuf(priv->buf, (char *)(port->write_urb)->transfer_buffer, (unsigned int )port->bulk_out_size);
#line 806
  count = (int )tmp___2;
#line 809
  if (count == 0) {
#line 810
    _spin_unlock_irqrestore(& priv->lock, flags);
#line 811
    return;
  } else {

  }
#line 815
  priv->write_urb_in_use = 1;
#line 817
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 819
  (port->write_urb)->transfer_buffer_length = count;
#line 820
  (port->write_urb)->dev = (port->serial)->dev;
#line 822
  result = usb_submit_urb(port->write_urb, 32U);
#line 823
  if (result != 0) {
#line 826
    priv->write_urb_in_use = 0;
  } else {

  }
#line 831
  schedule_work(& port->work);
#line 832
  return;
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_write_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int result ;

  {
#line 839
  port = (struct usb_serial_port *)urb->context;
#line 840
  tmp = usb_get_serial_port_data(port);
#line 840
  priv = (struct spcp8x5_private *)tmp;
#line 843
  switch (urb->status) {
  case 0: ;
#line 846
  goto ldv_17895;
  case -104: ;
  case -2: ;
  case -108: 
#line 853
  priv->write_urb_in_use = 0;
#line 854
  return;
  default: ;
#line 857
  if (debug != 0) {
#line 857
    printk("<7>%s: %s - Overflow in write\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback");
  } else {

  }
#line 858
  if (debug != 0) {
#line 858
    printk("<7>%s: %s - nonzero write bulk status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback", urb->status);
  } else {

  }
#line 860
  (port->write_urb)->transfer_buffer_length = 1;
#line 861
  (port->write_urb)->dev = (port->serial)->dev;
#line 862
  result = usb_submit_urb(port->write_urb, 32U);
#line 863
  if (result != 0) {

  } else {
#line 867
    return;
  }
  }
  ldv_17895: 
#line 870
  priv->write_urb_in_use = 0;
#line 873
  spcp8x5_send(port);
#line 874
  return;
}
}
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                         int count ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int tmp___2 ;

  {
#line 880
  tmp = usb_get_serial_port_data(port);
#line 880
  priv = (struct spcp8x5_private *)tmp;
#line 885
  if (count == 0) {
#line 886
    return (count);
  } else {

  }
#line 888
  flags = _spin_lock_irqsave(& priv->lock);
#line 889
  tmp___2 = put_ringbuf(priv->buf, (char const   *)buf, (unsigned int )count);
#line 889
  count = (int )tmp___2;
#line 890
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 892
  spcp8x5_send(port);
#line 894
  return (count);
}
}
#line 897 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_wait_modem_info(struct usb_serial_port *port , unsigned int arg ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int prevstatus ;
  unsigned int status ;
  unsigned int changed ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 900
  tmp = usb_get_serial_port_data(port);
#line 900
  priv = (struct spcp8x5_private *)tmp;
#line 906
  flags = _spin_lock_irqsave(& priv->lock);
#line 907
  prevstatus = (unsigned int )priv->line_status;
#line 908
  _spin_unlock_irqrestore(& priv->lock, flags);
  ldv_17921: 
#line 912
  interruptible_sleep_on(& priv->delta_msr_wait);
#line 915
  tmp___0 = get_current();
#line 915
  tmp___1 = signal_pending(tmp___0);
#line 915
  if (tmp___1 != 0) {
#line 916
    return (-512);
  } else {

  }
#line 918
  flags = _spin_lock_irqsave(& priv->lock);
#line 919
  status = (unsigned int )priv->line_status;
#line 920
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 922
  changed = prevstatus ^ status;
#line 924
  if (((((arg & 128U) != 0U && (changed & 64U) != 0U) || ((arg & 256U) != 0U && (changed & 32U) != 0U)) || ((arg & 64U) != 0U && (changed & 128U) != 0U)) || ((arg & 32U) != 0U && (changed & 16U) != 0U)) {
#line 928
    return (0);
  } else {

  }
#line 930
  prevstatus = status;
#line 931
  goto ldv_17921;
#line 933
  return (0);
}
}
#line 936 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  int tmp ;

  {
#line 939
  port = (struct usb_serial_port *)tty->driver_data;
#line 940
  if (debug != 0) {
#line 940
    printk("<7>%s: %s (%d) cmd = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number, cmd);
  } else {

  }
#line 942
  switch (cmd) {
  case 21596U: ;
#line 944
  if (debug != 0) {
#line 944
    printk("<7>%s: %s (%d) TIOCMIWAIT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number);
  } else {

  }
#line 945
  tmp = spcp8x5_wait_modem_info(port, (unsigned int )arg);
#line 945
  return (tmp);
  default: ;
#line 948
  if (debug != 0) {
#line 948
    printk("<7>%s: %s not supported = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", cmd);
  } else {

  }
#line 949
  goto ldv_17932;
  }
  ldv_17932: ;
#line 952
  return (-515);
}
}
#line 955 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  u8 control ;
  int tmp___0 ;

  {
#line 958
  port = (struct usb_serial_port *)tty->driver_data;
#line 959
  tmp = usb_get_serial_port_data(port);
#line 959
  priv = (struct spcp8x5_private *)tmp;
#line 963
  flags = _spin_lock_irqsave(& priv->lock);
#line 964
  if ((set & 4U) != 0U) {
#line 965
    priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
  } else {

  }
#line 966
  if ((set & 2U) != 0U) {
#line 967
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
  } else {

  }
#line 968
  if ((clear & 4U) != 0U) {
#line 969
    priv->line_control = (unsigned int )priv->line_control & 253U;
  } else {

  }
#line 970
  if ((clear & 2U) != 0U) {
#line 971
    priv->line_control = (unsigned int )priv->line_control & 254U;
  } else {

  }
#line 972
  control = priv->line_control;
#line 973
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 975
  tmp___0 = spcp8x5_set_ctrlLine((port->serial)->dev, (int )control, priv->type);
#line 975
  return (tmp___0);
}
}
#line 978 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int mcr ;
  unsigned int status ;
  unsigned int result ;

  {
#line 980
  port = (struct usb_serial_port *)tty->driver_data;
#line 981
  tmp = usb_get_serial_port_data(port);
#line 981
  priv = (struct spcp8x5_private *)tmp;
#line 987
  flags = _spin_lock_irqsave(& priv->lock);
#line 988
  mcr = (unsigned int )priv->line_control;
#line 989
  status = (unsigned int )priv->line_status;
#line 990
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 992
  result = (unsigned int )(((((((int )mcr & 1 ? 2 : 0) | ((mcr & 2U) != 0U ? 4 : 0)) | ((status & 16U) != 0U ? 32 : 0)) | ((status & 32U) != 0U ? 256 : 0)) | ((status & 64U) != 0U ? 128 : 0)) | ((status & 128U) != 0U ? 64 : 0));
#line 999
  return ((int )result);
}
}
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int room ;
  unsigned long flags ;
  unsigned int tmp___0 ;

  {
#line 1005
  port = (struct usb_serial_port *)tty->driver_data;
#line 1006
  tmp = usb_get_serial_port_data(port);
#line 1006
  priv = (struct spcp8x5_private *)tmp;
#line 1007
  room = 0;
#line 1010
  flags = _spin_lock_irqsave(& priv->lock);
#line 1011
  tmp___0 = ringbuf_avail_space(priv->buf);
#line 1011
  room = (int )tmp___0;
#line 1012
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 1014
  return (room);
}
}
#line 1018 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int chars ;
  unsigned long flags ;
  unsigned int tmp___0 ;

  {
#line 1020
  port = (struct usb_serial_port *)tty->driver_data;
#line 1021
  tmp = usb_get_serial_port_data(port);
#line 1021
  priv = (struct spcp8x5_private *)tmp;
#line 1022
  chars = 0;
#line 1025
  flags = _spin_lock_irqsave(& priv->lock);
#line 1026
  tmp___0 = ringbuf_avail_data(priv->buf);
#line 1026
  chars = (int )tmp___0;
#line 1027
  _spin_unlock_irqrestore(& priv->lock, flags);
#line 1029
  return (chars);
}
}
#line 1033 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_serial_driver spcp8x5_device  = 
#line 1033
     {0, (struct usb_device_id  const  *)(& id_table), 1, {0, 0}, {"SPCP8x5", 0, & __this_module,
                                                                 0, 0, 0, 0, 0, 0,
                                                                 0, 0, 0}, 0, {{{0U},
                                                                                0U,
                                                                                0U,
                                                                                0,
                                                                                {0,
                                                                                 0,
                                                                                 0,
                                                                                 0}},
                                                                               {0,
                                                                                0}},
    0, & spcp8x5_startup, 0, & spcp8x5_shutdown, 0, 0, 0, 0, & spcp8x5_open, & spcp8x5_close,
    & spcp8x5_write, & spcp8x5_write_room, & spcp8x5_ioctl, & spcp8x5_set_termios,
    0, & spcp8x5_chars_in_buffer, 0, 0, & spcp8x5_tiocmget, & spcp8x5_tiocmset, 0,
    0, & spcp8x5_read_bulk_callback, & spcp8x5_write_bulk_callback};
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_init(void) 
{ 
  int retval ;

  {
#line 1058
  retval = usb_serial_register(& spcp8x5_device);
#line 1059
  if (retval != 0) {
#line 1060
    goto failed_usb_serial_register;
  } else {

  }
#line 1061
  retval = usb_register(& spcp8x5_driver);
#line 1062
  if (retval != 0) {
#line 1063
    goto failed_usb_register;
  } else {

  }
#line 1064
  printk("<6>spcp8x5: SPCP8x5 USB to serial adaptor driver v0.04\n");
#line 1065
  return (0);
  failed_usb_register: 
#line 1067
  usb_serial_deregister(& spcp8x5_device);
  failed_usb_serial_register: ;
#line 1069
  return (retval);
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_exit(void) 
{ 


  {
#line 1074
  usb_deregister(& spcp8x5_driver);
#line 1075
  usb_serial_deregister(& spcp8x5_device);
#line 1076
  return;
}
}
#line 1104
void ldv_check_final_state(void) ;
#line 1107
extern void ldv_check_return_value(int  ) ;
#line 1113
void ldv_initialize(void) ;
#line 1116
extern void ldv_handler_precall(void) ;
#line 1119
extern int nondet_int(void) ;
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1125 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/spcp8x5.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_spcp8x5_open_14_p2 ;
  int res_spcp8x5_open_14 ;
  struct file *var_spcp8x5_close_12_p2 ;
  unsigned char const   *var_spcp8x5_write_18_p2 ;
  int var_spcp8x5_write_18_p3 ;
  struct ktermios *var_spcp8x5_set_termios_13_p2 ;
  struct file *var_group3 ;
  unsigned int var_spcp8x5_ioctl_20_p2 ;
  unsigned long var_spcp8x5_ioctl_20_p3 ;
  unsigned int var_spcp8x5_tiocmset_21_p2 ;
  unsigned int var_spcp8x5_tiocmset_21_p3 ;
  struct urb *var_group4 ;
  struct usb_serial *var_group5 ;
  int ldv_s_spcp8x5_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2263
  ldv_s_spcp8x5_device_usb_serial_driver = 0;
#line 2170
  LDV_IN_INTERRUPT = 1;
#line 2179
  ldv_initialize();
#line 2260
  ldv_handler_precall();
#line 2261
  tmp = spcp8x5_init();
#line 2261
  if (tmp != 0) {
#line 2262
    goto ldv_final;
  } else {

  }
#line 2267
  goto ldv_18048;
  ldv_18047: 
#line 2271
  tmp___0 = nondet_int();
#line 2271
  switch (tmp___0) {
  case 0: ;
#line 2276
  if (ldv_s_spcp8x5_device_usb_serial_driver == 0) {
#line 2356
    ldv_handler_precall();
#line 2357
    res_spcp8x5_open_14 = spcp8x5_open(var_group1, var_group2, var_spcp8x5_open_14_p2);
#line 2358
    ldv_check_return_value(res_spcp8x5_open_14);
#line 2359
    if (res_spcp8x5_open_14 != 0) {
#line 2360
      goto ldv_module_exit;
    } else {

    }
#line 2361
    ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
  } else {

  }
#line 2367
  goto ldv_18033;
  case 1: ;
#line 2371
  if (ldv_s_spcp8x5_device_usb_serial_driver == 1) {
#line 2451
    ldv_handler_precall();
#line 2452
    spcp8x5_close(var_group1, var_group2, var_spcp8x5_close_12_p2);
#line 2453
    ldv_s_spcp8x5_device_usb_serial_driver = 0;
  } else {

  }
#line 2459
  goto ldv_18033;
  case 2: 
#line 2543
  ldv_handler_precall();
#line 2544
  spcp8x5_write(var_group1, var_group2, var_spcp8x5_write_18_p2, var_spcp8x5_write_18_p3);
#line 2551
  goto ldv_18033;
  case 3: 
#line 2635
  ldv_handler_precall();
#line 2636
  spcp8x5_set_termios(var_group1, var_group2, var_spcp8x5_set_termios_13_p2);
#line 2643
  goto ldv_18033;
  case 4: 
#line 2727
  ldv_handler_precall();
#line 2728
  spcp8x5_ioctl(var_group1, var_group3, var_spcp8x5_ioctl_20_p2, var_spcp8x5_ioctl_20_p3);
#line 2735
  goto ldv_18033;
  case 5: 
#line 2819
  ldv_handler_precall();
#line 2820
  spcp8x5_tiocmget(var_group1, var_group3);
#line 2827
  goto ldv_18033;
  case 6: 
#line 2911
  ldv_handler_precall();
#line 2912
  spcp8x5_tiocmset(var_group1, var_group3, var_spcp8x5_tiocmset_21_p2, var_spcp8x5_tiocmset_21_p3);
#line 2919
  goto ldv_18033;
  case 7: 
#line 3003
  ldv_handler_precall();
#line 3004
  spcp8x5_write_room(var_group1);
#line 3011
  goto ldv_18033;
  case 8: 
#line 3095
  ldv_handler_precall();
#line 3096
  spcp8x5_read_bulk_callback(var_group4);
#line 3103
  goto ldv_18033;
  case 9: 
#line 3187
  ldv_handler_precall();
#line 3188
  spcp8x5_write_bulk_callback(var_group4);
#line 3195
  goto ldv_18033;
  case 10: 
#line 3279
  ldv_handler_precall();
#line 3280
  spcp8x5_chars_in_buffer(var_group1);
#line 3287
  goto ldv_18033;
  case 11: 
#line 3371
  ldv_handler_precall();
#line 3372
  spcp8x5_startup(var_group5);
#line 3379
  goto ldv_18033;
  case 12: 
#line 3463
  ldv_handler_precall();
#line 3464
  spcp8x5_shutdown(var_group5);
#line 3471
  goto ldv_18033;
  default: ;
#line 3472
  goto ldv_18033;
  }
  ldv_18033: ;
  ldv_18048: 
#line 2267
  tmp___1 = nondet_int();
#line 2267
  if (tmp___1 != 0 || ldv_s_spcp8x5_device_usb_serial_driver != 0) {
#line 2269
    goto ldv_18047;
  } else {

  }

  ldv_module_exit: 
#line 3559
  ldv_handler_precall();
#line 3560
  spcp8x5_exit();
  ldv_final: 
#line 3563
  ldv_check_final_state();
#line 3566
  return;
}
}
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 12
  return;
}
}
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 17
  return;
}
}
