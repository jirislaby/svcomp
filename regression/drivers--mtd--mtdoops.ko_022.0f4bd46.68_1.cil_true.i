/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 88 "include/linux/types.h"
typedef unsigned char u_char;
#line 91 "include/linux/types.h"
typedef unsigned long u_long;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 111 "include/linux/types.h"
typedef __u8 uint8_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 116 "include/linux/types.h"
typedef __u64 uint64_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 188 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 190 "include/linux/types.h"
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
#line 190 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_7 atomic_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 115 "include/linux/kernel.h"
struct completion;
#line 116
struct pt_regs;
#line 210
struct pid;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 99 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
union __anonunion____missing_field_name_10 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_10 __annonCompField4 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_13 pgd_t;
#line 290
struct file;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct thread_struct;
#line 52
struct cpumask;
#line 321
struct arch_spinlock;
#line 13 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 91
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_27 {
   u64 rip ;
   u64 rdp ;
};
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_28 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_26 {
   struct __anonstruct____missing_field_name_27 __annonCompField11 ;
   struct __anonstruct____missing_field_name_28 __annonCompField12 ;
};
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_29 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_26 __annonCompField13 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_29 __annonCompField14 ;
} __attribute__((__aligned__(16))) ;
#line 338 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64] ;
};
#line 363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 426
struct perf_event;
#line 428
struct ds_context;
#line 428 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4] ;
   unsigned long debugreg6 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_31 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_31 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_33 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_34 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_35 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_36 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_32 {
   struct __anonstruct____missing_field_name_33 __annonCompField16 ;
   struct __anonstruct_futex_34 futex ;
   struct __anonstruct_nanosleep_35 nanosleep ;
   struct __anonstruct_poll_36 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_32 __annonCompField17 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 9 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 35 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 39 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[1 + 3 * 4] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
   unsigned long contending_point[4] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 179 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 20 "include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 64 "include/linux/spinlock_types.h"
struct __anonstruct____missing_field_name_39 {
   u8 __padding[(unsigned int )(& ((struct raw_spinlock *)0)->dep_map)] ;
   struct lockdep_map dep_map ;
};
#line 64 "include/linux/spinlock_types.h"
union __anonunion____missing_field_name_38 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_39 __annonCompField18 ;
};
#line 64 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion____missing_field_name_38 __annonCompField19 ;
};
#line 64 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 14 "include/linux/time.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int flags , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_42 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_42 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 50 "include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 167 "include/linux/ioport.h"
struct device;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 10 "include/linux/timer.h"
struct tvec_base;
#line 12 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 41 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 43 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 43 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 197 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
   int (*runtime_suspend)(struct device *dev ) ;
   int (*runtime_resume)(struct device *dev ) ;
   int (*runtime_idle)(struct device *dev ) ;
};
#line 352
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 385
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 404
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 411 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int ignore_children : 1 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_109 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_109 mm_context_t;
#line 10 "include/linux/gfp.h"
struct vm_area_struct;
#line 45 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 20 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 42
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_119 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_119 __annonCompField20 ;
};
#line 56 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 62 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 49 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
#line 8 "include/asm-generic/module.h"
struct mod_arch_specific {

};
#line 35 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 49 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 59
struct module_param_attrs;
#line 59 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 227
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 234
struct module_sect_attrs;
#line 234
struct module_notes_attrs;
#line 234
struct ftrace_event_call;
#line 234 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
};
#line 665
struct device_driver;
#line 23 "include/linux/console.h"
struct tty_struct;
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 30 "include/linux/mm_types.h"
typedef unsigned long mm_counter_t;
#line 134 "include/linux/mm_types.h"
struct __anonstruct_vm_set_129 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 134 "include/linux/mm_types.h"
union __anonunion_shared_128 {
   struct __anonstruct_vm_set_129 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 134
struct anon_vma;
#line 134
struct vm_operations_struct;
#line 134
struct mempolicy;
#line 134 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_128 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 191 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 196 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 202
struct linux_binfmt;
#line 202
struct mmu_notifier_mm;
#line 202 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 120 "include/linux/sem.h"
struct sem_undo_list;
#line 133 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 139 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_130 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_130 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_132 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_133 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_134 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_135 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_136 {
   void *_addr ;
   short _addr_lsb ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_137 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_131 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_132 _kill ;
   struct __anonstruct__timer_133 _timer ;
   struct __anonstruct__rt_134 _rt ;
   struct __anonstruct__sigchld_135 _sigchld ;
   struct __anonstruct__sigfault_136 _sigfault ;
   struct __anonstruct__sigpoll_137 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_131 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_140 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_140 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 89 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 27 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 28
struct hrtimer_cpu_base;
#line 44
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 103 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 141 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 171 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 18 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 939 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 76
struct signal_struct;
#line 77
struct cred;
#line 79
struct key_type;
#line 81
struct keyring_list;
#line 124
struct key_user;
#line 124 "include/linux/key.h"
union __anonunion____missing_field_name_195 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 124 "include/linux/key.h"
union __anonunion_type_data_196 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
#line 124 "include/linux/key.h"
union __anonunion_payload_197 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 124 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_195 __annonCompField26 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_196 type_data ;
   union __anonunion_payload_197 payload ;
};
#line 18 "include/linux/selinux.h"
struct audit_context;
#line 31 "include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
#line 83 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 116 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 98 "include/linux/sched.h"
struct futex_pi_state;
#line 99
struct robust_list_head;
#line 100
struct bio;
#line 101
struct fs_struct;
#line 102
struct bts_context;
#line 103
struct perf_event_context;
#line 152
struct cfs_rq;
#line 153
struct task_group;
#line 353
struct user_namespace;
#line 31 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 477 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 484 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 492 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 510 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 546 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 559
struct taskstats;
#line 559
struct tty_audit_buf;
#line 559 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 700 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct delayed_work work ;
   atomic_long_t locked_vm ;
};
#line 749
struct backing_dev_info;
#line 750
struct reclaim_state;
#line 753 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 769 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 814
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 891 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int cpu_power ;
   unsigned long cpumask[0] ;
};
#line 918
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 936 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   unsigned int smt_gain ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0] ;
};
#line 1046
struct io_context;
#line 1057
struct pipe_inode_info;
#line 1060
struct rq;
#line 1069 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int flags ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sd_flag , int flags ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_fork)(struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   unsigned int (*get_rr_interval)(struct rq *rq , struct task_struct *task ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 1122 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1136 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1198
struct rt_rq;
#line 1198 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1216
struct files_struct;
#line 1216
struct irqaction;
#line 1216
struct css_set;
#line 1216
struct compat_robust_list_head;
#line 1216
struct ftrace_ret_stack;
#line 1216
struct mem_cgroup;
#line 1216 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1216 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 10 "include/linux/irqreturn.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 83 "include/linux/irq.h"
struct proc_dir_entry;
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 95 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 19 "include/linux/klist.h"
struct klist_node;
#line 39 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_map_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 30 "include/linux/device.h"
struct device_private;
#line 32
struct driver_private;
#line 33
struct class;
#line 34
struct class_private;
#line 35
struct bus_type;
#line 36
struct bus_type_private;
#line 38 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 51
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 157 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 189
struct class_attribute;
#line 189 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   char *(*devnode)(struct device *dev , mode_t *mode ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 211
struct device_type;
#line 252 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 299 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   char *(*devnode)(struct device *dev , mode_t *mode ) ;
   void (*release)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 310 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 370 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 379
struct dma_coherent_mem;
#line 379 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device *dev ) ;
};
#line 85 "include/mtd/mtd-abi.h"
struct otp_info {
   __u32 start ;
   __u32 length ;
   __u32 locked ;
};
#line 125 "include/mtd/mtd-abi.h"
struct nand_oobfree {
   __u32 offset ;
   __u32 length ;
};
#line 135 "include/mtd/mtd-abi.h"
struct nand_ecclayout {
   __u32 eccbytes ;
   __u32 eccpos[64] ;
   __u32 oobavail ;
   struct nand_oobfree oobfree[8] ;
};
#line 150 "include/mtd/mtd-abi.h"
struct mtd_ecc_stats {
   __u32 corrected ;
   __u32 failed ;
   __u32 badblocks ;
   __u32 bbtblocks ;
};
#line 36 "include/linux/mtd/mtd.h"
struct mtd_info;
#line 36 "include/linux/mtd/mtd.h"
struct erase_info {
   struct mtd_info *mtd ;
   uint64_t addr ;
   uint64_t len ;
   uint64_t fail_addr ;
   u_long time ;
   u_long retries ;
   unsigned int dev ;
   unsigned int cell ;
   void (*callback)(struct erase_info *self ) ;
   u_long priv ;
   u_char state ;
   struct erase_info *next ;
};
#line 51 "include/linux/mtd/mtd.h"
struct mtd_erase_region_info {
   uint64_t offset ;
   uint32_t erasesize ;
   uint32_t numblocks ;
   unsigned long *lockmap ;
};
#line 68
enum __anonenum_mtd_oob_mode_t_204 {
    MTD_OOB_PLACE = 0,
    MTD_OOB_AUTO = 1,
    MTD_OOB_RAW = 2
} ;
#line 68 "include/linux/mtd/mtd.h"
typedef enum __anonenum_mtd_oob_mode_t_204 mtd_oob_mode_t;
#line 93 "include/linux/mtd/mtd.h"
struct mtd_oob_ops {
   mtd_oob_mode_t mode ;
   size_t len ;
   size_t retlen ;
   size_t ooblen ;
   size_t oobretlen ;
   uint32_t ooboffs ;
   uint8_t *datbuf ;
   uint8_t *oobbuf ;
};
#line 104 "include/linux/mtd/mtd.h"
struct mtd_info {
   u_char type ;
   uint32_t flags ;
   uint64_t size ;
   uint32_t erasesize ;
   uint32_t writesize ;
   uint32_t oobsize ;
   uint32_t oobavail ;
   unsigned int erasesize_shift ;
   unsigned int writesize_shift ;
   unsigned int erasesize_mask ;
   unsigned int writesize_mask ;
   char const   *name ;
   int index ;
   struct nand_ecclayout *ecclayout ;
   int numeraseregions ;
   struct mtd_erase_region_info *eraseregions ;
   int (*erase)(struct mtd_info *mtd , struct erase_info *instr ) ;
   int (*point)(struct mtd_info *mtd , loff_t from , size_t len , size_t *retlen ,
                void **virt , resource_size_t *phys ) ;
   void (*unpoint)(struct mtd_info *mtd , loff_t from , size_t len ) ;
   unsigned long (*get_unmapped_area)(struct mtd_info *mtd , unsigned long len , unsigned long offset ,
                                      unsigned long flags ) ;
   struct backing_dev_info *backing_dev_info ;
   int (*read)(struct mtd_info *mtd , loff_t from , size_t len , size_t *retlen ,
               u_char *buf ) ;
   int (*write)(struct mtd_info *mtd , loff_t to , size_t len , size_t *retlen , u_char const   *buf ) ;
   int (*panic_write)(struct mtd_info *mtd , loff_t to , size_t len , size_t *retlen ,
                      u_char const   *buf ) ;
   int (*read_oob)(struct mtd_info *mtd , loff_t from , struct mtd_oob_ops *ops ) ;
   int (*write_oob)(struct mtd_info *mtd , loff_t to , struct mtd_oob_ops *ops ) ;
   int (*get_fact_prot_info)(struct mtd_info *mtd , struct otp_info *buf , size_t len ) ;
   int (*read_fact_prot_reg)(struct mtd_info *mtd , loff_t from , size_t len , size_t *retlen ,
                             u_char *buf ) ;
   int (*get_user_prot_info)(struct mtd_info *mtd , struct otp_info *buf , size_t len ) ;
   int (*read_user_prot_reg)(struct mtd_info *mtd , loff_t from , size_t len , size_t *retlen ,
                             u_char *buf ) ;
   int (*write_user_prot_reg)(struct mtd_info *mtd , loff_t from , size_t len , size_t *retlen ,
                              u_char *buf ) ;
   int (*lock_user_prot_reg)(struct mtd_info *mtd , loff_t from , size_t len ) ;
   int (*writev)(struct mtd_info *mtd , struct kvec  const  *vecs , unsigned long count ,
                 loff_t to , size_t *retlen ) ;
   void (*sync)(struct mtd_info *mtd ) ;
   int (*lock)(struct mtd_info *mtd , loff_t ofs , uint64_t len ) ;
   int (*unlock)(struct mtd_info *mtd , loff_t ofs , uint64_t len ) ;
   int (*suspend)(struct mtd_info *mtd ) ;
   void (*resume)(struct mtd_info *mtd ) ;
   int (*block_isbad)(struct mtd_info *mtd , loff_t ofs ) ;
   int (*block_markbad)(struct mtd_info *mtd , loff_t ofs ) ;
   struct notifier_block reboot_notifier ;
   struct mtd_ecc_stats ecc_stats ;
   int subpage_sft ;
   void *priv ;
   struct module *owner ;
   struct device dev ;
   int usecount ;
   int (*get_device)(struct mtd_info *mtd ) ;
   void (*put_device)(struct mtd_info *mtd ) ;
};
#line 298 "include/linux/mtd/mtd.h"
struct mtd_notifier {
   void (*add)(struct mtd_info *mtd ) ;
   void (*remove)(struct mtd_info *mtd ) ;
   struct list_head list ;
};
#line 17 "include/linux/kmsg_dump.h"
enum kmsg_dump_reason {
    KMSG_DUMP_OOPS = 0,
    KMSG_DUMP_PANIC = 1,
    KMSG_DUMP_KEXEC = 2
} ;
#line 31 "include/linux/kmsg_dump.h"
struct kmsg_dumper {
   void (*dump)(struct kmsg_dumper *dumper , enum kmsg_dump_reason reason , char const   *s1 ,
                unsigned long l1 , char const   *s2 , unsigned long l2 ) ;
   struct list_head list ;
   int registered ;
};
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
struct mtdoops_context {
   struct kmsg_dumper dump ;
   int mtd_index ;
   struct work_struct work_erase ;
   struct work_struct work_write ;
   struct mtd_info *mtd ;
   int oops_pages ;
   int nextpage ;
   int nextcount ;
   unsigned long *oops_page_used ;
   void *oops_buf ;
};
#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct page;
#line 307
struct seq_file;
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct kmem_cache;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_37 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_37 arch_rwlock_t;
#line 11 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_40 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 11 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_40 rwlock_t;
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 16 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 37 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 48 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 64 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 71 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
#line 217 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 273 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 310 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 328 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 549 "include/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __u16 wBytesPerInterval ;
} __attribute__((__packed__)) ;
#line 606 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 774
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4,
    USB_SPEED_SUPER = 5
} ;
#line 782
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 89
struct inode;
#line 89 "include/linux/dcache.h"
union __anonunion_d_u_127 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 89
struct dentry_operations;
#line 89
struct super_block;
#line 89 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_127 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
#line 134 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 16 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 385 "include/linux/fs.h"
struct export_operations;
#line 387
struct iovec;
#line 389
struct kiocb;
#line 391
struct poll_table_struct;
#line 392
struct kstatfs;
#line 447 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 108 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 129 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 17 "include/linux/dqblk_qtree.h"
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 199 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 214
struct quota_format_type;
#line 216 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 266 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 286 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 297 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 323 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 392 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops  const  *ops[2] ;
};
#line 511 "include/linux/fs.h"
struct address_space;
#line 512
struct writeback_control;
#line 555 "include/linux/fs.h"
union __anonunion_arg_134 {
   char *buf ;
   void *data ;
};
#line 555 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_133 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_134 arg ;
   int error ;
};
#line 555 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_133 read_descriptor_t;
#line 568 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 643
struct hd_struct;
#line 643
struct gendisk;
#line 643 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 717
struct posix_acl;
#line 720
struct inode_operations;
#line 720
struct file_operations;
#line 720
struct file_lock;
#line 720
struct cdev;
#line 720 "include/linux/fs.h"
union __anonunion____missing_field_name_135 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 720 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_135 __annonCompField21 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 875 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 886 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 909 "include/linux/fs.h"
union __anonunion_f_u_136 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 909 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_136 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1028 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1057 "include/linux/fs.h"
struct fasync_struct;
#line 1057 "include/linux/fs.h"
struct __anonstruct_afs_138 {
   struct list_head link ;
   int state ;
};
#line 1057 "include/linux/fs.h"
union __anonunion_fl_u_137 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_138 afs ;
};
#line 1057 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_137 fl_u ;
};
#line 1282 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1317
struct file_system_type;
#line 1317
struct super_operations;
#line 1317
struct xattr_handler;
#line 1317 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1436 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1483 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1512 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1556 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1739 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_142 {
   u16 inuse ;
   u16 objects ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_141 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_142 __annonCompField22 ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_144 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_143 {
   struct __anonstruct____missing_field_name_144 __annonCompField24 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_145 {
   unsigned long index ;
   void *freelist ;
};
#line 40 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_141 __annonCompField23 ;
   union __anonunion____missing_field_name_143 __annonCompField25 ;
   union __anonunion____missing_field_name_145 __annonCompField26 ;
   struct list_head lru ;
};
#line 58 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 15 "include/linux/aio.h"
struct kioctx;
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_217 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87
struct eventfd_ctx;
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_217 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 165 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 24 "include/linux/usb.h"
struct usb_device;
#line 26
struct wusb_dev;
#line 46
struct ep_device;
#line 55 "include/linux/usb.h"
struct usb_host_ss_ep_comp {
   struct usb_ss_ep_comp_descriptor desc ;
   unsigned char *extra ;
   int extralen ;
};
#line 76 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   struct usb_host_ss_ep_comp *ss_ep_comp ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 89 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 102
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 171 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 236 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 288 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 319 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 326
struct mon_bus;
#line 326 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 376
struct usb_tt;
#line 444 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
};
#line 987 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 994
struct urb;
#line 996 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
#line 1190
struct usb_sg_request;
#line 1190 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct usb_sg_request *sg ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 1387
struct scatterlist;
#line 1453 "include/linux/usb.h"
struct usb_sg_request {
   int status ;
   size_t bytes ;
   spinlock_t lock ;
   struct usb_device *dev ;
   int pipe ;
   struct scatterlist *sg ;
   int nents ;
   int entries ;
   struct urb **urbs ;
   int count ;
   struct completion complete ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void ( __attribute__((__always_inline__)) set_bit)(unsigned int nr ,
                                                                   unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 71
  return;
}
}
#line 97 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void ( __attribute__((__always_inline__)) clear_bit)(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 172 "include/linux/kernel.h"
extern unsigned long simple_strtoul(char const   * , char ** , unsigned int  ) ;
#line 240
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task  __attribute__((__section__(".data.percpu"))) ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (sizeof(per_cpu__current_task)) {
  case 1UL: 
#line 14
  __asm__  ("mov"
            "b "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=q" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  break;
  case 2UL: 
#line 14
  __asm__  ("mov"
            "w "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  break;
  case 4UL: 
#line 14
  __asm__  ("mov"
            "l "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  break;
  case 8UL: 
#line 14
  __asm__  ("mov"
            "q "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  break;
  default: 
#line 14
  __bad_percpu_size();
  }
#line 14
  return (pfo_ret__);
}
}
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 61
extern unsigned long strlen(char const   *s ) ;
#line 64
extern int strcmp(char const   *cs , char const   *ct ) ;
#line 15 "include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend , u32 divisor , u32 *remainder ) 
{ 


  {
#line 17
  *remainder = dividend % (unsigned long long )divisor;
#line 18
  return (dividend / (u64 )divisor);
}
}
#line 66 "include/linux/math64.h"
__inline static u64 div_u64(u64 dividend , u32 divisor ) 
{ 
  u32 remainder ;
  u64 tmp ;

  {
#line 69
  tmp = div_u64_rem(dividend, divisor, & remainder);
#line 69
  return (tmp);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 244 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map *lock , char const   *name , struct lock_class_key *key ,
                             int subclass ) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t *wait , unsigned int mode , int flags ,
                                 void *key ) ;
#line 80
extern void __init_waitqueue_head(wait_queue_head_t *q , struct lock_class_key * ) ;
#line 118
extern void add_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 120
extern void remove_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 142
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 97 "include/linux/workqueue.h"
extern void __init_work(struct work_struct *work , int onstack ) ;
#line 225
extern void flush_scheduled_work(void) ;
#line 228
extern int schedule_work(struct work_struct *work ) ;
#line 177 "include/linux/moduleparam.h"
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
#line 178
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
#line 189
extern int param_set_ulong(char const   *val , struct kernel_param *kp ) ;
#line 190
extern int param_get_ulong(char *buffer , struct kernel_param *kp ) ;
#line 229
extern int param_set_copystring(char const   *val , struct kernel_param *kp ) ;
#line 230
extern int param_get_string(char *buffer , struct kernel_param *kp ) ;
#line 68 "include/linux/module.h"
int init_module(void) ;
#line 69
void cleanup_module(void) ;
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long size ) ;
#line 62
extern void vfree(void const   *addr ) ;
#line 349 "include/linux/sched.h"
extern void schedule(void) ;
#line 257 "include/linux/mtd/mtd.h"
__inline static uint32_t mtd_div_by_eb(uint64_t sz , struct mtd_info *mtd ) 
{ 
  uint32_t __base ;
  uint32_t __rem ;

  {
#line 259
  if (mtd->erasesize_shift) {
#line 260
    return (sz >> mtd->erasesize_shift);
  } else {

  }
#line 261
  __base = mtd->erasesize;
#line 261
  __rem = sz % (unsigned long long )__base;
#line 261
  sz = sz / (uint64_t )__base;
#line 262
  return (sz);
}
}
#line 305
extern void register_mtd_user(struct mtd_notifier *new ) ;
#line 306
extern int unregister_mtd_user(struct mtd_notifier *old ) ;
#line 42 "include/linux/kmsg_dump.h"
extern int kmsg_dump_register(struct kmsg_dumper *dumper ) ;
#line 44
extern int kmsg_dump_unregister(struct kmsg_dumper *dumper ) ;
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static unsigned long record_size  =    4096;
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __param_str_record_size[12]  = 
#line 44
  {      'r',      'e',      'c',      'o', 
        'r',      'd',      '_',      's', 
        'i',      'z',      'e',      '\000'};
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct kernel_param  const  __param_record_size  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_record_size, 256, 0, & param_set_ulong, & param_get_ulong, {& record_size}};
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_record_sizetype44[27]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 44
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'r',      'e',      'c', 
        'o',      'r',      'd',      '_', 
        's',      'i',      'z',      'e', 
        ':',      'u',      'l',      'o', 
        'n',      'g',      '\000'};
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_record_size46[72]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 45
  {      'p',      'a',      'r',      'm', 
        '=',      'r',      'e',      'c', 
        'o',      'r',      'd',      '_', 
        's',      'i',      'z',      'e', 
        ':',      'r',      'e',      'c', 
        'o',      'r',      'd',      ' ', 
        's',      'i',      'z',      'e', 
        ' ',      'f',      'o',      'r', 
        ' ',      'M',      'T',      'D', 
        ' ',      'O',      'O',      'P', 
        'S',      ' ',      'p',      'a', 
        'g',      'e',      's',      ' ', 
        'i',      'n',      ' ',      'b', 
        'y',      't',      'e',      's', 
        ' ',      '(',      'd',      'e', 
        'f',      'a',      'u',      'l', 
        't',      ' ',      '4',      '0', 
        '9',      '6',      ')',      '\000'};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char mtddev[80]  ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct kparam_string  const  __param_string_mtddev  =    {80, mtddev};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __param_str_mtddev[7]  = {      'm',      't',      'd',      'd', 
        'e',      'v',      '\000'};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct kernel_param  const  __param_mtddev  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mtddev, 256, 0, & param_set_copystring, & param_get_string, {.str = & __param_string_mtddev}};
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_mtddevtype49[23]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 49
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      't',      'd', 
        'd',      'e',      'v',      ':', 
        's',      't',      'r',      'i', 
        'n',      'g',      '\000'};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_mtddev51[58]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 50
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      't',      'd', 
        'd',      'e',      'v',      ':', 
        'n',      'a',      'm',      'e', 
        ' ',      'o',      'r',      ' ', 
        'i',      'n',      'd',      'e', 
        'x',      ' ',      'n',      'u', 
        'm',      'b',      'e',      'r', 
        ' ',      'o',      'f',      ' ', 
        't',      'h',      'e',      ' ', 
        'M',      'T',      'D',      ' ', 
        'd',      'e',      'v',      'i', 
        'c',      'e',      ' ',      't', 
        'o',      ' ',      'u',      's', 
        'e',      '\000'};
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static int dump_oops  =    1;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __param_str_dump_oops[10]  = 
#line 54
  {      'd',      'u',      'm',      'p', 
        '_',      'o',      'o',      'p', 
        's',      '\000'};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct kernel_param  const  __param_dump_oops  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_dump_oops, 384, 0, & param_set_int, & param_get_int, {& dump_oops}};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_dump_oopstype54[23]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 54
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'u',      'm', 
        'p',      '_',      'o',      'o', 
        'p',      's',      ':',      'i', 
        'n',      't',      '\000'};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_dump_oops56[74]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 55
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'u',      'm', 
        'p',      '_',      'o',      'o', 
        'p',      's',      ':',      's', 
        'e',      't',      ' ',      't', 
        'o',      ' ',      '1',      ' ', 
        't',      'o',      ' ',      'd', 
        'u',      'm',      'p',      ' ', 
        'o',      'o',      'p',      's', 
        'e',      's',      ',',      ' ', 
        '0',      ' ',      't',      'o', 
        ' ',      'o',      'n',      'l', 
        'y',      ' ',      'd',      'u', 
        'm',      'p',      ' ',      'p', 
        'a',      'n',      'i',      'c', 
        's',      ' ',      '(',      'd', 
        'e',      'f',      'a',      'u', 
        'l',      't',      ' ',      '1', 
        ')',      '\000'};
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct mtdoops_context oops_cxt  ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mark_page_used(struct mtdoops_context *cxt , int page ) 
{ 


  {
#line 75
  set_bit(page, cxt->oops_page_used);
#line 76
  return;
}
}
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mark_page_unused(struct mtdoops_context *cxt , int page ) 
{ 


  {
#line 80
  clear_bit(page, cxt->oops_page_used);
#line 81
  return;
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static int page_is_used(struct mtdoops_context *cxt , int page ) 
{ 
  int tmp___0 ;

  {
#line 85
  tmp___0 = variable_test_bit(page, cxt->oops_page_used);
#line 85
  return (tmp___0);
}
}
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_erase_callback(struct erase_info *done ) 
{ 
  wait_queue_head_t *wait_q ;

  {
#line 90
  wait_q = (wait_queue_head_t *)done->priv;
#line 91
  __wake_up(wait_q, 1 | 2, 1, (void *)0);
#line 92
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct lock_class_key __key___4  ;
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static int mtdoops_erase_block(struct mtdoops_context *cxt , int offset ) 
{ 
  struct mtd_info *mtd ;
  u32 start_page_offset ;
  uint32_t tmp ;
  u32 start_page ;
  u32 erase_pages ;
  struct erase_info erase ;
  wait_queue_t wait ;
  struct task_struct *tmp___0 ;
  wait_queue_head_t wait_q ;
  int ret ;
  int page ;
  long volatile   __x ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  long volatile   __x___0 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;
  struct task_struct *tmp___10 ;
  struct task_struct *tmp___11 ;
  struct task_struct *tmp___12 ;

  {
#line 96
  mtd = cxt->mtd;
#line 97
  tmp = mtd_div_by_eb(offset, mtd);
#line 97
  start_page_offset = tmp * mtd->erasesize;
#line 98
  start_page = (unsigned long )start_page_offset / record_size;
#line 99
  erase_pages = (unsigned long )mtd->erasesize / record_size;
#line 101
  tmp___0 = get_current();
#line 101
  wait.flags = 0U;
#line 101
  wait.private = tmp___0;
#line 101
  wait.func = & default_wake_function;
#line 101
  wait.task_list.next = (void *)0;
#line 101
  wait.task_list.prev = (void *)0;
#line 106
  while (1) {
#line 106
    __init_waitqueue_head(& wait_q, & __key___4);
#line 106
    break;
  }
#line 107
  erase.mtd = mtd;
#line 108
  erase.callback = & mtdoops_erase_callback;
#line 109
  erase.addr = offset;
#line 110
  erase.len = mtd->erasesize;
#line 111
  erase.priv = (u_long )(& wait_q);
#line 113
  while (1) {
#line 113
    __x = 1;
#line 113
    switch (sizeof(tmp___2->state)) {
    case 1UL: 
#line 113
    tmp___3 = get_current();
#line 113
    __asm__  volatile   ("xchgb %b0,%1": "=q" (__x): "m" (tmp___3->state), "0" (__x): "memory");
#line 113
    break;
    case 2UL: 
#line 113
    tmp___4 = get_current();
#line 113
    __asm__  volatile   ("xchgw %w0,%1": "=r" (__x): "m" (tmp___4->state), "0" (__x): "memory");
#line 113
    break;
    case 4UL: 
#line 113
    tmp___5 = get_current();
#line 113
    __asm__  volatile   ("xchgl %k0,%1": "=r" (__x): "m" (tmp___5->state), "0" (__x): "memory");
#line 113
    break;
    case 8UL: 
#line 113
    tmp___6 = get_current();
#line 113
    __asm__  volatile   ("xchgq %0,%1": "=r" (__x): "m" (tmp___6->state), "0" (__x): "memory");
#line 113
    break;
    default: 
#line 113
    __xchg_wrong_size();
    }
#line 113
    break;
  }
#line 114
  add_wait_queue(& wait_q, & wait);
#line 116
  ret = (*(mtd->erase))(mtd, & erase);
#line 117
  if (ret) {
#line 118
    while (1) {
#line 118
      __x___0 = 0;
#line 118
      switch (sizeof(tmp___8->state)) {
      case 1UL: 
#line 118
      tmp___9 = get_current();
#line 118
      __asm__  volatile   ("xchgb %b0,%1": "=q" (__x___0): "m" (tmp___9->state), "0" (__x___0): "memory");
#line 118
      break;
      case 2UL: 
#line 118
      tmp___10 = get_current();
#line 118
      __asm__  volatile   ("xchgw %w0,%1": "=r" (__x___0): "m" (tmp___10->state),
                           "0" (__x___0): "memory");
#line 118
      break;
      case 4UL: 
#line 118
      tmp___11 = get_current();
#line 118
      __asm__  volatile   ("xchgl %k0,%1": "=r" (__x___0): "m" (tmp___11->state),
                           "0" (__x___0): "memory");
#line 118
      break;
      case 8UL: 
#line 118
      tmp___12 = get_current();
#line 118
      __asm__  volatile   ("xchgq %0,%1": "=r" (__x___0): "m" (tmp___12->state), "0" (__x___0): "memory");
#line 118
      break;
      default: 
#line 118
      __xchg_wrong_size();
      }
#line 118
      break;
    }
#line 119
    remove_wait_queue(& wait_q, & wait);
#line 120
    printk("<4>mtdoops: erase of region [0x%llx, 0x%llx] on \"%s\" failed\n", erase.addr,
           erase.len, mtddev);
#line 123
    return (ret);
  } else {

  }
#line 126
  schedule();
#line 127
  remove_wait_queue(& wait_q, & wait);
#line 130
  page = start_page;
#line 130
  while (1) {
#line 130
    if ((u32 )page < start_page + erase_pages) {

    } else {
#line 130
      break;
    }
#line 131
    mark_page_unused(cxt, page);
#line 130
    page = page + 1;
  }
#line 133
  return (0);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_inc_counter(struct mtdoops_context *cxt ) 
{ 
  int tmp ;

  {
#line 138
  cxt->nextpage = cxt->nextpage + 1;
#line 139
  if (cxt->nextpage >= cxt->oops_pages) {
#line 140
    cxt->nextpage = 0;
  } else {

  }
#line 141
  cxt->nextcount = cxt->nextcount + 1;
#line 142
  if ((unsigned int )cxt->nextcount == 4294967295U) {
#line 143
    cxt->nextcount = 0;
  } else {

  }
#line 145
  tmp = page_is_used(cxt, cxt->nextpage);
#line 145
  if (tmp) {
#line 146
    schedule_work(& cxt->work_erase);
#line 147
    return;
  } else {

  }
#line 150
  printk("<7>mtdoops: ready %d, %d (no erase)\n", cxt->nextpage, cxt->nextcount);
#line 152
  return;
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_workfunc_erase(struct work_struct *work ) 
{ 
  struct mtdoops_context *cxt ;
  struct work_struct  const  *__mptr ;
  struct mtd_info *mtd ;
  int i ;
  int j ;
  int ret ;
  int mod ;

  {
#line 158
  __mptr = work;
#line 158
  cxt = (struct mtdoops_context *)((char *)__mptr - (unsigned int )(& ((struct mtdoops_context *)0)->work_erase));
#line 159
  mtd = cxt->mtd;
#line 160
  i = 0;
#line 163
  if (! mtd) {
#line 164
    return;
  } else {

  }
#line 166
  mod = ((unsigned long )cxt->nextpage * record_size) % (unsigned long )mtd->erasesize;
#line 167
  if (mod != 0) {
#line 168
    cxt->nextpage = (unsigned long )cxt->nextpage + (unsigned long )(mtd->erasesize - (uint32_t )mod) / record_size;
#line 169
    if (cxt->nextpage >= cxt->oops_pages) {
#line 170
      cxt->nextpage = 0;
    } else {

    }
  } else {

  }
#line 173
  while (1) {
#line 173
    if (mtd->block_isbad) {

    } else {
#line 173
      break;
    }
#line 174
    ret = (*(mtd->block_isbad))(mtd, (unsigned long )cxt->nextpage * record_size);
#line 175
    if (! ret) {
#line 176
      break;
    } else {

    }
#line 177
    if (ret < 0) {
#line 178
      printk("<3>mtdoops: block_isbad failed, aborting\n");
#line 179
      return;
    } else {

    }
    badblock: 
#line 182
    printk("<4>mtdoops: bad block at %08lx\n", (unsigned long )cxt->nextpage * record_size);
#line 184
    i = i + 1;
#line 185
    cxt->nextpage = (unsigned long )cxt->nextpage + (unsigned long )mtd->erasesize / record_size;
#line 186
    if (cxt->nextpage >= cxt->oops_pages) {
#line 187
      cxt->nextpage = 0;
    } else {

    }
#line 188
    if ((unsigned long )i == (unsigned long )cxt->oops_pages / ((unsigned long )mtd->erasesize / record_size)) {
#line 189
      printk("<3>mtdoops: all blocks bad!\n");
#line 190
      return;
    } else {

    }
  }
#line 194
  j = 0;
#line 194
  ret = -1;
#line 194
  while (1) {
#line 194
    if (j < 3 && ret < 0) {

    } else {
#line 194
      break;
    }
#line 195
    ret = mtdoops_erase_block(cxt, (unsigned long )cxt->nextpage * record_size);
#line 194
    j = j + 1;
  }
#line 197
  if (ret >= 0) {
#line 198
    printk("<7>mtdoops: ready %d, %d\n", cxt->nextpage, cxt->nextcount);
#line 200
    return;
  } else {

  }
#line 203
  if (mtd->block_markbad && ret == -5) {
#line 204
    ret = (*(mtd->block_markbad))(mtd, (unsigned long )cxt->nextpage * record_size);
#line 205
    if (ret < 0) {
#line 206
      printk("<3>mtdoops: block_markbad failed, aborting\n");
#line 207
      return;
    } else {

    }
  } else {

  }
#line 210
  goto badblock;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_write(struct mtdoops_context *cxt , int panic___0 ) 
{ 
  struct mtd_info *mtd ;
  size_t retlen ;
  u32 *hdr ;
  int ret ;

  {
#line 215
  mtd = cxt->mtd;
#line 221
  hdr = cxt->oops_buf;
#line 222
  *(hdr + 0) = cxt->nextcount;
#line 223
  *(hdr + 1) = 1560304896;
#line 225
  if (panic___0) {
#line 226
    ret = (*(mtd->panic_write))(mtd, (unsigned long )cxt->nextpage * record_size,
                                record_size, & retlen, cxt->oops_buf);
  } else {
#line 229
    ret = (*(mtd->write))(mtd, (unsigned long )cxt->nextpage * record_size, record_size,
                          & retlen, cxt->oops_buf);
  }
#line 232
  if (retlen != record_size || ret < 0) {
#line 233
    printk("<3>mtdoops: write failure at %ld (%td of %ld written), error %d\n", (unsigned long )cxt->nextpage * record_size,
           retlen, record_size, ret);
  } else {

  }
#line 235
  mark_page_used(cxt, cxt->nextpage);
#line 236
  memset(cxt->oops_buf, 255, record_size);
#line 238
  mtdoops_inc_counter(cxt);
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_workfunc_write(struct work_struct *work ) 
{ 
  struct mtdoops_context *cxt ;
  struct work_struct  const  *__mptr ;

  {
#line 244
  __mptr = work;
#line 244
  cxt = (struct mtdoops_context *)((char *)__mptr - (unsigned int )(& ((struct mtdoops_context *)0)->work_write));
#line 246
  mtdoops_write(cxt, 0);
#line 247
  return;
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void find_next_position(struct mtdoops_context *cxt ) 
{ 
  struct mtd_info *mtd ;
  int ret ;
  int page ;
  int maxpos ;
  u32 count[2] ;
  u32 maxcount ;
  size_t retlen ;

  {
#line 251
  mtd = cxt->mtd;
#line 252
  maxpos = 0;
#line 253
  maxcount = 4294967295U;
#line 256
  page = 0;
#line 256
  while (1) {
#line 256
    if (page < cxt->oops_pages) {

    } else {
#line 256
      break;
    }
#line 258
    mark_page_used(cxt, page);
#line 259
    ret = (*(mtd->read))(mtd, (unsigned long )page * record_size, 8, & retlen, (u_char *)(& count[0]));
#line 261
    if (retlen != (size_t )8 || (ret < 0 && ret != -117)) {
#line 263
      printk("<3>mtdoops: read failure at %ld (%td of %d read), err %d\n", (unsigned long )page * record_size,
             retlen, 8, ret);
#line 266
      goto __Cont;
    } else {

    }
#line 269
    if (count[0] == 4294967295U && count[1] == 4294967295U) {
#line 270
      mark_page_unused(cxt, page);
    } else {

    }
#line 271
    if (count[0] == 4294967295U) {
#line 272
      goto __Cont;
    } else {

    }
#line 273
    if (maxcount == 4294967295U) {
#line 274
      maxcount = count[0];
#line 275
      maxpos = page;
    } else
#line 276
    if (count[0] < (u32 )1073741824 && maxcount > 3221225472U) {
#line 277
      maxcount = count[0];
#line 278
      maxpos = page;
    } else
#line 279
    if (count[0] > maxcount && count[0] < 3221225472U) {
#line 280
      maxcount = count[0];
#line 281
      maxpos = page;
    } else
#line 282
    if ((count[0] > maxcount && count[0] > 3221225472U) && maxcount > 2147483648U) {
#line 284
      maxcount = count[0];
#line 285
      maxpos = page;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 256
    page = page + 1;
  }
#line 288
  if (maxcount == 4294967295U) {
#line 289
    cxt->nextpage = 0;
#line 290
    cxt->nextcount = 1;
#line 291
    schedule_work(& cxt->work_erase);
#line 292
    return;
  } else {

  }
#line 295
  cxt->nextpage = maxpos;
#line 296
  cxt->nextcount = maxcount;
#line 298
  mtdoops_inc_counter(cxt);
#line 299
  return;
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_do_dump(struct kmsg_dumper *dumper , enum kmsg_dump_reason reason ,
                            char const   *s1 , unsigned long l1 , char const   *s2 ,
                            unsigned long l2 ) 
{ 
  struct mtdoops_context *cxt ;
  struct kmsg_dumper  const  *__mptr ;
  unsigned long s1_start ;
  unsigned long s2_start ;
  unsigned long l1_cpy ;
  unsigned long l2_cpy ;
  char *dst ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long _min1___0 ;
  unsigned long _min2___0 ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 305
  __mptr = dumper;
#line 305
  cxt = (struct mtdoops_context *)((char *)__mptr - (unsigned int )(& ((struct mtdoops_context *)0)->dump));
#line 312
  if ((unsigned int )reason == (unsigned int )KMSG_DUMP_OOPS && ! dump_oops) {
#line 313
    return;
  } else {

  }
#line 315
  dst = cxt->oops_buf + 8;
#line 316
  _min1 = l2;
#line 316
  _min2 = record_size - 8UL;
#line 316
  l2_cpy = _min1 < _min2 ? _min1 : _min2;
#line 317
  _min1___0 = l1;
#line 317
  _min2___0 = (record_size - 8UL) - l2_cpy;
#line 317
  l1_cpy = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
#line 319
  s2_start = l2 - l2_cpy;
#line 320
  s1_start = l1 - l1_cpy;
#line 322
  __len = l1_cpy;
#line 322
  __ret = __builtin_memcpy(dst, s1 + s1_start, __len);
#line 323
  __len___0 = l2_cpy;
#line 323
  __ret___0 = __builtin_memcpy(dst + l1_cpy, s2 + s2_start, __len___0);
#line 326
  if ((unsigned int )reason != (unsigned int )KMSG_DUMP_OOPS) {
#line 327
    if (! (cxt->mtd)->panic_write) {
#line 328
      printk("<3>mtdoops: Cannot write from panic without panic_write\n");
    } else {
#line 330
      mtdoops_write(cxt, 1);
    }
#line 331
    return;
  } else {

  }
#line 335
  schedule_work(& cxt->work_write);
#line 336
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_notify_add(struct mtd_info *mtd ) 
{ 
  struct mtdoops_context *cxt ;
  u64 mtdoops_pages ;
  u64 tmp ;
  int err ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 340
  cxt = & oops_cxt;
#line 341
  tmp = div_u64(mtd->size, record_size);
#line 341
  mtdoops_pages = tmp;
#line 344
  tmp___0 = strcmp(mtd->name, mtddev);
#line 344
  if (tmp___0) {

  } else {
#line 345
    cxt->mtd_index = mtd->index;
  }
#line 347
  if (mtd->index != cxt->mtd_index || cxt->mtd_index < 0) {
#line 348
    return;
  } else {

  }
#line 350
  if (mtd->size < (uint64_t )(mtd->erasesize * (uint32_t )2)) {
#line 351
    printk("<3>mtdoops: MTD partition %d not big enough for mtdoops\n", mtd->index);
#line 353
    return;
  } else {

  }
#line 355
  if ((unsigned long )mtd->erasesize < record_size) {
#line 356
    printk("<3>mtdoops: eraseblock size of MTD partition %d too small\n", mtd->index);
#line 358
    return;
  } else {

  }
#line 360
  if (mtd->size > (uint64_t )((8 * 1024) * 1024)) {
#line 361
    printk("<3>mtdoops: mtd%d is too large (limit is %d MiB)\n", mtd->index, (((8 * 1024) * 1024) / 1024) / 1024);
#line 363
    return;
  } else {

  }
#line 367
  tmp___1 = vmalloc(((mtdoops_pages + (u64 )64) - (u64 )1) / (u64 )64);
#line 367
  cxt->oops_page_used = tmp___1;
#line 369
  if (! cxt->oops_page_used) {
#line 370
    printk("<3>mtdoops: could not allocate page array\n");
#line 371
    return;
  } else {

  }
#line 374
  cxt->dump.dump = & mtdoops_do_dump;
#line 375
  err = kmsg_dump_register(& cxt->dump);
#line 376
  if (err) {
#line 377
    printk("<3>mtdoops: registering kmsg dumper failed, error %d\n", err);
#line 378
    vfree(cxt->oops_page_used);
#line 379
    cxt->oops_page_used = (void *)0;
#line 380
    return;
  } else {

  }
#line 383
  cxt->mtd = mtd;
#line 384
  cxt->oops_pages = (unsigned long )((int )mtd->size) / record_size;
#line 385
  find_next_position(cxt);
#line 386
  printk("<6>mtdoops: Attached to MTD device %d\n", mtd->index);
#line 387
  return;
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_notify_remove(struct mtd_info *mtd ) 
{ 
  struct mtdoops_context *cxt ;
  int tmp ;

  {
#line 391
  cxt = & oops_cxt;
#line 393
  if (mtd->index != cxt->mtd_index || cxt->mtd_index < 0) {
#line 394
    return;
  } else {

  }
#line 396
  tmp = kmsg_dump_unregister(& cxt->dump);
#line 396
  if (tmp < 0) {
#line 397
    printk("<4>mtdoops: could not unregister kmsg_dumper\n");
  } else {

  }
#line 399
  cxt->mtd = (void *)0;
#line 400
  flush_scheduled_work();
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct mtd_notifier mtdoops_notifier  =    {& mtdoops_notify_add, & mtdoops_notify_remove, {0, 0}};
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct lock_class_key __key___5  ;
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static struct lock_class_key __key___6  ;
#line 409
static int mtdoops_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static int mtdoops_init(void) 
{ 
  struct mtdoops_context *cxt ;
  int mtd_index ;
  char *endp ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  atomic_long_t __constr_expr_0 ;
  atomic_long_t __constr_expr_1 ;

  {
#line 411
  cxt = & oops_cxt;
#line 415
  tmp = strlen(mtddev);
#line 415
  if (tmp == 0UL) {
#line 416
    printk("<3>mtdoops: mtd device (mtddev=name/number) must be supplied\n");
#line 417
    return (-22);
  } else {

  }
#line 419
  if ((record_size & 4095UL) != 0UL) {
#line 420
    printk("<3>mtdoops: record_size must be a multiple of 4096\n");
#line 421
    return (-22);
  } else {

  }
#line 423
  if (record_size < 4096UL) {
#line 424
    printk("<3>mtdoops: record_size must be over 4096 bytes\n");
#line 425
    return (-22);
  } else {

  }
#line 429
  cxt->mtd_index = -1;
#line 430
  tmp___0 = simple_strtoul(mtddev, & endp, 0);
#line 430
  mtd_index = tmp___0;
#line 431
  if ((int )*endp == '\000') {
#line 432
    cxt->mtd_index = mtd_index;
  } else {

  }
#line 433
  if (cxt->mtd_index > 32) {
#line 434
    printk("<3>mtdoops: invalid mtd device number (%u) given\n", mtd_index);
#line 436
    return (-22);
  } else {

  }
#line 439
  cxt->oops_buf = vmalloc(record_size);
#line 440
  if (! cxt->oops_buf) {
#line 441
    printk("<3>mtdoops: failed to allocate buffer workspace\n");
#line 442
    return (-12);
  } else {

  }
#line 444
  memset(cxt->oops_buf, 255, record_size);
#line 446
  while (1) {
#line 446
    while (1) {
#line 446
      __init_work(& cxt->work_erase, 0);
#line 446
      __constr_expr_0.counter = 0;
#line 446
      cxt->work_erase.data = __constr_expr_0;
#line 446
      lockdep_init_map(& cxt->work_erase.lockdep_map, "(&cxt->work_erase)", & __key___5,
                       0);
#line 446
      INIT_LIST_HEAD(& cxt->work_erase.entry);
#line 446
      while (1) {
#line 446
        cxt->work_erase.func = & mtdoops_workfunc_erase;
#line 446
        break;
      }
#line 446
      break;
    }
#line 446
    break;
  }
#line 447
  while (1) {
#line 447
    while (1) {
#line 447
      __init_work(& cxt->work_write, 0);
#line 447
      __constr_expr_1.counter = 0;
#line 447
      cxt->work_write.data = __constr_expr_1;
#line 447
      lockdep_init_map(& cxt->work_write.lockdep_map, "(&cxt->work_write)", & __key___6,
                       0);
#line 447
      INIT_LIST_HEAD(& cxt->work_write.entry);
#line 447
      while (1) {
#line 447
        cxt->work_write.func = & mtdoops_workfunc_write;
#line 447
        break;
      }
#line 447
      break;
    }
#line 447
    break;
  }
#line 449
  register_mtd_user(& mtdoops_notifier);
#line 450
  return (0);
}
}
#line 453
static void mtdoops_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static void mtdoops_exit(void) 
{ 
  struct mtdoops_context *cxt ;

  {
#line 455
  cxt = & oops_cxt;
#line 457
  unregister_mtd_user(& mtdoops_notifier);
#line 458
  vfree(cxt->oops_buf);
#line 459
  vfree(cxt->oops_page_used);
#line 460
  return;
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 463
  tmp = mtdoops_init();
#line 463
  return (tmp);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
void cleanup_module(void) 
{ 


  {
#line 464
  mtdoops_exit();
#line 464
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_license466[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 466
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_author467[47]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 467
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'R', 
        'i',      'c',      'h',      'a', 
        'r',      'd',      ' ',      'P', 
        'u',      'r',      'd',      'i', 
        'e',      ' ',      '<',      'r', 
        'p',      'u',      'r',      'd', 
        'i',      'e',      '@',      'o', 
        'p',      'e',      'n',      'e', 
        'd',      'h',      'a',      'n', 
        'd',      '.',      'c',      'o', 
        'm',      '>',      '\000'};
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
static char const   __mod_description468[49]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 468
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'M',      'T',      'D',      ' ', 
        'O',      'o',      'p',      's', 
        '/',      'P',      'a',      'n', 
        'i',      'c',      ' ',      'c', 
        'o',      'n',      's',      'o', 
        'l',      'e',      ' ',      'l', 
        'o',      'g',      'g',      'e', 
        'r',      '/',      'd',      'r', 
        'i',      'v',      'e',      'r', 
        '\000'};
#line 486
void ldv_check_final_state(void) ;
#line 495
extern void ldv_initialize(void) ;
#line 498
extern void ldv_handler_precall(void) ;
#line 501
extern int nondet_int(void) ;
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
int LDV_IN_INTERRUPT  ;
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/mtd/mtdoops.c"
void main(void) 
{ 
  struct mtd_info *var_group1 ;
  int tmp ;
  int ldv_s_mtdoops_notifier_mtd_notifier ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 535
  LDV_IN_INTERRUPT = 1;
#line 544
  ldv_initialize();
#line 554
  ldv_handler_precall();
#line 555
  tmp = mtdoops_init();
#line 555
  if (tmp) {
#line 556
    goto ldv_final;
  } else {

  }
#line 557
  ldv_s_mtdoops_notifier_mtd_notifier = 0;
#line 561
  while (1) {
#line 561
    tmp___1 = nondet_int();
#line 561
    if (tmp___1 || ! (ldv_s_mtdoops_notifier_mtd_notifier == 0)) {

    } else {
#line 561
      break;
    }
#line 565
    tmp___0 = nondet_int();
#line 565
    switch (tmp___0) {
    case 0: 
#line 570
    if (ldv_s_mtdoops_notifier_mtd_notifier == 0) {
#line 579
      ldv_handler_precall();
#line 580
      mtdoops_notify_remove(var_group1);
#line 581
      ldv_s_mtdoops_notifier_mtd_notifier = 0;
    } else {

    }
#line 587
    break;
    case 1: 
#line 600
    ldv_handler_precall();
#line 601
    mtdoops_notify_add(var_group1);
#line 608
    break;
    default: 
#line 609
    break;
    }
  }
#line 625
  ldv_handler_precall();
#line 626
  mtdoops_exit();
  ldv_final: 
#line 629
  ldv_check_final_state();
#line 632
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 1331 "include/linux/usb.h"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1332
void usb_free_urb(struct urb *urb ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    if (! arbitrary_memory) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    if (addr) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    if (! arbitrary_memory) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 


  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    if (urb) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
