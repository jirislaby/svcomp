/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 58 "include/asm/alternative.h"
struct module;
#line 74 "include/linux/log2.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 93 "include/linux/kernel.h"
struct completion;
#line 94
struct pt_regs;
#line 182
struct pid;
#line 486
struct task_struct;
#line 487
struct mm_struct;
#line 212 "include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 84
struct page;
#line 54 "include/asm/page.h"
struct __anonstruct_pgd_t_6 {
   pgdval_t pgd ;
};
#line 54 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_6 pgd_t;
#line 55 "include/asm/page.h"
struct __anonstruct_pgprot_t_7 {
   pgprotval_t pgprot ;
};
#line 55 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_7 pgprot_t;
#line 146 "include/asm/page.h"
struct __anonstruct_ldv_1889_11 {
   unsigned int a ;
   unsigned int b ;
};
#line 146 "include/asm/page.h"
struct __anonstruct_ldv_1904_12 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 146 "include/asm/page.h"
union __anonunion_ldv_1905_10 {
   struct __anonstruct_ldv_1889_11 ldv_1889 ;
   struct __anonstruct_ldv_1904_12 ldv_1904 ;
};
#line 146 "include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1905_10 ldv_1905 ;
};
#line 92 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_13 {
   unsigned long bits[64U] ;
};
#line 92 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_13 cpumask_t;
#line 459
struct thread_struct;
#line 326 "include/asm/paravirt.h"
struct raw_spinlock;
#line 200 "include/asm/msr.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 280 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "include/asm/processor.h"
struct __anonstruct_ldv_4286_15 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "include/asm/processor.h"
struct __anonstruct_ldv_4292_16 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "include/asm/processor.h"
union __anonunion_ldv_4293_14 {
   struct __anonstruct_ldv_4286_15 ldv_4286 ;
   struct __anonstruct_ldv_4292_16 ldv_4292 ;
};
#line 298 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4293_14 ldv_4293 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[24U] ;
};
#line 327 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 348 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
#line 362
struct kmem_cache;
#line 366 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
#line 601 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_17 {
   unsigned long seg ;
};
#line 601 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_17 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 262 "include/linux/list.h"
struct hlist_node;
#line 262 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 478 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "include/asm/stat.h"
struct __anonstruct_ldv_4710_19 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "include/asm/stat.h"
struct __anonstruct_futex_20 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "include/asm/stat.h"
struct __anonstruct_nanosleep_21 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114 "include/asm/stat.h"
union __anonunion_ldv_4724_18 {
   struct __anonstruct_ldv_4710_19 ldv_4710 ;
   struct __anonstruct_futex_20 futex ;
   struct __anonstruct_nanosleep_21 nanosleep ;
};
#line 114 "include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_4724_18 ldv_4724 ;
};
#line 45 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 9 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_22 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_22 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 29 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 155 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 191 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_23 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_23 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_24 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_24 rwlock_t;
#line 21 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_25 {
   int counter ;
};
#line 21 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_25 atomic_t;
#line 198 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_26 {
   long counter ;
};
#line 198 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_26 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 209 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 32 "include/linux/kmod.h"
struct key;
#line 33
struct file;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 403
struct kobject;
#line 404 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 39
struct vm_area_struct;
#line 74 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 120 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49
struct sysfs_dirent;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 104 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 110 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 117 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 134 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 192 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_33 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_33 nodemask_t;
#line 550 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 150
struct rw_semaphore;
#line 152 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 104 "include/linux/pm.h"
struct device;
#line 105 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 113 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 114 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 227 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 284
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 294 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 21 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_80 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 21 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_80 mm_context_t;
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 189
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 257 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 12 "include/asm/local.h"
struct __anonstruct_local_t_86 {
   atomic_long_t a ;
};
#line 12 "include/asm/local.h"
typedef struct __anonstruct_local_t_86 local_t;
#line 155 "include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 67
struct exception_table_entry;
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230
struct module_param_attrs;
#line 230
struct module_sect_attrs;
#line 230
struct module_notes_attrs;
#line 230 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[4096U] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 452
struct device_driver;
#line 89 "include/linux/kdev_t.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 55 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 354 "include/linux/rculist.h"
struct nameidata;
#line 355
struct path;
#line 356
struct vfsmount;
#line 357 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_87 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_87 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 366 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 14 "include/linux/path.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 19 "include/linux/namei.h"
union __anonunion_intent_88 {
   struct open_intent open ;
};
#line 19 "include/linux/namei.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
   union __anonunion_intent_88 intent ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 181
struct prio_tree_node;
#line 181 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   unsigned int level ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 508 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 50 "include/linux/semaphore.h"
struct export_operations;
#line 52
struct iovec;
#line 53
struct kiocb;
#line 54
struct pipe_inode_info;
#line 55
struct poll_table_struct;
#line 56
struct kstatfs;
#line 315 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 46 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 114 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 147 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 176 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 197
struct quota_format_type;
#line 198 "include/linux/quota.h"
union __anonunion_u_90 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 198 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_90 u ;
};
#line 245 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 268 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 284 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 300 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 315 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 365
struct address_space;
#line 366
struct writeback_control;
#line 442 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 495
struct backing_dev_info;
#line 496 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 517
struct hd_struct;
#line 517
struct gendisk;
#line 517 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 581
struct inode_operations;
#line 581
struct file_operations;
#line 581
struct file_lock;
#line 581
struct cdev;
#line 581 "include/linux/fs.h"
union __anonunion_ldv_10564_91 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 581
struct dnotify_struct;
#line 581 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_10564_91 ldv_10564 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 747 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 755 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 778 "include/linux/fs.h"
union __anonunion_f_u_92 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 778 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_92 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 895
struct files_struct;
#line 895 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 896 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 901 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_94 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_93 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_94 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_93 fl_u ;
};
#line 994 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1027
struct file_system_type;
#line 1027
struct super_operations;
#line 1027
struct xattr_handler;
#line 1027
struct mtd_info;
#line 1027 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1208 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1249 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
};
#line 1275
struct seq_file;
#line 1289 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1472 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1834
struct bio;
#line 2141 "include/linux/fs.h"
struct mtop {
   short mt_op ;
   int mt_count ;
};
#line 163 "include/linux/ioport.h"
struct klist_node;
#line 164 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 70 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 11 "include/asm/device.h"
struct driver_private;
#line 12
struct class;
#line 13
struct bus_type;
#line 14
struct bus_type_private;
#line 15 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 179
struct class_attribute;
#line 179 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 216 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 245 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 266 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 327 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 336
struct dma_coherent_mem;
#line 336 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 47 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_13122_98 {
   u16 inuse ;
   u16 objects ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13123_97 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13122_98 ldv_13122 ;
};
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_13128_100 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13132_99 {
   struct __anonstruct_ldv_13128_100 ldv_13128 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_13136_101 {
   unsigned long index ;
   void *freelist ;
};
#line 25 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_13123_97 ldv_13123 ;
   union __anonunion_ldv_13132_99 ldv_13132 ;
   union __anonunion_ldv_13136_101 ldv_13136 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 97 "include/linux/mm_types.h"
struct __anonstruct_vm_set_103 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 97 "include/linux/mm_types.h"
union __anonunion_shared_102 {
   struct __anonstruct_vm_set_103 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 97
struct anon_vma;
#line 97
struct vm_operations_struct;
#line 97
struct mempolicy;
#line 97 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_102 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 160
struct kioctx;
#line 160 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   int core_waiters ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[38U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 102 "include/linux/ipc.h"
struct sem_undo;
#line 116 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_104 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_104 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 168 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 180 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_106 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_107 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_108 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_109 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_110 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_111 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_105 {
   int _pad[28U] ;
   struct __anonstruct__kill_106 _kill ;
   struct __anonstruct__timer_107 _timer ;
   struct __anonstruct__rt_108 _rt ;
   struct __anonstruct__sigchld_109 _sigchld ;
   struct __anonstruct__sigfault_110 _sigfault ;
   struct __anonstruct__sigpoll_111 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_105 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 291
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
   struct path altroot ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_114 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_114 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 93 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 138 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 166 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 392 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 34 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 137 "include/linux/sched.h"
struct cfs_rq;
#line 138
struct task_group;
#line 333
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_115 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_115 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 392 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 418 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 426 "include/linux/sched.h"
union __anonunion_ldv_14327_116 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 426 "include/linux/sched.h"
union __anonunion_ldv_14332_117 {
   pid_t session ;
   pid_t __session ;
};
#line 426
struct tty_struct;
#line 426
struct taskstats;
#line 426
struct tty_audit_buf;
#line 426 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_14327_116 ldv_14327 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_14332_117 ldv_14332 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 575 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 617
struct reclaim_state;
#line 618 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 641 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 678
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 685 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 745
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 759 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 826
struct io_context;
#line 827 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 869
struct audit_context;
#line 871
struct rq;
#line 872 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 923 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 928 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 994
struct rt_rq;
#line 994 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1010
struct linux_binfmt;
#line 1010
struct css_set;
#line 1010
struct compat_robust_list_head;
#line 1010 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
};
#line 41 "include/linux/smp_lock.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
struct pi_protocol;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
struct pi_adapter {
   struct pi_protocol *proto ;
   int port ;
   int mode ;
   int delay ;
   int devtype ;
   char *device ;
   int unit ;
   int saved_r0 ;
   int saved_r2 ;
   int reserved ;
   unsigned long private ;
   wait_queue_head_t parq ;
   void *pardev ;
   char *parname ;
   int claimed ;
   void (*claim_cont)(void) ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
typedef struct pi_adapter PIA;
#line 134 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
struct pi_protocol {
   char name[8U] ;
   int index ;
   int max_mode ;
   int epp_first ;
   int default_delay ;
   int max_units ;
   void (*write_regr)(PIA * , int  , int  , int  ) ;
   int (*read_regr)(PIA * , int  , int  ) ;
   void (*write_block)(PIA * , char * , int  ) ;
   void (*read_block)(PIA * , char * , int  ) ;
   void (*connect)(PIA * ) ;
   void (*disconnect)(PIA * ) ;
   int (*test_port)(PIA * ) ;
   int (*probe_unit)(PIA * ) ;
   int (*test_proto)(PIA * , char * , int  ) ;
   void (*log_adapter)(PIA * , char * , int  ) ;
   int (*init_proto)(PIA * ) ;
   void (*release_proto)(PIA * ) ;
   struct module *owner ;
};
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
struct pt_unit {
   struct pi_adapter pia ;
   struct pi_adapter *pi ;
   int flags ;
   int last_sense ;
   int drive ;
   atomic_t available ;
   int bs ;
   int capacity ;
   int present ;
   char *bufptr ;
   char name[8U] ;
};
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
enum __anonenum_95 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 158 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 188
extern int printk(char const   *  , ...) ;
#line 95 "include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 123 "include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 127
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
#line 130
  return ((unsigned int )c != 0U);
}
}
#line 16 "include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 219 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 222
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 100 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 203 "include/linux/slub_def.h"
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 206
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 210
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 212
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 219 "include/linux/slub_def.h"
__inline static void *ldv_kmalloc_3(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 234
  tmp___2 = __kmalloc(size, flags);
#line 234
  return (tmp___2);
}
}
#line 219
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
void ldv_check_alloc_flags(gfp_t flags ) ;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int verbose  =    0;
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int major  =    96;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static char *name  =    (char *)"pt";
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int disable  =    0;
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int drive0[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int drive1[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int drive2[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int drive3[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int (*drives[4U])[6U]  = {      & drive0,      & drive1,      & drive2,      & drive3};
#line 736 "include/linux/fs.h"
__inline static unsigned int iminor(struct inode  const  *inode ) 
{ 


  {
#line 738
  return ((unsigned int )inode->i_rdev & 1048575U);
}
}
#line 1662
extern int register_chrdev(unsigned int  , char const   * , struct file_operations  const  * ) ;
#line 1664
extern void unregister_chrdev(unsigned int  , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 243 "include/linux/device.h"
extern struct class *class_create(struct module * , char const   * ) ;
#line 244
extern void class_destroy(struct class * ) ;
#line 476
extern struct device *device_create_drvdata(struct class * , struct device * , dev_t  ,
                                            void * , char const   *  , ...) ;
#line 482
extern void device_destroy(struct class * , dev_t  ) ;
#line 329 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 21 "include/asm/uaccess_64.h"
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 23
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
extern int pi_init(PIA * , int  , int  , int  , int  , int  , int  , char * , int  ,
                   int  , char * ) ;
#line 74
extern void pi_release(PIA * ) ;
#line 83
extern void pi_write_regr(PIA * , int  , int  , int  ) ;
#line 85
extern int pi_read_regr(PIA * , int  , int  ) ;
#line 87
extern void pi_write_block(PIA * , char * , int  ) ;
#line 89
extern void pi_read_block(PIA * , char * , int  ) ;
#line 91
extern void pi_connect(PIA * ) ;
#line 93
extern void pi_disconnect(PIA * ) ;
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_open(struct inode *inode , struct file *file ) ;
#line 208
static long pt_ioctl(struct file *file , unsigned int cmd , unsigned long arg ) ;
#line 209
static int pt_release(struct inode *inode , struct file *file ) ;
#line 210
static ssize_t pt_read(struct file *filp , char *buf , size_t count , loff_t *ppos ) ;
#line 212
static ssize_t pt_write(struct file *filp , char const   *buf , size_t count , loff_t *ppos ) ;
#line 214
static int pt_detect(void) ;
#line 242
static int pt_identify(struct pt_unit *tape ) ;
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static struct pt_unit pt[4U]  ;
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static char pt_scratch[512U]  ;
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static struct file_operations  const  pt_fops  = 
#line 250
     {& __this_module, 0, & pt_read, & pt_write, 0, 0, 0, 0, 0, & pt_ioctl, 0, 0, & pt_open,
    0, & pt_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static struct class *pt_class  ;
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
__inline static int status_reg(struct pi_adapter *pi ) 
{ 
  int tmp ;

  {
#line 264
  tmp = pi_read_regr(pi, 1, 6);
#line 264
  return (tmp);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
__inline static int read_reg(struct pi_adapter *pi , int reg ) 
{ 
  int tmp ;

  {
#line 269
  tmp = pi_read_regr(pi, 0, reg);
#line 269
  return (tmp);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
__inline static void write_reg(struct pi_adapter *pi , int reg , int val ) 
{ 


  {
#line 274
  pi_write_regr(pi, 0, reg, val);
#line 275
  return;
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
__inline static u8 DRIVE(struct pt_unit *tape ) 
{ 


  {
#line 279
  return ((unsigned int )((u8 )(tape->drive + 10)) * 16U);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_wait(struct pt_unit *tape , int go , int stop , char *fun , char *msg ) 
{ 
  int j ;
  int r ;
  int e ;
  int s ;
  int p ;
  struct pi_adapter *pi ;
  int tmp ;

  {
#line 285
  pi = tape->pi;
#line 287
  j = 0;
#line 288
  goto ldv_15776;
  ldv_15775: 
#line 290
  __const_udelay(214750UL);
  ldv_15776: 
#line 288
  r = status_reg(pi);
#line 288
  if ((r & go) != 0 || (stop != 0 && (r & stop) == 0)) {
#line 288
    tmp = j;
#line 288
    j = j + 1;
#line 288
    if (tmp <= 239999) {
#line 290
      goto ldv_15775;
    } else {
#line 292
      goto ldv_15777;
    }
  } else {

  }
  ldv_15777: ;
#line 292
  if (((stop & 1) & r) != 0 || j > 239999) {
#line 293
    s = read_reg(pi, 7);
#line 294
    e = read_reg(pi, 1);
#line 295
    p = read_reg(pi, 2);
#line 296
    if (j > 239999) {
#line 297
      e = e | 256;
    } else {

    }
#line 298
    if ((unsigned long )fun != (unsigned long )((char *)0)) {
#line 299
      printk("%s: %s %s: alt=0x%x stat=0x%x err=0x%x loop=%d phase=%d\n", (char *)(& tape->name),
             fun, msg, r, s, e, j, p);
    } else {

    }
#line 302
    return ((e << 8) + s);
  } else {

  }
#line 304
  return (0);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_command(struct pt_unit *tape , char *cmd , int dlen , char *fun ) 
{ 
  struct pi_adapter *pi ;
  u8 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 309
  pi = tape->pi;
#line 310
  pi_connect(pi);
#line 312
  tmp = DRIVE(tape);
#line 312
  write_reg(pi, 6, (int )tmp);
#line 314
  tmp___0 = pt_wait(tape, 136, 0, fun, (char *)"before command");
#line 314
  if (tmp___0 != 0) {
#line 315
    pi_disconnect(pi);
#line 316
    return (-1);
  } else {

  }
#line 319
  write_reg(pi, 4, dlen % 256);
#line 320
  write_reg(pi, 5, dlen / 256);
#line 321
  write_reg(pi, 7, 160);
#line 323
  tmp___1 = pt_wait(tape, 128, 8, fun, (char *)"command DRQ");
#line 323
  if (tmp___1 != 0) {
#line 324
    pi_disconnect(pi);
#line 325
    return (-1);
  } else {

  }
#line 328
  tmp___2 = read_reg(pi, 2);
#line 328
  if (tmp___2 != 1) {
#line 329
    printk("%s: %s: command phase error\n", (char *)(& tape->name), fun);
#line 330
    pi_disconnect(pi);
#line 331
    return (-1);
  } else {

  }
#line 334
  pi_write_block(pi, cmd, 12);
#line 336
  return (0);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_completion(struct pt_unit *tape , char *buf , char *fun ) 
{ 
  struct pi_adapter *pi ;
  int r ;
  int s ;
  int n ;
  int p ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 341
  pi = tape->pi;
#line 344
  r = pt_wait(tape, 128, 73, fun, (char *)"completion");
#line 347
  tmp___2 = read_reg(pi, 7);
#line 347
  if ((tmp___2 & 8) != 0) {
#line 348
    tmp = read_reg(pi, 4);
#line 348
    tmp___0 = read_reg(pi, 5);
#line 348
    n = ((tmp + tmp___0 * 256) + 3) & 65532;
#line 350
    tmp___1 = read_reg(pi, 2);
#line 350
    p = tmp___1 & 3;
#line 351
    if (p == 0) {
#line 352
      pi_write_block(pi, buf, n);
    } else {

    }
#line 353
    if (p == 2) {
#line 354
      pi_read_block(pi, buf, n);
    } else {

    }
  } else {

  }
#line 357
  s = pt_wait(tape, 128, 65, fun, (char *)"data done");
#line 359
  pi_disconnect(pi);
#line 361
  return (r != 0 ? r : s);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_req_sense(struct pt_unit *tape , int quiet ) 
{ 
  char rs_cmd[12U] ;
  char buf[16U] ;
  int r ;
  unsigned long __ms ;
  unsigned long tmp ;

  {
#line 366
  rs_cmd[0] = 3;
#line 366
  rs_cmd[1] = 0;
#line 366
  rs_cmd[2] = 0;
#line 366
  rs_cmd[3] = 0;
#line 366
  rs_cmd[4] = 16;
#line 366
  rs_cmd[5] = 0;
#line 366
  rs_cmd[6] = 0;
#line 366
  rs_cmd[7] = 0;
#line 366
  rs_cmd[8] = 0;
#line 366
  rs_cmd[9] = 0;
#line 366
  rs_cmd[10] = 0;
#line 366
  rs_cmd[11] = 0;
#line 370
  r = pt_command(tape, (char *)(& rs_cmd), 16, (char *)"Request sense");
#line 371
  if (1) {
#line 371
    __const_udelay(4295000UL);
  } else {
#line 371
    __ms = 1UL;
#line 371
    goto ldv_15804;
    ldv_15803: 
#line 371
    __const_udelay(4295000UL);
    ldv_15804: 
#line 371
    tmp = __ms;
#line 371
    __ms = __ms - 1UL;
#line 371
    if (tmp != 0UL) {
#line 372
      goto ldv_15803;
    } else {

    }

  }
#line 372
  if (r == 0) {
#line 373
    pt_completion(tape, (char *)(& buf), (char *)"Request sense");
  } else {

  }
#line 375
  tape->last_sense = -1;
#line 376
  if (r == 0) {
#line 377
    if (quiet == 0) {
#line 378
      printk("%s: Sense key: %x, ASC: %x, ASQ: %x\n", (char *)(& tape->name), (int )buf[2] & 15,
             (int )buf[12], (int )buf[13]);
    } else {

    }
#line 380
    tape->last_sense = (((int )buf[2] & 15) | (((int )buf[12] << 8) & 65535)) | (((int )buf[13] & 255) << 16);
  } else {

  }
#line 383
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_atapi(struct pt_unit *tape , char *cmd , int dlen , char *buf , char *fun ) 
{ 
  int r ;
  unsigned long __ms ;
  unsigned long tmp ;

  {
#line 389
  r = pt_command(tape, cmd, dlen, fun);
#line 390
  if (1) {
#line 390
    __const_udelay(4295000UL);
  } else {
#line 390
    __ms = 1UL;
#line 390
    goto ldv_15816;
    ldv_15815: 
#line 390
    __const_udelay(4295000UL);
    ldv_15816: 
#line 390
    tmp = __ms;
#line 390
    __ms = __ms - 1UL;
#line 390
    if (tmp != 0UL) {
#line 391
      goto ldv_15815;
    } else {

    }

  }
#line 391
  if (r == 0) {
#line 392
    r = pt_completion(tape, buf, fun);
  } else {

  }
#line 393
  if (r != 0) {
#line 394
    pt_req_sense(tape, (unsigned long )fun == (unsigned long )((char *)0));
  } else {

  }
#line 396
  return (r);
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_sleep(int cs ) 
{ 


  {
#line 401
  schedule_timeout_interruptible((long )cs);
#line 402
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_poll_dsc(struct pt_unit *tape , int pause , int tmo , char *msg ) 
{ 
  struct pi_adapter *pi ;
  int k ;
  int e ;
  int s ;
  u8 tmp ;

  {
#line 406
  pi = tape->pi;
#line 409
  k = 0;
#line 410
  e = 0;
#line 411
  s = 0;
#line 412
  goto ldv_15833;
  ldv_15832: 
#line 413
  pt_sleep(pause);
#line 414
  k = k + 1;
#line 415
  pi_connect(pi);
#line 416
  tmp = DRIVE(tape);
#line 416
  write_reg(pi, 6, (int )tmp);
#line 417
  s = read_reg(pi, 7);
#line 418
  e = read_reg(pi, 1);
#line 419
  pi_disconnect(pi);
#line 420
  if ((s & 17) != 0) {
#line 421
    goto ldv_15831;
  } else {

  }
  ldv_15833: ;
#line 412
  if (k < tmo) {
#line 413
    goto ldv_15832;
  } else {

  }
  ldv_15831: ;
#line 423
  if (k >= tmo || s & 1) {
#line 424
    if (k >= tmo) {
#line 425
      printk("%s: %s DSC timeout\n", (char *)(& tape->name), msg);
    } else {
#line 427
      printk("%s: %s stat=0x%x err=0x%x\n", (char *)(& tape->name), msg, s, e);
    }
#line 429
    pt_req_sense(tape, 0);
#line 430
    return (0);
  } else {

  }
#line 432
  return (1);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_media_access_cmd(struct pt_unit *tape , int tmo , char *cmd , char *fun ) 
{ 
  int tmp ;

  {
#line 437
  tmp = pt_command(tape, cmd, 0, fun);
#line 437
  if (tmp != 0) {
#line 438
    pt_req_sense(tape, 0);
#line 439
    return;
  } else {

  }
#line 441
  pi_disconnect(tape->pi);
#line 442
  pt_poll_dsc(tape, 250, tmo, fun);
#line 443
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_rewind(struct pt_unit *tape ) 
{ 
  char rw_cmd[12U] ;

  {
#line 447
  rw_cmd[0] = 1;
#line 447
  rw_cmd[1] = 0;
#line 447
  rw_cmd[2] = 0;
#line 447
  rw_cmd[3] = 0;
#line 447
  rw_cmd[4] = 0;
#line 447
  rw_cmd[5] = 0;
#line 447
  rw_cmd[6] = 0;
#line 447
  rw_cmd[7] = 0;
#line 447
  rw_cmd[8] = 0;
#line 447
  rw_cmd[9] = 0;
#line 447
  rw_cmd[10] = 0;
#line 447
  rw_cmd[11] = 0;
#line 449
  pt_media_access_cmd(tape, 1200, (char *)(& rw_cmd), (char *)"rewind");
#line 450
  return;
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_write_fm(struct pt_unit *tape ) 
{ 
  char wm_cmd[12U] ;

  {
#line 454
  wm_cmd[0] = 16;
#line 454
  wm_cmd[1] = 0;
#line 454
  wm_cmd[2] = 0;
#line 454
  wm_cmd[3] = 0;
#line 454
  wm_cmd[4] = 1;
#line 454
  wm_cmd[5] = 0;
#line 454
  wm_cmd[6] = 0;
#line 454
  wm_cmd[7] = 0;
#line 454
  wm_cmd[8] = 0;
#line 454
  wm_cmd[9] = 0;
#line 454
  wm_cmd[10] = 0;
#line 454
  wm_cmd[11] = 0;
#line 456
  pt_media_access_cmd(tape, 3000, (char *)(& wm_cmd), (char *)"write filemark");
#line 457
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_reset(struct pt_unit *tape ) 
{ 
  struct pi_adapter *pi ;
  int i ;
  int k ;
  int flg ;
  int expect[5U] ;
  u8 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 463
  pi = tape->pi;
#line 465
  expect[0] = 1;
#line 465
  expect[1] = 1;
#line 465
  expect[2] = 1;
#line 465
  expect[3] = 20;
#line 465
  expect[4] = 235;
#line 467
  pi_connect(pi);
#line 468
  tmp = DRIVE(tape);
#line 468
  write_reg(pi, 6, (int )tmp);
#line 469
  write_reg(pi, 7, 8);
#line 471
  pt_sleep(5);
#line 473
  k = 0;
#line 474
  goto ldv_15857;
  ldv_15856: 
#line 475
  pt_sleep(25);
  ldv_15857: 
#line 474
  tmp___0 = k;
#line 474
  k = k + 1;
#line 474
  if (tmp___0 <= 29) {
#line 474
    tmp___1 = status_reg(pi);
#line 474
    if ((tmp___1 & 128) != 0) {
#line 475
      goto ldv_15856;
    } else {
#line 477
      goto ldv_15858;
    }
  } else {

  }
  ldv_15858: 
#line 477
  flg = 1;
#line 478
  i = 0;
#line 478
  goto ldv_15860;
  ldv_15859: 
#line 479
  tmp___2 = read_reg(pi, i + 1);
#line 479
  flg = (tmp___2 == expect[i]) & flg;
#line 478
  i = i + 1;
  ldv_15860: ;
#line 478
  if (i <= 4) {
#line 479
    goto ldv_15859;
  } else {

  }

#line 481
  if (verbose != 0) {
#line 482
    printk("%s: Reset (%d) signature = ", (char *)(& tape->name), k);
#line 483
    i = 0;
#line 483
    goto ldv_15863;
    ldv_15862: 
#line 484
    tmp___3 = read_reg(pi, i + 1);
#line 484
    printk("%3x", tmp___3);
#line 483
    i = i + 1;
    ldv_15863: ;
#line 483
    if (i <= 4) {
#line 484
      goto ldv_15862;
    } else {

    }

#line 485
    if (flg == 0) {
#line 486
      printk(" (incorrect)");
    } else {

    }
#line 487
    printk("\n");
  } else {

  }
#line 490
  pi_disconnect(pi);
#line 491
  return (flg + -1);
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_ready_wait(struct pt_unit *tape , int tmo ) 
{ 
  char tr_cmd[12U] ;
  int k ;
  int p ;

  {
#line 496
  tr_cmd[0] = 0;
#line 496
  tr_cmd[1] = 0;
#line 496
  tr_cmd[2] = 0;
#line 496
  tr_cmd[3] = 0;
#line 496
  tr_cmd[4] = 0;
#line 496
  tr_cmd[5] = 0;
#line 496
  tr_cmd[6] = 0;
#line 496
  tr_cmd[7] = 0;
#line 496
  tr_cmd[8] = 0;
#line 496
  tr_cmd[9] = 0;
#line 496
  tr_cmd[10] = 0;
#line 496
  tr_cmd[11] = 0;
#line 499
  k = 0;
#line 500
  goto ldv_15873;
  ldv_15872: 
#line 501
  tape->last_sense = 0;
#line 502
  pt_atapi(tape, (char *)(& tr_cmd), 0, 0, verbose > 1 ? (char *)"test unit ready" : 0);
#line 503
  p = tape->last_sense;
#line 504
  if (p == 0) {
#line 505
    return (0);
  } else {

  }
#line 506
  if ((p & 65535) != 1026 && (p & 255) != 6) {
#line 507
    return (p);
  } else {

  }
#line 508
  k = k + 1;
#line 509
  pt_sleep(250);
  ldv_15873: ;
#line 500
  if (k < tmo) {
#line 501
    goto ldv_15872;
  } else {

  }

#line 511
  return (32);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void xs(char *buf , char *targ , int offs , int len ) 
{ 
  int j ;
  int k ;
  int l ;
  int tmp ;
  char tmp___0 ;

  {
#line 518
  j = 0;
#line 519
  l = 0;
#line 520
  k = 0;
#line 520
  goto ldv_15885;
  ldv_15884: ;
#line 521
  if ((int )((signed char )*(buf + (unsigned long )(k + offs))) != 32 || (int )*(buf + (unsigned long )(k + offs)) != l) {
#line 522
    tmp = j;
#line 522
    j = j + 1;
#line 522
    tmp___0 = *(buf + (unsigned long )(k + offs));
#line 522
    *(targ + (unsigned long )tmp) = tmp___0;
#line 522
    l = (int )tmp___0;
  } else {

  }
#line 520
  k = k + 1;
  ldv_15885: ;
#line 520
  if (k < len) {
#line 521
    goto ldv_15884;
  } else {

  }

#line 523
  if (l == 32) {
#line 524
    j = j - 1;
  } else {

  }
#line 525
  *(targ + (unsigned long )j) = 0;
#line 526
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int xn(char *buf , int offs , int size ) 
{ 
  int v ;
  int k ;

  {
#line 532
  v = 0;
#line 533
  k = 0;
#line 533
  goto ldv_15895;
  ldv_15894: 
#line 534
  v = v * 256 + ((int )*(buf + (unsigned long )(k + offs)) & 255);
#line 533
  k = k + 1;
  ldv_15895: ;
#line 533
  if (k < size) {
#line 534
    goto ldv_15894;
  } else {

  }

#line 535
  return (v);
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_identify(struct pt_unit *tape ) 
{ 
  int dt ;
  int s ;
  char *ms[2U] ;
  char mf[10U] ;
  char id[18U] ;
  char id_cmd[12U] ;
  char ms_cmd[12U] ;
  char ls_cmd[12U] ;
  char buf[36U] ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 541
  ms[0] = (char *)"master";
#line 541
  ms[1] = (char *)"slave";
#line 543
  id_cmd[0] = 18;
#line 543
  id_cmd[1] = 0;
#line 543
  id_cmd[2] = 0;
#line 543
  id_cmd[3] = 0;
#line 543
  id_cmd[4] = 36;
#line 543
  id_cmd[5] = 0;
#line 543
  id_cmd[6] = 0;
#line 543
  id_cmd[7] = 0;
#line 543
  id_cmd[8] = 0;
#line 543
  id_cmd[9] = 0;
#line 543
  id_cmd[10] = 0;
#line 543
  id_cmd[11] = 0;
#line 544
  ms_cmd[0] = 26;
#line 544
  ms_cmd[1] = 0;
#line 544
  ms_cmd[2] = 42;
#line 544
  ms_cmd[3] = 0;
#line 544
  ms_cmd[4] = 36;
#line 544
  ms_cmd[5] = 0;
#line 544
  ms_cmd[6] = 0;
#line 544
  ms_cmd[7] = 0;
#line 544
  ms_cmd[8] = 0;
#line 544
  ms_cmd[9] = 0;
#line 544
  ms_cmd[10] = 0;
#line 544
  ms_cmd[11] = 0;
#line 546
  ls_cmd[0] = 77;
#line 546
  ls_cmd[1] = 0;
#line 546
  ls_cmd[2] = 113;
#line 546
  ls_cmd[3] = 0;
#line 546
  ls_cmd[4] = 0;
#line 546
  ls_cmd[5] = 0;
#line 546
  ls_cmd[6] = 0;
#line 546
  ls_cmd[7] = 0;
#line 546
  ls_cmd[8] = 36;
#line 546
  ls_cmd[9] = 0;
#line 546
  ls_cmd[10] = 0;
#line 546
  ls_cmd[11] = 0;
#line 550
  s = pt_atapi(tape, (char *)(& id_cmd), 36, (char *)(& buf), (char *)"identify");
#line 551
  if (s != 0) {
#line 552
    return (-1);
  } else {

  }
#line 554
  dt = (int )buf[0] & 31;
#line 555
  if (dt != 1) {
#line 556
    if (verbose != 0) {
#line 557
      printk("%s: Drive %d, unsupported type %d\n", (char *)(& tape->name), tape->drive,
             dt);
    } else {

    }
#line 559
    return (-1);
  } else {

  }
#line 562
  xs((char *)(& buf), (char *)(& mf), 8, 8);
#line 563
  xs((char *)(& buf), (char *)(& id), 16, 16);
#line 565
  tape->flags = 0;
#line 566
  tape->capacity = 0;
#line 567
  tape->bs = 0;
#line 569
  tmp = pt_ready_wait(tape, 60);
#line 569
  if (tmp == 0) {
#line 570
    tape->flags = tape->flags | 1;
  } else {

  }
#line 572
  tmp___0 = pt_atapi(tape, (char *)(& ms_cmd), 36, (char *)(& buf), (char *)"mode sense");
#line 572
  if (tmp___0 == 0) {
#line 573
    if ((int )buf[2] >= 0) {
#line 574
      tape->flags = tape->flags | 2;
    } else {

    }
#line 575
    tape->bs = xn((char *)(& buf), 10, 2);
  } else {

  }
#line 578
  tmp___1 = pt_atapi(tape, (char *)(& ls_cmd), 36, (char *)(& buf), (char *)"log sense");
#line 578
  if (tmp___1 == 0) {
#line 579
    tape->capacity = xn((char *)(& buf), 24, 4);
  } else {

  }
#line 581
  printk("%s: %s %s, %s", (char *)(& tape->name), (char *)(& mf), (char *)(& id),
         ms[tape->drive]);
#line 582
  if ((tape->flags & 1) == 0) {
#line 583
    printk(", no media\n");
  } else {
#line 585
    if ((tape->flags & 2) == 0) {
#line 586
      printk(", RO");
    } else {

    }
#line 587
    printk(", blocksize %d, %d MB\n", tape->bs, tape->capacity / 1024);
  }
#line 590
  return (0);
}
}
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_probe(struct pt_unit *tape ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 600
  if (tape->drive == -1) {
#line 601
    tape->drive = 0;
#line 601
    goto ldv_15913;
    ldv_15912: 
#line 602
    tmp___0 = pt_reset(tape);
#line 602
    if (tmp___0 == 0) {
#line 603
      tmp = pt_identify(tape);
#line 603
      return (tmp);
    } else {

    }
#line 601
    tape->drive = tape->drive + 1;
    ldv_15913: ;
#line 601
    if (tape->drive <= 1) {
#line 602
      goto ldv_15912;
    } else {

    }

  } else {
#line 605
    tmp___2 = pt_reset(tape);
#line 605
    if (tmp___2 == 0) {
#line 606
      tmp___1 = pt_identify(tape);
#line 606
      return (tmp___1);
    } else {

    }
  }
#line 608
  return (-1);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_detect(void) 
{ 
  struct pt_unit *tape ;
  int specified ;
  int found ;
  int unit ;
  struct pt_unit *tape___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 614
  specified = 0;
#line 614
  found = 0;
#line 617
  printk("%s: %s version %s, major %d\n", name, name, (char *)"1.04", major);
#line 619
  specified = 0;
#line 620
  unit = 0;
#line 620
  goto ldv_15925;
  ldv_15924: 
#line 621
  tape___0 = (struct pt_unit *)(& pt) + (unsigned long )unit;
#line 622
  tape___0->pi = & tape___0->pia;
#line 623
  tape___0->available.counter = 1;
#line 624
  tape___0->flags = 0;
#line 625
  tape___0->last_sense = 0;
#line 626
  tape___0->present = 0;
#line 627
  tape___0->bufptr = 0;
#line 628
  tape___0->drive = (*(drives[unit]))[4];
#line 629
  snprintf((char *)(& tape___0->name), 8UL, "%s%d", name, unit);
#line 630
  if ((*(drives[unit]))[0] == 0) {
#line 631
    goto ldv_15923;
  } else {

  }
#line 632
  specified = specified + 1;
#line 633
  tmp___0 = pi_init(tape___0->pi, 0, (*(drives[unit]))[0], (*(drives[unit]))[3], (*(drives[unit]))[2],
                    (*(drives[unit]))[1], (*(drives[unit]))[5], (char *)(& pt_scratch),
                    3, verbose, (char *)(& tape___0->name));
#line 633
  if (tmp___0 != 0) {
#line 636
    tmp = pt_probe(tape___0);
#line 636
    if (tmp == 0) {
#line 637
      tape___0->present = 1;
#line 638
      found = found + 1;
    } else {
#line 640
      pi_release(tape___0->pi);
    }
  } else {

  }
  ldv_15923: 
#line 620
  unit = unit + 1;
  ldv_15925: ;
#line 620
  if (unit <= 3) {
#line 621
    goto ldv_15924;
  } else {

  }

#line 643
  if (specified == 0) {
#line 644
    tape = (struct pt_unit *)(& pt);
#line 645
    tmp___2 = pi_init(tape->pi, 1, -1, -1, -1, -1, -1, (char *)(& pt_scratch), 3,
                      verbose, (char *)(& tape->name));
#line 645
    if (tmp___2 != 0) {
#line 647
      tmp___1 = pt_probe(tape);
#line 647
      if (tmp___1 == 0) {
#line 648
        tape->present = 1;
#line 649
        found = found + 1;
      } else {
#line 651
        pi_release(tape->pi);
      }
    } else {

    }
  } else {

  }
#line 655
  if (found != 0) {
#line 656
    return (0);
  } else {

  }
#line 658
  printk("%s: No ATAPI tape drive detected\n", name);
#line 659
  return (-1);
}
}
#line 662 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_open(struct inode *inode , struct file *file ) 
{ 
  int unit ;
  unsigned int tmp ;
  struct pt_unit *tape ;
  int err ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  void *tmp___2 ;

  {
#line 664
  tmp = iminor((struct inode  const  *)inode);
#line 664
  unit = (int )tmp & 127;
#line 665
  tape = (struct pt_unit *)(& pt) + (unsigned long )unit;
#line 668
  lock_kernel();
#line 669
  if (unit > 3 || tape->present == 0) {
#line 670
    unlock_kernel();
#line 671
    return (-19);
  } else {

  }
#line 674
  err = -16;
#line 675
  tmp___0 = atomic_dec_and_test(& tape->available);
#line 675
  if (tmp___0 == 0) {
#line 676
    goto out;
  } else {

  }
#line 678
  pt_identify(tape);
#line 680
  err = -19;
#line 681
  if ((tape->flags & 1) == 0) {
#line 682
    goto out;
  } else {

  }
#line 684
  err = -30;
#line 685
  if ((tape->flags & 2) == 0 && (file->f_mode & 2U) != 0U) {
#line 686
    goto out;
  } else {

  }
#line 688
  tmp___1 = iminor((struct inode  const  *)inode);
#line 688
  if ((tmp___1 & 128U) == 0U) {
#line 689
    tape->flags = tape->flags | 4;
  } else {

  }
#line 691
  err = -12;
#line 692
  tmp___2 = kmalloc(16384UL, 208U);
#line 692
  tape->bufptr = (char *)tmp___2;
#line 693
  if ((unsigned long )tape->bufptr == (unsigned long )((char *)0)) {
#line 694
    printk("%s: buffer allocation failed\n", (char *)(& tape->name));
#line 695
    goto out;
  } else {

  }
#line 698
  file->private_data = (void *)tape;
#line 699
  unlock_kernel();
#line 700
  return (0);
  out: 
#line 703
  atomic_inc(& tape->available);
#line 704
  unlock_kernel();
#line 705
  return (err);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static long pt_ioctl(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  struct pt_unit *tape ;
  struct mtop *p ;
  struct mtop mtop ;
  unsigned long tmp ;

  {
#line 710
  tape = (struct pt_unit *)file->private_data;
#line 711
  p = (struct mtop *)arg;
#line 714
  switch (cmd) {
  case 1074294017U: 
#line 716
  tmp = copy_from_user((void *)(& mtop), (void const   *)p, 8U);
#line 716
  if (tmp != 0UL) {
#line 717
    return (-14L);
  } else {

  }
#line 719
  switch ((int )mtop.mt_op) {
  case 6: 
#line 722
  lock_kernel();
#line 723
  pt_rewind(tape);
#line 724
  unlock_kernel();
#line 725
  return (0L);
  case 5: 
#line 728
  lock_kernel();
#line 729
  pt_write_fm(tape);
#line 730
  unlock_kernel();
#line 731
  return (0L);
  default: 
#line 735
  printk("<7>%s: Unimplemented mt_op %d\n", (char *)(& tape->name), (int )mtop.mt_op);
#line 737
  return (-22L);
  }
  default: ;
#line 741
  return (-25L);
  }
}
}
#line 746 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_release(struct inode *inode , struct file *file ) 
{ 
  struct pt_unit *tape ;

  {
#line 748
  tape = (struct pt_unit *)file->private_data;
#line 750
  if (tape->available.counter > 1) {
#line 751
    return (-22);
  } else {

  }
#line 753
  if ((tape->flags & 8) != 0) {
#line 754
    pt_write_fm(tape);
  } else {

  }
#line 756
  if ((tape->flags & 4) != 0) {
#line 757
    pt_rewind(tape);
  } else {

  }
#line 759
  kfree((void const   *)tape->bufptr);
#line 760
  tape->bufptr = 0;
#line 762
  atomic_inc(& tape->available);
#line 764
  return (0);
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static ssize_t pt_read(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct pt_unit *tape ;
  struct pi_adapter *pi ;
  char rd_cmd[12U] ;
  int k ;
  int n ;
  int r ;
  int p ;
  int s ;
  int t ;
  int b ;
  int tmp ;
  int tmp___0 ;
  unsigned long __ms ;
  unsigned long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;

  {
#line 770
  tape = (struct pt_unit *)filp->private_data;
#line 771
  pi = tape->pi;
#line 772
  rd_cmd[0] = 8;
#line 772
  rd_cmd[1] = 1;
#line 772
  rd_cmd[2] = 0;
#line 772
  rd_cmd[3] = 0;
#line 772
  rd_cmd[4] = 0;
#line 772
  rd_cmd[5] = 0;
#line 772
  rd_cmd[6] = 0;
#line 772
  rd_cmd[7] = 0;
#line 772
  rd_cmd[8] = 0;
#line 772
  rd_cmd[9] = 0;
#line 772
  rd_cmd[10] = 0;
#line 772
  rd_cmd[11] = 0;
#line 775
  if ((tape->flags & 24) == 0) {
#line 776
    tape->flags = tape->flags | 16;
#line 777
    tmp = pt_atapi(tape, (char *)(& rd_cmd), 0, 0, (char *)"start read-ahead");
#line 777
    if (tmp != 0) {
#line 778
      return (-5L);
    } else {

    }
  } else
#line 779
  if ((tape->flags & 8) != 0) {
#line 780
    return (-5L);
  } else {

  }
#line 782
  if ((tape->flags & 32) != 0) {
#line 783
    return (0L);
  } else {

  }
#line 785
  t = 0;
#line 787
  goto ldv_15980;
  ldv_15979: 
#line 789
  tmp___0 = pt_poll_dsc(tape, 2, 3000, (char *)"read");
#line 789
  if (tmp___0 == 0) {
#line 790
    return (-5L);
  } else {

  }
#line 792
  n = (int )count;
#line 793
  if (n > 32768) {
#line 794
    n = 32768;
  } else {

  }
#line 795
  b = ((n + -1) + tape->bs) / tape->bs;
#line 796
  n = tape->bs * b;
#line 798
  rd_cmd[4] = (char )b;
#line 800
  r = pt_command(tape, (char *)(& rd_cmd), n, (char *)"read");
#line 802
  if (1) {
#line 802
    __const_udelay(4295000UL);
  } else {
#line 802
    __ms = 1UL;
#line 802
    goto ldv_15971;
    ldv_15970: 
#line 802
    __const_udelay(4295000UL);
    ldv_15971: 
#line 802
    tmp___1 = __ms;
#line 802
    __ms = __ms - 1UL;
#line 802
    if (tmp___1 != 0UL) {
#line 803
      goto ldv_15970;
    } else {

    }

  }
#line 804
  if (r != 0) {
#line 805
    pt_req_sense(tape, 0);
#line 806
    return (-5L);
  } else {

  }
  ldv_15977: 
#line 811
  r = pt_wait(tape, 128, 73, verbose > 1 ? (char *)"read DRQ" : 0, (char *)"");
#line 815
  if ((r & 126976) != 0) {
#line 816
    pi_disconnect(pi);
#line 817
    pt_req_sense(tape, 0);
#line 818
    return (-5L);
  } else {

  }
#line 821
  if (r != 0) {
#line 822
    tape->flags = tape->flags | 32;
  } else {

  }
#line 824
  s = read_reg(pi, 7);
#line 826
  if ((s & 8) == 0) {
#line 827
    goto ldv_15973;
  } else {

  }
#line 829
  tmp___2 = read_reg(pi, 4);
#line 829
  tmp___3 = read_reg(pi, 5);
#line 829
  n = tmp___2 + tmp___3 * 256;
#line 830
  tmp___4 = read_reg(pi, 2);
#line 830
  p = tmp___4 & 3;
#line 831
  if (p != 2) {
#line 832
    pi_disconnect(pi);
#line 833
    printk("%s: Phase error on read: %d\n", (char *)(& tape->name), p);
#line 835
    return (-5L);
  } else {

  }
#line 838
  goto ldv_15975;
  ldv_15974: 
#line 839
  k = n;
#line 840
  if (k > 16384) {
#line 841
    k = 16384;
  } else {

  }
#line 842
  pi_read_block(pi, tape->bufptr, k);
#line 843
  n = n - k;
#line 844
  b = k;
#line 845
  if ((size_t )b > count) {
#line 846
    b = (int )count;
  } else {

  }
#line 847
  tmp___5 = copy_to_user((void *)buf + (unsigned long )t, (void const   *)tape->bufptr,
                         (unsigned int )b);
#line 847
  if (tmp___5 != 0UL) {
#line 848
    pi_disconnect(pi);
#line 849
    return (-14L);
  } else {

  }
#line 851
  t = t + b;
#line 852
  count = count - (size_t )b;
  ldv_15975: ;
#line 838
  if (n > 0) {
#line 839
    goto ldv_15974;
  } else {

  }

#line 855
  goto ldv_15977;
  ldv_15973: 
#line 856
  pi_disconnect(pi);
#line 857
  if ((tape->flags & 32) != 0) {
#line 858
    goto ldv_15978;
  } else {

  }
  ldv_15980: ;
#line 787
  if (count != 0UL) {
#line 788
    goto ldv_15979;
  } else {

  }
  ldv_15978: ;
#line 861
  return ((ssize_t )t);
}
}
#line 865 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static ssize_t pt_write(struct file *filp , char const   *buf , size_t count , loff_t *ppos ) 
{ 
  struct pt_unit *tape ;
  struct pi_adapter *pi ;
  char wr_cmd[12U] ;
  int k ;
  int n ;
  int r ;
  int p ;
  int s ;
  int t ;
  int b ;
  int tmp ;
  int tmp___0 ;
  unsigned long __ms ;
  unsigned long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;

  {
#line 867
  tape = (struct pt_unit *)filp->private_data;
#line 868
  pi = tape->pi;
#line 869
  wr_cmd[0] = 10;
#line 869
  wr_cmd[1] = 1;
#line 869
  wr_cmd[2] = 0;
#line 869
  wr_cmd[3] = 0;
#line 869
  wr_cmd[4] = 0;
#line 869
  wr_cmd[5] = 0;
#line 869
  wr_cmd[6] = 0;
#line 869
  wr_cmd[7] = 0;
#line 869
  wr_cmd[8] = 0;
#line 869
  wr_cmd[9] = 0;
#line 869
  wr_cmd[10] = 0;
#line 869
  wr_cmd[11] = 0;
#line 872
  if ((tape->flags & 2) == 0) {
#line 873
    return (-30L);
  } else {

  }
#line 875
  if ((tape->flags & 24) == 0) {
#line 876
    tape->flags = tape->flags | 8;
#line 877
    tmp = pt_atapi(tape, (char *)(& wr_cmd), 0, 0, (char *)"start buffer-available mode");
#line 877
    if (tmp != 0) {
#line 879
      return (-5L);
    } else {

    }
  } else
#line 880
  if ((tape->flags & 16) != 0) {
#line 881
    return (-5L);
  } else {

  }
#line 883
  if ((tape->flags & 32) != 0) {
#line 884
    return (-28L);
  } else {

  }
#line 886
  t = 0;
#line 888
  goto ldv_16008;
  ldv_16007: 
#line 890
  tmp___0 = pt_poll_dsc(tape, 2, 3000, (char *)"write");
#line 890
  if (tmp___0 == 0) {
#line 891
    return (-5L);
  } else {

  }
#line 893
  n = (int )count;
#line 894
  if (n > 32768) {
#line 895
    n = 32768;
  } else {

  }
#line 896
  b = ((n + -1) + tape->bs) / tape->bs;
#line 897
  n = tape->bs * b;
#line 899
  wr_cmd[4] = (char )b;
#line 901
  r = pt_command(tape, (char *)(& wr_cmd), n, (char *)"write");
#line 903
  if (1) {
#line 903
    __const_udelay(4295000UL);
  } else {
#line 903
    __ms = 1UL;
#line 903
    goto ldv_15999;
    ldv_15998: 
#line 903
    __const_udelay(4295000UL);
    ldv_15999: 
#line 903
    tmp___1 = __ms;
#line 903
    __ms = __ms - 1UL;
#line 903
    if (tmp___1 != 0UL) {
#line 904
      goto ldv_15998;
    } else {

    }

  }
#line 905
  if (r != 0) {
#line 906
    pt_req_sense(tape, 0);
#line 907
    return (-5L);
  } else {

  }
  ldv_16005: 
#line 912
  r = pt_wait(tape, 128, 73, verbose > 1 ? (char *)"write DRQ" : 0, 0);
#line 916
  if ((r & 126976) != 0) {
#line 917
    pi_disconnect(pi);
#line 918
    pt_req_sense(tape, 0);
#line 919
    return (-5L);
  } else {

  }
#line 922
  if (r != 0) {
#line 923
    tape->flags = tape->flags | 32;
  } else {

  }
#line 925
  s = read_reg(pi, 7);
#line 927
  if ((s & 8) == 0) {
#line 928
    goto ldv_16001;
  } else {

  }
#line 930
  tmp___2 = read_reg(pi, 4);
#line 930
  tmp___3 = read_reg(pi, 5);
#line 930
  n = tmp___2 + tmp___3 * 256;
#line 931
  tmp___4 = read_reg(pi, 2);
#line 931
  p = tmp___4 & 3;
#line 932
  if (p != 0) {
#line 933
    pi_disconnect(pi);
#line 934
    printk("%s: Phase error on write: %d \n", (char *)(& tape->name), p);
#line 936
    return (-5L);
  } else {

  }
#line 939
  goto ldv_16003;
  ldv_16002: 
#line 940
  k = n;
#line 941
  if (k > 16384) {
#line 942
    k = 16384;
  } else {

  }
#line 943
  b = k;
#line 944
  if ((size_t )b > count) {
#line 945
    b = (int )count;
  } else {

  }
#line 946
  tmp___5 = copy_from_user((void *)tape->bufptr, (void const   *)buf + (unsigned long )t,
                           (unsigned int )b);
#line 946
  if (tmp___5 != 0UL) {
#line 947
    pi_disconnect(pi);
#line 948
    return (-14L);
  } else {

  }
#line 950
  pi_write_block(pi, tape->bufptr, k);
#line 951
  t = t + b;
#line 952
  count = count - (size_t )b;
#line 953
  n = n - k;
  ldv_16003: ;
#line 939
  if (n > 0) {
#line 940
    goto ldv_16002;
  } else {

  }

#line 956
  goto ldv_16005;
  ldv_16001: 
#line 957
  pi_disconnect(pi);
#line 958
  if ((tape->flags & 32) != 0) {
#line 959
    goto ldv_16006;
  } else {

  }
  ldv_16008: ;
#line 888
  if (count != 0UL) {
#line 889
    goto ldv_16007;
  } else {

  }
  ldv_16006: ;
#line 962
  return ((ssize_t )t);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static int pt_init(void) 
{ 
  int unit ;
  int err ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 970
  if (disable != 0) {
#line 971
    err = -22;
#line 972
    goto out;
  } else {

  }
#line 975
  tmp = pt_detect();
#line 975
  if (tmp != 0) {
#line 976
    err = -19;
#line 977
    goto out;
  } else {

  }
#line 980
  err = register_chrdev((unsigned int )major, (char const   *)name, & pt_fops);
#line 981
  if (err < 0) {
#line 982
    printk("pt_init: unable to get major number %d\n", major);
#line 983
    unit = 0;
#line 983
    goto ldv_16016;
    ldv_16015: ;
#line 984
    if (pt[unit].present != 0) {
#line 985
      pi_release(pt[unit].pi);
    } else {

    }
#line 983
    unit = unit + 1;
    ldv_16016: ;
#line 983
    if (unit <= 3) {
#line 984
      goto ldv_16015;
    } else {

    }

#line 986
    goto out;
  } else {

  }
#line 988
  major = err;
#line 989
  pt_class = class_create(& __this_module, "pt");
#line 990
  tmp___1 = IS_ERR((void const   *)pt_class);
#line 990
  if (tmp___1 != 0L) {
#line 991
    tmp___0 = PTR_ERR((void const   *)pt_class);
#line 991
    err = (int )tmp___0;
#line 992
    goto out_chrdev;
  } else {

  }
#line 995
  unit = 0;
#line 995
  goto ldv_16020;
  ldv_16019: ;
#line 996
  if (pt[unit].present != 0) {
#line 997
    device_create_drvdata(pt_class, 0, (dev_t )((major << 20) | unit), 0, "pt%d",
                          unit);
#line 1000
    device_create_drvdata(pt_class, 0, (dev_t )((major << 20) | (unit + 128)), 0,
                          "pt%dn", unit);
  } else {

  }
#line 995
  unit = unit + 1;
  ldv_16020: ;
#line 995
  if (unit <= 3) {
#line 996
    goto ldv_16019;
  } else {

  }

#line 1004
  goto out;
  out_chrdev: 
#line 1007
  unregister_chrdev((unsigned int )major, "pt");
  out: ;
#line 1009
  return (err);
}
}
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
static void pt_exit(void) 
{ 
  int unit ;

  {
#line 1015
  unit = 0;
#line 1015
  goto ldv_16027;
  ldv_16026: ;
#line 1016
  if (pt[unit].present != 0) {
#line 1017
    device_destroy(pt_class, (dev_t )((major << 20) | unit));
#line 1018
    device_destroy(pt_class, (dev_t )((major << 20) | (unit + 128)));
  } else {

  }
#line 1015
  unit = unit + 1;
  ldv_16027: ;
#line 1015
  if (unit <= 3) {
#line 1016
    goto ldv_16026;
  } else {

  }
#line 1020
  class_destroy(pt_class);
#line 1021
  unregister_chrdev((unsigned int )major, (char const   *)name);
#line 1022
  unit = 0;
#line 1022
  goto ldv_16030;
  ldv_16029: ;
#line 1023
  if (pt[unit].present != 0) {
#line 1024
    pi_release(pt[unit].pi);
  } else {

  }
#line 1022
  unit = unit + 1;
  ldv_16030: ;
#line 1022
  if (unit <= 3) {
#line 1023
    goto ldv_16029;
  } else {

  }

#line 1027
  return;
}
}
#line 1047
extern void ldv_check_final_state(void) ;
#line 1050
extern void ldv_check_return_value(int  ) ;
#line 1056
extern void ldv_initialize(void) ;
#line 1059
extern void ldv_handler_precall(void) ;
#line 1062
extern int nondet_int(void) ;
#line 1065 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
void main(void) 
{ 
  struct file *var_group1 ;
  char *var_pt_read_24_p1 ;
  size_t var_pt_read_24_p2 ;
  loff_t *var_pt_read_24_p3 ;
  ssize_t res_pt_read_24 ;
  char const   *var_pt_write_25_p1 ;
  size_t var_pt_write_25_p2 ;
  loff_t *var_pt_write_25_p3 ;
  ssize_t res_pt_write_25 ;
  unsigned int var_pt_ioctl_22_p1 ;
  unsigned long var_pt_ioctl_22_p2 ;
  struct inode *var_group2 ;
  int res_pt_open_21 ;
  int ldv_s_pt_fops_file_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1412
  ldv_s_pt_fops_file_operations = 0;
#line 1348
  LDV_IN_INTERRUPT = 1;
#line 1357
  ldv_initialize();
#line 1409
  ldv_handler_precall();
#line 1410
  tmp = pt_init();
#line 1410
  if (tmp != 0) {
#line 1411
    goto ldv_final;
  } else {

  }
#line 1416
  goto ldv_16083;
  ldv_16082: 
#line 1420
  tmp___0 = nondet_int();
#line 1420
  switch (tmp___0) {
  case 0: ;
#line 1425
  if (ldv_s_pt_fops_file_operations == 0) {
#line 1476
    ldv_handler_precall();
#line 1477
    res_pt_open_21 = pt_open(var_group2, var_group1);
#line 1478
    ldv_check_return_value(res_pt_open_21);
#line 1479
    if (res_pt_open_21 != 0) {
#line 1480
      goto ldv_module_exit;
    } else {

    }
#line 1481
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1487
  goto ldv_16076;
  case 1: ;
#line 1491
  if (ldv_s_pt_fops_file_operations == 1) {
#line 1542
    ldv_handler_precall();
#line 1543
    res_pt_read_24 = pt_read(var_group1, var_pt_read_24_p1, var_pt_read_24_p2, var_pt_read_24_p3);
#line 1544
    ldv_check_return_value((int )res_pt_read_24);
#line 1545
    if (res_pt_read_24 < 0L) {
#line 1546
      goto ldv_module_exit;
    } else {

    }
#line 1547
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1553
  goto ldv_16076;
  case 2: ;
#line 1557
  if (ldv_s_pt_fops_file_operations == 2) {
#line 1608
    ldv_handler_precall();
#line 1609
    res_pt_write_25 = pt_write(var_group1, var_pt_write_25_p1, var_pt_write_25_p2,
                               var_pt_write_25_p3);
#line 1610
    ldv_check_return_value((int )res_pt_write_25);
#line 1611
    if (res_pt_write_25 < 0L) {
#line 1612
      goto ldv_module_exit;
    } else {

    }
#line 1613
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1619
  goto ldv_16076;
  case 3: ;
#line 1623
  if (ldv_s_pt_fops_file_operations == 3) {
#line 1674
    ldv_handler_precall();
#line 1675
    pt_release(var_group2, var_group1);
#line 1676
    ldv_s_pt_fops_file_operations = 0;
  } else {

  }
#line 1682
  goto ldv_16076;
  case 4: 
#line 1737
  ldv_handler_precall();
#line 1738
  pt_ioctl(var_group1, var_pt_ioctl_22_p1, var_pt_ioctl_22_p2);
#line 1745
  goto ldv_16076;
  default: ;
#line 1746
  goto ldv_16076;
  }
  ldv_16076: ;
  ldv_16083: 
#line 1416
  tmp___1 = nondet_int();
#line 1416
  if (tmp___1 != 0 || ldv_s_pt_fops_file_operations != 0) {
#line 1418
    goto ldv_16082;
  } else {

  }

  ldv_module_exit: 
#line 1804
  ldv_handler_precall();
#line 1805
  pt_exit();
  ldv_final: 
#line 1808
  ldv_check_final_state();
#line 1811
  return;
}
}
#line 1826 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 1832
  ldv_check_alloc_flags(ldv_func_arg1);
#line 1834
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 1834
  return (tmp);
}
}
#line 1837 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 1843
  ldv_check_alloc_flags(flags);
#line 1845
  ldv_kmalloc_3(size, flags);
#line 1846
  return ((void *)0);
}
}
#line 1848 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 1854
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1856
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 1857
  return ((void *)0);
}
}
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/block/paride/pt.c.prepared"
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 1898
  ldv_check_alloc_flags(ldv_func_arg2);
#line 1900
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 1901
  return ((void *)0);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin  =    LDV_SPIN_UNLOCKED;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
#line 28
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 28
    ldv_error();
  }
#line 29
  return;
}
}
#line 31
extern struct page *ldv_some_page(void) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
#line 37
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 37
    ldv_error();
  }
#line 39
  tmp = ldv_some_page();
#line 39
  return (tmp);
}
}
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_nonatomic(void) 
{ 


  {
#line 46
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
#line 46
    ldv_error();
  }
#line 47
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_lock(void) 
{ 


  {
#line 53
  ldv_spin = LDV_SPIN_LOCKED;
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_unlock(void) 
{ 


  {
#line 60
  ldv_spin = LDV_SPIN_UNLOCKED;
#line 61
  return;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin_trylock(void) 
{ 
  int is_lock ;

  {
#line 69
  is_lock = ldv_undef_int();
#line 71
  if (is_lock) {
#line 74
    return (0);
  } else {
#line 79
    ldv_spin = LDV_SPIN_LOCKED;
#line 81
    return (1);
  }
}
}
