/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 7 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.o.c"
struct __anonstruct_ldv_801_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.o.c"
struct __anonstruct_ldv_805_3 {
   unsigned long miss ;
   unsigned long hit ;
};
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.o.c"
union __anonunion_ldv_806_1 {
   struct __anonstruct_ldv_801_2 ldv_801 ;
   struct __anonstruct_ldv_805_3 ldv_805 ;
};
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.o.c"
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion_ldv_806_1 ldv_806 ;
};
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 207
struct mm_struct;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 240 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1171_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1171_8 ldv_1171 ;
};
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 207
struct pid;
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgprot_t_12 {
   pgprotval_t pgprot ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgprot_t_12 pgprot_t;
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_1956_16 {
   unsigned int a ;
   unsigned int b ;
};
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_1971_17 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
union __anonunion_ldv_1972_15 {
   struct __anonstruct_ldv_1956_16 ldv_1956 ;
   struct __anonstruct_ldv_1971_17 ldv_1971 ;
};
#line 153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1972_15 ldv_1972 ;
};
#line 292 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1093
struct thread_struct;
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct raw_spinlock;
#line 49 "include/linux/err.h"
struct ds_context;
#line 51
struct bts_tracer;
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6322_22 {
   u64 rip ;
   u64 rdp ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6328_23 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6329_21 {
   struct __anonstruct_ldv_6322_22 ldv_6322 ;
   struct __anonstruct_ldv_6328_23 ldv_6328 ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6338_24 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_6329_21 ldv_6329 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_6338_24 ldv_6338 ;
};
#line 338 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_6817_27 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_28 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_29 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_6839_26 {
   struct __anonstruct_ldv_6817_27 ldv_6817 ;
   struct __anonstruct_futex_28 futex ;
   struct __anonstruct_nanosleep_29 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6839_26 ldv_6839 ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ftrace.h"
struct ftrace_ret_stack {
   unsigned long ret ;
   unsigned long func ;
   unsigned long long calltime ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_31 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_31 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 34 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 160 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 197 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_32 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_32 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_33 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 104 "include/linux/math64.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 634 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 152
struct rw_semaphore;
#line 154 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 744 "include/linux/mmzone.h"
struct file;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 186
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 196 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
#line 1085 "include/linux/mmzone.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 405
struct kobject;
#line 406 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 215 "include/linux/moduleparam.h"
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 34 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 163 "include/linux/timer.h"
struct hrtimer;
#line 164
enum hrtimer_restart;
#line 176
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 273 "include/linux/rcupdate.h"
struct tracepoint;
#line 274 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 180
struct module_sect_attrs;
#line 180
struct module_notes_attrs;
#line 180 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 478
struct device_driver;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 389 "include/linux/mod_devicetable.h"
struct i2c_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 184 "include/linux/ioport.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_mapping_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct driver_private;
#line 16
struct class;
#line 17
struct class_private;
#line 18
struct bus_type;
#line 19
struct bus_type_private;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 152 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 182
struct class_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 207
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 270 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
#line 299 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 360 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 369
struct dma_coherent_mem;
#line 369 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 551
struct dentry;
#line 555 "include/linux/capability.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160
struct prio_tree_node;
#line 160 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 115 "include/linux/mm_types.h"
struct __anonstruct_vm_set_103 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 115 "include/linux/mm_types.h"
union __anonunion_shared_102 {
   struct __anonstruct_vm_set_103 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 115
struct anon_vma;
#line 115
struct vm_operations_struct;
#line 115
struct mempolicy;
#line 115 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_102 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 177 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 183 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 189
struct mmu_notifier_mm;
#line 189 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_104 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_104 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_106 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_107 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_108 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_109 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_110 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_111 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_105 {
   int _pad[28U] ;
   struct __anonstruct__kill_106 _kill ;
   struct __anonstruct__timer_107 _timer ;
   struct __anonstruct__rt_108 _rt ;
   struct __anonstruct__sigchld_109 _sigchld ;
   struct __anonstruct__sigfault_110 _sigfault ;
   struct __anonstruct__sigpoll_111 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_105 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 293
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374
struct vfsmount;
#line 375 "include/linux/signal.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 14 "include/linux/path.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 27 "include/linux/fs_struct.h"
struct pid_namespace;
#line 27 "include/linux/fs_struct.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_114 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_114 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 126 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 150 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 458 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 841 "include/linux/sysctl.h"
struct nsproxy;
#line 28 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 31 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct cred;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 114
struct key_user;
#line 114 "include/linux/key.h"
union __anonunion_type_data_115 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 114 "include/linux/key.h"
union __anonunion_payload_116 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 114 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_115 type_data ;
   union __anonunion_payload_116 payload ;
};
#line 285 "include/linux/key.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 75 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 89 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 211
struct futex_pi_state;
#line 212
struct robust_list_head;
#line 213
struct bio;
#line 139 "include/linux/sched.h"
struct cfs_rq;
#line 140
struct task_group;
#line 335
struct user_namespace;
#line 397 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 432 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 440 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 457 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 484 "include/linux/sched.h"
union __anonunion_ldv_15648_118 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 484 "include/linux/sched.h"
union __anonunion_ldv_15653_119 {
   pid_t session ;
   pid_t __session ;
};
#line 484
struct tty_struct;
#line 484
struct taskstats;
#line 484
struct tty_audit_buf;
#line 484 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_15648_118 ldv_15648 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_15653_119 ldv_15653 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 637 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 683
struct backing_dev_info;
#line 684
struct reclaim_state;
#line 685 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 702 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 744
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 826 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 849
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 863 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 948
struct io_context;
#line 969
struct audit_context;
#line 970
struct pipe_inode_info;
#line 972
struct rq;
#line 973 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   int (*needs_post_schedule)(struct rq * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1026 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1031 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1100
struct rt_rq;
#line 1100 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1116
struct linux_binfmt;
#line 1116
struct files_struct;
#line 1116
struct css_set;
#line 1116
struct compat_robust_list_head;
#line 1116 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
#line 39 "include/linux/i2c.h"
struct i2c_msg;
#line 40
struct i2c_algorithm;
#line 41
struct i2c_adapter;
#line 42
struct i2c_client;
#line 43
struct i2c_driver;
#line 44
union i2c_smbus_data;
#line 45
struct i2c_board_info;
#line 94
struct i2c_client_address_data;
#line 94 "include/linux/i2c.h"
struct i2c_driver {
   int id ;
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*detach_client)(struct i2c_client * ) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t  ) ;
   int (*resume)(struct i2c_client * ) ;
   int (*command)(struct i2c_client * , unsigned int  , void * ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , int  , struct i2c_board_info * ) ;
   struct i2c_client_address_data  const  *address_data ;
   struct list_head clients ;
};
#line 181 "include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head list ;
   struct list_head detected ;
   struct completion released ;
};
#line 235 "include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   int irq ;
};
#line 311 "include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter * , struct i2c_msg * , int  ) ;
   int (*smbus_xfer)(struct i2c_adapter * , u16  , unsigned short  , char  , u8  ,
                     int  , union i2c_smbus_data * ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
#line 343 "include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int id ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   int (*client_register)(struct i2c_client * ) ;
   int (*client_unregister)(struct i2c_client * ) ;
   u8 level ;
   struct mutex bus_lock ;
   struct mutex clist_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   struct list_head clients ;
   char name[48U] ;
   struct completion dev_released ;
};
#line 384 "include/linux/i2c.h"
struct i2c_client_address_data {
   unsigned short const   *normal_i2c ;
   unsigned short const   *probe ;
   unsigned short const   *ignore ;
   unsigned short const   * const  *forces ;
};
#line 474 "include/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 525 "include/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 575 "include/linux/i2c.h"
struct i2c_algo_pca_data {
   void *data ;
   void (*write_byte)(void * , int  , int  ) ;
   int (*read_byte)(void * , int  ) ;
   int (*wait_for_completion)(void * ) ;
   void (*reset_chip)(void * ) ;
   unsigned int i2c_clock ;
};
#line 238 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 430 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 432
  tmp = kobject_name(& dev->kobj);
#line 432
  return (tmp);
}
}
#line 562
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 420 "include/linux/i2c.h"
extern int i2c_add_adapter(struct i2c_adapter * ) ;
#line 422
extern int i2c_add_numbered_adapter(struct i2c_adapter * ) ;
#line 67 "include/linux/i2c-algo-pca.h"
int i2c_pca_add_bus(struct i2c_adapter *adap ) ;
#line 68
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) ;
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int i2c_debug  ;
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca9665_reset(void *pd ) 
{ 
  struct i2c_algo_pca_data *adap ;

  {
#line 60
  adap = (struct i2c_algo_pca_data *)pd;
#line 61
  (*(adap->write_byte))(adap->data, 0, 5);
#line 62
  (*(adap->write_byte))(adap->data, 2, 165);
#line 63
  (*(adap->write_byte))(adap->data, 2, 90);
#line 64
  return;
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 73
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 73
  sta = tmp;
#line 74
  ______f.func = "pca_start";
#line 74
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 74
  ______f.line = 74U;
#line 74
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 74
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 74
  ______r = i2c_debug > 1;
#line 74
  if (______r != 0) {
#line 74
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 74
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 74
  if (______r != 0) {
#line 74
    printk("<7>=== START\n");
  } else {

  }
#line 75
  sta = sta | 32;
#line 76
  sta = sta & -25;
#line 77
  (*(adap->write_byte))(adap->data, 3, sta);
#line 78
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 78
  return (tmp___0);
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_repeated_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 88
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 88
  sta = tmp;
#line 89
  ______f.func = "pca_repeated_start";
#line 89
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 89
  ______f.line = 89U;
#line 89
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 89
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 89
  ______r = i2c_debug > 1;
#line 89
  if (______r != 0) {
#line 89
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 89
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 89
  if (______r != 0) {
#line 89
    printk("<7>=== REPEATED START\n");
  } else {

  }
#line 90
  sta = sta | 32;
#line 91
  sta = sta & -25;
#line 92
  (*(adap->write_byte))(adap->data, 3, sta);
#line 93
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 93
  return (tmp___0);
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca_stop(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 107
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 107
  sta = tmp;
#line 108
  ______f.func = "pca_stop";
#line 108
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 108
  ______f.line = 108U;
#line 108
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 108
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 108
  ______r = i2c_debug > 1;
#line 108
  if (______r != 0) {
#line 108
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 108
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 108
  if (______r != 0) {
#line 108
    printk("<7>=== STOP\n");
  } else {

  }
#line 109
  sta = sta | 16;
#line 110
  sta = sta & -41;
#line 111
  (*(adap->write_byte))(adap->data, 3, sta);
#line 112
  return;
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_address(struct i2c_algo_pca_data *adap , struct i2c_msg *msg ) 
{ 
  int sta ;
  int tmp ;
  int addr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;

  {
#line 122
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 122
  sta = tmp;
#line 125
  addr = ((int )msg->addr << 1) & 255;
#line 126
  ______f.func = "pca_address";
#line 126
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 126
  ______f.line = 126U;
#line 126
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 126
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 126
  ______r = (int )msg->flags & 1;
#line 126
  if (______r != 0) {
#line 126
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 126
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 126
  if (______r != 0) {
#line 127
    addr = addr | 1;
  } else {

  }
#line 128
  ______f___0.func = "pca_address";
#line 128
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 128
  ______f___0.line = 129U;
#line 128
  ______f___0.ldv_806.ldv_801.correct = 0UL;
#line 128
  ______f___0.ldv_806.ldv_801.incorrect = 0UL;
#line 128
  ______r___0 = i2c_debug > 1;
#line 128
  if (______r___0 != 0) {
#line 128
    ______f___0.ldv_806.ldv_805.hit = ______f___0.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 128
    ______f___0.ldv_806.ldv_805.miss = ______f___0.ldv_806.ldv_805.miss + 1UL;
  }
#line 128
  if (______r___0 != 0) {
#line 128
    printk("<7>=== SLAVE ADDRESS %#04x+%c=%#04x\n", (int )msg->addr, (int )msg->flags & 1 ? 82 : 87,
           addr);
  } else {

  }
#line 131
  (*(adap->write_byte))(adap->data, 1, addr);
#line 133
  sta = sta & -57;
#line 134
  (*(adap->write_byte))(adap->data, 3, sta);
#line 136
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 136
  return (tmp___0);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_tx_byte(struct i2c_algo_pca_data *adap , __u8 b ) 
{ 
  int sta ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 147
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 147
  sta = tmp;
#line 148
  ______f.func = "pca_tx_byte";
#line 148
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 148
  ______f.line = 148U;
#line 148
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 148
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 148
  ______r = i2c_debug > 1;
#line 148
  if (______r != 0) {
#line 148
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 148
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 148
  if (______r != 0) {
#line 148
    printk("<7>=== WRITE %#04x\n", (int )b);
  } else {

  }
#line 149
  (*(adap->write_byte))(adap->data, 1, (int )b);
#line 151
  sta = sta & -57;
#line 152
  (*(adap->write_byte))(adap->data, 3, sta);
#line 154
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 154
  return (tmp___0);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static void pca_rx_byte(struct i2c_algo_pca_data *adap , __u8 *b , int ack ) 
{ 
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 165
  tmp = (*(adap->read_byte))(adap->data, 1);
#line 165
  *b = (__u8 )tmp;
#line 166
  ______f.func = "pca_rx_byte";
#line 166
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 166
  ______f.line = 166U;
#line 166
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 166
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 166
  ______r = i2c_debug > 1;
#line 166
  if (______r != 0) {
#line 166
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 166
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 166
  if (______r != 0) {
#line 166
    printk("<7>=== READ %#04x %s\n", (int )*b, ack != 0 ? (char *)"ACK" : (char *)"NACK");
  } else {

  }
#line 167
  return;
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_rx_ack(struct i2c_algo_pca_data *adap , int ack ) 
{ 
  int sta ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___0 ;

  {
#line 177
  tmp = (*(adap->read_byte))(adap->data, 3);
#line 177
  sta = tmp;
#line 179
  sta = sta & -185;
#line 181
  ______f.func = "pca_rx_ack";
#line 181
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 181
  ______f.line = 181U;
#line 181
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 181
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 181
  ______r = ack != 0;
#line 181
  if (______r != 0) {
#line 181
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 181
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 181
  if (______r != 0) {
#line 182
    sta = sta | 128;
  } else {

  }
#line 184
  (*(adap->write_byte))(adap->data, 3, sta);
#line 185
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
#line 185
  return (tmp___0);
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_xfer(struct i2c_adapter *i2c_adap , struct i2c_msg *msgs , int num ) 
{ 
  struct i2c_algo_pca_data *adap ;
  struct i2c_msg *msg ;
  int curmsg ;
  int numbytes ;
  int state ;
  int ret ;
  int completed ;
  unsigned long timeout ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___1 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int addr ;
  int i ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;

  {
#line 192
  adap = (struct i2c_algo_pca_data *)i2c_adap->algo_data;
#line 193
  msg = 0;
#line 195
  numbytes = 0;
#line 198
  completed = 1;
#line 199
  timeout = (unsigned long )i2c_adap->timeout + (unsigned long )jiffies;
#line 201
  goto ldv_17183;
  ldv_17182: 
#line 202
  ______f.func = "pca_xfer";
#line 202
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 202
  ______f.line = 202U;
#line 202
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 202
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 202
  ______r = (1 != 0 && 1 != 0) && (long )jiffies - (long )timeout < 0L;
#line 202
  if (______r != 0) {
#line 202
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 202
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 202
  if (______r != 0) {
#line 203
    msleep(10U);
  } else {
#line 205
    tmp = dev_name((struct device  const  *)(& i2c_adap->dev));
#line 205
    tmp___0 = dev_driver_string((struct device  const  *)(& i2c_adap->dev));
#line 205
    printk("<7>%s %s: bus is not idle. status is %#04x\n", tmp___0, tmp, state);
#line 207
    return (-11);
  }
  ldv_17183: 
#line 201
  tmp___1 = (*(adap->read_byte))(adap->data, 0);
#line 201
  if (tmp___1 != 248) {
#line 202
    goto ldv_17182;
  } else {

  }
#line 211
  ______f___0.func = "pca_xfer";
#line 211
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 211
  ______f___0.line = 211U;
#line 211
  ______f___0.ldv_806.ldv_801.correct = 0UL;
#line 211
  ______f___0.ldv_806.ldv_801.incorrect = 0UL;
#line 211
  ______r___0 = i2c_debug > 0;
#line 211
  if (______r___0 != 0) {
#line 211
    ______f___0.ldv_806.ldv_805.hit = ______f___0.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 211
    ______f___0.ldv_806.ldv_805.miss = ______f___0.ldv_806.ldv_805.miss + 1UL;
  }
#line 211
  if (______r___0 != 0) {
#line 211
    printk("<7>{{{ XFER %d messages\n", num);
  } else {

  }
#line 213
  ______f___2.func = "pca_xfer";
#line 213
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 213
  ______f___2.line = 213U;
#line 213
  ______f___2.ldv_806.ldv_801.correct = 0UL;
#line 213
  ______f___2.ldv_806.ldv_801.incorrect = 0UL;
#line 213
  ______r___2 = i2c_debug > 1;
#line 213
  if (______r___2 != 0) {
#line 213
    ______f___2.ldv_806.ldv_805.hit = ______f___2.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 213
    ______f___2.ldv_806.ldv_805.miss = ______f___2.ldv_806.ldv_805.miss + 1UL;
  }
#line 213
  if (______r___2 != 0) {
#line 214
    curmsg = 0;
#line 214
    goto ldv_17200;
    ldv_17199: 
#line 216
    msg = msgs + (unsigned long )curmsg;
#line 218
    addr = (int )msg->addr & 127;
#line 220
    ______f___1.func = "pca_xfer";
#line 220
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 220
    ______f___1.line = 220U;
#line 220
    ______f___1.ldv_806.ldv_801.correct = 0UL;
#line 220
    ______f___1.ldv_806.ldv_801.incorrect = 0UL;
#line 220
    ______r___1 = (int )msg->flags & 1;
#line 220
    if (______r___1 != 0) {
#line 220
      ______f___1.ldv_806.ldv_805.hit = ______f___1.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 220
      ______f___1.ldv_806.ldv_805.miss = ______f___1.ldv_806.ldv_805.miss + 1UL;
    }
#line 220
    if (______r___1 != 0) {
#line 221
      printk("<6>    [%02d] RD %d bytes from %#02x [%#02x, ...]\n", curmsg, (int )msg->len,
             addr, (addr << 1) | 1);
    } else {
#line 224
      printk("<6>    [%02d] WR %d bytes to %#02x [%#02x%s", curmsg, (int )msg->len,
             addr, addr << 1, (unsigned int )msg->len == 0U ? (char *)"" : (char *)", ");
#line 227
      i = 0;
#line 227
      goto ldv_17197;
      ldv_17196: 
#line 228
      printk("%#04x%s", (int )*(msg->buf + (unsigned long )i), (int )msg->len - 1 == i ? (char *)"" : (char *)", ");
#line 227
      i = i + 1;
      ldv_17197: ;
#line 227
      if ((int )msg->len > i) {
#line 228
        goto ldv_17196;
      } else {

      }
#line 229
      printk("]\n");
    }
#line 214
    curmsg = curmsg + 1;
    ldv_17200: ;
#line 214
    if (curmsg < num) {
#line 215
      goto ldv_17199;
    } else {

    }

  } else {

  }
#line 234
  curmsg = 0;
#line 235
  ret = -121;
#line 236
  goto ldv_17269;
  ldv_17268: 
#line 237
  state = (*(adap->read_byte))(adap->data, 0);
#line 239
  ______f___3.func = "pca_xfer";
#line 239
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 239
  ______f___3.line = 239U;
#line 239
  ______f___3.ldv_806.ldv_801.correct = 0UL;
#line 239
  ______f___3.ldv_806.ldv_801.incorrect = 0UL;
#line 239
  ______r___3 = i2c_debug > 2;
#line 239
  if (______r___3 != 0) {
#line 239
    ______f___3.ldv_806.ldv_805.hit = ______f___3.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 239
    ______f___3.ldv_806.ldv_805.miss = ______f___3.ldv_806.ldv_805.miss + 1UL;
  }
#line 239
  if (______r___3 != 0) {
#line 239
    printk("<7>STATE is 0x%02x\n", state);
  } else {

  }
#line 240
  msg = msgs + (unsigned long )curmsg;
#line 242
  switch (state) {
  case 248: 
#line 244
  completed = pca_start(adap);
#line 245
  goto ldv_17206;
  case 8: ;
  case 16: 
#line 249
  completed = pca_address(adap, msg);
#line 250
  goto ldv_17206;
  case 24: ;
  case 40: 
#line 254
  ______f___4.func = "pca_xfer";
#line 254
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 254
  ______f___4.line = 254U;
#line 254
  ______f___4.ldv_806.ldv_801.correct = 0UL;
#line 254
  ______f___4.ldv_806.ldv_801.incorrect = 0UL;
#line 254
  ______r___4 = (int )msg->len > numbytes;
#line 254
  if (______r___4 != 0) {
#line 254
    ______f___4.ldv_806.ldv_805.hit = ______f___4.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 254
    ______f___4.ldv_806.ldv_805.miss = ______f___4.ldv_806.ldv_805.miss + 1UL;
  }
#line 254
  if (______r___4 != 0) {
#line 255
    completed = pca_tx_byte(adap, (int )*(msg->buf + (unsigned long )numbytes));
#line 257
    numbytes = numbytes + 1;
#line 258
    goto ldv_17206;
  } else {

  }
#line 260
  curmsg = curmsg + 1;
#line 260
  numbytes = 0;
#line 261
  ______f___5.func = "pca_xfer";
#line 261
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 261
  ______f___5.line = 261U;
#line 261
  ______f___5.ldv_806.ldv_801.correct = 0UL;
#line 261
  ______f___5.ldv_806.ldv_801.incorrect = 0UL;
#line 261
  ______r___5 = curmsg == num;
#line 261
  if (______r___5 != 0) {
#line 261
    ______f___5.ldv_806.ldv_805.hit = ______f___5.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 261
    ______f___5.ldv_806.ldv_805.miss = ______f___5.ldv_806.ldv_805.miss + 1UL;
  }
#line 261
  if (______r___5 != 0) {
#line 262
    pca_stop(adap);
  } else {
#line 264
    completed = pca_repeated_start(adap);
  }
#line 265
  goto ldv_17206;
  case 32: 
#line 268
  ______f___6.func = "pca_xfer";
#line 268
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 268
  ______f___6.line = 268U;
#line 268
  ______f___6.ldv_806.ldv_801.correct = 0UL;
#line 268
  ______f___6.ldv_806.ldv_801.incorrect = 0UL;
#line 268
  ______r___6 = i2c_debug > 1;
#line 268
  if (______r___6 != 0) {
#line 268
    ______f___6.ldv_806.ldv_805.hit = ______f___6.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 268
    ______f___6.ldv_806.ldv_805.miss = ______f___6.ldv_806.ldv_805.miss + 1UL;
  }
#line 268
  if (______r___6 != 0) {
#line 268
    printk("<7>NOT ACK received after SLA+W\n");
  } else {

  }
#line 269
  pca_stop(adap);
#line 270
  goto out;
  case 64: 
#line 273
  completed = pca_rx_ack(adap, (unsigned int )msg->len > 1U);
#line 274
  goto ldv_17206;
  case 80: 
#line 277
  ______f___7.func = "pca_xfer";
#line 277
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 277
  ______f___7.line = 277U;
#line 277
  ______f___7.ldv_806.ldv_801.correct = 0UL;
#line 277
  ______f___7.ldv_806.ldv_801.incorrect = 0UL;
#line 277
  ______r___7 = (int )msg->len > numbytes;
#line 277
  if (______r___7 != 0) {
#line 277
    ______f___7.ldv_806.ldv_805.hit = ______f___7.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 277
    ______f___7.ldv_806.ldv_805.miss = ______f___7.ldv_806.ldv_805.miss + 1UL;
  }
#line 277
  if (______r___7 != 0) {
#line 278
    pca_rx_byte(adap, msg->buf + (unsigned long )numbytes, 1);
#line 279
    numbytes = numbytes + 1;
#line 280
    completed = pca_rx_ack(adap, (int )msg->len - 1 > numbytes);
#line 282
    goto ldv_17206;
  } else {

  }
#line 284
  curmsg = curmsg + 1;
#line 284
  numbytes = 0;
#line 285
  ______f___8.func = "pca_xfer";
#line 285
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 285
  ______f___8.line = 285U;
#line 285
  ______f___8.ldv_806.ldv_801.correct = 0UL;
#line 285
  ______f___8.ldv_806.ldv_801.incorrect = 0UL;
#line 285
  ______r___8 = curmsg == num;
#line 285
  if (______r___8 != 0) {
#line 285
    ______f___8.ldv_806.ldv_805.hit = ______f___8.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 285
    ______f___8.ldv_806.ldv_805.miss = ______f___8.ldv_806.ldv_805.miss + 1UL;
  }
#line 285
  if (______r___8 != 0) {
#line 286
    pca_stop(adap);
  } else {
#line 288
    completed = pca_repeated_start(adap);
  }
#line 289
  goto ldv_17206;
  case 72: 
#line 292
  ______f___9.func = "pca_xfer";
#line 292
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 292
  ______f___9.line = 292U;
#line 292
  ______f___9.ldv_806.ldv_801.correct = 0UL;
#line 292
  ______f___9.ldv_806.ldv_801.incorrect = 0UL;
#line 292
  ______r___9 = i2c_debug > 1;
#line 292
  if (______r___9 != 0) {
#line 292
    ______f___9.ldv_806.ldv_805.hit = ______f___9.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 292
    ______f___9.ldv_806.ldv_805.miss = ______f___9.ldv_806.ldv_805.miss + 1UL;
  }
#line 292
  if (______r___9 != 0) {
#line 292
    printk("<7>NOT ACK received after SLA+R\n");
  } else {

  }
#line 293
  pca_stop(adap);
#line 294
  goto out;
  case 48: 
#line 297
  ______f___10.func = "pca_xfer";
#line 297
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 297
  ______f___10.line = 297U;
#line 297
  ______f___10.ldv_806.ldv_801.correct = 0UL;
#line 297
  ______f___10.ldv_806.ldv_801.incorrect = 0UL;
#line 297
  ______r___10 = i2c_debug > 1;
#line 297
  if (______r___10 != 0) {
#line 297
    ______f___10.ldv_806.ldv_805.hit = ______f___10.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 297
    ______f___10.ldv_806.ldv_805.miss = ______f___10.ldv_806.ldv_805.miss + 1UL;
  }
#line 297
  if (______r___10 != 0) {
#line 297
    printk("<7>NOT ACK received after data byte\n");
  } else {

  }
#line 298
  goto out;
  case 56: 
#line 301
  ______f___11.func = "pca_xfer";
#line 301
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 301
  ______f___11.line = 301U;
#line 301
  ______f___11.ldv_806.ldv_801.correct = 0UL;
#line 301
  ______f___11.ldv_806.ldv_801.incorrect = 0UL;
#line 301
  ______r___11 = i2c_debug > 1;
#line 301
  if (______r___11 != 0) {
#line 301
    ______f___11.ldv_806.ldv_805.hit = ______f___11.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 301
    ______f___11.ldv_806.ldv_805.miss = ______f___11.ldv_806.ldv_805.miss + 1UL;
  }
#line 301
  if (______r___11 != 0) {
#line 301
    printk("<7>Arbitration lost\n");
  } else {

  }
#line 302
  goto out;
  case 88: 
#line 305
  ______f___14.func = "pca_xfer";
#line 305
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 305
  ______f___14.line = 305U;
#line 305
  ______f___14.ldv_806.ldv_801.correct = 0UL;
#line 305
  ______f___14.ldv_806.ldv_801.incorrect = 0UL;
#line 305
  ______r___14 = (int )msg->len - 1 == numbytes;
#line 305
  if (______r___14 != 0) {
#line 305
    ______f___14.ldv_806.ldv_805.hit = ______f___14.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 305
    ______f___14.ldv_806.ldv_805.miss = ______f___14.ldv_806.ldv_805.miss + 1UL;
  }
#line 305
  if (______r___14 != 0) {
#line 306
    pca_rx_byte(adap, msg->buf + (unsigned long )numbytes, 0);
#line 307
    curmsg = curmsg + 1;
#line 307
    numbytes = 0;
#line 308
    ______f___12.func = "pca_xfer";
#line 308
    ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 308
    ______f___12.line = 308U;
#line 308
    ______f___12.ldv_806.ldv_801.correct = 0UL;
#line 308
    ______f___12.ldv_806.ldv_801.incorrect = 0UL;
#line 308
    ______r___12 = curmsg == num;
#line 308
    if (______r___12 != 0) {
#line 308
      ______f___12.ldv_806.ldv_805.hit = ______f___12.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 308
      ______f___12.ldv_806.ldv_805.miss = ______f___12.ldv_806.ldv_805.miss + 1UL;
    }
#line 308
    if (______r___12 != 0) {
#line 309
      pca_stop(adap);
    } else {
#line 311
      completed = pca_repeated_start(adap);
    }
  } else {
#line 313
    ______f___13.func = "pca_xfer";
#line 313
    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 313
    ______f___13.line = 315U;
#line 313
    ______f___13.ldv_806.ldv_801.correct = 0UL;
#line 313
    ______f___13.ldv_806.ldv_801.incorrect = 0UL;
#line 313
    ______r___13 = i2c_debug > 1;
#line 313
    if (______r___13 != 0) {
#line 313
      ______f___13.ldv_806.ldv_805.hit = ______f___13.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 313
      ______f___13.ldv_806.ldv_805.miss = ______f___13.ldv_806.ldv_805.miss + 1UL;
    }
#line 313
    if (______r___13 != 0) {
#line 313
      printk("<7>NOT ACK sent after data byte received. Not final byte. numbytes %d. len %d\n",
             numbytes, (int )msg->len);
    } else {

    }
#line 316
    pca_stop(adap);
#line 317
    goto out;
  }
#line 319
  goto ldv_17206;
  case 112: 
#line 321
  ______f___15.func = "pca_xfer";
#line 321
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 321
  ______f___15.line = 321U;
#line 321
  ______f___15.ldv_806.ldv_801.correct = 0UL;
#line 321
  ______f___15.ldv_806.ldv_801.incorrect = 0UL;
#line 321
  ______r___15 = i2c_debug > 1;
#line 321
  if (______r___15 != 0) {
#line 321
    ______f___15.ldv_806.ldv_805.hit = ______f___15.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 321
    ______f___15.ldv_806.ldv_805.miss = ______f___15.ldv_806.ldv_805.miss + 1UL;
  }
#line 321
  if (______r___15 != 0) {
#line 321
    printk("<7>BUS ERROR - SDA Stuck low\n");
  } else {

  }
#line 322
  (*(adap->reset_chip))(adap->data);
#line 323
  goto out;
  case 144: 
#line 325
  ______f___16.func = "pca_xfer";
#line 325
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 325
  ______f___16.line = 325U;
#line 325
  ______f___16.ldv_806.ldv_801.correct = 0UL;
#line 325
  ______f___16.ldv_806.ldv_801.incorrect = 0UL;
#line 325
  ______r___16 = i2c_debug > 1;
#line 325
  if (______r___16 != 0) {
#line 325
    ______f___16.ldv_806.ldv_805.hit = ______f___16.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 325
    ______f___16.ldv_806.ldv_805.miss = ______f___16.ldv_806.ldv_805.miss + 1UL;
  }
#line 325
  if (______r___16 != 0) {
#line 325
    printk("<7>BUS ERROR - SCL Stuck low\n");
  } else {

  }
#line 326
  (*(adap->reset_chip))(adap->data);
#line 327
  goto out;
  case 0: 
#line 329
  ______f___17.func = "pca_xfer";
#line 329
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 329
  ______f___17.line = 329U;
#line 329
  ______f___17.ldv_806.ldv_801.correct = 0UL;
#line 329
  ______f___17.ldv_806.ldv_801.incorrect = 0UL;
#line 329
  ______r___17 = i2c_debug > 1;
#line 329
  if (______r___17 != 0) {
#line 329
    ______f___17.ldv_806.ldv_805.hit = ______f___17.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 329
    ______f___17.ldv_806.ldv_805.miss = ______f___17.ldv_806.ldv_805.miss + 1UL;
  }
#line 329
  if (______r___17 != 0) {
#line 329
    printk("<7>BUS ERROR - Illegal START or STOP\n");
  } else {

  }
#line 330
  (*(adap->reset_chip))(adap->data);
#line 331
  goto out;
  default: 
#line 333
  tmp___2 = dev_name((struct device  const  *)(& i2c_adap->dev));
#line 333
  tmp___3 = dev_driver_string((struct device  const  *)(& i2c_adap->dev));
#line 333
  printk("<3>%s %s: unhandled SIO state 0x%02x\n", tmp___3, tmp___2, state);
#line 334
  goto ldv_17206;
  }
  ldv_17206: 
#line 337
  ______f___18.func = "pca_xfer";
#line 337
  ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 337
  ______f___18.line = 337U;
#line 337
  ______f___18.ldv_806.ldv_801.correct = 0UL;
#line 337
  ______f___18.ldv_806.ldv_801.incorrect = 0UL;
#line 337
  ______r___18 = completed == 0;
#line 337
  if (______r___18 != 0) {
#line 337
    ______f___18.ldv_806.ldv_805.hit = ______f___18.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 337
    ______f___18.ldv_806.ldv_805.miss = ______f___18.ldv_806.ldv_805.miss + 1UL;
  }
#line 337
  if (______r___18 != 0) {
#line 338
    goto out;
  } else {

  }
  ldv_17269: ;
#line 236
  if (curmsg < num) {
#line 237
    goto ldv_17268;
  } else {

  }
#line 341
  ret = curmsg;
  out: 
#line 343
  ______f___19.func = "pca_xfer";
#line 343
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 343
  ______f___19.line = 346U;
#line 343
  ______f___19.ldv_806.ldv_801.correct = 0UL;
#line 343
  ______f___19.ldv_806.ldv_801.incorrect = 0UL;
#line 343
  ______r___19 = i2c_debug > 0;
#line 343
  if (______r___19 != 0) {
#line 343
    ______f___19.ldv_806.ldv_805.hit = ______f___19.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 343
    ______f___19.ldv_806.ldv_805.miss = ______f___19.ldv_806.ldv_805.miss + 1UL;
  }
#line 343
  if (______r___19 != 0) {
#line 343
    tmp___4 = (*(adap->read_byte))(adap->data, 3);
#line 343
    tmp___5 = (*(adap->read_byte))(adap->data, 0);
#line 343
    printk("<7>}}} transfered %d/%d messages. status is %#04x. control is %#04x\n",
           curmsg, num, tmp___5, tmp___4);
  } else {

  }
#line 347
  return (ret);
}
}
#line 350 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static u32 pca_func(struct i2c_adapter *adap ) 
{ 


  {
#line 352
  return (251592713U);
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static struct i2c_algorithm  const  pca_algo  =    {& pca_xfer, 0, & pca_func};
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static unsigned int pca_probe_chip(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 362
  pca_data = (struct i2c_algo_pca_data *)adap->algo_data;
#line 368
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
#line 369
  (*(pca_data->write_byte))(pca_data->data, 2, 170);
#line 370
  (*(pca_data->write_byte))(pca_data->data, 0, 4);
#line 371
  (*(pca_data->write_byte))(pca_data->data, 2, 0);
#line 372
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
#line 373
  ______f.func = "pca_probe_chip";
#line 373
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 373
  ______f.line = 373U;
#line 373
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 373
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 373
  tmp = (*(pca_data->read_byte))(pca_data->data, 2);
#line 373
  ______r = tmp == 170;
#line 373
  if (______r != 0) {
#line 373
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 373
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 373
  if (______r != 0) {
#line 374
    printk("<6>%s: PCA9665 detected.\n", (char *)(& adap->name));
#line 375
    return (1U);
  } else {
#line 377
    printk("<6>%s: PCA9564 detected.\n", (char *)(& adap->name));
#line 378
    return (0U);
  }
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
static int pca_init(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int freqs[8U] ;
  int clock ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int clock___0 ;
  int mode ;
  int tlow ;
  int thi ;
  int min_tlow ;
  int min_thi ;
  int raise_fall_time ;
  struct i2c_algo_pca_data *pca_data___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  unsigned int tmp ;

  {
#line 384
  pca_data = (struct i2c_algo_pca_data *)adap->algo_data;
#line 386
  adap->algo = & pca_algo;
#line 388
  ______f___6.func = "pca_init";
#line 388
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 388
  ______f___6.line = 388U;
#line 388
  ______f___6.ldv_806.ldv_801.correct = 0UL;
#line 388
  ______f___6.ldv_806.ldv_801.incorrect = 0UL;
#line 388
  tmp = pca_probe_chip(adap);
#line 388
  ______r___6 = tmp == 0U;
#line 388
  if (______r___6 != 0) {
#line 388
    ______f___6.ldv_806.ldv_805.hit = ______f___6.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 388
    ______f___6.ldv_806.ldv_805.miss = ______f___6.ldv_806.ldv_805.miss + 1UL;
  }
#line 388
  if (______r___6 != 0) {
#line 389
    freqs[0] = 330;
#line 389
    freqs[1] = 288;
#line 389
    freqs[2] = 217;
#line 389
    freqs[3] = 146;
#line 389
    freqs[4] = 88;
#line 389
    freqs[5] = 59;
#line 389
    freqs[6] = 44;
#line 389
    freqs[7] = 36;
#line 392
    ______f.func = "pca_init";
#line 392
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 392
    ______f.line = 392U;
#line 392
    ______f.ldv_806.ldv_801.correct = 0UL;
#line 392
    ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 392
    ______r = pca_data->i2c_clock > 7U;
#line 392
    if (______r != 0) {
#line 392
      ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 392
      ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
    }
#line 392
    if (______r != 0) {
#line 393
      switch (pca_data->i2c_clock) {
      case 330000U: 
#line 395
      pca_data->i2c_clock = 0U;
#line 396
      goto ldv_17300;
      case 288000U: 
#line 398
      pca_data->i2c_clock = 1U;
#line 399
      goto ldv_17300;
      case 217000U: 
#line 401
      pca_data->i2c_clock = 2U;
#line 402
      goto ldv_17300;
      case 146000U: 
#line 404
      pca_data->i2c_clock = 3U;
#line 405
      goto ldv_17300;
      case 88000U: 
#line 407
      pca_data->i2c_clock = 4U;
#line 408
      goto ldv_17300;
      case 59000U: 
#line 410
      pca_data->i2c_clock = 5U;
#line 411
      goto ldv_17300;
      case 44000U: 
#line 413
      pca_data->i2c_clock = 6U;
#line 414
      goto ldv_17300;
      case 36000U: 
#line 416
      pca_data->i2c_clock = 7U;
#line 417
      goto ldv_17300;
      default: 
#line 419
      printk("<4>%s: Invalid I2C clock speed selected. Using default 59kHz.\n", (char *)(& adap->name));
#line 422
      pca_data->i2c_clock = 5U;
      }
      ldv_17300: ;
    } else {
#line 425
      printk("<4>%s: Choosing the clock frequency based on index is deprecated. Use the nominal frequency.\n",
             (char *)(& adap->name));
    }
#line 431
    (*(pca_data->reset_chip))(pca_data->data);
#line 433
    clock = (int )pca_data->i2c_clock;
#line 434
    printk("<6>%s: Clock frequency is %dkHz\n", (char *)(& adap->name), freqs[clock]);
#line 437
    (*(pca_data->write_byte))(pca_data->data, 3, clock | 64);
  } else {
#line 453
    pca_data___0 = (struct i2c_algo_pca_data *)adap->algo_data;
#line 458
    pca_data___0->reset_chip = & pca9665_reset;
#line 460
    ______f___0.func = "pca_init";
#line 460
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 460
    ______f___0.line = 460U;
#line 460
    ______f___0.ldv_806.ldv_801.correct = 0UL;
#line 460
    ______f___0.ldv_806.ldv_801.incorrect = 0UL;
#line 460
    ______r___0 = pca_data___0->i2c_clock > 1265800U;
#line 460
    if (______r___0 != 0) {
#line 460
      ______f___0.ldv_806.ldv_805.hit = ______f___0.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 460
      ______f___0.ldv_806.ldv_805.miss = ______f___0.ldv_806.ldv_805.miss + 1UL;
    }
#line 460
    if (______r___0 != 0) {
#line 461
      printk("<4>%s: I2C clock speed too high. Using 1265.8kHz.\n", (char *)(& adap->name));
#line 463
      pca_data___0->i2c_clock = 1265800U;
    } else {

    }
#line 466
    ______f___1.func = "pca_init";
#line 466
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 466
    ______f___1.line = 466U;
#line 466
    ______f___1.ldv_806.ldv_801.correct = 0UL;
#line 466
    ______f___1.ldv_806.ldv_801.incorrect = 0UL;
#line 466
    ______r___1 = pca_data___0->i2c_clock <= 60299U;
#line 466
    if (______r___1 != 0) {
#line 466
      ______f___1.ldv_806.ldv_805.hit = ______f___1.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 466
      ______f___1.ldv_806.ldv_805.miss = ______f___1.ldv_806.ldv_805.miss + 1UL;
    }
#line 466
    if (______r___1 != 0) {
#line 467
      printk("<4>%s: I2C clock speed too low. Using 60.3kHz.\n", (char *)(& adap->name));
#line 469
      pca_data___0->i2c_clock = 60300U;
    } else {

    }
#line 473
    clock___0 = (int )(pca_data___0->i2c_clock / 100U);
#line 475
    ______f___4.func = "pca_init";
#line 475
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 475
    ______f___4.line = 475U;
#line 475
    ______f___4.ldv_806.ldv_801.correct = 0UL;
#line 475
    ______f___4.ldv_806.ldv_801.incorrect = 0UL;
#line 475
    ______r___4 = pca_data___0->i2c_clock > 10000U;
#line 475
    if (______r___4 != 0) {
#line 475
      ______f___4.ldv_806.ldv_805.hit = ______f___4.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 475
      ______f___4.ldv_806.ldv_805.miss = ______f___4.ldv_806.ldv_805.miss + 1UL;
    }
#line 475
    if (______r___4 != 0) {
#line 476
      mode = 3;
#line 477
      min_tlow = 14;
#line 478
      min_thi = 5;
#line 479
      raise_fall_time = 22;
    } else {
#line 480
      ______f___3.func = "pca_init";
#line 480
      ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 480
      ______f___3.line = 480U;
#line 480
      ______f___3.ldv_806.ldv_801.correct = 0UL;
#line 480
      ______f___3.ldv_806.ldv_801.incorrect = 0UL;
#line 480
      ______r___3 = pca_data___0->i2c_clock > 4000U;
#line 480
      if (______r___3 != 0) {
#line 480
        ______f___3.ldv_806.ldv_805.hit = ______f___3.ldv_806.ldv_805.hit + 1UL;
      } else {
#line 480
        ______f___3.ldv_806.ldv_805.miss = ______f___3.ldv_806.ldv_805.miss + 1UL;
      }
#line 480
      if (______r___3 != 0) {
#line 481
        mode = 2;
#line 482
        min_tlow = 17;
#line 483
        min_thi = 9;
#line 484
        raise_fall_time = 22;
      } else {
#line 485
        ______f___2.func = "pca_init";
#line 485
        ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 485
        ______f___2.line = 485U;
#line 485
        ______f___2.ldv_806.ldv_801.correct = 0UL;
#line 485
        ______f___2.ldv_806.ldv_801.incorrect = 0UL;
#line 485
        ______r___2 = pca_data___0->i2c_clock > 1000U;
#line 485
        if (______r___2 != 0) {
#line 485
          ______f___2.ldv_806.ldv_805.hit = ______f___2.ldv_806.ldv_805.hit + 1UL;
        } else {
#line 485
          ______f___2.ldv_806.ldv_805.miss = ______f___2.ldv_806.ldv_805.miss + 1UL;
        }
#line 485
        if (______r___2 != 0) {
#line 486
          mode = 1;
#line 487
          min_tlow = 44;
#line 488
          min_thi = 20;
#line 489
          raise_fall_time = 58;
        } else {
#line 491
          mode = 0;
#line 492
          min_tlow = 157;
#line 493
          min_thi = 134;
#line 494
          raise_fall_time = 127;
        }
      }
    }
#line 501
    ______f___5.func = "pca_init";
#line 501
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 501
    ______f___5.line = 501U;
#line 501
    ______f___5.ldv_806.ldv_801.correct = 0UL;
#line 501
    ______f___5.ldv_806.ldv_801.incorrect = 0UL;
#line 501
    ______r___5 = clock___0 <= 647;
#line 501
    if (______r___5 != 0) {
#line 501
      ______f___5.ldv_806.ldv_805.hit = ______f___5.ldv_806.ldv_805.hit + 1UL;
    } else {
#line 501
      ______f___5.ldv_806.ldv_805.miss = ______f___5.ldv_806.ldv_805.miss + 1UL;
    }
#line 501
    if (______r___5 != 0) {
#line 502
      tlow = 255;
#line 503
      thi = 1000000 - clock___0 * raise_fall_time;
#line 504
      thi = thi / (clock___0 * 3 - tlow);
    } else {
#line 506
      tlow = (1000000 - clock___0 * raise_fall_time) * min_tlow;
#line 507
      tlow = tlow / (((min_thi + min_tlow) * clock___0) * 3);
#line 508
      thi = (tlow * min_thi) / min_tlow;
    }
#line 511
    (*(pca_data___0->reset_chip))(pca_data___0->data);
#line 513
    printk("<6>%s: Clock frequency is %dHz\n", (char *)(& adap->name), clock___0 * 100);
#line 516
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 6);
#line 517
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, mode);
#line 518
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 2);
#line 519
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, tlow);
#line 520
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 3);
#line 521
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, thi);
#line 523
    (*(pca_data___0->write_byte))(pca_data___0->data, 3, 64);
  }
#line 525
  __const_udelay(2147500UL);
#line 527
  return (0);
}
}
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int i2c_pca_add_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 537
  rval = pca_init(adap);
#line 538
  ______f.func = "i2c_pca_add_bus";
#line 538
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 538
  ______f.line = 538U;
#line 538
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 538
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 538
  ______r = rval != 0;
#line 538
  if (______r != 0) {
#line 538
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 538
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 538
  if (______r != 0) {
#line 539
    return (rval);
  } else {

  }
#line 541
  tmp = i2c_add_adapter(adap);
#line 541
  return (tmp);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;

  {
#line 549
  rval = pca_init(adap);
#line 550
  ______f.func = "i2c_pca_add_numbered_bus";
#line 550
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared";
#line 550
  ______f.line = 550U;
#line 550
  ______f.ldv_806.ldv_801.correct = 0UL;
#line 550
  ______f.ldv_806.ldv_801.incorrect = 0UL;
#line 550
  ______r = rval != 0;
#line 550
  if (______r != 0) {
#line 550
    ______f.ldv_806.ldv_805.hit = ______f.ldv_806.ldv_805.hit + 1UL;
  } else {
#line 550
    ______f.ldv_806.ldv_805.miss = ______f.ldv_806.ldv_805.miss + 1UL;
  }
#line 550
  if (______r != 0) {
#line 551
    return (rval);
  } else {

  }
#line 553
  tmp = i2c_add_numbered_adapter(adap);
#line 553
  return (tmp);
}
}
#line 580
void ldv_check_final_state(void) ;
#line 589
extern void ldv_initialize(void) ;
#line 592
extern void ldv_handler_precall(void) ;
#line 595
extern int nondet_int(void) ;
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/i2c/algos/i2c-algo-pca.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct i2c_adapter *var_group1 ;
  struct i2c_msg *var_group2 ;
  int var_pca_xfer_8_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 655
  LDV_IN_INTERRUPT = 1;
#line 664
  ldv_initialize();
#line 668
  goto ldv_17397;
  ldv_17396: 
#line 671
  tmp = nondet_int();
#line 671
  switch (tmp) {
  case 0: 
#line 696
  ldv_handler_precall();
#line 697
  pca_xfer(var_group1, var_group2, var_pca_xfer_8_p2);
#line 704
  goto ldv_17393;
  case 1: 
#line 728
  ldv_handler_precall();
#line 729
  pca_func(var_group1);
#line 736
  goto ldv_17393;
  default: ;
#line 737
  goto ldv_17393;
  }
  ldv_17393: ;
  ldv_17397: 
#line 668
  tmp___0 = nondet_int();
#line 668
  if (tmp___0 != 0) {
#line 669
    goto ldv_17396;
  } else {

  }


#line 746
  ldv_check_final_state();
#line 749
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/i2c/algos/i2c-algo-pca.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
